    package de.malban.vide.vedi.raster;


import de.malban.config.Configuration;
import de.malban.graphics.GFXVector;
import de.malban.graphics.Vertex;
import de.malban.gui.CSAMainFrame;
import de.malban.gui.ImageCache;
import de.malban.gui.Windowable;
import de.malban.gui.components.CSAView;
import de.malban.gui.components.ModalInternalFrame;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;

public class RasterPanel extends javax.swing.JPanel implements 
         Windowable{
    

    String orgName = "";

    private int mClassSetting=0;

    private CSAView mParent = null;
    private javax.swing.JMenuItem mParentMenuItem = null;
    @Override public boolean isIcon()
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return false;
        return frame.getInternalFrame(this).isIcon();
    }
    @Override public void setIcon(boolean b)
    {
        CSAMainFrame frame = ((CSAMainFrame)Configuration.getConfiguration().getMainFrame());
        if (frame.getInternalFrame(this) == null) return;
        try
        {
            frame.getInternalFrame(this).setIcon(b);
        }
        catch (Throwable e){}
    }
    @Override
    public void closing()
    {
        deinit();
    }
    @Override
    public void setParentWindow(CSAView jpv)
    {
        mParent = jpv;
    }
    @Override
    public void setMenuItem(javax.swing.JMenuItem item)
    {
        mParentMenuItem = item;
        mParentMenuItem.setText("ProjectWindow");

    }
    @Override
    public javax.swing.JMenuItem getMenuItem()
    {
        return mParentMenuItem;
    }
    @Override
    public javax.swing.JPanel getPanel()
    {
        return this;
    }
    public void deinit()
    {
    }

    /** Creates new form ProjectPropertiesPanel */
    public RasterPanel() {
        mClassSetting++;
        initComponents();
        mClassSetting--;

    }
    public void setImage(String filename)
    {
        orgName = filename;
        singleImagePanel1.setImage(orgName);
        
        if ((singleImagePanel1.getSourceWidth()>320) || (singleImagePanel1.getSourceHeight()>320))
            singleImagePanel1.scaleToFit();
        
        jTextFieldWidth.setText(""+singleImagePanel1.getSourceWidth());
        jTextFieldHeight.setText(""+singleImagePanel1.getSourceHeight());
        
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            jTextFieldVectorWitdh.setText(""+singleImagePanel1.getSourceWidth());
            jTextFieldVectorHeight.setText(""+singleImagePanel1.getSourceHeight());
        }
        jSliderSourceScaleStateChanged(null);
        buildVectors();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jButtonCreate = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jRadioButtonHorizontalVectors = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButtonAlphaAsGrayscale = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldWidth = new javax.swing.JTextField();
        jTextFieldHeight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldVectorWitdh = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldVectorHeight = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        singleImagePanel1 = new de.malban.graphics.SingleImagePanel();
        jSliderThreshold = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        singleVectorPanel1 = new de.malban.graphics.SingleVectorPanel();
        jSliderSourceScale = new javax.swing.JSlider();
        jCheckBoxGenerateData = new javax.swing.JCheckBox();
        jCheckBoxGenerateExampleCode = new javax.swing.JCheckBox();
        jCheckBoxIncludeBrightness = new javax.swing.JCheckBox();
        jCheckBoxAssume9Bit = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(700, 600));

        jButtonCreate.setText("create");
        jButtonCreate.setName("create"); // NOI18N
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jButtonCancel.setText("cancel");
        jButtonCancel.setName("cancel"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCancel)
                .addGap(86, 86, 86)
                .addComponent(jButtonCreate)
                .addGap(41, 41, 41))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonCancel)
                .addComponent(jButtonCreate))
        );

        buttonGroup1.add(jRadioButtonHorizontalVectors);
        jRadioButtonHorizontalVectors.setSelected(true);
        jRadioButtonHorizontalVectors.setText("horizontal vectors");
        jRadioButtonHorizontalVectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonHorizontalVectorsActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("vertical vectors");
        jRadioButton2.setEnabled(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("colors as grayscale");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButtonAlphaAsGrayscale);
        jRadioButtonAlphaAsGrayscale.setText("alpha as grayscale");
        jRadioButtonAlphaAsGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAlphaAsGrayscaleActionPerformed(evt);
            }
        });

        jLabel1.setText("size");

        jTextFieldWidth.setEditable(false);

        jTextFieldHeight.setEditable(false);

        jLabel2.setText("x");

        jLabel3.setText("vector \"size\"");

        jTextFieldVectorWitdh.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldVectorWitdhFocusLost(evt);
            }
        });

        jLabel4.setText("x");

        jTextFieldVectorHeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldVectorHeightFocusLost(evt);
            }
        });

        javax.swing.GroupLayout singleImagePanel1Layout = new javax.swing.GroupLayout(singleImagePanel1);
        singleImagePanel1.setLayout(singleImagePanel1Layout);
        singleImagePanel1Layout.setHorizontalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleImagePanel1Layout.setVerticalGroup(
            singleImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(singleImagePanel1);

        jSliderThreshold.setMajorTickSpacing(50);
        jSliderThreshold.setMaximum(255);
        jSliderThreshold.setMinorTickSpacing(5);
        jSliderThreshold.setPaintLabels(true);
        jSliderThreshold.setPaintTicks(true);
        jSliderThreshold.setValue(60);
        jSliderThreshold.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderThresholdStateChanged(evt);
            }
        });

        jLabel5.setText("threshold");

        javax.swing.GroupLayout singleVectorPanel1Layout = new javax.swing.GroupLayout(singleVectorPanel1);
        singleVectorPanel1.setLayout(singleVectorPanel1Layout);
        singleVectorPanel1Layout.setHorizontalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );
        singleVectorPanel1Layout.setVerticalGroup(
            singleVectorPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(singleVectorPanel1);

        jSliderSourceScale.setMajorTickSpacing(1);
        jSliderSourceScale.setMaximum(25);
        jSliderSourceScale.setMinimum(1);
        jSliderSourceScale.setMinorTickSpacing(1);
        jSliderSourceScale.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSourceScale.setPaintTicks(true);
        jSliderSourceScale.setSnapToTicks(true);
        jSliderSourceScale.setValue(20);
        jSliderSourceScale.setPreferredSize(new java.awt.Dimension(39, 292));
        jSliderSourceScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSourceScaleStateChanged(evt);
            }
        });

        jCheckBoxGenerateData.setSelected(true);
        jCheckBoxGenerateData.setText("generate data file");

        jCheckBoxGenerateExampleCode.setSelected(true);
        jCheckBoxGenerateExampleCode.setText("example code file");

        jCheckBoxIncludeBrightness.setText("include brightness data");
        jCheckBoxIncludeBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxIncludeBrightnessActionPerformed(evt);
            }
        });

        jCheckBoxAssume9Bit.setSelected(true);
        jCheckBoxAssume9Bit.setText("assume 9 bit shift");
        jCheckBoxAssume9Bit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAssume9BitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxGenerateExampleCode)
                    .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxGenerateData)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonHorizontalVectors)
                                    .addComponent(jRadioButton2))
                                .addGap(75, 75, 75)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonAlphaAsGrayscale)
                                    .addComponent(jRadioButton3)))
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBoxAssume9Bit)
                                        .addComponent(jCheckBoxIncludeBrightness))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldVectorWitdh, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldVectorHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSliderSourceScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldVectorWitdh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldVectorHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonHorizontalVectors)
                            .addComponent(jRadioButton3))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButtonAlphaAsGrayscale)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBoxIncludeBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxAssume9Bit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxGenerateData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGenerateExampleCode)
                .addContainerGap())
        );

        jTabbedPane1.addTab("image settings", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        createASMFile();
        
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jSliderSourceScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSourceScaleStateChanged
        int value = jSliderSourceScale.getValue();
        int max = jSliderSourceScale.getMaximum();

        double scale = value - ((max-1)/2);

        if (value <((max/2)+1))
        {
            int invScale = ((max/2)+2)-value;
            scale = 1.0/invScale;
        }
        singleVectorPanel1.setScale(scale);
        
    }//GEN-LAST:event_jSliderSourceScaleStateChanged

    private void jSliderThresholdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderThresholdStateChanged
        buildVectors();
    }//GEN-LAST:event_jSliderThresholdStateChanged

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButtonAlphaAsGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAlphaAsGrayscaleActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButtonAlphaAsGrayscaleActionPerformed

    private void jRadioButtonHorizontalVectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonHorizontalVectorsActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButtonHorizontalVectorsActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        buildVectors();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jTextFieldVectorWitdhFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVectorWitdhFocusLost
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorWitdhFocusLost

    private void jTextFieldVectorHeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVectorHeightFocusLost
        buildVectors();
    }//GEN-LAST:event_jTextFieldVectorHeightFocusLost

    private void jCheckBoxIncludeBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIncludeBrightnessActionPerformed
        buildVectors();
        jButtonCreate.setEnabled(!jCheckBoxIncludeBrightness.isSelected());
    }//GEN-LAST:event_jCheckBoxIncludeBrightnessActionPerformed

    private void jCheckBoxAssume9BitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAssume9BitActionPerformed
        buildVectors();
    }//GEN-LAST:event_jCheckBoxAssume9BitActionPerformed

    boolean wasMainSetManually = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JCheckBox jCheckBoxAssume9Bit;
    private javax.swing.JCheckBox jCheckBoxGenerateData;
    private javax.swing.JCheckBox jCheckBoxGenerateExampleCode;
    private javax.swing.JCheckBox jCheckBoxIncludeBrightness;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButtonAlphaAsGrayscale;
    private javax.swing.JRadioButton jRadioButtonHorizontalVectors;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSliderSourceScale;
    private javax.swing.JSlider jSliderThreshold;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldHeight;
    private javax.swing.JTextField jTextFieldVectorHeight;
    private javax.swing.JTextField jTextFieldVectorWitdh;
    private javax.swing.JTextField jTextFieldWidth;
    private de.malban.graphics.SingleImagePanel singleImagePanel1;
    private de.malban.graphics.SingleVectorPanel singleVectorPanel1;
    // End of variables declaration//GEN-END:variables

    
    // returns new Properties, not saved yet!
    JInternalFrame modelDialog;
    public static boolean showRasterPanel(String fileName)
    {
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        RasterPanel panel = new RasterPanel();
        panel.setImage(fileName);
        ArrayList<JButton> eb= new ArrayList<JButton>();
        eb.add(panel.jButtonCreate);
        eb.add(panel.jButtonCancel);
        ModalInternalFrame modal = new ModalInternalFrame("Raster image", frame.getRootPane(), frame, panel,null, null , eb);
        modal.setResizable(true);
        panel.modelDialog = modal;
        modal.setVisible(true);
        String result = modal.getNamedExit();
        if (result.equals("create"))
        {
            return true;
        }
        
        return false;
    }    
    ArrayList<Integer>[] shiftRegRows= new ArrayList[0];
    ArrayList<GFXVector>[] vectorRows= new ArrayList[0];
    void buildVectors()
    {
        // get orgImage
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());
        
        // only bytes in the image above a threshold are
        // counted as pixels
        int threshold = jSliderThreshold.getValue();
        
        BufferedImage scaledImage = ImageCache.getImageCache().getDerivatScale(orgImage, targetWidth, targetHeight);
        
        shiftRegRows= new ArrayList[targetHeight];
        vectorRows= new ArrayList[targetHeight];
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            int rowWidth = 0;
            if (!jCheckBoxIncludeBrightness.isSelected())
            {
                for (int y=0;y<targetHeight;y++)
                {
                    rowWidth = 0;
                    ArrayList<Integer> shiftRegRow = new ArrayList<Integer>();

                    // next shift reg value - 8 bit = 8 pixels of image
                    int shiftReg = 0;

                    // only pixels above the threshold count to average brightness
                    // brightness can only be set every 8 "pixels" -> one shift reg!
                    int bitCount = 0;
                    for (int x=0;x<targetWidth;x++)
                    {
                        int rgba =scaledImage.getRGB(x, y);
                        Color c = new Color(rgba);
                        boolean bit= false;
                        if (jRadioButtonAlphaAsGrayscale.isSelected())
                        {
                            // get alpha value
                            int A = (rgba >> 24) & 0xFF;
                            if (A>threshold)
                            {
                                bit = true;
                            }
                        }
                        else
                        {
                            // get color average as brightness
                            int R = c.getRed();
                            int G = c.getGreen();
                            int B = c.getBlue();
                            int brightness = (R+G+B)/3;
                            if (brightness>threshold)
                            {
                                bit = true;
                            }
                        }
                        if (bit) shiftReg++;
                        bitCount++;
                        if (bitCount == 8)
                        {
                            shiftRegRow.add(shiftReg);
                            rowWidth++;
                            shiftReg = 0;
                            bitCount = 0;

                            if (jCheckBoxAssume9Bit.isSelected())
                            {
                                // simple overstep one pixel
                                // the last pixel from above will be repeated 
                                x++;
                            }
                        }
                        shiftReg = shiftReg << 1;
                    }
                    while (bitCount<8)
                    {
                        bitCount++;
                        if (bitCount == 8)
                        {
                            shiftRegRow.add(shiftReg);
                            rowWidth++;
                        }
                        shiftReg = shiftReg << 1;
                    }
                    shiftRegRows[y] = shiftRegRow;
                }
            }
            else
            {
                for (int y=0;y<targetHeight;y++)
                {
                    rowWidth = 0;
                    ArrayList<GFXVector> vectorRow = new ArrayList<GFXVector>();
                    vectorRows[y] = vectorRow;
                    int oldGrayscale = -1;
                    boolean oldShown = false;
                    int xStart = 0;
                    int yStart = y;
                    for (int x=0;x<targetWidth;x++)
                    {
                        int rgba =scaledImage.getRGB(x, y);
                        Color c = new Color(rgba);
                        boolean shown = false;
                        int grayscale = 0;
                        if (jRadioButtonAlphaAsGrayscale.isSelected())
                        {
                            // get alpha value
                            int A = (rgba >> 24) & 0xFF;
                            if (A>threshold)
                            {
                                grayscale = A;
                                shown = true;
                            }
                        }
                        else
                        {
                            // get color average as brightness
                            int R = c.getRed();
                            int G = c.getGreen();
                            int B = c.getBlue();
                            int brightness = (R+G+B)/3;
                            if (brightness>threshold)
                            {
                                grayscale = brightness;
                                shown = true;
                            }
                        }
                        boolean forced = false;
                        if (x-xStart>126) forced = true; // maximal size of a vector!
                        
                        if ((forced) || (((oldShown != shown) || (oldGrayscale != grayscale)) && (oldGrayscale != -1))) // add old only if not first vector
                        {
                            // add old vector
                            GFXVector v = new GFXVector();
                            v.start.x(xStart-(targetWidth/2));
                            v.start.y(-yStart+(targetHeight/2));
                            v.end.x(x-1-(targetWidth/2));
                            v.end.y(-yStart+(targetHeight/2));
                            v.pattern = 0xff;
                            v.setIntensity(oldGrayscale);
                            xStart = x-1;
                            vectorRow.add(v);
                        }
                        oldShown = shown;
                        oldGrayscale = grayscale;
                    }
                    
                    // add old vector - allways!
                    GFXVector v = new GFXVector();
                    v.start.x(xStart-(targetWidth/2));
                    v.start.y(-yStart+(targetHeight/2));
                    v.end.x(targetWidth-1-(targetWidth/2));
                    v.end.y(-yStart+(targetHeight/2));
                    v.pattern = 0xff;
                    v.setIntensity(oldGrayscale);
                    vectorRow.add(v);
                }
            }
        }
        displayVectors();
    }
    void displayVectors()
    {
        singleVectorPanel1.setDrawVectorEnds(false);
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());
        singleVectorPanel1.clearVectors();
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            if (!jCheckBoxIncludeBrightness.isSelected())
            {
                int vy = 0 +(targetHeight/2);  
                for (int y=0; y<targetHeight; y++)
                {
                    int vx = 0 -(targetWidth/2);             
                    ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                    for (int x=0; x<shiftRegRow.size(); x++)
                    {
                        int brightness = 255;
                        int shiftreg = shiftRegRow.get(x);
                        for (int b=0; b<8; b++)
                        {
                            boolean bit = ((shiftreg&0x80)!=0);
                            shiftreg = shiftreg<<1;
                            int pattern = bit?255:0;

                            GFXVector v = new GFXVector();
                            v.start.x(vx);
                            v.start.y(vy);
                            v.end.x(vx+1);
                            v.end.y(vy);
                            v.pattern = pattern;
                            v.setIntensity(brightness);
                            singleVectorPanel1.addForegroundVector(v);
                            vx+=1;

                            if (jCheckBoxAssume9Bit.isSelected())
                            {
                                if (b == 7)
                                {
                                    v = new GFXVector();
                                    v.start.x(vx);
                                    v.start.y(vy);
                                    v.end.x(vx+1);
                                    v.end.y(vy);
                                    v.pattern = pattern;
                                    v.setIntensity(brightness);
                                    singleVectorPanel1.addForegroundVector(v);
                                    vx+=1;
                                }
                            }
                        }
                    }
                    vy--;
                }                
            }
            else
            {
                for (int y=0; y<targetHeight; y++)
                {
                    ArrayList<GFXVector> vectorRow = vectorRows[y];
                    for (GFXVector v: vectorRow)
                    {
                        singleVectorPanel1.addForegroundVector(v);
                    }
                }                
            }
        }
    }
    void createASMFile()
    {
        String baseName = orgName;
        int li = baseName.lastIndexOf(".");
        if (li>=0) 
            baseName = baseName.substring(0,li);

        String basebaseName = baseName;
        if (basebaseName.contains(File.separator))
        {
            basebaseName = basebaseName.substring(basebaseName.lastIndexOf(File.separator)+1);
        }
        
        StringBuffer out=new StringBuffer();
        BufferedImage orgImage = singleImagePanel1.getImage();
        int targetHeight = de.malban.util.UtilityString.IntX(jTextFieldVectorHeight.getText(), orgImage.getHeight());
        int targetWidth = de.malban.util.UtilityString.IntX(jTextFieldVectorWitdh.getText(), orgImage.getWidth());
        if (targetHeight == 0) return;
        
        if (jRadioButtonHorizontalVectors.isSelected())
        {
            singleVectorPanel1.clearVectors();
            if (jCheckBoxIncludeBrightness.isSelected())
            {
                out.append("; format:\n");
                out.append("; brightness, deltx, brightness, deltx...brightness, deltx,  -Value [negative brightness]\n");
                out.append("; ....\n");
                out.append("; brightness, deltx, brightness, deltx...brightness, deltx,  -Value [negative brightness]\n");
                out.append("; -Value [negative brightness]\n");
                out.append("; every second row is a 'backward' row\n");
                out.append("; backward rows have the direction reversed!\n");
                out.append("VScale equ 1\n");
                String vScaleString = "*VScale";
                out.append(basebaseName+"_data:\n");
              
                for (int y=0; y<targetHeight; y++)
                {
                    ArrayList<GFXVector> vectorRow = vectorRows[y];
                    out.append(" db ");
                    boolean start = true;
                    if ((y%2) == 0)
                    {
                        for (GFXVector v: vectorRow)
                        {
                            if (!start)
                                out.append(", ");
                            out.append(String.format("$%02X", v.getIntensity()/2));
                            int xvalue = (int)(v.end.x()-v.start.x()) &0xff;
                            if (xvalue >127)
                            {
                                xvalue -= 256;
                                out.append(", -"+  String.format("$%02X", -xvalue)+vScaleString);
                            }
                            else
                            {
                                out.append(",  "+  String.format("$%02X", xvalue)+vScaleString);
                            }
                            start = false;
                        }
                        out.append(", $ff ; one row of forward data\n");
                    }
                    else
                    {
                        for (int i=vectorRow.size()-1; i>=0; i--)
                        {
                            GFXVector v = vectorRow.get(i);
                            if (!start)
                                out.append(", ");
                            out.append(String.format("$%02X", v.getIntensity()/2));
                            int xvalue = (((int)(v.start.x()-v.end.x())) & 0xff );
                            if (xvalue >127)
                            {
                                xvalue -= 256;
                                out.append(", -"+  String.format("$%02X", -xvalue)+vScaleString);
                            }
                            else
                            {
                                out.append(",  "+  String.format("$%02X", xvalue)+vScaleString);
                            }
                            start = false;
                        }
                        out.append(", $ff ; one row of backward data\n");
                    }
                }                
                out.append(" db $ff ; end of data \n");
                
            }
            else
            {
                out.append("; format:\n");
                out.append("; height, width\n");
                out.append("; shiftreg, ...,  shiftreg\n");
                out.append("; ....\n");
                out.append("; shiftreg, ...,  shiftreg\n");
                out.append("; \n");
                out.append("; every second row is a 'backward' row\n");
                out.append("; backward rows have the direction AND the bits reversed!\n");
                out.append(basebaseName+"_data:\n");
                out.append(" db "+String.format("$%02X", targetHeight)+", "+ String.format("$%02X ", shiftRegRows[0].size()) +"\n");
                for (int y=0; y<targetHeight; y++)
                {
                    if ((y%2) == 0)
                    {
                        out.append(" db ");
                        ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                        for (int x=0; x<shiftRegRow.size(); x++)
                        {
                            int shiftreg = shiftRegRow.get(x);

                            if (x!=0) out.append(", ");
                            out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                        }
                        out.append("; forward\n");
                    }
                    else
                    {
                        out.append(" db ");
                        ArrayList<Integer> shiftRegRow = shiftRegRows[y];
                        for (int x=shiftRegRow.size()-1; x>=0; x--)
                        {
                            int shiftreg = shiftRegRow.get(x);
                            shiftreg = bitReverse8(shiftreg);
                            if (x!=(shiftRegRow.size()-1)) out.append(", ");
                            out.append("%"+String.format("%8s", Integer.toBinaryString(shiftreg)).replace(" ", "0"));
                            
                        }
                        out.append("; backward\n");
                    }
                }
                
                
            }
        }
        String asm = out.toString();
        
        String fileNameData = baseName + ".asm";
        String dataLabel = basebaseName+"_data";
        
        String pathName = Paths.get(fileNameData).getParent().toString();
        
        if (jCheckBoxGenerateData.isEnabled())
        {
            de.malban.util.UtilityFiles.createTextFile(fileNameData, asm);
        }
        if (jCheckBoxGenerateExampleCode.isEnabled())
        {
            Path template = Paths.get(".", "template", "rasterDraw.template");
            de.malban.util.UtilityFiles.copyOneFile(template.toString(), pathName+File.separator+"rasterDraw.asm");

            Path include = Paths.get(".", "template", "VECTREX.I");
            de.malban.util.UtilityFiles.copyOneFile(include.toString(), pathName+File.separator+ "VECTREX.I");
            
            
            template = Paths.get(".", "template", "rasterExampleMain.template");
            String exampleMain = de.malban.util.UtilityString.readTextFileToOneString(new File(template.toString()));
                    
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#DATAFILE#", basebaseName + ".asm");
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#RASTERDATA#", dataLabel);
                    
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#WIDTH#", "$40");
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#HEIGHT#", "10");
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#XPOS#", "-$40");
            exampleMain = de.malban.util.UtilityString.replace(exampleMain,"#YPOS#", "10");
            de.malban.util.UtilityFiles.createTextFile(pathName+File.separator+basebaseName+"Main.asm", exampleMain);
        }
        
        
    }
    int bitReverse8(int shiftreg)
    {
        int ret = 0;
        for (int b = 0; b<8; b++)
        {
            ret = ret >>1;
            if ((shiftreg & 0x80) != 0) ret = ret | 0x80;
            shiftreg = shiftreg <<1;
        }
        return ret;
    }
    
}
