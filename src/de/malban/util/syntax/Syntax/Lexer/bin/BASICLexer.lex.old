/* BASICLexer.java is a generated file.  You probably want to
 * edit BASICLexer.lex to make changes.  Use JFlex to generate it.
 * To generate BASICLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main BASICLexer.lex</code><br>
 * You will then have a file called BASICLexer.java
 */

package de.malban.util.syntax.Syntax.Lexer;

import java.io.*;
import java.util.HashMap;
import de.malban.vide.vedi.VediPanel;

/** 
 * BASICLexer is a BASIC lexer.  Created with JFlex.  An example of how it is used:


Not respected is "junk" after the operands. 
After the operand field all additional chars are just scanned as if they were additional operand values!



 *  <CODE>
 *  <PRE>
 *  BASICLexer shredder = new BASICLexer(System.in);
 *  BASICToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 */ 

%%

%public
%class BASICLexer
%implements Lexer
%function getNextToken
%type Token 

%{
    private int lastToken;
    private int nextState=YYINITIAL;
    public BASICLexer(java.io.InputStream in) 
    {
        this(new java.io.InputStreamReader(in));
    }

	  /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            BASICLexer shredder = new BASICLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != BASICToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}
%}

%line
%column
%char
%full
%ignorecase




keywordsBASICCall=("call")

keywordsBASIC=("bp"|"clear"|"chain"|"continue"|"dim"|"dir"
|"exit"|"for"|"repeat"|"while"
|"next"|"function"|"endfunction"|"if"|"then"|"else"|"elseif"
|"endif"|"let"|"load"|"mem"|"print"|"return"|"reload"|"rerun"|"until"|"rem"
|"run"|"step"|"sub"|"endsub"|"tron"|"troff"|"endwhile")

constantsBASIC=("false"|"true"|"pi"|"nil")

functionBASIC=("abs"|"acos"|"appendarrays"|"asin"|"atan"|"chr"|"copyarray"|"cos"
|"dir"|"float"|"int"|"left"|"len"|"max"|"mid"|"min"|"rand"
|"randomize"|"right"|"round"|"sin"|"sqrt"|"strcomp"|"tan"
|"tolower" |"toupper" |"truncate" |"right" |"ubound")

constantsVec32=("controller1"|"controller2"|"controllernone"|"joystickanalog"|"joystickdigital"
|"joysticknone"|"joystickx"|"joysticky"|"drawto"|"moveto")

functionVec32=("abc"|"clearscreen"|"distance"|"dotssprite"|"dumpsprite"|"dumpsprites"|"getframerate"|"intensitysprite"
|"linessprite"|"movesprite"|"music"|"musicisplaying"|"offset"|"peek"|"play"|"ptinrect"|"putspriteafter"
|"putspritebefore"|"regularpolygon"|"removesprite"|"returntooriginsprite"|"scalesprite"|"setframerate"|"spriteclip"
|"spriteenable" |"spritegetrotation" |"spriteintensity" |"spritemove" |"spriterotate"
|spritescale" |"spritesetmagnification" |"spritesetrotation" |"spritetranslate" |"textlistsprite"|textsizesprite" |"textsprite" |"version" |"waitforframe" )


HexDigit=([0-9a-fA-F])
Digit=([0-9])
NonZeroDigit=([1-9])
BLANK=([ ])
TAB=([\t])
FF=([\f])
EscChar=([\\])
WhiteSpace=({BLANK}|{TAB}|{FF})
AnyNonSeparator=([^\t\f\r\n\ \(\)\{\}\[\]\;\,\.\=\>\<\!\~\?\:\+\-\*\/\&\|\^\%\"])
Escape=({EscChar}([r]|[n]|[b]|[f]|[t]|[\\]|[\"]))
ErrorIdentifier=({AnyNonSeparator}+)

Comment1=("//"[^\r\n]*)
Comment=("'"[^\r\n]*)
Comment3= ({Comment1}{Comment2})


Sign=([\+]|[\-])
LongSuffix=([l]|[L])
DecimalNum=(([0]|{NonZeroDigit}{Digit}*))
HexNum=([0]([x]|[X]){HexDigit}{HexDigit}*)
DecimalLong=({DecimalNum}{LongSuffix})
HexLong=({HexNum}{LongSuffix})

SignedInt=({Sign}?{Digit}+)
Expo=([e]|[E])
ExponentPart=({Expo}{SignedInt})
FloatSuffix=([f]|[F])
DoubleSuffix=([d]|[D])
FloatDouble1=({Digit}+[\.]{Digit}*{ExponentPart}?)
FloatDouble2=([\.]{Digit}+{ExponentPart}?)
FloatDouble3=({Digit}+{ExponentPart})
FloatDouble4=({Digit}+)
Double1=({FloatDouble1}{DoubleSuffix}?)
Double2=({FloatDouble2}{DoubleSuffix}?)
Double3=({FloatDouble3}{DoubleSuffix}?)
Double4=({FloatDouble4}{DoubleSuffix})
Float1=({FloatDouble1}{FloatSuffix})
Float2=({FloatDouble2}{FloatSuffix})
Float3=({FloatDouble3}{FloatSuffix})
Float4=({FloatDouble4}{FloatSuffix})
Float=({Float1}|{Float2}|{Float3}|{Float4})
Double=({Double1}|{Double2}|{Double3}|{Double4}) 

ZeroFloatDouble1=([0]+[\.][0]*{ExponentPart}?)
ZeroFloatDouble2=([\.][0]+{ExponentPart}?)
ZeroFloatDouble3=([0]+{ExponentPart})
ZeroFloatDouble4=([0]+)
ZeroDouble1=({ZeroFloatDouble1}{DoubleSuffix}?)
ZeroDouble2=({ZeroFloatDouble2}{DoubleSuffix}?)
ZeroDouble3=({ZeroFloatDouble3}{DoubleSuffix}?)
ZeroDouble4=({ZeroFloatDouble4}{DoubleSuffix})
ZeroFloat1=({ZeroFloatDouble1}{FloatSuffix})
ZeroFloat2=({ZeroFloatDouble2}{FloatSuffix})
ZeroFloat3=({ZeroFloatDouble3}{FloatSuffix})
ZeroFloat4=({ZeroFloatDouble4}{FloatSuffix})
ZeroFloat=({ZeroFloat1}|{ZeroFloat2}|{ZeroFloat3}|{ZeroFloat4})
ZeroDouble=({ZeroDouble1}|{ZeroDouble2}|{ZeroDouble3}|{ZeroDouble4})

ErrorFloat=({Digit}({AnyNonSeparator}|[\.])*)


AnyStrChr=([^\"\n\r\\])
UnclosedString=([\"]({Escape}|{AnyStrChr})*)
String=({UnclosedString}[\"])
MalformedUnclosedString=([\"]({EscChar}|{AnyStrChr})*)
MalformedString=({MalformedUnclosedString}[\"])


%%

<YYINITIAL> "(" { 
    nextState = YYINITIAL;
    lastToken = BASICToken.SEPARATOR_LPAREN;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
    }
<YYINITIAL> ")" {
    nextState = YYINITIAL;
    lastToken = BASICToken.SEPARATOR_RPAREN;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "[" {
    nextState = YYINITIAL;
    lastToken = BASICToken.SEPARATOR_LBRACKET;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "]" {
    nextState = YYINITIAL;
    lastToken = BASICToken.SEPARATOR_RBRACKET;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "." {
    nextState = YYINITIAL;
    lastToken = BASICToken.SEPARATOR_PERIOD;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "=" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_ASSIGN;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> ">" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_GREATER_THAN;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "<" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_LESS_THAN;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "!" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "~" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_BITWISE_COMPLIMENT;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "?" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_QUESTION;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> ":" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_COLON;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "+" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_ADD;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "-" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_SUBTRACT;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "*" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_MULTIPLY;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "/" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_DIVIDE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "&" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_BITWISE_AND;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "|" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_BITWISE_OR;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "^" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_BITWISE_XOR;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "%" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_MOD;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "==" {
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_EQUAL;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "<=" { 
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_LESS_THAN_OR_EQUAL;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> ">=" { 
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "!=" { 
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_NOT_EQUAL;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> "||" { 
    nextState = YYINITIAL;
    lastToken = BASICToken.OPERATOR_LOGICAL_OR;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
// is the foun a pseudo opcode?
<YYINITIAL> {keywordsBASIC} 
{
    nextState = YYINITIAL;
    lastToken = BASICToken.RESERVED_ASMWORD;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
}
<YYINITIAL> {keywordsBASICCall} 
{
    nextState = YYINITIAL;
    lastToken = BASICToken.RESERVED_ASMWORD;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return(t);
}
<YYINITIAL>{constantsBASIC} 
{ 
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_VARIABLE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL>{constantsVec32} 
{ 
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_VARIABLE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL>{functionBASIC} 
{ 
    nextState = YYINITIAL;
    lastToken = BASICToken.IDENTIFIER;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL>{functionVec32} 
{ 
    nextState = YYINITIAL;
    lastToken = BASICToken.IDENTIFIER;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {DecimalNum} {
    /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */     
    nextState = YYINITIAL;
    String text = yytext();
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == BASICToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + text);
        } else {
            Integer.decode(text);
        }
        lastToken = BASICToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = BASICToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {HexNum} {
    /* A Hex number cannot be too big.  After removing 
     * initial zeros, It can have 8 digits
     */
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;    
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = BASICToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        lastToken = BASICToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {DecimalLong} { 
    nextState = YYINITIAL;
    String text = yytext();
    try {
        if (lastToken == BASICToken.OPERATOR_SUBTRACT){
            Long.decode('-' + text.substring(0,text.length()-1));
        } else {
            Long.decode(text.substring(0,text.length()-1));
        }
        lastToken = BASICToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){  
        lastToken = BASICToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}

<YYINITIAL> {HexLong} {
    /* A Hex long cannot be too big.  After removing 
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    String text = yytext();
    int length = text.length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (text.charAt(i) != '0'){ 
            lastToken = BASICToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        lastToken = BASICToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {ZeroFloat} {
    /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_FLOATING_POINT;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {ZeroDouble} {
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_DOUBLE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {Float} {
    /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */ 
    nextState = YYINITIAL;
    Float f;
    try {
        f = Float.valueOf(yytext());
        if (f.isInfinite() || f.compareTo(new Float(0f)) == 0){
            lastToken = BASICToken.ERROR_FLOAT_SIZE;
        } else {
            lastToken = BASICToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        lastToken = BASICToken.ERROR_FLOAT_SIZE;
    }
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {Double} {
    nextState = YYINITIAL;
    Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            lastToken = BASICToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = BASICToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = BASICToken.ERROR_DOUBLE_SIZE;
    } 
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {String} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.LITERAL_STRING;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> ({WhiteSpace}+) { 
    nextState = YYINITIAL;
    lastToken = BASICToken.WHITE_SPACE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}

<YYINITIAL> {Comment} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.COMMENT_END_OF_LINE;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
    }
/*    
<YYINITIAL> {Comment} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.COMMENT_END_OF_LINE;
    String text = yytext();
  	CToken t = (new CToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}    
*/
<YYINITIAL> {UnclosedString} { 
    /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    nextState = YYINITIAL;
    lastToken = BASICToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {MalformedUnclosedString} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.ERROR_MALFORMED_UNCLOSED_STRING;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {MalformedString} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.ERROR_MALFORMED_STRING;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {ErrorFloat} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.ERROR_FLOAT;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}
<YYINITIAL> {ErrorIdentifier} { 
    nextState = YYINITIAL;
    lastToken = BASICToken.ERROR_IDENTIFIER;
    String text = yytext();
    BASICToken t = (new BASICToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
}