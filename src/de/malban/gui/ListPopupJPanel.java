/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.gui;

import de.malban.config.Configuration;
import de.malban.gui.components.ModalInternalFrame;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Malban
 */
public class ListPopupJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListPopupJPanel
     */
    public ListPopupJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    String ret = "";
    
    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) 
        {
            Object i = jList1.getSelectedValue();
            if (i!=null)
            {
                ret = i.toString();
            }
            modal.setVisible(false);
        }
            

    }//GEN-LAST:event_jList1KeyPressed

    ModalInternalFrame modal;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public static String showListDialog(ArrayList<String> list, int x, int y)
    {
        Configuration C = Configuration.getConfiguration();
        if (C.getMainFrame() == null) {
            return "";
        }
        JFrame frame = Configuration.getConfiguration().getMainFrame();
        ListPopupJPanel si = new ListPopupJPanel();
        
        DefaultListModel listenModell = new DefaultListModel();
        si.jList1.setModel(listenModell);
        for (String l: list ) listenModell.addElement(l);
        if (list.size()>0)
            si.jList1.setSelectedIndex(0);
        si.modal = new ModalInternalFrame("Info", frame.getRootPane(), frame, si);

        Rectangle b=si.modal.getBounds();
        b.x=x;
        b.y=y;
        
        si.modal.setBounds(b);
        BasicInternalFrameUI bi = (BasicInternalFrameUI)si.modal.getUI();
        bi.setNorthPane(null);

      
        KeyEventDispatcher ked = new KeyEventDispatcher() {
                public boolean dispatchKeyEvent(KeyEvent e) 
                {
                    if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
                    {
                        si.ret = "";
                        si.modal.setVisible(false);
                        return true;
                    }
                    return false;
                }
            };
        
KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher( ked);        
        si.modal.setVisible(true);        
KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(ked);      
        return si.ret;
        
        
    }
}
