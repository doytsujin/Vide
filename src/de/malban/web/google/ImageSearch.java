/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.malban.web.google;

import de.malban.Global;
import de.malban.config.Configuration;
import de.malban.gui.components.ModalInternalFrame;
import de.malban.gui.dialogs.QuickHelpModal;
import de.malban.util.UtilityImage;
import de.malban.util.UtilityString;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.OutputStream;
import java.net.Proxy;
import java.net.URL;
import java.util.List;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.text.html.HTMLDocument;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.params.AllClientPNames;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;

/**
 *
 * @author Malban
 */
public class ImageSearch extends javax.swing.JPanel {

    /**
     * Creates new form ImageSearch
     */
    interface Listener
    {
        void charChanged(char v);
    }
    class ResultString extends OutputStream
    {
        private Vector<Listener> mListener= new Vector<Listener>();
        public String text="";
        public OutputStream out = this;
        void reset() {text = "";mListener= new Vector<Listener>();}
        public void write( int b )
        {
            text += (char) b;
            fireCharAdded((char) b);
        }
        public void fireCharAdded(char b)
        {
            for (int i=0; i<mListener.size(); i++)
                mListener.elementAt(i).charChanged(b);
        }
        public void addListerner(Listener listener)
        {
            mListener.removeElement(listener);
            mListener.addElement(listener);
        }

        public void removeListerner(Listener listener)
        {
            mListener.removeElement(listener);
        }
    }

    DefaultHttpClient httpclient = null;
    ResultString mPage=new ResultString();
    HttpResponse response;
    HttpEntity entity;
    List<Cookie> cookies;

    String setBaseUrl="";
    String setProtocoll="";
    String setPostCommands="";
    String mSUrl ="";
    
    boolean randomOnly = false;
    JInternalFrame modelDialog;
    public ImageSearch(boolean rndOnly) 
    {
        initComponents();
        randomOnly = rndOnly;
        jLabelBusy.setVisible(false);

        if (!randomOnly)
        {
            JFrame frame = Configuration.getConfiguration().getMainFrame();
            JInternalFrame modal = new ModalInternalFrame("Image search", frame.getRootPane(), frame, this, jButton2);
            this.modelDialog = modal;
        }
    
    }
    
    public void setSearch(String text)
    {
        jTextFieldSearch.setText(text);
    }

    public void setVisible(boolean v)
    {
        if (randomOnly) return;
        modelDialog.setVisible(v);
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelBusy = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 700));

        jTextFieldSearch.setText("Amiga Battle Squadron");

        jLabel1.setText("Search string");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 600));

        jPanel1.setPreferredSize(new java.awt.Dimension(700, 700));
        jPanel1.setSize(new java.awt.Dimension(700, 700));
        jPanel1.setLayout(null);
        jScrollPane1.setViewportView(jPanel1);

        jLabelBusy.setText("busy");

        jButton2.setText("Done");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelBusy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jLabelBusy)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    boolean mBuisy=false;
    void buisy(boolean b)
    {
        mBuisy = b;
        jLabelBusy.setVisible(mBuisy);
        jLabelBusy.invalidate();
        jLabelBusy.validate();
        jLabelBusy.repaint();
        jLabelBusy.paintImmediately(0,0,jLabelBusy.getWidth(),jLabelBusy.getHeight());
        jPanel1.invalidate();
        jPanel1.validate();
        jPanel1.repaint();
       jPanel1.paintImmediately(0,0,jPanel1.getWidth(),jPanel1.getHeight());
    }
    private void buildClient()
    {
        httpclient = new DefaultHttpClient();
        httpclient.getParams().setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS,  Boolean.TRUE);
        //httpclient.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,  Boolean.FALSE);
    }
    void buildUrl()
    {
        String search = jTextFieldSearch.getText();
        search = UtilityString.replace(search, " ", "+");
        search  = UtilityString.toXML(search);
        setProtocoll="http://";
        setBaseUrl="www.google.de/search?q="+search+"&biw=2110&bih=1149&tbm=isch&source=lnms&sa=X&tbs=itp:photo,isz:m&tbm=isch&sout=1";
   
//       setPostCommands=jTextFieldSetPostCommands.getText();
        mSUrl =setProtocoll + setBaseUrl+setPostCommands;
//        httpclient.getParams().setParameter(AllClientPNames.USER_AGENT,  "Happy-Browser/1.0 (HCA-X-Systems; U; NT4.0; en-US; rv:1.0) Frogger/1020101");
        httpclient.getParams().setParameter(AllClientPNames.USER_AGENT,  "httpclient/4.02 (Java 1.6; 0;0) Java Engine");

    }
    private void doGet(HttpGet httpget) throws java.io.IOException
    {
        response = httpclient.execute(httpget);
        if (response.getStatusLine().getStatusCode()!=200)
        {
//            addLog("Watch the status!");
//            addLog(response.getStatusLine().toString());
        }
    }
    Proxy proxy = Proxy.NO_PROXY;
    public void setProxy(Proxy p)
    {
        proxy = p;
    }
    JButton selectedButton = null;
    private void jImageClickedActionPerformed(java.awt.event.ActionEvent evt) 
    {
        selectedButton = (JButton) evt.getSource();
        setVisible(false);
    }
    public BufferedImage getSelectedImage()
    {
        if (selectedButton== null) return null;
        ImageIcon icon = (ImageIcon)selectedButton.getIcon();

        return UtilityImage.toBufferedImage(icon.getImage());
    }
    public BufferedImage getRandomImage()
    {
        doIt();
        
        Component[] c = jPanel1.getComponents();
        
        int count = c.length;
        if (c.length == 0) return null;
        
        java.util.Random ran = Global.getRand();    
        
        int sel = ran.nextInt(count);
        selectedButton = (JButton)c[sel];
        
        ImageIcon icon = (ImageIcon)selectedButton.getIcon();
        return UtilityImage.toBufferedImage(icon.getImage());
    }
    
    public void doIt()
    {
        if (mBuisy) return;
        buisy(true);
        try
        {
            if (httpclient == null) buildClient();

            buildUrl();
            HTMLDocument d = new HTMLDocument();
            d.setBase(new URL(setProtocoll+setBaseUrl));
            HttpGet httpget = new HttpGet(mSUrl);

            doGet(httpget);
            entity = response.getEntity();

            mPage.reset();
            response.getEntity().writeTo(mPage);

            synchronized (Thread.currentThread())
            {
                Thread.currentThread().wait(10);
            }

            mPage.addListerner(new Listener()
            {
                public void charChanged(char c)
                {
                    setHTMLText(mPage.text);
                }
            });
            setHTMLText(mPage.text);
            if (entity != null) entity.consumeContent();
            cookies = httpclient.getCookieStore().getCookies();
        }
        catch (Throwable e)
        {
            e.printStackTrace();
        }
        
        int pos = 0;
        boolean imageUrlFound = false;
        Vector<String> urls = new Vector<String>();
        do
        {
            imageUrlFound = false;
            int spos = mPage.text.indexOf("<a href=\"/url?q", pos)+"<a href=\"/url?q".length();
            if (spos-"<a href=\"/url?q".length() != -1 )
            {
                imageUrlFound = true;
                spos = mPage.text.indexOf("src=\"", spos)+"src=\"".length();
                int epos = mPage.text.indexOf("\"", spos);
                
                String oneUrl = mPage.text.substring(spos, epos);
                urls.addElement(oneUrl);
                pos = epos+1;
            }
        } while (imageUrlFound);
        
        BufferedInputStream in;
        int x = 0;
        int y = 0;
        int maxH = 0;
        jPanel1.removeAll();
        for (int i=0; i<urls.size(); i++)
        {
            String urlS = urls.elementAt(i);
            
            try
            {

               in = new BufferedInputStream(new URL(urlS).openConnection(proxy).getInputStream());
               Image currentImage = javax.imageio.ImageIO.read( in );

               while (currentImage.getHeight(null)  == -1) ;


               Icon icon = new ImageIcon(currentImage);
               JButton label = new JButton();
                label.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jImageClickedActionPerformed(evt);
                    }
                });
               
               label.setIcon(icon);
               label.setBounds(x, y, currentImage.getWidth(null), currentImage.getHeight(null));

               x += icon.getIconWidth() + 5;
               
               if (maxH <currentImage.getHeight(null)) 
                   maxH =currentImage.getHeight(null);
               if (x > 500)
               {
                   x=0;
                   y += maxH+5;
                   maxH = 0;
               }
               
               jPanel1.add(label);
                jPanel1.invalidate();
                jPanel1.validate();
                jPanel1.repaint();
               jPanel1.paintImmediately(0,0,jPanel1.getWidth(),jPanel1.getHeight());
               in.close();

           } catch(Exception e)
           {
               e.printStackTrace();
           }
                    
        }
        jPanel1.invalidate();
        jPanel1.validate();
        jPanel1.repaint();
        invalidate();
        validate();
        repaint();
        
        buisy(false);    
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        doIt();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        modelDialog.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    void setHTMLText(String text)
    {
    //    if(showSoure)
    //        jTextAreaSource.setText(text);

    //    if (!showFormat) return;

        String newText = text;
        int headEnd = newText.indexOf("</HEAD>");
        if (headEnd != -1)
        {
            newText = text.substring(headEnd+"</HEAD>".length());
        }
        else
        {
            headEnd = newText.indexOf("</head>");
            if (headEnd != -1)
            {
                newText = text.substring(headEnd+"</head>".length());
            }
        }



        newText = UtilityString.replace(newText, "</HTML>", "");
        newText = UtilityString.replace(newText, "</html>", "");
//        HTMLDocument d = (HTMLDocument) jTextPaneFormat.getDocument();
     //   jTextPaneFormat.setText(newText);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelBusy;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
