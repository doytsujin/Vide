{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Verdana;\f2\fmodern\fcharset0 CourierNewPS-BoldMT;
\f3\fmodern\fcharset0 CourierNewPSMT;\f4\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\info
{\author Alex Herbert}
{\*\company  }}\margl1440\margr1440\vieww20880\viewh21500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 II
\f1\b\fs32 AtariVox Programmer's Guide
\b0 \
\pard\pardeftab720\qc\partightenfactor0

\fs28 \cf0 By Alex Herbert
\fs20 \
\
Last revised: 16th November 2004\
\
\
\
\
\pard\pardeftab720\qc\partightenfactor0

\i\fs28 \cf0 --- DRAFT ---\
\pard\pardeftab720\ri28\partightenfactor0

\i0\fs20 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf0 AtariVox\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
Pinout:\
\
	
\b Pin\

\b0 	1	SpeakJet DATA\
	2	SpeakJet READY\
	3	EEPROM SDA\
	4	EEPROM SCL\
	5\
\pard\pardeftab720\fi720\partightenfactor0
\cf0 6\
\pard\pardeftab720\partightenfactor0
\cf0 	7	+5v\
	8	GND\
	9\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf0 SpeakJet Speech Synth
\b0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 \
The AtariVox uses a SpeakJet chip to synthesize speech.  Speech is constructed from strings of allophones \'96 the individual sounds that make up speech.  Refer to the SpeakJet User Manual PDF from 
\b \ul www.speakjet.com
\b0 \ulnone  for details of the allophone/control codes.\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf0 Communication with the SpeakJet\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
The SpeakJet receives speech data via asynchronous serial interface, pre-configured to operate at 19,200 baud (8n1, inverted).  The DATA line is connected to pin 1 of the 2nd joystick socket (bit 0 of 
\f2\b SWCHA
\f1\b0 ) and the READY line is connected to pin 2 (bit 1 of 
\f2\b SWCHA
\f1\b0 ).\
\
The READY line may be read to detect whether the SpeakJet is able receive data.  If this reads 0 then the chip is not ready (i.e. the input buffer is full) and data should not be sent at this time.\
\
The data is sent in 8n1 format (1 start bit, 8 data bits, no parity, 1 stop bit) but is inverted compared to normal RS-232.  The DATA line should be held high whilst idle (between data transmissions) either by setting the pin to input mode, or to output 1 (same thing).\
\
To transmit a byte, each bit (1 start bit, 8 data bits and 1 stop bit) are output on the DATA line at intervals of 1/19,200th of a second.  For the Atari 2600, an interval of 62 CPU clock cycles is a close enough match.  First is the start bit, which is always 0.  Then the 8 data bits, least significant bit first.  And lastly the stop bit which is always 1 (returning the DATA line to idle).  The stop bit must be present on the DATA line for at least 62 cycles.\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf0 Driver Code\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
The include file 
\f2\b speakjet.inc
\f1\b0  contains 2 macros which will simplify adding speech to your project.\
\
The code requires a 2-byte RAM variable 
\f2\b speech_addr
\f1\b0  to be defined which will hold the address of the next byte to be transmitted to the SpeakJet.  Speech data is organised as strings of allophone/control codes.  Each string must be terminated with the byte 
\f2\b $ff
\f1\b0 .\
\
The 
\f2\b SPKOUT
\f1\b0  macro defines code which checks the status of the READY line, reads the next byte from the speech string and sends it to the SpeakJet.  It requires one additional byte of RAM for use as a temporary scratchpad.  The following subroutine outputs one byte using the variable 
\f2\b temp
\f1\b0  as it's temporary workspace:\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 	output_speech\
		SPKOUT	temp\
		rts\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
Calling 
\f2\b output_speech
\f1\b0  once per frame (during the vertical blank or overscan periods) is normally sufficient to keep the SpeakJet adequately supplied with speech data.  Handy, because it takes roughly 8 TV scanlines to transmit a single byte.\
\
Then to start some speech it's just a case of pointing 
\f2\b speech_addr
\f1\b0  to the start of a speech string.  The 
\f2\b SPEAK
\f1\b0  macro sets this pointer:\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 	say_hello\
		SPEAK		hello_speech\
		rts\
\
	hello_speech\
		dc.b		20,96				; volume = 96\
		dc.b		21,114			; speed = 114\
		dc.b		22,88				; pitch = 88\
		dc.b		23,5				; bend = 23\
		dc.b		183,7,159,146,164		; \\HE \\FAST \\EHLE \\LO \\OWWW\
		dc.b		$ff				; terminator byte\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Note:
\b0   
\f2\b speech_addr
\f1\b0  must be pointing to a valid speech string before 
\f2\b SPKOUT
\f1\b0  is executed.\
\
Also see the included example program: 
\f2\b vox_test.asm
\f1\b0 \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf0 EEPROM
\b0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 \
The memory device used in the AtariVox is the Microchip 24LC256 (or compatible) which provides 32KBytes of non-volatile storage.\
\
Like the SpeakJet, the EEPROM also communicates via serial interface but uses the I2C protocol which is quite different.  Rather than transmitting bits at a pre-determined time interval, data is clocked in/out of the chip by the controlling device (the console).\
\
The EEPROM's SDA (
\b S
\b0 erial 
\b DA
\b0 ta) line is connected to pin 3 of the joystick port (bit 2 of 
\f2\b SWCHA
\f1\b0 ) and SCL (
\b S
\b0 erial 
\b CL
\b0 ock) is connected to pin 4 (bit 3 of 
\f2\b SWCHA
\f1\b0 ).\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf0 I2C Protocol\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
Without going into great detail about the actual state changes on the I/O pins (for full details refer to the 24LC256 datasheet from 
\b \ul www.microchip.com
\b0 \ulnone ) the I2C protocol can be broken down into 4 basic signals: Start, Stop, Write Bit and Read Bit.  The Start signal is used to start a read/write operation and Stop is used to terminate a read/write.  Data is read/written a byte at a time (most significant bit first).  After each byte transmitted, the receiving device responds by transmitting an acknowledge bit (normally 0).\
\
Start signals are always followed by a command byte: 
\f2\b $a0
\f1\b0  to enable writing to the EEPROM or 
\f2\b $a1
\f1\b0  to enable reading.\
\
The Write command is always followed by 2-bytes representing the 16-bit start address (high byte first).  Subsequent bytes are then written to the EEPROM\'92s internal buffer and will be committed to non-volatile memory on receipt of the next Stop signal.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Note:
\b0   The 26LC256 memory is segmented into 64-byte pages and it is only possible to write to a single page at a time.  Attempting to perform a write operation that crosses a page boundary will cause the internal memory pointer to loop back to the start of the current page.\
\
The Read command does not set the start address and reading starts immediately using the current memory pointer.  To set the start address for reading, a \'93fake\'94 Write is used.  This consists of a Start signal, 
\f2\b $a0
\f1\b0  Write command byte, 2 address bytes and a Stop signal \'96 i.e. no data.  Then it\'92s just a case of issuing a Start signal followed by the Read command 
\f2\b $a1
\f1\b0  to enable reading from the newly set address.\
\
An acknowledgement bit (0) must be transmitted after each byte read, except for the last byte where a no-acknowledge (1) should be used.  (This is to prevent the chip from transmitting the next byte, possibly obscuring the Stop signal.)  There is no limit on the number of byte than can be read in one go.\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf0 EEPROM Driver Code\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
The 
\f2\b i2c.inc
\f1\b0  include file defines macros/subroutines that take care of the low level signalling.  The subroutines defined in the 
\f2\b I2C_SUBS
\f1\b0  macro require 1 byte of RAM as a temporary workspace which should be specified when the macro is invoked.  For example:\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 	I2C_SUBS	temp
\f1 \cf0 \
\
\
The subroutines are:\
\
\pard\pardeftab720\li2160\fi-2160\partightenfactor0

\f2\b \cf0 i2c_startwrite
\f1\b0 	Outputs a Start signal and transmits the byte 
\f2\b $a0
\f1\b0  to initiate a write sequence.\
\

\f2\b i2c_startread
\f1\b0 	Outputs a Start signal and transmits the byte 
\f2\b $a1
\f1\b0  to initiate a read sequence.\
\

\f2\b i2c_txbyte
\f1\b0 	Transmits the byte in A, returning the acknowledge bit in C.  The carry flag will be clear (0) if the byte was received ok, or set (1) if the device wasn't ready or is not connected.\
\

\f2\b i2c_rxbyte
\f1\b0 	Reads one byte and returns it in A.\
\

\f2\b i2c_stopwrite
\f1\b0 	Outputs a Stop signal terminating the write sequence and commits the data to the EEPROM.\
\

\f2\b i2c_stopread
\f1\b0 	Outputs a no-acknowledge bit followed by a Stop signal, terminating a read sequence.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Writing to the EEPROM
\b0 \
\
Writes to the EEPROM begin with a Start signal followed by the command byte 
\f2\b $a0
\f1\b0 .  Then 2 bytes representing the start address are written (high byte first) followed by the actual data and a Stop signal.\
\
For example, the following code writes 8 bytes from 
\f2\b buffer
\f1\b0  to EEPROM addresses 
\f2\b $0140-$0147
\f1\b0 :\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 		jsr	i2c_startwrite	; Start signal and $a0 command byte\
		bcs	eeprom_error	; exit if command byte not acknowledged\
\
		lda	#$01			; upper byte of address\
		jsr	i2c_txbyte\
		lda	#$40			; lower byte of address\
		jsr	i2c_txbyte\
\
		ldx	#$00\
	write_loop\
		lda	buffer,x		; get byte from RAM\
		jsr	i2c_txbyte		; transmit to EEPROM\
		inx\
		cpx	#$08			; 8 bytes sent?\
		bne	write_loop\
\
		jsr	i2c_stopwrite	; terminate write and commit to memory
\f1 \cf0 \
\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Note:
\b0   If no EEPROM is detected, this code jumps to 
\f2\b eeprom_error
\f1\b0  which should call 
\f2\b i2c_stopwrite
\f1\b0  (to restore the I/O port to it\'92s normal state) and perform any other functions (such as loading 
\f2\b buffer
\f1\b0  with default values) that may be required in such event.\
\
\

\b Reading the EEPROM
\b0 \
\
Unlike the Write command, no address may be specified with the Read command and reading starts from the current address.  To read from a specific address we must first issue a fake Write sequence (i.e. without any data) in order to set the memory pointer.\
 \
The actual read itself begins with a Start signal followed by the command byte 
\f2\b $a1
\f1\b0 .  We can now read as many bytes as we like - there are no restrictions on crossing page boundaries when reading.\
\
The following code reads 8 bytes from EEPROM addresses 
\f2\b $0140-$0147
\f1\b0  and stores them in 
\f2\b buffer
\f1\b0 .\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf2 		jsr	i2c_startwrite	; Start signal and $a0 command byte\
		bcs	eeprom_error	; exit if command byte not acknowledged\
\
		lda	#$01			; upper byte of address\
		jsr	i2c_txbyte\
		lda	#$40			; lower byte of address\
		jsr	i2c_txbyte\
\
		jsr	i2c_stopwrite	; end of \'93fake\'94 write
\f1 \cf0 \

\f3 \cf2 \
		jsr	i2c_startread	; Start signal and $a1 command byte\
\
		ldx	#$00\
	read_loop\
		jsr	i2c_rxbyte		; read byte from EEPROM\
		sta	buffer,x		; store in buffer\
		inx\
		cpx	#$08			; 8 bytes read?\
		bne	read_loop		\
\
		jsr	i2c_stopread	; terminate read\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 \
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 Note:
\b0   
\f2\b i2c_startread
\f1\b0 , 
\f2\b i2c_rxbyte
\f1\b0  and 
\f2\b i2c_stopread
\f1\b0  use the oVerflow flag to track whether an acknowledge bit is needed.\
\
\

\b Read/Write Speed\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \
As you have probably worked out already, reading/writing the serial EEPROM is much slower than accessing RAM.  In the process of developing the driver code, I chose to perform EEPROM reads/writes during the 192-line visible display period.  Part of the reason for this was so that I can change the background colour during EEPROM access, giving a visual representation of the data transfer and time taken.  (Set 
\f2\b I2C_DEBUGCOLORS
\f1\b0  in 
\f2\b i2c.inc
\f1\b0  to enable.)  It is possible to read/write 32-bytes (maybe a few more?) during one 192-line display period.\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf0 Memory Partitions\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
\pard\pardeftab720\partightenfactor0

\f3 \cf0 	0000-3fff		Static Allocation Area\
	4000-7fff		File Area
\f1 \
\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Static Allocation Area\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \
The Static Allocation Area occupies the lower first 16K of the address range.  Memory is pre-allocated to specific programs.  Once a memory range has been allocated it becomes exclusive to that program and should not be overwritten by other programs.  This memory is intended for use by Atari 2600 programs where minimal code is required.\
\
Static Allocation is obviously finite.  It is possible, in theory at least, that at some point in time all the memory will have been allocated, leaving no room for new games to store their data.  It's unlikely that many Atari 2600 programs will need much space though so this should keep us going for a while.\
\
Memory is allocated in 64 byte pages:\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf0 	Page		Address Range	Assignment\
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf0 	00		0000-003f		System Settings (TV mode)\
	01		0040-007f		Man Goes Down\
	02		0080-00bf\
	03		00c0-00ff\
	...\
	fc		3f00-3f3f\
	fd		3f40-3f7f\
	fe		3f80-3fbf\
	ff		3fc0-3fff\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
\
To allocate memory for your project, please contact: 
\b \ul richard.hutchinson@dsl.pipex.com
\b0 \ulnone \
\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 System Settings Page
\b0 \
\
The first EEPROM page is reserved for the System Settings which is currently just the 8 byte ASCII signature \'93ATARIVOX\'94 followed by the TV Mode byte.\
\
Bit 7 of the TV Mode byte = 0 for PAL, 1 for NTSC.  Bit 6 = 0 for 60Hz, 1 for 50Hz.\
\
See 
\f2\b syspage.inc
\f1\b0  for code to read/write the TV Mode.\
\
\

\b File Area
\f3\b0 \
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \
The File Area occupies the upper 16K of the EEPROM and is more flexible than the Static Allocation Area.\
\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Proposed Format for File Area\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \
\pard\pardeftab720\partightenfactor0

\b \cf0 Note:
\b0   No software currently uses the File Area so the following is only a proposed format and is not set in stone.\
\
\pard\tx1080\pardeftab720\li1080\fi-360\partightenfactor0
\ls1\ilvl0\cf0 64-byte pages are paired to form 128-byte Blocks.\
Each block starts with an 8 character ASCII filename (7-bit character codes) and the remaining 120 bytes are free for data.\
Bit 7 of the first character is used to determine if the block is allocated or available.  0 indicates the block is in use, a 1 means it is free.\
\pard\pardeftab720\partightenfactor0
\cf0 \
Even implementing something as simple as this gets quite fiddly on the 2600.  The time taken to search for a file/free block is variable and may take several TV frames to complete and care must be taken to ensure that VSYNC still happens at the right time.  Also, any software that uses the File Area should provide the user with some way to delete files as well as create them.  This will possibly involve text routines, a character set, etc., all adding further bulk to the program.\
\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs28 \cf0 Contact:\
\pard\pardeftab720\partightenfactor0

\b0\fs20 \cf0 \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Richard Hutchinson
\b0  - Creator of the AtariVox.\
	Web:	http://www.vectrex.biz\
\pard\pardeftab720\fi720\partightenfactor0
\cf0 Email:	richard.hutchinson@dsl.pipex.com\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\b \cf0 Alex Herbert
\b0  \'96 Author of this document and driver code.\
	Web:	http://www.herbs64.com\
	Email:	herbs64@yahoo.co.uk\
\
\
}