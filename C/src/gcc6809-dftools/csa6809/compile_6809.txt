LINUX + OSX
-----------
(assuming you have a setup which has a gcc + toolset installed)

In THIS directory do a 
	../configure --target=m6809-unknown-none --enable-checking=release --enable-languages=c

Than:

	make

The gcc build will run till some error.
But the cc1 (C-Compiler) will be build ok,
it can than be found in:
.\gcc6809-dftools\build\gcc\cc1



Windows
-------
(Text written by Professor Dr. Peer Johannsen)

Compile gcc6809 on Windows (at least the C compiler part)
=========================================================
Document Version 1.1

This example uses Windows 7, 64 bit, other Windows versions
should be similar, a test on Windows 10 will follow (works!).

We also use the gcc6809-dftools source tree as example here.
Other gcc6809 trees should be similar (well, let us hope so, test pending...)

https://gitlab.com/dfffffff/gcc6809
(Which is in the above directory)

1. install MSYS2
----------------
1.1 go to https://github.com/orlp/dev-on-windows/wiki/Installing-GCC--&-MSYS2
1.2 download msys2-x86_64-latest.exe, run it (and use C:\msys64 as installation directory)
1.3 start the MSYS2 shell from C:\msys64\mingw64.exe (or let it be started by the installer)
1.4 right click the title bar, go to Options -> Keys and tick "Ctrl+Shift+letter shortcuts"
1.5 in the following, you can now use Ctrl+Shift+V to paste in the MSYS2 shell
1.6 do the next steps in the MSYS2 shell: (you should now be in your home directory)
1.7 "pacman -Syuu" (confirm prompts with J or Y, this will update the msys system)
1.8 Once prompted to do so, just close the shell window, confirm dialog with "close anyway"
1.9 restart the MSYS2 shell from C:\msys64\mingw64.exe 
1.a do the next steps in the MSYS2 shell: (you should now be in your home directory)
1.b "pacman -Syuu", repeat this until there are no more updates available, might take a while...
1.c msys is up to date, now install gcc and build tools

2. install gcc and build tools in MSYS2
---------------------------------------
2.1 do the next steps in the MSYS2 shell: (you should now be in your home directory)
2.2 "pacman -S --needed base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain git subversion mercurial mingw-w64-i686-cmake mingw-w64-x86_64-cmake"
2.3 confirm all prompts, this will take a while (probably not all of the above is needed, I did not check...)
2.4 "ln -s /mingw64 /mingw", this will also take a while, see below
2.5 This is supposed to create a symbolic link, but on my system this in fact resulted in a deep copy 
2.6 "LD_LIBRARY_PATH=/mingw/lib"
2.7 you are now ready to compile

3. compile gcc6809 in MSYS2
---------------------------
3.1 copy the whole gcc6809 source tree to your msys home directory C:\msys64\home\your.name
3.2 do the next steps in the MSYS2 shell: (you should now be in your home directory)
3.3 "cd gcc6809-dftools" (or whatever the name of the source tree is)
3.4 "mkdir build"
3.5 "cd build"
3.6 "../configure --target=m6809-unknown-none --enable-checking=release --enable-languages=c"
3.7 the configure should finish without any errors
3.8 "make"
3.9 after some time, the make should terminate with an error message
3.a at this point, the cc1 executable should be generated an usable
3.b since this is all we need, I did not investigate any further...

4. retrieve the C compiler Windows executable and two dlls
----------------------------------------------------------
4.1 copy C:\msys64\home\your.name\gcc6809-dftools\build\gcc\cc1.exe to your gcc6809 target directory
4.2 copy C:\msys64\mingw\bin\libgmp-10.dll to your gcc6809 target directory
4.3 copy C:\msys64\mingw\bin\libwinpthread-1.dll to your gcc6809 target directory
4.4 you should now be able to run cc1.exe from your gcc6809 target directory
4.5 try "cc1.exe --version" and "cc1.exe --help"

5. notes and todo
-----------------

5.1 note: the whole procedure took roughly 2 hours on my machine (Windows 7 - 64 Bit, i7 Quadcore, 2.7 GHz)
5.2 todo: try this procedure on Windows 10
    Malban: done (under Parallels on my Mac), works
            I also compiled a 32bit version using the "mingw-w32-i686" tool chain on the same site... 
5.3 not:  step 2.4 is time consuming, not sure if really necessary, and can most likely be improved, simply pointing LD_LIBRARY_PATH to /mingw64/lib did not work, I have not yet further investigated 
    Malban: not needed
5.4 todo: maybe there is a way to get rid of the two dlls, e.g. by not using threads, or by static linking
    Malban: placing the source code to these libs into the original gcc source folder suffices
    (which is done in the "above" directory
5.5 todo: maybe there is a way to fully compile gcc, have not yet investigated any further...
5.6 todo: maybe there is a way to also compile g++, have not yet investigated any further...
    Malban: Hint: "https://github.com/JoakimLarsson/VectrexTutorial" - seems to have compiled g++
5.7 sending in errata and improvements of this procedure is welcome!

6. Contact:
-----------

6.1 vectrex@pforzheim-university.de
6.2 vide@malban.de

7. Changelog:
-------------

initial version 1.0 created on 03/12/2019
Malban "changes" 1.1 03/14/2019
