BANK 0
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $F192 Wait_Recal
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F289 Do_Sound
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2AB Intensity_a
LABEL $F312 Moveto_d
LABEL $F354 Reset0Ref
LABEL $F36B Reset0Int
LABEL $F37A Print_Str_d
LABEL $F393 Print_Ships
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F517 Random
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8FF Obj_Hit
LABEL $FEF8 music8
LABEL $FEF8 current_song
COMMENT_LABEL $FEF8 junk.
LABEL $C880 score
COMMENT_LABEL $C880 7 bytes as defined in BIOS routine Add_Score_?
LABEL $C887 level
LABEL $C888 spuds_left
LABEL $C889 spud_ypos
COMMENT_LABEL $C889 y
LABEL $C88A spud_xpos
COMMENT_LABEL $C88A x
LABEL $C889 spud_coor
COMMENT_LABEL $C889 for Obj_Hit routine load into Y-reg
LABEL $C88B spudstate
LABEL $C88C mollystate
LABEL $C88D spud_start
LABEL $C88F arrow_y
COMMENT_LABEL $C88F y
LABEL $C890 arrow_x
COMMENT_LABEL $C890 x
LABEL $C88F arrow_coor
COMMENT_LABEL $C88F for Obj_Hit routines load into X
LABEL $C891 intlevel
LABEL $C892 brightdir
LABEL $C893 coord
LABEL $C895 count
LABEL $C896 dec_score
LABEL $C89D highscore
LABEL $C8A4 SpudRot
LABEL $C8A5 sfx_pointer
LABEL $C8A6 sfx_status
LABEL $C8A7 vox_addr
LABEL $C8A9 currentframe
EQU $14 MINBRIGHT
EQU $64 MAXBRIGHT
LABEL $0380 setup
EQU $28 restart
LABEL $03A1 start
LABEL $0308 titlescreen
LABEL $00B9 arrow_create
EQU $31 main
LABEL $0407 set_scale
COMMENT_LABEL $0407 scales to content of reg A
LABEL $03F1 guys_left
COMMENT_LABEL $03F1 display number of 'guys' left
LABEL $00C5 show_score
LABEL $01D0 joystick_crap
LABEL $01CF button_push
LABEL $0054 cantscore
LABEL $00FC check_if_score
LABEL $013A draw_post
LABEL $014F draw_molly
LABEL $015B draw_mollysface
LABEL $016F draw_mollyslegs
LABEL $0186 draw_spud
LABEL $01A6 draw_spudslegs
COMMENT_LABEL $01A6 wip
LABEL $0114 draw_arrow
LABEL $0083 yer_hit
LABEL $0089 yer_ok
LABEL $01FD got_hit
LABEL $00AC arrow_done
LABEL $0798 time_frames
LABEL $078E speed_distance
LABEL $00A3 arrow_speed
LABEL $01C8 move_arrow
LABEL $0129 arrow_in_bounds
LABEL $029F gameoverloop
LABEL $00D0 show_highscore
LABEL $00DB inc_score
LABEL $00FB nope
LABEL $010F no_score
LABEL $069E Arrow
COMMENT_LABEL $069E only one not it 0x01 terminated format
LABEL $0132 x_ok
LABEL $0139 y_ok
LABEL $0614 Post
LABEL $0627 Molly
LABEL $0696 MollysFace
LABEL $016B nothumpedface
LABEL $069A MollysFaceHum
LABEL $0661 MollysLegs
LABEL $017D nothumpeds
LABEL $067D MollysLegsHum
LABEL $0498 Spud
LABEL $01A2 nothumpedspud
LABEL $04F3 SpudHump
COMMENT_LABEL $04F3 needs work
LABEL $05AA SpudsLegsWalk1
LABEL $01B8 walk1
LABEL $05C9 SpudsLegsWalk2
LABEL $01C3 nothumping
LABEL $05FB SpudsLegsHum
LABEL $01FC done_moving
LABEL $01EB going_left
LABEL $0208 loopy
LABEL $0735 letter_O
LABEL $0751 letter_W
LABEL $0548 SpudDead
LABEL $026F deadcont
LABEL $0274 deadStar
LABEL $059A SpudDeadFinal
LABEL $06FD gameoverstr
LABEL $06EC highscorestr
LABEL $071D lolscore
LABEL $02F0 lol
LABEL $0724 lolstring
LABEL $072B lolgraphic
LABEL $0326 no_btn_psh
LABEL $03D5 hidden_msg
LABEL $06AD titlestring
LABEL $0349 up
LABEL $0355 changedir2up
LABEL $0361 finish_pulse
LABEL $035C changedir2down
LABEL $06C0 startstring
LABEL $06D1 hidden1str
LABEL $06DC hidden2str
LABEL $041A sfx_checktonefreq
LABEL $0487 sfx_endofeffect
LABEL $0432 sfx_checknoisefreq
LABEL $0441 sfx_checkvolume
LABEL $045C sfx_enabletone
LABEL $0466 sfx_checknoisedisable
LABEL $0478 sfx_enablenoise
LABEL $0482 sfx_nextframe
COMMENT_LINE $0000 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0000 < Spudster's Revenge - a Play in 3 acts							<
COMMENT_LINE $0000 > by Brian Mastrobuono (gauze@dropdead.org)						>
COMMENT_LINE $0000 < copyright 2002-2014 GNU GPL licensed, use as you wish as long as <
COMMENT_LINE $0000 > your changes in source form are made public					  >
COMMENT_LINE $0000 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $0000 best viewed with vim :set ts=4  (www.vim.org)
COMMENT_LINE $0000 BIOS ROUTINES and other crap
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Christopher Salomon
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Christopher Salomon    ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 *                       $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 *                       $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 *                       $C83C   ;temp byte
COMMENT_LINE $0000 *                       $C843   ;        register 9
COMMENT_LINE $0000 *                       $C844   ;        register 8
COMMENT_LINE $0000 *                       $C848   ;        register 4
COMMENT_LINE $0000 *                       $C849   ;        register 3
COMMENT_LINE $0000 *                       $C84A   ;        register 2
COMMENT_LINE $0000 *                       $C84C   ;        register 0
COMMENT_LINE $0000 *                       $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 *               $C868...$C876   ;Unused?
COMMENT_LINE $0000 *                       $C878   ;Unused?
COMMENT_LINE $0000 *    $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 *       0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 *       1 mux sel 0
COMMENT_LINE $0000 *       2 mux sel 1
COMMENT_LINE $0000 *       3 sound BC1
COMMENT_LINE $0000 *       4 sound BDIR
COMMENT_LINE $0000 *       5 comparator input
COMMENT_LINE $0000 *       6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 *       7 /RAMP
COMMENT_LINE $0000 *       0 PA latch enable
COMMENT_LINE $0000 *       1 PB latch enable
COMMENT_LINE $0000 *       2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 *       3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 *       4 /
COMMENT_LINE $0000 *       5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 *       6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 *       7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 *       0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 *       1 \
COMMENT_LINE $0000 *       2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 *       3 /
COMMENT_LINE $0000 *       4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 *       5 \
COMMENT_LINE $0000 *       6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 *       7 /
COMMENT_LINE $0000 *               bit                             cleared by
COMMENT_LINE $0000 *       0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 *       1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 *       2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 *       3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 *       4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 *       5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 *       6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 *       7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 *       0 CA2 interrupt enable
COMMENT_LINE $0000 *       1 CA1 interrupt enable
COMMENT_LINE $0000 *       2 shift register interrupt enable
COMMENT_LINE $0000 *       3 CB2 interrupt enable
COMMENT_LINE $0000 *       4 CB1 interrupt enable
COMMENT_LINE $0000 *       5 timer 2 interrupt enable
COMMENT_LINE $0000 *       6 timer 1 interrupt enable
COMMENT_LINE $0000 *       7 IER set/clear control
COMMENT_LINE $0000 endif
COMMENT_LINE $0000 include "vecvox.i"
COMMENT_LINE $0000 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COMMENT_LINE $0000 VARIABLES
COMMENT_LINE $0000 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COMMENT_LINE $0000 data
COMMENT_LINE $0000 org $C880
COMMENT_LINE $0000 ;; player (Spud) values
COMMENT_LINE $0000 missle
COMMENT_LINE $0000 this routine take 2 bytes args
COMMENT_LINE $0000 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
COMMENT_LINE $0000 @			CONSTANTS
COMMENT_LINE $0000 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
COMMENT_LINE $0000 ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
COMMENT_LINE $0000 |			 SETTING UP AND MAIN BLOCK				  |
COMMENT_LINE $0000 [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
COMMENT_LINE $0000 ; *** Init block
COMMENT $000F X
COMMENT $0010 Y
COMMENT_LINE $0025 ;# end of magic init block.
COMMENT_LINE $0025 end
COMMENT $0025 sets up what hardware to use and stuff
COMMENT $002B wait for button press here before start
COMMENT $002E create an arrow
COMMENT_LINE $0044 jsr		sound_update
COMMENT_LINE $004A SEE IF IT'S POSSIBLE TO 'SCORE'
COMMENT $004D right next 2 molly
COMMENT $005A TODO
COMMENT $0063 TODO
COMMENT_LINE $006C collision
COMMENT $0078 MUST fix ; spud h+arrow h/2
COMMENT $007A MUST fix ; spud w+arrow h/2
COMMENT_LINE $0089 move the arrow for next frame (or not)
COMMENT $0089 check frame countdown
COMMENT $008E still counting frames if false
COMMENT $0090 reseting frame counter
COMMENT $0098 ^^
COMMENT $00A9 check if it's at legal pos
COMMENT_LINE $00AF checking for game over condition...
COMMENT $00B2 jump to top
COMMENT_LINE $00B9 *** end of main ***
COMMENT_LINE $00B9 #######################################################
COMMENT_LINE $00B9 SUBROUTINES/FUNCTIONS
COMMENT_LINE $00B9 #######################################################
COMMENT_LINE $00B9 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $00B9 < Spudster's Revenge - a Play in 3 acts                            <
COMMENT_LINE $00B9 > by Brian Mastrobuono (gauze@dropdead.org)                        >
COMMENT_LINE $00B9 < copyright 2002-2013 GNU GPL licensed, use as you wish as long as <
COMMENT_LINE $00B9 > your changes in source form are made public                      >
COMMENT_LINE $00B9 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $00B9 best viewed with vim :set ts=4  (www.vim.org)
COMMENT_LINE $00B9 #######################################################
COMMENT_LINE $00B9 SUBROUTINES/FUNCTIONS
COMMENT_LINE $00B9 #######################################################
COMMENT $00BB height
COMMENT_LINE $00C1 anda	#%01111111	; mask off 1st bit == positive numbers only
COMMENT $00C1 set random x coord
COMMENT_LINE $00C5 display score, once per frame ...
COMMENT $00DB decimal score stored as a reference
COMMENT $00EC level
COMMENT $00EF 50
COMMENT $00F1 times
COMMENT $00F2 if register > memory branch
COMMENT_LINE $0113 add more stuff to increase game speed?
COMMENT_LINE $0129 start of arrow bounds checking
COMMENT_LINE $0129 x test
COMMENT_LINE $0132 y test
COMMENT_LINE $013A end of arrow bounds checking
COMMENT_LINE $015B TODO
COMMENT_LINE $015B include bow animation?
COMMENT $0163 if state !=1
COMMENT $0166 branch
COMMENT $0172 if state !=1
COMMENT $0175 branch
COMMENT $019A if state !=1
COMMENT $019D branch
COMMENT $01B1 mask 1 bit testing for odd number ...
COMMENT $01B8 if state !=1
COMMENT $01BB branch
COMMENT_LINE $01C7 TODO
COMMENT $01D6 end
COMMENT $01DF if >= 52 don't move.
COMMENT_LINE $01FD Lost a guy ...
COMMENT_LINE $0208 play sound
COMMENT_LINE $0208 ldx #ploop
COMMENT_LINE $0208 stx sfx_pointer
COMMENT_LINE $0208 lda #$01
COMMENT_LINE $0208 sta sfx_status
COMMENT_LINE $0208 jsr sfx_doframe
COMMENT_LINE $0233 lda		#-10
COMMENT_LINE $0233 ldb		#96
COMMENT_LINE $0233 std		Vec_Text_HW
COMMENT_LINE $0233 ldu		#owstr
COMMENT_LINE $0233 lda 	#0
COMMENT_LINE $0233 ldb		#36
COMMENT_LINE $0233 jsr 	Print_Str_d
COMMENT_LINE $0233 shrink spud
COMMENT_LINE $024D jsr		Reset0Ref
COMMENT_LINE $0253 lda		spud_ypos
COMMENT_LINE $0253 ldb		spud_xpos
COMMENT_LINE $0253 jsr 	Moveto_d
COMMENT $026D loop
COMMENT $026F reload counter
COMMENT_LINE $0298 reset spud position
COMMENT $02B2 update highscore if needed
COMMENT $02C2 print highscore label
COMMENT $02D5 pause a little before taking button input
COMMENT $0323 all 3 buttons pushed
COMMENT_LINE $0338 ; start variable intensity routine NEED 2 FIX
COMMENT $0338 Load variable saying which
COMMENT $033B direction we're going & test
COMMENT $033D load the 'level' of bright
COMMENT $0343 compare it to our threshhold
COMMENT $0345 if yes:
COMMENT $0364 set intensity here
COMMENT_LINE $0367 end intensity routine
COMMENT $0371 if not pushed ... loop
COMMENT $0374 movqi: #1 -> R:b
COMMENT $0376 movhi: R:x -> _current_song
COMMENT $0379 direction 0 down 1 up
COMMENT $037F return from function
COMMENT $0380 enable  joystick 1's x axis, disable all others.
COMMENT $0388 Bios routine yay
COMMENT $038D intensity level
COMMENT $0390 disable for Joy Mux's
COMMENT $039B set joymode, not analog.
COMMENT_LINE $03A0 jsr		vox_init
COMMENT_LINE $03A0 jsr 	Read_Btns		; no idea why this is here.
COMMENT_LINE $03A0 jsr 	Wait_Recal
COMMENT $03A0 return from function
COMMENT $03BF setting initial frame counter
COMMENT $03C4 ^^
COMMENT_LINE $03D5 show hidden msg requires reset to escape
COMMENT $03EF no escape
COMMENT_LINE $03F1 start_one_vectrex_round
COMMENT_LINE $03F1 ldb		#200	;movqi: #200 -> R:b
COMMENT_LINE $03F1 tfr 	b,dp 	; = dp to b (dp is direct page reg)
COMMENT_LINE $03F1 pshs 	y 	; save y register to HW stack
COMMENT_LINE $03F1 ldu		current_song	;movhi: _current_song -> R:u
COMMENT_LINE $03F1 jsr 	Init_Music_chk
COMMENT_LINE $03F1 puls 	y 	; restore y register
COMMENT_LINE $03F1 jsr 	Wait_Recal 	; wait_recal
COMMENT_LINE $03F1 jsr 	Do_Sound 	; do_sound
COMMENT_LINE $03F1 rts		; return from function
COMMENT $03F4 fix
COMMENT $03F6 change
COMMENT $0407 VIA t1 cnt lo register.
COMMENT_LINE $040B sfx_pointer	EQU	$c880
COMMENT_LINE $040B sfx_status	EQU	$c882
COMMENT_LINE $040B LDX #sfx4					; play sfx4
COMMENT_LINE $040B STX sfx_pointer
COMMENT_LINE $040B LDA #$01
COMMENT_LINE $040B STA sfx_status
COMMENT $040B get current frame pointer
COMMENT $0410 check first flag byte D0
COMMENT $0412 no match - continue to process frame
COMMENT $0416 check second flag byte 20
COMMENT $0418 match - end of effect found so stop playing
COMMENT $041A init Y as pointer to next data or flag byte
COMMENT $041C check if need to set tone freq
COMMENT $041E if bit 5 of B is set
COMMENT $0420 skip as no tone freq data
COMMENT $0422 get next data byte and copy to tone freq reg4
COMMENT $0426 set tone freq
COMMENT $0429 get next data byte and copy to tone freq reg5
COMMENT $042D set tone freq
COMMENT $0430 increment pointer to next data/flag byte
COMMENT $0432 check if need to set noise freq
COMMENT $0434 if bit 6 of B is only set
COMMENT $0436 skip as no noise freq data
COMMENT $0438 get next data byte and copy to noise freq reg
COMMENT $043C set noise freq
COMMENT $043F increment pointer to next flag byte
COMMENT $0441 set volume on channel 3
COMMENT $0443 get volume from bits 0-3
COMMENT $0445 set reg10
COMMENT $0447 Set volume
COMMENT $044A check disable tone channel 3
COMMENT $044C if bit 4 of B is set disable the tone
COMMENT $0450 set bit2 in reg7
COMMENT $0457 disable tone
COMMENT $045C clear bit2 in reg7
COMMENT $0463 enable tone
COMMENT $0466 check disable noise
COMMENT $0468 if bit7 of B is set disable noise
COMMENT $046C set bit5 in reg7
COMMENT $0473 disable noise
COMMENT $0478 clear bit5 in reg 7
COMMENT $047F enable noise
COMMENT $0482 update frame pointer to next flag byte in Y
COMMENT $0487 set volume off channel 3
COMMENT $0489 set reg1sf0
COMMENT $048B Set volume
COMMENT $048E reset sfx
COMMENT_LINE $0498 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
COMMENT_LINE $0498 DATA SECTION
COMMENT_LINE $0498 ********************************************************
COMMENT_LINE $0498 DATA section
COMMENT $0498 BODY crotch (should start here)
COMMENT $049B left ribs
COMMENT $049E left ear
COMMENT $04A1 top of head
COMMENT $04A4 right ear
COMMENT $04A7 right ribs
COMMENT $04AA relocate to left ear ...
COMMENT $04AD eyes
COMMENT $04C8 DICK
COMMENT $04DD mouth
COMMENT $04F3 BODY crotch (should start here)
COMMENT $04F6 left ribs
COMMENT $04F9 left ear
COMMENT $04FC top of head
COMMENT $04FF right ear
COMMENT $0502 right ribs
COMMENT $0505 relocate to left ear ...
COMMENT $0508 eyes
COMMENT $0523 diiiiick
COMMENT $0538 mouth
COMMENT $0548 BODY crotch (should start here)
COMMENT $054B left ribs
COMMENT $054E left ear
COMMENT $0551 top of head
COMMENT $0554 right ear
COMMENT $0557 right ribs
COMMENT $055A relocate to left ear ...
COMMENT $055D eyes
COMMENT $0575 DICK
COMMENT $058A mouth
COMMENT $05AD left leg
COMMENT $05B0 foot
COMMENT $05B3 foot
COMMENT $05B6 foot
COMMENT $05B9 reset
COMMENT $05BC right leg
COMMENT $05BF foot
COMMENT $05C2 foot
COMMENT $05C5 foot
COMMENT $0627 from bottom of post
COMMENT $062A bottom of skirt
COMMENT $062D left hem
COMMENT $0630 hem line
COMMENT $0633 right hem
COMMENT $0636 dress right
COMMENT $0639 head 5
COMMENT $063C head 6
COMMENT $063F head 7
COMMENT $0642 head 8
COMMENT $0645 head 9
COMMENT $0648 head 10
COMMENT $064B head 11
COMMENT $064E head 12
COMMENT $0651 head 3oclock
COMMENT $0654 head 4oclock
COMMENT $0657 invisible normally neckline
COMMENT $065A left dress
COMMENT $065D left hem
COMMENT_LINE $06AD TEXT DATA
COMMENT_LINE $078E arrow speed table below, speed is distance of movement, frames is number of frames (time)
COMMENT_LINE $07AA include "sound2.asm"
RANGE $0000-$000A CHAR_DATA
RANGE $000A-$000B DB_DATA
RANGE $000B-$000F DW_DATA
RANGE $000F-$0011 DB_DATA
RANGE $0011-$0023 CHAR_DATA
RANGE $0023-$0025 DB_DATA
RANGE $0025-$0498 CODE
RANGE $0498-$06AD DB_DATA
RANGE $06AD-$06BF CHAR_DATA
RANGE $06BF-$06C0 DB_DATA
RANGE $06C0-$06D0 CHAR_DATA
RANGE $06D0-$06D1 DB_DATA
RANGE $06D1-$06DB CHAR_DATA
RANGE $06DB-$06DC DB_DATA
RANGE $06DC-$06EB CHAR_DATA
RANGE $06EB-$06EC DB_DATA
RANGE $06EC-$06F6 CHAR_DATA
RANGE $06F6-$06F7 DB_DATA
RANGE $06F7-$06FC CHAR_DATA
RANGE $06FC-$06FD DB_DATA
RANGE $06FD-$0706 CHAR_DATA
RANGE $0706-$0707 DB_DATA
RANGE $0707-$071C CHAR_DATA
RANGE $071C-$071D DB_DATA
RANGE $071D-$0723 CHAR_DATA
RANGE $0723-$0724 DB_DATA
RANGE $0724-$072A CHAR_DATA
RANGE $072A-$0761 DB_DATA
RANGE $0761-$078D CHAR_DATA
RANGE $078D-$07A2 DB_DATA
RANGE $07A2-$07A6 DW_DATA
RANGE $07A6-$07AA DB_DATA

