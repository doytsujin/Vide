BANK 0
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $F192 Wait_Recal
LABEL $F1BA Read_Btns
LABEL $F1F8 Joy_Digital
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F312 Moveto_d
LABEL $F36B Reset0Int
LABEL $F37A Print_Str_d
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F511 Random_3
LABEL $FE38 music5
LABEL $C880 user_ram
LABEL $C880 spike_pos_y
LABEL $C881 spike_pos_x
LABEL $C882 obj_1_state
LABEL $C883 obj_1_y
COMMENT_LABEL $C883 There are up to eight objects (trees or gates)
LABEL $C884 obj_1_x
COMMENT_LABEL $C884 that can be displayed on the playfield at
LABEL $C885 obj_2_state
COMMENT_LABEL $C885 any one time. obj_(n)_state contains either
LABEL $C886 obj_2_y
COMMENT_LABEL $C886 0 (if the object is disabled), -1 (if the
LABEL $C887 obj_2_x
COMMENT_LABEL $C887 object is a tree) or 1 (if the object is a
LABEL $C888 obj_3_state
COMMENT_LABEL $C888 gate)
LABEL $C889 obj_3_y
LABEL $C88A obj_3_x
COMMENT_LABEL $C88A obj_(n)_x and obj_(n)_y hold the objects
LABEL $C88B obj_4_state
COMMENT_LABEL $C88B current coordinates
LABEL $C88C obj_4_y
LABEL $C88D obj_4_x
LABEL $C88E obj_5_state
LABEL $C88F obj_5_y
LABEL $C890 obj_5_x
LABEL $C891 obj_6_state
LABEL $C892 obj_6_y
LABEL $C893 obj_6_x
LABEL $C894 obj_7_state
LABEL $C895 obj_7_y
LABEL $C896 obj_7_x
LABEL $C897 obj_8_state
LABEL $C898 obj_8_y
LABEL $C899 obj_8_x
LABEL $C89A lives
LABEL $C89B level
LABEL $C89C score
LABEL $C89D flag_dist
LABEL $C89E level_type
LABEL $C89F temp
EQU $24 main
EQU $37 title_screen
LABEL $07BD title_string
LABEL $0050 start_game
EQU $5F start_level
LABEL $05D2 game_over
LABEL $00F5 skiing
LABEL $0120 no_direction
LABEL $0111 move_left
LABEL $0655 spike_r_vec_list
LABEL $0123 draw_spike
LABEL $06B3 spike_l_vec_list
LABEL $05F7 spike_vec_list
LABEL $017C draw_obj_2
LABEL $0166 draw_tree_1
LABEL $073A flag_vec_list
LABEL $016C upd_xy_1
LABEL $0711 tree_vec_list
LABEL $01BE draw_obj_3
LABEL $01A8 draw_tree_2
LABEL $01AE upd_xy_2
LABEL $0200 draw_obj_4
LABEL $01EA draw_tree_3
LABEL $01F0 upd_xy_3
LABEL $0242 draw_obj_5
LABEL $022C draw_tree_4
LABEL $0232 upd_xy_4
LABEL $0284 draw_obj_6
LABEL $026E draw_tree_5
LABEL $0274 upd_xy_5
LABEL $02C6 draw_obj_7
LABEL $02B0 draw_tree_6
LABEL $02B6 upd_xy_6
LABEL $0308 draw_obj_8
LABEL $02F2 draw_tree_7
LABEL $02F8 upd_xy_7
LABEL $034A check_coll_1
LABEL $0334 draw_tree_8
LABEL $033A upd_xy_8
LABEL $0351 coll_tree_1
LABEL $0394 check_coll_2
LABEL $059D dead
LABEL $039B coll_tree_2
LABEL $03DE check_coll_3
LABEL $03E5 coll_tree_3
LABEL $0428 check_coll_4
LABEL $042F coll_tree_4
LABEL $0472 check_coll_5
LABEL $0479 coll_tree_5
LABEL $04BC check_coll_6
LABEL $04C3 coll_tree_6
LABEL $0506 check_coll_7
LABEL $050D coll_tree_7
LABEL $0550 check_coll_8
LABEL $0557 coll_tree_8
LABEL $059A done_coll
LABEL $05A5 dead_loop
LABEL $0741 dead_vec_list
LABEL $05D7 game_over_loop
LABEL $07D0 game_over_string
COMMENT_LINE $0000 ***  Spike goes Skiing ***
COMMENT_LINE $0000 v0.04a
COMMENT_LINE $0000 This source code is copyright Andrew Coleman
COMMENT_LINE $0000 This whole thing is Freeware.
COMMENT_LINE $0000 You can play around with it, steal bits of it, do whatever you want with it really,
COMMENT_LINE $0000 but please DO NOT distribute any modified versions of this source without my permission.
COMMENT_LINE $0000 Big thanks go out to Chris Salamon, without his programming docs i'd never have gotten
COMMENT_LINE $0000 this far.
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 This file is part of 'Spike goes Skiing'
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 user variables
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 HEADER SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D height, width, rel y, rel x
COMMENT_LINE $0011 (from 0,0)
COMMENT $0011 some game information,
COMMENT_LINE $0023 ending with $80
COMMENT $0023 end of game header
COMMENT_LINE $0024 ***************************************************************************
COMMENT_LINE $0024 CODE SECTION
COMMENT_LINE $0024 ***************************************************************************
COMMENT_LINE $0024 here the cartridge program starts off
COMMENT $0024 Enable X axis on joystick 1
COMMENT $002B Disable Y axis on joystick 1
COMMENT $002E Disable Joystick 2
COMMENT $0037 Vectrex BIOS recalibration
COMMENT $003A Sets the intensity of the
COMMENT_LINE $003D vector beam to $5f
COMMENT $003D address of string
COMMENT $0040 Text position relative Y
COMMENT $0042 Text position relative X
COMMENT $0044 Vectrex BIOS print routine
COMMENT $004A If a button is pressed then
COMMENT $004C start the game
COMMENT $0050 Initialise general variables
COMMENT $005F If spike has no lives left then
COMMENT $0062 go to the game over routine
COMMENT $0068 set the co-ordiates for spike
COMMENT $006B at 100,0
COMMENT $00F5 Vectrex BIOS recalibration
COMMENT $00F8 Read joystick positions
COMMENT $00FB Load the x position of joystick 1 to A
COMMENT $00FE If it's zero then jump to no_direction
COMMENT $0100 If it's negative then the joystick is
COMMENT_LINE $0102 pushed left so jump to move_left otherwise
COMMENT_LINE $0102 carry on to the move_right routine
COMMENT $0102 check if maximum x position has been
COMMENT $0105 reached, if so jump to no_direction
COMMENT $0109 add one to spike's x position
COMMENT $010C load the address of the spike moving right
COMMENT $010F vector list to X reg and jump to draw_spike
COMMENT $0111 check if minimum x value has been
COMMENT $0114 reached, if so jump to no_direction
COMMENT $0118 subtract 1 from spike's x co-ordinate
COMMENT $011B load the address of the spike moving left
COMMENT $011E vector list to X reg and jump to draw_spike
COMMENT $0120 if spike isn't moving sideways then load
COMMENT_LINE $0123 the address of the normal spike vector
COMMENT_LINE $0123 list to X reg
COMMENT $0123 Sets the intensity of the
COMMENT_LINE $0126 vector beam to $5f
COMMENT $0128 set scale factor to $80
COMMENT $0131 move vector beam to co-ordinates for spike
COMMENT $0134 draw spike using the vector list address
COMMENT_LINE $0137 selected in the joystick checking section
COMMENT $013A check if object 1 is turned on, if not
COMMENT $013D jump to draw_obj_2
COMMENT $013F reset the vector beam to 0,0
COMMENT $0142 move the vector beam to the coordinates
COMMENT $0145 for object 1
COMMENT $014B if obj_1_state is less than 0 then jump to
COMMENT $014E draw_tree_1, otherwise carry on and draw a
COMMENT_LINE $0150 gate
COMMENT $0150 Load X with the address of flag_vec_list
COMMENT $0153 and draw the first flag
COMMENT $0156 Move the vector beam to the right 20
COMMENT $015E Draw the second flag
COMMENT $0164 Jump to update x,y for object 1
COMMENT $0166 Load X with the address for tree_vec_list
COMMENT $0169 and draw a tree
COMMENT $016C add 1 to the object's y position
COMMENT $016F check to see if object's y position is
COMMENT $0172 -128 (has looped back to the bottom of the
COMMENT $0174 screen). If it has then give it a new
COMMENT $0176 x coordinate.
COMMENT $017C check if object is turned on, if not
COMMENT $017F jump to draw_obj_3
COMMENT $0181 reset the vector beam to 0,0
COMMENT $0184 move the vector beam to the coordinates
COMMENT $0187 for object 2
COMMENT $018D if obj_2_state is less than 0 then jump to
COMMENT $0190 draw_tree_2, otherwise carry on and draw a
COMMENT_LINE $0192 gate
COMMENT $0192 Load X with the address of flag_vec_list
COMMENT $0195 and draw the first flag
COMMENT $0198 Move the vector beam to the right 20
COMMENT $01A0 Draw the second flag
COMMENT $01A6 Jump to update x,y for object 2
COMMENT $01A8 Load X with the address for tree_vec_list
COMMENT $01AB and draw a tree
COMMENT $01AE add 1 to the object's y position
COMMENT $01B1 check to see if object's y position is
COMMENT $01B4 -128 (has looped back to the bottom of the
COMMENT $01B6 screen). If it has then give it a new
COMMENT $01B8 x coordinate.
COMMENT $01BE check if object is turned on, if not
COMMENT $01C1 jump to draw_obj_4
COMMENT $01C3 reset the vector beam to 0,0
COMMENT $01C6 move the vector beam to the coordinates
COMMENT $01C9 for object 3
COMMENT $01CF if obj_3_state is less than 0 then jump to
COMMENT $01D2 draw_tree_3, otherwise carry on and draw a
COMMENT_LINE $01D4 gate
COMMENT $01D4 Load X with the address of flag_vec_list
COMMENT $01D7 and draw the first flag
COMMENT $01DA Move the vector beam to the right 20
COMMENT $01E2 Draw the second flag
COMMENT $01E8 Jump to update x,y for object 3
COMMENT $01EA Load X with the address for tree_vec_list
COMMENT $01ED and draw a tree
COMMENT $01F0 add 1 to the object's y position
COMMENT $01F3 check to see if object's y position is
COMMENT $01F6 -128 (has looped back to the bottom of the
COMMENT $01F8 screen). If it has then give it a new
COMMENT $01FA x coordinate.
COMMENT $0200 check if object is turned on, if not
COMMENT $0203 jump to draw_obj_5
COMMENT $0205 reset the vector beam to 0,0
COMMENT $0208 move the vector beam to the coordinates
COMMENT $020B for object 4
COMMENT $0211 if obj_4_state is less than 0 then jump to
COMMENT $0214 draw_tree_4, otherwise carry on and draw a
COMMENT_LINE $0216 gate
COMMENT $0216 Load X with the address of flag_vec_list
COMMENT $0219 and draw the first flag
COMMENT $021C Move the vector beam to the right 20
COMMENT $0224 Draw the second flag
COMMENT $022A Jump to update x,y for object 4
COMMENT $022C Load X with the address for tree_vec_list
COMMENT $022F and draw a tree
COMMENT $0232 add 1 to the object's y position
COMMENT $0235 check to see if object's y position is
COMMENT $0238 -128 (has looped back to the bottom of the
COMMENT $023A screen). If it has then give it a new
COMMENT $023C x coordinate.
COMMENT $0242 check if object is turned on, if not
COMMENT $0245 jump to draw_obj_6
COMMENT $0247 reset the vector beam to 0,0
COMMENT $024A move the vector beam to the coordinates
COMMENT $024D for object 5
COMMENT $0253 if obj_5_state is less than 0 then jump to
COMMENT $0256 draw_tree_5, otherwise carry on and draw a
COMMENT_LINE $0258 gate
COMMENT $0258 Load X with the address of flag_vec_list
COMMENT $025B and draw the first flag
COMMENT $025E Move the vector beam to the right 20
COMMENT $0266 Draw the second flag
COMMENT $026C Jump to update x,y for object 1
COMMENT $026E Load X with the address for tree_vec_list
COMMENT $0271 and draw a tree
COMMENT $0274 add 1 to the object's y position
COMMENT $0277 check to see if object's y position is
COMMENT $027A -128 (has looped back to the bottom of the
COMMENT $027C screen). If it has then give it a new
COMMENT $027E x coordinate.
COMMENT $0284 check if object is turned on, if not
COMMENT $0287 jump to draw_obj_7
COMMENT $0289 reset the vector beam to 0,0
COMMENT $028C move the vector beam to the coordinates
COMMENT $028F for object 6
COMMENT $0295 if obj_6_state is less than 0 then jump to
COMMENT $0298 draw_tree_6, otherwise carry on and draw a
COMMENT_LINE $029A gate
COMMENT $029A Load X with the address of flag_vec_list
COMMENT $029D and draw the first flag
COMMENT $02A0 Move the vector beam to the right 20
COMMENT $02A8 Draw the second flag
COMMENT $02AE Jump to update x,y for object 6
COMMENT $02B0 Load X with the address for tree_vec_list
COMMENT $02B3 and draw a tree
COMMENT $02B6 add 1 to the object's y position
COMMENT $02B9 check to see if object's y position is
COMMENT $02BC -128 (has looped back to the bottom of the
COMMENT $02BE screen). If it has then give it a new
COMMENT $02C0 x coordinate.
COMMENT $02C6 check if object is turned on, if not
COMMENT $02C9 jump to draw_obj_8
COMMENT $02CB reset the vector beam to 0,0
COMMENT $02CE move the vector beam to the coordinates
COMMENT $02D1 for object 7
COMMENT $02D7 if obj_7_state is less than 0 then jump to
COMMENT $02DA draw_tree_7, otherwise carry on and draw a
COMMENT_LINE $02DC gate
COMMENT $02DC Load X with the address of flag_vec_list
COMMENT $02DF and draw the first flag
COMMENT $02E2 Move the vector beam to the right 20
COMMENT $02EA Draw the second flag
COMMENT $02F0 Jump to update x,y for object 7
COMMENT $02F2 Load X with the address for tree_vec_list
COMMENT $02F5 and draw a tree
COMMENT $02F8 add 1 to the object's y position
COMMENT $02FB check to see if object's y position is
COMMENT $02FE -128 (has looped back to the bottom of the
COMMENT $0300 screen). If it has then give it a new
COMMENT $0302 x coordinate.
COMMENT $0308 check if object is turned on, if not
COMMENT $030B jump to check_coll_1
COMMENT $030D reset the vector beam to 0,0
COMMENT $0310 move the vector beam to the coordinates
COMMENT $0313 for object 8
COMMENT $0319 if obj_8_state is less than 0 then jump to
COMMENT $031C draw_tree_8, otherwise carry on and draw a
COMMENT_LINE $031E gate
COMMENT $031E Load X with the address of flag_vec_list
COMMENT $0321 and draw the first flag
COMMENT $0324 Move the vector beam to the right 20
COMMENT $032C Draw the second flag
COMMENT $0332 Jump to update x,y for object 8
COMMENT $0334 Load X with the address for tree_vec_list
COMMENT $0337 and draw a tree
COMMENT $033A add 1 to the object's y position
COMMENT $033D check to see if object's y position is
COMMENT $0340 -128 (has looped back to the bottom of the
COMMENT $0342 screen). If it has then give it a new
COMMENT $0344 x coordinate.
COMMENT $034A Check to see if object 1 us a tree
COMMENT $034D if it is then jump to coll_tree_1
COMMENT $0351 Check to see if object 1's y coordinate
COMMENT $0354 is near spike's
COMMENT $0371 Check to see if object 1's x coordinate
COMMENT $0374 is near spike's
COMMENT $0394 Check to see if object 2 us a tree
COMMENT $0397 if it is then jump to coll_tree_2
COMMENT $039B Check to see if object 2's y coordinate
COMMENT $039E is near spike's
COMMENT $03BB Check to see if object 2's x coordinate
COMMENT $03BE is near spike's
COMMENT $03DE Check to see if object 3 us a tree
COMMENT $03E1 if it is then jump to coll_tree_3
COMMENT $03E5 Check to see if object 3's y coordinate
COMMENT $03E8 is near spike's
COMMENT $0405 Check to see if object 3's x coordinate
COMMENT $0408 is near spike's
COMMENT $0428 Check to see if object 4 us a tree
COMMENT $042B if it is then jump to coll_tree_4
COMMENT $042F Check to see if object 4's y coordinate
COMMENT $0432 is near spike's
COMMENT $044F Check to see if object 4's x coordinate
COMMENT $0452 is near spike's
COMMENT $0472 Check to see if object 5 us a tree
COMMENT $0475 if it is then jump to coll_tree_5
COMMENT $0479 Check to see if object 5's y coordinate
COMMENT $047C is near spike's
COMMENT $0499 Check to see if object 5's x coordinate
COMMENT $049C is near spike's
COMMENT $04BC Check to see if object 6 us a tree
COMMENT $04BF if it is then jump to coll_tree_6
COMMENT $04C3 Check to see if object 6's y coordinate
COMMENT $04C6 is near spike's
COMMENT $04E3 Check to see if object 6's x coordinate
COMMENT $04E6 is near spike's
COMMENT $0506 Check to see if object 7 us a tree
COMMENT $0509 if it is then jump to coll_tree_7
COMMENT $050D Check to see if object 7's y coordinate
COMMENT $0510 is near spike's
COMMENT $052D Check to see if object 7's x coordinate
COMMENT $0530 is near spike's
COMMENT $0550 Check to see if object 8 us a tree
COMMENT $0553 if it is then jump to coll_tree_8
COMMENT $0557 Check to see if object 8's y coordinate
COMMENT $055A is near spike's
COMMENT $0577 Check to see if object 8's x coordinate
COMMENT $057A is near spike's
COMMENT $059A and repeat forever
COMMENT $05A8 Sets the intensity of the
COMMENT_LINE $05AB vector beam to $5f
COMMENT $05AD set scale factor to $80
COMMENT $05D7 Vectrex BIOS recalibration
COMMENT $05DA Sets the intensity of the
COMMENT_LINE $05DD vector beam to $5f
COMMENT $05DD address of string
COMMENT $05E0 Text position relative Y
COMMENT $05E2 Text position relative X
COMMENT $05E4 Vectrex BIOS print routine
COMMENT_LINE $05F7 ***************************************************************************
COMMENT_LINE $05F7 DATA SECTION
COMMENT_LINE $05F7 ***************************************************************************
COMMENT $05F7 spike's body
COMMENT $0615 spike's mouth
COMMENT $0630 spike's eyes
COMMENT $063C spike's legs and skis
COMMENT $0655 spike's body
COMMENT $0673 spike's mouth
COMMENT $068E spike's eyes
COMMENT $069A spike's legs and skis
COMMENT $06B3 spike's body
COMMENT $06D1 spike's mouth
COMMENT $06EC spike's eyes
COMMENT $06F8 spike's legs and skis
COMMENT_LINE $07DA ***************************************************************************
RANGE $0000-$000B DB_DATA
RANGE $000B-$000D DW_DATA
RANGE $000D-$0024 DB_DATA
RANGE $0024-$054F CODE
RANGE $0550-$0599 CODE
RANGE $059A-$05F7 CODE
RANGE $05F7-$07DA DB_DATA

