START_BANK                    $00
LABEL                    $0000                              line
LABEL                    $0000                              assembler
LABEL                    $0000                              at
COMMENT                    $0000                              compatibilty added by Malban
COMMENT                    $0000                              assenmble with comand line:
COMMENT                    $0000                              .\ass\as09.exe -w200 -h0 -l -mcti narrow.asm >error
COMMENT                    $0000                              used the 6809 assembler:
COMMENT                    $0000                              as09 [1.11].
COMMENT                    $0000                              Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT                    $0000                              Available at:
COMMENT                    $0000                              http://www.falstaff.demon.co.uk/cross.html
COMMENT                    $0000                              This work was originally done by Fred Taft (fred@.cv.hp.com).
COMMENT                    $0000                              Please forward any comments, corrections or additions back to Fred.
COMMENT                    $0000                              Note that the work here is incomplete, especially in the area of the
COMMENT                    $0000                              headset control and the sound code.  If you can decipher this code further,
COMMENT                    $0000                              please repost it, so that the rest of us can benefit from your knowledge.
COMMENT                    $0000                              Narrow Escape
COMMENT                    $0000                              *****************************************************************************
COMMENT                    $0000                              OVERVIEW:
COMMENT                    $0000                              ---------
COMMENT                    $0000                              Unlike all previous games, which simply drew lines in any order, and
COMMENT                    $0000                              incorporated color using an overlay, Narrow Escape was one of the first
COMMENT                    $0000                              games to use the headset and a color wheel to give the impression that
COMMENT                    $0000                              red, green or blue lines were simultaneously being drawn, without the
COMMENT                    $0000                              use of an overlay.  In a nutshell, the color wheel is designed such
COMMENT                    $0000                              that only one eye sees what is being drawn at any given time.  For
COMMENT                    $0000                              the viewing eye, the color wheel is partitioned into a red, a green and
COMMENT                    $0000                              a blue section.  When the red section is in front of the player's eye,
COMMENT                    $0000                              the Vectrex will draw the red vectors for the given eye; when the green
COMMENT                    $0000                              section comes in front of the eye, the game will then draw the green
COMMENT                    $0000                              vectors for that eye.  If a color requires a large number of vectors to
COMMENT                    $0000                              be drawn, then that color will occupy a greater portion of the color wheel.
COMMENT                    $0000                              The order in which things are drawn are:
COMMENT                    $0000                              1) Right eye blue.
COMMENT                    $0000                              2) Right eye green.
COMMENT                    $0000                              3) Right eye red.
COMMENT                    $0000                              4) Left eye blue.
COMMENT                    $0000                              5) Left eye green.
COMMENT                    $0000                              6) Left eye red.
COMMENT                    $0000                              The main drawing function determines when to start drawing a particular
COMMENT                    $0000                              color, by comparing the refresh timer value against a table of known
COMMENT                    $0000                              values; since they known (ideally) how long it should take for a segment
COMMENT                    $0000                              of the color wheel to become visible, they can use hardcoded values.
COMMENT                    $0000                              To accomplish the drawing described above, this game implements the
COMMENT                    $0000                              concept of 'frames'.  This games uses approximately 10 of these frames.
COMMENT                    $0000                              Each frame contains all of the information needed to draw a given item;
COMMENT                    $0000                              i.e. a string, or part of a figure.  Some frames have dedicated uses,
COMMENT                    $0000                              while others may be used for different things, depending upon the state
COMMENT                    $0000                              of the game; i.e. the frame used to contain the vector list for the
COMMENT                    $0000                              Warship side fins is not used for anything else; however, the frame
COMMENT                    $0000                              used to display the first bullet fired by the player, is also used at
COMMENT                    $0000                              times to display the player's ship count, or the "Game Over" string.
COMMENT                    $0000                              During a particular pass, the game will, for instance, ask for the next
COMMENT                    $0000                              red frame; if one if found, then its contents are drawn; if one is not
COMMENT                    $0000                              found, then it will wait to move onto the next color or next eye.
COMMENT                    $0000                              HEADSET CONTROL:
COMMENT                    $0000                              ----------------
COMMENT                    $0000                              I put a lot of effort into trying to decipher the code which controls
COMMENT                    $0000                              the headset.  In some areas I succeeded in figuring out what was happening,
COMMENT                    $0000                              but in others, I failed.  I do know that it uses a PID algorithm
COMMENT                    $0000                              (Proportional/Integral/Differential) for controlling the velocity of
COMMENT                    $0000                              the color wheel.  It appears to take a collection of samplings, to
COMMENT                    $0000                              determine if the wheel is spinning too fast or too slow, and based upon
COMMENT                    $0000                              this collection of samplings, and the previous 3 samplings, adjusts the
COMMENT                    $0000                              rate at which the colorwheel spins.
COMMENT                    $0000                              The following the the memory map for Narrow Escape RAM usage:
COMMENT                    $0000                              C875-C876    Pointer to the next player frame.
COMMENT                    $0000                              C880         Tolerance value; used during collision detection.  If the
COMMENT                    $0000                              distance between two objects is within the tolerance range,
COMMENT                    $0000                              then they are considered to have collided.
COMMENT                    $0000                              C881         Boolean: flags if bonus has been given for score > 20000.
COMMENT                    $0000                              C882         Unknown usage contains some info about enemy ship.
COMMENT                    $0000                              C883         Number of fuel cannisters (and walls) for current level.
COMMENT                    $0000                              C884         Unknown use: = to 4, if level <= 5, else = to 5.
COMMENT                    $0000                              C885         Number of enemy ships for current level.
COMMENT                    $0000                              C886-C887    BCD value associated with current enemy ship.
COMMENT                    $0000                              C888         Boolean: indicates if player destroyed an enemy.
COMMENT                    $0000                              C889         Boolean: indicates whether an enemy start is visible; 0 = no,
COMMENT                    $0000                              $FF = yes.
COMMENT                    $0000                              C88A-C88B    Pointer to enemy ship vector list.
COMMENT                    $0000                              C88C         Indicates the number of hits needed to destroy the warlord ship.
COMMENT                    $0000                              C88D-C88E    16-bit x movement delta for enemy ship.
COMMENT                    $0000                              C88F-C890    16-bit y movement delta for enemy ship.
COMMENT                    $0000                              C891         Work memory.
COMMENT                    $0000                              C892         Work memory.
COMMENT                    $0000                              C893-C894    Work memory.
COMMENT                    $0000                              C895-C896    Unused.
COMMENT                    $0000                              C897         Loop counter.
COMMENT                    $0000                              C898-C89A    Unused.
COMMENT                    $0000                              C89B         Bitmask: appears to indicate which sounds should be made:
COMMENT                    $0000                              $01 = Normal game noise
COMMENT                    $0000                              $02 = Enemy ship coming
COMMENT                    $0000                              $08 = Player passed through fuel wall opening
COMMENT                    $0000                              $10 = Player picked up fuel
COMMENT                    $0000                              $20 = Player fired a bullet
COMMENT                    $0000                              $40 = Player out of fuel
COMMENT                    $0000                              $80 = Enemy ship hit or player hit fuel wall.
COMMENT                    $0000                              C89C         Used somehow by the sound functions.
COMMENT                    $0000                              C89D         Used somehow by the sound functions.
COMMENT                    $0000                              C89E         Used somehow by the sound functions.
COMMENT                    $0000                              C89F         Bitmask: appears to indicate which sounds are currently
COMMENT                    $0000                              allowed; assumes same meaning as C89B.
COMMENT                    $0000                              C8A0         Used somehow by the sound functions.
COMMENT                    $0000                              C8A1         Used somehow by the sound functions.
COMMENT                    $0000                              C8A2         Controls sound characteristics (0,1).
COMMENT                    $0000                              C8A3         Used somehow by the sound functions.
COMMENT                    $0000                              C8A4         Unknown usage contains some info about enemy ship.
COMMENT                    $0000                              C8A5         Boolean: appears to also indicate if player has collided with
COMMENT                    $0000                              the enemy ship (see C8BA).
COMMENT                    $0000                              C8A6         Boolean: flags whether we are drawing for the left eye ($FF)
COMMENT                    $0000                              or the right eye ($00).
COMMENT                    $0000                              C8A7-C8AA    Unused.
COMMENT                    $0000                              C8AB-C8AC    Indirect jump pointer; indicates main processing function.
COMMENT                    $0000                              C8AD-C8AE    Counter.
COMMENT                    $0000                              C8AF         Boolean: indicates whether the passage walls should be
COMMENT                    $0000                              drawn ($FF).  When player first enters a new level, the
COMMENT                    $0000                              walls are not initially drawn.
COMMENT                    $0000                              C8B0         Boolean: indicates if player picked up fuel cannister ($FF).
COMMENT                    $0000                              C8B1         During normal play, indicates the number of enemy ships
COMMENT                    $0000                              destroyed.  During battle with the warlord ship, indicates
COMMENT                    $0000                              the number of hits on the warlord ship.
COMMENT                    $0000                              C8B2         Boolean: indicates that player has completed the current
COMMENT                    $0000                              level ($FF).  Used both for enemy levels, and fuel levels.
COMMENT                    $0000                              C8B3         Unused.
COMMENT                    $0000                              C8B4         Number of fuel components (walls and cannisters) created
COMMENT                    $0000                              so far.
COMMENT                    $0000                              C8B5         Boolean: controls whether a fuel wall ($00) or a fuel
COMMENT                    $0000                              cannister ($FF) is drawn next.
COMMENT                    $0000                              C8B6         Index in range 0-2; used during drawing of fuel walls and
COMMENT                    $0000                              cannisters to index into an array which specifies the color
COMMENT                    $0000                              used when drawing the fuel component.
COMMENT                    $0000                              C8B7-C8B8    Alternate scale factor; used during drawing of when some
COMMENT                    $0000                              objects are exploding.
COMMENT                    $0000                              C8B9         Boolean: indicates if the player's ship is done
COMMENT                    $0000                              exploding ($FF).
COMMENT                    $0000                              C8BA         Boolean: flags if enemy ship and player have collided;
COMMENT                    $0000                              $00= no collision, $FF = collision.
COMMENT                    $0000                              C8BB         Velocity of enemy star; used to update 'y' value.
COMMENT                    $0000                              C8BC         Boolean: flags if enemy star and player have collided;
COMMENT                    $0000                              C8BD         Current level (0-?).  Also used to calculate the number of
COMMENT                    $0000                              enemy ships for the level (level + 6), and the number of
COMMENT                    $0000                              fuel cannisters ((level* 2) + 5).  Also used to control
COMMENT                    $0000                              which enemy ship is used for this level.
COMMENT                    $0000                              C8BE-C8C5    String Buffer: Ship count. Default = "SHIPS 3",$80.
COMMENT                    $0000                              C8C6-C8CC    String Buffer: Player's score. Default = "     0",$80.
COMMENT                    $0000                              C8CD         Unused.
COMMENT                    $0000                              C8CE         Unknown usage.
COMMENT                    $0000                              C8CF-C8D0    Unused.
COMMENT                    $0000                              C8D1-C8D2    Unknown usage.
COMMENT                    $0000                              C8D3         Unused.
COMMENT                    $0000                              C8D4         Unknown usage.
COMMENT                    $0000                              C8D5-C8D6    Unused.
COMMENT                    $0000                              C8D7-C8F8    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Player's ship.
COMMENT                    $0000                              C8F9-C91A    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Players first bullet.
COMMENT                    $0000                              "Game Over" string (after game ends).
COMMENT                    $0000                              Player's ship count.
COMMENT                    $0000                              C91B-C93C    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Players second bullet.
COMMENT                    $0000                              Player's last score (after game ends, or between levels).
COMMENT                    $0000                              C93D-C95E    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Players third bullet.
COMMENT                    $0000                              C95F-C980    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Enemy star.
COMMENT                    $0000                              Warlord ship's bullet.
COMMENT                    $0000                              C981-C9A2    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Enemy ship.
COMMENT                    $0000                              Warlord ship's target area.
COMMENT                    $0000                              Player's ship count
COMMENT                    $0000                              C9A3-C9C4    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Warlord ship's body.
COMMENT                    $0000                              Player's score.
COMMENT                    $0000                              C9C5-C9E6    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              C9E7-CA08    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Warlord ship's top and bottom fins.
COMMENT                    $0000                              CA09-CA2A    34 byte Frame buffer; see note 1 below.
COMMENT                    $0000                              Warlord ship's side fins.
COMMENT                    $0000                              CA2B-CA32    8  byte end-of-frame stack indicator.
COMMENT                    $0000                              CA33-CA74    Unused.
COMMENT                    $0000                              CA75-CA76    Frame Pointer: points to the next drawing frame to be processed.
COMMENT                    $0000                              CA77         Number of units of fuel the player has; also used as the
COMMENT                    $0000                              scale factor when drawing the fuel bar.
COMMENT                    $0000                              CA78-CA79    Unused.
COMMENT                    $0000                              CA7A         Indicates the number of fuel units consumed per pass through
COMMENT                    $0000                              the game's main loop.
COMMENT                    $0000                              CA7B-CA7C    Unused.
COMMENT                    $0000                              CA7D         Boolean: indicates if the user is completely out of fuel ($FF).
COMMENT                    $0000                              CA7E         Boolean: flags that the player is low on fuel ($FF).
COMMENT                    $0000                              CA7F         Boolean: indicates if goggle sync has been received.
COMMENT                    $0000                              CA80         Unused.
COMMENT                    $0000                              CA81         Scale factor used by some of the drawing functions.
COMMENT                    $0000                              CA82         Loop counter used during some drawing.
COMMENT                    $0000                              CA83         Scale factor used by some drawing functions.
COMMENT                    $0000                              CA84-CA85    Unused.
COMMENT                    $0000                              CA86         Number of times the IRQ happed*after* the refresh timer
COMMENT                    $0000                              elapsed for this = of 8 samplings.
COMMENT                    $0000                              CA87         Number of times the IRQ happed*after* the refresh timer
COMMENT                    $0000                              elapsed for (pass-1) = of 8 samplings.
COMMENT                    $0000                              CA88         Number of times the IRQ happed*after* the refresh timer
COMMENT                    $0000                              elapsed for (pass-2) = of 8 samplings.
COMMENT                    $0000                              CA89         Number of times the IRQ happed*after* the refresh timer
COMMENT                    $0000                              elapsed for (pass-3) = of 8 samplings.
COMMENT                    $0000                              CA8A         Loop counter used by IRQ handler; starts at 8, and decrements
COMMENT                    $0000                              each time IRQ triggers.  Main portion of IRQ code only
COMMENT                    $0000                              executes when this decrements to 0.  Allows a group of
COMMENT                    $0000                              'samplings' to be taken, before attempting to modify the
COMMENT                    $0000                              velocity of the headset.
COMMENT                    $0000                              CA8B         Assigned a value, but never reference.
COMMENT                    $0000                              CA8C         Used by IRQ handler to adjust headset velocity.
COMMENT                    $0000                              CA8D         Used by IRQ handler to adjust headset velocity.
COMMENT                    $0000                              CA8E         Used by IRQ handler.
COMMENT                    $0000                              CA90-????    Buffer used by sound routines.
COMMENT                    $0000                              NOTES:
COMMENT                    $0000                              ------
COMMENT                    $0000                              Note 1:      Frame Structure
COMMENT                    $0000                              0  | Initial y drawing position
COMMENT                    $0000                              -
COMMENT                    $0000                              1  | Initial x drawing position
COMMENT                    $0000                              2  | Unknown
COMMENT                    $0000                              3  | Scale Factor used when moving to above position,
COMMENT                    $0000                              4  | and for during some drawing.
COMMENT                    $0000                              5  | Scale Factor used for some drawing, such as embedded
COMMENT                    $0000                              6  | objects (fuel cells and fuel wall openings)
COMMENT                    $0000                              7  | Frame identifier (See Note 2)
COMMENT                    $0000                              8  | Intensity
COMMENT                    $0000                              9  | Vector table or vector list or string address
COMMENT                    $0000                              A  | for the left eye
COMMENT                    $0000                              B  | Vector table vector list or string address
COMMENT                    $0000                              C  | for the right eye
COMMENT                    $0000                              D  | 16-bit X position,
COMMENT                    $0000                              E  | for enemy ship
COMMENT                    $0000                              F  | 16-bit Y position,
COMMENT                    $0000                              10 | for enemy ship
COMMENT                    $0000                              11 | 16-bit X movement delta,
COMMENT                    $0000                              12 | for enemy ship
COMMENT                    $0000                              13 | 16-bit Y movement delta,
COMMENT                    $0000                              14 | for enemy ship
COMMENT                    $0000                              15 | X bounding box min
COMMENT                    $0000                              16 | X bounding box max
COMMENT                    $0000                              17 | Y bounding box min
COMMENT                    $0000                              18 | Y bounding box max
COMMENT                    $0000                              19 | Unused
COMMENT                    $0000                              1A | Unused
COMMENT                    $0000                              1B | Player State (See Note 3)
COMMENT                    $0000                              1C | Embedded object (y,x) location; used for fuel
COMMENT                    $0000                              1D | wall openings and fuel cells.
COMMENT                    $0000                              1E | Explosion happening flag ($FF = explosion)
COMMENT                    $0000                              1F | Explosion duration counter
COMMENT                    $0000                              20 | Pointer to the drawing function
COMMENT                    $0000                              21 | associated with this frame object
COMMENT                    $0000                              Note 2:      Frame Identifier
COMMENT                    $0000                              Each frame has an identifier, which indicates what color
COMMENT                    $0000                              it should be drawn with, and whether or not it is still
COMMENT                    $0000                              visible.
COMMENT                    $0000                              $01 = Blue
COMMENT                    $0000                              $02 = Green
COMMENT                    $0000                              $03 = Red
COMMENT                    $0000                              $FF = End of frame stack
COMMENT                    $0000                              or'ed with $10 = Frame not visible
COMMENT                    $0000                              Note 3:      Player State
COMMENT                    $0000                              $00 = Player is in the enemy passage.
COMMENT                    $0000                              $FF = Player is in the fuel passage.
COMMENT                    $0000                              bios routines
COMMENT                    $0000                              bios data
COMMENT                    $0000                              *                       $C839   ;Pointer to copyright string during startup
COMMENT                    $0000                              *                       $C83B   ;High score cold-start flag (=0 if valid)
COMMENT                    $0000                              *                       $C83C   ;temp byte
COMMENT                    $0000                              *                       $C843   ;        register 9
COMMENT                    $0000                              *                       $C844   ;        register 8
COMMENT                    $0000                              *                       $C848   ;        register 4
COMMENT                    $0000                              *                       $C849   ;        register 3
COMMENT                    $0000                              *                       $C84A   ;        register 2
COMMENT                    $0000                              *                       $C84C   ;        register 0
COMMENT                    $0000                              *                       $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT                    $0000                              *               $C868...$C876   ;Unused?
COMMENT                    $0000                              *                       $C878   ;Unused?
COMMENT                    $0000                              *    $C880 - $CBEA is user RAM  ;
COMMENT                    $0000                              *       0 sample/hold (0=enable  mux 1=disable mux)
COMMENT                    $0000                              *       1 mux sel 0
COMMENT                    $0000                              *       2 mux sel 1
COMMENT                    $0000                              *       3 sound BC1
COMMENT                    $0000                              *       4 sound BDIR
COMMENT                    $0000                              *       5 comparator input
COMMENT                    $0000                              *       6 external device (slot pin 35) initialized to input
COMMENT                    $0000                              *       7 /RAMP
COMMENT                    $0000                              *       0 PA latch enable
COMMENT                    $0000                              *       1 PB latch enable
COMMENT                    $0000                              *       2 \                     110=output to CB2 under control of phase 2 clock
COMMENT                    $0000                              *       3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT                    $0000                              *       4 /
COMMENT                    $0000                              *       5 0=t2 one shot                 1=t2 free running
COMMENT                    $0000                              *       6 0=t1 one shot                 1=t1 free running
COMMENT                    $0000                              *       7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT                    $0000                              *       0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT                    $0000                              *       1 \
COMMENT                    $0000                              *       2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT                    $0000                              *       3 /
COMMENT                    $0000                              *       4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT                    $0000                              *       5 \
COMMENT                    $0000                              *       6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT                    $0000                              *       7 /
COMMENT                    $0000                              *               bit                             cleared by
COMMENT                    $0000                              *       0 CA2 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       1 CA1 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       2 shift register interrupt flag reading or writing shift register
COMMENT                    $0000                              *       3 CB2 interrupt flag            reading or writing port B I/O
COMMENT                    $0000                              *       4 CB1 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT                    $0000                              *       6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT                    $0000                              *       7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT                    $0000                              *       0 CA2 interrupt enable
COMMENT                    $0000                              *       1 CA1 interrupt enable
COMMENT                    $0000                              *       2 shift register interrupt enable
COMMENT                    $0000                              *       3 CB2 interrupt enable
COMMENT                    $0000                              *       4 CB1 interrupt enable
COMMENT                    $0000                              *       5 timer 2 interrupt enable
COMMENT                    $0000                              *       6 timer 1 interrupt enable
COMMENT                    $0000                              *       7 IER set/clear control
COMMENT                    $0000                              GCS Copyright
COMMENT                    $0000                              can be assembled correctly now
COMMENT                    $0000                              *                       $C839   ;Pointer to copyright string during startup
COMMENT                    $0000                              *                       $C83B   ;High score cold-start flag (=0 if valid)
COMMENT                    $0000                              *                       $C83C   ;temp byte
COMMENT                    $0000                              *                       $C843   ;        register 9
COMMENT                    $0000                              *                       $C844   ;        register 8
COMMENT                    $0000                              *                       $C848   ;        register 4
COMMENT                    $0000                              *                       $C849   ;        register 3
COMMENT                    $0000                              *                       $C84A   ;        register 2
COMMENT                    $0000                              *                       $C84C   ;        register 0
COMMENT                    $0000                              *                       $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT                    $0000                              *               $C868...$C876   ;Unused?
COMMENT                    $0000                              *                       $C878   ;Unused?
COMMENT                    $0000                              *    $C880 - $CBEA is user RAM  ;
COMMENT                    $0000                              *       0 sample/hold (0=enable  mux 1=disable mux)
COMMENT                    $0000                              *       1 mux sel 0
COMMENT                    $0000                              *       2 mux sel 1
COMMENT                    $0000                              *       3 sound BC1
COMMENT                    $0000                              *       4 sound BDIR
COMMENT                    $0000                              *       5 comparator input
COMMENT                    $0000                              *       6 external device (slot pin 35) initialized to input
COMMENT                    $0000                              *       7 /RAMP
COMMENT                    $0000                              *       0 PA latch enable
COMMENT                    $0000                              *       1 PB latch enable
COMMENT                    $0000                              *       2 \                     110=output to CB2 under control of phase 2 clock
COMMENT                    $0000                              *       3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT                    $0000                              *       4 /
COMMENT                    $0000                              *       5 0=t2 one shot                 1=t2 free running
COMMENT                    $0000                              *       6 0=t1 one shot                 1=t1 free running
COMMENT                    $0000                              *       7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT                    $0000                              *       0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT                    $0000                              *       1 \
COMMENT                    $0000                              *       2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT                    $0000                              *       3 /
COMMENT                    $0000                              *       4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT                    $0000                              *       5 \
COMMENT                    $0000                              *       6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT                    $0000                              *       7 /
COMMENT                    $0000                              *               bit                             cleared by
COMMENT                    $0000                              *       0 CA2 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       1 CA1 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       2 shift register interrupt flag reading or writing shift register
COMMENT                    $0000                              *       3 CB2 interrupt flag            reading or writing port B I/O
COMMENT                    $0000                              *       4 CB1 interrupt flag            reading or writing port A I/O
COMMENT                    $0000                              *       5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT                    $0000                              *       6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT                    $0000                              *       7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT                    $0000                              *       0 CA2 interrupt enable
COMMENT                    $0000                              *       1 CA1 interrupt enable
COMMENT                    $0000                              *       2 shift register interrupt enable
COMMENT                    $0000                              *       3 CB2 interrupt enable
COMMENT                    $0000                              *       4 CB1 interrupt enable
COMMENT                    $0000                              *       5 timer 2 interrupt enable
COMMENT                    $0000                              *       6 timer 1 interrupt enable
COMMENT                    $0000                              *       7 IER set/clear control
COMMENT                    $0000                              GCS Copyright
LABEL                    $0001                              INCLUDE_I
LABEL                    $0001                              __6809__
LABEL                    $000B                              Copyright_Len
COMMENT                    $000B                              Start music pointer
COMMENT                    $000B                              Start music pointer
COMMENT                    $000D                              hight, width, rel y, rel x (from 0,0)
COMMENT                    $000D                              * height
COMMENT                    $000D                              hight, width, rel y, rel x (from 0,0)
LABEL                    $0010                              _0010
COMMENT                    $0011                              individual title String(s)
COMMENT                    $0011                              individual title String(s)
LABEL                    $0014                              _0014
COMMENT                    $0018                              hight, width, rel y, rel x (from 0,0)
COMMENT                    $0018                              * height
COMMENT                    $0018                              hight, width, rel y, rel x (from 0,0)
COMMENT                    $001C                              individual title String(s)
COMMENT                    $001C                              individual title String(s)
LABEL                    $0020                              _0020
COMMENT                    $0023                              end of header
COMMENT                    $0023                              end of header
LABEL                    $0024                              start
LABEL                    $0024                              start
COMMENT                    $0024                              start of cartridge code!
COMMENT                    $0024                              start of cartridge code!
LABEL                    $0028                              _0028
COMMENT                    $002F                              * Set joystick approximation factor
COMMENT                    $0032                              * Disable console 2 joysticks
COMMENT                    $0035                              * Disable console 2 joysticks
COMMENT                    $003B                              * Set the indirect jump ptr
LABEL                    $003C                              _003C
COMMENT                    $003E                              * Clear sound bitmask
LABEL                    $0040                              _0040
COMMENT                    $0046                              * Set sound characteristics index
COMMENT                    $004C                              * Set refresh timer = 0.0382 sec
LABEL                    $0050                              _0050
COMMENT                    $0058                              * Init IRQ handler's loop counter
LABEL                    $0064                              _0064
COMMENT                    $0064                              * Set up IRQ interrupt vector: JMP
COMMENT                    $006C                              * Set IRQ interrupt function: Sync
COMMENT                    $006F                              * Force goggle index to trigger off
COMMENT                    $0071                              * positive edge.
COMMENT                    $0073                              * Set loop counter = 0
EQU                    $0076                              P0076
LABEL                    $0076                              P0076
COMMENT                    $0076                              Wait for the goggle's disk to come upto speed*
COMMENT                    $0079                              * Set refresh timer
COMMENT                    $007B                              * Get current I/O enable setting
LABEL                    $0080                              _0080
LABEL                    $0082                              _0082
COMMENT                    $0082                              * Config Port A as an input
LABEL                    $008A                              P008A
COMMENT                    $008A                              * Get current I/O enable setting
COMMENT                    $0091                              * Config Port A as an output
COMMENT                    $0094                              * Write $80 to Port A
COMMENT                    $009A                              * Set timing loop value
LABEL                    $009C                              P009C
COMMENT                    $009D                              * Delay for awhile
COMMENT                    $009F                              * Write $FF to Port A
LABEL                    $00A0                              _00A0
COMMENT                    $00AC                              * Set Port A as an input
LABEL                    $00B0                              _00B0
COMMENT                    $00B1                              * See if the goggle's sync line
COMMENT                    $00B4                              * has gone from off to on.
COMMENT                    $00B7                              * Sync line changed
LABEL                    $00B9                              P00B9
LABEL                    $00BE                              P00BE
COMMENT                    $00BE                              * If the refresh timer elapsed, then
LABEL                    $00C0                              _00C0
COMMENT                    $00C0                              * the goggle disk is not yet upto
COMMENT                    $00C2                              * speed; go thru another pass.
LABEL                    $00C4                              _00C4
COMMENT                    $00C4                              * The disk is now upto speed; for
COMMENT                    $00C7                              * good measure, repeat, for a
COMMENT                    $00CA                              * total of 3 times.
LABEL                    $00D0                              GetGoggleIndexState
COMMENT                    $00D0                              Check to see if the color wheel index has been seen.
COMMENT                    $00D0                              Exit: a = state of goggle index signal
COMMENT                    $00D0                              0 => index signal not seen
COMMENT                    $00D0                              !=0 => index signal seen
COMMENT                    $00D0                              GetGoggleIndexState()
LABEL                    $00D8                              _00D8
COMMENT                    $00DC                              * Set Port A lines as inputs
LABEL                    $00E0                              _00E0
COMMENT                    $00E4                              * Read Port A lines
COMMENT                    $00EB                              * Set Port A lines as outputs
LABEL                    $00F0                              MainGameLoop
COMMENT                    $00F0                              does drawing, and then wait for the IRQ.
COMMENT                    $00F0                              Main loop for this game.  Reads buttons and joystick,
LABEL                    $00F3                              ReturnFromIRQ
COMMENT                    $00F6                              * Set refresh timer
LABEL                    $00FA                              _00FA
LABEL                    $00FF                              _00FF
COMMENT                    $00FF                              * Config Port A as an input
COMMENT                    $010C                              * Config Port A as an output
COMMENT                    $010F                              * Write $80 to Port A
COMMENT                    $011B                              * Clear goggle index intrpt flag
COMMENT                    $011D                              * Enable goggle index intrpt (IRQ)
COMMENT                    $0122                              * For each pass, increment the
COMMENT                    $0125                              * 'refresh timer expired' counter.
COMMENT                    $012B                              * Disable joystick approximation
LABEL                    $0139                              P0139
COMMENT                    $0139                              * Timing loop
COMMENT                    $013F                              * Enable IRQ & wait for goggle index
LABEL                    $0141                              P0141
COMMENT                    $0141                              * interrupt.
LABEL                    $0151                              DrawVectorList
COMMENT                    $0151                              Entry:
COMMENT                    $0151                              b = scale factor
COMMENT                    $0151                              x = ptr to vector list of form:
COMMENT                    $0151                              mode, y, x
COMMENT                    $0151                              .
COMMENT                    $0151                              $01
COMMENT                    $0151                              where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT                    $0151                              This function draws a list of vectors.
COMMENT                    $0151                              * Save scale factor
COMMENT                    $0151                              DrawVectorList()
LABEL                    $0153                              P0153
COMMENT                    $0153                              * Load the y position
COMMENT                    $0155                              * Write y value
COMMENT                    $0159                              * Load the line pattern
COMMENT                    $015F                              * Write x value
COMMENT                    $0161                              * Write the line pattern
LABEL                    $0168                              P0168
COMMENT                    $0168                              * Wait for the timer interrupt
COMMENT                    $016E                              * Clear the line pattern
COMMENT                    $0170                              * Check the mode for the next pt
COMMENT                    $0172                              * Keep drawing, until mode = $01
EQU                    $0175                              DrawAnimatedVectorList_Slow
LABEL                    $0175                              DrawAnimatedVectorList_Slow
COMMENT                    $0175                              Entry:
COMMENT                    $0175                              b = scale factor
COMMENT                    $0175                              x = ptr to 4 entry table of vector ptrs; each of the
COMMENT                    $0175                              entries points to a vector list having the following
COMMENT                    $0175                              form:
COMMENT                    $0175                              mode, y, x
COMMENT                    $0175                              .
COMMENT                    $0175                              $01
COMMENT                    $0175                              where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT                    $0175                              This function uses a system loop counter (C826)/4 to
COMMENT                    $0175                              determine which of the 4 vector lists to draw.  This
COMMENT                    $0175                              formula causes the visuals to change every 4th time
COMMENT                    $0175                              through the processing loop.
COMMENT                    $0175                              DrawAnimatedVectorList_Slow()
LABEL                    $017A                              P017A
EQU                    $0181                              DrawAnimatedVectorList_Fast
LABEL                    $0181                              DrawAnimatedVectorList_Fast
COMMENT                    $0181                              Entry:
COMMENT                    $0181                              b = scale factor
COMMENT                    $0181                              x = ptr to 4 entry table of vector ptrs; each of the
COMMENT                    $0181                              entries points to a vector list having the following
COMMENT                    $0181                              form:
COMMENT                    $0181                              mode, y, x
COMMENT                    $0181                              .
COMMENT                    $0181                              $01
COMMENT                    $0181                              where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT                    $0181                              This function uses a system loop counter (C826) to
COMMENT                    $0181                              determine which of the 4 vector lists to draw.  This
COMMENT                    $0181                              formula causes the visuals to change every time
COMMENT                    $0181                              through the processing loop.
COMMENT                    $0181                              DrawAnimatedVectorList_Fast()
EQU                    $0186                              DrawWithMixedScaleFactors
LABEL                    $0186                              DrawWithMixedScaleFactors
COMMENT                    $0186                              Entry:
COMMENT                    $0186                              b = scale factor
COMMENT                    $0186                              C8B7 = alternate scale factor
COMMENT                    $0186                              x = ptr to vector list, of the form:
COMMENT                    $0186                              mode, y, x
COMMENT                    $0186                              .
COMMENT                    $0186                              $01
COMMENT                    $0186                              where mode = $00 (move), $FF (draw) $01 (end), or
COMMENT                    $0186                              $02 (move using alternate scale factor)
COMMENT                    $0186                              This function draws a series of vectors.  Usually, the
COMMENT                    $0186                              incoming scale factor will be used.  However, if the
COMMENT                    $0186                              mode is $02, then the alternate scale factor (in C8B7)
COMMENT                    $0186                              is used, and the operation is treated as a 'move'.
COMMENT                    $0186                              * Save the incoming scale factor
COMMENT                    $0186                              DrawWithMixedScaleFactors()
LABEL                    $0188                              P0188
COMMENT                    $0188                              * Load the incoming scale factor
COMMENT                    $018A                              * Write the scale factor
COMMENT                    $018C                              * Load the y,x values
COMMENT                    $018E                              * Write the y value
COMMENT                    $0192                              * Load the mode value
COMMENT                    $0194                              * Use alternate scale factor?
COMMENT                    $0196                              * Yes
COMMENT                    $0199                              * Write the alternate scale factor
COMMENT                    $019B                              * Treat like a move request
LABEL                    $019C                              P019C
COMMENT                    $01A0                              * Write the x value
COMMENT                    $01A2                              * Write the line pattern
LABEL                    $01A9                              P01A9
COMMENT                    $01A9                              * Wait for the timer interrupt
COMMENT                    $01AF                              * Clear the line pattern
COMMENT                    $01B1                              * Look at mode for next endpoint
COMMENT                    $01B3                              * Time to quit?
COMMENT                    $01B7                              * Yes
LABEL                    $01BC                              NE_DrawDots
COMMENT                    $01BC                              Entry:
COMMENT                    $01BC                              b = scale factor
COMMENT                    $01BC                              x = ptr to vector list, of the form:
COMMENT                    $01BC                              mode, y, x
COMMENT                    $01BC                              .
COMMENT                    $01BC                              $01
COMMENT                    $01BC                              where mode = $01 (end), else all others (move and
COMMENT                    $01BC                              then draw a dot).
COMMENT                    $01BC                              This function ignores the 'mode' field, except for
COMMENT                    $01BC                              using it to tag the end of the vector list.  It will
COMMENT                    $01BC                              move to the indicated (y,x) position, and will then
COMMENT                    $01BC                              draw a dot.
COMMENT                    $01BC                              * Save the scale factor
COMMENT                    $01BC                              NE_DrawDots()
LABEL                    $01BE                              P01BE
COMMENT                    $01BE                              * Load the y,x values
COMMENT                    $01C0                              * Write the y value
COMMENT                    $01C4                              * Load the line pattern
COMMENT                    $01C5                              * Advance to next vector entry
COMMENT                    $01C9                              * Write the x value
COMMENT                    $01CB                              * Clear the line pattern
LABEL                    $01D2                              P01D2
COMMENT                    $01D2                              * Wait for the timer interrupt
COMMENT                    $01D8                              * Start drawing a dot
COMMENT                    $01DC                              * Stop drawing a dot
COMMENT                    $01DE                              * Check mode for next endpoint
COMMENT                    $01E0                              * End of vector list?
COMMENT                    $01E2                              * Yes
LABEL                    $01E3                              DrawThenZeroIntegrators
COMMENT                    $01E5                              * Set goggle index to trigger off
COMMENT                    $01E7                              * of positive edge; also zero
COMMENT                    $01E9                              * the integrators.
LABEL                    $01EA                              Draw4ByteVectorLists
COMMENT                    $01EA                              Entry:
COMMENT                    $01EA                              CA81 = frame's scale factor
COMMENT                    $01EA                              x = ptr to vector list, of the form:
COMMENT                    $01EA                              mode, y, x, counter
COMMENT                    $01EA                              .
COMMENT                    $01EA                              $01
COMMENT                    $01EA                              where mode = $FF (draw), $00(move) or $01 (end).
COMMENT                    $01EA                              This function will draw the indicated vectors, using
COMMENT                    $01EA                              the passed-in 8-bit scale factor, unless the counter is
COMMENT                    $01EA                              >0, in which case, it will calculate a 16-bit scale
COMMENT                    $01EA                              factor to use.
COMMENT                    $01EA                              Draw4ByteVectorLists()
COMMENT                    $01EC                              * Load the y value
COMMENT                    $01EE                              * Write the y value
COMMENT                    $01F0                              * Load the counter
COMMENT                    $01F2                              * Save the counter
COMMENT                    $01FA                              * Load frame's scale factor
COMMENT                    $01FD                              * Assume hi-byte scale factor = 0
COMMENT                    $01FE                              * If counter was <= <<0, do normal
COMMENT                    $0201                              * drawing.
LABEL                    $0203                              P0203
COMMENT                    $0203                              * Calculate a 16 bit scale factor
LABEL                    $0211                              P0211
COMMENT                    $0211                              * Write the scale factor
COMMENT                    $0213                              * Load the x value
COMMENT                    $0217                              * Write the x value
COMMENT                    $0219                              * Load the drawing pattern
COMMENT                    $021B                              * Mask (disable) IRQ
COMMENT                    $021D                              * Write the drawing pattern
COMMENT                    $021F                              * Write hi-byte of scale factore
LABEL                    $0223                              P0223
COMMENT                    $0223                              * Wait for timer interrupt
COMMENT                    $0227                              * Advance to next endpoint
COMMENT                    $022B                              * Clear the drawing pattern
COMMENT                    $022D                              * Unmask (reenable) IRQ
LABEL                    $0238                              P0238
LABEL                    $0239                              _0239
LABEL                    $023D                              P023D
COMMENT                    $0240                              * Write $FF to Port A
COMMENT                    $024A                              * Config Port A as input
LABEL                    $0252                              P0252
LABEL                    $0258                              P0258
LABEL                    $025D                              P025D
COMMENT                    $0260                              * Write $FF to Port A
COMMENT                    $026A                              * Config Port A as input
EQU                    $0271                              IRQ_Handler
LABEL                    $0271                              IRQ_Handler
COMMENT                    $0271                              This code appears to try to detect if the goggle's
COMMENT                    $0271                              disk has slowed down too much, thus allowing the
COMMENT                    $0271                              refresh timeout to occur*before* the disk has
COMMENT                    $0271                              made a revolution.  When too many failures occur,
COMMENT                    $0271                              it appears to adjust some variables, apparently
COMMENT                    $0271                              with the hope of giving the disk time to get
COMMENT                    $0271                              back into sync again.
COMMENT                    $0271                              * Clear line drawing pattern
COMMENT                    $0271                              IRQ_Handler()
COMMENT                    $0275                              * Did refresh timer already expire?
COMMENT                    $0277                              * Yes; so mark another timeout
COMMENT                    $027F                              * Decrement the IRQ loop counter
COMMENT                    $0282                              * Have we taken 8 samples?
COMMENT                    $0284                              * Yes; process the results
LABEL                    $0286                              Timeout
COMMENT                    $0286                              * Refresh timer elapsed
COMMENT                    $028C                              * Increment failure counter
COMMENT                    $028F                              * Have we taken 8 samples?
COMMENT                    $0292                              * Nope; do nothing
LABEL                    $0294                              ProcessSamples
COMMENT                    $0296                              * Reset IRQ sample counter
COMMENT                    $0299                              * Sum the # of failures for this
COMMENT                    $029C                              * pass and the previous pass.
LABEL                    $02B4                              P02B4
LABEL                    $02BC                              P02BC
COMMENT                    $02BC                              * Failures for (pass - 2)
COMMENT                    $02BF                              * Failures for (pass - 3)
LABEL                    $02D9                              P02D9
LABEL                    $02E1                              P02E1
LABEL                    $02F3                              ShuffleFailureInfo
COMMENT                    $02F3                              * Shuffle down the failure results
COMMENT                    $02F6                              * information for the last 3 passes
COMMENT                    $02F9                              * discarding the results for the
COMMENT                    $02FC                              * oldest pass.
COMMENT                    $02FF                              * Start w/ 0 failures for next pass
LABEL                    $0302                              FinishIRQ
COMMENT                    $0303                              * Write $FF to Port A
COMMENT                    $0310                              * Config Port A as an output
LABEL                    $031D                              DrawOneEnemyPassageWall
COMMENT                    $031D                              Entry:
COMMENT                    $031D                              x = ptr to vector list.
COMMENT                    $031D                              y = ptr to scale factor.
COMMENT                    $031D                              Draw a single wall in the enemy passage; the intensity
COMMENT                    $031D                              used is based upon the value at (0,y).
COMMENT                    $031D                              * Quit when the incoming scale
COMMENT                    $031D                              DrawOneEnemyPassageWall()
COMMENT                    $031F                              * factor is $FF.
LABEL                    $0324                              P0324
COMMENT                    $0328                              * Set scale factor = $1C
COMMENT                    $032A                              * Load (y,x) values
COMMENT                    $032C                              * Write y value
COMMENT                    $0330                              * Un-zero integrators, and trigger
COMMENT                    $0332                              * IRQ on positive edge.
COMMENT                    $0336                              * Write x value
LABEL                    $033C                              P033C
COMMENT                    $033C                              * Wait for scale timer interrupt
COMMENT                    $0342                              * Save scale factor
COMMENT                    $0345                              * Calculate intensity = scale+$40
COMMENT                    $0349                              * If rollover, use $7F (max).
LABEL                    $034B                              P034B
LABEL                    $0353                              P0353
COMMENT                    $0353                              * Zero integrators, and trigger IRQ
COMMENT                    $0355                              * on positive edge.
EQU                    $035E                              DrawFuelWall
LABEL                    $035E                              DrawFuelWall
COMMENT                    $035E                              Entry:
COMMENT                    $035E                              x = ptr to 4-byte vector list.
COMMENT                    $035E                              This function draws a fuel wall, including the appropriate
COMMENT                    $035E                              embedded fuel wall opening.
COMMENT                    $035E                              DrawFuelWall()
LABEL                    $0363                              P0363
COMMENT                    $0367                              * Write the y value
COMMENT                    $036B                              * Set the loop counter
COMMENT                    $0373                              * Get saved scale factor
LABEL                    $037C                              P037C
COMMENT                    $0385                              * Decrement loop counter
COMMENT                    $0388                              * Are we done looping yet?
LABEL                    $038A                              P038A
COMMENT                    $038A                              * Write scale factor
COMMENT                    $0390                              * Write x value
COMMENT                    $0392                              * Get the line drawing pattern
COMMENT                    $0394                              * Disable IRQ interrupts
COMMENT                    $0396                              * Write the line drawing pattern
COMMENT                    $0398                              * Save hi byte of scale factor
LABEL                    $039C                              P039C
COMMENT                    $039C                              * Wait for scale timer interrupt
COMMENT                    $03A0                              * Advance ptr to next point
COMMENT                    $03A4                              * Clear line drawing pattern
COMMENT                    $03A6                              * Reenable IRQ interrupts
LABEL                    $03B1                              P03B1
LABEL                    $03B7                              P03B7
COMMENT                    $03BA                              * Write $FF to Port A
COMMENT                    $03C4                              * Config Port A as input
LABEL                    $03CC                              P03CC
COMMENT                    $03CC                              * Un-zero integrators, & trigger
COMMENT                    $03CE                              * IRQ off positive edge.
COMMENT                    $03D0                              * Get position of embedded object
COMMENT                    $03D3                              * Write the y value
COMMENT                    $03D7                              * Get embedded obj's scale factor
COMMENT                    $03D9                              * Write the scale factor
COMMENT                    $03DF                              * Write the x value
LABEL                    $03E5                              P03E5
COMMENT                    $03E5                              * Wait for scale timer interrupt
LABEL                    $03EF                              DrawFrameContents
COMMENT                    $03EF                              Entry:
COMMENT                    $03EF                              x = frame ptr
COMMENT                    $03EF                              This function will draw the contents of the indicated
COMMENT                    $03EF                              frame.
COMMENT                    $03EF                              DrawFrameContents()
COMMENT                    $03F3                              * Write the scale factor
COMMENT                    $0400                              * Un-zero integrators, & trigger
COMMENT                    $0402                              * IRQ off positive edge.
LABEL                    $040C                              P040C
LABEL                    $0412                              P0412
COMMENT                    $0412                              * Wait for timer interrupt
COMMENT                    $0416                              * Load drawing (y,x) values
COMMENT                    $0418                              * Write the y value
COMMENT                    $041C                              * Load scale factor
COMMENT                    $041E                              * Write scale factor
COMMENT                    $0424                              * Write the x value
LABEL                    $042A                              P042A
COMMENT                    $042A                              * Wait for timer interrupt
COMMENT                    $042E                              * Load embedded obj's scale factor
COMMENT                    $0430                              * Save embedded obj's scale factor
COMMENT                    $0433                              * Is player in the eneny passage
COMMENT                    $0436                              * or the fuel passage?
COMMENT                    $0438                              * In fuel passage
COMMENT                    $043A                              * Is this frame a fuel wall
COMMENT                    $043E                              * or a fuel cannister?
COMMENT                    $0440                              * Load embedded objects (y,x)
COMMENT                    $0443                              * Write y value
COMMENT                    $0447                              * Load embedded obj's scale factor
COMMENT                    $0449                              * Write embedded obj's scale factor
COMMENT                    $044F                              * Write x value
LABEL                    $0455                              P0455
COMMENT                    $0455                              * Wait for timer interrupt
LABEL                    $0459                              P0459
COMMENT                    $0459                              * Load intensity value
COMMENT                    $045E                              * Load address of drawing proc
COMMENT                    $0468                              * Load vector list # 1
LABEL                    $046C                              P046C
COMMENT                    $046C                              * Load vector list # 2
LABEL                    $046E                              P046E
COMMENT                    $046E                              * Save vector list ptr
COMMENT                    $0471                              * Retrieve scale factor
COMMENT                    $0474                              * (INDIRECT JUMP)
EQU                    $047B                              EP_DABlueFramesAndWalls_LE
LABEL                    $047B                              EP_DABlueFramesAndWalls_LE
COMMENT                    $047B                              This function will draw all of the blue user frames,
COMMENT                    $047B                              and when that completes, will draw any blue walls.
COMMENT                    $047B                              This is only for the left eye.
COMMENT                    $047B                              * Flag we're drawing for left eye
COMMENT                    $047B                              EP_DrawAllBlueFramesAndWalls_LeftEye()
COMMENT                    $047E                              ResetFramePtrToPlayersFirstFrame;
LABEL                    $0481                              P0481
COMMENT                    $0481                              * Request blue frame
COMMENT                    $0486                              * Did we find a frame?
COMMENT                    $0487                              * Yep; so draw it
COMMENT                    $0489                              * Nope; draw left walls
LABEL                    $0490                              P0490
COMMENT                    $0493                              * Check for another frame
EQU                    $0499                              EP_DAGreenFramesAndWalls_LE
LABEL                    $0499                              EP_DAGreenFramesAndWalls_LE
COMMENT                    $0499                              EP_DAGreenFramesAndWalls_LE  ; EP_DrawAllGreenFramesAndWalls_LeftEye()
COMMENT                    $0499                              This function will draw all of the green user frames,
COMMENT                    $0499                              and when that completes, will draw any green walls.
COMMENT                    $0499                              This is only for the left eye.
COMMENT                    $0499                              ResetFramePtrToPlayersFirstFrame;
COMMENT                    $0499                              EP_DrawAllGreenFramesAndWalls_LeftEye:
LABEL                    $049C                              P049C
COMMENT                    $049C                              * Request green frame
COMMENT                    $04A1                              * Did we find a frame?
COMMENT                    $04A2                              * Yep; so draw it
COMMENT                    $04A4                              * Nope; draw left walls
COMMENT                    $04AA                              * Process sounds
LABEL                    $04AE                              P04AE
EQU                    $04B7                              EP_DrawAllRedFrames_LeftEye
LABEL                    $04B7                              EP_DrawAllRedFrames_LeftEye
COMMENT                    $04B7                              This function will draw all of the red user frames,
COMMENT                    $04B7                              and when that completes, will check to see if the
COMMENT                    $04B7                              player has hit an enemy ship or picked up fuel.
COMMENT                    $04B7                              The drawing done is only for the left eye.
COMMENT                    $04B7                              ResetFramePtrToPlayersFirstFrame;
COMMENT                    $04B7                              EP_DrawAllRedFrames_LeftEye()
LABEL                    $04BA                              P04BA
COMMENT                    $04BA                              * Request red frame
COMMENT                    $04BF                              * Did we find a frame?
COMMENT                    $04C0                              * Yep; so draw it
COMMENT                    $04C8                              * Load BCD value of enemy ship
COMMENT                    $04CB                              * Was an enemy ship destroyed?
COMMENT                    $04D0                              * Load BCD value of fuel can
COMMENT                    $04D3                              * Did player pickup fuel can?
LABEL                    $04D8                              UpdateScore
COMMENT                    $04D8                              * Yes; update player's score
COMMENT                    $04DE                              * Check if score > 20,000 only
COMMENT                    $04E1                              * once per game.
COMMENT                    $04E3                              * See if player's score is
COMMENT                    $04E6                              * > 20,000.
COMMENT                    $04F0                              * Score is > 20,000
COMMENT                    $04F2                              * Disable doing check again
COMMENT                    $04F5                              * Award a bonus ship
LABEL                    $04F8                              P04F8
COMMENT                    $04F8                              * Clear 'enemy destroyed' flag
COMMENT                    $04FB                              * Clear 'fuel picked up' flag
LABEL                    $04FF                              P04FF
COMMENT                    $0504                              These appear to not be referenced*
LABEL                    $050F                              CheckForScoreOver20000
COMMENT                    $050F                              Entry:
COMMENT                    $050F                              d = value to add to player's score.
COMMENT                    $050F                              Exit:
COMMENT                    $050F                              C881 = will be = to $FF, if the score is now
COMMENT                    $050F                              above 20,000; this is a flag which prevents
COMMENT                    $050F                              this check from happening again, after the
COMMENT                    $050F                              score goes over 20,000.
COMMENT                    $050F                              C8C4 = will be incremented, once the score goes
COMMENT                    $050F                              above 20,000; this awards an extra ship to
COMMENT                    $050F                              the player.
COMMENT                    $050F                              This function adds the specified value to the player's
COMMENT                    $050F                              score, and then checks to see if the player's score
COMMENT                    $050F                              is now above 20,000.
COMMENT                    $050F                              CheckForScoreOver20000()
COMMENT                    $0515                              * Bypass check, if the score
COMMENT                    $0518                              * is already > 20,000.
COMMENT                    $0529                              * Disable future checking
COMMENT                    $052C                              * Award a bonus ship
LABEL                    $052F                              P052F
EQU                    $0530                              EP_DABlueFramesAndWalls_RE
LABEL                    $0530                              EP_DABlueFramesAndWalls_RE
COMMENT                    $0530                              EP_DABlueFramesAndWalls_RE ; EP_DrawAllBlueFramesAndWalls_RightEye()
COMMENT                    $0530                              This function will draw all of the blue user frames,
COMMENT                    $0530                              and when that completes, will draw any blue walls.
COMMENT                    $0530                              This is only for the right eye.
COMMENT                    $0530                              * Flag we're doing right eye
COMMENT                    $0530                              EP_DrawAllBlueFramesAndWalls_RightEye:
COMMENT                    $0533                              ResetFramePtrToPlayersFirstFrame;
LABEL                    $0536                              P0536
COMMENT                    $0536                              * Request blue frame
COMMENT                    $053B                              * Did we find a frame?
COMMENT                    $053C                              * Yep, so draw it
COMMENT                    $053E                              * Nope, so draw walls
LABEL                    $0548                              P0548
COMMENT                    $054B                              * Check for another frame
EQU                    $0551                              EP_DAGreenFramesAndWalls_RE
LABEL                    $0551                              EP_DAGreenFramesAndWalls_RE
COMMENT                    $0551                              EP_DAGreenFramesAndWalls_RE ; EP_DrawAllGreenFramesAndWalls_RightEye()
COMMENT                    $0551                              This function will draw all of the green user frames,
COMMENT                    $0551                              and when that completes, will draw any green walls.
COMMENT                    $0551                              This is only for the right eye.
COMMENT                    $0551                              ResetFramePtrToPlayersFirstFrame;
COMMENT                    $0551                              EP_DrawAllGreenFramesAndWalls_RightEye:
LABEL                    $0554                              P0554
COMMENT                    $0554                              * Request green frame
COMMENT                    $0559                              * Did we find a frame?
COMMENT                    $055A                              * Yep, so draw it
COMMENT                    $055C                              * Nope, so draw walls
LABEL                    $0572                              P0572
COMMENT                    $0575                              * Check for another wall
EQU                    $057B                              EP_DrawAllRedFrames_RightEye
LABEL                    $057B                              EP_DrawAllRedFrames_RightEye
COMMENT                    $057B                              This function will draw all of the red user frames,
COMMENT                    $057B                              and when that completes, will draw the fuel bar.
COMMENT                    $057B                              This is only for the right eye.
COMMENT                    $057B                              ResetFramePtrToPlayersFirstFrame;
COMMENT                    $057B                              EP_DrawAllRedFrames_RightEye()
LABEL                    $057E                              P057E
COMMENT                    $057E                              * Request red frame
COMMENT                    $0583                              * Did we find a frame?
COMMENT                    $0584                              * Yep, so draw it
COMMENT                    $0586                              * Nope, so draw fuel bar
LABEL                    $058D                              P058D
COMMENT                    $0590                              * Check for another frame
COMMENT                    $0592                              These appear to not be referenced*
EQU                    $0596                              NE_DisplayString
LABEL                    $0596                              NE_DisplayString
COMMENT                    $0596                              Entry:
COMMENT                    $0596                              C82A = character cell height
COMMENT                    $0596                              C82B = character cell width
COMMENT                    $0596                              C82C-C82D = string ptr
COMMENT                    $0596                              This function displays a character string at the current
COMMENT                    $0596                              position.  It is basically identical to the string
COMMENT                    $0596                              function in the ExecRom, with the only major difference
COMMENT                    $0596                              being what is done after the drawing is completed.
COMMENT                    $0596                              NE_DisplayString()
LABEL                    $05A0                              P05A0
LABEL                    $05C1                              P05C1
LABEL                    $05C5                              P05C5
LABEL                    $05E5                              P05E5
LABEL                    $0604                              P0604
LABEL                    $060B                              UpdatePlayersFuelLevel
COMMENT                    $060B                              Entry:
COMMENT                    $060B                              CA77 = player's fuel supply
COMMENT                    $060B                              CA7A = fuel consumption rate
COMMENT                    $060B                              Every 32nd pass through the mainloop, this function will
COMMENT                    $060B                              subtract some fuel from the player's supply.  If the
COMMENT                    $060B                              player starts running low on fuel, = a flag, which will
COMMENT                    $060B                              cause the fuel bar to start flashing.  If the player is
COMMENT                    $060B                              out of fuel, then = a different flag, which will
COMMENT                    $060B                              prevent the fuel bar from drawing at all.
COMMENT                    $060B                              * Every 32nd pass, subtract out
COMMENT                    $060B                              UpdatePlayersFuelLevel()
COMMENT                    $060E                              * some fuel from player's supply.
COMMENT                    $0612                              * Get player's fuel setting
COMMENT                    $0615                              * Subtract some out
COMMENT                    $0618                              * Save new fuel setting
COMMENT                    $061D                              * Can't have minus fuel; set to 0
LABEL                    $061F                              _061F
LABEL                    $0620                              P0620
COMMENT                    $0620                              * Is player already low on fuel?
COMMENT                    $0625                              * Is player almost out of fuel?
COMMENT                    $062A                              * Are there >= 15 units left?
COMMENT                    $062C                              * Nope; running low
COMMENT                    $062E                              * Flag that player is low on fuel
COMMENT                    $0634                              * Make 'running low on fuel' sound
COMMENT                    $063C                              * Enable the above sound
LABEL                    $0644                              P0644
COMMENT                    $0644                              * Are there any fuel units left?
COMMENT                    $0648                              * Nope; we're history
COMMENT                    $064D                              * Flag that player is out of fuel
LABEL                    $0650                              P0650
LABEL                    $0651                              DoDrawing
COMMENT                    $0651                              Entry:
COMMENT                    $0651                              C8AB = Processing function to invoke
COMMENT                    $0651                              This function invokes the primary processing function,
COMMENT                    $0651                              and then attempts to do some drawing.  Before doing the
COMMENT                    $0651                              drawing, it will wait until the refresh counter has
COMMENT                    $0651                              decremented to match a predefined checkpoint value.
COMMENT                    $0651                              * Call main processing function
COMMENT                    $0651                              DoDrawing()
LABEL                    $065C                              P065C
COMMENT                    $065C                              * Load next checkpoint value
LABEL                    $0661                              P0661
COMMENT                    $0664                              * Wait until the correct part of the
COMMENT                    $0666                              * color wheel is visible, before
COMMENT                    $0668                              * starting to draw.
COMMENT                    $066E                              * Call drawing function
LABEL                    $0670                              _0670
COMMENT                    $0672                              * Get next checkpoint
LABEL                    $0676                              P0676
LABEL                    $0683                              P0683
LABEL                    $068F                              P068F
LABEL                    $06A7                              P06A7
LABEL                    $06B5                              P06B5
LABEL                    $06B8                              P06B8
LABEL                    $06CE                              P06CE
LABEL                    $06DC                              P06DC
LABEL                    $06E0                              P06E0
LABEL                    $06E9                              P06E9
LABEL                    $0705                              UpdateFramesScaleAndIntensity
COMMENT                    $0705                              Entry:
COMMENT                    $0705                              x = Frame ptr
COMMENT                    $0705                              This function recalulates the scale factors and the
COMMENT                    $0705                              intensity values for a frame.  The intensity is calculated
COMMENT                    $0705                              as follows:
COMMENT                    $0705                              new intensity = new scale factor + $40
COMMENT                    $0705                              if (new intensity < 0)   [ check for rollover ]
COMMENT                    $0705                              new intensity = $7F (max)
COMMENT                    $0705                              * Load 16-bit scale factor
COMMENT                    $0705                              UpdateFramesScaleAndIntensity()
COMMENT                    $0707                              * Skip, if scale factor = 0
LABEL                    $070A                              P070A
COMMENT                    $070A                              * Load hi-byte of scale factor
COMMENT                    $0716                              * Load low-byte of scale factor
COMMENT                    $0724                              * Save new 16-bit scale factor
COMMENT                    $072D                              * Recalculate intensity
LABEL                    $0735                              P0735
COMMENT                    $0735                              * Save new intensity
LABEL                    $0738                              P0738
LABEL                    $0748                              LocateSpecificFrame
COMMENT                    $0748                              Entry:
COMMENT                    $0748                              a = Frame identifier
COMMENT                    $0748                              C875-C876 = Ptr to 1st frame to check
COMMENT                    $0748                              Exit:
COMMENT                    $0748                              a = 0 (no match) or $FF (match found)
COMMENT                    $0748                              x = ptr to matching frame
COMMENT                    $0748                              C875-C876 = Ptr to next frame after matching one
COMMENT                    $0748                              This function attempts to locate the next frame in the
COMMENT                    $0748                              sequence, having the indicated frame identifier
COMMENT                    $0748                              (1=blue, 2=green and 3=red).
COMMENT                    $0748                              * Save incoming frame number
COMMENT                    $0748                              LocateSpecificFrame()
COMMENT                    $074E                              * Load incoming frame number
COMMENT                    $0751                              * Load addr of 1st frame
LABEL                    $0754                              P0754
COMMENT                    $0754                              * Quit when last frame found
COMMENT                    $0758                              * Flag that no match was found
LABEL                    $075A                              P075A
COMMENT                    $075A                              * Do frame numbers match?
COMMENT                    $075C                              * Nope; try next frame
COMMENT                    $075E                              * Yes, we want this frame
COMMENT                    $0760                              * Get address of next frame
COMMENT                    $0763                              * Save the address of next frame
COMMENT                    $0766                              * Flag that a match was found
LABEL                    $0769                              P0769
COMMENT                    $0769                              * Get address of next frame
COMMENT                    $076C                              * Keep trying
LABEL                    $076E                              RFPtrToPlayersFF
COMMENT                    $076E                              RFPtrToPlayersFF ;ResetFramePtrToPlayersFirstFrame()
COMMENT                    $076E                              Exit:
COMMENT                    $076E                              C875-C876 = Ptr to player's first frame (C8D7)
COMMENT                    $076E                              This function sets the frame ptr (CA75) used by
COMMENT                    $076E                              LocateSpecificFrame(), to point to the player's
COMMENT                    $076E                              first frame (C8D7).
COMMENT                    $076E                              ResetFramePtrToPlayersFirstFrame:
LABEL                    $0775                              UpdatePlayersPosition
COMMENT                    $0775                              This function uses the joystick positions to update
COMMENT                    $0775                              the position of the player's ship.  The joystick must
COMMENT                    $0775                              be moved past a certain threshold, in order for the
COMMENT                    $0775                              ship's position to be affected.  In addition, it will
COMMENT                    $0775                              not allow the ship to move past certain side, top and
COMMENT                    $0775                              bottom boundaries: top = $60, bottom = $A0,
COMMENT                    $0775                              left = $BC and right = $54.
COMMENT                    $0775                              It should be noted that moving the joystick up causes
COMMENT                    $0775                              the ship to move down.
COMMENT                    $0775                              All information for the player's ship is kept in the
COMMENT                    $0775                              frame C8D7.
COMMENT                    $0775                              * Load addr of players ship frame
COMMENT                    $0775                              UpdatePlayersPosition()
COMMENT                    $0778                              * Load current y value
COMMENT                    $077A                              * Load joystick up/down value
COMMENT                    $077D                              * Check value against threshold 1
COMMENT                    $0781                              * Check value against threshold 2
COMMENT                    $0785                              * Update the y value only if the
COMMENT                    $0787                              * ship is not already at top.
COMMENT                    $0789                              * y = y + 4
COMMENT                    $078B                              * Save new y value
LABEL                    $078F                              P078F
COMMENT                    $078F                              * Update the y value only if the
COMMENT                    $0791                              * ship is not already at bottom.
COMMENT                    $0793                              * y = y - 4
COMMENT                    $0795                              * Save new y value
LABEL                    $0797                              P0797
COMMENT                    $0797                              * Load current x value
COMMENT                    $0799                              * Load joystick left/right value
COMMENT                    $079C                              * Check value against threshold 1
COMMENT                    $07A0                              * Check value against threshold 2
COMMENT                    $07A4                              * Update the x value only if the
COMMENT                    $07A6                              * ship not already at right edge
COMMENT                    $07A8                              * x = x + 4
COMMENT                    $07AA                              * Save new x value
LABEL                    $07AE                              P07AE
COMMENT                    $07AE                              * Update the x value only if the
COMMENT                    $07B0                              * ship not already at left edge
COMMENT                    $07B2                              * x = x - 4
COMMENT                    $07B4                              * Save new x value
LABEL                    $07B6                              P07B6
LABEL                    $07B7                              ProcessEnemyStar
COMMENT                    $07B7                              Entry:
COMMENT                    $07B7                              C8BB = Enemy ship velocity
COMMENT                    $07B7                              This function takes care of processing the enemy star.
COMMENT                    $07B7                              If the enemy star is visible, then it will update its
COMMENT                    $07B7                              position, and check to see if it has moved off of the
COMMENT                    $07B7                              top of the display, or if it has collided with the
COMMENT                    $07B7                              player's ship.  If it has moved off of the top of the
COMMENT                    $07B7                              display, then a new enemy star will start up.  When
COMMENT                    $07B7                              a collision occurs, an explosion pattern is displayed.
COMMENT                    $07B7                              All information about the enemy star is kept in the
COMMENT                    $07B7                              frame C95F.
COMMENT                    $07B7                              * Clear the 'collision' flag
COMMENT                    $07B7                              ProcessEnemyStar()
COMMENT                    $07BA                              * Is enemy star active
LABEL                    $07C0                              P07C0
COMMENT                    $07C0                              * Get ptr to enemy star frame
COMMENT                    $07C3                              * See if the enemy star is visible?
COMMENT                    $07C9                              * No; restart a new one only if
COMMENT                    $07CC                              * it did not collide with player
LABEL                    $07CF                              P07CF
COMMENT                    $07CF                              * Restart new enemy star
COMMENT                    $07D2                              * Set x position = players position
COMMENT                    $07D4                              * Force y = bottom of screen
COMMENT                    $07D8                              * Frame # = 3 (Red)
COMMENT                    $07DD                              * Set vector list 1
COMMENT                    $07DF                              * Set vector list 2
COMMENT                    $07E1                              * Clear 'collision' flag
LABEL                    $07E5                              P07E5
COMMENT                    $07E7                              * Get velocity value
COMMENT                    $07EA                              * Update y value
COMMENT                    $07EF                              * If the enemy star collided with
COMMENT                    $07F1                              * the player, then display an
COMMENT                    $07F4                              * explosion pattern for a while.
COMMENT                    $07FC                              * Animate, by changing between 1
COMMENT                    $07FE                              * of 4 possible explosion patterns
LABEL                    $0800                              _0800
COMMENT                    $0801                              * Set the explosion vector list
COMMENT                    $0803                              * Set the explosion vector list
COMMENT                    $0808                              * Set the drawing function
LABEL                    $080B                              P080B
COMMENT                    $080B                              * Has the enemy star reached the
COMMENT                    $080D                              * top of the screen?
LABEL                    $080F                              P080F
COMMENT                    $080F                              * Yes; so tag the frame as no
COMMENT                    $0811                              * longer being visible.
LABEL                    $0814                              P0814
LABEL                    $0818                              _0818
LABEL                    $081B                              P081B
COMMENT                    $081B                              * Flag collision with player
COMMENT                    $081E                              * Flag collision with player
COMMENT                    $0821                              * Set timer value, which controls
COMMENT                    $0823                              * duration of the explosion.
LABEL                    $0827                              DrawPlayersShipExploding
COMMENT                    $0827                              This function drawing the player's ship exploding
COMMENT                    $0827                              into multiple pieces.  It does this by incrementing
COMMENT                    $0827                              the alternate scale factor (C8B7); drawing continues
COMMENT                    $0827                              until the alternate scale factor reaches $3000, at
COMMENT                    $0827                              which point we = a flag (C8B9) to indicate that we
COMMENT                    $0827                              are done, and it is time to move onto the next phase.
COMMENT                    $0827                              * Get addr of player's frame
COMMENT                    $0827                              DrawPlayersShipExploding()
COMMENT                    $082A                              * Clear 'player done exploding flag
COMMENT                    $082D                              * Has scale factor surpassed the
COMMENT                    $0830                              * upper bound?
COMMENT                    $0836                              * Flag that we are done
LABEL                    $083A                              P083A
COMMENT                    $083D                              * Increment alternate scale factor
COMMENT                    $0843                              * Set drawing function
COMMENT                    $0849                              * Set vector list 1
COMMENT                    $084F                              * Set vector list 2
LABEL                    $0853                              InitializePlayerFrame
COMMENT                    $0853                              This function initializes all of the important fields
COMMENT                    $0853                              within the frame used to display the player's ship.
COMMENT                    $0853                              All information about the players ship is kept in the
COMMENT                    $0853                              frame C8D7.
COMMENT                    $0853                              * Get addr of player's frame
COMMENT                    $0853                              InitializePlayerFrame()
COMMENT                    $0856                              * Flag player in enemy passage
COMMENT                    $0859                              * Set frame # = 3 (red)
COMMENT                    $0860                              * Set drawing function
COMMENT                    $0869                              * Set scale factor
COMMENT                    $0873                              * Set embedded obj's scale factor
COMMENT                    $0877                              * Set intensity
COMMENT                    $087C                              * Set vector list 1
COMMENT                    $0881                              * Set vector list 2
COMMENT                    $0885                              * Set initial position = (0,0)
LABEL                    $088B                              SetEnemyShipInfo
COMMENT                    $088B                              SetEnemyShipInfo_2()
COMMENT                    $088B                              These function determines which enemy ship needs to be
COMMENT                    $088B                              displayed for this level, along with the characteristics
COMMENT                    $088B                              of the enemy ship.  It loads all of these characteristics
COMMENT                    $088B                              into memory locations, which are used by other functions.
COMMENT                    $088B                              SetEnemyShipInfo() also initializes some of the player's
COMMENT                    $088B                              flags, and is usually called at the start of a new turn
COMMENT                    $088B                              for the player (i.e. after a crash).  SetEnemyShipInfo_2()
COMMENT                    $088B                              does not initialize the player's flags, and is usually
COMMENT                    $088B                              called when the player has completed travel through
COMMENT                    $088B                              the fuel passage, and is about to enter the next enemy
COMMENT                    $088B                              passage.
COMMENT                    $088B                              All information about the players ship is kept in the
COMMENT                    $088B                              frame C8D7.
COMMENT                    $088B                              SetEnemyShipInfo()
COMMENT                    $088E                              * Give player $30 units of fuel
COMMENT                    $0891                              * Clear 'out of fuel' flag
COMMENT                    $0894                              * Clear 'low on fuel' flag
COMMENT                    $089D                              * Set fuel usage to 1 unit
LABEL                    $08A0                              SetEnemyShipInfo_2
COMMENT                    $08A0                              * Calculate the number of fuel
COMMENT                    $08A3                              * objects for this next level.
COMMENT                    $08A4                              * # = (level* 2) + 5
COMMENT                    $08A9                              * Based on the current level,
COMMENT                    $08AB                              * set $C884 to either 4 or 5
LABEL                    $08B3                              P08B3
COMMENT                    $08BB                              * Enemy ship count = level + 6
COMMENT                    $08BE                              * Determine which enemy ship will
COMMENT                    $08C1                              * used at this level: 0 - 14
LABEL                    $08C7                              P08C7
COMMENT                    $08C7                              * $0D = size of each table entry
COMMENT                    $08C9                              * Get index into enemy ship array
COMMENT                    $08CD                              * Get ptr to the enemy ship data
COMMENT                    $08D1                              * BCD value of enemy ship
COMMENT                    $08DB                              * Flag; do/don't display enemy star
COMMENT                    $08E0                              * Save vector list ptr
COMMENT                    $08E5                              * Save x movement delta
LABEL                    $08E8                              _08E8
COMMENT                    $08EA                              * Save y movement delta
COMMENT                    $08F2                              * Number of hits needed to destroy
COMMENT                    $08F4                              * the warlord ship.
COMMENT                    $08F9                              * Save contact tolerance value
COMMENT                    $08FD                              of which is $0D (13) bytes long.  It appears that the
COMMENT                    $08FD                              code only uses the first 16 blocks (0 - $0E).  Each block
COMMENT                    $08FD                              contains the following information:
COMMENT                    $08FD                              ------------------------
COMMENT                    $08FD                              0 |    BCD Value of      |
COMMENT                    $08FD                              ---                  ---
COMMENT                    $08FD                              1 |     Enemy Ship       |
COMMENT                    $08FD                              2 |                      |
COMMENT                    $08FD                              3 |  Display Enemy Star  |
COMMENT                    $08FD                              4 |     Enemy Ship       |
COMMENT                    $08FD                              5 |    Vector Table      |
COMMENT                    $08FD                              6 |     X Movement       |
COMMENT                    $08FD                              7 |       Delta          |
COMMENT                    $08FD                              8 |     Y Movement       |
COMMENT                    $08FD                              9 |       Delta          |
COMMENT                    $08FD                              10 |                      |
COMMENT                    $08FD                              11 | Number of hits to    |
COMMENT                    $08FD                              | destroy warlord ship |
COMMENT                    $08FD                              12 |  Contact Tolerance   |
COMMENT                    $08FD                              The following is an array of 17 blocks of data, each block
LABEL                    $09DA                              InitEnemyStarFrame
COMMENT                    $09DA                              This function fills in all of the important fields
COMMENT                    $09DA                              within the frame used to hold the enemy star information.
COMMENT                    $09DA                              All information about the enemy star is kept in the
COMMENT                    $09DA                              frame C95F.
COMMENT                    $09DA                              InitEnemyStarFrame()
COMMENT                    $09DC                              * Set enemy star velocity
COMMENT                    $09DF                              * Get ptr to enemy star frame
COMMENT                    $09E2                              * Flag player in enemy passage
COMMENT                    $09E7                              * Frame # = $13 (red,not visible
COMMENT                    $09E9                              * Enemy star enabled?
COMMENT                    $09EE                              * No
LABEL                    $09EF                              P09EF
COMMENT                    $09F2                              * Set drawing function
COMMENT                    $09FB                              * Set scale factor
COMMENT                    $0A05                              * Set embedded obj's scale factor
COMMENT                    $0A09                              * Set intensity
COMMENT                    $0A0B                              * Clear collision flag
LABEL                    $0A0F                              InitAllBulletFrames
COMMENT                    $0A0F                              This function fills in the important fields within the
COMMENT                    $0A0F                              3 frames used to hold information about bullets fired
COMMENT                    $0A0F                              by the user.
COMMENT                    $0A0F                              The 3 bullet frames are located at C8F9, C91B and C93D.
COMMENT                    $0A0F                              * Ptr to first bullet frame
COMMENT                    $0A0F                              InitAllBulletFrames()
COMMENT                    $0A12                              * Frame # $11 = Blue,not visible
COMMENT                    $0A17                              * Frame # $12 = Green,not visible
COMMENT                    $0A1C                              * Frame # $13 = Red,not visible
COMMENT                    $0A23                              * Tag end of frame stack
LABEL                    $0A26                              InitOneBulletFrame
COMMENT                    $0A26                              Entry:
COMMENT                    $0A26                              a = frame identifier (color & visibility)
COMMENT                    $0A26                              x = frame ptr
COMMENT                    $0A26                              Exit:
COMMENT                    $0A26                              x = ptr to next frame in stack
COMMENT                    $0A26                              This function fills in the important fields within the
COMMENT                    $0A26                              next frame used to hold information about a bullet
COMMENT                    $0A26                              * Set frame number
COMMENT                    $0A26                              InitOneBulletFrame()
COMMENT                    $0A2B                              * Set drawing function
COMMENT                    $0A2E                              * Flag player in enemy passage
COMMENT                    $0A33                              * Set embedded obj's scale factor
COMMENT                    $0A38                              * Set vector list 1
COMMENT                    $0A3A                              * Set vector list 2
COMMENT                    $0A3C                              * Advance frame pointer
LABEL                    $0A40                              InitEnemyShipFrame
COMMENT                    $0A40                              Entry:
COMMENT                    $0A40                              C88A-C88B = ptr to enemy ship vector list
COMMENT                    $0A40                              C88D-C88E = x movement delta
COMMENT                    $0A40                              C88F-C890 = y movement delta
COMMENT                    $0A40                              This function fills in the important fields within the
COMMENT                    $0A40                              frame used to hold information about the enemy ship.
COMMENT                    $0A40                              All information about the enemy ship is kept in the
COMMENT                    $0A40                              frame located at C981.
COMMENT                    $0A40                              * Ptr to enemy ship frame
COMMENT                    $0A40                              InitEnemyShipFrame()
COMMENT                    $0A45                              * Frame# = $12 (green,not visible
COMMENT                    $0A49                              * Set embedded obj's scale factor
COMMENT                    $0A4E                              * Set vector list 1
COMMENT                    $0A50                              * Set vector list 2
COMMENT                    $0A55                              * Set drawing function
COMMENT                    $0A5B                              * Set x movement delta
COMMENT                    $0A61                              * Set y movement delta
COMMENT                    $0A67                              * Set 16-bit x position
COMMENT                    $0A69                              * Set 16-bit y position
COMMENT                    $0A6B                              * Bounding box limits: -64, -63
COMMENT                    $0A6E                              * Set x bounding box limits
COMMENT                    $0A71                              * Set y bounding box limits
COMMENT                    $0A74                              * Point to the next frame
COMMENT                    $0A79                              * Tag frame as end of stack frame
LABEL                    $0A7C                              UpdateBulletFrames
COMMENT                    $0A7C                              This function updates the scale factor and the intensity
COMMENT                    $0A7C                              for each of the 3 bullet frames.  It also checks to see
COMMENT                    $0A7C                              if the player has requested that another bullet be fired.
COMMENT                    $0A7C                              All information about the 3 bullets are kept in the
COMMENT                    $0A7C                              frames located at C8F9, C91B and C93.
COMMENT                    $0A7C                              * Get addr of 1st bullet frame
COMMENT                    $0A7C                              UpdateBulletFrames()
COMMENT                    $0A7F                              UpdateFrameStateAndCheckForFireRequest;
COMMENT                    $0A81                              * Get addr of 2nd bullet frame
COMMENT                    $0A84                              UpdateFrameStateAndCheckForFireRequest;
COMMENT                    $0A86                              * Get addr of 3rd bullet frame
COMMENT                    $0A89                              UpdateFrameStateAndCheckForFireRequest;
LABEL                    $0A8C                              UFStateAndCheckForFR
COMMENT                    $0A8C                              UFStateAndCheckForFR; UpdateFrameStateAndCheckForFireRequest()
COMMENT                    $0A8C                              Entry:
COMMENT                    $0A8C                              x = ptr to bullet frame
COMMENT                    $0A8C                              This function updates the scale factor and the intensity
COMMENT                    $0A8C                              for one bullet frame.  It will also check to see if the
COMMENT                    $0A8C                              player has requested that another bullet be fired; if
COMMENT                    $0A8C                              so, then the next available frame will be used.  Only
COMMENT                    $0A8C                              1 bullet per pass will be fired.
COMMENT                    $0A8C                              UpdateFrameStateAndCheckForFireRequest:
COMMENT                    $0A8E                              * Is frame visible?
COMMENT                    $0A90                              * Update only visible frames
COMMENT                    $0A92                              * If the frame is not visible, then
COMMENT                    $0A95                              * see if players is trying to fire.
COMMENT                    $0A97                              * Is player dead?
COMMENT                    $0A9E                              * No; flag frame as active again
COMMENT                    $0AA2                              * Set scale factor
COMMENT                    $0AA7                              * Starting pos = player's pos
COMMENT                    $0AA9                              * Only allow 1 bullet per pass
COMMENT                    $0AB1                              * Force 'bullet fired' sound
LABEL                    $0AB4                              P0AB4
COMMENT                    $0AB4                              * Update the scale factor and
COMMENT                    $0AB6                              * intensity, unless scale = 1
COMMENT                    $0AB8                              * which means no longer visible
LABEL                    $0ABE                              P0ABE
COMMENT                    $0AC0                              * Tag frame as no longer visible
LABEL                    $0AC7                              ProcessEnemyShip
COMMENT                    $0AC7                              This function takes care of updating the information in
COMMENT                    $0AC7                              the enemy ship frame (C981).  If the enemy ship is not
COMMENT                    $0AC7                              currently visible, then it will start a new one going.
COMMENT                    $0AC7                              If the enemy ship has collided with the player or a
COMMENT                    $0AC7                              bullet, then it will display an explosion pattern for
COMMENT                    $0AC7                              a given period of time.  It will update the position,
COMMENT                    $0AC7                              scale factor and intensity for the frame, to give it
COMMENT                    $0AC7                              the appearance of moving towards the player.  When the
COMMENT                    $0AC7                              enemy ship reaches the front of the display, it will
COMMENT                    $0AC7                              stop being displayed.
COMMENT                    $0AC7                              * Clear 'enemy destroyed' flag
COMMENT                    $0AC7                              ProcessEnemyShip()
COMMENT                    $0ACA                              * Clear the collision flag
COMMENT                    $0AD0                              * If the frame is not visible,
COMMENT                    $0AD2                              * then we may need to restart
COMMENT                    $0AD4                              * the next enemy ship.
LABEL                    $0AE1                              P0AE1
COMMENT                    $0AE1                              * Start a new enemy ship
COMMENT                    $0AE3                              * Reset frame to be visible
COMMENT                    $0AE8                              * Set drawing function
COMMENT                    $0AEE                              * Set 16-bit scale factor
COMMENT                    $0AF5                              * Force sound to be made
COMMENT                    $0B00                              * Use the system loop counter to
COMMENT                    $0B03                              * generate a y value in the range
COMMENT                    $0B05                              * of +-$3F.
LABEL                    $0B0B                              P0B0B
COMMENT                    $0B0B                              * Use the system loop counter to
COMMENT                    $0B0E                              * generate an x value in the range
COMMENT                    $0B10                              * of +-$3F.
LABEL                    $0B16                              P0B16
COMMENT                    $0B16                              * Set (y,x) position
COMMENT                    $0B18                              * Set backup y position
COMMENT                    $0B1A                              * Set backup x position
COMMENT                    $0B1F                              * Get ememy ship vector list ptr
COMMENT                    $0B22                              * Set vector list 1
COMMENT                    $0B24                              * Set vector list 2
LABEL                    $0B26                              P0B26
COMMENT                    $0B3C                              * If the scale factor > $90, then
COMMENT                    $0B3E                              * stop displaying the frame.
COMMENT                    $0B44                              * Tag frame as no longer visible
LABEL                    $0B4F                              P0B4F
COMMENT                    $0B55                              * Calculate the new intensity =
COMMENT                    $0B57                              * (scale + $40);  if rollover
COMMENT                    $0B59                              * occurs, then use $7F.
LABEL                    $0B5D                              P0B5D
COMMENT                    $0B5D                              * Set the intensity
COMMENT                    $0B63                              * Set embedded obj's intensity
COMMENT                    $0B65                              * Collision with player?
COMMENT                    $0B6A                              * Yes; has the explosion timer
COMMENT                    $0B6D                              * finished?
COMMENT                    $0B72                              * Keep displaying the explosion
COMMENT                    $0B75                              * pattern, rotating between the
COMMENT                    $0B77                              * 4 possible patterns.
COMMENT                    $0B7A                              * Set vector list 1
COMMENT                    $0B7C                              * Set vector list 2
LABEL                    $0B7F                              P0B7F
COMMENT                    $0B83                              * Tag frame as no longer visible
LABEL                    $0B86                              P0B86
LABEL                    $0B93                              P0B93
COMMENT                    $0B93                              * Collided with the player
LABEL                    $0B98                              P0B98
COMMENT                    $0B98                              * Collided with player or bullet
COMMENT                    $0B9D                              * Force a sound to occur
COMMENT                    $0BA0                              * Set sound characteristics index
COMMENT                    $0BA3                              * Flag that a collision occurred
COMMENT                    $0BA8                              * Set explosion duration timer
COMMENT                    $0BAE                              * Set vector list 1
COMMENT                    $0BB0                              * Set vector list 2
COMMENT                    $0BB5                              * Set the drawing function
COMMENT                    $0BB8                              * Bump 'enemy ships destroyed' cntr
COMMENT                    $0BBB                              * Flag that enemy was destroyed
LABEL                    $0BBF                              UpdateEnemyShipPosition
COMMENT                    $0BBF                              Entry:
COMMENT                    $0BBF                              x = ptr to enemy ship frame
COMMENT                    $0BBF                              This function calculates the new position for the current
COMMENT                    $0BBF                              enemy ship.  As it turns out, enemy ships are restricted
COMMENT                    $0BBF                              to the box defined by the points [ in (y,x) format]:
COMMENT                    $0BBF                              (63,63),(-63,63),(-63,-63),(63,-63)
COMMENT                    $0BBF                              The frame structure contains working copies of the
COMMENT                    $0BBF                              current 16-bit x position (13,x) and the 16-bit y
COMMENT                    $0BBF                              position (15,x), along with the 16-bit x delta
COMMENT                    $0BBF                              value ($11,x) and the 16-bit y delta value ($13,x).
COMMENT                    $0BBF                              The bounding box for the enemy ship is defined in the
COMMENT                    $0BBF                              frame structure [x min in ($15,x), x max in ($16,x),
COMMENT                    $0BBF                              y min in ($17,x) and y max in ($18,x)].  Each pass
COMMENT                    $0BBF                              through, the deltas are added (or subtracted) from
COMMENT                    $0BBF                              the current position, and if the edge of the bounding
COMMENT                    $0BBF                              box is reached, the delta is negated, thus forcing
COMMENT                    $0BBF                              the ship to start moving in the other direction.
COMMENT                    $0BBF                              * Load x movement delta
COMMENT                    $0BBF                              UpdateEnemyShipPosition()
COMMENT                    $0BC4                              * Subtract delta from current x
COMMENT                    $0BC6                              * position.
COMMENT                    $0BC8                              * Surpassed lower x bounds?
COMMENT                    $0BCB                              * No
LABEL                    $0BCD                              P0BCD
COMMENT                    $0BCD                              * Yes; so we need to negate
COMMENT                    $0BD0                              * the x movement delta, to
COMMENT                    $0BD1                              * force movement back in the
COMMENT                    $0BD2                              * other direction.
LABEL                    $0BDA                              P0BDA
COMMENT                    $0BDA                              * Add delta to current x position
COMMENT                    $0BDE                              * Surpassed upper x bounds?
COMMENT                    $0BE1                              * Yes; so negate x movement delta
LABEL                    $0BE3                              P0BE3
COMMENT                    $0BE3                              * Load y movement delta
COMMENT                    $0BE8                              * Subtract delta from current y
COMMENT                    $0BEA                              * position.
COMMENT                    $0BEC                              * Surpassed lower y bounds?
COMMENT                    $0BEF                              * No
LABEL                    $0BF1                              P0BF1
COMMENT                    $0BF1                              * Yes; so we need to negate
COMMENT                    $0BF4                              * the y movement delta, to
COMMENT                    $0BF5                              * force movement back in the
COMMENT                    $0BF6                              * other direction.
LABEL                    $0BFE                              P0BFE
COMMENT                    $0BFE                              * Add delta to current y position
COMMENT                    $0C02                              * Surpassed upper y bounds?
COMMENT                    $0C05                              * Yes; so negate y movement delta
LABEL                    $0C07                              P0C07
COMMENT                    $0C07                              * Load the updated y position
COMMENT                    $0C09                              * Load the updated x position
COMMENT                    $0C0B                              * Update the frame's position
EQU                    $0C0E                              StartupNewGame
LABEL                    $0C0E                              StartupNewGame
COMMENT                    $0C0E                              This function takes care of starting the ball rolling
COMMENT                    $0C0E                              when a new game is to be started.
COMMENT                    $0C0E                              StartupNewGame()
COMMENT                    $0C10                              * Force background noise
COMMENT                    $0C19                              * Clear 'enemy ships destroyed cntr
COMMENT                    $0C25                              * Set the indirect jump ptr
LABEL                    $0C2B                              PrepareToFightWarlordShip
COMMENT                    $0C2B                              This function simply initializes the bullet buffers and
COMMENT                    $0C2B                              the Warlord ship frames, before the player faces off
COMMENT                    $0C2B                              with the Warlord ship.
COMMENT                    $0C2B                              PrepareToFightWarlordShip()
COMMENT                    $0C2D                              * Flag that player is out of fuel
COMMENT                    $0C30                              * Don't draw enemy passage walls
LABEL                    $0C3D                              PlayerFightingWarlordShip
COMMENT                    $0C3D                              This is the main processing function for when the user is
COMMENT                    $0C3D                              fighting the Warlord ship.  It checks for the player
COMMENT                    $0C3D                              firing, and updates all bullet, player and Warlord ship
COMMENT                    $0C3D                              positions.  It also checks for collisions and for
COMMENT                    $0C3D                              destruction of the Warlord ship.
COMMENT                    $0C3D                              PlayerFightingWarlordShip()
COMMENT                    $0C49                              * Warlord ship bullet hit player?
COMMENT                    $0C52                              * No; see if the warlord ship has
COMMENT                    $0C55                              * collided with the player.
COMMENT                    $0C5A                              * No; has player hit warlord ship
COMMENT                    $0C5D                              * enough times to destroy it?
COMMENT                    $0C62                              * Yes; add 500 to player's score
COMMENT                    $0C6A                              * Clear alternate scale factor
COMMENT                    $0C70                              * Set the indirect jump ptr
COMMENT                    $0C73                              * See if a bonus ship can be
COMMENT                    $0C76                              * awarded; it will be, only if
COMMENT                    $0C78                              * the player currently has < 9
COMMENT                    $0C7A                              * ships.
LABEL                    $0C7D                              P0C7D
LABEL                    $0C7E                              P0C7E
COMMENT                    $0C7E                              * Player hit by warlord ship bullet
COMMENT                    $0C7F                              * or collided with warlord ship.
COMMENT                    $0C80                              * Clear alternate scale factor
COMMENT                    $0C86                              * Set the indirect jump ptr
COMMENT                    $0C8E                              * Force noise to occur
COMMENT                    $0C93                              * Set sound characteristics index
LABEL                    $0C96                              P0C96
EQU                    $0C97                              WarlordShipDestroyed
LABEL                    $0C97                              WarlordShipDestroyed
COMMENT                    $0C97                              This is the main processing function for when the player
COMMENT                    $0C97                              has destroyed the Warlord ship.  It draws the Warlord
COMMENT                    $0C97                              ship exploding into pieces.  Once that completes, it
COMMENT                    $0C97                              prepares the player for the fuel passage.
COMMENT                    $0C97                              WarlordShipDestroyed()
COMMENT                    $0CA8                              * Increment alternate scale factor
COMMENT                    $0CAF                              * Draw exploding Warlord ship
COMMENT                    $0CB1                              * Clear 'out of fuel' flag
COMMENT                    $0CB4                              * Clear warlord ship hit counter
COMMENT                    $0CB7                              * Goto fuel passage
LABEL                    $0CBB                              P0CBB
COMMENT                    $0CBB                              * Update the warlord ship frames
COMMENT                    $0CBE                              * only on every other pass.
LABEL                    $0CC3                              P0CC3
COMMENT                    $0CC3                              WarlordShipBeingDestroyedOffsets;
COMMENT                    $0CC6                              * Get warship target frame
LABEL                    $0CC9                              P0CC9
COMMENT                    $0CC9                              * Is the frame visible?
COMMENT                    $0CCD                              * No
LABEL                    $0CCE                              P0CCE
COMMENT                    $0CCE                              * Yes; force the warlord ship
COMMENT                    $0CD0                              * pieces to drift apart, since
COMMENT                    $0CD2                              * it has been destroyed.  Do this
COMMENT                    $0CD4                              * by un-syncing the (y,x) values
COMMENT                    $0CD6                              * for the warlord ship frames.
COMMENT                    $0CDB                              * Warlord ship frame 1 y offset
COMMENT                    $0CDB                              WarlordShipBeingDestroyedOffsets:
COMMENT                    $0CE3                              * Warlord ship frame 5 y offset
EQU                    $0CE5                              PlayerCollidedWithWarlordShip
LABEL                    $0CE5                              PlayerCollidedWithWarlordShip
COMMENT                    $0CE5                              This is the main processing function for when the player
COMMENT                    $0CE5                              has collided with the Warlord ship.  It removes all
COMMENT                    $0CE5                              bullets and shows both the player and the Warlord ship
COMMENT                    $0CE5                              as exploding.  Otherwise, if the player has any ships
COMMENT                    $0CE5                              left, it prepares the player to again face off against
COMMENT                    $0CE5                              the Warship.  If the game is over, then it checks for
COMMENT                    $0CE5                              a new high score, and waits to start a new game.
COMMENT                    $0CE5                              PlayerCollidedWithWarlordShip()
COMMENT                    $0CED                              * Force bullet 1 frame invisible
COMMENT                    $0CF0                              * Force bullet 2 frame invisible
COMMENT                    $0CF3                              * Force bullet 3 frame invisible
COMMENT                    $0CF6                              * Force warlord bullet invisible
COMMENT                    $0CF9                              * Player done exploding
COMMENT                    $0CFE                              * Yes; restart player
COMMENT                    $0D01                              * If the player has no more ships
COMMENT                    $0D04                              * left, then enter a waiting state
COMMENT                    $0D06                              * waiting for new game to start.
COMMENT                    $0D08                              * Decrement player's ship count
COMMENT                    $0D0E                              * Set startup delay timer
COMMENT                    $0D14                              * Set the indirect jump ptr
LABEL                    $0D17                              P0D17
LABEL                    $0D18                              P0D18
COMMENT                    $0D18                              * Game Over
COMMENT                    $0D1E                              * Set the indirect jump ptr
COMMENT                    $0D24                              * See if player had new hi score
COMMENT                    $0D2D                              * Set startup delay timer
COMMENT                    $0D34                              This is the main processing function for when the player
COMMENT                    $0D34                              has been killed by the Warship, and is again about to
COMMENT                    $0D34                              face off against the Warship.  It delays briefly, before
COMMENT                    $0D34                              moving onto the next stage.
COMMENT                    $0D34                              RestartPlayerAgainstWarlordShip()
EQU                    $0D37                              RestartPlayerAgainstWarlordShip
LABEL                    $0D37                              RestartPlayerAgainstWarlordShip
COMMENT                    $0D3A                              * Decrement startup delay timer
COMMENT                    $0D3D                              * Don't start the action until
COMMENT                    $0D40                              * the delay timer has expired.
COMMENT                    $0D4B                              * Set the indirect jump ptr
LABEL                    $0D4E                              P0D4E
EQU                    $0D4F                              PrepareToEnterEnemyPassage
LABEL                    $0D4F                              PrepareToEnterEnemyPassage
COMMENT                    $0D4F                              This is the main processing function for when the user
COMMENT                    $0D4F                              is just entering the enemy passage.  It initializes the
COMMENT                    $0D4F                              player frames, sets up a delay timer, and flags that the
COMMENT                    $0D4F                              passage walls should not initially be drawn.  It then
COMMENT                    $0D4F                              moves the player onto the next state, which is entering
COMMENT                    $0D4F                              the enemy passage.
COMMENT                    $0D4F                              PrepareToEnterEnemyPassage()
COMMENT                    $0D5B                              * Set startup delay timer
COMMENT                    $0D5E                              * Don't draw enemy passage walls
COMMENT                    $0D64                              * Set the indirect jump ptr
EQU                    $0D68                              ApproachEnemyPassage
LABEL                    $0D68                              ApproachEnemyPassage
COMMENT                    $0D68                              This is the main processing function for when the player
COMMENT                    $0D68                              is approaching the enemy passage area.  Initially, only
COMMENT                    $0D68                              the player's ship is drawn.  After some delay, the
COMMENT                    $0D68                              state will be changed to the next state, which will
COMMENT                    $0D68                              enable the drawing of the passage walls.
COMMENT                    $0D68                              ApproachEnemyPassage()
COMMENT                    $0D6E                              * Decrement startup delay timer
COMMENT                    $0D71                              * Don't start the action until
COMMENT                    $0D74                              * the delay timer has expired.
LABEL                    $0D79                              P0D79
COMMENT                    $0D7C                              * Set the indirect jump ptr
COMMENT                    $0D7F                              * Enable drawing enemy passage walls
LABEL                    $0D96                              P0D96
EQU                    $0D97                              EnterEnemyPassage
LABEL                    $0D97                              EnterEnemyPassage
COMMENT                    $0D97                              This is the main processing function for when the player
COMMENT                    $0D97                              is entering into the enemy passage area.  It updates
COMMENT                    $0D97                              any bullets fired by the player, and updates the position
COMMENT                    $0D97                              of both the enemy ship and the enemy star, before moving
COMMENT                    $0D97                              onto the next state (in the enemy passage).
COMMENT                    $0D97                              EnterEnemyPassage()
COMMENT                    $0DB9                              * Set the indirect jump ptr
LABEL                    $0DBC                              P0DBC
EQU                    $0DBD                              PlayerHasRunOutOfFuel
LABEL                    $0DBD                              PlayerHasRunOutOfFuel
COMMENT                    $0DBD                              This is the main processing function for when the player
COMMENT                    $0DBD                              has completely run out of fuel, while in the enemy
COMMENT                    $0DBD                              passage.  It continues to update any bullets fired by
COMMENT                    $0DBD                              the player, and the positions of the enemy star and ship.
COMMENT                    $0DBD                              It also forces the player's ship to slowly sink downward,
COMMENT                    $0DBD                              due to lack of fuel, and to explode, when it comes in
COMMENT                    $0DBD                              contact with the ground.
COMMENT                    $0DBD                              PlayerHasRunOutOfFuel()
COMMENT                    $0DC9                              * Force player to sink towards
COMMENT                    $0DCC                              * ground (he has no fuel).  When
COMMENT                    $0DCF                              * the ship reaches the ground,
COMMENT                    $0DD1                              * it's all over.
COMMENT                    $0DD5                              * Clear alternate scale factor
COMMENT                    $0DDB                              * Set the indirect jump ptr
LABEL                    $0DE1                              P0DE1
EQU                    $0DE2                              InEnemyPassage
LABEL                    $0DE2                              InEnemyPassage
COMMENT                    $0DE2                              This is the main processing function for when the player
COMMENT                    $0DE2                              is in the enemy passage.  It updates everything on the
COMMENT                    $0DE2                              display (bullets, player, enemy star, enemy ship, fuel
COMMENT                    $0DE2                              levels, etc).  It also checks to see if there have been
COMMENT                    $0DE2                              any collisions, or if the player has destroyed the last
COMMENT                    $0DE2                              enemy ship for this level (at which point you advance to
COMMENT                    $0DE2                              to the next state).
COMMENT                    $0DE2                              InEnemyPassage()
COMMENT                    $0DF4                              * Is player out of fuel?
COMMENT                    $0DF9                              * Yes
COMMENT                    $0DFE                              * Force a sound to occur
COMMENT                    $0E04                              * Set the indirect jump ptr
LABEL                    $0E08                              P0E08
COMMENT                    $0E0B                              * Get ptr to enemy ship frame
COMMENT                    $0E11                              * Did player collide w/ enemy ship?
COMMENT                    $0E16                              * Did player collide w/ enemy star?
COMMENT                    $0E1B                              * Check to see if the player has
COMMENT                    $0E1E                              * run into a passage wall, or has
COMMENT                    $0E20                              * run aground.
LABEL                    $0E31                              P0E31
COMMENT                    $0E31                              * Impact has occurred!
COMMENT                    $0E36                              * Clear alternate scale factor
COMMENT                    $0E3C                              * Set the indirect jump ptr
LABEL                    $0E3F                              P0E3F
COMMENT                    $0E44                              * Force a sound to occur
COMMENT                    $0E49                              * Set sound characteristics index
LABEL                    $0E4C                              P0E4C
LABEL                    $0E55                              P0E55
COMMENT                    $0E58                              * All enemy ships destroyed?
COMMENT                    $0E5D                              * Clear enemy destroyed counter
COMMENT                    $0E6C                              * Set the indirect jump ptr
COMMENT                    $0E72                              * Set the delay timer
LABEL                    $0E7A                              P0E7A
EQU                    $0E7B                              PlayerCollidedWithEnemyShip
LABEL                    $0E7B                              PlayerCollidedWithEnemyShip
COMMENT                    $0E7B                              This is the main processing function for when the player
COMMENT                    $0E7B                              has collided with something.  It draws the player's ship
COMMENT                    $0E7B                              exploding, and then determines whether the player should
COMMENT                    $0E7B                              reenter the enemy passage (if he has any ships left), or
COMMENT                    $0E7B                              whether the game is over, and we should wait to start
COMMENT                    $0E7B                              a new one.
COMMENT                    $0E7B                              * Disable all but normal game
COMMENT                    $0E7B                              PlayerCollidedWithEnemyShip()
COMMENT                    $0E7D                              * noise & 'player hit' sound.
LABEL                    $0E8B                              P0E8B
COMMENT                    $0E97                              * Is the player's ship done
COMMENT                    $0E9A                              * exploding?
COMMENT                    $0E9C                              * If the player's ship count
COMMENT                    $0E9F                              * is now <<0, then the game is
COMMENT                    $0EA1                              * over.  Otherwise, prepare
COMMENT                    $0EA3                              * to try again.
COMMENT                    $0EA9                              * Set the indirect jump ptr
LABEL                    $0EAC                              P0EAC
LABEL                    $0EAD                              P0EAD
COMMENT                    $0EB3                              * Set the indirect jump ptr
COMMENT                    $0EB6                              * See if the player set a new
COMMENT                    $0EB9                              * high score for the game.
COMMENT                    $0EC2                              * Set the restart delay timer
COMMENT                    $0EC5                              * Disable all sounds
LABEL                    $0ED3                              WaitForGameRestart
COMMENT                    $0ED3                              This function waits until either the restart delay timer
COMMENT                    $0ED3                              expires, or the player presses a button, at which time it
COMMENT                    $0ED3                              will start up a new game.  While it is waiting for the
COMMENT                    $0ED3                              timer to expire or the player to press a button, it will
COMMENT                    $0ED3                              display the last player's score (in frame C91B), the
COMMENT                    $0ED3                              'GAME OVER' string (in frame C8F9)* and the player's
COMMENT                    $0ED3                              ship (in frame C8D7).
COMMENT                    $0ED3                              * If any buttons are pressed,
COMMENT                    $0ED3                              WaitForGameRestart()
COMMENT                    $0ED6                              * then restart game.
COMMENT                    $0EDA                              * Decrement restart delay timer,
COMMENT                    $0EDD                              * and restart game when it goes
COMMENT                    $0EE0                              * to 0.
LABEL                    $0EE5                              P0EE5
COMMENT                    $0EE8                              * Set the indirect jump ptr
LABEL                    $0EEC                              P0EEC
COMMENT                    $0EEC                              * Don't draw enemy passage walls
COMMENT                    $0EF1                              * Flag that player is out of fuel
COMMENT                    $0EF4                              * Flag that player is low on fuel
COMMENT                    $0EFA                              * Set string height and width
COMMENT                    $0EFD                              * Get ptr to frame C8F9
COMMENT                    $0F00                              * Flag player in enemy passage
COMMENT                    $0F05                              * Frame # = 2 (green)
COMMENT                    $0F0A                              * Set drawing function
COMMENT                    $0F13                              * Set scale factor
COMMENT                    $0F17                              * Set embedded obj's scale factor
COMMENT                    $0F1B                              * Set intensity
COMMENT                    $0F20                              * Set vector list 1
COMMENT                    $0F25                              * Set vector list 2
COMMENT                    $0F2A                              * Set (y,x) position
COMMENT                    $0F2C                              * Get ptr to next frame
COMMENT                    $0F2F                              * Flag player in enemy passage
COMMENT                    $0F34                              * Frame # = 1 (blue)
COMMENT                    $0F39                              * Set drawing function
COMMENT                    $0F42                              * Set scale factor
COMMENT                    $0F46                              * Set embedded obj's scale factor
COMMENT                    $0F4A                              * Set intensity
COMMENT                    $0F4C                              * Player's score string
COMMENT                    $0F4F                              * Set vector list 1
COMMENT                    $0F51                              * Player's score string
COMMENT                    $0F54                              * Set vector list 2
COMMENT                    $0F59                              * Set (y,x) position
COMMENT                    $0F5B                              * Get ptr to next frame
COMMENT                    $0F5E                              * Mark the next frame as the
COMMENT                    $0F60                              * end of the active frame stack
EQU                    $0F63                              LevelCompleted
LABEL                    $0F63                              LevelCompleted
COMMENT                    $0F63                              This is the main processing function for when the player
COMMENT                    $0F63                              has completed a level.  It determines whether the player
COMMENT                    $0F63                              will enter the fuel passage, or go up against the
COMMENT                    $0F63                              Warlord ship.
COMMENT                    $0F63                              LevelCompleted()
COMMENT                    $0F70                              * Force off enemy ship sound
COMMENT                    $0F75                              * Force off player's bullet frames
COMMENT                    $0F85                              * Clear 'warlord hit' counter
COMMENT                    $0F8E                              * Set the indirect jump ptr
LABEL                    $0F92                              PrepareForFuelPassage
COMMENT                    $0F92                              This function prepares for the player to enter the fuel
COMMENT                    $0F92                              passage.  It sets up the frames used for drawing the
COMMENT                    $0F92                              fuel walls and cannisters, and moves the player into
COMMENT                    $0F92                              the next state (in the fuel passage).
COMMENT                    $0F92                              PrepareForFuelPassage()
COMMENT                    $0F9B                              * Set the indirect jump ptr
COMMENT                    $0F9E                              * Don't draw enemy passage walls
COMMENT                    $0FA1                              * Clear fuel object counter
LABEL                    $0FA7                              P0FA7
EQU                    $0FA8                              PlayerInFuelPassage
LABEL                    $0FA8                              PlayerInFuelPassage
COMMENT                    $0FA8                              This is the main processing function for when the
COMMENT                    $0FA8                              player is in the fuel passage.
COMMENT                    $0FA8                              When the user has destroyed all of the enemy ships
COMMENT                    $0FA8                              in the enemy passage, he will advance to the next
COMMENT                    $0FA8                              fuel passage.  This function takes care up updating
COMMENT                    $0FA8                              the player's position, checking to see if he has
COMMENT                    $0FA8                              picked up any fuel cannisters, and checking to see
COMMENT                    $0FA8                              if the player has flown through a fuel wall opening,
COMMENT                    $0FA8                              or been destroyed by flying into a fuel wall.  It
COMMENT                    $0FA8                              will also detect when the user has completed the fuel
COMMENT                    $0FA8                              passage, and will advance the user onto the next enemy
COMMENT                    $0FA8                              passage level.
COMMENT                    $0FA8                              * Prevent fuel bar from flashing
COMMENT                    $0FA8                              PlayerInFuelPassage()
COMMENT                    $0FAB                              * Clear 'fuel picked up' flag
COMMENT                    $0FAE                              * Clear 'player thru level' flag
COMMENT                    $0FB7                              * Did player hit a fuel wall?
COMMENT                    $0FB9                              * Yes; ship destroyed
COMMENT                    $0FBC                              * Set the indirect jump ptr
COMMENT                    $0FC1                              * Clear alternate scale factor
COMMENT                    $0FC9                              * Force sound to occur
COMMENT                    $0FCE                              * Set sound characteristics index
LABEL                    $0FD2                              P0FD2
COMMENT                    $0FD2                              * Did player pickup fuel cannister?
COMMENT                    $0FD6                              * Yes; flag that fuel was picked up
COMMENT                    $0FDE                              * Force sound to occur
COMMENT                    $0FE4                              * Add 5 units of fuel to the
COMMENT                    $0FE6                              * player's reserves, upto a max
COMMENT                    $0FE8                              * of $60 fuel units.
LABEL                    $0FEC                              P0FEC
LABEL                    $0FEF                              P0FEF
COMMENT                    $0FEF                              * Did player pass thru opening?
COMMENT                    $0FF3                              * Yes
COMMENT                    $0FF8                              * Force sound to occur
LABEL                    $0FFB                              P0FFB
COMMENT                    $0FFE                              * Did player complete fuel passage?
LABEL                    $1000                              _1000
COMMENT                    $1003                              * Yes; move onto next
COMMENT                    $1006                              * enemy passage level.
LABEL                    $1009                              P1009
EQU                    $100A                              PlayerHitFuelWall
LABEL                    $100A                              PlayerHitFuelWall
COMMENT                    $100A                              This is the main processing function for when the
COMMENT                    $100A                              player has collided with one of the fuel walls.
COMMENT                    $100A                              It displays the exploding player's ship.
COMMENT                    $100A                              When the explosion finishes, it decides whether the
COMMENT                    $100A                              the game is over (player has no more ships), or
COMMENT                    $100A                              whether the player can reenter the fuel passage.  If
COMMENT                    $100A                              the player is going to reenter the fuel passage, then
COMMENT                    $100A                              all of the fuel objects will be temporarily forced off,
COMMENT                    $100A                              to give the illusion that the player is reentering
COMMENT                    $100A                              where he left off; the fuel object will eventually be
COMMENT                    $100A                              redisplayed.
COMMENT                    $100A                              PlayerHitFuelWall()
COMMENT                    $100D                              * Ship done exploding?
COMMENT                    $1012                              * Yes; see if the player has any
COMMENT                    $1015                              * ships left.  If not, then the
COMMENT                    $1017                              * game is over.
COMMENT                    $1019                              * Game Over
LABEL                    $101C                              P101C
COMMENT                    $101C                              * Decrement player's ship count
COMMENT                    $1022                              * Set the indirect jump ptr
COMMENT                    $102A                              * Start player with $30 fuel units
COMMENT                    $1033                              * Set delay timer
COMMENT                    $1036                              * Force all 4 fuel frames invisible
LABEL                    $1040                              _1040
LABEL                    $104A                              P104A
LABEL                    $104B                              ForceFuelWallFrameInvisible
COMMENT                    $104B                              Entry:
COMMENT                    $104B                              x = ptr to frame #
COMMENT                    $104B                              After the player hits a fuel wall, we want to temporarily
COMMENT                    $104B                              turn off the remaining fuel objects; after the user
COMMENT                    $104B                              restarts in the fuel passage, the fuel objects will
COMMENT                    $104B                              again become visible (though with different scale factors).
COMMENT                    $104B                              This function looks at the incoming frame #, and if it
COMMENT                    $104B                              is the 'end of frame stack' marker, then it changes the
COMMENT                    $104B                              frame # from $FF to $1F.  Otherwise, it simply makes
COMMENT                    $104B                              the frame invisible, by or'ing in $10.  By changing the
COMMENT                    $104B                              'end of frame stack' marker, this code will allow the
COMMENT                    $104B                              frames beyond it to be displayed; in this case, the
COMMENT                    $104B                              frames beyond contain the players ship count & score.
COMMENT                    $104B                              ForceFuelWallFrameInvisible()
LABEL                    $1054                              P1054
EQU                    $1059                              PrepareToReenterFuelPassage
LABEL                    $1059                              PrepareToReenterFuelPassage
COMMENT                    $1059                              This is the main processing function for when
COMMENT                    $1059                              the player is preparing to reenter the fuel passage,
COMMENT                    $1059                              after the player has crashed into one of the fuel walls.
COMMENT                    $1059                              Before entering the fuel passage, it
COMMENT                    $1059                              will wait for the delay timer to elapse, at which
COMMENT                    $1059                              point it will reenable all of the fuel object frames.
COMMENT                    $1059                              It will also reset the scale factor for the first
COMMENT                    $1059                              fuel object (the wall into which the player crashed)
COMMENT                    $1059                              so that the fuel wall starts slightly back down the
COMMENT                    $1059                              fuel passage; it will also update all of the other
COMMENT                    $1059                              fuel object frames, so that they too are proportionally
COMMENT                    $1059                              back down the fuel passage.
COMMENT                    $1059                              PrepareToReenterFuelPassage()
COMMENT                    $105C                              * Decrement the delay timer, and
COMMENT                    $105F                              * do nothing until the timer
COMMENT                    $1062                              * counts down to 0.
COMMENT                    $1067                              * Reenable the 4 fuel object frames
COMMENT                    $107E                              * Set the 'end of frame stack'
COMMENT                    $1082                              * Reset 1st fuel wall's scale
COMMENT                    $1085                              * factor.
COMMENT                    $108E                              * Set the indirect jump ptr
LABEL                    $1091                              P1091
LABEL                    $1092                              RestoreFuelWallFrameStatus
COMMENT                    $1092                              Entry:
COMMENT                    $1092                              x = ptr to frame #
COMMENT                    $1092                              This function will cause the fuel object frames to again
COMMENT                    $1092                              become visible.  This happens after the player has crashed,
COMMENT                    $1092                              and has then started to reenter the fuel passage.
COMMENT                    $1092                              This function looks at the incoming frame #, and if it
COMMENT                    $1092                              is = to the special tag $1F, then it resets it to $FF
COMMENT                    $1092                              (the 'end of frame stack' marker).  Otherwise, it forces
COMMENT                    $1092                              the frame to again be visible, by and'ing the frame
COMMENT                    $1092                              number with $0F.
COMMENT                    $1092                              RestoreFuelWallFrameStatus()
COMMENT                    $1094                              * Former end of frame stack?
COMMENT                    $1098                              * Nope, so make visible again
LABEL                    $109D                              P109D
COMMENT                    $109D                              * Yes, so retag as end of stack
LABEL                    $10A0                              _10A0
LABEL                    $10A2                              InitScoreAndShipCountFrames_1
COMMENT                    $10A2                              InitScoreAndShipCountFrames_2()
COMMENT                    $10A2                              These functions both fill in 2 frames with information
COMMENT                    $10A2                              for displaying the player's ship count and score.  The
COMMENT                    $10A2                              ship count goes into the first frame (in blue), while
COMMENT                    $10A2                              the score goes into the second frame (in green).
COMMENT                    $10A2                              InitScoreAndShipCountFrames_1() uses frames C981 & C9A3,
COMMENT                    $10A2                              while InitScoreAndShipCountFrames_2() uses frames C8F9 &
COMMENT                    $10A2                              C91B.
COMMENT                    $10A2                              * Use frames C981 & C9A3
COMMENT                    $10A2                              InitScoreAndShipCountFrames_1()
LABEL                    $10A7                              InitScoreAndShipCountFrames_2
COMMENT                    $10A7                              * Use frames C8F9 & C91B
LABEL                    $10AA                              P10AA
COMMENT                    $10AD                              * Set string height & width
COMMENT                    $10B0                              * Flag player in enemy passage
COMMENT                    $10B5                              * Frame # = 1 (blue)
COMMENT                    $10BA                              * Set drawing function
COMMENT                    $10C3                              * Set scale factor
COMMENT                    $10C7                              * Set embedded obj's scale factor
COMMENT                    $10CB                              * Set intensity
COMMENT                    $10CD                              * Ptr to ship count string
COMMENT                    $10D0                              * Set vector list 1
COMMENT                    $10D2                              * Ptr to ship count string
COMMENT                    $10D5                              * Set vector list 2
COMMENT                    $10DA                              * Set (y,x) position
COMMENT                    $10DC                              * Get ptr to next frame
COMMENT                    $10DF                              * Flag player in enemy passage
COMMENT                    $10E4                              * Frame # = 2 (green)
COMMENT                    $10E9                              * Set drawing function
COMMENT                    $10F2                              * Set scale factor
COMMENT                    $10F6                              * Set embedded obj's scale factor
COMMENT                    $10FA                              * Set intensity
COMMENT                    $10FC                              * Ptr to player's score
COMMENT                    $10FF                              * Set vector list 1
COMMENT                    $1101                              * Ptr to player's score
COMMENT                    $1104                              * Set vector list 2
COMMENT                    $1109                              * Set (y,x) position
COMMENT                    $110B                              * Get ptr to next frame
COMMENT                    $1110                              * Tag as 'End of frame stack'
LABEL                    $111B                              InitPlayersScoreAndShipCount
COMMENT                    $111B                              This function initializes the buffers holding the player's
COMMENT                    $111B                              ship count (C8BE), and the player's score (C8C6).
COMMENT                    $111B                              InitPlayersScoreAndShipCount()
COMMENT                    $1121                              * Ptr to ship count buffer
COMMENT                    $1132                              * Set buffer to "SHIPS 3",$80
COMMENT                    $1137                              * Ptr to player's score buffer
COMMENT                    $1143                              * Set buffer to "     0",$80
LABEL                    $1146                              DrawEnemyPassageWalls
COMMENT                    $1146                              Entry:
COMMENT                    $1146                              u = ptr to array of 2 ptrs, each pointing to a vector
COMMENT                    $1146                              list.
COMMENT                    $1146                              This function draws the side walls within the enemy
COMMENT                    $1146                              passage.  It only draws the walls on one side of the
COMMENT                    $1146                              passage, since the color of the walls on the other
COMMENT                    $1146                              side of the passage are a different color.  When drawing
COMMENT                    $1146                              the walls (there are usually three), it will use the
COMMENT                    $1146                              first vector ptr in the array, unless the scale factor
COMMENT                    $1146                              for the segment is > $60, at which point it will draw
COMMENT                    $1146                              using the second vector ptr.  The first vector ptr
COMMENT                    $1146                              represents the full wall, while the second vector ptr
COMMENT                    $1146                              is used when a wall is all the way up front, and is about
COMMENT                    $1146                              to go off the front of the screen (thus, only a portion of
COMMENT                    $1146                              the wall is still visible).
COMMENT                    $1146                              * Should enemy walls be drawn?
COMMENT                    $1146                              DrawEnemyPassageWalls()
COMMENT                    $114B                              * No
LABEL                    $114C                              P114C
COMMENT                    $114C                              * Yes
COMMENT                    $1150                              * Set loop counter; 3 walls
LABEL                    $1157                              P1157
COMMENT                    $115D                              * If scale <= $60 then draw
COMMENT                    $115F                              * the full wall, else draw only
COMMENT                    $1161                              * the partial wall
LABEL                    $1163                              P1163
LABEL                    $1166                              P1166
COMMENT                    $1168                              * Decrement loop counter
COMMENT                    $116B                              * More walls to draw?
LABEL                    $1170                              DrawFuelBar
COMMENT                    $1170                              This function draws the player's fuel bar (gauge).
COMMENT                    $1170                              If the player is out of fuel, then the bar is not drawn.
COMMENT                    $1170                              If the player is low on fuel, then the fuel bar will
COMMENT                    $1170                              be forced to flash (by not drawing it on every pass
COMMENT                    $1170                              through this function.  The amount of fuel the player
COMMENT                    $1170                              has (in CA77) is actually the scale factor used to
COMMENT                    $1170                              draw the fuel bar.
COMMENT                    $1170                              * Is player out of fuel?
COMMENT                    $1170                              DrawFuelBar()
COMMENT                    $1175                              * Yes
LABEL                    $1176                              P1176
COMMENT                    $1176                              * No, but is player low on fuel?
COMMENT                    $117B                              * Yes; therefore, force the fuel
COMMENT                    $117E                              * bar to flash, by not drawing
COMMENT                    $1180                              * it on every pass.
LABEL                    $1183                              P1183
COMMENT                    $1188                              * Write scale factor ($60)
COMMENT                    $118A                              * Drawing position is based on
COMMENT                    $118D                              * whether we are drawing for the
COMMENT                    $1190                              * left or right eye.
LABEL                    $1195                              P1195
COMMENT                    $1195                              * Write y value ($80)
COMMENT                    $1199                              * Un-zero integrators, & trigger
COMMENT                    $119B                              * IRQ off positive edge.
COMMENT                    $119F                              * Write x value ($D0 or $F0)
LABEL                    $11A5                              P11A5
COMMENT                    $11A5                              * Wait for timer interrupt
COMMENT                    $11A7                              * Display the player's fuel bar
COMMENT                    $11A9                              * Write y value (0)
COMMENT                    $11AD                              * Get player's fuel units
COMMENT                    $11B0                              * Write scale factor
COMMENT                    $11B6                              * Write x value ($7F)
LABEL                    $11BE                              P11BE
COMMENT                    $11BE                              * Wait for timer interrupt
COMMENT                    $11C2                              * Clear line drawing pattern
LABEL                    $11C8                              CheckForCollisionWithBullets
COMMENT                    $11C8                              Entry:
COMMENT                    $11C8                              x = Frame ptr
COMMENT                    $11C8                              C880 = Contact tolerance value
COMMENT                    $11C8                              Exit:
COMMENT                    $11C8                              a = $00 (no contact) or $FF (contact occurred)
COMMENT                    $11C8                              This function checks each of the player's bullets, to see
COMMENT                    $11C8                              if one of them have hit the object in the incoming frame.
COMMENT                    $11C8                              The 'tolerance' value controls how close two objects
COMMENT                    $11C8                              must be, in order for them to be considered as having
COMMENT                    $11C8                              collided.  Before checking to see if two objects have
COMMENT                    $11C8                              collided, the two frames must have similar scale factor
COMMENT                    $11C8                              values (their difference must be <= 2).
COMMENT                    $11C8                              * Get ptr to first bullet frame
COMMENT                    $11C8                              CheckForCollisionWithBullets()
COMMENT                    $11CB                              * Get scale for incoming frame
COMMENT                    $11CF                              * Skip this bullet frame, if
COMMENT                    $11D1                              * it is not visible.
COMMENT                    $11D3                              * Calculate the absolute value
COMMENT                    $11D5                              * of the difference between the
COMMENT                    $11D7                              * 2 frame's scale factors.
LABEL                    $11D8                              P11D8
COMMENT                    $11D8                              * Skip this bullet, if the scale
COMMENT                    $11DA                              * factors are not within 2.
LABEL                    $11DC                              P11DC
COMMENT                    $11DC                              * Get ptr to next bullet frame
COMMENT                    $11DF                              * Skip this bullet frame, if
COMMENT                    $11E1                              * it is not visible.
COMMENT                    $11E3                              * Calculate the absolute value
COMMENT                    $11E5                              * of the difference between the
COMMENT                    $11E7                              * 2 frame's scale factors.
LABEL                    $11EA                              P11EA
COMMENT                    $11EA                              * Skip this bullet, if the scale
COMMENT                    $11EC                              * factors are not within 2.
LABEL                    $11EE                              P11EE
COMMENT                    $11EE                              * Get ptr to next bullet frame
COMMENT                    $11F1                              * Skip this bullet frame, if
COMMENT                    $11F3                              * it is not visible.
COMMENT                    $11F5                              * Bail out; no contact occurred
LABEL                    $11F7                              P11F7
COMMENT                    $11F7                              * Calculate the absolute value
COMMENT                    $11F9                              * of the difference between the
COMMENT                    $11FB                              * 2 frame's scale factors.
LABEL                    $11FE                              P11FE
COMMENT                    $11FE                              * Skip this bullet, if the scale
COMMENT                    $1200                              * factors are not within 2.
COMMENT                    $1202                              * Bail out; no contact occurred
LABEL                    $1204                              P1204
COMMENT                    $1204                              * Calulate the absolute value of
COMMENT                    $1206                              * the difference in the 2 frame's
COMMENT                    $1208                              * x and y values.
COMMENT                    $120D                              * Proceed only if the y values
COMMENT                    $1210                              * are within the tolerance level
COMMENT                    $1212                              * Bail out; no contact occurred
LABEL                    $1214                              P1214
COMMENT                    $1214                              * Proceed only if the x values
COMMENT                    $1217                              * are within the tolerance level
COMMENT                    $1219                              * Bail out; no contact occurred
LABEL                    $121B                              P121B
COMMENT                    $121B                              * Contact!!
COMMENT                    $1221                              * Tag bullet frame as invisible
LABEL                    $1224                              CheckForCollisionWithPlayer
COMMENT                    $1224                              Entry:
COMMENT                    $1224                              x = Frame ptr
COMMENT                    $1224                              Exit:
COMMENT                    $1224                              a = $00 (no contact) or $FF (contact occurred)
COMMENT                    $1224                              This function checks to see if the incoming frame object
COMMENT                    $1224                              has collided with the player's ship. Before checking to
COMMENT                    $1224                              see if two objects have collided, the two frames must
COMMENT                    $1224                              have similar scale factor values (their difference must
COMMENT                    $1224                              be <= 3).  The 'y' tolerance value is $08, while the 'x'
COMMENT                    $1224                              tolerance value is $1E (30).
COMMENT                    $1224                              * Initially assume no contact
COMMENT                    $1224                              CheckForCollisionWithPlayer()
COMMENT                    $1225                              * Skip check, if the incoming
COMMENT                    $1227                              * frame is not visible.
LABEL                    $122C                              P122C
COMMENT                    $122C                              * Skip check, if the incoming
COMMENT                    $122F                              * frame is already exploding.
LABEL                    $1232                              P1232
COMMENT                    $1232                              * Get ptr to player's frame
COMMENT                    $1235                              * Skip if already exploding.
LABEL                    $123B                              P123B
COMMENT                    $123B                              * Calculate the absolute value
COMMENT                    $123D                              * of the difference between the
COMMENT                    $123F                              * 2 frame's scale factors.
LABEL                    $1242                              P1242
COMMENT                    $1242                              * No possible contact if the
COMMENT                    $1244                              * scale factors difference > 3
COMMENT                    $1246                              * Bail out; no contact occurred
LABEL                    $1248                              P1248
COMMENT                    $1248                              * Calculate the x & y deltas for
COMMENT                    $124A                              * the two frames.
COMMENT                    $1251                              * Proceed only if the y delta
COMMENT                    $1253                              * is < 8
COMMENT                    $1255                              * Bail out; no contact occurred
LABEL                    $1257                              P1257
COMMENT                    $1257                              * Proceed only if the x delta
COMMENT                    $1259                              * is < $1E (30).
COMMENT                    $125B                              * Bail out; no contact occurred
LABEL                    $125D                              P125D
COMMENT                    $125D                              * Contact!!
LABEL                    $1260                              CheckForContactWithFuelObjects
COMMENT                    $1260                              Exit:
COMMENT                    $1260                              a = $00 (No contact)
COMMENT                    $1260                              $01 (Passed through fuel wall opening)
COMMENT                    $1260                              $02 (Picked up fuel cannister)
COMMENT                    $1260                              $FF (Hit fuel wall)
COMMENT                    $1260                              This function checks to see if the player's ship has
COMMENT                    $1260                              passed through a fuel wall opening, collided with a
COMMENT                    $1260                              fuel wall, or picked up a fuel cannister.  It will
COMMENT                    $1260                              run through each of the fuel object frames, until it
COMMENT                    $1260                              finds one which is within range; to be within range,
COMMENT                    $1260                              the difference between the player's scale factor and
COMMENT                    $1260                              the fuel object's scale factor must be <= 1.  Once an
COMMENT                    $1260                              in-range frame is located (there may not be one), it
COMMENT                    $1260                              will check to see if the (y,x) position for the player's
COMMENT                    $1260                              ship is within the appropriate range to consider success;
COMMENT                    $1260                              success when dealing with a fuel cannister means the
COMMENT                    $1260                              player picked it up, while success for a fuel wall means
COMMENT                    $1260                              the player passed through the opening.
COMMENT                    $1260                              * Get ptr to 1st fuel object frame
COMMENT                    $1260                              CheckForContactWithFuelObjects:
LABEL                    $1263                              P1263
COMMENT                    $1263                              * Skip, if this frame is marked
COMMENT                    $1265                              * as the end of the frame stack.
COMMENT                    $1267                              * No contact
LABEL                    $1269                              P1269
COMMENT                    $1269                              * If the fuel object and player's
COMMENT                    $126B                              * scale factors are within 1, then
COMMENT                    $126D                              * check for pass-thru (fuel wall)
COMMENT                    $126F                              * or collection (fuel cannister).
LABEL                    $1270                              P1270
COMMENT                    $1274                              * Check the next frame
LABEL                    $1279                              P1279
COMMENT                    $1279                              * Get the difference between the
COMMENT                    $127C                              * the player's y position and the
COMMENT                    $127D                              * fuel object's y position.  Save
COMMENT                    $1280                              * the 16-bit value in C891-C892
LABEL                    $128E                              P128E
COMMENT                    $1291                              * Get the difference between the
COMMENT                    $1294                              * the player's x position and the
COMMENT                    $1295                              * fuel object's x position.  Save
COMMENT                    $1298                              * the 16-bit value in C893-C894
LABEL                    $12A6                              P12A6
COMMENT                    $12A9                              * Fuel cannister or fuel wall?
COMMENT                    $12B1                              * Fuel cannister.  Is
COMMENT                    $12B4                              * |y delta| <= 15 ?
COMMENT                    $12BA                              * Nope; missed the cannister
LABEL                    $12BC                              P12BC
COMMENT                    $12BC                              * Is |x delta| <= 15 ?
COMMENT                    $12C5                              * Nope; missed the cannister
LABEL                    $12C7                              P12C7
COMMENT                    $12C7                              * Picked up the fuel cannister;
COMMENT                    $12C9                              * tag frame as no longer visible.
LABEL                    $12CE                              P12CE
COMMENT                    $12CE                              * Large or small wall opening?
COMMENT                    $12D6                              * Large opening
COMMENT                    $12D9                              * Is |y delta| <= 12 ?
COMMENT                    $12DF                              * Nope; hit the wall
LABEL                    $12E2                              P12E2
COMMENT                    $12E2                              * Is |x delta| <= 12 ?
COMMENT                    $12EB                              * Nope; hit the wall
LABEL                    $12EE                              P12EE
COMMENT                    $12EE                              * Successfully passed thru opening
LABEL                    $12F1                              P12F1
COMMENT                    $12F1                              * Small opening
COMMENT                    $12F4                              * Is |y delta| <= 8 ?
COMMENT                    $12FA                              * Nope; hit the wall
LABEL                    $12FD                              P12FD
COMMENT                    $12FD                              * Is |x delta| <= 4 ?
COMMENT                    $1306                              * Nope; hit the wall
LABEL                    $1309                              P1309
COMMENT                    $1309                              * Successfully passed thru opening
LABEL                    $130C                              InitFuelWallOrCannisterFrame
COMMENT                    $130C                              Entry:
COMMENT                    $130C                              x = frame ptr
COMMENT                    $130C                              This function fills in the incoming frame with information
COMMENT                    $130C                              for either a fuel wall or a fuel cannister; if C8B5 is
COMMENT                    $130C                              $00, then a fuel wall is initialized, otherwise, the
COMMENT                    $130C                              fuel cannister is initialized.  The system loop counter
COMMENT                    $130C                              (C87D) is used to generate a random index, which is
COMMENT                    $130C                              used to index into an array of positions (used to control
COMMENT                    $130C                              the placement of the wall opening, or the fuel cannister).
COMMENT                    $130C                              C8B4 keeps track of how many fuel objects (walls or
COMMENT                    $130C                              cannisters) have been displayed; after a certain number
COMMENT                    $130C                              of fuel objects have been displayed, the opening in the
COMMENT                    $130C                              fuel walls will get smaller.  C8B6 contains an index,
COMMENT                    $130C                              in the range 0-2, which is used to control the color
COMMENT                    $130C                              of the next fuel object.
COMMENT                    $130C                              * Use the system loop counter
COMMENT                    $130C                              InitFuelWallOrCannisterFrame()
COMMENT                    $130F                              * to generate a random index
COMMENT                    $1311                              * into the
COMMENT                    $1314                              * embedded object position array.
COMMENT                    $1316                              * Save the embedded objs position
COMMENT                    $1319                              * Fuel wall or fuel cannister?
COMMENT                    $1321                              * Save vector list 1
COMMENT                    $1323                              * Save vector list 2
COMMENT                    $1328                              * Set drawing function
LABEL                    $132D                              P132D
COMMENT                    $1330                              * Set drawing function
COMMENT                    $1336                              * See if a large or small fuel
COMMENT                    $1339                              * wall opening is required.
LABEL                    $1340                              P1340
COMMENT                    $1340                              * Set vector list 1
COMMENT                    $1342                              * Set vector list 2
LABEL                    $1344                              P1344
COMMENT                    $1344                              * Set up for next pass
COMMENT                    $1347                              * Use C8B6 to generate an index
COMMENT                    $134A                              * which will be used to obtain
COMMENT                    $134C                              * the frame number (color) for
COMMENT                    $134E                              * this frame.
LABEL                    $134F                              P134F
COMMENT                    $1355                              * Update index for next pass
COMMENT                    $1358                              * Set the frame # (color)
COMMENT                    $135A                              * Inc fuel object counter
COMMENT                    $135E                              * blue
COMMENT                    $1361                              positions of the embedded objects; i.e. fuel cannisters
COMMENT                    $1361                              and fuel wall openings.
COMMENT                    $1361                              This array of (y,x) pairs is used to control the
LABEL                    $1381                              UpdateAllFuelFrames
COMMENT                    $1381                              This function is responsible for updating the scale
COMMENT                    $1381                              factor in each of the fuel object frames.  When the
COMMENT                    $1381                              frontmost fuel object reaches the front of the screen
COMMENT                    $1381                              (when its scale factor >= $6F), then that object will
COMMENT                    $1381                              be removed, and all the other fuel objects will be
COMMENT                    $1381                              shuffled up in the frame stack.  Then, if there are
COMMENT                    $1381                              still more fuel objects waiting, the last of the fuel
COMMENT                    $1381                              frames will be initialized to contain the new object.
COMMENT                    $1381                              If all of the fuel objects have moved off the front of
COMMENT                    $1381                              the screen, then the player has completed passage thru the
COMMENT                    $1381                              fuel passage, and the flag in C8B2 will be set.
COMMENT                    $1381                              If the frontmost fuel object has not reached the front
COMMENT                    $1381                              of the screen, then we only need to update the scale
COMMENT                    $1381                              factors and intensities for the fuel object frames.
COMMENT                    $1381                              * Has the front-most fuel object
COMMENT                    $1381                              UpdateAllFuelFrames()
COMMENT                    $1384                              * reached the front of the screen?
COMMENT                    $138A                              * Yes; so shuffle up other frames
COMMENT                    $138D                              * Frame 2 scale => frame 1
COMMENT                    $1393                              * Frame 2 frame # => frame 1
COMMENT                    $1399                              * Frame 3 frame # => frame 2
COMMENT                    $139F                              * Frame 4 frame # => frame 3
COMMENT                    $13A5                              * Frame 2 vector list => frame 1
COMMENT                    $13A8                              * Frame 2 vector list => frame 1
COMMENT                    $13AE                              * Frame 3 vector list => frame 2
COMMENT                    $13B1                              * Frame 3 vector list => frame 2
COMMENT                    $13B7                              * Frame 4 vector list => frame 3
COMMENT                    $13BA                              * Frame 4 vector list => frame 3
COMMENT                    $13C0                              * Frame 2 drawing func => frame 1
COMMENT                    $13C6                              * Frame 3 drawing func => frame 2
COMMENT                    $13CC                              * Frame 4 drawing func => frame 3
COMMENT                    $13D2                              * Frame 2 emb-obj pos => frame 1
COMMENT                    $13D8                              * Frame 3 emb-obj pos => frame 2
COMMENT                    $13DE                              * Frame 4 emb-obj pos => frame 3
COMMENT                    $13E1                              * Either start another fuel object
COMMENT                    $13E4                              * or disable the last frame.
COMMENT                    $13E9                              * We don't need to start another
COMMENT                    $13EB                              * fuel obj; so disable last frame
LABEL                    $13F0                              P13F0
COMMENT                    $13F0                              * Start another fuel object
LABEL                    $13F6                              P13F6
COMMENT                    $13F6                              * Are there any active frames left?
COMMENT                    $13FB                              * No; player is done
LABEL                    $13FF                              P13FF
COMMENT                    $13FF                              * Update the secondary scale
LABEL                    $1400                              _1400
COMMENT                    $1402                              * factor for frame 1.
COMMENT                    $140B                              * Update the secondary scale
COMMENT                    $140D                              * factor for frame 2.
COMMENT                    $1411                              * Update the secondary scale
COMMENT                    $1413                              * factor for frame 3.
COMMENT                    $1417                              * Update the secondary scale
COMMENT                    $1419                              * factor for frame 4.
COMMENT                    $141F                              * Set loop counter
COMMENT                    $1422                              * Get fuel obj 1 frame ptr
LABEL                    $1425                              P1425
COMMENT                    $1425                              * Get embedded obj's intensity
COMMENT                    $142D                              * Calculate intensity =
COMMENT                    $142F                              * embedded obj scale factor+$40
COMMENT                    $1431                              * If rollover occurs, then use
COMMENT                    $1433                              * max intensity ($7F).
LABEL                    $1435                              P1435
COMMENT                    $1435                              * Set intensity
COMMENT                    $1437                              * Point to next frame
COMMENT                    $143A                              * Decrement loop counter
COMMENT                    $143D                              * Done processing the frames?
LABEL                    $1440                              InitAllFuelFrames
COMMENT                    $1440                              This function initializes the fuel passage variables,
COMMENT                    $1440                              along with the 5 frames used to display the fuel objects
COMMENT                    $1440                              (4 of the frames display fuel objects, while the 5th
COMMENT                    $1440                              frame is used to tag the end of the frame stack).  The
COMMENT                    $1440                              frame ptrs used are: C8F9, C91B, C93D, C95F and C981.
COMMENT                    $1440                              * Force the secondary scale for
COMMENT                    $1440                              InitAllFuelFrames()
COMMENT                    $1443                              * fuel object 1 to $08000
COMMENT                    $1446                              * Get ptr to fuel obj 1 frame
COMMENT                    $1449                              * Clear the fuel object counter
COMMENT                    $144C                              * Force fuel wall to draw first
COMMENT                    $144F                              * Init fuel object color index
COMMENT                    $1452                              * Init the 1st 4 fuel objects
COMMENT                    $1454                              * Set loop counter
LABEL                    $1457                              P1457
COMMENT                    $1459                              * Flag player in fuel passage
COMMENT                    $1465                              * Set frame (y,x) to (0,0)
COMMENT                    $146A                              * Set scale factor
COMMENT                    $146C                              * Get ptr to next frame
COMMENT                    $146F                              * Decrement loop counter
COMMENT                    $1472                              * Done processing the frames?
COMMENT                    $1476                              * Tag the end of the frame stack
COMMENT                    $1479                              Vector list, 4 bytes per endpoint
COMMENT                    $14DF                              EP_DrawAllBlueFramesAndWalls_RightEye;
COMMENT                    $14E1                              EP_DrawAllGreenFramesAndWalls_RightEye;
COMMENT                    $14E5                              EP_DrawAllBlueFramesAndWalls_LeftEye;
COMMENT                    $14E7                              EP_DrawAllGreenFramesAndWalls_LeftEye;
LABEL                    $14EB                              P14EB
COMMENT                    $14FE                              * Load the sound bitmask
LABEL                    $1504                              P1504
LABEL                    $1518                              P1518
LABEL                    $1526                              P1526
COMMENT                    $1526                              * (INDIRECT JUMP)
LABEL                    $152C                              P152C
LABEL                    $1534                              P1534
COMMENT                    $153C                              * Clear the sound bitmask
COMMENT                    $153F                              of 7 bytes, and having the following meaning:
COMMENT                    $153F                              -------------------
COMMENT                    $153F                              0 |     Function    |
COMMENT                    $153F                              ---             ---
COMMENT                    $153F                              1 |     Pointer     |
COMMENT                    $153F                              2 |                 |
COMMENT                    $153F                              3 |                 |
COMMENT                    $153F                              4 |                 |
COMMENT                    $153F                              5 |                 |
COMMENT                    $153F                              6 |                 |
COMMENT                    $153F                              7 |                 |
COMMENT                    $153F                              The following is an array of 8 entries, each composed
COMMENT                    $1589                              * Load the sound bitmask
LABEL                    $15A0                              P15A0
LABEL                    $15BD                              P15BD
LABEL                    $15CB                              P15CB
COMMENT                    $15D8                              * Load the sound bitmask
LABEL                    $1605                              P1605
LABEL                    $160D                              P160D
LABEL                    $163C                              P163C
LABEL                    $1675                              P1675
LABEL                    $1680                              P1680
LABEL                    $16A3                              P16A3
LABEL                    $16A4                              P16A4
COMMENT                    $16AC                              * Get the explosion bitmask
LABEL                    $16B4                              P16B4
COMMENT                    $16B6                              * Use sound characteristic index
COMMENT                    $16CF                              Array of 2 entries, each 4 bytes long.
LABEL                    $17C3                              bay1
LABEL                    $17E8                              bay2
LABEL                    $1808                              _1808
LABEL                    $1810                              bay3
LABEL                    $182F                              bay4
LABEL                    $1830                              _1830
LABEL                    $184D                              doubleSquare_tiny
LABEL                    $186C                              doubleSquare_small
LABEL                    $1872                              _1872
LABEL                    $188B                              doubleSquare_medium
LABEL                    $18AA                              doubleSquare_large
LABEL                    $18C9                              single_square
LABEL                    $18D9                              shipA
LABEL                    $18F0                              _18F0
LABEL                    $190D                              shipB
LABEL                    $1941                              shipBroken1
LABEL                    $1981                              shipBroken2
LABEL                    $19C1                              cross_small_a
LABEL                    $1ADC                              small_circle_a
COMMENT                    $1ADC                              mode, y,x
LABEL                    $1AF5                              large_circle_b
LABEL                    $1B0E                              large_circle_a
LABEL                    $1B27                              small_circle_b
LABEL                    $1B48                              small_cross
COMMENT                    $1B48                              mode, y,x
LABEL                    $1B55                              large_x
LABEL                    $1B62                              large_cross
LABEL                    $1B6F                              small_x
LABEL                    $1B7C                              UpdateWarlordShipFrames
COMMENT                    $1B7C                              This function is responsible for updating the information
COMMENT                    $1B7C                              within the warlord ship frames (C981, C9A3, C9C5, C9E7,
COMMENT                    $1B7C                              and CA09).  It will update the position of the warlord
COMMENT                    $1B7C                              ship, recalculating the x and y delta values when the
COMMENT                    $1B7C                              ship has moved to the edge of its bounding box.  It will
COMMENT                    $1B7C                              also update the intensity and scale, to make the ship
COMMENT                    $1B7C                              appear to get closer.  Afterwards, it will check to see
COMMENT                    $1B7C                              if any of the player's bullets have hit the warlord ship's
COMMENT                    $1B7C                              target.  If one has, then an explosion is generated, and
COMMENT                    $1B7C                              then play continues.
COMMENT                    $1B7C                              UpdateWarlordShipFrames()
COMMENT                    $1B7E                              * Get addr of frame's scale
COMMENT                    $1B84                              * Get frame addr (Warlord target)
COMMENT                    $1B87                              * If the scale factor is >= $50
COMMENT                    $1B89                              * then force it back to 1.
LABEL                    $1B91                              P1B91
COMMENT                    $1B91                              * Load current position
COMMENT                    $1B96                              * If the x position is now out
COMMENT                    $1B98                              * bounds ( |x|>$3F ), then we
COMMENT                    $1B9A                              * need to generate a new x
COMMENT                    $1B9D                              * movement delta.  Force the
COMMENT                    $1B9F                              * movement value to move the
COMMENT                    $1BA1                              * ship in the opposite direction.
LABEL                    $1BA6                              P1BA6
COMMENT                    $1BA6                              * Set new x movement delta
LABEL                    $1BA9                              P1BA9
COMMENT                    $1BA9                              * If the y position is now out
COMMENT                    $1BAB                              * bounds ( |y|>$3F ), then we
COMMENT                    $1BAD                              * need to generate a new y
COMMENT                    $1BB0                              * movement delta.  Force the
COMMENT                    $1BB2                              * movement value to move the
COMMENT                    $1BB4                              * ship in the opposite direction.
LABEL                    $1BB9                              P1BB9
COMMENT                    $1BB9                              * Set new y movement delta
LABEL                    $1BBC                              P1BBC
COMMENT                    $1BBC                              * Update the position only on
COMMENT                    $1BBF                              * every other pass.
COMMENT                    $1BC3                              * Load current position
COMMENT                    $1BC5                              * y += y movement delta
COMMENT                    $1BC8                              * x += x movement delta
COMMENT                    $1BCB                              * Save new position
LABEL                    $1BCD                              P1BCD
COMMENT                    $1BCD                              * Shuffle down the scale factors
COMMENT                    $1BD3                              * Calculate intensity=scale+$40
COMMENT                    $1BD5                              * If rollover, use $7F (max)
LABEL                    $1BDB                              P1BDB
COMMENT                    $1BDB                              * Set new intensity
COMMENT                    $1BDD                              * Ptr to other warlord frames
LABEL                    $1BE0                              P1BE0
COMMENT                    $1BE0                              * Sync all warlord ship frames
COMMENT                    $1BE2                              * with the warlord's main frame
COMMENT                    $1BE6                              * Get frame ptr (Warlord target)
COMMENT                    $1BE9                              * Check for bullet hit only if
COMMENT                    $1BEC                              * explosion not already happening.
COMMENT                    $1BF4                              * No bullets hit the target
LABEL                    $1BF5                              P1BF5
COMMENT                    $1BF5                              * A bullet hit the target
COMMENT                    $1BFA                              * Force sound to occur
COMMENT                    $1BFF                              * Set sound characteristics index
COMMENT                    $1C02                              * Tag that explosion is happening
COMMENT                    $1C07                              * Set explosion duration timer
COMMENT                    $1C0D                              * Set vector list 1
COMMENT                    $1C0F                              * Set vector list 2
COMMENT                    $1C14                              * Set drawing function
COMMENT                    $1C17                              * Increment hit count on warlord
COMMENT                    $1C1A                              * Award 100 pts to the player
LABEL                    $1C21                              P1C21
COMMENT                    $1C21                              * Keep displaying explosion, until
COMMENT                    $1C24                              * duration timer goes to 0.
LABEL                    $1C27                              P1C27
COMMENT                    $1C27                              * Redisplay warlord ship target
COMMENT                    $1C2D                              * Set drawing function
COMMENT                    $1C33                              * Set vector list 1
COMMENT                    $1C35                              * Set vector list 2
LABEL                    $1C38                              P1C38
COMMENT                    $1C38                              * The following block syncs the
COMMENT                    $1C3A                              * incoming warlord frame info (u)
COMMENT                    $1C3C                              * with that of the warlord ships
COMMENT                    $1C3E                              * target frame (x=C981).  This
COMMENT                    $1C40                              * includes intensities, scale
COMMENT                    $1C42                              * factors and positions.
COMMENT                    $1C4C                              * Point to next warlord frame
COMMENT                    $1C4F                              * Process the next frame
EQU                    $1C52                              NE_DrawAnimatedDots
LABEL                    $1C52                              NE_DrawAnimatedDots
COMMENT                    $1C52                              Entry:
COMMENT                    $1C52                              b = scale factor
COMMENT                    $1C52                              x = vector table ptr containing 4 vector list pointers
COMMENT                    $1C52                              This function cycles through a table of vector pointers
COMMENT                    $1C52                              (actually, just endpoints, since only dots are drawn),
COMMENT                    $1C52                              drawing the indicated collection of dots.  The result is
COMMENT                    $1C52                              what appears to be a bunch of animated dots being drawn.
COMMENT                    $1C52                              * Use the system loop counter to
COMMENT                    $1C52                              NE_DrawAnimatedDots()
COMMENT                    $1C55                              * determine which of the 4 dot
COMMENT                    $1C57                              * lists to draw.
LABEL                    $1C5E                              InitWarlordShipFrames
COMMENT                    $1C5E                              This function fills in the frames used to display the
COMMENT                    $1C5E                              warlord ship.  The frames are used in the following
COMMENT                    $1C5E                              fashion:
COMMENT                    $1C5E                              C981 = warlord ship target area
COMMENT                    $1C5E                              C9A3 = warlord ship body
COMMENT                    $1C5E                              C9C5 = warlord ship body
COMMENT                    $1C5E                              C9E7 = warlord ship top/bottom fins
COMMENT                    $1C5E                              CA09 = warlord ship side fins
COMMENT                    $1C5E                              CA2B = end of frame stack
COMMENT                    $1C5E                              * Get ptr to warlord target frame
COMMENT                    $1C5E                              InitWarlordShipFrames()
LABEL                    $1C64                              P1C64
COMMENT                    $1C64                              * Process each entry, until $00
COMMENT                    $1C66                              * encountered.
COMMENT                    $1C68                              * Mark last frame as the end of
COMMENT                    $1C6A                              * the frame stack.
LABEL                    $1C6D                              P1C6D
COMMENT                    $1C6D                              * Set drawing function
LABEL                    $1C70                              _1C70
COMMENT                    $1C72                              * Set vector list 2
COMMENT                    $1C76                              * Set vector list 1
COMMENT                    $1C7A                              * Set frame number (i.e. color)
COMMENT                    $1C7C                              * Clear explosion flag
COMMENT                    $1C7F                              * Flag player in enemy passage
COMMENT                    $1C82                              * Use the system loop counter to
COMMENT                    $1C85                              * generate a random (y,x) position
COMMENT                    $1C87                              * where each coordinate is in the
COMMENT                    $1C89                              * range of +-$3F.
COMMENT                    $1C8C                              * Determine sign of y value
LABEL                    $1C8F                              P1C8F
COMMENT                    $1C92                              * Determine sign of x value
LABEL                    $1C95                              P1C95
COMMENT                    $1C95                              * Set initial (y,x) position
COMMENT                    $1C97                              * Use the system loop counter to
COMMENT                    $1C9A                              * generate random x and y movement
COMMENT                    $1C9C                              * delta values, in the range of
COMMENT                    $1C9E                              * 2 - 7
COMMENT                    $1CA2                              * Set x movement delta
COMMENT                    $1CA5                              * Set y movement delta
COMMENT                    $1CAA                              * Set scale factor
COMMENT                    $1CAC                              * Set embedded obj's scale factor
COMMENT                    $1CB0                              * Calculate intensity = scale+$40
COMMENT                    $1CB2                              * If rollover occurs, then simply
COMMENT                    $1CB4                              * use $7F (max).
LABEL                    $1CB8                              P1CB8
COMMENT                    $1CB8                              * Set intensity
COMMENT                    $1CBA                              * Get ptr to next frame
COMMENT                    $1CBD                              * Continue processing
COMMENT                    $1CC0                              entry (with the exception of the last one, which
COMMENT                    $1CC0                              merely marks the end of the array) is composed of
COMMENT                    $1CC0                              the following 7 bytes of information:
COMMENT                    $1CC0                              ------------------
COMMENT                    $1CC0                              0 |    Drawing     |
COMMENT                    $1CC0                              ---            ---
COMMENT                    $1CC0                              2 |    Function    |
COMMENT                    $1CC0                              3 |    Vector      |
COMMENT                    $1CC0                              4 |  List/Table 1  |
COMMENT                    $1CC0                              5 |    Vector      |
COMMENT                    $1CC0                              6 |  List/Table 2  |
COMMENT                    $1CC0                              7 | Frame # (color)|
COMMENT                    $1CC0                              The following is an array having 6 entries.  Each
LABEL                    $1CE5                              ProcessWarlordShipBullet
COMMENT                    $1CE5                              This function takes care of processing the warlord ship's
COMMENT                    $1CE5                              single bullet frame.  If the bullet is visible, then
COMMENT                    $1CE5                              it will update its scale and intensity values, so that
COMMENT                    $1CE5                              the bullet appears to be coming at the player.  Once the
COMMENT                    $1CE5                              bullet reaches the front of the screen, is will stop
COMMENT                    $1CE5                              being displayed; on a later pass, it will attempt to
COMMENT                    $1CE5                              fire another bullet.
COMMENT                    $1CE5                              * See if the warship's bullet frame
COMMENT                    $1CE5                              ProcessWarlordShipBullet()
COMMENT                    $1CE7                              * is visible or invisible.
COMMENT                    $1CEC                              * Get warship target's scale factor
LABEL                    $1CF4                              P1CF4
COMMENT                    $1CF4                              * Use the system loop counter to
COMMENT                    $1CF7                              * control how often to fire a new
COMMENT                    $1CF9                              * warlord ship bullet.
LABEL                    $1CFC                              P1CFC
COMMENT                    $1CFC                              * Fire a new warlord ship bullet
COMMENT                    $1D01                              * Retag frame as being visible.
COMMENT                    $1D04                              * Set warlord's bullet position the
COMMENT                    $1D07                              * same as the player's ship.
COMMENT                    $1D0A                              * Start with same scale factor as
COMMENT                    $1D0D                              * the warlord's target area.
LABEL                    $1D10                              P1D10
COMMENT                    $1D10                              * Point to bullet's scale factor.
COMMENT                    $1D18                              * Point to warlord's bullet frame.
COMMENT                    $1D1B                              * Get the scale factor.
COMMENT                    $1D1D                              * Once the scale factor is > $70,
COMMENT                    $1D1F                              * then the bullet has reached the
COMMENT                    $1D21                              * front of the screen, so tag it
COMMENT                    $1D23                              * as no longer visible.
LABEL                    $1D28                              P1D28
COMMENT                    $1D28                              * Adjust bullets scale & intensity
COMMENT                    $1D2A                              * values, so it appears to grow &
COMMENT                    $1D2B                              * get brighter as it approaches
COMMENT                    $1D2C                              * the front of the screen
COMMENT                    $1D37                              * Calculate intensity = scale+$40
COMMENT                    $1D39                              * If rollover occurs, then use
COMMENT                    $1D3B                              * $7F (max).
LABEL                    $1D3F                              P1D3F
COMMENT                    $1D3F                              * Set intensity
LABEL                    $1D42                              InitWarlordShipBulletFrame
COMMENT                    $1D42                              This function initializes the frame (C95F) used to
COMMENT                    $1D42                              display the warlord ship's single bullet.
COMMENT                    $1D42                              * Ptr to warlord bullet frame
COMMENT                    $1D42                              InitWarlordShipBulletFrame()
COMMENT                    $1D47                              * Frame #=$12 (green,invisible)
COMMENT                    $1D4C                              * Set vector list 1
COMMENT                    $1D4E                              * Set vector list 2
COMMENT                    $1D53                              * Set drawing function
COMMENT                    $1D56                              * Clear explosion flag
COMMENT                    $1EFA                              Open space = 1EFA - 1FFF
LABEL                    $2000                              _2000
LABEL                    $2018                              _2018
LABEL                    $207F                              _207F
LABEL                    $20F0                              _20F0
LABEL                    $2800                              _2800
LABEL                    $287F                              _287F
LABEL                    $28D8                              _28D8
LABEL                    $3050                              _3050
LABEL                    $3870                              _3870
LABEL                    $3880                              _3880
LABEL                    $38E0                              _38E0
LABEL                    $396D                              _396D
LABEL                    $3C00                              _3C00
LABEL                    $3C08                              _3C08
LABEL                    $4010                              _4010
LABEL                    $4015                              _4015
LABEL                    $4018                              _4018
LABEL                    $4040                              _4040
LABEL                    $40C0                              _40C0
LABEL                    $40F0                              _40F0
LABEL                    $5000                              _5000
LABEL                    $5030                              _5030
LABEL                    $5050                              _5050
LABEL                    $50D0                              _50D0
LABEL                    $6400                              _6400
LABEL                    $7020                              _7020
LABEL                    $7777                              _7777
LABEL                    $77C8                              _77C8
LABEL                    $7F20                              _7F20
LABEL                    $8000                              _8000
LABEL                    $8100                              _8100
LABEL                    $9020                              _9020
LABEL                    $A000                              _A000
LABEL                    $A07F                              _A07F
LABEL                    $A500                              _A500
LABEL                    $B0D0                              _B0D0
LABEL                    $B600                              _B600
LABEL                    $BF00                              _BF00
LABEL                    $BFC0                              _BFC0
LABEL                    $C040                              _C040
LABEL                    $C0C0                              _C0C0
LABEL                    $C0D0                              _C0D0
LABEL                    $C0F0                              _C0F0
LABEL                    $C400                              _C400
LABEL                    $C800                              Vec_Snd_Shadow
LABEL                    $C802                              _C802
LABEL                    $C80F                              Vec_Btn_State
LABEL                    $C810                              Vec_Prev_Btns
LABEL                    $C811                              Vec_Buttons
LABEL                    $C812                              Vec_Button_1_1
LABEL                    $C813                              Vec_Button_1_2
LABEL                    $C814                              Vec_Button_1_3
LABEL                    $C815                              Vec_Button_1_4
LABEL                    $C816                              Vec_Button_2_1
LABEL                    $C817                              Vec_Button_2_2
LABEL                    $C818                              Vec_Button_2_3
LABEL                    $C819                              Vec_Button_2_4
LABEL                    $C81A                              Vec_Joy_Resltn
LABEL                    $C81B                              Vec_Joy_1_X
LABEL                    $C81C                              Vec_Joy_1_Y
LABEL                    $C81D                              Vec_Joy_2_X
LABEL                    $C81E                              Vec_Joy_2_Y
LABEL                    $C81F                              Vec_Joy_Mux
LABEL                    $C81F                              Vec_Joy_Mux_1_X
LABEL                    $C820                              Vec_Joy_Mux_1_Y
LABEL                    $C821                              Vec_Joy_Mux_2_X
LABEL                    $C822                              Vec_Joy_Mux_2_Y
LABEL                    $C823                              Vec_Misc_Count
LABEL                    $C824                              Vec_0Ref_Enable
LABEL                    $C825                              Vec_Loop_Count
LABEL                    $C826                              _C826
LABEL                    $C827                              Vec_Brightness
LABEL                    $C828                              Vec_Dot_Dwell
LABEL                    $C829                              Vec_Pattern
LABEL                    $C82A                              Vec_Text_Height
LABEL                    $C82A                              Vec_Text_HW
LABEL                    $C82B                              Vec_Text_Width
LABEL                    $C82C                              Vec_Str_Ptr
LABEL                    $C82E                              Vec_Counters
LABEL                    $C82E                              Vec_Counter_1
LABEL                    $C82F                              Vec_Counter_2
LABEL                    $C830                              Vec_Counter_3
LABEL                    $C831                              Vec_Counter_4
LABEL                    $C832                              Vec_Counter_5
LABEL                    $C833                              Vec_Counter_6
LABEL                    $C834                              Vec_RiseRun_Tmp
LABEL                    $C836                              Vec_Angle
LABEL                    $C837                              Vec_Run_Index
LABEL                    $C839                              Vec_Rise_Index
LABEL                    $C83B                              Vec_RiseRun_Len
LABEL                    $C83D                              Vec_Rfrsh
LABEL                    $C83D                              Vec_Rfrsh_lo
LABEL                    $C83E                              Vec_Rfrsh_hi
LABEL                    $C83F                              Vec_Music_Work
LABEL                    $C842                              Vec_Music_Wk_A
LABEL                    $C845                              Vec_Music_Wk_7
LABEL                    $C846                              Vec_Music_Wk_6
LABEL                    $C847                              Vec_Music_Wk_5
LABEL                    $C84B                              Vec_Music_Wk_1
LABEL                    $C84D                              Vec_Freq_Table
LABEL                    $C84F                              Vec_ADSR_Table
LABEL                    $C84F                              Vec_Max_Players
LABEL                    $C850                              Vec_Max_Games
LABEL                    $C851                              Vec_Twang_Table
LABEL                    $C853                              Vec_Expl_ChanA
LABEL                    $C853                              Vec_Music_Ptr
LABEL                    $C854                              Vec_Expl_Chans
LABEL                    $C855                              Vec_Music_Chan
LABEL                    $C856                              Vec_Music_Flag
LABEL                    $C857                              Vec_Duration
LABEL                    $C858                              Vec_Expl_1
LABEL                    $C858                              Vec_Music_Twang
LABEL                    $C859                              Vec_Expl_2
LABEL                    $C85A                              Vec_Expl_3
LABEL                    $C85B                              Vec_Expl_4
LABEL                    $C85C                              Vec_Expl_Chan
LABEL                    $C85D                              Vec_Expl_ChanB
LABEL                    $C85E                              Vec_ADSR_Timers
LABEL                    $C861                              Vec_Music_Freq
LABEL                    $C867                              Vec_Expl_Flag
LABEL                    $C870                              _C870
LABEL                    $C877                              Vec_Expl_Timer
LABEL                    $C879                              Vec_Num_Players
LABEL                    $C87A                              Vec_Num_Game
LABEL                    $C87B                              Vec_Seed_Ptr
LABEL                    $C87D                              Vec_Random_Seed
LABEL                    $C87E                              _C87E
LABEL                    $C880                              toleranceValue
LABEL                    $C881                              bonusFlag
LABEL                    $C882                              someEnemyShipInfo
LABEL                    $C883                              fuelInLevel
LABEL                    $C884                              _C884
LABEL                    $C885                              enemyShipCount
LABEL                    $C886                              ShipBCDWord
LABEL                    $C888                              flagEnemyDestroyed
LABEL                    $C889                              enemyVisible
LABEL                    $C88A                              enemyShipVectorList
LABEL                    $C88C                              warlardNumberHitsNeeded
LABEL                    $C88D                              xMovementEnemyWord
LABEL                    $C88F                              yMovementEnemyWord
LABEL                    $C890                              _C890
LABEL                    $C891                              _C891
LABEL                    $C892                              _C892
LABEL                    $C893                              _C893
LABEL                    $C897                              loopCounter1
LABEL                    $C89B                              soundBitMask
LABEL                    $C89F                              soundBitMaskAllowed
LABEL                    $C8A2                              soundCharacteristics
COMMENT                    $C8A2                              0 or 1
LABEL                    $C8A3                              _C8A3
LABEL                    $C8A4                              _C8A4
LABEL                    $C8A5                              flagPlayerCollideWithEnemy
LABEL                    $C8A6                              drawLeftEyRightEye
LABEL                    $C8AB                              jumpLocationWord
LABEL                    $C8AD                              _C8AD
LABEL                    $C8AF                              flagDrawPassegeWalls
LABEL                    $C8B0                              flagPlayerPickedUpFuel
LABEL                    $C8B1                              counterEnemiesDestroyed
LABEL                    $C8B2                              flagLevelFinished
LABEL                    $C8B3                              _C8B3
LABEL                    $C8B4                              countFuelCreated
LABEL                    $C8B5                              flagDrawFuel
LABEL                    $C8B6                              indexFuelColor
LABEL                    $C8B7                              explodingScaleA
LABEL                    $C8B9                              flagPlayerFinishedExplode
LABEL                    $C8BA                              flagEnemyPlayerCollide
LABEL                    $C8BB                              velocityEnemyStar
LABEL                    $C8BC                              flagStarPlayerCollide
LABEL                    $C8BD                              currentLevel
LABEL                    $C8BE                              _C8BE
LABEL                    $C8C0                              _C8C0
LABEL                    $C8C4                              _C8C4
LABEL                    $C8C8                              _C8C8
LABEL                    $C8CA                              _C8CA
LABEL                    $C8CD                              _C8CD
LABEL                    $C8CE                              _C8CE
LABEL                    $C8D1                              _C8D1
LABEL                    $C8D4                              _C8D4
LABEL                    $C8D7                              frame1
LABEL                    $C8D8                              _C8D8
LABEL                    $C8D9                              _C8D9
LABEL                    $C8DA                              _C8DA
LABEL                    $C8DB                              _C8DB
LABEL                    $C8DC                              _C8DC
LABEL                    $C8E0                              _C8E0
LABEL                    $C8E2                              _C8E2
LABEL                    $C8E7                              _C8E7
LABEL                    $C8EA                              _C8EA
LABEL                    $C8EB                              _C8EB
LABEL                    $C8EC                              _C8EC
LABEL                    $C8ED                              _C8ED
LABEL                    $C8EE                              _C8EE
LABEL                    $C8F2                              _C8F2
LABEL                    $C8F3                              _C8F3
LABEL                    $C8F4                              _C8F4
LABEL                    $C8F5                              _C8F5
LABEL                    $C8F6                              _C8F6
LABEL                    $C8F7                              _C8F7
LABEL                    $C8F8                              _C8F8
LABEL                    $C8FE                              _C8FE
LABEL                    $C900                              _C900
LABEL                    $C902                              _C902
LABEL                    $C904                              _C904
LABEL                    $C907                              _C907
LABEL                    $C909                              _C909
LABEL                    $C915                              _C915
LABEL                    $C919                              _C919
LABEL                    $C920                              _C920
LABEL                    $C922                              _C922
LABEL                    $C924                              _C924
LABEL                    $C926                              _C926
LABEL                    $C937                              _C937
LABEL                    $C93B                              _C93B
LABEL                    $C942                              _C942
LABEL                    $C944                              _C944
LABEL                    $C946                              _C946
LABEL                    $C948                              _C948
LABEL                    $C959                              _C959
LABEL                    $C95D                              _C95D
LABEL                    $C95F                              _C95F
LABEL                    $C962                              _C962
LABEL                    $C964                              _C964
LABEL                    $C966                              _C966
LABEL                    $C968                              _C968
LABEL                    $C97B                              _C97B
LABEL                    $C97F                              _C97F
LABEL                    $C984                              _C984
LABEL                    $CA75                              _CA75
LABEL                    $CA77                              countPlayerhasFuel
LABEL                    $CA7A                              countPlayerConsumedFuel
LABEL                    $CA7D                              flagPlayerOutOfFuel
LABEL                    $CA7E                              flagPlayerLowFuel
LABEL                    $CA7F                              flagImgerSyncReceived
LABEL                    $CA81                              someScaleFactor1
LABEL                    $CA82                              loopCounterDraw1
LABEL                    $CA83                              someScaleFactor2
LABEL                    $CA86                              countIRQAfterRefreshFor8Samples
LABEL                    $CA87                              countIRQAfterRefreshFor8Samples_1
LABEL                    $CA88                              countIRQAfterRefreshFor8Samples_2
LABEL                    $CA89                              countIRQAfterRefreshFor8Samples_3
LABEL                    $CA8A                              loopCounterIRQ1
LABEL                    $CA8B                              _CA8B
LABEL                    $CA8C                              irqHandlerVelocityStuffA
LABEL                    $CA8D                              irqHandlerVelocityStuffB
LABEL                    $CA8E                              irqHandlerStuff
LABEL                    $CBEA                              Vec_Default_Stk
LABEL                    $CBEB                              Vec_High_Score
LABEL                    $CBF2                              Vec_SWI2_Vector
LABEL                    $CBF2                              Vec_SWI3_Vector
LABEL                    $CBF5                              Vec_FIRQ_Vector
LABEL                    $CBF8                              Vec_IRQ_Vector
LABEL                    $CBF9                              _CBF9
LABEL                    $CBFB                              Vec_NMI_Vector
LABEL                    $CBFB                              Vec_SWI_Vector
LABEL                    $CBFE                              Vec_Cold_Flag
LABEL                    $D000                              VIA_port_b
LABEL                    $D001                              VIA_port_a
LABEL                    $D002                              VIA_DDR_b
LABEL                    $D003                              VIA_DDR_a
LABEL                    $D004                              VIA_t1_cnt_lo
LABEL                    $D005                              VIA_t1_cnt_hi
LABEL                    $D006                              VIA_t1_lch_lo
LABEL                    $D007                              VIA_t1_lch_hi
LABEL                    $D008                              VIA_t2_lo
LABEL                    $D009                              VIA_t2_hi
LABEL                    $D00A                              VIA_shift_reg
LABEL                    $D00B                              VIA_aux_cntl
LABEL                    $D00C                              VIA_cntl
LABEL                    $D00D                              VIA_int_flags
LABEL                    $D00E                              VIA_int_enable
LABEL                    $D00F                              VIA_port_a_nohs
LABEL                    $D050                              _D050
LABEL                    $D058                              _D058
LABEL                    $D090                              _D090
LABEL                    $D0A8                              _D0A8
LABEL                    $D0B0                              _D0B0
LABEL                    $D800                              _D800
LABEL                    $D8D8                              _D8D8
RANGE $0000-$002C DP $FF
RANGE $002D-$0127 DP $D0
RANGE $0128-$0149 DP $FF
RANGE $014A-$014C DP $C8
RANGE $014D-$014F DP $FF
RANGE $0150-$023C DP $D0
RANGE $023D-$0270 DP $FF
RANGE $0271-$0494 DP $D0
RANGE $0495-$0595 DP $FF
RANGE $0596-$060A DP $D0
RANGE $060B-$14EA DP $FF
RANGE $14EB-$153E DP $C8
RANGE $153F-$1FFE DP $FF
RANGE $0000-$000A CHAR_DATA 30
RANGE $000A-$000B DB_DATA 8
RANGE $000B-$000D DW_DATA 4
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0017 CHAR_DATA 30
RANGE $0017-$001C DB_DATA 30
RANGE $001C-$0022 CHAR_DATA 30
RANGE $0022-$0024 DB_DATA 30
RANGE $0024-$0495 CODE
RANGE $0495-$0499 DW_DATA 4
RANGE $0499-$04B3 CODE
RANGE $04B3-$04B7 DW_DATA 4
RANGE $04B7-$0504 CODE
RANGE $0504-$0508 DW_DATA 4
RANGE $0508-$0510 CHAR_DATA 8
RANGE $0510-$054D CODE
RANGE $054D-$0551 DW_DATA 4
RANGE $0551-$0577 CODE
RANGE $0577-$057B DW_DATA 4
RANGE $057B-$0592 CODE
RANGE $0592-$0596 DW_DATA 4
RANGE $0596-$08FD CODE
RANGE $08FD-$08FF DW_DATA 4
RANGE $08FF-$0901 DB_DATA 8
RANGE $0901-$0907 DW_DATA 4
RANGE $0907-$090A DB_DATA 8
RANGE $090A-$090C DW_DATA 4
RANGE $090C-$090E DB_DATA 8
RANGE $090E-$0914 DW_DATA 4
RANGE $0914-$0917 DB_DATA 8
RANGE $0917-$0919 DW_DATA 4
RANGE $0919-$091B DB_DATA 8
RANGE $091B-$0921 DW_DATA 4
RANGE $0921-$0924 DB_DATA 8
RANGE $0924-$0926 DW_DATA 4
RANGE $0926-$0928 DB_DATA 8
RANGE $0928-$092E DW_DATA 4
RANGE $092E-$0931 DB_DATA 8
RANGE $0931-$0933 DW_DATA 4
RANGE $0933-$0935 DB_DATA 8
RANGE $0935-$093B DW_DATA 4
RANGE $093B-$093E DB_DATA 8
RANGE $093E-$0940 DW_DATA 4
RANGE $0940-$0942 DB_DATA 8
RANGE $0942-$0948 DW_DATA 4
RANGE $0948-$094B DB_DATA 8
RANGE $094B-$094D DW_DATA 4
RANGE $094D-$094F DB_DATA 8
RANGE $094F-$0955 DW_DATA 4
RANGE $0955-$0958 DB_DATA 8
RANGE $0958-$095A DW_DATA 4
RANGE $095A-$095C DB_DATA 8
RANGE $095C-$0962 DW_DATA 4
RANGE $0962-$0965 DB_DATA 8
RANGE $0965-$0967 DW_DATA 4
RANGE $0967-$0969 DB_DATA 8
RANGE $0969-$096F DW_DATA 4
RANGE $096F-$0972 DB_DATA 8
RANGE $0972-$0974 DW_DATA 4
RANGE $0974-$0976 DB_DATA 8
RANGE $0976-$097C DW_DATA 4
RANGE $097C-$097F DB_DATA 8
RANGE $097F-$0981 DW_DATA 4
RANGE $0981-$0983 DB_DATA 8
RANGE $0983-$0989 DW_DATA 4
RANGE $0989-$098C DB_DATA 8
RANGE $098C-$098E DW_DATA 4
RANGE $098E-$0990 DB_DATA 8
RANGE $0990-$0996 DW_DATA 4
RANGE $0996-$0999 DB_DATA 8
RANGE $0999-$099B DW_DATA 4
RANGE $099B-$099D DB_DATA 8
RANGE $099D-$09A3 DW_DATA 4
RANGE $09A3-$09A6 DB_DATA 8
RANGE $09A6-$09A8 DW_DATA 4
RANGE $09A8-$09AA DB_DATA 8
RANGE $09AA-$09B0 DW_DATA 4
RANGE $09B0-$09B3 DB_DATA 8
RANGE $09B3-$09B5 DW_DATA 4
RANGE $09B5-$09B7 DB_DATA 8
RANGE $09B7-$09BD DW_DATA 4
RANGE $09BD-$09C0 DB_DATA 8
RANGE $09C0-$09C2 DW_DATA 4
RANGE $09C2-$09C4 DB_DATA 8
RANGE $09C4-$09CA DW_DATA 4
RANGE $09CA-$09CD DB_DATA 8
RANGE $09CD-$09CF DW_DATA 4
RANGE $09CF-$09D1 DB_DATA 8
RANGE $09D1-$09D7 DW_DATA 4
RANGE $09D7-$09DA DB_DATA 8
RANGE $09DA-$0AC3 CODE
RANGE $0AC3-$0AC7 DB_DATA 8
RANGE $0AC7-$0CDB CODE
RANGE $0CDB-$0CE5 DB_DATA 8
RANGE $0CE5-$0EC9 CODE
RANGE $0EC9-$0ED3 DB_DATA 8
RANGE $0ED3-$1113 CODE
RANGE $1113-$111B DB_DATA 8
RANGE $111B-$135E CODE
RANGE $135E-$1361 DB_DATA 8
RANGE $1361-$1381 DW_DATA 4
RANGE $1381-$1479 CODE
RANGE $1479-$14D1 DB_DATA 4
RANGE $14D1-$14EB DW_DATA 4
RANGE $14EB-$153F CODE
RANGE $153F-$1541 DW_DATA 4
RANGE $1541-$1546 DB_DATA 8
RANGE $1546-$1548 DW_DATA 4
RANGE $1548-$154D DB_DATA 8
RANGE $154D-$154F DW_DATA 4
RANGE $154F-$1554 DB_DATA 8
RANGE $1554-$1556 DW_DATA 4
RANGE $1556-$155B DB_DATA 8
RANGE $155B-$155D DW_DATA 4
RANGE $155D-$1562 DB_DATA 8
RANGE $1562-$1564 DW_DATA 4
RANGE $1564-$1569 DB_DATA 8
RANGE $1569-$156B DW_DATA 4
RANGE $156B-$1570 DB_DATA 8
RANGE $1570-$1572 DW_DATA 4
RANGE $1572-$1577 DB_DATA 8
RANGE $1577-$16CF CODE
RANGE $16CF-$1713 DB_DATA 4
RANGE $1713-$171B DW_DATA 4
RANGE $171B-$1767 DB_DATA 4
RANGE $1767-$176F DW_DATA 4
RANGE $176F-$17BB DB_DATA 4
RANGE $17BB-$17C3 DW_DATA 4
RANGE $17C3-$1845 DB_DATA 3
RANGE $1845-$1846 DW_DATA 1
RANGE $1846-$1847 DB_DATA 1
RANGE $1847-$1848 DW_DATA 1
RANGE $1848-$1849 DB_DATA 1
RANGE $1849-$184A DW_DATA 1
RANGE $184A-$184B DB_DATA 1
RANGE $184B-$184C DW_DATA 1
RANGE $184C-$1AD4 DB_DATA 1
RANGE $1AD4-$1ADC DW_DATA 4
RANGE $1ADC-$1B40 DB_DATA 3
RANGE $1B40-$1B48 DW_DATA 4
RANGE $1B48-$1B7C DB_DATA 3
RANGE $1B7C-$1CC0 CODE
RANGE $1CC0-$1CC6 DW_DATA 4
RANGE $1CC6-$1CC7 DB_DATA 8
RANGE $1CC7-$1CCD DW_DATA 4
RANGE $1CCD-$1CCE DB_DATA 8
RANGE $1CCE-$1CD4 DW_DATA 4
RANGE $1CD4-$1CD5 DB_DATA 8
RANGE $1CD5-$1CDB DW_DATA 4
RANGE $1CDB-$1CDC DB_DATA 8
RANGE $1CDC-$1CE2 DW_DATA 4
RANGE $1CE2-$1CE3 DB_DATA 8
RANGE $1CE3-$1CE5 DW_DATA 4
RANGE $1CE5-$1D5A CODE
RANGE $1D5A-$1D62 DW_DATA 4
RANGE $1D62-$1DDA DB_DATA 8
RANGE $1DDA-$1DE2 DW_DATA 4
RANGE $1DE2-$1E6A DB_DATA 8
RANGE $1E6A-$1E72 DW_DATA 4
RANGE $1E72-$2000 DB_DATA 8
DIRECT_LABEL $D0 $00 VIA_port_b
DIRECT_LABEL $D0 $01 VIA_port_a
DIRECT_LABEL $D0 $03 VIA_DDR_a
DIRECT_LABEL $D0 $04 VIA_t1_cnt_lo
DIRECT_LABEL $D0 $05 VIA_t1_cnt_hi
DIRECT_LABEL $D0 $08 VIA_t2_lo
DIRECT_LABEL $D0 $09 VIA_t2_hi
DIRECT_LABEL $D0 $0A VIA_shift_reg
DIRECT_LABEL $D0 $0B VIA_aux_cntl
DIRECT_LABEL $D0 $0C VIA_cntl
DIRECT_LABEL $D0 $0D VIA_int_flags
DIRECT_LABEL $D0 $0E VIA_int_enable
DIRECT_LABEL $C8 $45 Vec_Music_Wk_7
DIRECT_LABEL $C8 $46 Vec_Music_Wk_6
DIRECT_LABEL $C8 $9B soundBitMask
DIRECT_LABEL $C8 $9F soundBitMaskAllowed
DIRECT_LABEL $FF $B0 _FFB0
DIRECT_LABEL $FF $00 _FF00
DIRECT_LABEL $FF $A3 LFFA3
DIRECT_LABEL $FF $08 _FF08
DIRECT_LABEL $FF $D8 _FFD8
DIRECT_LABEL $FF $9F Draw_Grid_VL
END_BANK                    $00

