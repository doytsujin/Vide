BANK 0
EQU $00 
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_b
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $C880 user_ram
LABEL $C880 spike_pos_y
LABEL $C881 spike_pos_x
LABEL $C882 obj_1_state
LABEL $C883 obj_1_y
COMMENT_LABEL $C883 There are up to eight objects (trees or gates)
LABEL $C884 obj_1_x
COMMENT_LABEL $C884 that can be displayed on the playfield at
LABEL $C885 obj_2_state
COMMENT_LABEL $C885 any one time. obj_(n)_state contains either
LABEL $C886 obj_2_y
COMMENT_LABEL $C886 0 (if the object is disabled), -1 (if the
LABEL $C887 obj_2_x
COMMENT_LABEL $C887 object is a tree) or 1 (if the object is a
LABEL $C888 obj_3_state
COMMENT_LABEL $C888 gate)
LABEL $C889 obj_3_y
LABEL $C88A obj_3_x
COMMENT_LABEL $C88A obj_(n)_x and obj_(n)_y hold the objects
LABEL $C88B obj_4_state
COMMENT_LABEL $C88B current coordinates
LABEL $C88C obj_4_y
LABEL $C88D obj_4_x
LABEL $C88E obj_5_state
LABEL $C88F obj_5_y
LABEL $C890 obj_5_x
LABEL $C891 obj_6_state
LABEL $C892 obj_6_y
LABEL $C893 obj_6_x
LABEL $C894 obj_7_state
LABEL $C895 obj_7_y
LABEL $C896 obj_7_x
LABEL $C897 obj_8_state
LABEL $C898 obj_8_y
LABEL $C899 obj_8_x
LABEL $C89A lives
LABEL $C89B level
LABEL $C89C score
LABEL $C89D flag_dist
LABEL $C89E level_type
LABEL $C89F temp
EQU $24 main
EQU $37 title_screen
LABEL $07BB title_string
LABEL $0050 start_game
EQU $5F start_level
LABEL $05D0 game_over
LABEL $00F5 skiing
LABEL $00FB read_x
LABEL $0120 no_direction
LABEL $0111 move_left
LABEL $0102 move_right
LABEL $0653 spike_r_vec_list
LABEL $0123 draw_spike
LABEL $06B1 spike_l_vec_list
LABEL $05F5 spike_vec_list
LABEL $0139 draw_obj_1
LABEL $017B draw_obj_2
LABEL $0165 draw_tree_1
LABEL $014F draw_gate_1
LABEL $0738 flag_vec_list
LABEL $016B upd_xy_1
LABEL $070F tree_vec_list
LABEL $01BD draw_obj_3
LABEL $01A7 draw_tree_2
LABEL $0191 draw_gate_2
LABEL $01AD upd_xy_2
LABEL $01FF draw_obj_4
LABEL $01E9 draw_tree_3
LABEL $01D3 draw_gate_3
LABEL $01EF upd_xy_3
LABEL $0241 draw_obj_5
LABEL $022B draw_tree_4
LABEL $0215 draw_gate_4
LABEL $0231 upd_xy_4
LABEL $0283 draw_obj_6
LABEL $026D draw_tree_5
LABEL $0257 draw_gate_5
LABEL $0273 upd_xy_5
LABEL $02C5 draw_obj_7
LABEL $02AF draw_tree_6
LABEL $0299 draw_gate_6
LABEL $02B5 upd_xy_6
LABEL $0307 draw_obj_8
LABEL $02F1 draw_tree_7
LABEL $02DB draw_gate_7
LABEL $02F7 upd_xy_7
LABEL $0349 check_coll_1
LABEL $0333 draw_tree_8
LABEL $031D draw_gate_8
LABEL $0339 upd_xy_8
LABEL $0350 coll_tree_1
LABEL $0393 check_coll_2
LABEL $059C dead
LABEL $039A coll_tree_2
LABEL $03DD check_coll_3
LABEL $03E4 coll_tree_3
LABEL $0427 check_coll_4
LABEL $042E coll_tree_4
LABEL $0471 check_coll_5
LABEL $0478 coll_tree_5
LABEL $04BB check_coll_6
LABEL $04C2 coll_tree_6
LABEL $0505 check_coll_7
LABEL $050C coll_tree_7
LABEL $054F check_coll_8
LABEL $0556 coll_tree_8
LABEL $0599 done_coll
LABEL $05A4 dead_loop
LABEL $073F dead_vec_list
LABEL $05D5 game_over_loop
LABEL $07CE game_over_string
LABEL $07CA hit_string
LABEL $07D8 *
EQU $24 *xfer
COMMENT_LINE $0000 ***  Spike goes Skiing ***
COMMENT_LINE $0000 v0.04a
COMMENT_LINE $0000 This source code is copyright Andrew Coleman
COMMENT_LINE $0000 This whole thing is Freeware.
COMMENT_LINE $0000 You can play around with it, steal bits of it, do whatever you want with it really,
COMMENT_LINE $0000 but please DO NOT distribute any modified versions of this source without my permission.
COMMENT_LINE $0000 Big thanks go out to Chris Salamon, without his programming docs i'd never have gotten
COMMENT_LINE $0000 this far.
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 user variables
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 HEADER SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D height, width, rel y, rel x
COMMENT_LINE $0011 (from 0,0)
COMMENT $0011 some game information,
COMMENT_LINE $0023 ending with $80
COMMENT $0023 end of game header
COMMENT_LINE $0024 ***************************************************************************
COMMENT_LINE $0024 CODE SECTION
COMMENT_LINE $0024 ***************************************************************************
COMMENT_LINE $0024 here the cartridge program starts off
COMMENT $0024 Enable X axis on joystick 1
FORCE_NO_SYMBOL $0024
FORCE_SYMBOL $0026 Vec_Joy_Mux_1_X
FORCE_NO_SYMBOL $0029
COMMENT $002B Disable Y axis on joystick 1
FORCE_SYMBOL $002B Vec_Joy_Mux_1_Y
COMMENT $002E Disable Joystick 2
FORCE_SYMBOL $002E Vec_Joy_Mux_2_X
FORCE_SYMBOL $0031 Vec_Joy_Mux_2_Y
FORCE_SYMBOL $0034 Read_Btns
COMMENT $0037 Vectrex BIOS recalibration
FORCE_SYMBOL $0037 Wait_Recal
COMMENT $003A Sets the intensity of the
FORCE_SYMBOL $003A Intensity_5F
COMMENT_LINE $003D vector beam to $5f
COMMENT $003D address of string
FORCE_SYMBOL $003D title_string
COMMENT $0040 Text position relative Y
FORCE_NO_SYMBOL $0040
COMMENT $0042 Text position relative X
COMMENT $0044 Vectrex BIOS print routine
FORCE_SYMBOL $0044 Print_Str_d
FORCE_SYMBOL $0047 Read_Btns
COMMENT $004A If a button is pressed then
FORCE_NO_SYMBOL $004A
COMMENT $004C start the game
COMMENT $0050 Initialise general variables
FORCE_NO_SYMBOL $0050
FORCE_SYMBOL $0052 score
FORCE_NO_SYMBOL $0055
FORCE_SYMBOL $0057 lives
FORCE_NO_SYMBOL $005A
FORCE_SYMBOL $005C level
COMMENT $005F If spike has no lives left then
FORCE_SYMBOL $005F lives
COMMENT $0062 go to the game over routine
FORCE_NO_SYMBOL $0066
COMMENT $0068 set the co-ordiates for spike
FORCE_SYMBOL $0068 spike_pos_y
COMMENT $006B at 100,0
FORCE_NO_SYMBOL $006B
FORCE_SYMBOL $006D spike_pos_x
FORCE_NO_SYMBOL $0070
FORCE_SYMBOL $0072 flag_dist
FORCE_SYMBOL $0077 obj_1_state
FORCE_SYMBOL $007A Random_3
FORCE_SYMBOL $007D obj_1_x
FORCE_SYMBOL $0082 obj_1_y
FORCE_NO_SYMBOL $0085
FORCE_SYMBOL $0087 obj_2_state
FORCE_SYMBOL $008A Random_3
FORCE_SYMBOL $008D obj_2_x
FORCE_SYMBOL $0092 obj_2_y
FORCE_NO_SYMBOL $0095
FORCE_SYMBOL $0097 obj_3_state
FORCE_SYMBOL $009A Random_3
FORCE_SYMBOL $009D obj_3_x
FORCE_SYMBOL $00A2 obj_3_y
FORCE_SYMBOL $00A7 obj_4_state
FORCE_SYMBOL $00AA Random_3
FORCE_SYMBOL $00AD obj_4_x
FORCE_SYMBOL $00B2 obj_4_y
FORCE_SYMBOL $00B7 obj_5_state
FORCE_SYMBOL $00BA Random_3
FORCE_SYMBOL $00BD obj_5_x
FORCE_NO_SYMBOL $00C0
FORCE_SYMBOL $00C2 obj_5_y
FORCE_NO_SYMBOL $00C5
FORCE_SYMBOL $00C7 obj_6_state
FORCE_SYMBOL $00CA Random_3
FORCE_SYMBOL $00CD obj_6_x
FORCE_NO_SYMBOL $00D0
FORCE_SYMBOL $00D2 obj_6_y
FORCE_SYMBOL $00D7 obj_7_state
FORCE_SYMBOL $00DA Random_3
FORCE_SYMBOL $00DD obj_7_x
FORCE_NO_SYMBOL $00E0
FORCE_SYMBOL $00E2 obj_7_y
FORCE_NO_SYMBOL $00E5
FORCE_SYMBOL $00E7 obj_8_state
FORCE_SYMBOL $00EA Random_3
FORCE_SYMBOL $00ED obj_8_x
FORCE_NO_SYMBOL $00F0
FORCE_SYMBOL $00F2 obj_8_y
COMMENT $00F5 Vectrex BIOS recalibration
FORCE_SYMBOL $00F5 Wait_Recal
COMMENT $00F8 Read joystick positions
FORCE_SYMBOL $00F8 Joy_Digital
COMMENT $00FB Load the x position of joystick 1 to A
FORCE_SYMBOL $00FB Vec_Joy_1_X
COMMENT $00FE If it's zero then jump to no_direction
COMMENT $0100 If it's negative then the joystick is
COMMENT_LINE $0102 pushed left so jump to move_left otherwise
COMMENT_LINE $0102 carry on to the move_right routine
COMMENT $0102 check if maximum x position has been
FORCE_SYMBOL $0102 spike_pos_x
COMMENT $0105 reached, if so jump to no_direction
FORCE_NO_SYMBOL $0105
COMMENT $0109 add one to spike's x position
FORCE_SYMBOL $0109 spike_pos_x
COMMENT $010C load the address of the spike moving right
FORCE_SYMBOL $010C spike_r_vec_list
COMMENT $010F vector list to X reg and jump to draw_spike
COMMENT $0111 check if minimum x value has been
FORCE_SYMBOL $0111 spike_pos_x
COMMENT $0114 reached, if so jump to no_direction
COMMENT $0118 subtract 1 from spike's x co-ordinate
FORCE_SYMBOL $0118 spike_pos_x
COMMENT $011B load the address of the spike moving left
FORCE_SYMBOL $011B spike_l_vec_list
COMMENT $011E vector list to X reg and jump to draw_spike
COMMENT $0120 if spike isn't moving sideways then load
FORCE_SYMBOL $0120 spike_vec_list
COMMENT_LINE $0123 the address of the normal spike vector
COMMENT_LINE $0123 list to X reg
COMMENT $0123 Sets the intensity of the
FORCE_SYMBOL $0123 Intensity_7F
COMMENT_LINE $0126 vector beam to $5f
FORCE_NO_SYMBOL $0126
COMMENT $0128 set scale factor to $80
FORCE_SYMBOL $0128 VIA_t1_cnt_lo
FORCE_SYMBOL $012A spike_pos_y
FORCE_SYMBOL $012D spike_pos_x
COMMENT $0130 move vector beam to co-ordinates for spike
FORCE_SYMBOL $0130 Moveto_d
COMMENT $0133 draw spike using the vector list address
FORCE_SYMBOL $0133 Draw_VL_mode
COMMENT_LINE $0136 selected in the joystick checking section
FORCE_SYMBOL $0136 Intensity_5F
COMMENT $0139 check if object 1 is turned on, if not
FORCE_SYMBOL $0139 obj_1_state
COMMENT $013C jump to draw_obj_2
COMMENT $013E reset the vector beam to 0,0
FORCE_SYMBOL $013E Reset0Int
COMMENT $0141 move the vector beam to the coordinates
FORCE_SYMBOL $0141 obj_1_y
COMMENT $0144 for object 1
FORCE_SYMBOL $0144 obj_1_x
FORCE_SYMBOL $0147 Moveto_d
COMMENT $014A if obj_1_state is less than 0 then jump to
FORCE_SYMBOL $014A obj_1_state
COMMENT $014D draw_tree_1, otherwise carry on and draw a
COMMENT_LINE $014F gate
COMMENT $014F Load X with the address of flag_vec_list
FORCE_SYMBOL $014F flag_vec_list
COMMENT $0152 and draw the first flag
FORCE_SYMBOL $0152 Draw_VLc
COMMENT $0155 Move the vector beam to the right 20
FORCE_NO_SYMBOL $0155
FORCE_SYMBOL $0157 flag_dist
FORCE_SYMBOL $015A Moveto_d
COMMENT $015D Draw the second flag
FORCE_SYMBOL $015D flag_vec_list
FORCE_SYMBOL $0160 Draw_VLc
COMMENT $0163 Jump to update x,y for object 1
COMMENT $0165 Load X with the address for tree_vec_list
FORCE_SYMBOL $0165 tree_vec_list
COMMENT $0168 and draw a tree
FORCE_SYMBOL $0168 Draw_VLc
COMMENT $016B add 1 to the object's y position
FORCE_SYMBOL $016B obj_1_y
COMMENT $016E check to see if object's y position is
FORCE_SYMBOL $016E obj_1_y
COMMENT $0171 -128 (has looped back to the bottom of the
COMMENT $0173 screen). If it has then give it a new
COMMENT $0175 x coordinate.
FORCE_SYMBOL $0175 Random_3
FORCE_SYMBOL $0178 obj_1_x
COMMENT $017B check if object is turned on, if not
FORCE_SYMBOL $017B obj_2_state
COMMENT $017E jump to draw_obj_3
COMMENT $0180 reset the vector beam to 0,0
FORCE_SYMBOL $0180 Reset0Int
COMMENT $0183 move the vector beam to the coordinates
FORCE_SYMBOL $0183 obj_2_y
COMMENT $0186 for object 2
FORCE_SYMBOL $0186 obj_2_x
FORCE_SYMBOL $0189 Moveto_d
COMMENT $018C if obj_2_state is less than 0 then jump to
FORCE_SYMBOL $018C obj_2_state
COMMENT $018F draw_tree_2, otherwise carry on and draw a
COMMENT_LINE $0191 gate
COMMENT $0191 Load X with the address of flag_vec_list
FORCE_SYMBOL $0191 flag_vec_list
COMMENT $0194 and draw the first flag
FORCE_SYMBOL $0194 Draw_VLc
COMMENT $0197 Move the vector beam to the right 20
FORCE_NO_SYMBOL $0197
FORCE_SYMBOL $0199 flag_dist
FORCE_SYMBOL $019C Moveto_d
COMMENT $019F Draw the second flag
FORCE_SYMBOL $019F flag_vec_list
FORCE_SYMBOL $01A2 Draw_VLc
COMMENT $01A5 Jump to update x,y for object 2
COMMENT $01A7 Load X with the address for tree_vec_list
FORCE_SYMBOL $01A7 tree_vec_list
COMMENT $01AA and draw a tree
FORCE_SYMBOL $01AA Draw_VLc
COMMENT $01AD add 1 to the object's y position
FORCE_SYMBOL $01AD obj_2_y
COMMENT $01B0 check to see if object's y position is
FORCE_SYMBOL $01B0 obj_2_y
COMMENT $01B3 -128 (has looped back to the bottom of the
COMMENT $01B5 screen). If it has then give it a new
COMMENT $01B7 x coordinate.
FORCE_SYMBOL $01B7 Random_3
FORCE_SYMBOL $01BA obj_2_x
COMMENT $01BD check if object is turned on, if not
FORCE_SYMBOL $01BD obj_3_state
COMMENT $01C0 jump to draw_obj_4
COMMENT $01C2 reset the vector beam to 0,0
FORCE_SYMBOL $01C2 Reset0Int
COMMENT $01C5 move the vector beam to the coordinates
FORCE_SYMBOL $01C5 obj_3_y
COMMENT $01C8 for object 3
FORCE_SYMBOL $01C8 obj_3_x
FORCE_SYMBOL $01CB Moveto_d
COMMENT $01CE if obj_3_state is less than 0 then jump to
FORCE_SYMBOL $01CE obj_3_state
COMMENT $01D1 draw_tree_3, otherwise carry on and draw a
COMMENT_LINE $01D3 gate
COMMENT $01D3 Load X with the address of flag_vec_list
FORCE_SYMBOL $01D3 flag_vec_list
COMMENT $01D6 and draw the first flag
FORCE_SYMBOL $01D6 Draw_VLc
COMMENT $01D9 Move the vector beam to the right 20
FORCE_NO_SYMBOL $01D9
FORCE_SYMBOL $01DB flag_dist
FORCE_SYMBOL $01DE Moveto_d
COMMENT $01E1 Draw the second flag
FORCE_SYMBOL $01E1 flag_vec_list
FORCE_SYMBOL $01E4 Draw_VLc
COMMENT $01E7 Jump to update x,y for object 3
COMMENT $01E9 Load X with the address for tree_vec_list
FORCE_SYMBOL $01E9 tree_vec_list
COMMENT $01EC and draw a tree
FORCE_SYMBOL $01EC Draw_VLc
COMMENT $01EF add 1 to the object's y position
FORCE_SYMBOL $01EF obj_3_y
COMMENT $01F2 check to see if object's y position is
FORCE_SYMBOL $01F2 obj_3_y
COMMENT $01F5 -128 (has looped back to the bottom of the
COMMENT $01F7 screen). If it has then give it a new
COMMENT $01F9 x coordinate.
FORCE_SYMBOL $01F9 Random_3
FORCE_SYMBOL $01FC obj_3_x
COMMENT $01FF check if object is turned on, if not
FORCE_SYMBOL $01FF obj_4_state
COMMENT $0202 jump to draw_obj_5
COMMENT $0204 reset the vector beam to 0,0
FORCE_SYMBOL $0204 Reset0Int
COMMENT $0207 move the vector beam to the coordinates
FORCE_SYMBOL $0207 obj_4_y
COMMENT $020A for object 4
FORCE_SYMBOL $020A obj_4_x
FORCE_SYMBOL $020D Moveto_d
COMMENT $0210 if obj_4_state is less than 0 then jump to
FORCE_SYMBOL $0210 obj_4_state
COMMENT $0213 draw_tree_4, otherwise carry on and draw a
COMMENT_LINE $0215 gate
COMMENT $0215 Load X with the address of flag_vec_list
FORCE_SYMBOL $0215 flag_vec_list
COMMENT $0218 and draw the first flag
FORCE_SYMBOL $0218 Draw_VLc
COMMENT $021B Move the vector beam to the right 20
FORCE_NO_SYMBOL $021B
FORCE_SYMBOL $021D flag_dist
FORCE_SYMBOL $0220 Moveto_d
COMMENT $0223 Draw the second flag
FORCE_SYMBOL $0223 flag_vec_list
FORCE_SYMBOL $0226 Draw_VLc
COMMENT $0229 Jump to update x,y for object 4
COMMENT $022B Load X with the address for tree_vec_list
FORCE_SYMBOL $022B tree_vec_list
COMMENT $022E and draw a tree
FORCE_SYMBOL $022E Draw_VLc
COMMENT $0231 add 1 to the object's y position
FORCE_SYMBOL $0231 obj_4_y
COMMENT $0234 check to see if object's y position is
FORCE_SYMBOL $0234 obj_4_y
COMMENT $0237 -128 (has looped back to the bottom of the
COMMENT $0239 screen). If it has then give it a new
COMMENT $023B x coordinate.
FORCE_SYMBOL $023B Random_3
FORCE_SYMBOL $023E obj_4_x
COMMENT $0241 check if object is turned on, if not
FORCE_SYMBOL $0241 obj_5_state
COMMENT $0244 jump to draw_obj_6
COMMENT $0246 reset the vector beam to 0,0
FORCE_SYMBOL $0246 Reset0Int
COMMENT $0249 move the vector beam to the coordinates
FORCE_SYMBOL $0249 obj_5_y
COMMENT $024C for object 5
FORCE_SYMBOL $024C obj_5_x
FORCE_SYMBOL $024F Moveto_d
COMMENT $0252 if obj_5_state is less than 0 then jump to
FORCE_SYMBOL $0252 obj_5_state
COMMENT $0255 draw_tree_5, otherwise carry on and draw a
COMMENT_LINE $0257 gate
COMMENT $0257 Load X with the address of flag_vec_list
FORCE_SYMBOL $0257 flag_vec_list
COMMENT $025A and draw the first flag
FORCE_SYMBOL $025A Draw_VLc
COMMENT $025D Move the vector beam to the right 20
FORCE_NO_SYMBOL $025D
FORCE_SYMBOL $025F flag_dist
FORCE_SYMBOL $0262 Moveto_d
COMMENT $0265 Draw the second flag
FORCE_SYMBOL $0265 flag_vec_list
FORCE_SYMBOL $0268 Draw_VLc
COMMENT $026B Jump to update x,y for object 1
COMMENT $026D Load X with the address for tree_vec_list
FORCE_SYMBOL $026D tree_vec_list
COMMENT $0270 and draw a tree
FORCE_SYMBOL $0270 Draw_VLc
COMMENT $0273 add 1 to the object's y position
FORCE_SYMBOL $0273 obj_5_y
COMMENT $0276 check to see if object's y position is
FORCE_SYMBOL $0276 obj_5_y
COMMENT $0279 -128 (has looped back to the bottom of the
COMMENT $027B screen). If it has then give it a new
COMMENT $027D x coordinate.
FORCE_SYMBOL $027D Random_3
FORCE_SYMBOL $0280 obj_5_x
COMMENT $0283 check if object is turned on, if not
FORCE_SYMBOL $0283 obj_6_state
COMMENT $0286 jump to draw_obj_7
COMMENT $0288 reset the vector beam to 0,0
FORCE_SYMBOL $0288 Reset0Int
COMMENT $028B move the vector beam to the coordinates
FORCE_SYMBOL $028B obj_6_y
COMMENT $028E for object 6
FORCE_SYMBOL $028E obj_6_x
FORCE_SYMBOL $0291 Moveto_d
COMMENT $0294 if obj_6_state is less than 0 then jump to
FORCE_SYMBOL $0294 obj_6_state
COMMENT $0297 draw_tree_6, otherwise carry on and draw a
COMMENT_LINE $0299 gate
COMMENT $0299 Load X with the address of flag_vec_list
FORCE_SYMBOL $0299 flag_vec_list
COMMENT $029C and draw the first flag
FORCE_SYMBOL $029C Draw_VLc
COMMENT $029F Move the vector beam to the right 20
FORCE_NO_SYMBOL $029F
FORCE_SYMBOL $02A1 flag_dist
FORCE_SYMBOL $02A4 Moveto_d
COMMENT $02A7 Draw the second flag
FORCE_SYMBOL $02A7 flag_vec_list
FORCE_SYMBOL $02AA Draw_VLc
COMMENT $02AD Jump to update x,y for object 6
COMMENT $02AF Load X with the address for tree_vec_list
FORCE_SYMBOL $02AF tree_vec_list
COMMENT $02B2 and draw a tree
FORCE_SYMBOL $02B2 Draw_VLc
COMMENT $02B5 add 1 to the object's y position
FORCE_SYMBOL $02B5 obj_6_y
COMMENT $02B8 check to see if object's y position is
FORCE_SYMBOL $02B8 obj_6_y
COMMENT $02BB -128 (has looped back to the bottom of the
COMMENT $02BD screen). If it has then give it a new
COMMENT $02BF x coordinate.
FORCE_SYMBOL $02BF Random_3
FORCE_SYMBOL $02C2 obj_6_x
COMMENT $02C5 check if object is turned on, if not
FORCE_SYMBOL $02C5 obj_7_state
COMMENT $02C8 jump to draw_obj_8
COMMENT $02CA reset the vector beam to 0,0
FORCE_SYMBOL $02CA Reset0Int
COMMENT $02CD move the vector beam to the coordinates
FORCE_SYMBOL $02CD obj_7_y
COMMENT $02D0 for object 7
FORCE_SYMBOL $02D0 obj_7_x
FORCE_SYMBOL $02D3 Moveto_d
COMMENT $02D6 if obj_7_state is less than 0 then jump to
FORCE_SYMBOL $02D6 obj_7_state
COMMENT $02D9 draw_tree_7, otherwise carry on and draw a
COMMENT_LINE $02DB gate
COMMENT $02DB Load X with the address of flag_vec_list
FORCE_SYMBOL $02DB flag_vec_list
COMMENT $02DE and draw the first flag
FORCE_SYMBOL $02DE Draw_VLc
COMMENT $02E1 Move the vector beam to the right 20
FORCE_NO_SYMBOL $02E1
FORCE_SYMBOL $02E3 flag_dist
FORCE_SYMBOL $02E6 Moveto_d
COMMENT $02E9 Draw the second flag
FORCE_SYMBOL $02E9 flag_vec_list
FORCE_SYMBOL $02EC Draw_VLc
COMMENT $02EF Jump to update x,y for object 7
COMMENT $02F1 Load X with the address for tree_vec_list
FORCE_SYMBOL $02F1 tree_vec_list
COMMENT $02F4 and draw a tree
FORCE_SYMBOL $02F4 Draw_VLc
COMMENT $02F7 add 1 to the object's y position
FORCE_SYMBOL $02F7 obj_7_y
COMMENT $02FA check to see if object's y position is
FORCE_SYMBOL $02FA obj_7_y
COMMENT $02FD -128 (has looped back to the bottom of the
COMMENT $02FF screen). If it has then give it a new
COMMENT $0301 x coordinate.
FORCE_SYMBOL $0301 Random_3
FORCE_SYMBOL $0304 obj_7_x
COMMENT $0307 check if object is turned on, if not
FORCE_SYMBOL $0307 obj_8_state
COMMENT $030A jump to check_coll_1
COMMENT $030C reset the vector beam to 0,0
FORCE_SYMBOL $030C Reset0Int
COMMENT $030F move the vector beam to the coordinates
FORCE_SYMBOL $030F obj_8_y
COMMENT $0312 for object 8
FORCE_SYMBOL $0312 obj_8_x
FORCE_SYMBOL $0315 Moveto_d
COMMENT $0318 if obj_8_state is less than 0 then jump to
FORCE_SYMBOL $0318 obj_8_state
COMMENT $031B draw_tree_8, otherwise carry on and draw a
COMMENT_LINE $031D gate
COMMENT $031D Load X with the address of flag_vec_list
FORCE_SYMBOL $031D flag_vec_list
COMMENT $0320 and draw the first flag
FORCE_SYMBOL $0320 Draw_VLc
COMMENT $0323 Move the vector beam to the right 20
FORCE_NO_SYMBOL $0323
FORCE_SYMBOL $0325 flag_dist
FORCE_SYMBOL $0328 Moveto_d
COMMENT $032B Draw the second flag
FORCE_SYMBOL $032B flag_vec_list
FORCE_SYMBOL $032E Draw_VLc
COMMENT $0331 Jump to update x,y for object 8
COMMENT $0333 Load X with the address for tree_vec_list
FORCE_SYMBOL $0333 tree_vec_list
COMMENT $0336 and draw a tree
FORCE_SYMBOL $0336 Draw_VLc
COMMENT $0339 add 1 to the object's y position
FORCE_SYMBOL $0339 obj_8_y
COMMENT $033C check to see if object's y position is
FORCE_SYMBOL $033C obj_8_y
COMMENT $033F -128 (has looped back to the bottom of the
COMMENT $0341 screen). If it has then give it a new
COMMENT $0343 x coordinate.
FORCE_SYMBOL $0343 Random_3
FORCE_SYMBOL $0346 obj_8_x
COMMENT $0349 Check to see if object 1 us a tree
FORCE_SYMBOL $0349 obj_1_state
COMMENT $034C if it is then jump to coll_tree_1
COMMENT $0350 Check to see if object 1's y coordinate
FORCE_SYMBOL $0350 spike_pos_y
COMMENT $0353 is near spike's
FORCE_NO_SYMBOL $0353
FORCE_SYMBOL $0355 temp
FORCE_SYMBOL $0358 obj_1_y
FORCE_SYMBOL $035B temp
FORCE_SYMBOL $0360 spike_pos_y
FORCE_NO_SYMBOL $0363
FORCE_SYMBOL $0365 temp
FORCE_SYMBOL $0368 obj_1_y
FORCE_SYMBOL $036B temp
COMMENT $0370 Check to see if object 1's x coordinate
FORCE_SYMBOL $0370 spike_pos_x
COMMENT $0373 is near spike's
FORCE_NO_SYMBOL $0373
FORCE_SYMBOL $0375 temp
FORCE_SYMBOL $0378 obj_1_x
FORCE_SYMBOL $037B temp
FORCE_SYMBOL $0380 spike_pos_x
FORCE_NO_SYMBOL $0383
FORCE_SYMBOL $0385 temp
FORCE_SYMBOL $0388 obj_1_x
FORCE_SYMBOL $038B temp
COMMENT $0393 Check to see if object 2 us a tree
FORCE_SYMBOL $0393 obj_2_state
COMMENT $0396 if it is then jump to coll_tree_2
COMMENT $039A Check to see if object 2's y coordinate
FORCE_SYMBOL $039A spike_pos_y
COMMENT $039D is near spike's
FORCE_NO_SYMBOL $039D
FORCE_SYMBOL $039F temp
FORCE_SYMBOL $03A2 obj_2_y
FORCE_SYMBOL $03A5 temp
FORCE_SYMBOL $03AA spike_pos_y
FORCE_NO_SYMBOL $03AD
FORCE_SYMBOL $03AF temp
FORCE_SYMBOL $03B2 obj_2_y
FORCE_SYMBOL $03B5 temp
COMMENT $03BA Check to see if object 2's x coordinate
FORCE_SYMBOL $03BA spike_pos_x
COMMENT $03BD is near spike's
FORCE_NO_SYMBOL $03BD
FORCE_SYMBOL $03BF temp
FORCE_SYMBOL $03C2 obj_2_x
FORCE_SYMBOL $03C5 temp
FORCE_SYMBOL $03CA spike_pos_x
FORCE_NO_SYMBOL $03CD
FORCE_SYMBOL $03CF temp
FORCE_SYMBOL $03D2 obj_2_x
FORCE_SYMBOL $03D5 temp
COMMENT $03DD Check to see if object 3 us a tree
FORCE_SYMBOL $03DD obj_3_state
COMMENT $03E0 if it is then jump to coll_tree_3
COMMENT $03E4 Check to see if object 3's y coordinate
FORCE_SYMBOL $03E4 spike_pos_y
COMMENT $03E7 is near spike's
FORCE_NO_SYMBOL $03E7
FORCE_SYMBOL $03E9 temp
FORCE_SYMBOL $03EC obj_3_y
FORCE_SYMBOL $03EF temp
FORCE_SYMBOL $03F4 spike_pos_y
FORCE_NO_SYMBOL $03F7
FORCE_SYMBOL $03F9 temp
FORCE_SYMBOL $03FC obj_3_y
FORCE_SYMBOL $03FF temp
COMMENT $0404 Check to see if object 3's x coordinate
FORCE_SYMBOL $0404 spike_pos_x
COMMENT $0407 is near spike's
FORCE_NO_SYMBOL $0407
FORCE_SYMBOL $0409 temp
FORCE_SYMBOL $040C obj_3_x
FORCE_SYMBOL $040F temp
FORCE_SYMBOL $0414 spike_pos_x
FORCE_NO_SYMBOL $0417
FORCE_SYMBOL $0419 temp
FORCE_SYMBOL $041C obj_3_x
FORCE_SYMBOL $041F temp
COMMENT $0427 Check to see if object 4 us a tree
FORCE_SYMBOL $0427 obj_4_state
COMMENT $042A if it is then jump to coll_tree_4
COMMENT $042E Check to see if object 4's y coordinate
FORCE_SYMBOL $042E spike_pos_y
COMMENT $0431 is near spike's
FORCE_NO_SYMBOL $0431
FORCE_SYMBOL $0433 temp
FORCE_SYMBOL $0436 obj_4_y
FORCE_SYMBOL $0439 temp
FORCE_SYMBOL $043E spike_pos_y
FORCE_NO_SYMBOL $0441
FORCE_SYMBOL $0443 temp
FORCE_SYMBOL $0446 obj_4_y
FORCE_SYMBOL $0449 temp
COMMENT $044E Check to see if object 4's x coordinate
FORCE_SYMBOL $044E spike_pos_x
COMMENT $0451 is near spike's
FORCE_NO_SYMBOL $0451
FORCE_SYMBOL $0453 temp
FORCE_SYMBOL $0456 obj_4_x
FORCE_SYMBOL $0459 temp
FORCE_SYMBOL $045E spike_pos_x
FORCE_NO_SYMBOL $0461
FORCE_SYMBOL $0463 temp
FORCE_SYMBOL $0466 obj_4_x
FORCE_SYMBOL $0469 temp
COMMENT $0471 Check to see if object 5 us a tree
FORCE_SYMBOL $0471 obj_5_state
COMMENT $0474 if it is then jump to coll_tree_5
COMMENT $0478 Check to see if object 5's y coordinate
FORCE_SYMBOL $0478 spike_pos_y
COMMENT $047B is near spike's
FORCE_NO_SYMBOL $047B
FORCE_SYMBOL $047D temp
FORCE_SYMBOL $0480 obj_5_y
FORCE_SYMBOL $0483 temp
FORCE_SYMBOL $0488 spike_pos_y
FORCE_NO_SYMBOL $048B
FORCE_SYMBOL $048D temp
FORCE_SYMBOL $0490 obj_5_y
FORCE_SYMBOL $0493 temp
COMMENT $0498 Check to see if object 5's x coordinate
FORCE_SYMBOL $0498 spike_pos_x
COMMENT $049B is near spike's
FORCE_NO_SYMBOL $049B
FORCE_SYMBOL $049D temp
FORCE_SYMBOL $04A0 obj_5_x
FORCE_SYMBOL $04A3 temp
FORCE_SYMBOL $04A8 spike_pos_x
FORCE_NO_SYMBOL $04AB
FORCE_SYMBOL $04AD temp
FORCE_SYMBOL $04B0 obj_5_x
FORCE_SYMBOL $04B3 temp
COMMENT $04BB Check to see if object 6 us a tree
FORCE_SYMBOL $04BB obj_6_state
COMMENT $04BE if it is then jump to coll_tree_6
COMMENT $04C2 Check to see if object 6's y coordinate
FORCE_SYMBOL $04C2 spike_pos_y
COMMENT $04C5 is near spike's
FORCE_NO_SYMBOL $04C5
FORCE_SYMBOL $04C7 temp
FORCE_SYMBOL $04CA obj_6_y
FORCE_SYMBOL $04CD temp
FORCE_SYMBOL $04D2 spike_pos_y
FORCE_NO_SYMBOL $04D5
FORCE_SYMBOL $04D7 temp
FORCE_SYMBOL $04DA obj_6_y
FORCE_SYMBOL $04DD temp
COMMENT $04E2 Check to see if object 6's x coordinate
FORCE_SYMBOL $04E2 spike_pos_x
COMMENT $04E5 is near spike's
FORCE_NO_SYMBOL $04E5
FORCE_SYMBOL $04E7 temp
FORCE_SYMBOL $04EA obj_6_x
FORCE_SYMBOL $04ED temp
FORCE_SYMBOL $04F2 spike_pos_x
FORCE_NO_SYMBOL $04F5
FORCE_SYMBOL $04F7 temp
FORCE_SYMBOL $04FA obj_6_x
FORCE_SYMBOL $04FD temp
COMMENT $0505 Check to see if object 7 us a tree
FORCE_SYMBOL $0505 obj_7_state
COMMENT $0508 if it is then jump to coll_tree_7
COMMENT $050C Check to see if object 7's y coordinate
FORCE_SYMBOL $050C spike_pos_y
COMMENT $050F is near spike's
FORCE_NO_SYMBOL $050F
FORCE_SYMBOL $0511 temp
FORCE_SYMBOL $0514 obj_7_y
FORCE_SYMBOL $0517 temp
FORCE_SYMBOL $051C spike_pos_y
FORCE_NO_SYMBOL $051F
FORCE_SYMBOL $0521 temp
FORCE_SYMBOL $0524 obj_7_y
FORCE_SYMBOL $0527 temp
COMMENT $052C Check to see if object 7's x coordinate
FORCE_SYMBOL $052C spike_pos_x
COMMENT $052F is near spike's
FORCE_NO_SYMBOL $052F
FORCE_SYMBOL $0531 temp
FORCE_SYMBOL $0534 obj_7_x
FORCE_SYMBOL $0537 temp
FORCE_SYMBOL $053C spike_pos_x
FORCE_NO_SYMBOL $053F
FORCE_SYMBOL $0541 temp
FORCE_SYMBOL $0544 obj_7_x
FORCE_SYMBOL $0547 temp
COMMENT $054F Check to see if object 8 us a tree
FORCE_SYMBOL $054F obj_8_state
COMMENT $0552 if it is then jump to coll_tree_8
COMMENT $0556 Check to see if object 8's y coordinate
FORCE_SYMBOL $0556 spike_pos_y
COMMENT $0559 is near spike's
FORCE_NO_SYMBOL $0559
FORCE_SYMBOL $055B temp
FORCE_SYMBOL $055E obj_8_y
FORCE_SYMBOL $0561 temp
FORCE_SYMBOL $0566 spike_pos_y
FORCE_NO_SYMBOL $0569
FORCE_SYMBOL $056B temp
FORCE_SYMBOL $056E obj_8_y
FORCE_SYMBOL $0571 temp
COMMENT $0576 Check to see if object 8's x coordinate
FORCE_SYMBOL $0576 spike_pos_x
COMMENT $0579 is near spike's
FORCE_NO_SYMBOL $0579
FORCE_SYMBOL $057B temp
FORCE_SYMBOL $057E obj_8_x
FORCE_SYMBOL $0581 temp
FORCE_SYMBOL $0586 spike_pos_x
FORCE_NO_SYMBOL $0589
FORCE_SYMBOL $058B temp
FORCE_SYMBOL $058E obj_8_x
FORCE_SYMBOL $0591 temp
COMMENT $0599 and repeat forever
FORCE_NO_SYMBOL $059C
FORCE_SYMBOL $059E temp
FORCE_SYMBOL $05A1 lives
FORCE_SYMBOL $05A4 Wait_Recal
COMMENT $05A7 Sets the intensity of the
FORCE_SYMBOL $05A7 Intensity_7F
COMMENT_LINE $05AA vector beam to $5f
FORCE_NO_SYMBOL $05AA
COMMENT $05AC set scale factor to $80
FORCE_SYMBOL $05AC VIA_t1_cnt_lo
FORCE_SYMBOL $05AE spike_pos_y
FORCE_SYMBOL $05B1 spike_pos_x
FORCE_SYMBOL $05B4 Moveto_d
FORCE_SYMBOL $05B7 dead_vec_list
FORCE_SYMBOL $05BA Draw_VL_mode
FORCE_SYMBOL $05BD Intensity_5F
FORCE_SYMBOL $05C0 temp
FORCE_NO_SYMBOL $05C3
FORCE_SYMBOL $05C5 temp
FORCE_NO_SYMBOL $05C8
FORCE_NO_SYMBOL $05D0
FORCE_SYMBOL $05D2 temp
COMMENT $05D5 Vectrex BIOS recalibration
FORCE_SYMBOL $05D5 Wait_Recal
COMMENT $05D8 Sets the intensity of the
FORCE_SYMBOL $05D8 Intensity_5F
COMMENT_LINE $05DB vector beam to $5f
COMMENT $05DB address of string
FORCE_SYMBOL $05DB game_over_string
COMMENT $05DE Text position relative Y
FORCE_NO_SYMBOL $05DE
COMMENT $05E0 Text position relative X
COMMENT $05E2 Vectrex BIOS print routine
FORCE_SYMBOL $05E2 Print_Str_d
FORCE_SYMBOL $05E5 temp
FORCE_NO_SYMBOL $05E8
FORCE_SYMBOL $05EA temp
FORCE_NO_SYMBOL $05ED
COMMENT_LINE $05F5 ***************************************************************************
COMMENT_LINE $05F5 DATA SECTION
COMMENT_LINE $05F5 ***************************************************************************
COMMENT $05F5 spike's body
COMMENT $0613 spike's mouth
COMMENT $062E spike's eyes
COMMENT $063A spike's legs and skis
COMMENT $0653 spike's body
COMMENT $0671 spike's mouth
COMMENT $068C spike's eyes
COMMENT $0698 spike's legs and skis
COMMENT $06B1 spike's body
COMMENT $06CF spike's mouth
COMMENT $06EA spike's eyes
COMMENT $06F6 spike's legs and skis
COMMENT_LINE $07D8 ***************************************************************************
RANGE $0000-$07D8 DP $D0
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0023 CHAR_DATA 18
RANGE $0023-$0024 DB_DATA 1
RANGE $0024-$05F5 CODE
RANGE $05F5-$05F8 DB_DATA 3
RANGE $05F8-$05FB DB_DATA 3
RANGE $05FB-$05FE DB_DATA 3
RANGE $05FE-$0601 DB_DATA 3
RANGE $0601-$0604 DB_DATA 3
RANGE $0604-$0607 DB_DATA 3
RANGE $0607-$060A DB_DATA 3
RANGE $060A-$060D DB_DATA 3
RANGE $060D-$0610 DB_DATA 3
RANGE $0610-$0613 DB_DATA 3
RANGE $0613-$0616 DB_DATA 3
RANGE $0616-$0619 DB_DATA 3
RANGE $0619-$061C DB_DATA 3
RANGE $061C-$061F DB_DATA 3
RANGE $061F-$0622 DB_DATA 3
RANGE $0622-$0625 DB_DATA 3
RANGE $0625-$0628 DB_DATA 3
RANGE $0628-$062B DB_DATA 3
RANGE $062B-$062E DB_DATA 3
RANGE $062E-$0631 DB_DATA 3
RANGE $0631-$0634 DB_DATA 3
RANGE $0634-$0637 DB_DATA 3
RANGE $0637-$063A DB_DATA 3
RANGE $063A-$063D DB_DATA 3
RANGE $063D-$0640 DB_DATA 3
RANGE $0640-$0643 DB_DATA 3
RANGE $0643-$0646 DB_DATA 3
RANGE $0646-$0649 DB_DATA 3
RANGE $0649-$064C DB_DATA 3
RANGE $064C-$064F DB_DATA 3
RANGE $064F-$0652 DB_DATA 3
RANGE $0652-$0653 DB_DATA 1
RANGE $0653-$0656 DB_DATA 3
RANGE $0656-$0659 DB_DATA 3
RANGE $0659-$065C DB_DATA 3
RANGE $065C-$065F DB_DATA 3
RANGE $065F-$0662 DB_DATA 3
RANGE $0662-$0665 DB_DATA 3
RANGE $0665-$0668 DB_DATA 3
RANGE $0668-$066B DB_DATA 3
RANGE $066B-$066E DB_DATA 3
RANGE $066E-$0671 DB_DATA 3
RANGE $0671-$0674 DB_DATA 3
RANGE $0674-$0677 DB_DATA 3
RANGE $0677-$067A DB_DATA 3
RANGE $067A-$067D DB_DATA 3
RANGE $067D-$0680 DB_DATA 3
RANGE $0680-$0683 DB_DATA 3
RANGE $0683-$0686 DB_DATA 3
RANGE $0686-$0689 DB_DATA 3
RANGE $0689-$068C DB_DATA 3
RANGE $068C-$068F DB_DATA 3
RANGE $068F-$0692 DB_DATA 3
RANGE $0692-$0695 DB_DATA 3
RANGE $0695-$0698 DB_DATA 3
RANGE $0698-$069B DB_DATA 3
RANGE $069B-$069E DB_DATA 3
RANGE $069E-$06A1 DB_DATA 3
RANGE $06A1-$06A4 DB_DATA 3
RANGE $06A4-$06A7 DB_DATA 3
RANGE $06A7-$06AA DB_DATA 3
RANGE $06AA-$06AD DB_DATA 3
RANGE $06AD-$06B0 DB_DATA 3
RANGE $06B0-$06B1 DB_DATA 1
RANGE $06B1-$06B4 DB_DATA 3
RANGE $06B4-$06B7 DB_DATA 3
RANGE $06B7-$06BA DB_DATA 3
RANGE $06BA-$06BD DB_DATA 3
RANGE $06BD-$06C0 DB_DATA 3
RANGE $06C0-$06C3 DB_DATA 3
RANGE $06C3-$06C6 DB_DATA 3
RANGE $06C6-$06C9 DB_DATA 3
RANGE $06C9-$06CC DB_DATA 3
RANGE $06CC-$06CF DB_DATA 3
RANGE $06CF-$06D2 DB_DATA 3
RANGE $06D2-$06D5 DB_DATA 3
RANGE $06D5-$06D8 DB_DATA 3
RANGE $06D8-$06DB DB_DATA 3
RANGE $06DB-$06DE DB_DATA 3
RANGE $06DE-$06E1 DB_DATA 3
RANGE $06E1-$06E4 DB_DATA 3
RANGE $06E4-$06E7 DB_DATA 3
RANGE $06E7-$06EA DB_DATA 3
RANGE $06EA-$06ED DB_DATA 3
RANGE $06ED-$06F0 DB_DATA 3
RANGE $06F0-$06F3 DB_DATA 3
RANGE $06F3-$06F6 DB_DATA 3
RANGE $06F6-$06F9 DB_DATA 3
RANGE $06F9-$06FC DB_DATA 3
RANGE $06FC-$06FF DB_DATA 3
RANGE $06FF-$0702 DB_DATA 3
RANGE $0702-$0705 DB_DATA 3
RANGE $0705-$0708 DB_DATA 3
RANGE $0708-$070B DB_DATA 3
RANGE $070B-$070E DB_DATA 3
RANGE $070E-$070F DB_DATA 1
RANGE $070F-$0710 DB_DATA 1
RANGE $0710-$0712 DB_DATA 2
RANGE $0712-$0714 DB_DATA 2
RANGE $0714-$0716 DB_DATA 2
RANGE $0716-$0718 DB_DATA 2
RANGE $0718-$071A DB_DATA 2
RANGE $071A-$071C DB_DATA 2
RANGE $071C-$071E DB_DATA 2
RANGE $071E-$0720 DB_DATA 2
RANGE $0720-$0722 DB_DATA 2
RANGE $0722-$0724 DB_DATA 2
RANGE $0724-$0726 DB_DATA 2
RANGE $0726-$0728 DB_DATA 2
RANGE $0728-$072A DB_DATA 2
RANGE $072A-$072C DB_DATA 2
RANGE $072C-$072E DB_DATA 2
RANGE $072E-$0730 DB_DATA 2
RANGE $0730-$0732 DB_DATA 2
RANGE $0732-$0734 DB_DATA 2
RANGE $0734-$0736 DB_DATA 2
RANGE $0736-$0738 DB_DATA 2
RANGE $0738-$0739 DB_DATA 1
RANGE $0739-$073B DB_DATA 2
RANGE $073B-$073D DB_DATA 2
RANGE $073D-$073F DB_DATA 2
RANGE $073F-$0742 DB_DATA 3
RANGE $0742-$0745 DB_DATA 3
RANGE $0745-$0748 DB_DATA 3
RANGE $0748-$074B DB_DATA 3
RANGE $074B-$074E DB_DATA 3
RANGE $074E-$0751 DB_DATA 3
RANGE $0751-$0754 DB_DATA 3
RANGE $0754-$0757 DB_DATA 3
RANGE $0757-$075A DB_DATA 3
RANGE $075A-$075D DB_DATA 3
RANGE $075D-$0760 DB_DATA 3
RANGE $0760-$0763 DB_DATA 3
RANGE $0763-$0766 DB_DATA 3
RANGE $0766-$0769 DB_DATA 3
RANGE $0769-$076C DB_DATA 3
RANGE $076C-$076F DB_DATA 3
RANGE $076F-$0772 DB_DATA 3
RANGE $0772-$0775 DB_DATA 3
RANGE $0775-$0778 DB_DATA 3
RANGE $0778-$077B DB_DATA 3
RANGE $077B-$077E DB_DATA 3
RANGE $077E-$0781 DB_DATA 3
RANGE $0781-$0784 DB_DATA 3
RANGE $0784-$0787 DB_DATA 3
RANGE $0787-$078A DB_DATA 3
RANGE $078A-$078D DB_DATA 3
RANGE $078D-$0790 DB_DATA 3
RANGE $0790-$0793 DB_DATA 3
RANGE $0793-$0796 DB_DATA 3
RANGE $0796-$0799 DB_DATA 3
RANGE $0799-$079C DB_DATA 3
RANGE $079C-$079F DB_DATA 3
RANGE $079F-$07A2 DB_DATA 3
RANGE $07A2-$07A5 DB_DATA 3
RANGE $07A5-$07A8 DB_DATA 3
RANGE $07A8-$07AB DB_DATA 3
RANGE $07AB-$07AE DB_DATA 3
RANGE $07AE-$07B1 DB_DATA 3
RANGE $07B1-$07B4 DB_DATA 3
RANGE $07B4-$07B7 DB_DATA 3
RANGE $07B7-$07BA DB_DATA 3
RANGE $07BA-$07BB DB_DATA 1
RANGE $07BB-$07C9 CHAR_DATA 14
RANGE $07C9-$07CA DB_DATA 1
RANGE $07CA-$07CD CHAR_DATA 3
RANGE $07CD-$07CE DB_DATA 1
RANGE $07CE-$07D7 CHAR_DATA 9
RANGE $07D7-$07D8 DB_DATA 1

