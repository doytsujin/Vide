BANK 0
EQU $00 
LABEL $C800 REG0
LABEL $C801 REG1
LABEL $C802 REG2
LABEL $C803 REG3
LABEL $C804 REG4
LABEL $C805 REG5
LABEL $C806 REG6
LABEL $C807 REG7
LABEL $C808 REG8
LABEL $C809 REG9
LABEL $C80A REGA
LABEL $C80B REGB
LABEL $C80C REGC
LABEL $C80D REGD
LABEL $C80E REGE
LABEL $C80F TRIGGR
LABEL $C811 HEDGES
LABEL $C812 KEY0
LABEL $C813 KEY1
LABEL $C814 KEY2
LABEL $C815 KEY3
LABEL $C816 KEY4
LABEL $C817 KEY5
LABEL $C818 KEY6
LABEL $C819 KEY7
LABEL $C81A POTRES
LABEL $C81B POT0
LABEL $C81C POT1
LABEL $C81D POT2
LABEL $C81E POT3
LABEL $C81F DPOT0
LABEL $C820 DPOT1
LABEL $C821 DPOT2
LABEL $C822 DPOT3
LABEL $C823 LIST
LABEL $C824 ZGO
LABEL $C825 FRAME
LABEL $C827 TENSTY
LABEL $C828 DWELL
LABEL $C829 DASH
LABEL $C82A SIZRAS
LABEL $C82C MESAGE
LABEL $C82E X0
LABEL $C82F X1
LABEL $C830 X2
LABEL $C831 X3
LABEL $C832 X4
LABEL $C833 X5
LABEL $C834 ABSY
LABEL $C835 ABSX
LABEL $C836 ANGLE
LABEL $C837 SINE
LABEL $C839 COSINE
LABEL $C83B LEG
LABEL $C83C LAG
LABEL $C83D XMSEC
LABEL $3075 MSEC20
COMMENT_LABEL $3075 LO BYTE, HI
LABEL $7C92 MSEC25
LABEL $C8AF MSEC30
LABEL $C83F REQ0
LABEL $C840 REQ1
LABEL $C841 REQ2
LABEL $C842 REQ3
LABEL $C843 REQ4
LABEL $C844 REQ5
LABEL $C845 REQ6
LABEL $C846 REQ7
LABEL $C847 REQ8
LABEL $C848 QEQ9
LABEL $C849 REQA
LABEL $C84A REQB
LABEL $C84B REQC
LABEL $C84C REQD
LABEL $C847 CHCF
COMMENT_LABEL $C847 CHANNEL C FREQUENCY
LABEL $C849 CHBF
LABEL $C84B CHAF
LABEL $C846 NOISEF
COMMENT_LABEL $C846 NOISE FREQ
LABEL $C840 ENVELF
COMMENT_LABEL $C840 ENVELOPE FREQ
LABEL $C842 CHCV
COMMENT_LABEL $C842 CHANNEL C VOLUME
LABEL $C843 CHBV
LABEL $C844 CHAV
LABEL $C845 SENABL
COMMENT_LABEL $C845 SOUND ENABLE
LABEL $C84D DOREMI
LABEL $C84F FADE
LABEL $C851 VIBE
LABEL $C853 TUNE
LABEL $C855 NEWGEN
LABEL $C856 TSTAT
LABEL $C857 RESTC
LABEL $C858 RATEA
LABEL $C859 VIBA
LABEL $C85A RATEB
LABEL $C85B VIBB
LABEL $C85C RATEC
LABEL $C85D VIBC
LABEL $C85E FADEA
LABEL $C85F FADEB
LABEL $C860 FADEC
LABEL $C861 TONEA
LABEL $C863 TONEB
LABEL $C865 TONEC
LABEL $C867 SATUS
LABEL $C868 LATUS
LABEL $C869 XATUS
LABEL $C86A GAP
LABEL $C86B B1FREQ
LABEL $C86D B2FREQ
LABEL $C86F F1FREQ
LABEL $C871 FEAST
LABEL $C872 PEDGE
LABEL $C873 NEDGE
LABEL $C874 K1FREQ
LABEL $C876 BACON
LABEL $C877 XACON
LABEL $C878 SPEKT
LABEL $C879 PLAYRZ
LABEL $C87A GAMZ
LABEL $C87B SEED
LABEL $C87D RANCID
LABEL $C880 LASRAM
LABEL $CA00 RAMMES
LABEL $CBEA STACK
LABEL $CBEB HEIGH
LABEL $CBF2 INMI
LABEL $CBF2 ISWI3
LABEL $CBF2 ISWI2
LABEL $CBF5 IFIRQ
LABEL $CBF8 IIRQ
LABEL $CBFB ISWI
LABEL $CBFE JRES
LABEL $D000 BPORT
LABEL $D001 APORT
LABEL $D002 BPORTD
LABEL $D003 APORTD
LABEL $D004 T1LOLC
LABEL $D005 T1HOC
LABEL $D006 T1LOL
LABEL $D007 T1HOL
LABEL $D008 T2LOLC
LABEL $D009 T2HOC
LABEL $D00A SR
LABEL $D00B ACR
LABEL $D00C PPCR
LABEL $D00D IFR
LABEL $D00E IER
LABEL $D00F ORAIRA
LABEL $D001 DAC
COMMENT_LABEL $D001 FOR HUMAN INTERFACE
LABEL $D000 PORT
COMMENT_LABEL $D000 MAIN CONTROL PORT
LABEL $00CC ZERO
COMMENT_LABEL $00CC CODE TO PCR ZERO INTEGRATORS
LABEL $00CE UNZERO
COMMENT_LABEL $00CE CORE FOR RELEASE HOLD ZERO
EQU $7F SCAL1X
COMMENT_LABEL $7F TIMING PARAMETERS FOR VECTOR WRITE
LABEL $00FF SCAL2X
EQU $00 CARTS
COMMENT_LABEL $00 ADDRESS OF EXTERNAL ROM PACK
LABEL $F000 ROMS
COMMENT_LABEL $F000 ADDRESS OF ON-BOARD ROM
LABEL $E000 INHOUS
LABEL $F000 POWER
LABEL $F000 WARM
LABEL $F18B INITALL
LABEL $F06C WARME
LABEL $F84F SCLR
LABEL $F01C CLOD
LABEL $F1AF DPRAM
LABEL $F029 MFIZZ
LABEL $F0FD DABLE
LABEL $FD0D VCTRX
LABEL $F687 REPLAY
LABEL $F03D DONO
LABEL $F192 FRAM20
LABEL $F289 REQOUT
LABEL $F2A9 INTMAX
LABEL $F10C MCOLD
LABEL $F052 ONBABY
LABEL $F385 TEXSIZ
LABEL $F0E9 DOSH
LABEL $F058 RETIRE
LABEL $F308 POSIT2
LABEL $F434 DASHEL
LABEL $F101 SECRET
LABEL $F084 ESCAPE
LABEL $F097 WARMER
LABEL $F092 REKKED
LABEL $F09E WARMEST
LABEL $F0A4 WARMLY
LABEL $F37A POSDRAS
LABEL $F0D2 NEIGH
LABEL $F118 MBOLD
LABEL $F124 SACRET
LABEL $F14C INITPIA
LABEL $F1AA DPIO
LABEL $F354 ZEROIT
LABEL $F1A2 STAR20
LABEL $F164 INITMSC
LABEL $F53F CLRSOM
LABEL $F173 LAHK
LABEL $F272 INITPSG
LABEL $F19E OCCULT
LABEL $F2E6 DEFLOK
LABEL $F1B4 ENPUT
LABEL $F1BA INPUT
LABEL $F1EA IENPUT
LABEL $F1F5 POTS4
LABEL $F1F8 PBANG4
LABEL $F1FB PANG
LABEL $F20B PBONG
LABEL $F1FF PBRONG
LABEL $F213 PBEST
LABEL $F240 PITS
LABEL $F22D PMIN
LABEL $F236 PSTIF
LABEL $F235 PZRO
LABEL $F23A PAST
LABEL $F24C PARTS
LABEL $F256 PSGX
LABEL $F259 PSG
LABEL $F275 SINIT
LABEL $F533 IREQ
LABEL $F27D PSGLUP
LABEL $F284 PSGLPU
LABEL $F282 PSGULP
LABEL $F291 REQOUR
LABEL $F299 REQNOT
LABEL $F29D INT1Q
LABEL $F2AB INTENS
LABEL $F2A1 INTMID
LABEL $F2A5 INT3Q
LABEL $F2BE DOTTIM
LABEL $F2C1 DOTX
LABEL $F2C3 DOTAB
LABEL $F312 POSITN
LABEL $F2C5 DOT
LABEL $F2CC DADOT
LABEL $F2D5 DIFDOT
LABEL $F2DE DOTPAK
LABEL $F2E2 DOKPAT
LABEL $F9F0 FALWEL
LABEL $F36B ZERO_
LABEL $F310 POSITX
LABEL $F2F2 POSWID
LABEL $F2FC POSITD
LABEL $F318 POOSI
LABEL $F30E POSITB
LABEL $F30C POSIT1
LABEL $F584 ABSVAL
LABEL $F345 MEDIO
LABEL $F33B FASTO
LABEL $F33D TEDIO
LABEL $F341 FARM
LABEL $F34A ZERO_DP
LABEL $F34F ZEGO
LABEL $F36A ZBONG
LABEL $F35B ZEREF
LABEL $F373 SIZPRAS
LABEL $F375 DUSTRAG
LABEL $F378 POSNRAS
LABEL $F575 DEL28
LABEL $F495 RASTUR
LABEL $F383 AXOLOT
LABEL $F38A AXLOTL
LABEL $F38C TEXPOS
LABEL $F391 SHIPSAT
LABEL $F393 SHIPSHO
LABEL $F3A3 UNDER
LABEL $F3AD DUFFAX
LABEL $F3B9 DUFLST
LABEL $F3B1 DUFTIM
LABEL $F3BC DUFFY
LABEL $F3B5 DUFFX
LABEL $F3B7 DUFTLS
LABEL $F3BE DUFFAB
LABEL $F3ED UNCLE
LABEL $F3CE DIFFAX
LABEL $F3DA DIFLST
LABEL $F3D2 DIFTIM
LABEL $F3DD DIFFY
LABEL $F3D6 DIFFX
LABEL $F3D8 DIFTLS
LABEL $F3DF DIFFAB
LABEL $F3F4 FEXIT
LABEL $F404 PAC2X
LABEL $F40E PACB
LABEL $F408 PAC1X
LABEL $F40C PACXX
LABEL $F410 PACKET
LABEL $F425 EXIT
LABEL $F433 DASHE
LABEL $F437 DASHY
LABEL $F45C DASIT
LABEL $F459 DEXIT
LABEL $F46E DASHY3
LABEL $F476 DASH33
LABEL $F47E NOTSOL
LABEL $F485 SOLNOT
LABEL $F48D DASDON
LABEL $F498 RASTER
LABEL $F9F4 ASCII
LABEL $F4A5 TOFWD
LABEL $F4B8 GOFWD
LABEL $F4CB DECOD_
LABEL $F4C7 DECOD
LABEL $F4CF EOLINE
LABEL $F50A EOMESS
LABEL $F4EB DELRAS
LABEL $F4F3 H5
LABEL $F511 RAND3
LABEL $F51A PSUDOH
LABEL $F517 RANDOM
LABEL $F51D HODUSP
LABEL $F548 GILL
LABEL $F542 CLRMEM
LABEL $F545 CLR256
LABEL $F550 NEGSOM
LABEL $F552 FILL
LABEL $F55A DEKR3
LABEL $F560 BEKR
LABEL $F55E DEKR
LABEL $F563 AEKR
LABEL $F569 GEKR
LABEL $F56D DEL38
LABEL $F57A DEL
LABEL $F571 DEL33
LABEL $F579 DEL20
LABEL $F57D DEL13
LABEL $F57E BITE
LABEL $F9DC BITTBL
LABEL $F58B AOK
LABEL $F592 BOK
LABEL $F593 COMPAS
LABEL $F5B2 RETAEB
LABEL $F5B0 BEATER
LABEL $FC24 WEIRD
LABEL $FC2C ROWTRI
LABEL $F5D0 ITSKUL
LABEL $F5D3 ITSLOD
LABEL $F5D9 COSGET
LABEL $F5DB SINGET
LABEL $FC6D RTRIGS
LABEL $F5E5 SINPOS
LABEL $F5EC NOTSQR
LABEL $F5EF SINCOS
LABEL $F5FF RATOR
LABEL $F601 ROTOR
LABEL $F603 ROTAR
LABEL $F65D RSIN
LABEL $F663 RCOS
LABEL $F610 DANROT
LABEL $F613 DISROT
LABEL $F616 DIFROT
LABEL $F637 RX
LABEL $F61F POTATA
LABEL $F622 POTATE
LABEL $F62B SHARON
LABEL $F635 FROTT
LABEL $F661 RCOSA
LABEL $F65B RSINA
LABEL $F665 RSC
LABEL $F66F DOALL
LABEL $F679 FONLY
LABEL $F676 BEPL
LABEL $F67E ROUT
LABEL $F67F BAGAUX
LABEL $F683 STFAUX
LABEL $F686 RATS
LABEL $F6B3 HEYBAB
LABEL $F68D SPLAY
LABEL $FC8D NOTES
LABEL $F690 SOPLAY
LABEL $F692 YOPLAY
LABEL $F6EC PICKUP
LABEL $F6B8 FAHDE
LABEL $F6C0 THRILL
LABEL $F6CA RAZV
LABEL $F6D2 DOC
LABEL $F6DF NOYC
LABEL $F74E UPATEN
LABEL $F6E3 HITIT
LABEL $F6EA SPIN
LABEL $F712 TONEON
LABEL $F9E4 CRT
LABEL $F735 DONALD
LABEL $F9EA CRATE
LABEL $F748 RESTY
LABEL $F742 XPLAY
LABEL $F759 IPATEN
LABEL $F766 PEVEN
LABEL $F76D JOWL
LABEL $F772 VIBO
LABEL $F778 HARRY
LABEL $F788 RISE
LABEL $F78C BUYS
LABEL $F793 HUMAN
LABEL $F794 MPLAY
LABEL $F79F MGAME
LABEL $F7A9 OPTION
LABEL $F7B1 BOPTO
LABEL $F7B6 IPTOID
LABEL $F82C SMILE
LABEL $F7C5 POTION
LABEL $F835 SHOWY
LABEL $F7F1 PWR80
LABEL $F810 PAS0
LABEL $F80C YIPPIE
LABEL $F821 PAS1
LABEL $F82A BOIGE
LABEL $F84E YOTION
LABEL $F85E SHADD
LABEL $F861 CHAD
LABEL $F86D TEN10
LABEL $F878 ONE1
LABEL $F87C SADD
LABEL $F880 SADD2
LABEL $F882 LLAD
LABEL $F897 SIDJ
LABEL $F88F SADJ
LABEL $F895 SEDJ
LABEL $F8A5 SGDJ
LABEL $F8AE SARJ
LABEL $F8B7 ZERBLNK
LABEL $F8C6 BLNKIT
LABEL $F8C7 WINNER
LABEL $F8CA WIN_1
LABEL $F8D6 WIN_RTS
LABEL $F8D5 WIN_2
LABEL $F8D8 HIGHSCR
LABEL $F8E4 HSCR_RTS
LABEL $F8DE HSLOOP
EQU $00 BOXDIM
EQU $04 BOXPOS
EQU $05 XBOXPOS
EQU $02 PNTPOS
LABEL $F8E5 OFF1BOX
LABEL $F8EF BADGER
LABEL $F903 CHICAGO
LABEL $F8F3 OFF2BOX
LABEL $F8FF FINDBOX
LABEL $F906 COLID_0
LABEL $F90F COL_0
LABEL $F928 N_COLID
LABEL $F91B COL_2
LABEL $F92A COL_EXT
LABEL $C858 XREQ6
COMMENT_LABEL $C858 LOCAL PSG ENABLES. ROUTINE STEALS REGS FROM TUNE PLAYER
LABEL $C859 N_DIR
COMMENT_LABEL $C859 NOISE FREQ MOVE DIR, 3 CONDITIONS:
LABEL $C85A L_DIR
COMMENT_LABEL $C85A LOUDNESS MOVE DIR, 3 CONDITIONS:
LABEL $C85B X_SPEED
COMMENT_LABEL $C85B COUNTDOWN RATE FROM $7F. RANGE 1(LONGEST) TO $80(SHORTEST)
LABEL $C85C T_COUNT
COMMENT_LABEL $C85C FOR RUMBLES
LABEL $C85D T_NUM
LABEL $C853 N_NUM
LABEL $C854 BOTH
LABEL $F92E AXE
LABEL $F95B XGO
LABEL $F968 XORE
LABEL $F9C9 XBYE
LABEL $F95F XMORE
LABEL $F9CA LOUDIN
LABEL $F97D LIN
LABEL $F97B NIN
LABEL $F987 ROLD
LABEL $F991 LGOIN
LABEL $F98F LGOINI
LABEL $F9C2 NOBLE
LABEL $F997 BNZ
LABEL $F99E TNZ
LABEL $F9BC NOFLT
LABEL $F9CF NOSE
LABEL $F9DB LOUBYE
LABEL $FC36 FIBTBL
EQU $00 G2
COMMENT_LABEL $00 G = 1.5 8ves below middle C
EQU $01 GS2
COMMENT_LABEL $01 G sharp (second 8ve) , etc.
EQU $02 A2
EQU $03 AS2
EQU $04 B2
EQU $05 C3
EQU $06 CS3
EQU $07 D3
EQU $08 DS3
EQU $09 E3
EQU $0A F3
EQU $0B FS3
EQU $0C G3
EQU $0D GS3
EQU $0E A3
EQU $0F AS3
EQU $10 B3
EQU $11 C4
EQU $12 CS4
EQU $13 D4
EQU $14 DS4
EQU $15 E4
EQU $16 F4
EQU $17 FS4
EQU $18 G4
EQU $19 GS4
EQU $1A A4
EQU $1B AS4
EQU $1C B4
EQU $1D C5
EQU $1E CS5
EQU $1F D5
EQU $20 DS5
EQU $21 E5
EQU $22 F5
EQU $23 FS5
EQU $24 G5
EQU $25 GS5
EQU $26 A5
EQU $27 AS5
EQU $28 B5
EQU $29 C6
EQU $2A CS6
EQU $2B D6
EQU $2C DS6
EQU $2D E6
EQU $2E F6
EQU $2F FS6
EQU $30 G6
EQU $31 GS6
EQU $32 A6
EQU $33 AS6
EQU $34 B6
EQU $35 C7
EQU $36 CS7
EQU $37 D7
EQU $38 DS7
EQU $39 E7
EQU $3A F7
EQU $3B FS7
EQU $3C G7
EQU $3D GS7
EQU $3E A7
EQU $3F AS7
COMMENT_LABEL $3F zero frequency for rest
EQU $1E VH
EQU $12 VEQ
EQU $06 TRV
LABEL $FEE8 FADE4
LABEL $FEB6 VIBENL
EQU $07 TR8
COMMENT_LABEL $07 frame count in milliseconds (tempo)
EQU $0E TRQTR
EQU $02 ARPEG1
EQU $28 HA
LABEL $FD1D BZERK
LABEL $FD69 FADE0
LABEL $FD79 VIBE0
LABEL $FD67 ENDZ
EQU $18 QUO
COMMENT_LABEL $18 frame count in milliseconds (tempo)
EQU $0C EGG
EQU $06 SIP
EQU $04 SIT
EQU $10 SNAR
LABEL $FD81 ARMOR
LABEL $FDC3 FADE12
EQU $10 QU
COMMENT_LABEL $10 frame count in milliseconds (tempo)
EQU $08 EIT
EQU $04 SINTH
EQU $30 HAT
LABEL $FDD3 SCRMBL
LABEL $FE28 FADE1
EQU $18 QR
COMMENT_LABEL $18 frame count in milliseconds (tempo)
EQU $12 DOT8TH
EQU $06 SXTNTH
EQU $3C HALF
LABEL $FE38 SOLAR
LABEL $FE66 FADE2
LABEL $FE64 ENDS
EQU $06 SNTH
EQU $0C EIGHTH
EQU $18 QUR
EQU $24 DQTR
EQU $04 ARPEG
EQU $32 BIG
LABEL $FE76 LUCKS
LABEL $FEB2 FADE3
LABEL $FEB0 ENDL
EQU $32 HAQ
EQU $1E TRIQ
EQU $14 ITA
EQU $0A ITB
LABEL $FEC6 TREK
EQU $06 QRTR2
EQU $1E HAFF2
LABEL $FEF8 FFARE2
LABEL $FF16 FADE8
EQU $0F QRTR3
EQU $05 TRATH3
EQU $32 QHELD
LABEL $FF26 FFARE3
EQU $06 Q3R
EQU $02 TH3R
EQU $32 QHOLD
LABEL $FF44 FF03
EQU $0F Q4
EQU $05 TR4
EQU $30 H4
EQU $0A HR4
LABEL $FF62 FFARE4
EQU $12 Q9
EQU $0C TR9
EQU $06 TR9A
EQU $32 HELD9
LABEL $FF7A FFARE9
EQU $10 Q16
EQU $04 S16
EQU $08 EI16
LABEL $FF8F FFARE16
LABEL $C880 KAOS
COMMENT_LABEL $C880 CONTROL BYTE
LABEL $FF9F NIBBY
LABEL $FFAF DONIB
LABEL $FFA8 MORNIB
LABEL $FFDA ZXXXX
LABEL $FFC7 NIFBY
LABEL $FFCA SIDDER
LABEL $FFD6 DESEID
LABEL $FFDD *
EQU $00 *xfer
COMMENT_LINE $0000 *      This is an assembly source of the monitor ROM in the Vectrex.
COMMENT_LINE $0000 At this point I do not remember if I typed this in by hand
COMMENT_LINE $0000 from a paper listing, or had it e-mailed to me.  Probably
COMMENT_LINE $0000 the former, considering the aftertaste it left.
COMMENT_LINE $0000 VERSION 4/17/82  5:00 pm  SMN
COMMENT_LINE $0000 CRYPITIC THOUGHT "ANY PROGRAMMING IS A CHANGE" PAUL NEWELL
COMMENT_LINE $0000 (crypitic update: "Second rule of management--They don't believe the
COMMENT_LINE $0000 first rule" JS/ES)
COMMENT_LINE $0000 another cryptic thought : "The spanish inqistion is in the hands of
COMMENT_LINE $0000 its enemys!!!"  EAP
COMMENT_LINE $0000 "AND TELL A FRIEND"  GK
COMMENT_LINE $0000 "They shoot horses, don't they?"
COMMENT_LINE $0000 "A 'K' a day keeps the Smith's away." MI
COMMENT_LINE $0000 "When in dought run about scream and shout!!" LC
COMMENT_LINE $0000 "Nuts!" Brigider General McAlphy
COMMENT_LINE $0000 *******************************************************************
COMMENT_LINE $0000 THIS RUM IS FOR USE WITH THE FINAL COPY OF THE PROGRAM THIS IS THE ONE
COMMENT_LINE $0000 THAT IS ON THE FINAL CHIP AND SHOULD BE USED THUSLY.
COMMENT_LINE $0000 *******************************************************************
COMMENT_LINE $0000 * * HERE WE GO ON INTERSYSTEMS! * * *
COMMENT_LINE $0000 * * RUN-TIME ROM for HOME-ARCADE
COMMENT_LINE $0000 AUTHOR UNKNOWN, TRADITIONAL
COMMENT $0000 RAM
COMMENT $C800 MIRROR SOUND CHIP REGS FINE TUNE -A- 8 BIT
COMMENT $C801 COARSE TUNE -A- 4 BIT
COMMENT $C802 FINE TUNE -B- 8 BIT
COMMENT $C803 COARSE TUNE -B- 4 BIT
COMMENT $C804 FINE TUNE -C-
COMMENT $C805 COARSE TUNE -C-
COMMENT $C806 NOISE PER, 5 BIT
COMMENT $C807 ENABLE BAR- IN BAR/OUT: IOA,IOB
COMMENT_LINE $C808 NOISE BAR: C,B,A TONE BAR: C,B,A
COMMENT $C808 AMPL -A-, 4 BIT , 5TH BIT OVERRIDE IF=1
COMMENT $C809 AMPLITUDE -B-  " "
COMMENT $C80A AMPL -C-
COMMENT $C80B FINE TUNE ENVELOPE PER, 8 BITS
COMMENT $C80C COARSE TUNE ENVELOPE PER, 8 BIT
COMMENT $C80D ENVELOPE TYPE, 4 BIT- CONT,ATT,ALT,HOLD
COMMENT $C80E PORT A I/O
COMMENT $C80F BUTTONS INPUT TO PSG- NEW, LAST
COMMENT $C811 POS EDGE, 1 BIT PER BUTTON
COMMENT $C812 POS EDGE, 1 BYTE PER BUTTON, POS LOG
COMMENT $C81A ACCURACY REQ'D FOR POT READ, LESS IS FASTER
COMMENT_LINE $C81B ;$40=1 BIT,$20=2 BITS,$01=7 BITS,$00=8 BITS
COMMENT $C81B VALUE READ FROM POTS
COMMENT $C81F DELTA FROM LAST TEST
COMMENT $C823 # OF VECTORS IN PRESENT CHART
COMMENT $C824 IF NONZERO, CAUSES 'ZEROIT' CALL AFTER VECTOR ROUTINES
COMMENT $C825 INCRS EVERY TIME FRAM20 OR FRAM30 CALLED
COMMENT $C827 WAST INSTENITY WEVEL
COMMENT $C828 DOT DWELL TIME, SET IN INITMSC OR AFTER
COMMENT $C829 PATTERN FOR DASHED VECTORS
COMMENT $C82A FOR RASTER - CONTROLS SLEW RATE
COMMENT_LINE $C82C ;SIZE,SIZE+1=Y RATE,X RATE
COMMENT $C82C START OF STRING
COMMENT $C82F INTERVAL TIMERS
COMMENT $C830 COUNT DOWN TO 0 PER FRAME IF 'DEKR' CALLED
COMMENT $C834 FOR COMPAS ROUTINE
COMMENT $C835 "
COMMENT $C836 "
COMMENT $C837 VALUE,OVERFLOW
COMMENT $C83D REFRESH VALUE, INITMSC SETS TO MSEC20
COMMENT_LINE $C83F - - - - - REGS FOR TUNE PLAYING AND SOUND EFFECTS - - - - -
COMMENT $C83F ENVELOPE TYPE - FOR REQOUT ROUTINE
COMMENT $C840 TUNE ENVELOPE- MSB (INVERTED ORDER OF REG0-D)
COMMENT $C841 "    "       LSB
COMMENT $C842 LEVEL- C
COMMENT $C843 LEVEL- B
COMMENT $C844 LEVEL- A
COMMENT $C845 ENABLES- TONES / NOISE / I-O
COMMENT $C846 TUNE NOISE- 5 BIT
COMMENT $C847 TUNE C- MSB
COMMENT $C848 "   "  LSB
COMMENT $C849 TUNE B- MSB
COMMENT $C84A "   "  LSB
COMMENT $C84B TUNE A- MSB
COMMENT $C84C "  "  LSB
COMMENT $C84D BASE TABLE 2OR NOTES USUALLY=NOTES
COMMENT $C84F FOR TUNE PLAYER USE
COMMENT $C85A VIBRATO
COMMENT $C861 FREQ BEFORE VIBE
COMMENT_LINE $C867 - - - - - REGS FOR SOUND EFFECTS - - - - -
COMMENT $C867 GAME-SOUNDS INTERFACE
COMMENT $C868 LAST 'SATUS' VALUE
COMMENT $C869 ", EXPLOSION TYPE
COMMENT $C86A TIMES HOLD IN BACKGROUND SOUND
COMMENT $C871 FIRING STATE COUNTER
COMMENT $C872 POSITIVE EDGE OF 'SATUS'
COMMENT $C873 NEGATIVE EDGE OF 'SATUS'
COMMENT $C874 BACKGROUND FREQ 1
COMMENT $C876 " SEQUENCER
COMMENT $C877 EXPLO SEQ
COMMENT $C878 EXPL SPECTR
COMMENT $C879 # PLAYERS IN GAME
COMMENT $C87A GAME # OPTION
COMMENT $C87B POINTER TO 3 BYTE RANDOM #, USUALLY IS RANCID
COMMENT $CBEB TITLE PAGE HIGH SCORE
COMMENT $CC00 I/O
COMMENT_LINE $D010 - - - - - - RESET VECTORS - - - - - - -
COMMENT $FFF2 RAM INDIRECT VECTORS
COMMENT $FFF4 NMI AND SWI HANDLED BY -MAID-
COMMENT $FFFA NOT IN MAID
COMMENT $FFFC NOT IN MAID
COMMENT_LINE $10000 - - - - - - PROGRAM MATERIAL - - - - - -
COMMENT $F000 AT RESET
FORCE_SYMBOL $F000 STACK
COMMENT $F004 BRING UP HWARE, BRANCH IF WARM <----
FORCE_SYMBOL $F004 INITALL
COMMENT $F007 CHECK WARM OR CLOD BOOT
FORCE_NO_SYMBOL $F007
FORCE_SYMBOL $F00A JRES
COMMENT $F010 START COLD BOOT. CONSISTS OF:
FORCE_SYMBOL $F010 JRES
COMMENT $F013 1) PLAY STARTUP TUNE 'VCTRX'
FORCE_SYMBOL $F013 LEG
COMMENT_LINE $F016 ;   DISPLAY START MESSAGE
COMMENT_LINE $F016 ;2) TIMEOUT 13 SEC INTO WARM BOOT
FORCE_SYMBOL $F016 HEIGH
COMMENT $F019 CLR HI SKOR IF COLD
FORCE_SYMBOL $F019 SCLR
COMMENT $F01C SOUND
FORCE_SYMBOL $F01C DPRAM
FORCE_SYMBOL $F01F FRAME
COMMENT $F021 WAIT FOR START OF TUNE
FORCE_NO_SYMBOL $F021
COMMENT $F027 (B MUST BE POS)
FORCE_SYMBOL $F027 TSTAT
FORCE_NO_SYMBOL $F02A
FORCE_SYMBOL $F02C DABLE
FORCE_SYMBOL $F031 DASH
FORCE_NO_SYMBOL $F033
COMMENT $F035 PREPARE DASH LOOP
FORCE_SYMBOL $F035 ZGO
COMMENT $F037 WILL 3TART IF TSTAT=POS NZRO
FORCE_SYMBOL $F037 VCTRX
FORCE_SYMBOL $F03A REPLAY
FORCE_SYMBOL $F03D FRAM20
FORCE_SYMBOL $F040 REQOUT
FORCE_SYMBOL $F043 INTMAX
COMMENT $F046 BLINK TITLE
FORCE_SYMBOL $F049 MCOLD
FORCE_NO_SYMBOL $F04C
FORCE_NO_SYMBOL $F050
FORCE_SYMBOL $F052 TEXSIZ
COMMENT $F055 DISPLAY TITLE BLOCK
FORCE_SYMBOL $F055 DOSH
FORCE_SYMBOL $F058 POSIT2
FORCE_NO_SYMBOL $F05B
FORCE_SYMBOL $F05D DASHEL
FORCE_SYMBOL $F060 ZGO
FORCE_SYMBOL $F065 FRAME
COMMENT $F068 FOR 10 SEC TIMEOUT
FORCE_NO_SYMBOL $F068
FORCE_SYMBOL $F06C DPRAM
FORCE_NO_SYMBOL $F06F
FORCE_SYMBOL $F071 DASH
FORCE_SYMBOL $F073 SECRET
COMMENT $F076 FOR LEGAL
FORCE_SYMBOL $F076 COSINE
FORCE_SYMBOL $F078 FRAME
FORCE_SYMBOL $F07C CARTS
FORCE_SYMBOL $F07F SECRET
COMMENT $F082 IGNORE DATE, WHERE B=5,4,3,2
FORCE_NO_SYMBOL $F082
COMMENT $F084 TEST FOR CART PRESENT
FORCE_NO_SYMBOL $F08A
FORCE_NO_SYMBOL $F08E
FORCE_SYMBOL $F092 INHOUS
COMMENT $F09A INDICATE CART SELECTED
FORCE_SYMBOL $F09A COSINE
COMMENT $F09E PICK UP TUNE START
FORCE_SYMBOL $F09E TSTAT
FORCE_SYMBOL $F0A0 SINE
FORCE_NO_SYMBOL $F0A2
COMMENT $F0A4 GAME TITLE LOOP
FORCE_SYMBOL $F0A4 DPRAM
COMMENT $F0A7 SET LEAGL SIZ
FORCE_NO_SYMBOL $F0A7
FORCE_SYMBOL $F0AA SIZRAS
FORCE_SYMBOL $F0AC REPLAY
FORCE_SYMBOL $F0AF FRAM20
FORCE_SYMBOL $F0B2 REQOUT
FORCE_SYMBOL $F0B5 INTMAX
FORCE_NO_SYMBOL $F0B8
FORCE_SYMBOL $F0BB COSINE
COMMENT $F0BE DISPLAY LEGAL MESS
FORCE_SYMBOL $F0BE POSDRAS
FORCE_SYMBOL $F0C1 LEG
COMMENT $F0C4 NOT ON COLD BOOT
FORCE_SYMBOL $F0C7 HEIGH
COMMENT $F0CA BE SURE DELIM IN PLACE
FORCE_NO_SYMBOL $F0CA
COMMENT $F0CC START HIGH SCORE DISPLAY
FORCE_NO_SYMBOL $F0CC
FORCE_SYMBOL $F0CF POSDRAS
COMMENT $F0D2 GAME TEXT
FORCE_SYMBOL $F0D2 SINE
FORCE_NO_SYMBOL $F0D5
FORCE_SYMBOL $F0D7 TEXSIZ
COMMENT $F0DA WAIT FOR TUNE END
FORCE_SYMBOL $F0DA TSTAT
COMMENT $F0DF WAIT AT LEAST 2.5 SEC
FORCE_SYMBOL $F0DF FRAME
FORCE_NO_SYMBOL $F0E2
COMMENT $F0E7 OFF TO CART OR SCHWEEPEH
FORCE_NO_SYMBOL $F0E7
COMMENT $F0E9 POSITION OF BLOCK
COMMENT $F0EB (DASHED LINES)
COMMENT $F0F3 SMALLER DASHES, OPPOSTIEE DIR
COMMENT $F0FD FOR MOVIE PATTERN
COMMENT $F10C DUBL INTENSITY VECTREX
COMMENT $F126 SECND
COMMENT $F14B END OF TEXT PACKET
COMMENT $F14C DO ONCE <----
COMMENT $F14E INIT PIA
FORCE_NO_SYMBOL $F14E
FORCE_SYMBOL $F151 BPORTD
FORCE_NO_SYMBOL $F153
FORCE_SYMBOL $F156 BPORT
COMMENT $F158 SR=SHIFT OUT FAST,T1=ONE SHOT,T2=TIMED INTERRUPT
COMMENT $F15B SETUP TIMERS
FORCE_SYMBOL $F15B ACR
COMMENT $F15D VEC TIM
FORCE_SYMBOL $F15D T1LOLC
FORCE_SYMBOL $F15F ZEROIT
COMMENT $F162 RETURNS FROM THERE
COMMENT $F164 OTHER STUFF TO INIT IF YOU WANT <----
FORCE_SYMBOL $F168 REG0
FORCE_SYMBOL $F16B CLRSOM
FORCE_SYMBOL $F16E RANCID
FORCE_SYMBOL $F171 SEED
COMMENT $F173 UNLOCK RANDOM
FORCE_SYMBOL $F173 RANCID
FORCE_NO_SYMBOL $F177
FORCE_SYMBOL $F179 DWELL
FORCE_SYMBOL $F17B MSEC20
COMMENT $F17E SETUP FOR 20 MSEC FRAME RATE
FORCE_SYMBOL $F17E XMSEC
FORCE_NO_SYMBOL $F180
FORCE_SYMBOL $F183 DPOT0
COMMENT $F185 SETUP FOR PBANG
FORCE_NO_SYMBOL $F185
FORCE_SYMBOL $F188 DPOT2
COMMENT $F18B FOR LAZY INIT <----
FORCE_SYMBOL $F18F INITPSG
COMMENT $F192 INCR FRAME (16 BIT), WAIT FOR 'XMSEC' FRAME EGDE <----
FORCE_SYMBOL $F192 FRAME
FORCE_NO_SYMBOL $F195
FORCE_SYMBOL $F197 FRAME
FORCE_NO_SYMBOL $F19C
FORCE_SYMBOL $F19E IFR
COMMENT $F1A2 LOW BYTE,HI- INIT TIME <----
FORCE_SYMBOL $F1A2 XMSEC
COMMENT $F1A5 RESET IFR BIT 5,START FRAME TIMER
FORCE_SYMBOL $F1A5 T2LOLC
COMMENT $F1A7 KEEP POWER UP, RETURN FROM THERE
FORCE_SYMBOL $F1A7 DEFLOK
COMMENT $F1AA SET DP REG TO $D0 <----
FORCE_NO_SYMBOL $F1AA
COMMENT $F1AF SET DP REG TO $C8
FORCE_NO_SYMBOL $F1AF
COMMENT $F1B4 ENTRY FOR 'INPUTT' WITH UN-BOUNCE MASK <----
FORCE_SYMBOL $F1B4 TRIGGR
FORCE_SYMBOL $F1B7 TRIGGR
COMMENT $F1BA READ KEYS FROM PSG <----
FORCE_SYMBOL $F1BA KEY0
COMMENT $F1BD SAVE IN 'TRIGGR' NEG LOG
COMMENT $F1BF SAVE LAST READING IN 'TRIGGR'+1
COMMENT $F1C1 EDGE DETECT, POS LOG IN 'HEDGES'
FORCE_NO_SYMBOL $F1C1
COMMENT $F1C3 FOR EASY TEST OF KEY EDGE, TST KEY0 THRU KEY7
FORCE_SYMBOL $F1C3 APORT
COMMENT $F1C5 NON ZERO EDGE IS VALID
FORCE_NO_SYMBOL $F1C5
FORCE_SYMBOL $F1C8 BPORT
COMMENT $F1CB SETUP ADDR
FORCE_SYMBOL $F1CB BPORT
COMMENT $F1CD INPUT TO PIA
FORCE_SYMBOL $F1CD APORTD
FORCE_NO_SYMBOL $F1CF
COMMENT $F1D2 READ FROM PSG
FORCE_SYMBOL $F1D2 BPORT
FORCE_SYMBOL $F1D5 APORT
COMMENT $F1D7 MAKE POS LOG
COMMENT $F1D8 PUT IN MEMRY
COMMENT $F1DA COMPLETE READ CYCLE
FORCE_SYMBOL $F1DA BPORT
FORCE_NO_SYMBOL $F1DC
COMMENT $F1DE BACK TO OUTPUT
FORCE_SYMBOL $F1DE APORTD
COMMENT $F1E0 0= KEY PRESSED AFTER COMA
COMMENT $F1E1 BEGIN POS EDGE DEBOUNCE
COMMENT $F1E4 DEEGDED VALUE
COMMENT $F1E8 LOAD 8 BYTES FOR EASY LOGIC
FORCE_NO_SYMBOL $F1E8
FORCE_NO_SYMBOL $F1EC
COMMENT $F1F3 FINISH KEY INPUTz
COMMENT $F1F5 READ UP TO 4 POTS, SAR STYLE <----
FORCE_SYMBOL $F1F5 LIST
COMMENT $F1F8 QUICK READ UP TO 4 POTS <----
FORCE_SYMBOL $F1F8 DPOT0
COMMENT $F1FB ENABLE EACH READ WITH NONZERO VALUE IN DPOT0-3
COMMENT $F204 'LIST' WAS USED FOR BANG/SAR FLAG
FORCE_NO_SYMBOL $F204
FORCE_NO_SYMBOL $F206
COMMENT $F208 FOR CLEAN S/H LATER
FORCE_SYMBOL $F208 PORT
COMMENT $F20B 6UX CODE FROM DPOT0-3
FORCE_SYMBOL $F20B PORT
FORCE_SYMBOL $F20D DAC
FORCE_SYMBOL $F20F PORT
FORCE_NO_SYMBOL $F211
COMMENT $F216 USE TO FLAG BANG OR SAR
FORCE_SYMBOL $F216 LIST
COMMENT $F219 GO TO SAR
FORCE_NO_SYMBOL $F21B
FORCE_SYMBOL $F21D PORT
COMMENT $F21F FIRST TEST > OR < 0
FORCE_SYMBOL $F21F PORT
COMMENT $F223 PLUS: CHECK MID-RANGE
FORCE_NO_SYMBOL $F223
FORCE_SYMBOL $F225 DAC
FORCE_SYMBOL $F227 PORT
COMMENT $F229 VALID IF ABOVE MIDDLE POS VALUE
COMMENT $F22D MINUS
FORCE_NO_SYMBOL $F22D
FORCE_SYMBOL $F22F DAC
FORCE_SYMBOL $F231 PORT
COMMENT $F236 PUTS IN POT0-3
COMMENT $F238 END OF ROUTINE - - - - --
COMMENT $F23A FIRST LINE OF SAR, ENTER BELOW
FORCE_SYMBOL $F23C DAC
FORCE_SYMBOL $F23E DAC
COMMENT $F240 BEGIN SAR - - - - - -
FORCE_NO_SYMBOL $F240
COMMENT $F242 TEST COMP
FORCE_SYMBOL $F242 PORT
FORCE_SYMBOL $F248 DAC
FORCE_SYMBOL $F24A DAC
FORCE_SYMBOL $F24D POTRES
COMMENT $F252 SAVE AND GO ON
FORCE_SYMBOL $F252 DAC
COMMENT $F254 END OF SAR FOR 'POTS4'
COMMENT_LINE $F256 ;WRITES B DATA TO A ADDRESS OF AY3-ETC <----
COMMENT $F256 USES X REG. A AND X REGS DO NOT CHANGE
FORCE_SYMBOL $F256 REG0
COMMENT_LINE $F259 ;USE THIS ENTRY IF X ALREADY LOADED <----
COMMENT $F259 STORE IN MIRROR RAM
FORCE_SYMBOL $F25B APORT
COMMENT $F25D CODE FOR ADDR LATCH
FORCE_NO_SYMBOL $F25D
FORCE_SYMBOL $F25F BPORT
FORCE_NO_SYMBOL $F261
COMMENT $F263 LATCH ADDRESS TO PSG
FORCE_SYMBOL $F263 BPORT
COMMENT $F265 GET A REG BACK
FORCE_SYMBOL $F265 APORT
FORCE_SYMBOL $F267 APORT
FORCE_NO_SYMBOL $F269
COMMENT $F26B LATCH DATA
FORCE_SYMBOL $F26B BPORT
FORCE_NO_SYMBOL $F26D
FORCE_SYMBOL $F26F BPORT
COMMENT $F271 EXITS WITH ADDRESS STILL IN 'A'
COMMENT $F272 INIT    SOUND CHIP ALL REGS=0 <----
FORCE_NO_SYMBOL $F272
FORCE_SYMBOL $F27A IREQ
COMMENT $F27D SENDS STREAM TO PSG, U REG POINTER <----
FORCE_SYMBOL $F27D REG0
COMMENT $F280 FORMAT- PSG ADRS, PSG DATA ETC.
COMMENT $F282 DELIMITER IS PSG ADRS= NEGATIVE
COMMENT $F284 ENTER IF X REG=#REG0 <----
COMMENT $F289 SENDS REQ DATA TO PSG <----
FORCE_SYMBOL $F289 REG0
COMMENT $F28C COMPARES FIRST WITH REG
FORCE_SYMBOL $F28C REQ0
COMMENT $F28F SENDS OUT 14 REGS
FORCE_NO_SYMBOL $F28F
COMMENT $F291 STORE INVERTED FOR SANITY
COMMENT $F293 CALL AFTER ALL PSG FIDDLING
COMMENT_LINE $F29D - - - - - - - VECTOR WRITING ROUTINES - - - - - - - - - - - --
COMMENT $F29D SET INTENSITY TO QTR LEVEL <----
FORCE_NO_SYMBOL $F29D
COMMENT $F2A1 SET INTENSITY TO HALF LEVEL <----
FORCE_NO_SYMBOL $F2A1
COMMENT $F2A5 SET TO 3/4 LEVEL <----
FORCE_NO_SYMBOL $F2A5
COMMENT $F2A9 SET INTENS TO MAX LEVEL <----
FORCE_NO_SYMBOL $F2A9
COMMENT $F2AB SET INTENS TO 'A' LEVEL- USE 0-7F <----
FORCE_SYMBOL $F2AB DAC
FORCE_SYMBOL $F2AD TENSTY
FORCE_NO_SYMBOL $F2B0
FORCE_SYMBOL $F2B3 PORT
FORCE_SYMBOL $F2B5 PORT
COMMENT $F2B7 NOP
FORCE_SYMBOL $F2B7 PORT
FORCE_NO_SYMBOL $F2B9
COMMENT $F2BB LEAVE 4052 AT ADDRESS 0
FORCE_SYMBOL $F2BB PORT
COMMENT $F2BE ONE DOT, IF B HAS HOLD TIME <----
FORCE_SYMBOL $F2BE DWELL
COMMENT $F2C1 DRAWS ONE DOT INDEXED BY X <----
COMMENT $F2C3 DRAWS ONE DOT ACCORDING TO A,B <----
COMMENT $F2C5 TURNS VIDEO ON FOR DOT <----
FORCE_NO_SYMBOL $F2C5
FORCE_SYMBOL $F2C7 SR
FORCE_SYMBOL $F2C9 DWELL
COMMENT $F2CD HOLD FOR INTENSITY
FORCE_SYMBOL $F2CF SR
FORCE_SYMBOL $F2D2 LIST
COMMENT $F2D5 2 BYTE/ENTRY DOT PACKAGES, USES 'LIST' <----
FORCE_SYMBOL $F2D7 LIST
COMMENT $F2DE DRAWS DOT, USES PACKET FORMAT <----
COMMENT $F2E0 ENDS THERE
COMMENT $F2E4 FINISHED WHEN CONTROL BYTE=01
COMMENT $F2E6 CALL TO KEEP POWER ON
FORCE_SYMBOL $F2E6 FALWEL
COMMENT $F2E9 SUPER LONG SATURATED KEEP ALIVE PULSE
FORCE_SYMBOL $F2EB ZERO_
COMMENT $F2F0 ENDING
COMMENT $F2F2 REL POS IF X REG POINTS TO 16 BIT DATA (WIDE) <----
FORCE_SYMBOL $F2F2 SCAL1X
COMMENT $F2F4 FORCES TO 1X SCALE
FORCE_SYMBOL $F2F4 T1LOLC
FORCE_NO_SYMBOL $F2F6
FORCE_NO_SYMBOL $F2F8
COMMENT $F2FC REL POS IF IN D REG, CHG TO NORMAL SCALE <----
FORCE_SYMBOL $F2FC DAC
COMMENT $F300 DEFINED IN BEGINNING
FORCE_SYMBOL $F300 SCAL1X
FORCE_SYMBOL $F302 T1LOLC
FORCE_SYMBOL $F304 PORT
COMMENT $F308 REL POSITION VECTORS- 2X SCALE
FORCE_SYMBOL $F308 SCAL2X
COMMENT $F30C NORMAL SCALE <----
FORCE_SYMBOL $F30C SCAL1X
COMMENT $F30E IF 'B' HAS TIMER LENGTH <----
FORCE_SYMBOL $F30E T1LOLC
COMMENT $F310 RELATIVE POS VECTOR- IF TIMER SET <----
COMMENT $F312 IF ACCUMS AND TIMER ARE LOADED <----
FORCE_SYMBOL $F312 DAC
COMMENT $F314 BEGIN SAMPLE
FORCE_SYMBOL $F314 PORT
FORCE_SYMBOL $F318 UNZERO
FORCE_SYMBOL $F31A PPCR
COMMENT $F31C SURE VID OFF
FORCE_SYMBOL $F31C SR
COMMENT $F31E Y LOADED
FORCE_SYMBOL $F31E PORT
COMMENT $F320 X VALUE
FORCE_SYMBOL $F320 DAC
COMMENT $F322 START RAMP
FORCE_SYMBOL $F322 T1HOC
COMMENT $F324 7 GET Y,X BACK TO FIGURE DELAY
COMMENT $F326 37
FORCE_SYMBOL $F326 ABSVAL
COMMENT $F329 5
COMMENT $F32B 5 OR TOGETHER
COMMENT $F32D 2
FORCE_NO_SYMBOL $F32D
COMMENT $F32F 2
FORCE_NO_SYMBOL $F32F
COMMENT $F331 3 IF VOLTAGES LOW SKIP DELAY
COMMENT $F333 2
FORCE_NO_SYMBOL $F333
COMMENT $F335 3
COMMENT $F337 2
FORCE_NO_SYMBOL $F337
COMMENT $F339 3
COMMENT $F33B 2
FORCE_NO_SYMBOL $F33B
COMMENT $F33D 2 ENDING DELAY FOR VOLTAGES OVER $40
FORCE_SYMBOL $F33D IFR
COMMENT $F33F 3
COMMENT $F341 2
COMMENT $F342 3
COMMENT $F344 5
COMMENT $F345 4
FORCE_SYMBOL $F345 IFR
COMMENT $F347 3
COMMENT $F349 IF NO EXTRA DELAY-
COMMENT $F34A LEAD IN TO ZEROIT, SETS DP TO I/O <----
FORCE_SYMBOL $F34A DPIO
COMMENT $F34F CAUSE ZEROIT IF 'ZGO' NONZERO <----
FORCE_SYMBOL $F34F ZGO
COMMENT $F354 VIDEO OFF, RETURN TO CENTER,SET ZERO REF <----
FORCE_SYMBOL $F354 ZERO
FORCE_SYMBOL $F357 PPCR
FORCE_SYMBOL $F359 SR
COMMENT $F35B SET ZERO REF ONLY <----
FORCE_NO_SYMBOL $F35B
FORCE_SYMBOL $F35E DAC
FORCE_SYMBOL $F360 PORT
FORCE_SYMBOL $F362 PORT
COMMENT $F364 (NOP) FOR S/H TIME
FORCE_SYMBOL $F364 PORT
FORCE_NO_SYMBOL $F366
COMMENT $F368 LEAVE 4052 AT 0 ADDRESS
FORCE_SYMBOL $F368 PORT
COMMENT $F36B VID OF, RET CENTER, NOT SET ZERO REF <----
FORCE_SYMBOL $F36B ZERO
FORCE_SYMBOL $F36E PPCR
FORCE_SYMBOL $F370 SR
COMMENT $F373 GET RASTER SIZE, POSITION BY U REG, JMP TO RASTUR <----
FORCE_SYMBOL $F375 SIZRAS
COMMENT $F378 PICK UP INDEUED POSITION, GO TO RASTUR <----
COMMENT $F37A POSITION BY A,B, GO TO RASTUR <----
FORCE_SYMBOL $F37A POSITD
FORCE_SYMBOL $F37D DEL28
FORCE_SYMBOL $F380 RASTUR
COMMENT $F385 REPEAT CALLS TO SIZPRAS, 0=END BYTE <----
FORCE_NO_SYMBOL $F385
COMMENT $F38C REPEAT CALLS TO POSNRAS, 0=END BYTE <----
FORCE_NO_SYMBOL $F38C
COMMENT_LINE $F391 TO SHOW NUMBER OF SHIPS
COMMENT_LINE $F391 INPUT A : ASCII CODE OF SYMBOL   INPUT B : NUMBER - NOT THE ASCII CODE
COMMENT_LINE $F391 :        ( 0-9 SHOW AS  SUCH ,OTHERE SHOW INFINITEE
COMMENT_LINE $F391 INPUT X POINTS AT/HOLDS POSITION :
COMMENT_LINE $F391 :
COMMENT_LINE $F391 USES WHATEVER IS IN T1 AND SIZRAS ` 2: ` ` ` ` ' ' '' ` ` ` ' ' ' '
COMMENT_LINE $F391 :
COMMENT $F391 <------------:------------- IF X POINTS AT POSITION
FORCE_NO_SYMBOL $F391
COMMENT_LINE $F393 :
COMMENT $F393 <--------------:----------- IF X HOLDS POSITION
COMMENT $F395 *                          :
FORCE_NO_SYMBOL $F395
COMMENT $F399 SHIP SYMBOL,DELIMITER
FORCE_NO_SYMBOL $F39D
FORCE_NO_SYMBOL $F3A1
FORCE_NO_SYMBOL $F3A3
FORCE_NO_SYMBOL $F3A5
COMMENT $F3A7 NUMBER,DASH
COMMENT $F3A9 POSITION
COMMENT $F3AB EXIT FROM THERE - ALL REGISTER ? ON EXIT
COMMENT_LINE $F3AD USES 16 BYTES UNDER STACK - HOW LOW CAN YOU GET
COMMENT_LINE $F3AD SCORED LDY     #SEG7   DRAWS SCORE IN 7 SEGMENT FASHION <----
COMMENT_LINE $F3AD LDA     SIZSCR  TIME FOR THE VECTORS
COMMENT_LINE $F3AD STA     T1LOLC
COMMENT_LINE $F3AD DONDIG LDA     0,U+    U REG POINTS TO LSD OF SCORE- BCD
COMMENT_LINE $F3AD BMI     ZEROIT  WILL END THERE
COMMENT_LINE $F3AD LDA     A,Y
COMMENT_LINE $F3AD LDB     #1      B USED FOR LOOP CTR
COMMENT_LINE $F3AD STD     SCORET
COMMENT_LINE $F3AD LDX     #DRSEG7
COMMENT_LINE $F3AD BRA     SLORED
COMMENT_LINE $F3AD STORED ASL     SCORET+1
COMMENT_LINE $F3AD BEG     DONDIG
COMMENT_LINE $F3AD LDB     SCORET+1
COMMENT_LINE $F3AD SLORED BITB    SCORET
COMMENT_LINE $F3AD BEQ     SCORBL
COMMENT_LINE $F3AD BSR     DIFFY
COMMENT_LINE $F3AD BRA     STORED
COMMENT_LINE $F3AD SCORBL BSR     DUFFY
COMMENT_LINE $F3AD BRA     STORED
COMMENT $F3AD <----
COMMENT $F3B1 ALL THESE SAME AS DIFFY ENTRIES BUT FIRST LINE BLANK <----
FORCE_SYMBOL $F3B1 T1LOLC
COMMENT $F3B5 <----
COMMENT $F3B7 <----
FORCE_SYMBOL $F3B7 T1LOLC
COMMENT $F3B9 "   "     "    BUT HAS A LIST VALUE <----
FORCE_SYMBOL $F3B9 LIST
COMMENT $F3BC SAME AS 'DIFFY', FIRST LINE BLANK <----
FORCE_NO_SYMBOL $F3BC
COMMENT $F3BE SAME AS 'DIFFAB' "     "    "     <----
FORCE_SYMBOL $F3BE DAC
FORCE_SYMBOL $F3C0 PORT
FORCE_NO_SYMBOL $F3C2
FORCE_SYMBOL $F3C5 PORT
FORCE_SYMBOL $F3C7 DAC
FORCE_NO_SYMBOL $F3C9
COMMENT $F3CE ENTRY IF LIST VALUE INDEXED
COMMENT $F3D2 ENTRY IF 'B' HAS TIMER VALUE <----
FORCE_SYMBOL $F3D2 T1LOLC
COMMENT $F3D6 ENTER IF #VECTORS, SIZE IF INDEXED <----
COMMENT $F3D8 IF 'B' HAS TIME VAL AND 'A' HAS #VECTORS-1 <----
FORCE_SYMBOL $F3D8 T1LOLC
COMMENT $F3DA ENTRY IF 'A' HAS #VECTORS-1 <----
FORCE_SYMBOL $F3DA LIST
COMMENT_LINE $F3DD ;DIFFY ROUTINE LEAVES 'LIST'=0
COMMENT $F3DD ENTRY FOR 2 BYTE/ENTRY VECTOR DRAWER <----
FORCE_NO_SYMBOL $F3DD
COMMENT $F3DF IF ACCUMS ARE VALID <----
FORCE_SYMBOL $F3DF DAC
COMMENT $F3E1 DIFFY LEAVES 'LIST'=0
FORCE_SYMBOL $F3E1 PORT
COMMENT $F3E3 WANT TIME DELAY HERE
FORCE_NO_SYMBOL $F3E3
FORCE_SYMBOL $F3E6 PORT
FORCE_SYMBOL $F3E8 DAC
FORCE_NO_SYMBOL $F3EA
FORCE_SYMBOL $F3ED SR
COMMENT $F3EF START RAMP
FORCE_SYMBOL $F3EF T1HOC
FORCE_NO_SYMBOL $F3F1
FORCE_SYMBOL $F3F4 IFR
COMMENT $F3F8 MOUSE LIVES
FORCE_SYMBOL $F3F9 SR
FORCE_SYMBOL $F3FB LIST
COMMENT $F3FF PUT BACK TO FEB19 VERSION IF CRT LAG PERMITS
FORCE_SYMBOL $F401 ZEGO
COMMENT $F404 ENTRY IF WANT 2X TIMING, AND NOT SET UP <----
FORCE_SYMBOL $F404 SCAL2X
COMMENT $F408 ENTRY IF WANT 1X " " " <----
FORCE_SYMBOL $F408 SCAL1X
COMMENT $F40C PICK UP TIMER INDEXED <----
COMMENT $F40E ENTRY IF B HAS TIMER VALUE <----
FORCE_SYMBOL $F40E T1LOLC
COMMENT $F410 ENTRY POINT HERE IF T1LOLC VALID <----
FORCE_NO_SYMBOL $F410
FORCE_SYMBOL $F412 DAC
FORCE_SYMBOL $F414 PORT
COMMENT $F416 PICK UP VIDEO ENABLE
FORCE_NO_SYMBOL $F416
FORCE_NO_SYMBOL $F418
COMMENT $F41A Y S/H
FORCE_SYMBOL $F41A PORT
COMMENT $F41C SETUP X
FORCE_SYMBOL $F41C DAC
COMMENT $F41E VID CONTROL
FORCE_SYMBOL $F41E SR
COMMENT $F420 START RAMP- FOR CRT PUT THIS BEFORE 'STB SR'
FORCE_SYMBOL $F420 T1HOC
FORCE_NO_SYMBOL $F422
FORCE_SYMBOL $F425 IFR
COMMENT $F429 MOUSE DELAY
FORCE_SYMBOL $F42A SR
COMMENT $F42C ANOTHER ONE?
FORCE_NO_SYMBOL $F42C
FORCE_SYMBOL $F430 ZEGO
COMMENT $F434 DASHED LINES,ENTRY IF 'A' IS #VECTORS <----
FORCE_SYMBOL $F434 LIST
COMMENT $F437 DASHED LINES, 2 BYTES PER ENTRY <----
FORCE_NO_SYMBOL $F437
FORCE_SYMBOL $F439 DAC
FORCE_SYMBOL $F43B PORT
FORCE_NO_SYMBOL $F43D
FORCE_SYMBOL $F43F PORT
FORCE_SYMBOL $F441 DAC
FORCE_SYMBOL $F443 DASH
FORCE_NO_SYMBOL $F446
COMMENT $F448 MOVE TO AFTER 'CLR T10HC' FOR CRT
FORCE_SYMBOL $F448 SR
FORCE_SYMBOL $F44A T1HOC
COMMENT $F44C EXTENDED FOR TIMING
FORCE_SYMBOL $F44C IFR
COMMENT $F44F IF MORE TANE 1 SR LOAD REQ'D
FORCE_SYMBOL $F451 SR
FORCE_SYMBOL $F453 LIST
COMMENT $F456 DO ONE MORE
COMMENT $F458 EXIT POINT IF SHORT VECTOR
FORCE_SYMBOL $F459 DASH
FORCE_SYMBOL $F45C SR
COMMENT $F45E TO PRESERVE 18 CYCLES
FORCE_SYMBOL $F45F IFR
FORCE_SYMBOL $F463 LIST
FORCE_SYMBOL $F466 SR
COMMENT $F469 TO CONTINUE
COMMENT $F46B EXIT FOR MED-LONG VECTOR
FORCE_SYMBOL $F46B ZEGO
COMMENT $F46E DASHED LINES- 3 BYTE PER VECTOR <----
FORCE_SYMBOL $F46E ZGO
FORCE_SYMBOL $F473 ZGO
COMMENT $F47A $FF ENABLES DOTTED LINE
COMMENT $F480 $00 REQUESTS BLANK LINE
FORCE_SYMBOL $F480 DUFFY
COMMENT $F488 $02 IS SOLID LINE
FORCE_SYMBOL $F488 DIFFY
COMMENT $F48D $01 DELIMIT
FORCE_SYMBOL $F48F ZGO
FORCE_SYMBOL $F492 ZEGO
COMMENT_LINE $F495 CURVY  LDD     #$8118  DRAW CURVED LINE FROM UPDATE TABLE <----
COMMENT_LINE $F495 STA     PORT
COMMENT_LINE $F495 STB     ACR     U - REG IS POINTER
COMMENT_LINE $F495 BRA     RAINY
COMMENT_LINE $F495 JELLO  STB     PORT    FORMAT- Y,ON/OFF,X,X,X
COMMENT_LINE $F495 STA     SR      0 GOES TO NEXT Y, ADDIT. 0 ENDS
COMMENT_LINE $F495 JALLO  LDA     0,U+
COMMENT_LINE $F495 BEQ     BRAINY
COMMENT_LINE $F495 STA     DAC
COMMENT_LINE $F495 BRA     JALLO
COMMENT_LINE $F495 BRAINY LDB     #$81    RAMP OFF
COMMENT_LINE $F495 STB     PORT
COMMENT_LINE $F495 STA     SR      VID OFF
COMMENT_LINE $F495 RAINY  LDA     0,U+    NEXT Y
COMMENT_LINE $F495 BEQ     JFIN    IF DONE
COMMENT_LINE $F495 STA     DAC     IF GOOD Y VAL
COMMENT_LINE $F495 DECB
COMMENT_LINE $F495 STB     PORT    BEGIN S/H
COMMENT_LINE $F495 LDD     0,U++   A=VID ENBL, B=NEXT X
COMMENT_LINE $F495 INC     PORT    Y S/H DONE
COMMENT_LINE $F495 STB     DAC
COMMENT_LINE $F495 LDB     #$01
COMMENT_LINE $F495 BRA     JELLO
COMMENT_LINE $F495 JFIN   LDA     #$98
COMMENT_LINE $F495 STA     ACR     PUT BACK
COMMENT_LINE $F495 RTS
COMMENT $F495 IF U REG POINTS TO STRING <----
FORCE_SYMBOL $F495 MESAGE
COMMENT $F498 FOR STANDARD ASCII <----
COMMENT $F49B ALPHA-NUM USING ASCII CODES <----
FORCE_NO_SYMBOL $F49B
FORCE_SYMBOL $F49E DAC
COMMENT_LINE $F4A0 SUPPORTS CODES $20-$6F. $20-$5F ARE STANDARD.$80=DELIM
COMMENT $F4A0 MINIMUM 3 CHARS. CODES $60-$6F=GRAPHIC CHARS, SEE DATA
FORCE_SYMBOL $F4A0 ACR
COMMENT $F4A2 DECODE TABLE 5X7
COMMENT $F4A5 START ZEREF UPDATE
FORCE_SYMBOL $F4A5 PORT
FORCE_SYMBOL $F4A7 PORT
FORCE_NO_SYMBOL $F4A9
FORCE_SYMBOL $F4AD PORT
FORCE_SYMBOL $F4AF PORT
COMMENT $F4B1 START Y=0 SAMPLE
FORCE_SYMBOL $F4B1 PORT
COMMENT $F4B3 NOP
FORCE_SYMBOL $F4B3 REG0
COMMENT $F4B6 Y S/H FINISHED
FORCE_SYMBOL $F4B6 PORT
COMMENT $F4BB FOR HORIZ SPEED
FORCE_SYMBOL $F4BB DAC
FORCE_NO_SYMBOL $F4BD
FORCE_SYMBOL $F4C0 MESAGE
COMMENT $F4C3 START RAMP
FORCE_SYMBOL $F4C3 PORT
COMMENT $F4C5 3
COMMENT $F4C7 5- CYCLE COUNT
COMMENT $F4C9 4
FORCE_SYMBOL $F4C9 SR
COMMENT $F4CB 6
COMMENT $F4CD 3- TOTAL 18 FOR LOOP
COMMENT $F4CF 2
FORCE_NO_SYMBOL $F4CF
COMMENT $F4D1 4. STOP RAMP, TIME=18 CYCLES+18 PER CHAR
FORCE_SYMBOL $F4D1 PORT
FORCE_SYMBOL $F4D3 DAC
FORCE_NO_SYMBOL $F4D5
COMMENT $F4D7 START RETRACE 2X FWD SPEED
FORCE_SYMBOL $F4D7 PORT
COMMENT $F4D9 $50*6-$20       4
COMMENT $F4DC 3
COMMENT $F4DE 5
FORCE_NO_SYMBOL $F4DE
COMMENT $F4E1 6 CYCLES - CALCULATE #CHARS SHOWN
COMMENT $F4E3 7 - RESULT IN B IS 1+#CHARS
FORCE_SYMBOL $F4E3 MESAGE
COMMENT $F4E6 2
FORCE_NO_SYMBOL $F4E6
COMMENT $F4E8 2
COMMENT $F4E9 3
COMMENT $F4EB 2 DECR LOOP = 9 PER
FORCE_NO_SYMBOL $F4EB
COMMENT $F4ED 2
COMMENT $F4EE 2
COMMENT $F4EF 3
COMMENT $F4F1 4  WHOLE RETRACE= 45+ 9 PER B DELAY LOOP
FORCE_SYMBOL $F4F1 PORT
COMMENT_LINE $F4F3 39-12 FOR FWD OVERHEAD=27
COMMENT_LINE $F4F3 EQUIV OF 3 CHARS
FORCE_SYMBOL $F4F3 SIZRAS
COMMENT $F4F6 DO Y SHIFT
FORCE_SYMBOL $F4F6 DAC
FORCE_SYMBOL $F4F8 PORT
FORCE_NO_SYMBOL $F4FA
COMMENT $F4FE END Y SAMPLE
FORCE_SYMBOL $F4FE PORT
FORCE_SYMBOL $F500 DAC
COMMENT $F502 START RAMP
FORCE_SYMBOL $F502 PORT
COMMENT_LINE $F504 LDB     #$03
COMMENT $F504 FINISH RAMP
FORCE_SYMBOL $F504 PORT
COMMENT $F506 MOD ADDED 4/13/82
FORCE_NO_SYMBOL $F506
COMMENT $F508 END O RASTER
FORCE_NO_SYMBOL $F50A
FORCE_SYMBOL $F50C ACR
COMMENT $F50E WILL RETURN FROM THERE
FORCE_SYMBOL $F50E ZEROIT
COMMENT_LINE $F511 - - - - - - ASTD GEN - - - - - - -
COMMENT $F511 RANDOM, 3 NEW BITS <----
FORCE_NO_SYMBOL $F513
COMMENT $F515 ANSWER RETURNS IA 'A'
COMMENT $F517 RANDOM, 1 NEW BIT <----
COMMENT $F51A 'SEED' IS INDIRECT POINTER
FORCE_SYMBOL $F51A SEED
COMMENT $F51D ABOUT 50 USEC
FORCE_NO_SYMBOL $F51D
COMMENT $F51F ALL REGS INTACT BESIDES 'A'
FORCE_NO_SYMBOL $F523
FORCE_NO_SYMBOL $F526
FORCE_NO_SYMBOL $F528
FORCE_NO_SYMBOL $F52A
FORCE_NO_SYMBOL $F52F
COMMENT $F531 END OF RANDOM
COMMENT $F533 CLEAR REQ AREA, SET REQ6=#$3F <----
FORCE_NO_SYMBOL $F533
COMMENT $F535 (SOUND DRIVER)
FORCE_SYMBOL $F535 REQ0
FORCE_NO_SYMBOL $F53A
FORCE_NO_SYMBOL $F53C
COMMENT $F53F CLEARS B BYTES STARTING AT X <----
COMMENT $F542 CLEARS 256 BYTES STARTING AT $C800 <----
FORCE_NO_SYMBOL $F542
COMMENT $F545 CLEARS 256 START AT 'X' <----
FORCE_NO_SYMBOL $F545
COMMENT $F548 CLEARS 'D' BYTES START AT 'X' <----
FORCE_NO_SYMBOL $F54A
COMMENT $F550 FILL  BYTES WITH $80 START AT X <----
FORCE_NO_SYMBOL $F550
COMMENT_LINE $F552 ;B ONLY BETWEEN 0 AND $7F
COMMENT $F552 LOADS 'A' DATA INTO 'B' REGS START AT 'X' <----
COMMENT $F554 ONLY WORKS FOR 'B' BETWEEN 0 AND $7F * * * * * *
FORCE_NO_SYMBOL $F557
COMMENT $F55A 3 INTERVAL TIMERS <----
FORCE_NO_SYMBOL $F55A
COMMENT $F55E *6 ;   INTERVAL TIMERS- COUNT DOWN TO 0 ONCE PER FRAME<----
FORCE_NO_SYMBOL $F55E
COMMENT $F560 X IS STARTING TIMER, B = #
FORCE_SYMBOL $F560 X0
COMMENT $F56D DELAY 38 CYCLES INCLUDING JSR TO GET HERE <----
FORCE_NO_SYMBOL $F56D
COMMENT $F571 DEL 33 <----
FORCE_NO_SYMBOL $F571
COMMENT $F575 28 CYCLES <----
FORCE_NO_SYMBOL $F575
COMMENT $F579 20 CLOCK CYCLES <----
COMMENT $F57A GENERAL DELAY
COMMENT $F57D 13 CYCLES <----
COMMENT $F57E DECODE TO BIT POS FOR 0-7 VALUE IN ACC A <----
FORCE_SYMBOL $F57E BITTBL
COMMENT $F584 GIVES ABSOLUTE VALUE FOR A,B REGS <----
COMMENT $F585 FUDGES -128 TO +127
COMMENT_LINE $F593 - - - - - THESE USE DP REG = $C8 - - - - - - - - - -
COMMENT_LINE $F593 TAKES DELTA X AND DELTA Y IN REG B,A <----
COMMENT_LINE $F593 GIVES ANGLE CLOSEST OUT OF 64 POSSIBLE
COMMENT_LINE $F593 ANSWER IN A AND B REG (SAME) AND 'ANGLE' OF 0-$3F
COMMENT $F593 SAVE FOR RETURN
FORCE_SYMBOL $F595 ABSY
FORCE_NO_SYMBOL $F598
FORCE_SYMBOL $F59E ANGLE
FORCE_SYMBOL $F5A0 ABSY
COMMENT $F5A2 MAKE POS
COMMENT $F5A4 SET FLAG IF Y<X
FORCE_SYMBOL $F5A4 ABSY
FORCE_SYMBOL $F5A6 ABSY
COMMENT $F5AA BITS 2,1,0=X SIGN,Y SIGN, AND X>Y BIT
FORCE_SYMBOL $F5AA ANGLE
COMMENT $F5AC SWAP X,Y ID Y<X
FORCE_NO_SYMBOL $F5B2
COMMENT $F5B6 NOW IN RANGE
FORCE_SYMBOL $F5B6 ABSY
COMMENT $F5B8 INDEXED TRANSLATOR WEIRD TABLE
FORCE_SYMBOL $F5B8 ANGLE
FORCE_SYMBOL $F5BA WEIRD
COMMENT $F5BF DECODES ROWS FOR TRIANGLE LOOKUP
FORCE_SYMBOL $F5BF ROWTRI
COMMENT $F5C2 (A HAD LARGER VALUE) GET ROW LOCATION
COMMENT $F5C4 ADD IN SMALLER VALUE FOR COLUMN
FORCE_SYMBOL $F5C4 ABSX
COMMENT $F5C6 GO TO START OF FIBTBL
FORCE_NO_SYMBOL $F5C6
COMMENT $F5C8 B HAS 'ANGLE'
FORCE_NO_SYMBOL $F5C8
COMMENT $F5CA BIT WAZ SET IF ADJUST NEEDED
COMMENT $F5D0 IF Y<X
FORCE_SYMBOL $F5D3 ANGLE
COMMENT $F5D5 ANSWER IN BOTH A AND B!
FORCE_SYMBOL $F5D5 ANGLE
COMMENT $F5D7 DONE
COMMENT $F5D9 GETS COSINE OF 'A' <----
FORCE_NO_SYMBOL $F5D9
COMMENT $F5DB GETS SINE OF 'A' <---- 26-30 CYCLES
FORCE_SYMBOL $F5DB RTRIGS
COMMENT $F5DF TEST FOR NEG
FORCE_NO_SYMBOL $F5DF
FORCE_NO_SYMBOL $F5E3
FORCE_NO_SYMBOL $F5E5
COMMENT $F5E7 TEST FOR 90 DEG
FORCE_NO_SYMBOL $F5E7
COMMENT $F5EB INDICATE OVERFLOW
COMMENT $F5EE ANSWER IN D REG, A=VALUE,B=SIGN/OVERFLOW
COMMENT $F5EF GETS SINE,COSINE OF 'ANGLE' <----
FORCE_SYMBOL $F5F1 ANGLE
FORCE_SYMBOL $F5F5 SINE
FORCE_SYMBOL $F5F7 ANGLE
FORCE_SYMBOL $F5FB COSINE
COMMENT $F5FF SINGLE LINE ROT, A=X VALUE,B=ANGLE,T ASSUMED=0 <----
FORCE_NO_SYMBOL $F5FF
COMMENT $F601 SINGLE LINE ROTATE, B=ANGLE <----
FORCE_SYMBOL $F601 ANGLE
COMMENT $F603 A=Y VALUE, X ASSUMED=0 <----
FORCE_SYMBOL $F603 LEG
COMMENT $F60E Y,X COORDS IN A,B REGS AT EXIT
COMMENT $F610 'SIFFY' STYLE ROTATE, A HAS ANGLE <----
FORCE_SYMBOL $F610 ANGLE
COMMENT $F613 " ", B HAS #VECTORS-1 <----
FORCE_SYMBOL $F613 LIST
COMMENT $F616 " ", LIST,ANGLE SET
FORCE_SYMBOL $F618 DPRAM
COMMENT $F61D OTHER DETAILS SIMILAR TO 'POTATE' BELOW
COMMENT $F61F PACKET ROTATE IF ANGLE IN 'A' <----
FORCE_SYMBOL $F61F ANGLE
COMMENT $F622 PACKET ROTATE IF 'ANGLE' VALID <----
FORCE_SYMBOL $F624 DPRAM
COMMENT $F627 MINUS INDICATES POTATE AS OPPOSED TO DIFROT
FORCE_SYMBOL $F627 LIST
COMMENT $F629 X REG POINTS TO PACKET, U REG TO DESTINATION
COMMENT $F62B TEST CONTROL BYTE
COMMENT $F62F IF NOT END BYTE
FORCE_SYMBOL $F631 LIST
COMMENT $F633 ADIOS
FORCE_SYMBOL $F635 LIST
COMMENT $F637 NEXT LINE SPEC X,Y
COMMENT $F63B 1 BYTE FOR INTERMEDIATE RESULTS
FORCE_NO_SYMBOL $F63B
FORCE_NO_SYMBOL $F63D
COMMENT $F641 RESULTS IS NEW Y VAL
FORCE_NO_SYMBOL $F641
COMMENT $F643 NEW Y=YCOS(ANGLE) + XSIN(ANGLE)
FORCE_NO_SYMBOL $F649
COMMENT $F64B LEAVES X AND U POINT TO NEXT VECTOR
FORCE_NO_SYMBOL $F64F
COMMENT $F651 NEW X=XCOS(ANGLE) - SIN(ANGLE)
FORCE_SYMBOL $F653 LIST
COMMENT $F659 END OF DIFROT
COMMENT $F65B MULTS 'A' BY SINE PREV STORED <----
FORCE_SYMBOL $F65B LEG
COMMENT $F65D MULTS 'LEG' BY SINE PREV STORED <----
FORCE_SYMBOL $F65D SINE
COMMENT $F661 MULTS  'A' BT COSINE PREV STORED <----
FORCE_SYMBOL $F661 LEG
COMMENT $F663 MULTS 'LEG' BY COSINE PREV GOTTEN <----
FORCE_SYMBOL $F663 COSINE
COMMENT $F665 HOLDS SIGN,OVERFLOW BITS 7,0
FORCE_SYMBOL $F665 LAG
COMMENT_LINE $F667 WARNING NO INPUT=$80 ALLOWED
COMMENT $F667 SHOULD MULT?
FORCE_NO_SYMBOL $F667
COMMENT $F669 NO, FLIP ONLY
FORCE_SYMBOL $F66B LEG
COMMENT $F66F LEG IS INPUT VECTOR
FORCE_SYMBOL $F66F LEG
COMMENT $F673 TWO WRONGS MAKE A RITE
FORCE_SYMBOL $F673 LAG
FORCE_NO_SYMBOL $F677
COMMENT $F679 CHECK SIGN FLIP
FORCE_SYMBOL $F679 LAG
COMMENT $F67E ANSWER IN A REG
COMMENT $F67F STUFFS A+1 VALUES FROM U TO X <----
COMMENT $F683 STUFFS A VALUES FROM U TO X <----
COMMENT_LINE $F687 TUNE PLAYER- FOR THIS TO WORK, MUST ALSO CALL 'REQOUT' ONCE/FRAME
COMMENT_LINE $F687 TUNE PLAYER <----
COMMENT $F687 TO START, PUT $01 IN TSTAT
FORCE_SYMBOL $F687 TSTAT
COMMENT $F689 TSTAT= $80 DURING TUNE, =0 AT IDLE
COMMENT $F68B EXIT IF NOT GOING
COMMENT $F68D TO START TUNE <----
FORCE_SYMBOL $F68D NOTES
COMMENT $F690 TO START WITH ALTERNATE NOTE TABLE BY X REG <----
FORCE_SYMBOL $F690 DOREMI
COMMENT $F692 INIT TUNE, NOT CHANGE NOTE BASE <----
FORCE_NO_SYMBOL $F692
COMMENT $F694 INDICATE START
FORCE_SYMBOL $F694 TSTAT
COMMENT $F696 IF NEW, U SHOULD POINT TO TUNE
FORCE_SYMBOL $F698 FADE
FORCE_SYMBOL $F69C VIBE
FORCE_SYMBOL $F69E TUNE
COMMENT $F6A0 CLEAR 13 REGS, SET REQ6=$3F
FORCE_SYMBOL $F6A0 IREQ
FORCE_NO_SYMBOL $F6A3
FORCE_SYMBOL $F6A6 FADEB
FORCE_NO_SYMBOL $F6A8
FORCE_SYMBOL $F6AB TONEB
FORCE_SYMBOL $F6AD TONEC
FORCE_SYMBOL $F6AF NEWGEN
COMMENT $F6B3 REFRESH TONE AMPLITUDES
FORCE_SYMBOL $F6B3 FADEA
FORCE_NO_SYMBOL $F6B6
COMMENT $F6BA LIMIT AT $1F
FORCE_NO_SYMBOL $F6BA
COMMENT $F6C3 PLOGLAMMABLE VIBLATO
FORCE_SYMBOL $F6C3 VIBE
COMMENT $F6C5 TABLE INDIRECT 'VIBE'
FORCE_SYMBOL $F6C5 RATEA
COMMENT $F6C8 VARIED RATES
FORCE_NO_SYMBOL $F6C8
FORCE_NO_SYMBOL $F6CA
COMMENT $F6CC MOD COUNTERS
FORCE_NO_SYMBOL $F6CC
FORCE_NO_SYMBOL $F6D0
COMMENT $F6D2 DECODE TABLE BY TUNE
FORCE_NO_SYMBOL $F6D4
FORCE_NO_SYMBOL $F6DB
COMMENT $F6DF CHECK REST
FORCE_SYMBOL $F6DF RESTC
COMMENT $F6E1 BRANCH IF NOT TIMED OUT
COMMENT $F6E3 CYCLE TO NEXT TONE GEN
FORCE_SYMBOL $F6E3 NEWGEN
FORCE_NO_SYMBOL $F6E8
FORCE_SYMBOL $F6EA NEWGEN
COMMENT $F6EC PICK UP NEW NOTE
FORCE_SYMBOL $F6EC TUNE
FORCE_SYMBOL $F6F0 FADEA
FORCE_NO_SYMBOL $F6F5
COMMENT $F6F9 NOISE IS ON FOR THIS NOTE
FORCE_SYMBOL $F6F9 CRT
FORCE_SYMBOL $F6FE REQ6
FORCE_SYMBOL $F700 REQ6
FORCE_SYMBOL $F702 NEWGEN
FORCE_NO_SYMBOL $F704
FORCE_SYMBOL $F708 REQ6
FORCE_SYMBOL $F70A REQ6
FORCE_NO_SYMBOL $F70C
FORCE_SYMBOL $F70E NOISEF
FORCE_SYMBOL $F712 CRATE
FORCE_SYMBOL $F717 REQ6
FORCE_SYMBOL $F719 REQ6
FORCE_SYMBOL $F71B NEWGEN
FORCE_NO_SYMBOL $F71D
FORCE_SYMBOL $F721 REQ6
FORCE_SYMBOL $F723 REQ6
FORCE_SYMBOL $F725 NEWGEN
COMMENT $F727 INDEX FOR NOTE LOC
COMMENT $F728 POINT TO NOTES
FORCE_NO_SYMBOL $F728
COMMENT $F72A U NOW HAS PLAE TO DUMP NOTE
COMMENT $F72C STRIP OFF FLAG
FORCE_NO_SYMBOL $F72C
FORCE_SYMBOL $F72F DOREMI
COMMENT $F733 STORE NOTE VALUE
FORCE_NO_SYMBOL $F733
COMMENT $F735 ANOTHER NOTE?
FORCE_SYMBOL $F735 TUNE
FORCE_SYMBOL $F739 TUNE
COMMENT $F73C YES
COMMENT $F742 TO STOP TUNE BEFORE END <----
FORCE_SYMBOL $F742 IREQ
COMMENT $F745 PREPARE TO END
FORCE_SYMBOL $F745 TSTAT
COMMENT $F747 CC SET FOR QUICK TEST
COMMENT $F748 SET UP WAIT
FORCE_SYMBOL $F748 TUNE
FORCE_NO_SYMBOL $F74A
FORCE_SYMBOL $F74C RESTC
COMMENT $F74E GETS ADDR OF FADEOUT TABLE
FORCE_SYMBOL $F74E FADE
COMMENT $F751 FADE SPEC TONE GEN
FORCE_SYMBOL $F751 FADEA
FORCE_SYMBOL $F754 REQ3
FORCE_NO_SYMBOL $F757
COMMENT $F75B ODD OR EVEN?
FORCE_NO_SYMBOL $F75B
COMMENT $F75F DIV/2
FORCE_NO_SYMBOL $F762
COMMENT $F767 GET IGH BYTE
COMMENT $F772 *VIBRATO SECTION HERE
FORCE_SYMBOL $F775 REQ8
COMMENT $F77A USE ONLY VIBC FOR FIRST
COMMENT $F77E NEG, SHOULD SUBTRACT
FORCE_NO_SYMBOL $F782
FORCE_NO_SYMBOL $F78A
COMMENT $F794 *PLAYER OPTION MESSAGE
COMMENT $F79F *GAME OPTION MESSAGE
COMMENT $F7A9 DISPLAYS AND SETS PLAYER/GAME OPTIONS <----
FORCE_SYMBOL $F7A9 FADE
FORCE_NO_SYMBOL $F7AF
FORCE_NO_SYMBOL $F7B4
FORCE_SYMBOL $F7B6 PLAYRZ
FORCE_SYMBOL $F7B9 DPRAM
FORCE_NO_SYMBOL $F7BC
FORCE_SYMBOL $F7BF SIZRAS
COMMENT $F7C1 TO NOT GLITCH ON EDGE
FORCE_SYMBOL $F7C1 LAG
COMMENT $F7C5 ENTRY VALUES: A=MAX PLAYERS, 0=DON'T SHOW
FORCE_SYMBOL $F7C5 FRAM20
COMMENT $F7C9 B=MAX GAMES,   " "     "
FORCE_SYMBOL $F7C9 ENPUT
FORCE_SYMBOL $F7CC DEKR3
FORCE_SYMBOL $F7CF INTMAX
FORCE_SYMBOL $F7D2 PLAYRZ
COMMENT $F7D5 PLAYER MESSAGE
FORCE_SYMBOL $F7D5 MPLAY
FORCE_SYMBOL $F7DB GAMZ
FORCE_SYMBOL $F7DE MGAME
FORCE_SYMBOL $F7E4 DPRAM
COMMENT $F7E7 WAIT FOR KEY RELEASE
FORCE_SYMBOL $F7E7 LAG
FORCE_SYMBOL $F7EB TRIGGR
FORCE_SYMBOL $F7EF LAG
FORCE_SYMBOL $F7F1 X1
COMMENT $F7F3 TIMEOUT
COMMENT $F7F5 KEY0 PLAYER SEL
FORCE_SYMBOL $F7F5 X0
FORCE_SYMBOL $F7F9 KEY3
COMMENT $F7FB START KEY
FORCE_SYMBOL $F7FD KEY0
FORCE_SYMBOL $F801 PLAYRZ
COMMENT $F806 LIMIT
FORCE_SYMBOL $F806 FADE
FORCE_NO_SYMBOL $F80A
FORCE_SYMBOL $F80C PLAYRZ
FORCE_SYMBOL $F810 GAMZ
COMMENT $F814 KEY1 GAME UP
FORCE_SYMBOL $F814 KEY1
FORCE_NO_SYMBOL $F81D
COMMENT $F821 KEY2 GAME DOWN
FORCE_SYMBOL $F821 KEY2
COMMENT $F828 WRAP MINUE
FORCE_SYMBOL $F82A GAMZ
FORCE_NO_SYMBOL $F82C
COMMENT $F82E TIMEOUT PARAM
FORCE_SYMBOL $F82E X1
FORCE_SYMBOL $F831 X0
COMMENT $F835 SHOWS NUMBER AND MESSAGE FOR OPTION ABOVE <----
FORCE_SYMBOL $F835 FADEA
COMMENT $F83C TO SET CC
COMMENT $F840 SHOW NUMBER
FORCE_SYMBOL $F846 POSDRAS
COMMENT $F849 Y HELP NUMBER,MESSAGE LOC, AND MESSAGE
FORCE_SYMBOL $F84B POSNRAS
COMMENT $F84F CLEARS RASTER TYPE SCORE, 6 DIG+ 1 BYTE END <----
FORCE_NO_SYMBOL $F84F
COMMENT $F852 X IS MSD ADDRESSS
FORCE_NO_SYMBOL $F852
COMMENT $F854 SHOWS TWO ZEROS
FORCE_NO_SYMBOL $F854
FORCE_NO_SYMBOL $F856
COMMENT $F858 LEAVES X REG ALONE
FORCE_NO_SYMBOL $F858
FORCE_NO_SYMBOL $F85B
COMMENT $F85E ADDS 1 BYTE HEX IN 'A' TO SCORE <----
FORCE_NO_SYMBOL $F85E
COMMENT $F861 X POINTS TO 6 DIG ASCII STYLE SCORE
FORCE_NO_SYMBOL $F861
COMMENT $F865 BINARY -> BCD CONVERT
FORCE_NO_SYMBOL $F865
FORCE_NO_SYMBOL $F867
FORCE_NO_SYMBOL $F86D
FORCE_NO_SYMBOL $F871
FORCE_NO_SYMBOL $F873
COMMENT $F87A GOES INTO 'SADD'
COMMENT $F87C SCORE ADDING ROUTINE, 'D' HAS 4 DIG PACK BCD <----
COMMENT $F880 HERE IF DATA ON STACK
FORCE_NO_SYMBOL $F880
COMMENT $F882 X POINTS TO MSD OF 6 DIG(BYTE) SCORE
COMMENT $F883 ADDS 4 PACKED BCD DIGS(2 BYTES)
FORCE_NO_SYMBOL $F883
COMMENT $F885 DP REG NO CARE
COMMENT $F887 DOES NOT CHANGE X REG
FORCE_NO_SYMBOL $F887
FORCE_NO_SYMBOL $F88B
COMMENT $F88F *1ST AND 3RD INPUT DIGS
COMMENT $F895 MASK FROM UNPACKING
FORCE_NO_SYMBOL $F895
COMMENT $F897 SERVES AS CARRY IND
FORCE_SYMBOL $F897 LIST
FORCE_SYMBOL $F89A LIST
FORCE_NO_SYMBOL $F89F
COMMENT $F8A1 ADJUST IF JUST ZERO
FORCE_NO_SYMBOL $F8A3
COMMENT $F8A5 SET FOR CARRY
FORCE_NO_SYMBOL $F8A5
FORCE_NO_SYMBOL $F8A9
FORCE_SYMBOL $F8AB LIST
COMMENT $F8AE STORE RESULT
COMMENT $F8B0 B TICKER
FORCE_SYMBOL $F8B3 LIST
FORCE_NO_SYMBOL $F8B9
FORCE_NO_SYMBOL $F8BD
FORCE_NO_SYMBOL $F8C2
COMMENT_LINE $F8C7 WINNER                --      ENTRY VALUES:   X --> SCORE 1
COMMENT_LINE $F8C7 ======                                        U --> SCORE 2
COMMENT_LINE $F8C7 RETURN VALUES:  A = 0 -- SCORE 1 = SCORE 2
COMMENT_LINE $F8C7 A = 1 -- SCORE 1 > SCORE 2
COMMENT_LINE $F8C7 A = 2 -- SCORE 2 > SCORE 1
COMMENT_LINE $F8C7 FUNCTION:       DETERMINE THE GREATER OF TWO SCORED
COMMENT_LINE $F8C7 STROED IN ASCII (RASTER) FORM
COMMENT_LINE $F8D8 HIGHSCR       --      ENTRY VALUES:   X --> SCORE
COMMENT_LINE $F8D8 =======                               U --> HIGH SCORE
COMMENT_LINE $F8D8 RETURN VALUES:  ???
COMMENT_LINE $F8D8 FUNCTION:       UPDATE HIGH SCORE
FORCE_NO_SYMBOL $F8DA
COMMENT_LINE $F8E5 MARK'S COLLISION TEST WITH PAUL'S OFFSET PROVISION
COMMENT_LINE $F8E5 mangled together and tested 4/7/82--both routines of the use of the
COMMENT_LINE $F8E5 "U" register are needed to make the routine useful to all programmers
COMMENT_LINE $F8E5 since half the programs are absolute oriented and the other half are
COMMENT_LINE $F8E5 location oriented (the difference between stored data and calculated
COMMENT_LINE $F8E5 data)
COMMENT_LINE $F8E5 A = BOX 'Y' DIMENSION (DELTA Y)
COMMENT_LINE $F8E5 B = BOX 'X' DIMENSION (DELTA X)
COMMENT_LINE $F8E5 X = YX COORDS OF POINT TO BE TESTED
COMMENT_LINE $F8E5 Y = YX COORDS OF THE CENTER OF BOX
COMMENT_LINE $F8E5 if using the offset:
COMMENT_LINE $F8E5 OFF1BOX -- U = address of location of offset
COMMENT_LINE $F8E5 OFF2BOX -- U = actual offset
COMMENT_LINE $F8E5 if not using the offset, U = who cares
COMMENT_LINE $F8E5 RETURN VALUES -- ALL PRESERVED
COMMENT_LINE $F8E5 (hence the reason for the extra push of the center
COMMENT_LINE $F8E5 of the box so that any offset added to it will not
COMMENT_LINE $F8E5 be returned)
COMMENT_LINE $F8E5 CARRY BIT: 0 (CLEAR) IF NO COLLISION
COMMENT_LINE $F8E5 1 (SET)   IF COLLISION
COMMENT $F8E5 U REG INDEXES OFFSET <----
FORCE_SYMBOL $F8E9 BOXPOS
FORCE_NO_SYMBOL $F8EB
FORCE_NO_SYMBOL $F8ED
FORCE_SYMBOL $F8EF BOXPOS
COMMENT $F8F3 U REG CONTAINS OFFSET <----
FORCE_SYMBOL $F8F9 BOXPOS
FORCE_SYMBOL $F8FB XBOXPOS
COMMENT $F8FF TSET XOB <----
FORCE_SYMBOL $F907 BOXPOS
FORCE_SYMBOL $F909 BOXDIM
FORCE_NO_SYMBOL $F90D
FORCE_SYMBOL $F90F PNTPOS
FORCE_SYMBOL $F913 BOXPOS
FORCE_SYMBOL $F915 BOXDIM
FORCE_NO_SYMBOL $F919
FORCE_SYMBOL $F91B PNTPOS
FORCE_NO_SYMBOL $F920
FORCE_NO_SYMBOL $F924
FORCE_NO_SYMBOL $F928
COMMENT_LINE $F92E PROGRAMMABLE EXPLOSION - - - - - - - - - - !
COMMENT_LINE $F92E THE FOLLOWING ARE ENTRY VALUES BY WAY OF 'U' POINTER
COMMENT_LINE $F92E LOG ENABLES AS IN PSG BUT USES POS LOG. UP TO 3 TONES, 3 NOISE
COMMENT_LINE $F92E THE 'AXE' ROUTINE WILL NOT SCREW WITH UNCALLED REGISTERS
COMMENT_LINE $F92E 1) IF BIT7 SET, THEN LOWER 5 BITS= STEADY NOISE FREQ
COMMENT_LINE $F92E 2) IF BYTE NON-ZERO NOISE FREQ GOING DOWN
COMMENT_LINE $F92E 3) IF BYTE=0 NOISE GOING UP
COMMENT_LINE $F92E 1) IF BIT 7 SET, LOWER 4 BITS=STEADY LOUDNESS
COMMENT_LINE $F92E 2) IF BYTE NON=ZERO VOLUME GOING UP
COMMENT_LINE $F92E 3) IF BYTE=0 VOL GOING DOWN
COMMENT_LINE $F92E THE FOLLOWING ARE SCRATCH LOCATIONS
COMMENT_LINE $F92E ORG     0
COMMENT $F92E EXPLOSION SEQUENCER FOR GI-PSG <----
FORCE_SYMBOL $F92E SATUS
COMMENT $F930 EITHER GOING, NOT GOING, OR REQUEST
COMMENT_LINE $F932 DP SHOULD=$C8, USE WITH REQOUT
COMMENT $F932 REQUEST TO START EXPLOSION
FORCE_NO_SYMBOL $F932
FORCE_SYMBOL $F934 SATUS
COMMENT $F936 LOAD IN 4 PARAMETER BYTES
FORCE_SYMBOL $F936 XREQ6
FORCE_NO_SYMBOL $F939
COMMENT $F93B B HAS 'XREQ6' DATA AT END
FORCE_SYMBOL $F93B STFAUX
FORCE_SYMBOL $F941 XREQ6
FORCE_NO_SYMBOL $F943
COMMENT $F945 USE FOR VOL ENABL POS LOG
FORCE_SYMBOL $F945 BOTH
FORCE_SYMBOL $F947 XREQ6
FORCE_NO_SYMBOL $F949
COMMENT $F94B NONZERO= NOISE SELECTED
FORCE_SYMBOL $F94B N_NUM
FORCE_SYMBOL $F94D XREQ6
FORCE_NO_SYMBOL $F94F
COMMENT $F951 BIT POS FOR EACH TONE CHANNEL
FORCE_SYMBOL $F951 T_NUM
FORCE_NO_SYMBOL $F953
COMMENT $F955 BIT FOR WHICH RUMBLE
FORCE_SYMBOL $F955 T_COUNT
FORCE_NO_SYMBOL $F957
FORCE_SYMBOL $F95B XACON
COMMENT $F95D NOT GOING
COMMENT $F95F SEQUENCER
FORCE_SYMBOL $F95F X_SPEED
COMMENT $F964 PREPARE TO EXIT
FORCE_SYMBOL $F964 XACON
FORCE_SYMBOL $F968 XACON
COMMENT $F96A SCALE TO $1F RANGE
COMMENT $F96B SUITABLE FOR NOISE SPEC
COMMENT $F96C IF=0, NO NOISE ENABLED
FORCE_SYMBOL $F96C N_NUM
COMMENT $F96E SKIP THIS, JUST PUT LOUDNESS IN
FORCE_SYMBOL $F970 NOISEF
COMMENT $F972 WANT UP, DOWN, OR STEADY?
FORCE_SYMBOL $F972 N_DIR
COMMENT $F974 BIT7 SET= STEADY NOISE FREQ
COMMENT $F976 ZERO BYTE= NOISE FREQ GOING UP
COMMENT $F978 NOISE GOING DOWN
FORCE_SYMBOL $F97B NOISEF
FORCE_NO_SYMBOL $F97E
FORCE_NO_SYMBOL $F982
COMMENT $F986 STIFFEN ROLLOFF
COMMENT $F987 LOUDNESS UP, DOWN, OR STEADY?
FORCE_SYMBOL $F987 L_DIR
COMMENT $F989 IF BIT 7 SET, STEADY LOUDNESS VAL=L_DIR
COMMENT $F98B IF L_DIR=0, LOUDNESS GOING DOWN
FORCE_NO_SYMBOL $F98D
COMMENT $F991 PUTS IN 1-3 REGS CHA,B,CV
COMMENT_LINE $F993 RUMBLING TONES
FORCE_SYMBOL $F993 T_NUM
FORCE_SYMBOL $F997 T_COUNT
FORCE_NO_SYMBOL $F99C
COMMENT $F99E CYCLE THRU CHANS
FORCE_SYMBOL $F99E T_COUNT
COMMENT $F9A0 TEST BIT POS
FORCE_SYMBOL $F9A0 BITE
FORCE_SYMBOL $F9A3 T_NUM
COMMENT $F9A5 FIND IT
FORCE_SYMBOL $F9A7 T_COUNT
FORCE_SYMBOL $F9AB CHAF
COMMENT $F9AE (CAN'T USE ABX)
FORCE_SYMBOL $F9B0 RANDOM
FORCE_NO_SYMBOL $F9B3
COMMENT $F9B5 FILTER HI TONES
FORCE_NO_SYMBOL $F9B5
FORCE_NO_SYMBOL $F9BA
FORCE_NO_SYMBOL $F9BC
COMMENT $F9C0 LO BYTE TOO
FORCE_NO_SYMBOL $F9C0
FORCE_SYMBOL $F9C2 XREQ6
FORCE_SYMBOL $F9C5 REQ6
COMMENT $F9C7 KEEP ENABLED TO AVOID BUG
FORCE_SYMBOL $F9C7 REQ6
COMMENT $F9CA STUFF A,B,AND/OR C VOLS
FORCE_SYMBOL $F9CA BOTH
COMMENT $F9CC PUT LOUD VALUE IN UP TO 3 CHANNELS
FORCE_NO_SYMBOL $F9D7
COMMENT_LINE $F9DC - - - - - - - DATA TABLES - - - - - - -
COMMENT_LINE $F9E4 SEG7:          7 SEGMENT DECODER FOR SCORE DISPLAY
COMMENT_LINE $F9E4 FCB     $77,$11,$6B,$3B,$1D,$3E,$7E,$13 0-7
COMMENT_LINE $F9E4 FCB     $7F,$3F,$5F,$7C,$66,$79,$6E,$4E 8-9,A-F
COMMENT_LINE $F9E4 FCB     $00,$20,$08,$02,$0F.$78 BLANK,DASHES,SQUARES
COMMENT $F9E4 FOR 'REPLAY'
COMMENT_LINE $F9F0 DRSEG7:                DRAWS SHAPE OF 7 SEG RECTANGLE
COMMENT_LINE $F9F0 J      EQU     $40
COMMENT_LINE $F9F0 FCB     J,0,0,-J,-J,0,0,J,-J,0,0,-J,J,0,0,-J
COMMENT $F9F0 FOR POWER MONITOR
COMMENT_LINE $F9F4 5X7 CHARACTER DECODE $20 THRU $6F
COMMENT_LINE $F9F4 CHAR SET GROUPED BY ROW, TOP TO BOTTOM
COMMENT_LINE $F9F4 $20-$2F= ' !"#$%&'()*+,-./'
COMMENT_LINE $F9F4 $30-$3F= '0123456789:*<=>?'
COMMENT_LINE $F9F4 $40-$4F= '@ABCDEFGHIJKLMNO'
COMMENT_LINE $F9F4 $50-$5F= 'PQRSTUVWXYZ[\]^_'
COMMENT_LINE $F9F4 $60-$6F= W.T. CHAR SET. SEE DOC FOR PICTURES
COMMENT_LINE $F9F4 $60 = CAR
COMMENT_LINE $F9F4 $61 = UP ARROW . FOR RIGHT ARROW USE -> 2 CHARS
COMMENT_LINE $F9F4 $62 = MUSICAL NOTE
COMMENT_LINE $F9F4 $63 = DOWN ARROW. FOR LEFT ARROW USE <- 2 CHARS
COMMENT_LINE $F9F4 $64 = CIRCLE: LARGE, HOLLOW
COMMENT_LINE $F9F4 $65 = CIRCLE: LARGE, SOLID
COMMENT_LINE $F9F4 $66 = CIRCLE: SMALL, SOLID
COMMENT_LINE $F9F4 $67 = COPYRIGHT CIRCLE
COMMENT_LINE $F9F4 $68 = SPACE SHIP
COMMENT_LINE $F9F4 $69 = SPACEPERSON
COMMENT_LINE $F9F4 $6A = HAVE A NICE DAY
COMMENT_LINE $F9F4 $6B = HAVE A BAD DAY
COMMENT_LINE $F9F4 $6C = INFINITY
COMMENT_LINE $F9F4 $6D = HOLLOW SQUARE
COMMENT_LINE $F9F4 $6E = 7X8 FILL CHAR .DO NOT USE AT END OF LINE
COMMENT_LINE $F9F4 $6F = 7X7 FILL CHAR. OK AT END OF LINE
COMMENT $F9F4 ROW7
COMMENT $FA44 ROW6
COMMENT $FA94 ROW5
COMMENT $FAE4 ROW4
COMMENT $FB34 ROW3
COMMENT $FB84 ROW2
COMMENT $FBD4 ROW1
COMMENT $FC24 TRANSLATE 8 WAYS
COMMENT $FC2C FOR COMPAS ROW DECODE
COMMENT $FC36 QUICK ARC TAN LOOKUP
COMMENT $FC6D SINE TABLE- 16 ANGLES/QUADRANT
COMMENT $FC71 VALUES REPRESENT SINE*256
COMMENT_LINE $FC8D This is a table of notes (for the game melodies).
COMMENT $FC8D beginning frequency
COMMENT_LINE $FD0D This is the tune to accompany the VECTREX (?) title page.
COMMENT_LINE $FD1D This is the data table for the beginning melody of BERZERK.
COMMENT $FD21 eighth note triplets
COMMENT $FD2D qtr. note triplet
COMMENT $FD31 chord
COMMENT $FD35 chord
COMMENT_LINE $FD43 THIS AREA DELETED
COMMENT $FD4B final chord in arpeggio form
COMMENT $FD79 -1,-2,-1
COMMENT_LINE $FD81 This is the beginning snare-drum pattern for ARMOR ATTACK. It uses
COMMENT_LINE $FD81 the noise channel only.
COMMENT $FDA3 repeat
COMMENT_LINE $FDD3 This is the data table for the beginning melody of SCRAMBLE.
COMMENT $FDD7 first measure (qtr. and sixteenth notes)
COMMENT $FDED all eighth notes until end of tune
COMMENT $FE05 third measure
COMMENT $FE1D last measure
COMMENT_LINE $FE38 This is the data table for the beginning melody of SOLAR QUEST
COMMENT $FE3C all quarter notes
COMMENT $FE4E double
COMMENT $FE4F stops
COMMENT $FE5A triad (5-root-3)
COMMENT $FE5B .
COMMENT_LINE $FE76 This is the data table for the beginning melody of ELECTROLUCKS.
COMMENT_LINE $FEC6 THIS IS THE BEGINNING MELODY FOR GUESS WHAT
COMMENT $FECA 1ST BEAT (QTR. NOTE)
COMMENT $FECE 2ND BEAT  " "
COMMENT $FED2 3RD BEAT  " "
COMMENT $FED6 4TH BEAT (TRIPLET)
COMMENT $FEDC 5TH BEAT (TRIPLET)
COMMENT $FEE2 LAST CHORD (HELD)
COMMENT_LINE $FEF8 Following is a series of six FANFARES = in various keys,tempi
COMMENT_LINE $FEF8 and styles. They are 2-4 measures long and may be used to highlight
COMMENT_LINE $FEF8 particular actions in the games or interrupt and celebrate (or what-
COMMENT_LINE $FEF8 ever) a particular scoring milestone.
COMMENT_LINE $FEF8 #2 is very fast in a country style.
COMMENT_LINE $FF26 #3 is a traditional trupmet style fanfare
COMMENT_LINE $FF44 FF03 is specifically for BERZERK.
COMMENT_LINE $FF62 #4 is a comic version of #3
COMMENT_LINE $FF7A #9 is a cutesy little riff in thirds
COMMENT_LINE $FF8F Diminished pattern
COMMENT_LINE $FF9F - - -THESE RAMS ARE FOR 'NIBBY' ONLY
COMMENT_LINE $FF9F FORMAT OF CONTROL BYTE:
COMMENT_LINE $FF9F 0-$F = # VECTORS OF GIVEN TYPE (ON|OFF)
COMMENT_LINE $FF9F OR WITH $20 = ZERO AFTER AND QUIT
COMMENT_LINE $FF9F OR WITH $80 = BEAM ON FOR STRING
COMMENT_LINE $FF9F OR WITH $10 = DO POSITION MOVE
COMMENT_LINE $FF9F 1 BYTE/VECTOR, U INDEX <----
COMMENT $FF9F GET CONTROL BYTE
FORCE_SYMBOL $FFA1 KAOS
FORCE_NO_SYMBOL $FFA4
COMMENT $FFAC NEXT POSITION VECTOR
FORCE_SYMBOL $FFAC POSITN
COMMENT $FFAF START ACTUAL NEXT VECTOR
FORCE_NO_SYMBOL $FFAF
COMMENT $FFB1 CAREFUL TO SIGN EXTEND
COMMENT $FFB2 MASK DEPEND ON TIMES SHIFTED
FORCE_NO_SYMBOL $FFB2
FORCE_NO_SYMBOL $FFBB
FORCE_SYMBOL $FFBD KAOS
FORCE_SYMBOL $FFC2 DUFFAB
COMMENT $FFC5 TO GET NEXT ITEM
FORCE_SYMBOL $FFC7 DIFFAB
FORCE_SYMBOL $FFCA KAOS
FORCE_NO_SYMBOL $FFCD
FORCE_SYMBOL $FFD1 KAOS
COMMENT $FFD4 IF ANOTHER VECTOR
FORCE_NO_SYMBOL $FFD6
FORCE_SYMBOL $FFDA ZEROIT
COMMENT_LINE $FFDD FCB     'KARSSOFT82LDMCBCJ'
COMMENT_LINE $FFDD EOPROG
RANGE $0000-$F01F DP $D0
RANGE $F01F-$F03D DP $C8
RANGE $F03D-$F06C DP $D0
RANGE $F06C-$F14C DP $C8
RANGE $F14C-$F164 DP $D0
RANGE $F164-$F18B DP $C8
RANGE $F18B-$F593 DP $D0
RANGE $F593-$F7D2 DP $C8
RANGE $F7D2-$F7E4 DP $D0
RANGE $F7E4-$FF9F DP $C8
RANGE $FF9F-$FFDD DP $D0
RANGE $C800-$C801 DB_DATA 1
RANGE $C801-$C802 DB_DATA 1
RANGE $C802-$C803 DB_DATA 1
RANGE $C803-$C804 DB_DATA 1
RANGE $C804-$C805 DB_DATA 1
RANGE $C805-$C806 DB_DATA 1
RANGE $C806-$C807 DB_DATA 1
RANGE $C807-$C808 DB_DATA 1
RANGE $C808-$C809 DB_DATA 1
RANGE $C809-$C80A DB_DATA 1
RANGE $C80A-$C80B DB_DATA 1
RANGE $C80B-$C80C DB_DATA 1
RANGE $C80C-$C80D DB_DATA 1
RANGE $C80D-$C80E DB_DATA 1
RANGE $C80E-$C80F DB_DATA 1
RANGE $C80F-$C811 DB_DATA 2
RANGE $C811-$C812 DB_DATA 1
RANGE $C812-$C813 DB_DATA 1
RANGE $C813-$C814 DB_DATA 1
RANGE $C814-$C815 DB_DATA 1
RANGE $C815-$C816 DB_DATA 1
RANGE $C816-$C817 DB_DATA 1
RANGE $C817-$C818 DB_DATA 1
RANGE $C818-$C819 DB_DATA 1
RANGE $C819-$C81A DB_DATA 1
RANGE $C81A-$C81B DB_DATA 1
RANGE $C81B-$C81C DB_DATA 1
RANGE $C81C-$C81D DB_DATA 1
RANGE $C81D-$C81E DB_DATA 1
RANGE $C81E-$C81F DB_DATA 1
RANGE $C81F-$C820 DB_DATA 1
RANGE $C820-$C821 DB_DATA 1
RANGE $C821-$C822 DB_DATA 1
RANGE $C822-$C823 DB_DATA 1
RANGE $C823-$C824 DB_DATA 1
RANGE $C824-$C825 DB_DATA 1
RANGE $C825-$C827 DB_DATA 2
RANGE $C827-$C828 DB_DATA 1
RANGE $C828-$C829 DB_DATA 1
RANGE $C829-$C82A DB_DATA 1
RANGE $C82A-$C82C DB_DATA 2
RANGE $C82C-$C82E DB_DATA 2
RANGE $C82E-$C82F DB_DATA 1
RANGE $C82F-$C830 DB_DATA 1
RANGE $C830-$C831 DB_DATA 1
RANGE $C831-$C832 DB_DATA 1
RANGE $C832-$C833 DB_DATA 1
RANGE $C833-$C834 DB_DATA 1
RANGE $C834-$C835 DB_DATA 1
RANGE $C835-$C836 DB_DATA 1
RANGE $C836-$C837 DB_DATA 1
RANGE $C837-$C839 DB_DATA 2
RANGE $C839-$C83B DB_DATA 2
RANGE $C83B-$C83C DB_DATA 1
RANGE $C83C-$C83D DB_DATA 1
RANGE $C83D-$C83F DB_DATA 2
RANGE $C83F-$C840 DB_DATA 1
RANGE $C840-$C841 DB_DATA 1
RANGE $C841-$C842 DB_DATA 1
RANGE $C842-$C843 DB_DATA 1
RANGE $C843-$C844 DB_DATA 1
RANGE $C844-$C845 DB_DATA 1
RANGE $C845-$C846 DB_DATA 1
RANGE $C846-$C847 DB_DATA 1
RANGE $C847-$C848 DB_DATA 1
RANGE $C848-$C849 DB_DATA 1
RANGE $C849-$C84A DB_DATA 1
RANGE $C84A-$C84B DB_DATA 1
RANGE $C84B-$C84C DB_DATA 1
RANGE $C84C-$C84D DB_DATA 1
RANGE $C84D-$C84F DB_DATA 2
RANGE $C84F-$C851 DB_DATA 2
RANGE $C851-$C853 DB_DATA 2
RANGE $C853-$C855 DB_DATA 2
RANGE $C855-$C856 DB_DATA 1
RANGE $C856-$C857 DB_DATA 1
RANGE $C857-$C858 DB_DATA 1
RANGE $C858-$C859 DB_DATA 1
RANGE $C859-$C85A DB_DATA 1
RANGE $C85A-$C85B DB_DATA 1
RANGE $C85B-$C85C DB_DATA 1
RANGE $C85C-$C85D DB_DATA 1
RANGE $C85D-$C85E DB_DATA 1
RANGE $C85E-$C85F DB_DATA 1
RANGE $C85F-$C860 DB_DATA 1
RANGE $C860-$C861 DB_DATA 1
RANGE $C861-$C863 DB_DATA 2
RANGE $C863-$C865 DB_DATA 2
RANGE $C865-$C867 DB_DATA 2
RANGE $C867-$C868 DB_DATA 1
RANGE $C868-$C869 DB_DATA 1
RANGE $C869-$C86A DB_DATA 1
RANGE $C86A-$C86B DB_DATA 1
RANGE $C86B-$C86D DB_DATA 2
RANGE $C86D-$C86F DB_DATA 2
RANGE $C86F-$C871 DB_DATA 2
RANGE $C871-$C872 DB_DATA 1
RANGE $C872-$C873 DB_DATA 1
RANGE $C873-$C874 DB_DATA 1
RANGE $C874-$C876 DB_DATA 2
RANGE $C876-$C877 DB_DATA 1
RANGE $C877-$C878 DB_DATA 1
RANGE $C878-$C879 DB_DATA 1
RANGE $C879-$C87A DB_DATA 1
RANGE $C87A-$C87B DB_DATA 1
RANGE $C87B-$C87D DB_DATA 2
RANGE $C87D-$C880 DB_DATA 3
RANGE $CBEA-$CBEB DB_DATA 1
RANGE $CBEB-$CBF2 DB_DATA 7
RANGE $CBF2-$CBF5 DB_DATA 3
RANGE $CBF5-$CBF8 DB_DATA 3
RANGE $CBF8-$CBFB DB_DATA 3
RANGE $CBFB-$CBFE DB_DATA 3
RANGE $CBFE-$CC00 DB_DATA 2
RANGE $D000-$D001 DB_DATA 1
RANGE $D001-$D002 DB_DATA 1
RANGE $D002-$D003 DB_DATA 1
RANGE $D003-$D004 DB_DATA 1
RANGE $D004-$D005 DB_DATA 1
RANGE $D005-$D006 DB_DATA 1
RANGE $D006-$D007 DB_DATA 1
RANGE $D007-$D008 DB_DATA 1
RANGE $D008-$D009 DB_DATA 1
RANGE $D009-$D00A DB_DATA 1
RANGE $D00A-$D00B DB_DATA 1
RANGE $D00B-$D00C DB_DATA 1
RANGE $D00C-$D00D DB_DATA 1
RANGE $D00D-$D00E DB_DATA 1
RANGE $D00E-$D00F DB_DATA 1
RANGE $D00F-$D010 DB_DATA 1
RANGE $F000-$F0E9 CODE
RANGE $F0E9-$F0EB DW_DATA 1
RANGE $F0EB-$F0F3 DW_DATA 4
RANGE $F0F3-$F0F5 DW_DATA 1
RANGE $F0F5-$F0FD DW_DATA 4
RANGE $F0FD-$F101 DB_DATA 4
RANGE $F101-$F10C DB_DATA 11
RANGE $F10C-$F110 DW_DATA 2
RANGE $F110-$F118 DB_DATA 8
RANGE $F118-$F11C DW_DATA 2
RANGE $F11C-$F124 DB_DATA 8
RANGE $F124-$F126 DW_DATA 1
RANGE $F126-$F128 DW_DATA 1
RANGE $F128-$F12C DB_DATA 4
RANGE $F12C-$F12E DW_DATA 1
RANGE $F12E-$F130 DW_DATA 1
RANGE $F130-$F13D DB_DATA 13
RANGE $F13D-$F13F DW_DATA 1
RANGE $F13F-$F141 DW_DATA 1
RANGE $F141-$F14B DB_DATA 10
RANGE $F14B-$F14C DB_DATA 1
RANGE $F14C-$F794 CODE
RANGE $F794-$F79F DB_DATA 11
RANGE $F79F-$F7A9 DB_DATA 10
RANGE $F7A9-$F9DC CODE
RANGE $F9DC-$F9E4 DW_DATA 4
RANGE $F9E4-$F9EA DB_DATA 6
RANGE $F9EA-$F9F0 DB_DATA 6
RANGE $F9F0-$F9F4 DB_DATA 4
RANGE $F9F4-$FA04 DW_DATA 8
RANGE $FA04-$FA14 DW_DATA 8
RANGE $FA14-$FA24 DW_DATA 8
RANGE $FA24-$FA34 DW_DATA 8
RANGE $FA34-$FA44 DW_DATA 8
RANGE $FA44-$FA54 DW_DATA 8
RANGE $FA54-$FA64 DW_DATA 8
RANGE $FA64-$FA74 DW_DATA 8
RANGE $FA74-$FA84 DW_DATA 8
RANGE $FA84-$FA94 DW_DATA 8
RANGE $FA94-$FAA4 DW_DATA 8
RANGE $FAA4-$FAB4 DW_DATA 8
RANGE $FAB4-$FAC4 DW_DATA 8
RANGE $FAC4-$FAD4 DW_DATA 8
RANGE $FAD4-$FAE4 DW_DATA 8
RANGE $FAE4-$FAF4 DW_DATA 8
RANGE $FAF4-$FB04 DW_DATA 8
RANGE $FB04-$FB14 DW_DATA 8
RANGE $FB14-$FB24 DW_DATA 8
RANGE $FB24-$FB34 DW_DATA 8
RANGE $FB34-$FB44 DW_DATA 8
RANGE $FB44-$FB54 DW_DATA 8
RANGE $FB54-$FB64 DW_DATA 8
RANGE $FB64-$FB74 DW_DATA 8
RANGE $FB74-$FB84 DW_DATA 8
RANGE $FB84-$FB94 DW_DATA 8
RANGE $FB94-$FBA4 DW_DATA 8
RANGE $FBA4-$FBB4 DW_DATA 8
RANGE $FBB4-$FBC4 DW_DATA 8
RANGE $FBC4-$FBD4 DW_DATA 8
RANGE $FBD4-$FBE4 DW_DATA 8
RANGE $FBE4-$FBF4 DW_DATA 8
RANGE $FBF4-$FC04 DW_DATA 8
RANGE $FC04-$FC14 DW_DATA 8
RANGE $FC14-$FC24 DW_DATA 8
RANGE $FC24-$FC2C DW_DATA 4
RANGE $FC2C-$FC36 DW_DATA 5
RANGE $FC36-$FC37 DB_DATA 1
RANGE $FC37-$FC39 DB_DATA 2
RANGE $FC39-$FC3C DB_DATA 3
RANGE $FC3C-$FC40 DB_DATA 4
RANGE $FC40-$FC45 DB_DATA 5
RANGE $FC45-$FC4B DB_DATA 6
RANGE $FC4B-$FC52 DB_DATA 7
RANGE $FC52-$FC5A DB_DATA 8
RANGE $FC5A-$FC63 DB_DATA 9
RANGE $FC63-$FC6D DB_DATA 10
RANGE $FC6D-$FC71 DB_DATA 4
RANGE $FC71-$FC75 DB_DATA 4
RANGE $FC75-$FC79 DB_DATA 4
RANGE $FC79-$FC7D DB_DATA 4
RANGE $FC7D-$FC81 DB_DATA 4
RANGE $FC81-$FC85 DB_DATA 4
RANGE $FC85-$FC89 DB_DATA 4
RANGE $FC89-$FC8D DB_DATA 4
RANGE $FC8D-$FC8F DW_DATA 1
RANGE $FC8F-$FC91 DW_DATA 1
RANGE $FC91-$FC93 DW_DATA 1
RANGE $FC93-$FC95 DW_DATA 1
RANGE $FC95-$FC97 DW_DATA 1
RANGE $FC97-$FC99 DW_DATA 1
RANGE $FC99-$FC9B DW_DATA 1
RANGE $FC9B-$FC9D DW_DATA 1
RANGE $FC9D-$FC9F DW_DATA 1
RANGE $FC9F-$FCA1 DW_DATA 1
RANGE $FCA1-$FCA3 DW_DATA 1
RANGE $FCA3-$FCA5 DW_DATA 1
RANGE $FCA5-$FCA7 DW_DATA 1
RANGE $FCA7-$FCA9 DW_DATA 1
RANGE $FCA9-$FCAB DW_DATA 1
RANGE $FCAB-$FCAD DW_DATA 1
RANGE $FCAD-$FCAF DW_DATA 1
RANGE $FCAF-$FCB1 DW_DATA 1
RANGE $FCB1-$FCB3 DW_DATA 1
RANGE $FCB3-$FCB5 DW_DATA 1
RANGE $FCB5-$FCB7 DW_DATA 1
RANGE $FCB7-$FCB9 DW_DATA 1
RANGE $FCB9-$FCBB DW_DATA 1
RANGE $FCBB-$FCBD DW_DATA 1
RANGE $FCBD-$FCBF DW_DATA 1
RANGE $FCBF-$FCC1 DW_DATA 1
RANGE $FCC1-$FCC3 DW_DATA 1
RANGE $FCC3-$FCC5 DW_DATA 1
RANGE $FCC5-$FCC7 DW_DATA 1
RANGE $FCC7-$FCC9 DW_DATA 1
RANGE $FCC9-$FCCB DW_DATA 1
RANGE $FCCB-$FCCD DW_DATA 1
RANGE $FCCD-$FCCF DW_DATA 1
RANGE $FCCF-$FCD1 DW_DATA 1
RANGE $FCD1-$FCD3 DW_DATA 1
RANGE $FCD3-$FCD5 DW_DATA 1
RANGE $FCD5-$FCD7 DW_DATA 1
RANGE $FCD7-$FCD9 DW_DATA 1
RANGE $FCD9-$FCDB DW_DATA 1
RANGE $FCDB-$FCDD DW_DATA 1
RANGE $FCDD-$FCDF DW_DATA 1
RANGE $FCDF-$FCE1 DW_DATA 1
RANGE $FCE1-$FCE3 DW_DATA 1
RANGE $FCE3-$FCE5 DW_DATA 1
RANGE $FCE5-$FCE7 DW_DATA 1
RANGE $FCE7-$FCE9 DW_DATA 1
RANGE $FCE9-$FCEB DW_DATA 1
RANGE $FCEB-$FCED DW_DATA 1
RANGE $FCED-$FCEF DW_DATA 1
RANGE $FCEF-$FCF1 DW_DATA 1
RANGE $FCF1-$FCF3 DW_DATA 1
RANGE $FCF3-$FCF5 DW_DATA 1
RANGE $FCF5-$FCF7 DW_DATA 1
RANGE $FCF7-$FCF9 DW_DATA 1
RANGE $FCF9-$FCFB DW_DATA 1
RANGE $FCFB-$FCFD DW_DATA 1
RANGE $FCFD-$FCFF DW_DATA 1
RANGE $FCFF-$FD01 DW_DATA 1
RANGE $FD01-$FD03 DW_DATA 1
RANGE $FD03-$FD05 DW_DATA 1
RANGE $FD05-$FD07 DW_DATA 1
RANGE $FD07-$FD09 DW_DATA 1
RANGE $FD09-$FD0B DW_DATA 1
RANGE $FD0B-$FD0D DW_DATA 1
RANGE $FD0D-$FD0F DW_DATA 1
RANGE $FD0F-$FD11 DW_DATA 1
RANGE $FD11-$FD12 DB_DATA 1
RANGE $FD12-$FD14 DB_DATA 2
RANGE $FD14-$FD15 DB_DATA 1
RANGE $FD15-$FD17 DB_DATA 2
RANGE $FD17-$FD18 DB_DATA 1
RANGE $FD18-$FD19 DB_DATA 1
RANGE $FD19-$FD1B DB_DATA 2
RANGE $FD1B-$FD1D DB_DATA 2
RANGE $FD1D-$FD21 DW_DATA 2
RANGE $FD21-$FD23 DB_DATA 2
RANGE $FD23-$FD25 DB_DATA 2
RANGE $FD25-$FD27 DB_DATA 2
RANGE $FD27-$FD29 DB_DATA 2
RANGE $FD29-$FD2B DB_DATA 2
RANGE $FD2B-$FD2D DB_DATA 2
RANGE $FD2D-$FD2F DB_DATA 2
RANGE $FD2F-$FD30 DB_DATA 1
RANGE $FD30-$FD31 DB_DATA 1
RANGE $FD31-$FD33 DB_DATA 2
RANGE $FD33-$FD34 DB_DATA 1
RANGE $FD34-$FD35 DB_DATA 1
RANGE $FD35-$FD37 DB_DATA 2
RANGE $FD37-$FD39 DB_DATA 2
RANGE $FD39-$FD3B DB_DATA 2
RANGE $FD3B-$FD3D DB_DATA 2
RANGE $FD3D-$FD3F DB_DATA 2
RANGE $FD3F-$FD41 DB_DATA 2
RANGE $FD41-$FD43 DB_DATA 2
RANGE $FD43-$FD44 DB_DATA 1
RANGE $FD44-$FD45 DB_DATA 1
RANGE $FD45-$FD47 DB_DATA 2
RANGE $FD47-$FD48 DB_DATA 1
RANGE $FD48-$FD49 DB_DATA 1
RANGE $FD49-$FD4B DB_DATA 2
RANGE $FD4B-$FD4D DB_DATA 2
RANGE $FD4D-$FD4F DB_DATA 2
RANGE $FD4F-$FD51 DB_DATA 2
RANGE $FD51-$FD53 DB_DATA 2
RANGE $FD53-$FD55 DB_DATA 2
RANGE $FD55-$FD57 DB_DATA 2
RANGE $FD57-$FD59 DB_DATA 2
RANGE $FD59-$FD5B DB_DATA 2
RANGE $FD5B-$FD5D DB_DATA 2
RANGE $FD5D-$FD5F DB_DATA 2
RANGE $FD5F-$FD61 DB_DATA 2
RANGE $FD61-$FD63 DB_DATA 2
RANGE $FD63-$FD65 DB_DATA 2
RANGE $FD65-$FD67 DB_DATA 2
RANGE $FD67-$FD69 DB_DATA 2
RANGE $FD69-$FD71 DW_DATA 4
RANGE $FD71-$FD79 DW_DATA 4
RANGE $FD79-$FD81 DB_DATA 8
RANGE $FD81-$FD83 DW_DATA 1
RANGE $FD83-$FD85 DW_DATA 1
RANGE $FD85-$FD87 DB_DATA 2
RANGE $FD87-$FD89 DB_DATA 2
RANGE $FD89-$FD8B DB_DATA 2
RANGE $FD8B-$FD8D DB_DATA 2
RANGE $FD8D-$FD8F DB_DATA 2
RANGE $FD8F-$FD91 DB_DATA 2
RANGE $FD91-$FD93 DB_DATA 2
RANGE $FD93-$FD95 DB_DATA 2
RANGE $FD95-$FD97 DB_DATA 2
RANGE $FD97-$FD99 DB_DATA 2
RANGE $FD99-$FD9B DB_DATA 2
RANGE $FD9B-$FD9D DB_DATA 2
RANGE $FD9D-$FD9F DB_DATA 2
RANGE $FD9F-$FDA1 DB_DATA 2
RANGE $FDA1-$FDA3 DB_DATA 2
RANGE $FDA3-$FDA5 DB_DATA 2
RANGE $FDA5-$FDA7 DB_DATA 2
RANGE $FDA7-$FDA9 DB_DATA 2
RANGE $FDA9-$FDAB DB_DATA 2
RANGE $FDAB-$FDAD DB_DATA 2
RANGE $FDAD-$FDAF DB_DATA 2
RANGE $FDAF-$FDB1 DB_DATA 2
RANGE $FDB1-$FDB3 DB_DATA 2
RANGE $FDB3-$FDB5 DB_DATA 2
RANGE $FDB5-$FDB7 DB_DATA 2
RANGE $FDB7-$FDB9 DB_DATA 2
RANGE $FDB9-$FDBB DB_DATA 2
RANGE $FDBB-$FDBD DB_DATA 2
RANGE $FDBD-$FDBF DB_DATA 2
RANGE $FDBF-$FDC1 DB_DATA 2
RANGE $FDC1-$FDC3 DB_DATA 2
RANGE $FDC3-$FDD3 DW_DATA 8
RANGE $FDD3-$FDD5 DW_DATA 1
RANGE $FDD5-$FDD7 DW_DATA 1
RANGE $FDD7-$FDD8 DB_DATA 1
RANGE $FDD8-$FDDA DB_DATA 2
RANGE $FDDA-$FDDC DB_DATA 2
RANGE $FDDC-$FDDD DB_DATA 1
RANGE $FDDD-$FDDF DB_DATA 2
RANGE $FDDF-$FDE0 DB_DATA 1
RANGE $FDE0-$FDE2 DB_DATA 2
RANGE $FDE2-$FDE3 DB_DATA 1
RANGE $FDE3-$FDE5 DB_DATA 2
RANGE $FDE5-$FDE7 DB_DATA 2
RANGE $FDE7-$FDE8 DB_DATA 1
RANGE $FDE8-$FDEA DB_DATA 2
RANGE $FDEA-$FDEB DB_DATA 1
RANGE $FDEB-$FDED DB_DATA 2
RANGE $FDED-$FDEE DB_DATA 1
RANGE $FDEE-$FDF0 DB_DATA 2
RANGE $FDF0-$FDF1 DB_DATA 1
RANGE $FDF1-$FDF3 DB_DATA 2
RANGE $FDF3-$FDF4 DB_DATA 1
RANGE $FDF4-$FDF6 DB_DATA 2
RANGE $FDF6-$FDF7 DB_DATA 1
RANGE $FDF7-$FDF9 DB_DATA 2
RANGE $FDF9-$FDFA DB_DATA 1
RANGE $FDFA-$FDFC DB_DATA 2
RANGE $FDFC-$FDFD DB_DATA 1
RANGE $FDFD-$FDFF DB_DATA 2
RANGE $FDFF-$FE00 DB_DATA 1
RANGE $FE00-$FE02 DB_DATA 2
RANGE $FE02-$FE03 DB_DATA 1
RANGE $FE03-$FE05 DB_DATA 2
RANGE $FE05-$FE06 DB_DATA 1
RANGE $FE06-$FE08 DB_DATA 2
RANGE $FE08-$FE09 DB_DATA 1
RANGE $FE09-$FE0B DB_DATA 2
RANGE $FE0B-$FE0C DB_DATA 1
RANGE $FE0C-$FE0E DB_DATA 2
RANGE $FE0E-$FE0F DB_DATA 1
RANGE $FE0F-$FE11 DB_DATA 2
RANGE $FE11-$FE12 DB_DATA 1
RANGE $FE12-$FE14 DB_DATA 2
RANGE $FE14-$FE15 DB_DATA 1
RANGE $FE15-$FE17 DB_DATA 2
RANGE $FE17-$FE18 DB_DATA 1
RANGE $FE18-$FE1A DB_DATA 2
RANGE $FE1A-$FE1B DB_DATA 1
RANGE $FE1B-$FE1D DB_DATA 2
RANGE $FE1D-$FE1E DB_DATA 1
RANGE $FE1E-$FE20 DB_DATA 2
RANGE $FE20-$FE21 DB_DATA 1
RANGE $FE21-$FE23 DB_DATA 2
RANGE $FE23-$FE24 DB_DATA 1
RANGE $FE24-$FE26 DB_DATA 2
RANGE $FE26-$FE28 DB_DATA 2
RANGE $FE28-$FE31 DB_DATA 9
RANGE $FE31-$FE38 DB_DATA 7
RANGE $FE38-$FE3A DW_DATA 1
RANGE $FE3A-$FE3C DW_DATA 1
RANGE $FE3C-$FE3E DB_DATA 2
RANGE $FE3E-$FE40 DB_DATA 2
RANGE $FE40-$FE42 DB_DATA 2
RANGE $FE42-$FE44 DB_DATA 2
RANGE $FE44-$FE46 DB_DATA 2
RANGE $FE46-$FE48 DB_DATA 2
RANGE $FE48-$FE4A DB_DATA 2
RANGE $FE4A-$FE4C DB_DATA 2
RANGE $FE4C-$FE4E DB_DATA 2
RANGE $FE4E-$FE4F DB_DATA 1
RANGE $FE4F-$FE51 DB_DATA 2
RANGE $FE51-$FE52 DB_DATA 1
RANGE $FE52-$FE54 DB_DATA 2
RANGE $FE54-$FE55 DB_DATA 1
RANGE $FE55-$FE57 DB_DATA 2
RANGE $FE57-$FE58 DB_DATA 1
RANGE $FE58-$FE5A DB_DATA 2
RANGE $FE5A-$FE5B DB_DATA 1
RANGE $FE5B-$FE5C DB_DATA 1
RANGE $FE5C-$FE5E DB_DATA 2
RANGE $FE5E-$FE60 DB_DATA 2
RANGE $FE60-$FE62 DB_DATA 2
RANGE $FE62-$FE64 DB_DATA 2
RANGE $FE64-$FE66 DB_DATA 2
RANGE $FE66-$FE6E DB_DATA 8
RANGE $FE6E-$FE76 DB_DATA 8
RANGE $FE76-$FE78 DW_DATA 1
RANGE $FE78-$FE7A DW_DATA 1
RANGE $FE7A-$FE7C DB_DATA 2
RANGE $FE7C-$FE7E DB_DATA 2
RANGE $FE7E-$FE80 DB_DATA 2
RANGE $FE80-$FE82 DB_DATA 2
RANGE $FE82-$FE84 DB_DATA 2
RANGE $FE84-$FE86 DB_DATA 2
RANGE $FE86-$FE88 DB_DATA 2
RANGE $FE88-$FE8A DB_DATA 2
RANGE $FE8A-$FE8C DB_DATA 2
RANGE $FE8C-$FE8E DB_DATA 2
RANGE $FE8E-$FE90 DB_DATA 2
RANGE $FE90-$FE92 DB_DATA 2
RANGE $FE92-$FE93 DB_DATA 1
RANGE $FE93-$FE95 DB_DATA 2
RANGE $FE95-$FE96 DB_DATA 1
RANGE $FE96-$FE98 DB_DATA 2
RANGE $FE98-$FE99 DB_DATA 1
RANGE $FE99-$FE9B DB_DATA 2
RANGE $FE9B-$FE9C DB_DATA 1
RANGE $FE9C-$FE9E DB_DATA 2
RANGE $FE9E-$FE9F DB_DATA 1
RANGE $FE9F-$FEA1 DB_DATA 2
RANGE $FEA1-$FEA2 DB_DATA 1
RANGE $FEA2-$FEA4 DB_DATA 2
RANGE $FEA4-$FEA6 DB_DATA 2
RANGE $FEA6-$FEA8 DB_DATA 2
RANGE $FEA8-$FEAA DB_DATA 2
RANGE $FEAA-$FEAC DB_DATA 2
RANGE $FEAC-$FEAE DB_DATA 2
RANGE $FEAE-$FEB0 DB_DATA 2
RANGE $FEB0-$FEB2 DB_DATA 2
RANGE $FEB2-$FEB6 DB_DATA 4
RANGE $FEB6-$FEC6 DB_DATA 16
RANGE $FEC6-$FEC8 DW_DATA 1
RANGE $FEC8-$FECA DW_DATA 1
RANGE $FECA-$FECB DB_DATA 1
RANGE $FECB-$FECC DB_DATA 1
RANGE $FECC-$FECE DB_DATA 2
RANGE $FECE-$FECF DB_DATA 1
RANGE $FECF-$FED0 DB_DATA 1
RANGE $FED0-$FED2 DB_DATA 2
RANGE $FED2-$FED3 DB_DATA 1
RANGE $FED3-$FED4 DB_DATA 1
RANGE $FED4-$FED6 DB_DATA 2
RANGE $FED6-$FED7 DB_DATA 1
RANGE $FED7-$FED8 DB_DATA 1
RANGE $FED8-$FEDA DB_DATA 2
RANGE $FEDA-$FEDC DB_DATA 2
RANGE $FEDC-$FEDD DB_DATA 1
RANGE $FEDD-$FEDE DB_DATA 1
RANGE $FEDE-$FEE0 DB_DATA 2
RANGE $FEE0-$FEE2 DB_DATA 2
RANGE $FEE2-$FEE3 DB_DATA 1
RANGE $FEE3-$FEE4 DB_DATA 1
RANGE $FEE4-$FEE6 DB_DATA 2
RANGE $FEE6-$FEE8 DB_DATA 2
RANGE $FEE8-$FEF8 DW_DATA 8
RANGE $FEF8-$FEFA DW_DATA 1
RANGE $FEFA-$FEFC DW_DATA 1
RANGE $FEFC-$FEFE DB_DATA 2
RANGE $FEFE-$FF00 DB_DATA 2
RANGE $FF00-$FF02 DB_DATA 2
RANGE $FF02-$FF04 DB_DATA 2
RANGE $FF04-$FF06 DB_DATA 2
RANGE $FF06-$FF08 DB_DATA 2
RANGE $FF08-$FF0A DB_DATA 2
RANGE $FF0A-$FF0C DB_DATA 2
RANGE $FF0C-$FF0E DB_DATA 2
RANGE $FF0E-$FF10 DB_DATA 2
RANGE $FF10-$FF12 DB_DATA 2
RANGE $FF12-$FF14 DB_DATA 2
RANGE $FF14-$FF16 DB_DATA 2
RANGE $FF16-$FF1E DW_DATA 4
RANGE $FF1E-$FF26 DW_DATA 4
RANGE $FF26-$FF28 DW_DATA 1
RANGE $FF28-$FF2A DW_DATA 1
RANGE $FF2A-$FF2C DB_DATA 2
RANGE $FF2C-$FF2E DB_DATA 2
RANGE $FF2E-$FF30 DB_DATA 2
RANGE $FF30-$FF32 DB_DATA 2
RANGE $FF32-$FF34 DB_DATA 2
RANGE $FF34-$FF36 DB_DATA 2
RANGE $FF36-$FF38 DB_DATA 2
RANGE $FF38-$FF3A DB_DATA 2
RANGE $FF3A-$FF3C DB_DATA 2
RANGE $FF3C-$FF3E DB_DATA 2
RANGE $FF3E-$FF40 DB_DATA 2
RANGE $FF40-$FF42 DB_DATA 2
RANGE $FF42-$FF44 DB_DATA 2
RANGE $FF44-$FF46 DW_DATA 1
RANGE $FF46-$FF48 DW_DATA 1
RANGE $FF48-$FF4A DB_DATA 2
RANGE $FF4A-$FF4C DB_DATA 2
RANGE $FF4C-$FF4E DB_DATA 2
RANGE $FF4E-$FF50 DB_DATA 2
RANGE $FF50-$FF52 DB_DATA 2
RANGE $FF52-$FF54 DB_DATA 2
RANGE $FF54-$FF56 DB_DATA 2
RANGE $FF56-$FF58 DB_DATA 2
RANGE $FF58-$FF5A DB_DATA 2
RANGE $FF5A-$FF5C DB_DATA 2
RANGE $FF5C-$FF5E DB_DATA 2
RANGE $FF5E-$FF60 DB_DATA 2
RANGE $FF60-$FF62 DB_DATA 2
RANGE $FF62-$FF64 DW_DATA 1
RANGE $FF64-$FF66 DW_DATA 1
RANGE $FF66-$FF68 DB_DATA 2
RANGE $FF68-$FF6A DB_DATA 2
RANGE $FF6A-$FF6C DB_DATA 2
RANGE $FF6C-$FF6E DB_DATA 2
RANGE $FF6E-$FF70 DB_DATA 2
RANGE $FF70-$FF72 DB_DATA 2
RANGE $FF72-$FF74 DB_DATA 2
RANGE $FF74-$FF76 DB_DATA 2
RANGE $FF76-$FF78 DB_DATA 2
RANGE $FF78-$FF7A DB_DATA 2
RANGE $FF7A-$FF7C DW_DATA 1
RANGE $FF7C-$FF7E DW_DATA 1
RANGE $FF7E-$FF7F DB_DATA 1
RANGE $FF7F-$FF81 DB_DATA 2
RANGE $FF81-$FF82 DB_DATA 1
RANGE $FF82-$FF84 DB_DATA 2
RANGE $FF84-$FF85 DB_DATA 1
RANGE $FF85-$FF87 DB_DATA 2
RANGE $FF87-$FF88 DB_DATA 1
RANGE $FF88-$FF8A DB_DATA 2
RANGE $FF8A-$FF8B DB_DATA 1
RANGE $FF8B-$FF8D DB_DATA 2
RANGE $FF8D-$FF8F DB_DATA 2
RANGE $FF8F-$FF91 DW_DATA 1
RANGE $FF91-$FF93 DW_DATA 1
RANGE $FF93-$FF95 DB_DATA 2
RANGE $FF95-$FF97 DB_DATA 2
RANGE $FF97-$FF99 DB_DATA 2
RANGE $FF99-$FF9B DB_DATA 2
RANGE $FF9B-$FF9D DB_DATA 2
RANGE $FF9D-$FF9F DB_DATA 2
RANGE $FF9F-$FFDD CODE
RANGE $FFF2-$FFF4 DW_DATA 1
RANGE $FFF4-$FFF6 DW_DATA 1
RANGE $FFF6-$FFF8 DW_DATA 1
RANGE $FFF8-$FFFA DW_DATA 1
RANGE $FFFA-$FFFC DW_DATA 1
RANGE $FFFC-$FFFE DW_DATA 1
RANGE $FFFE-$0000 DW_DATA 1

