BANK 0
EQU $00 
LABEL $F000 start_of_OS_ROM
LABEL $F101 gce_copyright_string
LABEL $F10C vectrex_string
LABEL $F14C init_PIA_chip
LABEL $F164 initialize_OS_RAM
LABEL $F18B reinit
LABEL $F192 waitrecal
LABEL $F1A2 set_refresh
LABEL $F1AA dptoD0
LABEL $F1AF dptoC8
LABEL $F1B4 read_switches
LABEL $F1BA read_switches2
LABEL $F1F8 read_jstick
LABEL $F256 byte_2_sound_chip
LABEL $F259 byte_2_sound_chip2
LABEL $F272 clear_sound_chip
LABEL $F27D copy_bytes_2_sound_chip
LABEL $F289 do_sound
LABEL $F29D intensity_to_1F
LABEL $F2A1 intensity_to_3F
LABEL $F2A5 intensity_to_5F
LABEL $F2A9 intensity_to_7F
LABEL $F2AB intensity_to_a
LABEL $F2BE dotixb
LABEL $F2C1 dotix
LABEL $F2C3 dot_at_d
LABEL $F2C5 dot_at_current_position
LABEL $F2D5 dot_list
LABEL $F2DE dotix_then_reset
LABEL $F2F2 move_pen7F_no_inc
LABEL $F2FC move_pen7F_to_d
LABEL $F308 move_penFF
LABEL $F30C move_pen7F
LABEL $F30E set_scale_factor
LABEL $F310 move_pen
LABEL $F312 move_pen_d
LABEL $F34A set_dp_and_reset0ref
LABEL $F34F check0ref
LABEL $F354 reset0ref
LABEL $F373 print_1_string
LABEL $F378 print_with_dft_hw
LABEL $F37A print_at_d
LABEL $F385 printu
LABEL $F38A printu2
LABEL $F38C printu3
LABEL $F391 print_b_minus_a
LABEL $F393 print_b_minus_a2
LABEL $F3AD move_then_draw_VL_with_count1
LABEL $F3B1 move_then_draw_VL_with_count2
LABEL $F3B5 move_then_draw_VL_with_count3
LABEL $F3B7 move_then_draw_VL_with_count4
LABEL $F3B9 move_then_draw_VL_with_count6
LABEL $F3BC move_then_draw_VL_with_count5
LABEL $F3CE draw_VL_with_count4
LABEL $F3D2 draw_VL_with_count3
LABEL $F3D6 draw_VL_with_count2
LABEL $F3D8 draw_VL_with_count6
LABEL $F3DA draw_VL_with_count5
LABEL $F3DD draw_VL_with_count1
LABEL $F3DF draw_to_d
LABEL $F404 drawl1_scale_FF
LABEL $F408 drawl1_scale_7F
LABEL $F40C drawl1
LABEL $F40E drawl1b
LABEL $F410 next_pt
LABEL $F434 dwp_with_count
LABEL $F437 draw_with_pattern
LABEL $F46E drawl2
LABEL $F495 display_string
LABEL $F511 get_random_a2
LABEL $F517 get_random_a
LABEL $F533 init_music_buf
LABEL $F53F clear_blockxb
LABEL $F542 clear_C8_ram
LABEL $F545 clear_256_bytes
LABEL $F548 clear_block
LABEL $F550 clear_block_to_0x80
LABEL $F552 clear_block_to_a
LABEL $F55A decrement_counters_C82E_C830
LABEL $F55E decrement_counters_C82E_C833
LABEL $F56D delay_b_3
LABEL $F571 delay_b_2
LABEL $F575 delay_b_1
LABEL $F579 delay_b_0
LABEL $F57A start_b_delay
LABEL $F57E get_bit_mask
LABEL $F584 get_absolute_value_of_ab
LABEL $F593 convert_rise_run_to_angle
LABEL $F5D9 get_2nd_index_pair
LABEL $F5DB get_1st_index_pair
LABEL $F5EF get_rotation_index_pairs
LABEL $F5FF convert_abs_angle_to_rise_run
LABEL $F601 convert_angle_to_rise_run
LABEL $F610 rotate_vector_list2
LABEL $F61F rotate_vector_list1
LABEL $F637 transform_next_point
LABEL $F65B xform_1
LABEL $F65D xform_1a
LABEL $F661 xform_2
LABEL $F663 xform_2a
LABEL $F67F move_block
LABEL $F683 move_block2
LABEL $F687 init_sound
LABEL $F68D init_sound2
LABEL $F7A9 get_players_game
LABEL $F82C handle_buttons
LABEL $F835 display_option_string
LABEL $F84F set_dft_score
LABEL $F85E convert_a_to_bcd_and_add
LABEL $F87C add_d_to_x_in_bcd
LABEL $F8C7 compare_scores
LABEL $F8D8 check_4_new_hi_score
LABEL $F8E5 modify_target_and_check_4_hit1
LABEL $F8F3 modify_target_and_check_4_hit2
LABEL $F8FF check_bullet_for_hit
LABEL $F903 check_bullet_for_hit2
LABEL $F92E generate_explosion_sound
LABEL $F794 player_string
LABEL $F79F game_string
LABEL $F9DC bit_masks
LABEL $F9E4 music_stuff1
LABEL $F9EA music_stuff2
LABEL $F9F4 character_table
LABEL $FC24 angle_data1
LABEL $FC2C angle_data2
LABEL $FC6D rotation_pair_table
LABEL $FC8D music_routine_data
LABEL $FD0D intro_music_block
LABEL $FD1D berzerk_music_block
LABEL $FD69 music_header1a
LABEL $FD79 music_header2b
LABEL $FEB6 music_header2a
LABEL $FEE8 music_header1b
LABEL $0024 start
LABEL $0C0E StartupNewGame
LABEL $0271 IRQ_Handler
LABEL $0076 P0076
LABEL $0080 P0080
LABEL $00D0 GetGoggleIndexState
LABEL $008A P008A
LABEL $009C P009C
LABEL $00B9 P00B9
LABEL $00BE P00BE
LABEL $00F0 MainGameLoop
LABEL $00F3 ReturnFromIRQ
LABEL $0651 DoDrawing
LABEL $0353 P0353
LABEL $0139 P0139
LABEL $0141 P0141
LABEL $14EB P14EB
LABEL $0151 DrawVectorList
LABEL $0153 P0153
LABEL $0168 P0168
LABEL $0175 DrawAnimatedVectorList_Slow
LABEL $017A P017A
LABEL $0181 DrawAnimatedVectorList_Fast
LABEL $0186 DrawWithMixedScaleFactors
LABEL $0188 P0188
LABEL $019C P019C
LABEL $01A9 P01A9
LABEL $01BC NE_DrawDots
LABEL $01BE P01BE
LABEL $01D2 P01D2
LABEL $01E3 DrawThenZeroIntegrators
LABEL $01EA Draw4ByteVectorLists
LABEL $0211 P0211
LABEL $0203 P0203
LABEL $0223 P0223
LABEL $0238 P0238
LABEL $023D P023D
LABEL $0252 P0252
LABEL $0258 P0258
LABEL $025D P025D
LABEL $0286 Timeout
LABEL $0302 FinishIRQ
LABEL $0294 ProcessSamples
LABEL $02BC P02BC
LABEL $02B4 P02B4
LABEL $02E1 P02E1
LABEL $02D9 P02D9
LABEL $02F3 ShuffleFailureInfo
LABEL $031D DrawOneEnemyPassageWall
LABEL $0324 P0324
LABEL $033C P033C
LABEL $034B P034B
LABEL $035E DrawFuelWall
LABEL $148E FuelWall
LABEL $0363 P0363
LABEL $038A P038A
LABEL $037C P037C
LABEL $0380 P0380
LABEL $039C P039C
LABEL $03B1 P03B1
LABEL $03B7 P03B7
LABEL $03CC P03CC
LABEL $03E5 P03E5
LABEL $03EF DrawFrameContents
LABEL $040C P040C
LABEL $0412 P0412
LABEL $042A P042A
LABEL $0459 P0459
LABEL $1479 FuelCannister
LABEL $0455 P0455
LABEL $046C P046C
LABEL $046E P046E
LABEL $047B EP_DABlueFramesAndWalls_LE
LABEL $076E RFPtrToPlayersFF
COMMENT_LABEL $076E ResetFramePtrToPlayersFirstFrame:
LABEL $0481 P0481
LABEL $0748 LocateSpecificFrame
LABEL $0490 P0490
LABEL $0495 LeftWalls_LeftEye
LABEL $1146 DrawEnemyPassageWalls
LABEL $19CE LeftWallFar_LeftEye
LABEL $19F1 LeftWallNear_LeftEye
LABEL $0499 EP_DAGreenFramesAndWalls_LE
COMMENT_LABEL $0499 EP_DrawAllGreenFramesAndWalls_LeftEye:
LABEL $049C P049C
LABEL $04AE P04AE
LABEL $04B3 RightWalls_LeftEye
LABEL $1A3A RightWallFar_LeftEye
LABEL $1A5D RightWallNear_LeftEye
LABEL $04B7 EP_DrawAllRedFrames_LeftEye
LABEL $04BA P04BA
LABEL $04FF P04FF
LABEL $1170 DrawFuelBar
LABEL $04D8 UpdateScore
LABEL $04F8 P04F8
LABEL $0508 BonusScoreLevel
LABEL $050F CheckForScoreOver20000
LABEL $052F P052F
LABEL $0530 EP_DABlueFramesAndWalls_RE
COMMENT_LABEL $0530 EP_DrawAllBlueFramesAndWalls_RightEye:
LABEL $0536 P0536
LABEL $0548 P0548
LABEL $054D LeftWalls_RightEye
LABEL $1A70 LeftWallFar_RightEye
LABEL $1A93 LeftWallNear_RightEye
LABEL $0551 EP_DAGreenFramesAndWalls_RE
COMMENT_LABEL $0551 EP_DrawAllGreenFramesAndWalls_RightEye:
LABEL $0554 P0554
LABEL $0572 P0572
LABEL $0577 RightWalls_RightEye
LABEL $1A04 RightWallFar_RightEye
LABEL $1A27 RightWallNear_RightEye
LABEL $057B EP_DrawAllRedFrames_RightEye
LABEL $057E P057E
LABEL $058D P058D
LABEL $0596 NE_DisplayString
LABEL $05A0 P05A0
LABEL $05C5 P05C5
LABEL $05C1 P05C1
LABEL $0604 P0604
LABEL $05E5 P05E5
LABEL $060B UpdatePlayersFuelLevel
LABEL $0620 P0620
LABEL $0644 P0644
LABEL $0650 P0650
LABEL $14DF FrameDrawingProcs
LABEL $14D1 RefreshCheckPoints
LABEL $065C P065C
LABEL $0661 P0661
LABEL $0676 P0676
LABEL $0683 P0683
LABEL $06E0 P06E0
LABEL $0738 P0738
LABEL $068F P068F
LABEL $06B8 P06B8
LABEL $06A7 P06A7
LABEL $06B5 P06B5
LABEL $06CE P06CE
LABEL $06DC P06DC
LABEL $06E9 P06E9
LABEL $0705 UpdateFramesScaleAndIntensity
LABEL $070A P070A
LABEL $0735 P0735
LABEL $0754 P0754
LABEL $075A P075A
LABEL $0769 P0769
LABEL $0775 UpdatePlayersPosition
LABEL $078F P078F
LABEL $0797 P0797
LABEL $07AE P07AE
LABEL $07B6 P07B6
LABEL $07B7 ProcessEnemyStar
LABEL $07C0 P07C0
LABEL $07E5 P07E5
LABEL $07CF P07CF
LABEL $16F7 EnemyStarVectorList
LABEL $080B P080B
LABEL $080F P080F
LABEL $1AD4 ExplosionVectorTable
LABEL $0814 P0814
LABEL $1224 CheckForCollisionWithPlayer
LABEL $081B P081B
LABEL $0827 DrawPlayersShipExploding
LABEL $083A P083A
LABEL $1941 PlayersShipExploding_1
LABEL $1981 PlayersShipExploding_2
LABEL $0853 InitializePlayerFrame
LABEL $190D PlayersShip_2
LABEL $18D9 PlayersShip_1
LABEL $088B SetEnemyShipInfo
LABEL $08A0 SetEnemyShipInfo_2
LABEL $08B3 P08B3
LABEL $08C7 P08C7
LABEL $08FD EnemyShipInfoTable
LABEL $1713 EnemyShip1VectorTable
LABEL $1767 EnemyShip2VectorTable
LABEL $17BB EnemyShip3VectorTable
LABEL $1845 EnemyShip4VectorTable
LABEL $09DA InitEnemyStarFrame
LABEL $09EF P09EF
LABEL $0A00 P0A00
LABEL $0A0F InitAllBulletFrames
LABEL $0A26 InitOneBulletFrame
LABEL $0AC3 BulletVectorList
LABEL $0A40 InitEnemyShipFrame
LABEL $0A7C UpdateBulletFrames
LABEL $0A8C UFStateAndCheckForFR
COMMENT_LABEL $0A8C UpdateFrameStateAndCheckForFireRequest:
LABEL $0AB4 P0AB4
LABEL $0ABE P0ABE
LABEL $0AC7 ProcessEnemyShip
LABEL $0B26 P0B26
LABEL $0DE2 InEnemyPassage
LABEL $0AE1 P0AE1
LABEL $0B0B P0B0B
LABEL $0B16 P0B16
LABEL $0B4F P0B4F
LABEL $0B5D P0B5D
LABEL $0B86 P0B86
LABEL $0B7F P0B7F
LABEL $11C8 CheckForCollisionWithBullets
LABEL $0B98 P0B98
LABEL $0B93 P0B93
LABEL $1ADC ExplosionPattern_1
LABEL $0BBF UpdateEnemyShipPosition
LABEL $0BDA P0BDA
LABEL $0BE3 P0BE3
LABEL $0BCD P0BCD
LABEL $0BFE P0BFE
LABEL $0C07 P0C07
LABEL $0BF1 P0BF1
LABEL $0C00 P0C00
LABEL $111B InitPlayersScoreAndShipCount
LABEL $0D4F PrepareToEnterEnemyPassage
LABEL $0C2B PrepareToFightWarlordShip
LABEL $1D42 InitWarlordShipBulletFrame
LABEL $1C5E InitWarlordShipFrames
LABEL $0C3D PlayerFightingWarlordShip
LABEL $1B7C UpdateWarlordShipFrames
LABEL $1CE5 ProcessWarlordShipBullet
LABEL $0C7E P0C7E
LABEL $0C96 P0C96
LABEL $0C97 WarlordShipDestroyed
LABEL $0C7D P0C7D
LABEL $0CE5 PlayerCollidedWithWarlordShip
LABEL $0CBB P0CBB
LABEL $0F92 PrepareForFuelPassage
LABEL $0CBA P0CBA
LABEL $0CC3 P0CC3
LABEL $0CDB WarlordShipIsDestroyedO
COMMENT_LABEL $0CDB WarlordShipBeingDestroyedOffsets:
LABEL $0CC9 P0CC9
LABEL $0CCE P0CCE
LABEL $0D17 P0D17
LABEL $0D18 P0D18
LABEL $0D34 RestartPlayerAgainstWarlordShip
LABEL $0ED3 WaitForGameRestart
LABEL $10A7 InitScoreAndShipCountFrames_2
LABEL $0D4E P0D4E
LABEL $0D68 ApproachEnemyPassage
LABEL $0D96 P0D96
LABEL $0D79 P0D79
LABEL $0D97 EnterEnemyPassage
LABEL $0DBC P0DBC
LABEL $0DBD PlayerHasRunOutOfFuel
LABEL $0DE1 P0DE1
LABEL $0E7B PlayerCollidedWithEnemyShip
LABEL $0E3F P0E3F
LABEL $0E08 P0E08
LABEL $0E07 P0E07
LABEL $0E0E P0E0E
LABEL $0E31 P0E31
LABEL $0E55 P0E55
LABEL $0E4C P0E4C
LABEL $0E7A P0E7A
LABEL $0F63 LevelCompleted
LABEL $0E80 P0E80
LABEL $0E8B P0E8B
LABEL $0EAC P0EAC
LABEL $0EAD P0EAD
LABEL $0EC9 GameOverString
LABEL $0EE5 P0EE5
LABEL $0EEC P0EEC
LABEL $0F03 P0F03
LABEL $0FA7 P0FA7
LABEL $1440 InitAllFuelFrames
LABEL $1381 UpdateAllFuelFrames
LABEL $0FA8 PlayerInFuelPassage
LABEL $1260 CheckForContactWithFuelObjects
LABEL $0FD2 P0FD2
LABEL $100A PlayerHitFuelWall
LABEL $0FEF P0FEF
LABEL $0FEC P0FEC
LABEL $0FFB P0FFB
LABEL $1009 P1009
LABEL $104A P104A
LABEL $101C P101C
LABEL $1059 PrepareToReenterFuelPassage
LABEL $10A2 InitScoreAndShipCountFrames_1
LABEL $104B ForceFuelWallFrameInvisible
LABEL $1054 P1054
LABEL $1091 P1091
LABEL $1092 RestoreFuelWallFrameStatus
LABEL $109D P109D
LABEL $10AA P10AA
LABEL $1113 ShipCountString
LABEL $114C P114C
LABEL $1157 P1157
LABEL $1166 P1166
LABEL $1163 P1163
LABEL $1176 P1176
LABEL $1183 P1183
LABEL $1195 P1195
LABEL $11A5 P11A5
LABEL $11BE P11BE
LABEL $11DC P11DC
LABEL $11D8 P11D8
LABEL $1204 P1204
LABEL $11EE P11EE
LABEL $11EA P11EA
LABEL $11F7 P11F7
LABEL $11FE P11FE
LABEL $1214 P1214
LABEL $121B P121B
LABEL $122C P122C
LABEL $1232 P1232
LABEL $123B P123B
LABEL $1242 P1242
LABEL $1248 P1248
LABEL $1257 P1257
LABEL $125D P125D
LABEL $1263 P1263
LABEL $1269 P1269
LABEL $1270 P1270
LABEL $1279 P1279
LABEL $128E P128E
LABEL $12A6 P12A6
LABEL $12CE P12CE
LABEL $12BC P12BC
LABEL $12C7 P12C7
LABEL $14A7 FuelWallOpening_Large
LABEL $12F1 P12F1
LABEL $12E2 P12E2
LABEL $12EE P12EE
LABEL $12FD P12FD
LABEL $1309 P1309
LABEL $130C InitFuelWallOrCannisterFrame
LABEL $1361 EmbeddedObjectPositions
LABEL $132D P132D
LABEL $1344 P1344
LABEL $1340 P1340
LABEL $14BC FuelWallOpening_Small
LABEL $134F P134F
LABEL $135E FuelWallFrameColors
LABEL $13FF P13FF
LABEL $13F0 P13F0
LABEL $13F6 P13F6
LABEL $1425 P1425
LABEL $1435 P1435
LABEL $1457 P1457
LABEL $1504 P1504
LABEL $152C P152C
LABEL $1518 P1518
LABEL $1526 P1526
LABEL $1534 P1534
LABEL $153F S153F
LABEL $1577 P1577
LABEL $1680 P1680
LABEL $1583 P1583
LABEL $15A0 P15A0
LABEL $15BD P15BD
LABEL $16A4 P16A4
LABEL $15CB P15CB
LABEL $15D4 P15D4
LABEL $1605 P1605
LABEL $160D P160D
LABEL $161D P161D
LABEL $163C P163C
LABEL $1640 P1640
LABEL $1653 P1653
LABEL $1667 P1667
LABEL $1675 P1675
LABEL $16A3 P16A3
LABEL $16AC P16AC
LABEL $16B4 P16B4
LABEL $16CF SoundCharacteristics
LABEL $16D7 S16D7
LABEL $171B EnemyShip1_1
LABEL $172E EnemyShip1_2
LABEL $1741 EnemyShip1_3
LABEL $1754 EnemyShip1_4
LABEL $176F EnemyShip2_1
LABEL $1782 EnemyShip2_2
LABEL $1795 EnemyShip2_3
LABEL $17A8 EnemyShip2_4
LABEL $17C3 EnemyShip3_1
LABEL $17E8 EnemyShip3_2
LABEL $1810 EnemyShip3_3
LABEL $182F EnemyShip3_4
LABEL $184D EnemyShip4_1
LABEL $186C EnemyShip4_2
LABEL $188B EnemyShip4_3
LABEL $18AA EnemyShip4_4
LABEL $18C9 FuelBarrier
COMMENT_LABEL $18C9 * Referenced from where???
LABEL $19C1 UnknownCrossHair
COMMENT_LABEL $19C1 * Referenced from where???
LABEL $1AF5 ExplosionPattern_2
LABEL $1B0E ExplosionPattern_3
LABEL $1B27 ExplosionPattern_4
LABEL $1B40 WarlordShipBulletVectorTable
LABEL $1B48 WarlordShipBullet_1
LABEL $1B55 WarlordShipBullet_2
LABEL $1B62 WarlordShipBullet_3
LABEL $1B6F WarlordShipBullet_4
LABEL $1B91 P1B91
LABEL $1BA9 P1BA9
LABEL $1BA6 P1BA6
LABEL $1BBC P1BBC
LABEL $1BB9 P1BB9
LABEL $1BCD P1BCD
LABEL $1BDB P1BDB
LABEL $1BE0 P1BE0
LABEL $1C38 P1C38
LABEL $1C21 P1C21
LABEL $1BF5 P1BF5
LABEL $1C52 NE_DrawAnimatedDots
LABEL $1C27 P1C27
LABEL $1D5A WarlordShipTargetVectorTable
LABEL $1CC0 WarlordShipFrameInfo
LABEL $1C64 P1C64
LABEL $1C6D P1C6D
LABEL $1C8F P1C8F
LABEL $1C95 P1C95
LABEL $1CB8 P1CB8
LABEL $1DA2 WarlordShipBody
LABEL $1DBE WarlordShipTopBottom
LABEL $1DDA WarlordShipSideFinVectorTable_1
LABEL $1E6A WarlordShipSideFinVectorTable_2
LABEL $1D10 P1D10
LABEL $1CF4 P1CF4
LABEL $1CFC P1CFC
LABEL $1D28 P1D28
LABEL $1D3F P1D3F
LABEL $1D62 WarlordShipTarget_1
LABEL $1D72 WarlordShipTarget_2
LABEL $1D82 WarlordShipTarget_3
LABEL $1D92 WarlordShipTarget_4
LABEL $1DE2 WarlordShipSideFins_1
LABEL $1E04 WarlordShipSideFins_2
LABEL $1E26 WarlordShipSideFins_3
LABEL $1E48 WarlordShipSideFins_4
LABEL $1E72 WarlordShipSideFin_5
LABEL $1E94 WarlordShipSideFin_6
LABEL $1EB6 WarlordShipSideFin_7
LABEL $1ED8 WarlordShipSideFin_8
LABEL $2000 *
COMMENT_LINE $0000 can be assembled correctly now
COMMENT_LINE $0000 compatibilty added by Malban
COMMENT_LINE $0000 assenmble with comand line:
COMMENT_LINE $0000 .\ass\as09.exe -w200 -h0 -l -mcti narrow.asm >error
COMMENT_LINE $0000 used the 6809 assembler:
COMMENT_LINE $0000 as09 [1.11].
COMMENT_LINE $0000 Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT_LINE $0000 Available at:
COMMENT_LINE $0000 http://www.falstaff.demon.co.uk/cross.html
COMMENT_LINE $0000 This work was originally done by Fred Taft (fred@.cv.hp.com).
COMMENT_LINE $0000 Please forward any comments, corrections or additions back to Fred.
COMMENT_LINE $0000 Note that the work here is incomplete, especially in the area of the
COMMENT_LINE $0000 headset control and the sound code.  If you can decipher this code further,
COMMENT_LINE $0000 please repost it, so that the rest of us can benefit from your knowledge.
COMMENT_LINE $0000 Narrow Escape
COMMENT_LINE $0000 *****************************************************************************
COMMENT_LINE $0000 OVERVIEW:
COMMENT_LINE $0000 ---------
COMMENT_LINE $0000 Unlike all previous games, which simply drew lines in any order, and
COMMENT_LINE $0000 incorporated color using an overlay, Narrow Escape was one of the first
COMMENT_LINE $0000 games to use the headset and a color wheel to give the impression that
COMMENT_LINE $0000 red, green or blue lines were simultaneously being drawn, without the
COMMENT_LINE $0000 use of an overlay.  In a nutshell, the color wheel is designed such
COMMENT_LINE $0000 that only one eye sees what is being drawn at any given time.  For
COMMENT_LINE $0000 the viewing eye, the color wheel is partitioned into a red, a green and
COMMENT_LINE $0000 a blue section.  When the red section is in front of the player's eye,
COMMENT_LINE $0000 the Vectrex will draw the red vectors for the given eye; when the green
COMMENT_LINE $0000 section comes in front of the eye, the game will then draw the green
COMMENT_LINE $0000 vectors for that eye.  If a color requires a large number of vectors to
COMMENT_LINE $0000 be drawn, then that color will occupy a greater portion of the color wheel.
COMMENT_LINE $0000 The order in which things are drawn are:
COMMENT_LINE $0000 1) Right eye blue.
COMMENT_LINE $0000 2) Right eye green.
COMMENT_LINE $0000 3) Right eye red.
COMMENT_LINE $0000 4) Left eye blue.
COMMENT_LINE $0000 5) Left eye green.
COMMENT_LINE $0000 6) Left eye red.
COMMENT_LINE $0000 The main drawing function determines when to start drawing a particular
COMMENT_LINE $0000 color, by comparing the refresh timer value against a table of known
COMMENT_LINE $0000 values; since they known (ideally) how long it should take for a segment
COMMENT_LINE $0000 of the color wheel to become visible, they can use hardcoded values.
COMMENT_LINE $0000 To accomplish the drawing described above, this game implements the
COMMENT_LINE $0000 concept of 'frames'.  This games uses approximately 10 of these frames.
COMMENT_LINE $0000 Each frame contains all of the information needed to draw a given item;
COMMENT_LINE $0000 i.e. a string, or part of a figure.  Some frames have dedicated uses,
COMMENT_LINE $0000 while others may be used for different things, depending upon the state
COMMENT_LINE $0000 of the game; i.e. the frame used to contain the vector list for the
COMMENT_LINE $0000 Warship side fins is not used for anything else; however, the frame
COMMENT_LINE $0000 used to display the first bullet fired by the player, is also used at
COMMENT_LINE $0000 times to display the player's ship count, or the "Game Over" string.
COMMENT_LINE $0000 During a particular pass, the game will, for instance, ask for the next
COMMENT_LINE $0000 red frame; if one if found, then its contents are drawn; if one is not
COMMENT_LINE $0000 found, then it will wait to move onto the next color or next eye.
COMMENT_LINE $0000 HEADSET CONTROL:
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 I put a lot of effort into trying to decipher the code which controls
COMMENT_LINE $0000 the headset.  In some areas I succeeded in figuring out what was happening,
COMMENT_LINE $0000 but in others, I failed.  I do know that it uses a PID algorithm
COMMENT_LINE $0000 (Proportional/Integral/Differential) for controlling the velocity of
COMMENT_LINE $0000 the color wheel.  It appears to take a collection of samplings, to
COMMENT_LINE $0000 determine if the wheel is spinning too fast or too slow, and based upon
COMMENT_LINE $0000 this collection of samplings, and the previous 3 samplings, adjusts the
COMMENT_LINE $0000 rate at which the colorwheel spins.
COMMENT_LINE $0000 *****************************************************************************
COMMENT_LINE $0000 The following the the memory map for Narrow Escape RAM usage:
COMMENT_LINE $0000 C875-C876    Pointer to the next player frame.
COMMENT_LINE $0000 C880         Tolerance value; used during collision detection.  If the
COMMENT_LINE $0000 distance between two objects is within the tolerance range,
COMMENT_LINE $0000 then they are considered to have collided.
COMMENT_LINE $0000 C881         Boolean: flags if bonus has been given for score > 20000.
COMMENT_LINE $0000 C882         Unknown usage contains some info about enemy ship.
COMMENT_LINE $0000 C883         Number of fuel cannisters (and walls) for current level.
COMMENT_LINE $0000 C884         Unknown use: = to 4, if level <= 5, else = to 5.
COMMENT_LINE $0000 C885         Number of enemy ships for current level.
COMMENT_LINE $0000 C886-C887    BCD value associated with current enemy ship.
COMMENT_LINE $0000 C888         Boolean: indicates if player destroyed an enemy.
COMMENT_LINE $0000 C889         Boolean: indicates whether an enemy start is visible; 0 = no,
COMMENT_LINE $0000 $FF = yes.
COMMENT_LINE $0000 C88A-C88B    Pointer to enemy ship vector list.
COMMENT_LINE $0000 C88C         Indicates the number of hits needed to destroy the warlord ship.
COMMENT_LINE $0000 C88D-C88E    16-bit x movement delta for enemy ship.
COMMENT_LINE $0000 C88F-C890    16-bit y movement delta for enemy ship.
COMMENT_LINE $0000 C891         Work memory.
COMMENT_LINE $0000 C892         Work memory.
COMMENT_LINE $0000 C893-C894    Work memory.
COMMENT_LINE $0000 C895-C896    Unused.
COMMENT_LINE $0000 C897         Loop counter.
COMMENT_LINE $0000 C898-C89A    Unused.
COMMENT_LINE $0000 C89B         Bitmask: appears to indicate which sounds should be made:
COMMENT_LINE $0000 $01 = Normal game noise
COMMENT_LINE $0000 $02 = Enemy ship coming
COMMENT_LINE $0000 $08 = Player passed through fuel wall opening
COMMENT_LINE $0000 $10 = Player picked up fuel
COMMENT_LINE $0000 $20 = Player fired a bullet
COMMENT_LINE $0000 $40 = Player out of fuel
COMMENT_LINE $0000 $80 = Enemy ship hit or player hit fuel wall.
COMMENT_LINE $0000 C89C         Used somehow by the sound functions.
COMMENT_LINE $0000 C89D         Used somehow by the sound functions.
COMMENT_LINE $0000 C89E         Used somehow by the sound functions.
COMMENT_LINE $0000 C89F         Bitmask: appears to indicate which sounds are currently
COMMENT_LINE $0000 allowed; assumes same meaning as C89B.
COMMENT_LINE $0000 C8A0         Used somehow by the sound functions.
COMMENT_LINE $0000 C8A1         Used somehow by the sound functions.
COMMENT_LINE $0000 C8A2         Controls sound characteristics (0,1).
COMMENT_LINE $0000 C8A3         Used somehow by the sound functions.
COMMENT_LINE $0000 C8A4         Unknown usage contains some info about enemy ship.
COMMENT_LINE $0000 C8A5         Boolean: appears to also indicate if player has collided with
COMMENT_LINE $0000 the enemy ship (see C8BA).
COMMENT_LINE $0000 C8A6         Boolean: flags whether we are drawing for the left eye ($FF)
COMMENT_LINE $0000 or the right eye ($00).
COMMENT_LINE $0000 C8A7-C8AA    Unused.
COMMENT_LINE $0000 C8AB-C8AC    Indirect jump pointer; indicates main processing function.
COMMENT_LINE $0000 C8AD-C8AE    Counter.
COMMENT_LINE $0000 C8AF         Boolean: indicates whether the passage walls should be
COMMENT_LINE $0000 drawn ($FF).  When player first enters a new level, the
COMMENT_LINE $0000 walls are not initially drawn.
COMMENT_LINE $0000 C8B0         Boolean: indicates if player picked up fuel cannister ($FF).
COMMENT_LINE $0000 C8B1         During normal play, indicates the number of enemy ships
COMMENT_LINE $0000 destroyed.  During battle with the warlord ship, indicates
COMMENT_LINE $0000 the number of hits on the warlord ship.
COMMENT_LINE $0000 C8B2         Boolean: indicates that player has completed the current
COMMENT_LINE $0000 level ($FF).  Used both for enemy levels, and fuel levels.
COMMENT_LINE $0000 C8B3         Unused.
COMMENT_LINE $0000 C8B4         Number of fuel components (walls and cannisters) created
COMMENT_LINE $0000 so far.
COMMENT_LINE $0000 C8B5         Boolean: controls whether a fuel wall ($00) or a fuel
COMMENT_LINE $0000 cannister ($FF) is drawn next.
COMMENT_LINE $0000 C8B6         Index in range 0-2; used during drawing of fuel walls and
COMMENT_LINE $0000 cannisters to index into an array which specifies the color
COMMENT_LINE $0000 used when drawing the fuel component.
COMMENT_LINE $0000 C8B7-C8B8    Alternate scale factor; used during drawing of when some
COMMENT_LINE $0000 objects are exploding.
COMMENT_LINE $0000 C8B9         Boolean: indicates if the player's ship is done
COMMENT_LINE $0000 exploding ($FF).
COMMENT_LINE $0000 C8BA         Boolean: flags if enemy ship and player have collided;
COMMENT_LINE $0000 $00= no collision, $FF = collision.
COMMENT_LINE $0000 C8BB         Velocity of enemy star; used to update 'y' value.
COMMENT_LINE $0000 C8BC         Boolean: flags if enemy star and player have collided;
COMMENT_LINE $0000 $00= no collision, $FF = collision.
COMMENT_LINE $0000 C8BD         Current level (0-?).  Also used to calculate the number of
COMMENT_LINE $0000 enemy ships for the level (level + 6), and the number of
COMMENT_LINE $0000 fuel cannisters ((level* 2) + 5).  Also used to control
COMMENT_LINE $0000 which enemy ship is used for this level.
COMMENT_LINE $0000 C8BE-C8C5    String Buffer: Ship count. Default = "SHIPS 3",$80.
COMMENT_LINE $0000 C8C6-C8CC    String Buffer: Player's score. Default = "     0",$80.
COMMENT_LINE $0000 C8CD         Unused.
COMMENT_LINE $0000 C8CE         Unknown usage.
COMMENT_LINE $0000 C8CF-C8D0    Unused.
COMMENT_LINE $0000 C8D1-C8D2    Unknown usage.
COMMENT_LINE $0000 C8D3         Unused.
COMMENT_LINE $0000 C8D4         Unknown usage.
COMMENT_LINE $0000 C8D5-C8D6    Unused.
COMMENT_LINE $0000 C8D7-C8F8    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Player's ship.
COMMENT_LINE $0000 C8F9-C91A    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Players first bullet.
COMMENT_LINE $0000 "Game Over" string (after game ends).
COMMENT_LINE $0000 Player's ship count.
COMMENT_LINE $0000 C91B-C93C    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Players second bullet.
COMMENT_LINE $0000 Player's last score (after game ends, or between levels).
COMMENT_LINE $0000 C93D-C95E    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Players third bullet.
COMMENT_LINE $0000 C95F-C980    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Enemy star.
COMMENT_LINE $0000 Warlord ship's bullet.
COMMENT_LINE $0000 C981-C9A2    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Enemy ship.
COMMENT_LINE $0000 Warlord ship's target area.
COMMENT_LINE $0000 Player's ship count
COMMENT_LINE $0000 C9A3-C9C4    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Warlord ship's body.
COMMENT_LINE $0000 Player's score.
COMMENT_LINE $0000 C9C5-C9E6    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Warlord ship's body.
COMMENT_LINE $0000 C9E7-CA08    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Warlord ship's top and bottom fins.
COMMENT_LINE $0000 CA09-CA2A    34 byte Frame buffer; see note 1 below.
COMMENT_LINE $0000 Warlord ship's side fins.
COMMENT_LINE $0000 CA2B-CA32    8  byte end-of-frame stack indicator.
COMMENT_LINE $0000 CA33-CA74    Unused.
COMMENT_LINE $0000 CA75-CA76    Frame Pointer: points to the next drawing frame to be processed.
COMMENT_LINE $0000 CA77         Number of units of fuel the player has; also used as the
COMMENT_LINE $0000 scale factor when drawing the fuel bar.
COMMENT_LINE $0000 CA78-CA79    Unused.
COMMENT_LINE $0000 CA7A         Indicates the number of fuel units consumed per pass through
COMMENT_LINE $0000 the game's main loop.
COMMENT_LINE $0000 CA7B-CA7C    Unused.
COMMENT_LINE $0000 CA7D         Boolean: indicates if the user is completely out of fuel ($FF).
COMMENT_LINE $0000 CA7E         Boolean: flags that the player is low on fuel ($FF).
COMMENT_LINE $0000 CA7F         Boolean: indicates if goggle sync has been received.
COMMENT_LINE $0000 CA80         Unused.
COMMENT_LINE $0000 CA81         Scale factor used by some of the drawing functions.
COMMENT_LINE $0000 CA82         Loop counter used during some drawing.
COMMENT_LINE $0000 CA83         Scale factor used by some drawing functions.
COMMENT_LINE $0000 CA84-CA85    Unused.
COMMENT_LINE $0000 CA86         Number of times the IRQ happed*after* the refresh timer
COMMENT_LINE $0000 elapsed for this = of 8 samplings.
COMMENT_LINE $0000 CA87         Number of times the IRQ happed*after* the refresh timer
COMMENT_LINE $0000 elapsed for (pass-1) = of 8 samplings.
COMMENT_LINE $0000 CA88         Number of times the IRQ happed*after* the refresh timer
COMMENT_LINE $0000 elapsed for (pass-2) = of 8 samplings.
COMMENT_LINE $0000 CA89         Number of times the IRQ happed*after* the refresh timer
COMMENT_LINE $0000 elapsed for (pass-3) = of 8 samplings.
COMMENT_LINE $0000 CA8A         Loop counter used by IRQ handler; starts at 8, and decrements
COMMENT_LINE $0000 each time IRQ triggers.  Main portion of IRQ code only
COMMENT_LINE $0000 executes when this decrements to 0.  Allows a group of
COMMENT_LINE $0000 'samplings' to be taken, before attempting to modify the
COMMENT_LINE $0000 velocity of the headset.
COMMENT_LINE $0000 CA8B         Assigned a value, but never reference.
COMMENT_LINE $0000 CA8C         Used by IRQ handler to adjust headset velocity.
COMMENT_LINE $0000 CA8D         Used by IRQ handler to adjust headset velocity.
COMMENT_LINE $0000 CA8E         Used by IRQ handler.
COMMENT_LINE $0000 CA90-????    Buffer used by sound routines.
COMMENT_LINE $0000 *****************************************************************************
COMMENT_LINE $0000 NOTES:
COMMENT_LINE $0000 ------
COMMENT_LINE $0000 Note 1:      Frame Structure
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 0  | Initial y drawing position
COMMENT_LINE $0000 -
COMMENT_LINE $0000 1  | Initial x drawing position
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 2  | Unknown
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 3  | Scale Factor used when moving to above position,
COMMENT_LINE $0000 -
COMMENT_LINE $0000 4  | and for during some drawing.
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 5  | Scale Factor used for some drawing, such as embedded
COMMENT_LINE $0000 -
COMMENT_LINE $0000 6  | objects (fuel cells and fuel wall openings)
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 7  | Frame identifier (See Note 2)
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 8  | Intensity
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 9  | Vector table or vector list or string address
COMMENT_LINE $0000 -
COMMENT_LINE $0000 A  | for the left eye
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 B  | Vector table vector list or string address
COMMENT_LINE $0000 -
COMMENT_LINE $0000 C  | for the right eye
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 D  | 16-bit X position,
COMMENT_LINE $0000 -
COMMENT_LINE $0000 E  | for enemy ship
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 F  | 16-bit Y position,
COMMENT_LINE $0000 -
COMMENT_LINE $0000 10 | for enemy ship
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 11 | 16-bit X movement delta,
COMMENT_LINE $0000 -
COMMENT_LINE $0000 12 | for enemy ship
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 13 | 16-bit Y movement delta,
COMMENT_LINE $0000 -
COMMENT_LINE $0000 14 | for enemy ship
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 15 | X bounding box min
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 16 | X bounding box max
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 17 | Y bounding box min
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 18 | Y bounding box max
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 19 | Unused
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 1A | Unused
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 1B | Player State (See Note 3)
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 1C | Embedded object (y,x) location; used for fuel
COMMENT_LINE $0000 -
COMMENT_LINE $0000 1D | wall openings and fuel cells.
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 1E | Explosion happening flag ($FF = explosion)
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 1F | Explosion duration counter
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 20 | Pointer to the drawing function
COMMENT_LINE $0000 -
COMMENT_LINE $0000 21 | associated with this frame object
COMMENT_LINE $0000 ----------------
COMMENT_LINE $0000 Note 2:      Frame Identifier
COMMENT_LINE $0000 Each frame has an identifier, which indicates what color
COMMENT_LINE $0000 it should be drawn with, and whether or not it is still
COMMENT_LINE $0000 visible.
COMMENT_LINE $0000 $01 = Blue
COMMENT_LINE $0000 $02 = Green
COMMENT_LINE $0000 $03 = Red
COMMENT_LINE $0000 $FF = End of frame stack
COMMENT_LINE $0000 or'ed with $10 = Frame not visible
COMMENT_LINE $0000 Note 3:      Player State
COMMENT_LINE $0000 $00 = Player is in the enemy passage.
COMMENT_LINE $0000 $FF = Player is in the fuel passage.
COMMENT_LINE $0000 *****************************************************************************
COMMENT_LINE $0000 bios routines
COMMENT_LINE $0000 bios data
COMMENT $000D * height
COMMENT $000E * width
COMMENT $000F * rel y
COMMENT $0010 * rel x
COMMENT $0018 * height
COMMENT $0019 * width
COMMENT $001A * rel y
COMMENT $001B * rel y
FORCE_SYMBOL $0024 reinit
FORCE_SYMBOL $0027 init_music_buf
FORCE_SYMBOL $002A do_sound
FORCE_NO_SYMBOL $002D
COMMENT $002F * Set joystick approximation factor
FORCE_NO_SYMBOL $002F
COMMENT $0032 * Disable console 2 joysticks
FORCE_NO_SYMBOL $0032
COMMENT $0035 * Disable console 2 joysticks
FORCE_NO_SYMBOL $0035
FORCE_SYMBOL $0038 StartupNewGame
COMMENT $003B * Set the indirect jump ptr
FORCE_NO_SYMBOL $003B
COMMENT $003E * Clear sound bitmask
FORCE_NO_SYMBOL $003E
FORCE_NO_SYMBOL $0041
FORCE_NO_SYMBOL $0044
COMMENT $0046 * Set sound characteristics index
FORCE_NO_SYMBOL $0046
FORCE_NO_SYMBOL $0049
COMMENT $004C * Set refresh timer = 0.0382 sec
FORCE_NO_SYMBOL $004C
FORCE_NO_SYMBOL $004F
FORCE_NO_SYMBOL $0052
FORCE_NO_SYMBOL $0055
COMMENT $0058 * Init IRQ handler's loop counter
FORCE_NO_SYMBOL $0058
FORCE_NO_SYMBOL $005B
FORCE_NO_SYMBOL $005E
FORCE_NO_SYMBOL $0061
COMMENT $0064 * Set up IRQ interrupt vector: JMP
FORCE_NO_SYMBOL $0064
FORCE_NO_SYMBOL $0067
FORCE_SYMBOL $0069 IRQ_Handler
COMMENT $006C * Set IRQ interrupt function: Sync
FORCE_NO_SYMBOL $006C
COMMENT $006F * Force goggle index to trigger off
FORCE_NO_SYMBOL $006F
COMMENT $0071 * positive edge.
FORCE_NO_SYMBOL $0071
COMMENT $0073 * Set loop counter = 0
FORCE_NO_SYMBOL $0073
COMMENT_LINE $0076 Wait for the goggle's disk to come upto speed*
FORCE_NO_SYMBOL $0076
COMMENT $0079 * Set refresh timer
FORCE_NO_SYMBOL $0079
COMMENT $007B * Get current I/O enable setting
FORCE_NO_SYMBOL $007B
FORCE_NO_SYMBOL $007E
FORCE_NO_SYMBOL $0080
COMMENT $0082 * Config Port A as an input
FORCE_NO_SYMBOL $0082
FORCE_NO_SYMBOL $0087
COMMENT $008A * Get current I/O enable setting
FORCE_NO_SYMBOL $008A
FORCE_NO_SYMBOL $008D
FORCE_NO_SYMBOL $008F
COMMENT $0091 * Config Port A as an output
FORCE_NO_SYMBOL $0091
COMMENT $0094 * Write $80 to Port A
FORCE_NO_SYMBOL $0094
FORCE_SYMBOL $0097 byte_2_sound_chip
COMMENT $009A * Set timing loop value
FORCE_NO_SYMBOL $009A
COMMENT $009D * Delay for awhile
COMMENT $009F * Write $FF to Port A
FORCE_NO_SYMBOL $009F
FORCE_SYMBOL $00A2 byte_2_sound_chip
FORCE_NO_SYMBOL $00A5
FORCE_NO_SYMBOL $00A8
FORCE_NO_SYMBOL $00AA
COMMENT $00AC * Set Port A as an input
FORCE_NO_SYMBOL $00AC
COMMENT $00B1 * See if the goggle's sync line
FORCE_NO_SYMBOL $00B1
COMMENT $00B4 * has gone from off to on.
COMMENT $00B7 * Sync line changed
FORCE_NO_SYMBOL $00B9
COMMENT $00BE * If the refresh timer elapsed, then
FORCE_NO_SYMBOL $00BE
COMMENT $00C0 * the goggle disk is not yet upto
FORCE_NO_SYMBOL $00C0
COMMENT $00C2 * speed; go thru another pass.
COMMENT $00C4 * The disk is now upto speed; for
FORCE_NO_SYMBOL $00C4
COMMENT $00C7 * good measure, repeat, for a
FORCE_NO_SYMBOL $00C7
COMMENT $00CA * total of 3 times.
FORCE_NO_SYMBOL $00CA
COMMENT_LINE $00D0 GetGoggleIndexState()
COMMENT_LINE $00D0 Check to see if the color wheel index has been seen.
COMMENT_LINE $00D0 Exit: a = state of goggle index signal
COMMENT_LINE $00D0 0 => index signal not seen
COMMENT_LINE $00D0 !=0 => index signal seen
FORCE_NO_SYMBOL $00D0
FORCE_NO_SYMBOL $00D2
FORCE_NO_SYMBOL $00D4
FORCE_NO_SYMBOL $00D7
FORCE_NO_SYMBOL $00DA
COMMENT $00DC * Set Port A lines as inputs
FORCE_NO_SYMBOL $00DC
FORCE_NO_SYMBOL $00DE
FORCE_NO_SYMBOL $00E1
COMMENT $00E4 * Read Port A lines
FORCE_NO_SYMBOL $00E4
FORCE_NO_SYMBOL $00E7
FORCE_NO_SYMBOL $00E9
COMMENT $00EB * Set Port A lines as outputs
FORCE_NO_SYMBOL $00EB
FORCE_NO_SYMBOL $00ED
COMMENT_LINE $00F0 Main loop for this game.  Reads buttons and joystick,
COMMENT_LINE $00F0 does drawing, and then wait for the IRQ.
FORCE_SYMBOL $00F0 set_refresh
FORCE_NO_SYMBOL $00F3
COMMENT $00F6 * Set refresh timer
FORCE_NO_SYMBOL $00F6
FORCE_NO_SYMBOL $00F8
FORCE_NO_SYMBOL $00FB
FORCE_NO_SYMBOL $00FD
COMMENT $00FF * Config Port A as an input
FORCE_NO_SYMBOL $00FF
FORCE_SYMBOL $0102 read_switches2
FORCE_NO_SYMBOL $0105
FORCE_NO_SYMBOL $0108
FORCE_NO_SYMBOL $010A
COMMENT $010C * Config Port A as an output
FORCE_NO_SYMBOL $010C
COMMENT $010F * Write $80 to Port A
FORCE_NO_SYMBOL $010F
FORCE_SYMBOL $0112 byte_2_sound_chip
FORCE_NO_SYMBOL $0115
FORCE_NO_SYMBOL $0118
COMMENT $011B * Clear goggle index intrpt flag
FORCE_NO_SYMBOL $011B
COMMENT $011D * Enable goggle index intrpt (IRQ)
FORCE_NO_SYMBOL $011D
FORCE_NO_SYMBOL $011F
COMMENT $0122 * For each pass, increment the
FORCE_NO_SYMBOL $0122
COMMENT $0125 * 'refresh timer expired' counter.
FORCE_NO_SYMBOL $0125
FORCE_SYMBOL $0128 DoDrawing
COMMENT $012B * Disable joystick approximation
FORCE_NO_SYMBOL $012B
FORCE_SYMBOL $012E read_jstick
FORCE_SYMBOL $0131 P0353
FORCE_NO_SYMBOL $0134
FORCE_NO_SYMBOL $0137
COMMENT $0139 * Timing loop
FORCE_NO_SYMBOL $013C
COMMENT $013F * Enable IRQ & wait for goggle index
FORCE_NO_SYMBOL $013F
COMMENT_LINE $0141 * interrupt.
FORCE_SYMBOL $0141 do_sound
FORCE_NO_SYMBOL $0144
FORCE_SYMBOL $0147 dptoC8
FORCE_SYMBOL $014A P14EB
FORCE_SYMBOL $014D dptoD0
COMMENT_LINE $0151 DrawVectorList()
COMMENT_LINE $0151 Entry:
COMMENT_LINE $0151 b = scale factor
COMMENT_LINE $0151 x = ptr to vector list of form:
COMMENT_LINE $0151 mode, y, x
COMMENT_LINE $0151 mode, y, x
COMMENT_LINE $0151 .
COMMENT_LINE $0151 $01
COMMENT_LINE $0151 where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT_LINE $0151 This function draws a list of vectors.
COMMENT $0151 * Save scale factor
FORCE_NO_SYMBOL $0151
COMMENT $0153 * Load the y position
FORCE_NO_SYMBOL $0153
COMMENT $0155 * Write y value
FORCE_NO_SYMBOL $0155
FORCE_NO_SYMBOL $0157
COMMENT $0159 * Load the line pattern
FORCE_NO_SYMBOL $0159
FORCE_NO_SYMBOL $015B
FORCE_NO_SYMBOL $015D
COMMENT $015F * Write x value
FORCE_NO_SYMBOL $015F
COMMENT $0161 * Write the line pattern
FORCE_NO_SYMBOL $0161
FORCE_NO_SYMBOL $0163
FORCE_NO_SYMBOL $0165
COMMENT $0168 * Wait for the timer interrupt
FORCE_NO_SYMBOL $0168
COMMENT $016E * Clear the line pattern
FORCE_NO_SYMBOL $016E
COMMENT $0170 * Check the mode for the next pt
FORCE_NO_SYMBOL $0170
COMMENT $0172 * Keep drawing, until mode = $01
COMMENT_LINE $0175 DrawAnimatedVectorList_Slow()
COMMENT_LINE $0175 Entry:
COMMENT_LINE $0175 b = scale factor
COMMENT_LINE $0175 x = ptr to 4 entry table of vector ptrs; each of the
COMMENT_LINE $0175 entries points to a vector list having the following
COMMENT_LINE $0175 form:
COMMENT_LINE $0175 mode, y, x
COMMENT_LINE $0175 mode, y, x
COMMENT_LINE $0175 .
COMMENT_LINE $0175 $01
COMMENT_LINE $0175 where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT_LINE $0175 This function uses a system loop counter (C826)/4 to
COMMENT_LINE $0175 determine which of the 4 vector lists to draw.  This
COMMENT_LINE $0175 formula causes the visuals to change every 4th time
COMMENT_LINE $0175 through the processing loop.
FORCE_NO_SYMBOL $0175
FORCE_NO_SYMBOL $017A
COMMENT_LINE $0181 DrawAnimatedVectorList_Fast()
COMMENT_LINE $0181 Entry:
COMMENT_LINE $0181 b = scale factor
COMMENT_LINE $0181 x = ptr to 4 entry table of vector ptrs; each of the
COMMENT_LINE $0181 entries points to a vector list having the following
COMMENT_LINE $0181 form:
COMMENT_LINE $0181 mode, y, x
COMMENT_LINE $0181 mode, y, x
COMMENT_LINE $0181 .
COMMENT_LINE $0181 $01
COMMENT_LINE $0181 where mode = $00 (move), $FF (draw) or $01 (end).
COMMENT_LINE $0181 This function uses a system loop counter (C826) to
COMMENT_LINE $0181 determine which of the 4 vector lists to draw.  This
COMMENT_LINE $0181 formula causes the visuals to change every time
COMMENT_LINE $0181 through the processing loop.
FORCE_NO_SYMBOL $0181
COMMENT_LINE $0186 DrawWithMixedScaleFactors()
COMMENT_LINE $0186 Entry:
COMMENT_LINE $0186 b = scale factor
COMMENT_LINE $0186 C8B7 = alternate scale factor
COMMENT_LINE $0186 x = ptr to vector list, of the form:
COMMENT_LINE $0186 mode, y, x
COMMENT_LINE $0186 mode, y, x
COMMENT_LINE $0186 .
COMMENT_LINE $0186 $01
COMMENT_LINE $0186 where mode = $00 (move), $FF (draw) $01 (end), or
COMMENT_LINE $0186 $02 (move using alternate scale factor)
COMMENT_LINE $0186 This function draws a series of vectors.  Usually, the
COMMENT_LINE $0186 incoming scale factor will be used.  However, if the
COMMENT_LINE $0186 mode is $02, then the alternate scale factor (in C8B7)
COMMENT_LINE $0186 is used, and the operation is treated as a 'move'.
COMMENT $0186 * Save the incoming scale factor
COMMENT $0188 * Load the incoming scale factor
FORCE_NO_SYMBOL $0188
COMMENT $018A * Write the scale factor
FORCE_NO_SYMBOL $018A
COMMENT $018C * Load the y,x values
FORCE_NO_SYMBOL $018C
COMMENT $018E * Write the y value
FORCE_NO_SYMBOL $018E
FORCE_NO_SYMBOL $0190
COMMENT $0192 * Load the mode value
FORCE_NO_SYMBOL $0192
COMMENT $0194 * Use alternate scale factor?
COMMENT $0196 * Yes
FORCE_NO_SYMBOL $0196
COMMENT $0199 * Write the alternate scale factor
FORCE_NO_SYMBOL $0199
COMMENT $019B * Treat like a move request
FORCE_NO_SYMBOL $019C
FORCE_NO_SYMBOL $019E
COMMENT $01A0 * Write the x value
FORCE_NO_SYMBOL $01A0
COMMENT $01A2 * Write the line pattern
FORCE_NO_SYMBOL $01A2
FORCE_NO_SYMBOL $01A4
FORCE_NO_SYMBOL $01A6
COMMENT $01A9 * Wait for the timer interrupt
FORCE_NO_SYMBOL $01A9
COMMENT $01AF * Clear the line pattern
FORCE_NO_SYMBOL $01AF
COMMENT $01B1 * Look at mode for next endpoint
FORCE_NO_SYMBOL $01B1
COMMENT $01B3 * Time to quit?
FORCE_NO_SYMBOL $01B3
COMMENT $01B7 * Yes
FORCE_SYMBOL $01B9 P0353
COMMENT_LINE $01BC NE_DrawDots()
COMMENT_LINE $01BC Entry:
COMMENT_LINE $01BC b = scale factor
COMMENT_LINE $01BC x = ptr to vector list, of the form:
COMMENT_LINE $01BC mode, y, x
COMMENT_LINE $01BC mode, y, x
COMMENT_LINE $01BC .
COMMENT_LINE $01BC $01
COMMENT_LINE $01BC where mode = $01 (end), else all others (move and
COMMENT_LINE $01BC then draw a dot).
COMMENT_LINE $01BC This function ignores the 'mode' field, except for
COMMENT_LINE $01BC using it to tag the end of the vector list.  It will
COMMENT_LINE $01BC move to the indicated (y,x) position, and will then
COMMENT_LINE $01BC draw a dot.
COMMENT $01BC * Save the scale factor
FORCE_NO_SYMBOL $01BC
COMMENT $01BE * Load the y,x values
FORCE_NO_SYMBOL $01BE
COMMENT $01C0 * Write the y value
FORCE_NO_SYMBOL $01C0
FORCE_NO_SYMBOL $01C2
COMMENT $01C4 * Load the line pattern
COMMENT $01C5 * Advance to next vector entry
FORCE_NO_SYMBOL $01C5
FORCE_NO_SYMBOL $01C7
COMMENT $01C9 * Write the x value
FORCE_NO_SYMBOL $01C9
COMMENT $01CB * Clear the line pattern
FORCE_NO_SYMBOL $01CB
FORCE_NO_SYMBOL $01CD
FORCE_NO_SYMBOL $01CF
COMMENT $01D2 * Wait for the timer interrupt
FORCE_NO_SYMBOL $01D2
COMMENT $01D8 * Start drawing a dot
FORCE_NO_SYMBOL $01D8
COMMENT $01DC * Stop drawing a dot
FORCE_NO_SYMBOL $01DC
COMMENT $01DE * Check mode for next endpoint
FORCE_NO_SYMBOL $01DE
COMMENT $01E0 * End of vector list?
COMMENT $01E2 * Yes
COMMENT $01E5 * Set goggle index to trigger off
FORCE_NO_SYMBOL $01E5
COMMENT $01E7 * of positive edge; also zero
FORCE_NO_SYMBOL $01E7
COMMENT $01E9 * the integrators.
COMMENT_LINE $01EA Draw4ByteVectorLists()
COMMENT_LINE $01EA Entry:
COMMENT_LINE $01EA CA81 = frame's scale factor
COMMENT_LINE $01EA x = ptr to vector list, of the form:
COMMENT_LINE $01EA mode, y, x, counter
COMMENT_LINE $01EA mode, y, x, counter
COMMENT_LINE $01EA .
COMMENT_LINE $01EA $01
COMMENT_LINE $01EA where mode = $FF (draw), $00(move) or $01 (end).
COMMENT_LINE $01EA This function will draw the indicated vectors, using
COMMENT_LINE $01EA the passed-in 8-bit scale factor, unless the counter is
COMMENT_LINE $01EA >0, in which case, it will calculate a 16-bit scale
COMMENT_LINE $01EA factor to use.
FORCE_NO_SYMBOL $01EA
COMMENT $01EC * Load the y value
FORCE_NO_SYMBOL $01EC
COMMENT $01EE * Write the y value
FORCE_NO_SYMBOL $01EE
COMMENT $01F0 * Load the counter
FORCE_NO_SYMBOL $01F0
COMMENT $01F2 * Save the counter
FORCE_NO_SYMBOL $01F2
FORCE_NO_SYMBOL $01F5
FORCE_NO_SYMBOL $01F7
COMMENT $01FA * Load frame's scale factor
FORCE_NO_SYMBOL $01FA
COMMENT $01FD * Assume hi-byte scale factor = 0
COMMENT $01FE * If counter was <= <<0, do normal
FORCE_NO_SYMBOL $01FE
COMMENT $0201 * drawing.
COMMENT $0203 * Calculate a 16 bit scale factor
FORCE_NO_SYMBOL $0203
FORCE_NO_SYMBOL $0208
FORCE_NO_SYMBOL $020A
FORCE_NO_SYMBOL $020C
COMMENT $0211 * Write the scale factor
FORCE_NO_SYMBOL $0211
COMMENT $0213 * Load the x value
FORCE_NO_SYMBOL $0213
FORCE_NO_SYMBOL $0215
COMMENT $0217 * Write the x value
FORCE_NO_SYMBOL $0217
COMMENT $0219 * Load the drawing pattern
FORCE_NO_SYMBOL $0219
COMMENT $021B * Mask (disable) IRQ
FORCE_NO_SYMBOL $021B
COMMENT $021D * Write the drawing pattern
FORCE_NO_SYMBOL $021D
COMMENT $021F * Write hi-byte of scale factore
FORCE_NO_SYMBOL $021F
FORCE_NO_SYMBOL $0221
COMMENT $0223 * Wait for timer interrupt
FORCE_NO_SYMBOL $0223
COMMENT $0227 * Advance to next endpoint
FORCE_NO_SYMBOL $0227
FORCE_NO_SYMBOL $0229
COMMENT $022B * Clear the drawing pattern
FORCE_NO_SYMBOL $022B
COMMENT $022D * Unmask (reenable) IRQ
FORCE_NO_SYMBOL $022D
FORCE_NO_SYMBOL $022F
FORCE_NO_SYMBOL $0234
FORCE_NO_SYMBOL $0238
FORCE_NO_SYMBOL $023D
COMMENT $0240 * Write $FF to Port A
FORCE_NO_SYMBOL $0240
FORCE_NO_SYMBOL $0243
FORCE_NO_SYMBOL $0246
FORCE_NO_SYMBOL $0248
COMMENT $024A * Config Port A as input
FORCE_NO_SYMBOL $024A
FORCE_NO_SYMBOL $024D
FORCE_NO_SYMBOL $0252
FORCE_NO_SYMBOL $0258
FORCE_NO_SYMBOL $025D
COMMENT $0260 * Write $FF to Port A
FORCE_NO_SYMBOL $0260
FORCE_NO_SYMBOL $0263
FORCE_NO_SYMBOL $0266
FORCE_NO_SYMBOL $0268
COMMENT $026A * Config Port A as input
FORCE_NO_SYMBOL $026A
FORCE_NO_SYMBOL $026D
COMMENT_LINE $0271 IRQ_Handler()
COMMENT_LINE $0271 This code appears to try to detect if the goggle's
COMMENT_LINE $0271 disk has slowed down too much, thus allowing the
COMMENT_LINE $0271 refresh timeout to occur*before* the disk has
COMMENT_LINE $0271 made a revolution.  When too many failures occur,
COMMENT_LINE $0271 it appears to adjust some variables, apparently
COMMENT_LINE $0271 with the hope of giving the disk time to get
COMMENT_LINE $0271 back into sync again.
COMMENT $0271 * Clear line drawing pattern
FORCE_NO_SYMBOL $0271
FORCE_NO_SYMBOL $0273
COMMENT $0275 * Did refresh timer already expire?
FORCE_NO_SYMBOL $0275
COMMENT $0277 * Yes; so mark another timeout
FORCE_NO_SYMBOL $0279
FORCE_NO_SYMBOL $027C
COMMENT $027F * Decrement the IRQ loop counter
FORCE_NO_SYMBOL $027F
COMMENT $0282 * Have we taken 8 samples?
COMMENT $0284 * Yes; process the results
COMMENT $0286 * Refresh timer elapsed
FORCE_NO_SYMBOL $0286
FORCE_NO_SYMBOL $0289
COMMENT $028C * Increment failure counter
FORCE_NO_SYMBOL $028C
COMMENT $028F * Have we taken 8 samples?
FORCE_NO_SYMBOL $028F
COMMENT $0292 * Nope; do nothing
FORCE_NO_SYMBOL $0294
COMMENT $0296 * Reset IRQ sample counter
FORCE_NO_SYMBOL $0296
COMMENT $0299 * Sum the # of failures for this
FORCE_NO_SYMBOL $0299
COMMENT $029C * pass and the previous pass.
FORCE_NO_SYMBOL $029C
FORCE_NO_SYMBOL $02A1
FORCE_NO_SYMBOL $02A4
FORCE_NO_SYMBOL $02AA
FORCE_NO_SYMBOL $02AF
FORCE_NO_SYMBOL $02B4
FORCE_NO_SYMBOL $02B9
COMMENT $02BC * Failures for (pass - 2)
FORCE_NO_SYMBOL $02BC
COMMENT $02BF * Failures for (pass - 3)
FORCE_NO_SYMBOL $02BF
FORCE_NO_SYMBOL $02C2
FORCE_NO_SYMBOL $02CF
FORCE_NO_SYMBOL $02D4
FORCE_NO_SYMBOL $02D9
FORCE_NO_SYMBOL $02DE
FORCE_NO_SYMBOL $02E1
FORCE_NO_SYMBOL $02E4
FORCE_NO_SYMBOL $02E6
FORCE_NO_SYMBOL $02EB
FORCE_NO_SYMBOL $02EE
FORCE_NO_SYMBOL $02F0
COMMENT $02F3 * Shuffle down the failure results
FORCE_NO_SYMBOL $02F3
COMMENT $02F6 * information for the last 3 passes
FORCE_NO_SYMBOL $02F6
COMMENT $02F9 * discarding the results for the
FORCE_NO_SYMBOL $02F9
COMMENT $02FC * oldest pass.
FORCE_NO_SYMBOL $02FC
COMMENT $02FF * Start w/ 0 failures for next pass
FORCE_NO_SYMBOL $02FF
COMMENT $0303 * Write $FF to Port A
FORCE_NO_SYMBOL $0303
FORCE_SYMBOL $0306 byte_2_sound_chip
FORCE_NO_SYMBOL $0309
FORCE_NO_SYMBOL $030C
FORCE_NO_SYMBOL $030E
COMMENT $0310 * Config Port A as an output
FORCE_NO_SYMBOL $0310
FORCE_SYMBOL $0313 reset0ref
FORCE_NO_SYMBOL $0316
FORCE_SYMBOL $031A ReturnFromIRQ
COMMENT_LINE $031D DrawOneEnemyPassageWall()
COMMENT_LINE $031D Entry:
COMMENT_LINE $031D x = ptr to vector list.
COMMENT_LINE $031D y = ptr to scale factor.
COMMENT_LINE $031D Draw a single wall in the enemy passage; the intensity
COMMENT_LINE $031D used is based upon the value at (0,y).
COMMENT $031D * Quit when the incoming scale
FORCE_NO_SYMBOL $031D
COMMENT $031F * factor is $FF.
FORCE_NO_SYMBOL $031F
FORCE_NO_SYMBOL $0326
COMMENT $0328 * Set scale factor = $1C
FORCE_NO_SYMBOL $0328
COMMENT $032A * Load (y,x) values
COMMENT $032C * Write y value
FORCE_NO_SYMBOL $032C
FORCE_NO_SYMBOL $032E
COMMENT $0330 * Un-zero integrators, and trigger
FORCE_NO_SYMBOL $0330
COMMENT $0332 * IRQ on positive edge.
FORCE_NO_SYMBOL $0332
FORCE_NO_SYMBOL $0334
COMMENT $0336 * Write x value
FORCE_NO_SYMBOL $0336
FORCE_NO_SYMBOL $0338
FORCE_NO_SYMBOL $033A
COMMENT $033C * Wait for scale timer interrupt
FORCE_NO_SYMBOL $033C
FORCE_NO_SYMBOL $0340
COMMENT $0342 * Save scale factor
FORCE_NO_SYMBOL $0342
COMMENT $0345 * Calculate intensity = scale+$40
FORCE_NO_SYMBOL $0345
COMMENT $0349 * If rollover, use $7F (max).
FORCE_NO_SYMBOL $0349
FORCE_SYMBOL $034B intensity_to_a
FORCE_SYMBOL $034E DrawThenZeroIntegrators
COMMENT $0353 * Zero integrators, and trigger IRQ
FORCE_NO_SYMBOL $0353
COMMENT $0355 * on positive edge.
FORCE_NO_SYMBOL $0355
FORCE_NO_SYMBOL $0357
FORCE_NO_SYMBOL $035A
COMMENT_LINE $035E DrawFuelWall()
COMMENT_LINE $035E Entry:
COMMENT_LINE $035E x = ptr to 4-byte vector list.
COMMENT_LINE $035E This function draws a fuel wall, including the appropriate
COMMENT_LINE $035E embedded fuel wall opening.
FORCE_SYMBOL $0360 FuelWall
FORCE_NO_SYMBOL $0363
FORCE_NO_SYMBOL $0365
COMMENT $0367 * Write the y value
FORCE_NO_SYMBOL $0367
FORCE_NO_SYMBOL $0369
COMMENT $036B * Set the loop counter
FORCE_NO_SYMBOL $036B
FORCE_NO_SYMBOL $036E
FORCE_NO_SYMBOL $0370
COMMENT $0373 * Get saved scale factor
FORCE_NO_SYMBOL $0373
FORCE_NO_SYMBOL $0377
FORCE_NO_SYMBOL $037C
FORCE_NO_SYMBOL $0381
FORCE_NO_SYMBOL $0383
COMMENT $0385 * Decrement loop counter
FORCE_NO_SYMBOL $0385
COMMENT $0388 * Are we done looping yet?
COMMENT $038A * Write scale factor
FORCE_NO_SYMBOL $038A
FORCE_NO_SYMBOL $038C
FORCE_NO_SYMBOL $038E
COMMENT $0390 * Write x value
FORCE_NO_SYMBOL $0390
COMMENT $0392 * Get the line drawing pattern
FORCE_NO_SYMBOL $0392
COMMENT $0394 * Disable IRQ interrupts
FORCE_NO_SYMBOL $0394
COMMENT $0396 * Write the line drawing pattern
FORCE_NO_SYMBOL $0396
COMMENT $0398 * Save hi byte of scale factor
FORCE_NO_SYMBOL $0398
FORCE_NO_SYMBOL $039A
COMMENT $039C * Wait for scale timer interrupt
FORCE_NO_SYMBOL $039C
COMMENT $03A0 * Advance ptr to next point
FORCE_NO_SYMBOL $03A0
FORCE_NO_SYMBOL $03A2
COMMENT $03A4 * Clear line drawing pattern
FORCE_NO_SYMBOL $03A4
COMMENT $03A6 * Reenable IRQ interrupts
FORCE_NO_SYMBOL $03A6
FORCE_NO_SYMBOL $03A8
FORCE_NO_SYMBOL $03AD
FORCE_NO_SYMBOL $03B1
FORCE_NO_SYMBOL $03B7
COMMENT $03BA * Write $FF to Port A
FORCE_NO_SYMBOL $03BA
FORCE_NO_SYMBOL $03BD
FORCE_NO_SYMBOL $03C0
FORCE_NO_SYMBOL $03C2
COMMENT $03C4 * Config Port A as input
FORCE_NO_SYMBOL $03C4
FORCE_NO_SYMBOL $03C7
COMMENT $03CC * Un-zero integrators, & trigger
FORCE_NO_SYMBOL $03CC
COMMENT $03CE * IRQ off positive edge.
FORCE_NO_SYMBOL $03CE
COMMENT $03D0 * Get position of embedded object
FORCE_NO_SYMBOL $03D0
COMMENT $03D3 * Write the y value
FORCE_NO_SYMBOL $03D3
FORCE_NO_SYMBOL $03D5
COMMENT $03D7 * Get embedded obj's scale factor
FORCE_NO_SYMBOL $03D7
COMMENT $03D9 * Write the scale factor
FORCE_NO_SYMBOL $03D9
FORCE_NO_SYMBOL $03DD
COMMENT $03DF * Write the x value
FORCE_NO_SYMBOL $03DF
FORCE_NO_SYMBOL $03E1
FORCE_NO_SYMBOL $03E3
COMMENT $03E5 * Wait for scale timer interrupt
FORCE_NO_SYMBOL $03E5
FORCE_SYMBOL $03EB DrawThenZeroIntegrators
COMMENT_LINE $03EF DrawFrameContents()
COMMENT_LINE $03EF Entry:
COMMENT_LINE $03EF x = frame ptr
COMMENT_LINE $03EF This function will draw the contents of the indicated
COMMENT_LINE $03EF frame.
FORCE_NO_SYMBOL $03F1
COMMENT $03F3 * Write the scale factor
FORCE_NO_SYMBOL $03F3
FORCE_NO_SYMBOL $03F5
FORCE_NO_SYMBOL $03F9
FORCE_NO_SYMBOL $03FC
FORCE_NO_SYMBOL $03FE
COMMENT $0400 * Un-zero integrators, & trigger
FORCE_NO_SYMBOL $0400
COMMENT $0402 * IRQ off positive edge.
FORCE_NO_SYMBOL $0402
FORCE_NO_SYMBOL $0404
FORCE_NO_SYMBOL $0406
FORCE_NO_SYMBOL $040C
FORCE_NO_SYMBOL $040E
FORCE_NO_SYMBOL $0410
COMMENT $0412 * Wait for timer interrupt
FORCE_NO_SYMBOL $0412
COMMENT $0416 * Load drawing (y,x) values
FORCE_NO_SYMBOL $0416
COMMENT $0418 * Write the y value
FORCE_NO_SYMBOL $0418
FORCE_NO_SYMBOL $041A
COMMENT $041C * Load scale factor
FORCE_NO_SYMBOL $041C
COMMENT $041E * Write scale factor
FORCE_NO_SYMBOL $041E
FORCE_NO_SYMBOL $0422
COMMENT $0424 * Write the x value
FORCE_NO_SYMBOL $0424
FORCE_NO_SYMBOL $0426
FORCE_NO_SYMBOL $0428
COMMENT $042A * Wait for timer interrupt
FORCE_NO_SYMBOL $042A
COMMENT $042E * Load embedded obj's scale factor
FORCE_NO_SYMBOL $042E
COMMENT $0430 * Save embedded obj's scale factor
FORCE_NO_SYMBOL $0430
COMMENT $0433 * Is player in the eneny passage
FORCE_NO_SYMBOL $0433
COMMENT $0436 * or the fuel passage?
COMMENT $0438 * In fuel passage
FORCE_NO_SYMBOL $0438
COMMENT $043A * Is this frame a fuel wall
FORCE_SYMBOL $043A FuelCannister
COMMENT $043E * or a fuel cannister?
COMMENT $0440 * Load embedded objects (y,x)
FORCE_NO_SYMBOL $0440
COMMENT $0443 * Write y value
FORCE_NO_SYMBOL $0443
FORCE_NO_SYMBOL $0445
COMMENT $0447 * Load embedded obj's scale factor
FORCE_NO_SYMBOL $0447
COMMENT $0449 * Write embedded obj's scale factor
FORCE_NO_SYMBOL $0449
FORCE_NO_SYMBOL $044D
COMMENT $044F * Write x value
FORCE_NO_SYMBOL $044F
FORCE_NO_SYMBOL $0451
FORCE_NO_SYMBOL $0453
COMMENT $0455 * Wait for timer interrupt
FORCE_NO_SYMBOL $0455
COMMENT $0459 * Load intensity value
FORCE_NO_SYMBOL $0459
FORCE_SYMBOL $045B intensity_to_a
COMMENT $045E * Load address of drawing proc
FORCE_NO_SYMBOL $045E
FORCE_NO_SYMBOL $0463
COMMENT $0468 * Load vector list # 1
FORCE_NO_SYMBOL $0468
COMMENT $046C * Load vector list # 2
FORCE_NO_SYMBOL $046C
COMMENT $046E * Save vector list ptr
FORCE_NO_SYMBOL $046E
COMMENT $0471 * Retrieve scale factor
FORCE_NO_SYMBOL $0471
COMMENT $0474 * (INDIRECT JUMP)
FORCE_NO_SYMBOL $0474
FORCE_SYMBOL $0478 P0353
COMMENT_LINE $047B EP_DrawAllBlueFramesAndWalls_LeftEye()
COMMENT_LINE $047B This function will draw all of the blue user frames,
COMMENT_LINE $047B and when that completes, will draw any blue walls.
COMMENT_LINE $047B This is only for the left eye.
COMMENT $047B * Flag we're drawing for left eye
FORCE_NO_SYMBOL $047B
COMMENT $047E ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $047E RFPtrToPlayersFF
COMMENT $0481 * Request blue frame
FORCE_NO_SYMBOL $0481
FORCE_SYMBOL $0483 LocateSpecificFrame
COMMENT $0486 * Did we find a frame?
COMMENT $0487 * Yep; so draw it
COMMENT $0489 * Nope; draw left walls
FORCE_SYMBOL $0489 LeftWalls_LeftEye
FORCE_SYMBOL $048C DrawEnemyPassageWalls
FORCE_SYMBOL $0490 DrawFrameContents
COMMENT $0493 * Check for another frame
COMMENT_LINE $0499 EP_DAGreenFramesAndWalls_LE  ; EP_DrawAllGreenFramesAndWalls_LeftEye()
COMMENT_LINE $0499 This function will draw all of the green user frames,
COMMENT_LINE $0499 and when that completes, will draw any green walls.
COMMENT_LINE $0499 This is only for the left eye.
COMMENT $0499 ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $0499 RFPtrToPlayersFF
COMMENT $049C * Request green frame
FORCE_NO_SYMBOL $049C
FORCE_SYMBOL $049E LocateSpecificFrame
COMMENT $04A1 * Did we find a frame?
COMMENT $04A2 * Yep; so draw it
COMMENT $04A4 * Nope; draw left walls
FORCE_SYMBOL $04A4 RightWalls_LeftEye
FORCE_SYMBOL $04A7 DrawEnemyPassageWalls
COMMENT $04AA * Process sounds
FORCE_SYMBOL $04AA P0141
FORCE_SYMBOL $04AE DrawFrameContents
COMMENT_LINE $04B7 EP_DrawAllRedFrames_LeftEye()
COMMENT_LINE $04B7 This function will draw all of the red user frames,
COMMENT_LINE $04B7 and when that completes, will check to see if the
COMMENT_LINE $04B7 player has hit an enemy ship or picked up fuel.
COMMENT_LINE $04B7 The drawing done is only for the left eye.
COMMENT $04B7 ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $04B7 RFPtrToPlayersFF
COMMENT $04BA * Request red frame
FORCE_NO_SYMBOL $04BA
FORCE_SYMBOL $04BC LocateSpecificFrame
COMMENT $04BF * Did we find a frame?
COMMENT $04C0 * Yep; so draw it
FORCE_SYMBOL $04C2 P0353
FORCE_SYMBOL $04C5 DrawFuelBar
COMMENT $04C8 * Load BCD value of enemy ship
FORCE_NO_SYMBOL $04C8
COMMENT $04CB * Was an enemy ship destroyed?
FORCE_NO_SYMBOL $04CB
COMMENT $04D0 * Load BCD value of fuel can
FORCE_NO_SYMBOL $04D0
COMMENT $04D3 * Did player pickup fuel can?
FORCE_NO_SYMBOL $04D3
COMMENT $04D8 * Yes; update player's score
FORCE_NO_SYMBOL $04D8
FORCE_SYMBOL $04DB add_d_to_x_in_bcd
COMMENT $04DE * Check if score > 20,000 only
FORCE_NO_SYMBOL $04DE
COMMENT $04E1 * once per game.
COMMENT $04E3 * See if player's score is
FORCE_NO_SYMBOL $04E3
COMMENT $04E6 * > 20,000.
FORCE_SYMBOL $04E6 BonusScoreLevel
FORCE_SYMBOL $04E9 compare_scores
FORCE_NO_SYMBOL $04EC
COMMENT $04F0 * Score is > 20,000
FORCE_NO_SYMBOL $04F0
COMMENT $04F2 * Disable doing check again
FORCE_NO_SYMBOL $04F2
COMMENT $04F5 * Award a bonus ship
FORCE_NO_SYMBOL $04F5
COMMENT $04F8 * Clear 'enemy destroyed' flag
FORCE_NO_SYMBOL $04F8
COMMENT $04FB * Clear 'fuel picked up' flag
FORCE_NO_SYMBOL $04FB
FORCE_SYMBOL $04FF DrawFrameContents
COMMENT_LINE $0504 These appear to not be referenced*
COMMENT_LINE $050F CheckForScoreOver20000()
COMMENT_LINE $050F Entry:
COMMENT_LINE $050F d = value to add to player's score.
COMMENT_LINE $050F Exit:
COMMENT_LINE $050F C881 = will be = to $FF, if the score is now
COMMENT_LINE $050F above 20,000; this is a flag which prevents
COMMENT_LINE $050F this check from happening again, after the
COMMENT_LINE $050F score goes over 20,000.
COMMENT_LINE $050F C8C4 = will be incremented, once the score goes
COMMENT_LINE $050F above 20,000; this awards an extra ship to
COMMENT_LINE $050F the player.
COMMENT_LINE $050F This function adds the specified value to the player's
COMMENT_LINE $050F score, and then checks to see if the player's score
COMMENT_LINE $050F is now above 20,000.
FORCE_NO_SYMBOL $050F
FORCE_SYMBOL $0512 add_d_to_x_in_bcd
COMMENT $0515 * Bypass check, if the score
FORCE_NO_SYMBOL $0515
COMMENT $0518 * is already > 20,000.
FORCE_NO_SYMBOL $051A
FORCE_SYMBOL $051D BonusScoreLevel
FORCE_SYMBOL $0520 compare_scores
FORCE_NO_SYMBOL $0523
FORCE_NO_SYMBOL $0527
COMMENT $0529 * Disable future checking
FORCE_NO_SYMBOL $0529
COMMENT $052C * Award a bonus ship
FORCE_NO_SYMBOL $052C
COMMENT_LINE $0530 EP_DABlueFramesAndWalls_RE ; EP_DrawAllBlueFramesAndWalls_RightEye()
COMMENT_LINE $0530 This function will draw all of the blue user frames,
COMMENT_LINE $0530 and when that completes, will draw any blue walls.
COMMENT_LINE $0530 This is only for the right eye.
COMMENT $0530 * Flag we're doing right eye
FORCE_NO_SYMBOL $0530
COMMENT $0533 ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $0533 RFPtrToPlayersFF
COMMENT $0536 * Request blue frame
FORCE_NO_SYMBOL $0536
FORCE_SYMBOL $0538 LocateSpecificFrame
COMMENT $053B * Did we find a frame?
COMMENT $053C * Yep, so draw it
COMMENT $053E * Nope, so draw walls
FORCE_SYMBOL $053E LeftWalls_RightEye
FORCE_SYMBOL $0541 DrawEnemyPassageWalls
FORCE_SYMBOL $0544 get_random_a2
FORCE_SYMBOL $0548 DrawFrameContents
COMMENT $054B * Check for another frame
COMMENT_LINE $0551 EP_DAGreenFramesAndWalls_RE ; EP_DrawAllGreenFramesAndWalls_RightEye()
COMMENT_LINE $0551 This function will draw all of the green user frames,
COMMENT_LINE $0551 and when that completes, will draw any green walls.
COMMENT_LINE $0551 This is only for the right eye.
COMMENT $0551 ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $0551 RFPtrToPlayersFF
COMMENT $0554 * Request green frame
FORCE_NO_SYMBOL $0554
FORCE_SYMBOL $0556 LocateSpecificFrame
COMMENT $0559 * Did we find a frame?
COMMENT $055A * Yep, so draw it
COMMENT $055C * Nope, so draw walls
FORCE_SYMBOL $055C RightWalls_RightEye
FORCE_SYMBOL $055F DrawEnemyPassageWalls
FORCE_NO_SYMBOL $0562
FORCE_SYMBOL $0565 move_penFF
FORCE_SYMBOL $0568 P0353
FORCE_SYMBOL $056B move_pen
FORCE_SYMBOL $056E P0353
FORCE_SYMBOL $0572 DrawFrameContents
COMMENT $0575 * Check for another wall
COMMENT_LINE $057B EP_DrawAllRedFrames_RightEye()
COMMENT_LINE $057B This function will draw all of the red user frames,
COMMENT_LINE $057B and when that completes, will draw the fuel bar.
COMMENT_LINE $057B This is only for the right eye.
COMMENT $057B ResetFramePtrToPlayersFirstFrame;
FORCE_SYMBOL $057B RFPtrToPlayersFF
COMMENT $057E * Request red frame
FORCE_NO_SYMBOL $057E
FORCE_SYMBOL $0580 LocateSpecificFrame
COMMENT $0583 * Did we find a frame?
COMMENT $0584 * Yep, so draw it
COMMENT $0586 * Nope, so draw fuel bar
FORCE_SYMBOL $0586 P0353
FORCE_SYMBOL $0589 DrawFuelBar
FORCE_SYMBOL $058D DrawFrameContents
COMMENT $0590 * Check for another frame
COMMENT_LINE $0592 These appear to not be referenced*
COMMENT_LINE $0596 NE_DisplayString()
COMMENT_LINE $0596 Entry:
COMMENT_LINE $0596 C82A = character cell height
COMMENT_LINE $0596 C82B = character cell width
COMMENT_LINE $0596 C82C-C82D = string ptr
COMMENT_LINE $0596 This function displays a character string at the current
COMMENT_LINE $0596 position.  It is basically identical to the string
COMMENT_LINE $0596 function in the ExecRom, with the only major difference
COMMENT_LINE $0596 being what is done after the drawing is completed.
FORCE_NO_SYMBOL $0596
FORCE_NO_SYMBOL $0599
FORCE_NO_SYMBOL $059C
FORCE_NO_SYMBOL $059E
FORCE_NO_SYMBOL $05A0
FORCE_NO_SYMBOL $05A2
FORCE_NO_SYMBOL $05A4
FORCE_NO_SYMBOL $05A8
FORCE_NO_SYMBOL $05AA
FORCE_NO_SYMBOL $05AC
FORCE_NO_SYMBOL $05B0
FORCE_NO_SYMBOL $05B2
FORCE_NO_SYMBOL $05B5
FORCE_NO_SYMBOL $05B7
FORCE_NO_SYMBOL $05BA
FORCE_NO_SYMBOL $05BD
FORCE_NO_SYMBOL $05C3
FORCE_NO_SYMBOL $05C9
FORCE_NO_SYMBOL $05CB
FORCE_NO_SYMBOL $05CD
FORCE_NO_SYMBOL $05CF
FORCE_NO_SYMBOL $05D1
FORCE_NO_SYMBOL $05D3
FORCE_NO_SYMBOL $05D8
FORCE_NO_SYMBOL $05DD
FORCE_NO_SYMBOL $05E0
FORCE_NO_SYMBOL $05E5
FORCE_NO_SYMBOL $05EB
FORCE_NO_SYMBOL $05ED
FORCE_NO_SYMBOL $05F0
FORCE_NO_SYMBOL $05F2
FORCE_NO_SYMBOL $05F4
FORCE_NO_SYMBOL $05F8
FORCE_NO_SYMBOL $05FA
FORCE_NO_SYMBOL $05FC
FORCE_NO_SYMBOL $05FE
FORCE_NO_SYMBOL $0600
FORCE_NO_SYMBOL $0604
FORCE_NO_SYMBOL $0606
FORCE_SYMBOL $0608 P0353
COMMENT_LINE $060B UpdatePlayersFuelLevel()
COMMENT_LINE $060B Entry:
COMMENT_LINE $060B CA77 = player's fuel supply
COMMENT_LINE $060B CA7A = fuel consumption rate
COMMENT_LINE $060B Every 32nd pass through the mainloop, this function will
COMMENT_LINE $060B subtract some fuel from the player's supply.  If the
COMMENT_LINE $060B player starts running low on fuel, = a flag, which will
COMMENT_LINE $060B cause the fuel bar to start flashing.  If the player is
COMMENT_LINE $060B out of fuel, then = a different flag, which will
COMMENT_LINE $060B prevent the fuel bar from drawing at all.
COMMENT $060B * Every 32nd pass, subtract out
FORCE_NO_SYMBOL $060B
COMMENT $060E * some fuel from player's supply.
FORCE_NO_SYMBOL $060E
COMMENT $0612 * Get player's fuel setting
FORCE_NO_SYMBOL $0612
COMMENT $0615 * Subtract some out
FORCE_NO_SYMBOL $0615
COMMENT $0618 * Save new fuel setting
FORCE_NO_SYMBOL $0618
COMMENT $061D * Can't have minus fuel; set to 0
FORCE_NO_SYMBOL $061D
COMMENT $0620 * Is player already low on fuel?
FORCE_NO_SYMBOL $0620
COMMENT $0625 * Is player almost out of fuel?
FORCE_NO_SYMBOL $0625
FORCE_NO_SYMBOL $0628
COMMENT $062A * Are there >= 15 units left?
COMMENT $062C * Nope; running low
FORCE_NO_SYMBOL $062C
COMMENT $062E * Flag that player is low on fuel
FORCE_NO_SYMBOL $062E
FORCE_NO_SYMBOL $0631
COMMENT $0634 * Make 'running low on fuel' sound
FORCE_NO_SYMBOL $0634
FORCE_NO_SYMBOL $0636
FORCE_NO_SYMBOL $0639
COMMENT $063C * Enable the above sound
FORCE_NO_SYMBOL $063C
FORCE_NO_SYMBOL $063E
FORCE_NO_SYMBOL $0641
COMMENT $0644 * Are there any fuel units left?
FORCE_NO_SYMBOL $0644
COMMENT $0648 * Nope; we're history
FORCE_NO_SYMBOL $0648
FORCE_NO_SYMBOL $064B
COMMENT $064D * Flag that player is out of fuel
FORCE_NO_SYMBOL $064D
COMMENT_LINE $0651 DoDrawing()
COMMENT_LINE $0651 Entry:
COMMENT_LINE $0651 C8AB = Processing function to invoke
COMMENT_LINE $0651 This function invokes the primary processing function,
COMMENT_LINE $0651 and then attempts to do some drawing.  Before doing the
COMMENT_LINE $0651 drawing, it will wait until the refresh counter has
COMMENT_LINE $0651 decremented to match a predefined checkpoint value.
COMMENT $0651 * Call main processing function
FORCE_NO_SYMBOL $0651
FORCE_SYMBOL $0655 FrameDrawingProcs
FORCE_SYMBOL $0659 RefreshCheckPoints
COMMENT $065C * Load next checkpoint value
FORCE_NO_SYMBOL $065C
FORCE_SYMBOL $0661 P0252
COMMENT $0664 * Wait until the correct part of the
FORCE_NO_SYMBOL $0664
COMMENT $0666 * color wheel is visible, before
FORCE_NO_SYMBOL $0666
COMMENT $0668 * starting to draw.
COMMENT $066E * Call drawing function
FORCE_NO_SYMBOL $066E
COMMENT $0672 * Get next checkpoint
FORCE_NO_SYMBOL $0672
FORCE_NO_SYMBOL $0676
FORCE_NO_SYMBOL $0679
FORCE_NO_SYMBOL $067D
FORCE_NO_SYMBOL $0680
FORCE_NO_SYMBOL $0683
FORCE_NO_SYMBOL $0686
FORCE_SYMBOL $068B P0738
FORCE_NO_SYMBOL $068F
FORCE_NO_SYMBOL $0692
FORCE_NO_SYMBOL $0695
FORCE_NO_SYMBOL $0699
FORCE_NO_SYMBOL $069C
FORCE_NO_SYMBOL $069F
FORCE_NO_SYMBOL $06A3
FORCE_NO_SYMBOL $06A7
FORCE_NO_SYMBOL $06AA
FORCE_NO_SYMBOL $06AE
FORCE_NO_SYMBOL $06B0
FORCE_NO_SYMBOL $06B5
FORCE_NO_SYMBOL $06B8
FORCE_NO_SYMBOL $06BB
FORCE_NO_SYMBOL $06C0
FORCE_NO_SYMBOL $06C3
FORCE_NO_SYMBOL $06C6
FORCE_NO_SYMBOL $06C9
FORCE_NO_SYMBOL $06CE
FORCE_NO_SYMBOL $06D1
FORCE_NO_SYMBOL $06D4
FORCE_NO_SYMBOL $06D7
FORCE_NO_SYMBOL $06DC
FORCE_NO_SYMBOL $06E2
FORCE_NO_SYMBOL $06E9
FORCE_NO_SYMBOL $06EB
FORCE_NO_SYMBOL $06EE
FORCE_NO_SYMBOL $06F3
FORCE_NO_SYMBOL $06F6
FORCE_NO_SYMBOL $06F8
FORCE_NO_SYMBOL $06FB
FORCE_NO_SYMBOL $06FE
FORCE_NO_SYMBOL $0700
COMMENT_LINE $0705 UpdateFramesScaleAndIntensity()
COMMENT_LINE $0705 Entry:
COMMENT_LINE $0705 x = Frame ptr
COMMENT_LINE $0705 This function recalulates the scale factors and the
COMMENT_LINE $0705 intensity values for a frame.  The intensity is calculated
COMMENT_LINE $0705 as follows:
COMMENT_LINE $0705 new intensity = new scale factor + $40
COMMENT_LINE $0705 if (new intensity < 0)   [ check for rollover ]
COMMENT_LINE $0705 new intensity = $7F (max)
COMMENT $0705 * Load 16-bit scale factor
FORCE_NO_SYMBOL $0705
COMMENT $0707 * Skip, if scale factor = 0
COMMENT $070A * Load hi-byte of scale factor
FORCE_NO_SYMBOL $070A
FORCE_NO_SYMBOL $070C
FORCE_NO_SYMBOL $070F
COMMENT $0716 * Load low-byte of scale factor
FORCE_NO_SYMBOL $0716
FORCE_NO_SYMBOL $0718
FORCE_NO_SYMBOL $071D
FORCE_NO_SYMBOL $0721
COMMENT $0724 * Save new 16-bit scale factor
FORCE_NO_SYMBOL $0724
FORCE_NO_SYMBOL $0728
FORCE_NO_SYMBOL $072B
COMMENT $072D * Recalculate intensity
FORCE_NO_SYMBOL $072D
FORCE_NO_SYMBOL $072F
FORCE_NO_SYMBOL $0733
COMMENT $0735 * Save new intensity
FORCE_NO_SYMBOL $0735
FORCE_NO_SYMBOL $0738
FORCE_NO_SYMBOL $073B
FORCE_NO_SYMBOL $073E
FORCE_NO_SYMBOL $0741
FORCE_NO_SYMBOL $0744
COMMENT_LINE $0748 LocateSpecificFrame()
COMMENT_LINE $0748 Entry:
COMMENT_LINE $0748 a = Frame identifier
COMMENT_LINE $0748 C875-C876 = Ptr to 1st frame to check
COMMENT_LINE $0748 Exit:
COMMENT_LINE $0748 a = 0 (no match) or $FF (match found)
COMMENT_LINE $0748 x = ptr to matching frame
COMMENT_LINE $0748 C875-C876 = Ptr to next frame after matching one
COMMENT_LINE $0748 This function attempts to locate the next frame in the
COMMENT_LINE $0748 sequence, having the indicated frame identifier
COMMENT_LINE $0748 (1=blue, 2=green and 3=red).
COMMENT $0748 * Save incoming frame number
FORCE_NO_SYMBOL $0748
FORCE_SYMBOL $074B P0252
COMMENT $074E * Load incoming frame number
FORCE_NO_SYMBOL $074E
COMMENT $0751 * Load addr of 1st frame
FORCE_NO_SYMBOL $0751
COMMENT $0754 * Quit when last frame found
FORCE_NO_SYMBOL $0754
COMMENT $0758 * Flag that no match was found
COMMENT $075A * Do frame numbers match?
FORCE_NO_SYMBOL $075A
COMMENT $075C * Nope; try next frame
COMMENT $075E * Yes, we want this frame
COMMENT $0760 * Get address of next frame
FORCE_NO_SYMBOL $0760
COMMENT $0763 * Save the address of next frame
FORCE_NO_SYMBOL $0763
COMMENT $0766 * Flag that a match was found
FORCE_NO_SYMBOL $0766
COMMENT $0769 * Get address of next frame
FORCE_NO_SYMBOL $0769
COMMENT $076C * Keep trying
COMMENT_LINE $076E RFPtrToPlayersFF ;ResetFramePtrToPlayersFirstFrame()
COMMENT_LINE $076E Exit:
COMMENT_LINE $076E C875-C876 = Ptr to player's first frame (C8D7)
COMMENT_LINE $076E This function sets the frame ptr (CA75) used by
COMMENT_LINE $076E LocateSpecificFrame(), to point to the player's
COMMENT_LINE $076E first frame (C8D7).
FORCE_NO_SYMBOL $076E
FORCE_NO_SYMBOL $0771
COMMENT_LINE $0775 UpdatePlayersPosition()
COMMENT_LINE $0775 This function uses the joystick positions to update
COMMENT_LINE $0775 the position of the player's ship.  The joystick must
COMMENT_LINE $0775 be moved past a certain threshold, in order for the
COMMENT_LINE $0775 ship's position to be affected.  In addition, it will
COMMENT_LINE $0775 not allow the ship to move past certain side, top and
COMMENT_LINE $0775 bottom boundaries: top = $60, bottom = $A0,
COMMENT_LINE $0775 left = $BC and right = $54.
COMMENT_LINE $0775 It should be noted that moving the joystick up causes
COMMENT_LINE $0775 the ship to move down.
COMMENT_LINE $0775 All information for the player's ship is kept in the
COMMENT_LINE $0775 frame C8D7.
COMMENT $0775 * Load addr of players ship frame
FORCE_NO_SYMBOL $0775
COMMENT $0778 * Load current y value
FORCE_NO_SYMBOL $0778
COMMENT $077A * Load joystick up/down value
FORCE_NO_SYMBOL $077A
COMMENT $077D * Check value against threshold 1
FORCE_NO_SYMBOL $077D
COMMENT $0781 * Check value against threshold 2
FORCE_NO_SYMBOL $0781
COMMENT $0785 * Update the y value only if the
FORCE_NO_SYMBOL $0785
COMMENT $0787 * ship is not already at top.
COMMENT $0789 * y = y + 4
FORCE_NO_SYMBOL $0789
COMMENT $078B * Save new y value
FORCE_NO_SYMBOL $078B
COMMENT $078F * Update the y value only if the
FORCE_NO_SYMBOL $078F
COMMENT $0791 * ship is not already at bottom.
COMMENT $0793 * y = y - 4
FORCE_NO_SYMBOL $0793
COMMENT $0795 * Save new y value
FORCE_NO_SYMBOL $0795
COMMENT $0797 * Load current x value
FORCE_NO_SYMBOL $0797
COMMENT $0799 * Load joystick left/right value
FORCE_NO_SYMBOL $0799
COMMENT $079C * Check value against threshold 1
FORCE_NO_SYMBOL $079C
COMMENT $07A0 * Check value against threshold 2
FORCE_NO_SYMBOL $07A0
COMMENT $07A4 * Update the x value only if the
FORCE_NO_SYMBOL $07A4
COMMENT $07A6 * ship not already at right edge
COMMENT $07A8 * x = x + 4
FORCE_NO_SYMBOL $07A8
COMMENT $07AA * Save new x value
FORCE_NO_SYMBOL $07AA
COMMENT $07AE * Update the x value only if the
FORCE_NO_SYMBOL $07AE
COMMENT $07B0 * ship not already at left edge
COMMENT $07B2 * x = x - 4
FORCE_NO_SYMBOL $07B2
COMMENT $07B4 * Save new x value
FORCE_NO_SYMBOL $07B4
COMMENT_LINE $07B7 ProcessEnemyStar()
COMMENT_LINE $07B7 Entry:
COMMENT_LINE $07B7 C8BB = Enemy ship velocity
COMMENT_LINE $07B7 This function takes care of processing the enemy star.
COMMENT_LINE $07B7 If the enemy star is visible, then it will update its
COMMENT_LINE $07B7 position, and check to see if it has moved off of the
COMMENT_LINE $07B7 top of the display, or if it has collided with the
COMMENT_LINE $07B7 player's ship.  If it has moved off of the top of the
COMMENT_LINE $07B7 display, then a new enemy star will start up.  When
COMMENT_LINE $07B7 a collision occurs, an explosion pattern is displayed.
COMMENT_LINE $07B7 All information about the enemy star is kept in the
COMMENT_LINE $07B7 frame C95F.
COMMENT $07B7 * Clear the 'collision' flag
FORCE_NO_SYMBOL $07B7
COMMENT $07BA * Is enemy star active
FORCE_NO_SYMBOL $07BA
COMMENT $07C0 * Get ptr to enemy star frame
FORCE_NO_SYMBOL $07C0
COMMENT $07C3 * See if the enemy star is visible?
FORCE_NO_SYMBOL $07C3
FORCE_NO_SYMBOL $07C5
COMMENT $07C9 * No; restart a new one only if
FORCE_NO_SYMBOL $07C9
COMMENT $07CC * it did not collide with player
COMMENT $07CF * Restart new enemy star
FORCE_NO_SYMBOL $07CF
COMMENT $07D2 * Set x position = players position
FORCE_NO_SYMBOL $07D2
COMMENT $07D4 * Force y = bottom of screen
FORCE_NO_SYMBOL $07D4
FORCE_NO_SYMBOL $07D6
COMMENT $07D8 * Frame # = 3 (Red)
FORCE_NO_SYMBOL $07D8
FORCE_SYMBOL $07DA EnemyStarVectorList
COMMENT $07DD * Set vector list 1
FORCE_NO_SYMBOL $07DD
COMMENT $07DF * Set vector list 2
FORCE_NO_SYMBOL $07DF
COMMENT $07E1 * Clear 'collision' flag
FORCE_NO_SYMBOL $07E1
FORCE_NO_SYMBOL $07E5
COMMENT $07E7 * Get velocity value
FORCE_NO_SYMBOL $07E7
COMMENT $07EA * Update y value
FORCE_NO_SYMBOL $07EA
FORCE_NO_SYMBOL $07EC
COMMENT $07EF * If the enemy star collided with
COMMENT $07F1 * the player, then display an
FORCE_NO_SYMBOL $07F1
COMMENT $07F4 * explosion pattern for a while.
FORCE_SYMBOL $07F6 ExplosionVectorTable
FORCE_NO_SYMBOL $07F9
COMMENT $07FC * Animate, by changing between 1
FORCE_NO_SYMBOL $07FC
COMMENT $07FE * of 4 possible explosion patterns
COMMENT $0801 * Set the explosion vector list
FORCE_NO_SYMBOL $0801
COMMENT $0803 * Set the explosion vector list
FORCE_NO_SYMBOL $0803
FORCE_SYMBOL $0805 NE_DrawDots
COMMENT $0808 * Set the drawing function
FORCE_NO_SYMBOL $0808
COMMENT $080B * Has the enemy star reached the
FORCE_NO_SYMBOL $080B
COMMENT $080D * top of the screen?
COMMENT $080F * Yes; so tag the frame as no
FORCE_NO_SYMBOL $080F
COMMENT $0811 * longer being visible.
FORCE_NO_SYMBOL $0811
FORCE_SYMBOL $0814 CheckForCollisionWithPlayer
COMMENT $081B * Flag collision with player
FORCE_NO_SYMBOL $081B
COMMENT $081E * Flag collision with player
FORCE_NO_SYMBOL $081E
COMMENT $0821 * Set timer value, which controls
FORCE_NO_SYMBOL $0821
COMMENT $0823 * duration of the explosion.
FORCE_NO_SYMBOL $0823
COMMENT_LINE $0827 DrawPlayersShipExploding()
COMMENT_LINE $0827 This function drawing the player's ship exploding
COMMENT_LINE $0827 into multiple pieces.  It does this by incrementing
COMMENT_LINE $0827 the alternate scale factor (C8B7); drawing continues
COMMENT_LINE $0827 until the alternate scale factor reaches $3000, at
COMMENT_LINE $0827 which point we = a flag (C8B9) to indicate that we
COMMENT_LINE $0827 are done, and it is time to move onto the next phase.
COMMENT $0827 * Get addr of player's frame
FORCE_NO_SYMBOL $0827
COMMENT $082A * Clear 'player done exploding flag
FORCE_NO_SYMBOL $082A
COMMENT $082D * Has scale factor surpassed the
FORCE_NO_SYMBOL $082D
COMMENT $0830 * upper bound?
FORCE_NO_SYMBOL $0830
COMMENT $0836 * Flag that we are done
FORCE_NO_SYMBOL $0836
FORCE_NO_SYMBOL $083A
COMMENT $083D * Increment alternate scale factor
FORCE_NO_SYMBOL $083D
FORCE_SYMBOL $0840 DrawWithMixedScaleFactors
COMMENT $0843 * Set drawing function
FORCE_NO_SYMBOL $0843
FORCE_SYMBOL $0846 PlayersShipExploding_1
COMMENT $0849 * Set vector list 1
FORCE_NO_SYMBOL $0849
FORCE_SYMBOL $084C PlayersShipExploding_2
COMMENT $084F * Set vector list 2
FORCE_NO_SYMBOL $084F
COMMENT_LINE $0853 InitializePlayerFrame()
COMMENT_LINE $0853 This function initializes all of the important fields
COMMENT_LINE $0853 within the frame used to display the player's ship.
COMMENT_LINE $0853 All information about the players ship is kept in the
COMMENT_LINE $0853 frame C8D7.
COMMENT $0853 * Get addr of player's frame
FORCE_NO_SYMBOL $0853
COMMENT $0856 * Flag player in enemy passage
FORCE_NO_SYMBOL $0856
COMMENT $0859 * Set frame # = 3 (red)
FORCE_NO_SYMBOL $0859
FORCE_NO_SYMBOL $085B
FORCE_SYMBOL $085D DrawVectorList
COMMENT $0860 * Set drawing function
FORCE_NO_SYMBOL $0860
FORCE_NO_SYMBOL $0863
FORCE_NO_SYMBOL $0865
FORCE_NO_SYMBOL $0867
COMMENT $0869 * Set scale factor
FORCE_NO_SYMBOL $0869
FORCE_NO_SYMBOL $086B
FORCE_NO_SYMBOL $086F
FORCE_NO_SYMBOL $0871
COMMENT $0873 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0873
FORCE_NO_SYMBOL $0875
COMMENT $0877 * Set intensity
FORCE_NO_SYMBOL $0877
FORCE_SYMBOL $0879 PlayersShip_2
COMMENT $087C * Set vector list 1
FORCE_NO_SYMBOL $087C
FORCE_SYMBOL $087E PlayersShip_1
COMMENT $0881 * Set vector list 2
FORCE_NO_SYMBOL $0881
COMMENT $0885 * Set initial position = (0,0)
FORCE_NO_SYMBOL $0885
FORCE_NO_SYMBOL $0887
COMMENT_LINE $088B SetEnemyShipInfo()
COMMENT_LINE $088B SetEnemyShipInfo_2()
COMMENT_LINE $088B These function determines which enemy ship needs to be
COMMENT_LINE $088B displayed for this level, along with the characteristics
COMMENT_LINE $088B of the enemy ship.  It loads all of these characteristics
COMMENT_LINE $088B into memory locations, which are used by other functions.
COMMENT_LINE $088B SetEnemyShipInfo() also initializes some of the player's
COMMENT_LINE $088B flags, and is usually called at the start of a new turn
COMMENT_LINE $088B for the player (i.e. after a crash).  SetEnemyShipInfo_2()
COMMENT_LINE $088B does not initialize the player's flags, and is usually
COMMENT_LINE $088B called when the player has completed travel through
COMMENT_LINE $088B the fuel passage, and is about to enter the next enemy
COMMENT_LINE $088B passage.
COMMENT_LINE $088B All information about the players ship is kept in the
COMMENT_LINE $088B frame C8D7.
FORCE_NO_SYMBOL $088B
COMMENT $088E * Give player $30 units of fuel
FORCE_NO_SYMBOL $088E
COMMENT $0891 * Clear 'out of fuel' flag
FORCE_NO_SYMBOL $0891
COMMENT $0894 * Clear 'low on fuel' flag
FORCE_NO_SYMBOL $0894
FORCE_NO_SYMBOL $0897
FORCE_NO_SYMBOL $089A
COMMENT $089D * Set fuel usage to 1 unit
FORCE_NO_SYMBOL $089D
COMMENT $08A0 * Calculate the number of fuel
FORCE_NO_SYMBOL $08A0
COMMENT $08A3 * objects for this next level.
COMMENT $08A4 * # = (level* 2) + 5
FORCE_NO_SYMBOL $08A4
FORCE_NO_SYMBOL $08A6
COMMENT $08A9 * Based on the current level,
FORCE_NO_SYMBOL $08A9
COMMENT $08AB * set $C884 to either 4 or 5
FORCE_NO_SYMBOL $08AB
FORCE_NO_SYMBOL $08AE
FORCE_NO_SYMBOL $08B3
FORCE_NO_SYMBOL $08B6
FORCE_NO_SYMBOL $08B9
COMMENT $08BB * Enemy ship count = level + 6
FORCE_NO_SYMBOL $08BB
COMMENT $08BE * Determine which enemy ship will
FORCE_NO_SYMBOL $08BE
COMMENT $08C1 * used at this level: 0 - 14
FORCE_NO_SYMBOL $08C1
FORCE_NO_SYMBOL $08C5
COMMENT $08C7 * $0D = size of each table entry
FORCE_NO_SYMBOL $08C7
COMMENT $08C9 * Get index into enemy ship array
FORCE_SYMBOL $08CA EnemyShipInfoTable
COMMENT $08CD * Get ptr to the enemy ship data
COMMENT $08D1 * BCD value of enemy ship
FORCE_NO_SYMBOL $08D1
FORCE_NO_SYMBOL $08D6
COMMENT $08DB * Flag; do/don't display enemy star
FORCE_NO_SYMBOL $08DB
COMMENT $08E0 * Save vector list ptr
FORCE_NO_SYMBOL $08E0
COMMENT $08E5 * Save x movement delta
FORCE_NO_SYMBOL $08E5
COMMENT $08EA * Save y movement delta
FORCE_NO_SYMBOL $08EA
FORCE_NO_SYMBOL $08EF
COMMENT $08F2 * Number of hits needed to destroy
COMMENT $08F4 * the warlord ship.
FORCE_NO_SYMBOL $08F4
COMMENT $08F9 * Save contact tolerance value
FORCE_NO_SYMBOL $08F9
COMMENT_LINE $08FD The following is an array of 17 blocks of data, each block
COMMENT_LINE $08FD of which is $0D (13) bytes long.  It appears that the
COMMENT_LINE $08FD code only uses the first 16 blocks (0 - $0E).  Each block
COMMENT_LINE $08FD contains the following information:
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 0 |    BCD Value of      |
COMMENT_LINE $08FD ---                  ---
COMMENT_LINE $08FD 1 |     Enemy Ship       |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 2 |                      |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 3 |  Display Enemy Star  |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 4 |     Enemy Ship       |
COMMENT_LINE $08FD ---                  ---
COMMENT_LINE $08FD 5 |    Vector Table      |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 6 |     X Movement       |
COMMENT_LINE $08FD ---                  ---
COMMENT_LINE $08FD 7 |       Delta          |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 8 |     Y Movement       |
COMMENT_LINE $08FD ---                  ---
COMMENT_LINE $08FD 9 |       Delta          |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 10 |                      |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 11 | Number of hits to    |
COMMENT_LINE $08FD | destroy warlord ship |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $08FD 12 |  Contact Tolerance   |
COMMENT_LINE $08FD ------------------------
COMMENT_LINE $09DA InitEnemyStarFrame()
COMMENT_LINE $09DA This function fills in all of the important fields
COMMENT_LINE $09DA within the frame used to hold the enemy star information.
COMMENT_LINE $09DA All information about the enemy star is kept in the
COMMENT_LINE $09DA frame C95F.
FORCE_NO_SYMBOL $09DA
COMMENT $09DC * Set enemy star velocity
FORCE_NO_SYMBOL $09DC
COMMENT $09DF * Get ptr to enemy star frame
FORCE_NO_SYMBOL $09DF
COMMENT $09E2 * Flag player in enemy passage
FORCE_NO_SYMBOL $09E2
FORCE_NO_SYMBOL $09E5
COMMENT $09E7 * Frame # = $13 (red,not visible
FORCE_NO_SYMBOL $09E7
COMMENT $09E9 * Enemy star enabled?
FORCE_NO_SYMBOL $09E9
COMMENT $09EE * No
FORCE_SYMBOL $09EF DrawVectorList
COMMENT $09F2 * Set drawing function
FORCE_NO_SYMBOL $09F2
FORCE_NO_SYMBOL $09F5
FORCE_NO_SYMBOL $09F7
FORCE_NO_SYMBOL $09F9
COMMENT $09FB * Set scale factor
FORCE_NO_SYMBOL $09FB
FORCE_NO_SYMBOL $09FD
FORCE_NO_SYMBOL $0A01
FORCE_NO_SYMBOL $0A03
COMMENT $0A05 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0A05
FORCE_NO_SYMBOL $0A07
COMMENT $0A09 * Set intensity
FORCE_NO_SYMBOL $0A09
COMMENT $0A0B * Clear collision flag
FORCE_NO_SYMBOL $0A0B
COMMENT_LINE $0A0F InitAllBulletFrames()
COMMENT_LINE $0A0F This function fills in the important fields within the
COMMENT_LINE $0A0F 3 frames used to hold information about bullets fired
COMMENT_LINE $0A0F by the user.
COMMENT_LINE $0A0F The 3 bullet frames are located at C8F9, C91B and C93D.
COMMENT $0A0F * Ptr to first bullet frame
FORCE_NO_SYMBOL $0A0F
COMMENT $0A12 * Frame # $11 = Blue,not visible
FORCE_NO_SYMBOL $0A12
FORCE_SYMBOL $0A14 InitOneBulletFrame
COMMENT $0A17 * Frame # $12 = Green,not visible
FORCE_NO_SYMBOL $0A17
FORCE_SYMBOL $0A19 InitOneBulletFrame
COMMENT $0A1C * Frame # $13 = Red,not visible
FORCE_NO_SYMBOL $0A1C
FORCE_SYMBOL $0A1E InitOneBulletFrame
FORCE_NO_SYMBOL $0A21
COMMENT $0A23 * Tag end of frame stack
FORCE_NO_SYMBOL $0A23
COMMENT_LINE $0A26 InitOneBulletFrame()
COMMENT_LINE $0A26 Entry:
COMMENT_LINE $0A26 a = frame identifier (color & visibility)
COMMENT_LINE $0A26 x = frame ptr
COMMENT_LINE $0A26 Exit:
COMMENT_LINE $0A26 x = ptr to next frame in stack
COMMENT_LINE $0A26 This function fills in the important fields within the
COMMENT_LINE $0A26 next frame used to hold information about a bullet
COMMENT $0A26 * Set frame number
FORCE_NO_SYMBOL $0A26
FORCE_SYMBOL $0A28 DrawVectorList
COMMENT $0A2B * Set drawing function
FORCE_NO_SYMBOL $0A2B
COMMENT $0A2E * Flag player in enemy passage
FORCE_NO_SYMBOL $0A2E
FORCE_NO_SYMBOL $0A31
COMMENT $0A33 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0A33
FORCE_SYMBOL $0A35 BulletVectorList
COMMENT $0A38 * Set vector list 1
FORCE_NO_SYMBOL $0A38
COMMENT $0A3A * Set vector list 2
FORCE_NO_SYMBOL $0A3A
COMMENT $0A3C * Advance frame pointer
FORCE_NO_SYMBOL $0A3C
COMMENT_LINE $0A40 InitEnemyShipFrame()
COMMENT_LINE $0A40 Entry:
COMMENT_LINE $0A40 C88A-C88B = ptr to enemy ship vector list
COMMENT_LINE $0A40 C88D-C88E = x movement delta
COMMENT_LINE $0A40 C88F-C890 = y movement delta
COMMENT_LINE $0A40 This function fills in the important fields within the
COMMENT_LINE $0A40 frame used to hold information about the enemy ship.
COMMENT_LINE $0A40 All information about the enemy ship is kept in the
COMMENT_LINE $0A40 frame located at C981.
COMMENT $0A40 * Ptr to enemy ship frame
FORCE_NO_SYMBOL $0A40
FORCE_NO_SYMBOL $0A43
COMMENT $0A45 * Frame# = $12 (green,not visible
FORCE_NO_SYMBOL $0A45
FORCE_NO_SYMBOL $0A47
COMMENT $0A49 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0A49
FORCE_NO_SYMBOL $0A4B
COMMENT $0A4E * Set vector list 1
FORCE_NO_SYMBOL $0A4E
COMMENT $0A50 * Set vector list 2
FORCE_NO_SYMBOL $0A50
FORCE_SYMBOL $0A52 DrawVectorList
COMMENT $0A55 * Set drawing function
FORCE_NO_SYMBOL $0A55
FORCE_NO_SYMBOL $0A58
COMMENT $0A5B * Set x movement delta
FORCE_NO_SYMBOL $0A5B
FORCE_NO_SYMBOL $0A5E
COMMENT $0A61 * Set y movement delta
FORCE_NO_SYMBOL $0A61
FORCE_NO_SYMBOL $0A64
COMMENT $0A67 * Set 16-bit x position
FORCE_NO_SYMBOL $0A67
COMMENT $0A69 * Set 16-bit y position
FORCE_NO_SYMBOL $0A69
COMMENT $0A6B * Bounding box limits: -64, -63
FORCE_NO_SYMBOL $0A6B
COMMENT $0A6E * Set x bounding box limits
FORCE_NO_SYMBOL $0A6E
COMMENT $0A71 * Set y bounding box limits
FORCE_NO_SYMBOL $0A71
COMMENT $0A74 * Point to the next frame
FORCE_NO_SYMBOL $0A74
FORCE_NO_SYMBOL $0A77
COMMENT $0A79 * Tag frame as end of stack frame
FORCE_NO_SYMBOL $0A79
COMMENT_LINE $0A7C UpdateBulletFrames()
COMMENT_LINE $0A7C This function updates the scale factor and the intensity
COMMENT_LINE $0A7C for each of the 3 bullet frames.  It also checks to see
COMMENT_LINE $0A7C if the player has requested that another bullet be fired.
COMMENT_LINE $0A7C All information about the 3 bullets are kept in the
COMMENT_LINE $0A7C frames located at C8F9, C91B and C93.
COMMENT $0A7C * Get addr of 1st bullet frame
FORCE_NO_SYMBOL $0A7C
COMMENT $0A7F UpdateFrameStateAndCheckForFireRequest;
COMMENT $0A81 * Get addr of 2nd bullet frame
FORCE_NO_SYMBOL $0A81
COMMENT $0A84 UpdateFrameStateAndCheckForFireRequest;
COMMENT $0A86 * Get addr of 3rd bullet frame
FORCE_NO_SYMBOL $0A86
COMMENT $0A89 UpdateFrameStateAndCheckForFireRequest;
COMMENT_LINE $0A8C UFStateAndCheckForFR; UpdateFrameStateAndCheckForFireRequest()
COMMENT_LINE $0A8C Entry:
COMMENT_LINE $0A8C x = ptr to bullet frame
COMMENT_LINE $0A8C This function updates the scale factor and the intensity
COMMENT_LINE $0A8C for one bullet frame.  It will also check to see if the
COMMENT_LINE $0A8C player has requested that another bullet be fired; if
COMMENT_LINE $0A8C so, then the next available frame will be used.  Only
COMMENT_LINE $0A8C 1 bullet per pass will be fired.
FORCE_NO_SYMBOL $0A8C
COMMENT $0A8E * Is frame visible?
FORCE_NO_SYMBOL $0A8E
COMMENT $0A90 * Update only visible frames
COMMENT $0A92 * If the frame is not visible, then
FORCE_NO_SYMBOL $0A92
COMMENT $0A95 * see if players is trying to fire.
COMMENT $0A97 * Is player dead?
FORCE_NO_SYMBOL $0A97
FORCE_NO_SYMBOL $0A9C
COMMENT $0A9E * No; flag frame as active again
FORCE_NO_SYMBOL $0A9E
FORCE_NO_SYMBOL $0AA0
COMMENT $0AA2 * Set scale factor
FORCE_NO_SYMBOL $0AA2
FORCE_NO_SYMBOL $0AA4
COMMENT $0AA7 * Starting pos = player's pos
FORCE_NO_SYMBOL $0AA7
COMMENT $0AA9 * Only allow 1 bullet per pass
FORCE_NO_SYMBOL $0AA9
FORCE_NO_SYMBOL $0AAC
FORCE_NO_SYMBOL $0AAE
COMMENT $0AB1 * Force 'bullet fired' sound
FORCE_NO_SYMBOL $0AB1
COMMENT $0AB4 * Update the scale factor and
FORCE_NO_SYMBOL $0AB4
COMMENT $0AB6 * intensity, unless scale = 1
FORCE_NO_SYMBOL $0AB6
COMMENT $0AB8 * which means no longer visible
FORCE_SYMBOL $0ABA UpdateFramesScaleAndIntensity
FORCE_NO_SYMBOL $0ABE
COMMENT $0AC0 * Tag frame as no longer visible
FORCE_NO_SYMBOL $0AC0
COMMENT_LINE $0AC7 ProcessEnemyShip()
COMMENT_LINE $0AC7 This function takes care of updating the information in
COMMENT_LINE $0AC7 the enemy ship frame (C981).  If the enemy ship is not
COMMENT_LINE $0AC7 currently visible, then it will start a new one going.
COMMENT_LINE $0AC7 If the enemy ship has collided with the player or a
COMMENT_LINE $0AC7 bullet, then it will display an explosion pattern for
COMMENT_LINE $0AC7 a given period of time.  It will update the position,
COMMENT_LINE $0AC7 scale factor and intensity for the frame, to give it
COMMENT_LINE $0AC7 the appearance of moving towards the player.  When the
COMMENT_LINE $0AC7 enemy ship reaches the front of the display, it will
COMMENT_LINE $0AC7 stop being displayed.
COMMENT $0AC7 * Clear 'enemy destroyed' flag
FORCE_NO_SYMBOL $0AC7
COMMENT $0ACA * Clear the collision flag
FORCE_NO_SYMBOL $0ACA
FORCE_NO_SYMBOL $0ACD
COMMENT $0AD0 * If the frame is not visible,
FORCE_NO_SYMBOL $0AD0
COMMENT $0AD2 * then we may need to restart
FORCE_NO_SYMBOL $0AD2
COMMENT $0AD4 * the next enemy ship.
FORCE_NO_SYMBOL $0AD6
FORCE_SYMBOL $0ADA InEnemyPassage
COMMENT $0AE1 * Start a new enemy ship
FORCE_NO_SYMBOL $0AE1
COMMENT $0AE3 * Reset frame to be visible
FORCE_NO_SYMBOL $0AE3
FORCE_SYMBOL $0AE5 DrawAnimatedVectorList_Slow
COMMENT $0AE8 * Set drawing function
FORCE_NO_SYMBOL $0AE8
FORCE_NO_SYMBOL $0AEB
COMMENT $0AEE * Set 16-bit scale factor
FORCE_NO_SYMBOL $0AEE
FORCE_NO_SYMBOL $0AF0
FORCE_NO_SYMBOL $0AF3
COMMENT $0AF5 * Force sound to be made
FORCE_NO_SYMBOL $0AF5
FORCE_NO_SYMBOL $0AF8
FORCE_NO_SYMBOL $0AFB
FORCE_NO_SYMBOL $0AFD
COMMENT $0B00 * Use the system loop counter to
FORCE_NO_SYMBOL $0B00
COMMENT $0B03 * generate a y value in the range
FORCE_NO_SYMBOL $0B03
COMMENT $0B05 * of +-$3F.
FORCE_NO_SYMBOL $0B05
COMMENT $0B0B * Use the system loop counter to
FORCE_NO_SYMBOL $0B0B
COMMENT $0B0E * generate an x value in the range
FORCE_NO_SYMBOL $0B0E
COMMENT $0B10 * of +-$3F.
FORCE_NO_SYMBOL $0B10
COMMENT $0B16 * Set (y,x) position
FORCE_NO_SYMBOL $0B16
COMMENT $0B18 * Set backup y position
FORCE_NO_SYMBOL $0B18
COMMENT $0B1A * Set backup x position
FORCE_NO_SYMBOL $0B1A
FORCE_NO_SYMBOL $0B1C
COMMENT $0B1F * Get ememy ship vector list ptr
FORCE_NO_SYMBOL $0B1F
COMMENT $0B22 * Set vector list 1
FORCE_NO_SYMBOL $0B22
COMMENT $0B24 * Set vector list 2
FORCE_NO_SYMBOL $0B24
FORCE_NO_SYMBOL $0B28
FORCE_NO_SYMBOL $0B2A
FORCE_SYMBOL $0B2D P06E0
FORCE_NO_SYMBOL $0B32
FORCE_NO_SYMBOL $0B34
FORCE_NO_SYMBOL $0B37
FORCE_NO_SYMBOL $0B39
COMMENT $0B3C * If the scale factor > $90, then
FORCE_NO_SYMBOL $0B3C
COMMENT $0B3E * stop displaying the frame.
FORCE_NO_SYMBOL $0B40
FORCE_NO_SYMBOL $0B42
COMMENT $0B44 * Tag frame as no longer visible
FORCE_NO_SYMBOL $0B44
FORCE_NO_SYMBOL $0B46
FORCE_NO_SYMBOL $0B49
FORCE_NO_SYMBOL $0B4B
FORCE_NO_SYMBOL $0B4F
FORCE_NO_SYMBOL $0B53
COMMENT $0B55 * Calculate the new intensity =
FORCE_NO_SYMBOL $0B55
COMMENT $0B57 * (scale + $40);  if rollover
FORCE_NO_SYMBOL $0B57
COMMENT $0B59 * occurs, then use $7F.
FORCE_NO_SYMBOL $0B5B
COMMENT $0B5D * Set the intensity
FORCE_NO_SYMBOL $0B5D
FORCE_NO_SYMBOL $0B5F
COMMENT $0B63 * Set embedded obj's intensity
FORCE_NO_SYMBOL $0B63
COMMENT $0B65 * Collision with player?
FORCE_NO_SYMBOL $0B65
COMMENT $0B6A * Yes; has the explosion timer
FORCE_NO_SYMBOL $0B6A
COMMENT $0B6D * finished?
FORCE_SYMBOL $0B6F ExplosionVectorTable
COMMENT $0B72 * Keep displaying the explosion
FORCE_NO_SYMBOL $0B72
COMMENT $0B75 * pattern, rotating between the
FORCE_NO_SYMBOL $0B75
COMMENT $0B77 * 4 possible patterns.
COMMENT $0B7A * Set vector list 1
FORCE_NO_SYMBOL $0B7A
COMMENT $0B7C * Set vector list 2
FORCE_NO_SYMBOL $0B7C
FORCE_NO_SYMBOL $0B7F
FORCE_NO_SYMBOL $0B81
COMMENT $0B83 * Tag frame as no longer visible
FORCE_NO_SYMBOL $0B83
FORCE_SYMBOL $0B86 CheckForCollisionWithBullets
FORCE_SYMBOL $0B8C CheckForCollisionWithPlayer
COMMENT $0B93 * Collided with the player
FORCE_NO_SYMBOL $0B93
FORCE_NO_SYMBOL $0B95
COMMENT $0B98 * Collided with player or bullet
FORCE_NO_SYMBOL $0B98
FORCE_NO_SYMBOL $0B9B
COMMENT $0B9D * Force a sound to occur
FORCE_NO_SYMBOL $0B9D
COMMENT $0BA0 * Set sound characteristics index
FORCE_NO_SYMBOL $0BA0
COMMENT $0BA3 * Flag that a collision occurred
FORCE_NO_SYMBOL $0BA3
FORCE_NO_SYMBOL $0BA6
COMMENT $0BA8 * Set explosion duration timer
FORCE_NO_SYMBOL $0BA8
FORCE_SYMBOL $0BAB ExplosionPattern_1
COMMENT $0BAE * Set vector list 1
FORCE_NO_SYMBOL $0BAE
COMMENT $0BB0 * Set vector list 2
FORCE_NO_SYMBOL $0BB0
FORCE_SYMBOL $0BB2 NE_DrawDots
COMMENT $0BB5 * Set the drawing function
FORCE_NO_SYMBOL $0BB5
COMMENT $0BB8 * Bump 'enemy ships destroyed' cntr
FORCE_NO_SYMBOL $0BB8
COMMENT $0BBB * Flag that enemy was destroyed
FORCE_NO_SYMBOL $0BBB
COMMENT_LINE $0BBF UpdateEnemyShipPosition()
COMMENT_LINE $0BBF Entry:
COMMENT_LINE $0BBF x = ptr to enemy ship frame
COMMENT_LINE $0BBF This function calculates the new position for the current
COMMENT_LINE $0BBF enemy ship.  As it turns out, enemy ships are restricted
COMMENT_LINE $0BBF to the box defined by the points [ in (y,x) format]:
COMMENT_LINE $0BBF (63,63),(-63,63),(-63,-63),(63,-63)
COMMENT_LINE $0BBF The frame structure contains working copies of the
COMMENT_LINE $0BBF current 16-bit x position (13,x) and the 16-bit y
COMMENT_LINE $0BBF position (15,x), along with the 16-bit x delta
COMMENT_LINE $0BBF value ($11,x) and the 16-bit y delta value ($13,x).
COMMENT_LINE $0BBF The bounding box for the enemy ship is defined in the
COMMENT_LINE $0BBF frame structure [x min in ($15,x), x max in ($16,x),
COMMENT_LINE $0BBF y min in ($17,x) and y max in ($18,x)].  Each pass
COMMENT_LINE $0BBF through, the deltas are added (or subtracted) from
COMMENT_LINE $0BBF the current position, and if the edge of the bounding
COMMENT_LINE $0BBF box is reached, the delta is negated, thus forcing
COMMENT_LINE $0BBF the ship to start moving in the other direction.
COMMENT $0BBF * Load x movement delta
FORCE_NO_SYMBOL $0BBF
COMMENT $0BC4 * Subtract delta from current x
FORCE_NO_SYMBOL $0BC4
COMMENT $0BC6 * position.
FORCE_NO_SYMBOL $0BC6
COMMENT $0BC8 * Surpassed lower x bounds?
FORCE_NO_SYMBOL $0BC8
COMMENT $0BCB * No
COMMENT $0BCD * Yes; so we need to negate
FORCE_NO_SYMBOL $0BCD
COMMENT $0BD0 * the x movement delta, to
COMMENT $0BD1 * force movement back in the
COMMENT $0BD2 * other direction.
FORCE_NO_SYMBOL $0BD2
FORCE_NO_SYMBOL $0BD5
COMMENT $0BDA * Add delta to current x position
FORCE_NO_SYMBOL $0BDA
FORCE_NO_SYMBOL $0BDC
COMMENT $0BDE * Surpassed upper x bounds?
FORCE_NO_SYMBOL $0BDE
COMMENT $0BE1 * Yes; so negate x movement delta
COMMENT $0BE3 * Load y movement delta
FORCE_NO_SYMBOL $0BE3
COMMENT $0BE8 * Subtract delta from current y
FORCE_NO_SYMBOL $0BE8
COMMENT $0BEA * position.
FORCE_NO_SYMBOL $0BEA
COMMENT $0BEC * Surpassed lower y bounds?
FORCE_NO_SYMBOL $0BEC
COMMENT $0BEF * No
COMMENT $0BF1 * Yes; so we need to negate
FORCE_NO_SYMBOL $0BF1
COMMENT $0BF4 * the y movement delta, to
COMMENT $0BF5 * force movement back in the
COMMENT $0BF6 * other direction.
FORCE_NO_SYMBOL $0BF6
FORCE_NO_SYMBOL $0BF9
COMMENT $0BFE * Add delta to current y position
FORCE_NO_SYMBOL $0BFE
FORCE_NO_SYMBOL $0C00
COMMENT $0C02 * Surpassed upper y bounds?
FORCE_NO_SYMBOL $0C02
COMMENT $0C05 * Yes; so negate y movement delta
COMMENT $0C07 * Load the updated y position
FORCE_NO_SYMBOL $0C07
COMMENT $0C09 * Load the updated x position
FORCE_NO_SYMBOL $0C09
COMMENT $0C0B * Update the frame's position
FORCE_NO_SYMBOL $0C0B
COMMENT_LINE $0C0E StartupNewGame()
COMMENT_LINE $0C0E This function takes care of starting the ball rolling
COMMENT_LINE $0C0E when a new game is to be started.
FORCE_NO_SYMBOL $0C0E
COMMENT $0C10 * Force background noise
FORCE_NO_SYMBOL $0C10
FORCE_NO_SYMBOL $0C13
FORCE_NO_SYMBOL $0C16
COMMENT $0C19 * Clear 'enemy ships destroyed cntr
FORCE_NO_SYMBOL $0C19
FORCE_NO_SYMBOL $0C1C
FORCE_SYMBOL $0C1F InitPlayersScoreAndShipCount
FORCE_SYMBOL $0C22 PrepareToEnterEnemyPassage
COMMENT $0C25 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0C25
FORCE_SYMBOL $0C28 PrepareToEnterEnemyPassage
COMMENT_LINE $0C2B PrepareToFightWarlordShip()
COMMENT_LINE $0C2B This function simply initializes the bullet buffers and
COMMENT_LINE $0C2B the Warlord ship frames, before the player faces off
COMMENT_LINE $0C2B with the Warlord ship.
FORCE_NO_SYMBOL $0C2B
COMMENT $0C2D * Flag that player is out of fuel
FORCE_NO_SYMBOL $0C2D
COMMENT $0C30 * Don't draw enemy passage walls
FORCE_NO_SYMBOL $0C30
FORCE_SYMBOL $0C33 InitAllBulletFrames
FORCE_SYMBOL $0C36 InitWarlordShipBulletFrame
FORCE_SYMBOL $0C39 InitWarlordShipFrames
COMMENT_LINE $0C3D PlayerFightingWarlordShip()
COMMENT_LINE $0C3D This is the main processing function for when the user is
COMMENT_LINE $0C3D fighting the Warlord ship.  It checks for the player
COMMENT_LINE $0C3D firing, and updates all bullet, player and Warlord ship
COMMENT_LINE $0C3D positions.  It also checks for collisions and for
COMMENT_LINE $0C3D destruction of the Warlord ship.
FORCE_SYMBOL $0C3D UpdatePlayersPosition
FORCE_SYMBOL $0C40 UpdateBulletFrames
FORCE_SYMBOL $0C43 UpdateWarlordShipFrames
FORCE_SYMBOL $0C46 ProcessWarlordShipBullet
COMMENT $0C49 * Warlord ship bullet hit player?
FORCE_NO_SYMBOL $0C49
FORCE_SYMBOL $0C4C CheckForCollisionWithPlayer
COMMENT $0C52 * No; see if the warlord ship has
FORCE_NO_SYMBOL $0C52
COMMENT $0C55 * collided with the player.
FORCE_NO_SYMBOL $0C55
COMMENT $0C5A * No; has player hit warlord ship
FORCE_NO_SYMBOL $0C5A
COMMENT $0C5D * enough times to destroy it?
FORCE_NO_SYMBOL $0C5D
COMMENT $0C62 * Yes; add 500 to player's score
FORCE_NO_SYMBOL $0C62
FORCE_SYMBOL $0C65 CheckForScoreOver20000
COMMENT $0C6A * Clear alternate scale factor
FORCE_NO_SYMBOL $0C6A
FORCE_SYMBOL $0C6D WarlordShipDestroyed
COMMENT $0C70 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0C70
COMMENT $0C73 * See if a bonus ship can be
FORCE_NO_SYMBOL $0C73
COMMENT $0C76 * awarded; it will be, only if
FORCE_NO_SYMBOL $0C76
COMMENT $0C78 * the player currently has < 9
COMMENT $0C7A * ships.
FORCE_NO_SYMBOL $0C7A
COMMENT $0C7E * Player hit by warlord ship bullet
COMMENT $0C7F * or collided with warlord ship.
COMMENT $0C80 * Clear alternate scale factor
FORCE_NO_SYMBOL $0C80
FORCE_SYMBOL $0C83 PlayerCollidedWithWarlordShip
COMMENT $0C86 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0C86
FORCE_NO_SYMBOL $0C89
FORCE_NO_SYMBOL $0C8B
COMMENT $0C8E * Force noise to occur
FORCE_NO_SYMBOL $0C8E
FORCE_NO_SYMBOL $0C91
COMMENT $0C93 * Set sound characteristics index
FORCE_NO_SYMBOL $0C93
COMMENT_LINE $0C97 WarlordShipDestroyed()
COMMENT_LINE $0C97 This is the main processing function for when the player
COMMENT_LINE $0C97 has destroyed the Warlord ship.  It draws the Warlord
COMMENT_LINE $0C97 ship exploding into pieces.  Once that completes, it
COMMENT_LINE $0C97 prepares the player for the fuel passage.
FORCE_SYMBOL $0C97 UpdatePlayersPosition
FORCE_SYMBOL $0C9A UpdateBulletFrames
FORCE_NO_SYMBOL $0C9D
FORCE_NO_SYMBOL $0C9F
FORCE_NO_SYMBOL $0CA2
FORCE_NO_SYMBOL $0CA5
COMMENT $0CA8 * Increment alternate scale factor
FORCE_NO_SYMBOL $0CA8
FORCE_NO_SYMBOL $0CAB
COMMENT $0CAF * Draw exploding Warlord ship
COMMENT $0CB1 * Clear 'out of fuel' flag
FORCE_NO_SYMBOL $0CB1
COMMENT $0CB4 * Clear warlord ship hit counter
FORCE_NO_SYMBOL $0CB4
COMMENT $0CB7 * Goto fuel passage
FORCE_SYMBOL $0CB7 PrepareForFuelPassage
COMMENT $0CBB * Update the warlord ship frames
FORCE_NO_SYMBOL $0CBB
COMMENT $0CBE * only on every other pass.
FORCE_NO_SYMBOL $0CBE
COMMENT $0CC3 WarlordShipBeingDestroyedOffsets;
FORCE_SYMBOL $0CC3 WarlordShipIsDestroyedO
COMMENT $0CC6 * Get warship target frame
FORCE_NO_SYMBOL $0CC6
COMMENT $0CC9 * Is the frame visible?
FORCE_NO_SYMBOL $0CC9
COMMENT $0CCD * No
COMMENT $0CCE * Yes; force the warlord ship
FORCE_NO_SYMBOL $0CCE
COMMENT $0CD0 * pieces to drift apart, since
COMMENT $0CD2 * it has been destroyed.  Do this
COMMENT $0CD4 * by un-syncing the (y,x) values
FORCE_NO_SYMBOL $0CD4
COMMENT $0CD6 * for the warlord ship frames.
FORCE_NO_SYMBOL $0CD6
COMMENT $0CDB * Warlord ship frame 1 y offset
COMMENT $0CDC * Warlord ship frame 1 x offset
COMMENT $0CDD * Warlord ship frame 2 y offset
COMMENT $0CDE * Warlord ship frame 2 x offset
COMMENT $0CDF * Warlord ship frame 3 y offset
COMMENT $0CE0 * Warlord ship frame 3 x offset
COMMENT $0CE1 * Warlord ship frame 4 y offset
COMMENT $0CE2 * Warlord ship frame 4 x offset
COMMENT $0CE3 * Warlord ship frame 5 y offset
COMMENT $0CE4 * Warlord ship frame 5 x offset
COMMENT_LINE $0CE5 PlayerCollidedWithWarlordShip()
COMMENT_LINE $0CE5 This is the main processing function for when the player
COMMENT_LINE $0CE5 has collided with the Warlord ship.  It removes all
COMMENT_LINE $0CE5 bullets and shows both the player and the Warlord ship
COMMENT_LINE $0CE5 as exploding.  Otherwise, if the player has any ships
COMMENT_LINE $0CE5 left, it prepares the player to again face off against
COMMENT_LINE $0CE5 the Warship.  If the game is over, then it checks for
COMMENT_LINE $0CE5 a new high score, and waits to start a new game.
FORCE_SYMBOL $0CE5 DrawPlayersShipExploding
FORCE_SYMBOL $0CE8 UpdateWarlordShipFrames
FORCE_NO_SYMBOL $0CEB
COMMENT $0CED * Force bullet 1 frame invisible
FORCE_NO_SYMBOL $0CED
COMMENT $0CF0 * Force bullet 2 frame invisible
FORCE_NO_SYMBOL $0CF0
COMMENT $0CF3 * Force bullet 3 frame invisible
FORCE_NO_SYMBOL $0CF3
COMMENT $0CF6 * Force warlord bullet invisible
FORCE_NO_SYMBOL $0CF6
COMMENT $0CF9 * Player done exploding
FORCE_NO_SYMBOL $0CF9
COMMENT $0CFE * Yes; restart player
FORCE_SYMBOL $0CFE InitializePlayerFrame
COMMENT $0D01 * If the player has no more ships
FORCE_NO_SYMBOL $0D01
COMMENT $0D04 * left, then enter a waiting state
FORCE_NO_SYMBOL $0D04
COMMENT $0D06 * waiting for new game to start.
COMMENT $0D08 * Decrement player's ship count
FORCE_NO_SYMBOL $0D08
FORCE_NO_SYMBOL $0D0B
COMMENT $0D0E * Set startup delay timer
FORCE_NO_SYMBOL $0D0E
FORCE_SYMBOL $0D11 RestartPlayerAgainstWarlordShip
COMMENT $0D14 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0D14
COMMENT $0D18 * Game Over
FORCE_SYMBOL $0D18 InitializePlayerFrame
FORCE_SYMBOL $0D1B WaitForGameRestart
COMMENT $0D1E * Set the indirect jump ptr
FORCE_NO_SYMBOL $0D1E
FORCE_NO_SYMBOL $0D21
COMMENT $0D24 * See if player had new hi score
FORCE_NO_SYMBOL $0D24
FORCE_SYMBOL $0D27 check_4_new_hi_score
FORCE_NO_SYMBOL $0D2A
COMMENT $0D2D * Set startup delay timer
FORCE_NO_SYMBOL $0D2D
FORCE_NO_SYMBOL $0D30
COMMENT_LINE $0D34 RestartPlayerAgainstWarlordShip()
COMMENT_LINE $0D34 This is the main processing function for when the player
COMMENT_LINE $0D34 has been killed by the Warship, and is again about to
COMMENT_LINE $0D34 face off against the Warship.  It delays briefly, before
COMMENT_LINE $0D34 moving onto the next stage.
FORCE_SYMBOL $0D34 UpdatePlayersPosition
FORCE_SYMBOL $0D37 InitScoreAndShipCountFrames_2
COMMENT $0D3A * Decrement startup delay timer
FORCE_NO_SYMBOL $0D3A
COMMENT $0D3D * Don't start the action until
FORCE_NO_SYMBOL $0D3D
COMMENT $0D40 * the delay timer has expired.
FORCE_NO_SYMBOL $0D40
FORCE_SYMBOL $0D45 PrepareToFightWarlordShip
FORCE_SYMBOL $0D48 PlayerFightingWarlordShip
COMMENT $0D4B * Set the indirect jump ptr
FORCE_NO_SYMBOL $0D4B
COMMENT_LINE $0D4F PrepareToEnterEnemyPassage()
COMMENT_LINE $0D4F This is the main processing function for when the user
COMMENT_LINE $0D4F is just entering the enemy passage.  It initializes the
COMMENT_LINE $0D4F player frames, sets up a delay timer, and flags that the
COMMENT_LINE $0D4F passage walls should not initially be drawn.  It then
COMMENT_LINE $0D4F moves the player onto the next state, which is entering
COMMENT_LINE $0D4F the enemy passage.
FORCE_SYMBOL $0D4F InitializePlayerFrame
FORCE_SYMBOL $0D52 SetEnemyShipInfo
FORCE_SYMBOL $0D55 InitScoreAndShipCountFrames_2
FORCE_NO_SYMBOL $0D58
COMMENT $0D5B * Set startup delay timer
FORCE_NO_SYMBOL $0D5B
COMMENT $0D5E * Don't draw enemy passage walls
FORCE_NO_SYMBOL $0D5E
FORCE_SYMBOL $0D61 ApproachEnemyPassage
COMMENT $0D64 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0D64
COMMENT_LINE $0D68 ApproachEnemyPassage()
COMMENT_LINE $0D68 This is the main processing function for when the player
COMMENT_LINE $0D68 is approaching the enemy passage area.  Initially, only
COMMENT_LINE $0D68 the player's ship is drawn.  After some delay, the
COMMENT_LINE $0D68 state will be changed to the next state, which will
COMMENT_LINE $0D68 enable the drawing of the passage walls.
FORCE_SYMBOL $0D68 UpdatePlayersPosition
FORCE_SYMBOL $0D6B SetEnemyShipInfo_2
COMMENT $0D6E * Decrement startup delay timer
FORCE_NO_SYMBOL $0D6E
COMMENT $0D71 * Don't start the action until
FORCE_NO_SYMBOL $0D71
COMMENT $0D74 * the delay timer has expired.
FORCE_NO_SYMBOL $0D74
FORCE_SYMBOL $0D79 EnterEnemyPassage
COMMENT $0D7C * Set the indirect jump ptr
FORCE_NO_SYMBOL $0D7C
COMMENT $0D7F * Enable drawing enemy passage walls
FORCE_NO_SYMBOL $0D7F
FORCE_NO_SYMBOL $0D84
FORCE_NO_SYMBOL $0D87
FORCE_NO_SYMBOL $0D8A
FORCE_NO_SYMBOL $0D8D
FORCE_SYMBOL $0D90 P0676
FORCE_SYMBOL $0D93 InitAllBulletFrames
COMMENT_LINE $0D97 EnterEnemyPassage()
COMMENT_LINE $0D97 This is the main processing function for when the player
COMMENT_LINE $0D97 is entering into the enemy passage area.  It updates
COMMENT_LINE $0D97 any bullets fired by the player, and updates the position
COMMENT_LINE $0D97 of both the enemy ship and the enemy star, before moving
COMMENT_LINE $0D97 onto the next state (in the enemy passage).
FORCE_SYMBOL $0D97 UpdatePlayersPosition
FORCE_SYMBOL $0D9A P0676
FORCE_NO_SYMBOL $0D9D
FORCE_NO_SYMBOL $0DA0
FORCE_SYMBOL $0DA4 InitAllBulletFrames
FORCE_SYMBOL $0DA7 InitEnemyStarFrame
FORCE_SYMBOL $0DAA InitEnemyShipFrame
FORCE_SYMBOL $0DAD UpdateBulletFrames
FORCE_SYMBOL $0DB0 ProcessEnemyStar
FORCE_SYMBOL $0DB3 ProcessEnemyShip
FORCE_SYMBOL $0DB6 InEnemyPassage
COMMENT $0DB9 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0DB9
COMMENT_LINE $0DBD PlayerHasRunOutOfFuel()
COMMENT_LINE $0DBD This is the main processing function for when the player
COMMENT_LINE $0DBD has completely run out of fuel, while in the enemy
COMMENT_LINE $0DBD passage.  It continues to update any bullets fired by
COMMENT_LINE $0DBD the player, and the positions of the enemy star and ship.
COMMENT_LINE $0DBD It also forces the player's ship to slowly sink downward,
COMMENT_LINE $0DBD due to lack of fuel, and to explode, when it comes in
COMMENT_LINE $0DBD contact with the ground.
FORCE_SYMBOL $0DBD P0676
FORCE_SYMBOL $0DC0 ProcessEnemyStar
FORCE_SYMBOL $0DC3 ProcessEnemyShip
FORCE_SYMBOL $0DC6 UpdateBulletFrames
COMMENT $0DC9 * Force player to sink towards
FORCE_NO_SYMBOL $0DC9
COMMENT $0DCC * ground (he has no fuel).  When
FORCE_NO_SYMBOL $0DCC
COMMENT $0DCF * the ship reaches the ground,
FORCE_NO_SYMBOL $0DCF
COMMENT $0DD1 * it's all over.
COMMENT $0DD5 * Clear alternate scale factor
FORCE_NO_SYMBOL $0DD5
FORCE_SYMBOL $0DD8 PlayerCollidedWithEnemyShip
COMMENT $0DDB * Set the indirect jump ptr
FORCE_NO_SYMBOL $0DDB
FORCE_SYMBOL $0DDE P0E3F
COMMENT_LINE $0DE2 InEnemyPassage()
COMMENT_LINE $0DE2 This is the main processing function for when the player
COMMENT_LINE $0DE2 is in the enemy passage.  It updates everything on the
COMMENT_LINE $0DE2 display (bullets, player, enemy star, enemy ship, fuel
COMMENT_LINE $0DE2 levels, etc).  It also checks to see if there have been
COMMENT_LINE $0DE2 any collisions, or if the player has destroyed the last
COMMENT_LINE $0DE2 enemy ship for this level (at which point you advance to
COMMENT_LINE $0DE2 to the next state).
FORCE_NO_SYMBOL $0DE2
FORCE_SYMBOL $0DE5 UpdatePlayersFuelLevel
FORCE_SYMBOL $0DE8 P0676
FORCE_SYMBOL $0DEB UpdatePlayersPosition
FORCE_SYMBOL $0DEE ProcessEnemyStar
FORCE_SYMBOL $0DF1 UpdateBulletFrames
COMMENT $0DF4 * Is player out of fuel?
FORCE_NO_SYMBOL $0DF4
COMMENT $0DF9 * Yes
FORCE_NO_SYMBOL $0DF9
FORCE_NO_SYMBOL $0DFC
COMMENT $0DFE * Force a sound to occur
FORCE_NO_SYMBOL $0DFE
FORCE_SYMBOL $0E01 PlayerHasRunOutOfFuel
COMMENT $0E04 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0E04
FORCE_SYMBOL $0E08 ProcessEnemyShip
COMMENT $0E0B * Get ptr to enemy ship frame
FORCE_NO_SYMBOL $0E0B
FORCE_SYMBOL $0E0E UpdateEnemyShipPosition
COMMENT $0E11 * Did player collide w/ enemy ship?
FORCE_NO_SYMBOL $0E11
COMMENT $0E16 * Did player collide w/ enemy star?
FORCE_NO_SYMBOL $0E16
COMMENT $0E1B * Check to see if the player has
FORCE_NO_SYMBOL $0E1B
COMMENT $0E1E * run into a passage wall, or has
FORCE_NO_SYMBOL $0E1E
COMMENT $0E20 * run aground.
FORCE_NO_SYMBOL $0E22
FORCE_NO_SYMBOL $0E26
FORCE_NO_SYMBOL $0E29
FORCE_NO_SYMBOL $0E2D
COMMENT $0E31 * Impact has occurred!
FORCE_NO_SYMBOL $0E31
COMMENT $0E36 * Clear alternate scale factor
FORCE_NO_SYMBOL $0E36
FORCE_SYMBOL $0E39 PlayerCollidedWithEnemyShip
COMMENT $0E3C * Set the indirect jump ptr
FORCE_NO_SYMBOL $0E3C
FORCE_NO_SYMBOL $0E3F
FORCE_NO_SYMBOL $0E41
COMMENT $0E44 * Force a sound to occur
FORCE_NO_SYMBOL $0E44
FORCE_NO_SYMBOL $0E47
COMMENT $0E49 * Set sound characteristics index
FORCE_NO_SYMBOL $0E49
FORCE_NO_SYMBOL $0E4C
FORCE_NO_SYMBOL $0E4F
FORCE_NO_SYMBOL $0E51
FORCE_NO_SYMBOL $0E55
COMMENT $0E58 * All enemy ships destroyed?
FORCE_NO_SYMBOL $0E58
COMMENT $0E5D * Clear enemy destroyed counter
FORCE_NO_SYMBOL $0E5D
FORCE_SYMBOL $0E60 SetEnemyShipInfo_2
FORCE_NO_SYMBOL $0E63
FORCE_SYMBOL $0E66 P0E4C
FORCE_SYMBOL $0E69 LevelCompleted
COMMENT $0E6C * Set the indirect jump ptr
FORCE_NO_SYMBOL $0E6C
FORCE_NO_SYMBOL $0E6F
COMMENT $0E72 * Set the delay timer
FORCE_NO_SYMBOL $0E72
FORCE_NO_SYMBOL $0E75
FORCE_NO_SYMBOL $0E77
COMMENT_LINE $0E7B PlayerCollidedWithEnemyShip()
COMMENT_LINE $0E7B This is the main processing function for when the player
COMMENT_LINE $0E7B has collided with something.  It draws the player's ship
COMMENT_LINE $0E7B exploding, and then determines whether the player should
COMMENT_LINE $0E7B reenter the enemy passage (if he has any ships left), or
COMMENT_LINE $0E7B whether the game is over, and we should wait to start
COMMENT_LINE $0E7B a new one.
COMMENT $0E7B * Disable all but normal game
FORCE_NO_SYMBOL $0E7B
COMMENT $0E7D * noise & 'player hit' sound.
FORCE_NO_SYMBOL $0E7D
FORCE_NO_SYMBOL $0E80
FORCE_NO_SYMBOL $0E83
FORCE_SYMBOL $0E88 P0676
FORCE_SYMBOL $0E8B DrawPlayersShipExploding
FORCE_SYMBOL $0E8E ProcessEnemyShip
FORCE_SYMBOL $0E91 ProcessEnemyStar
FORCE_SYMBOL $0E94 UpdateBulletFrames
COMMENT $0E97 * Is the player's ship done
FORCE_NO_SYMBOL $0E97
COMMENT $0E9A * exploding?
COMMENT $0E9C * If the player's ship count
FORCE_NO_SYMBOL $0E9C
COMMENT $0E9F * is now <<0, then the game is
FORCE_NO_SYMBOL $0E9F
COMMENT $0EA1 * over.  Otherwise, prepare
COMMENT $0EA3 * to try again.
FORCE_NO_SYMBOL $0EA3
FORCE_SYMBOL $0EA6 PrepareToEnterEnemyPassage
COMMENT $0EA9 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0EA9
FORCE_SYMBOL $0EAD InitializePlayerFrame
FORCE_SYMBOL $0EB0 WaitForGameRestart
COMMENT $0EB3 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0EB3
COMMENT $0EB6 * See if the player set a new
FORCE_NO_SYMBOL $0EB6
COMMENT $0EB9 * high score for the game.
FORCE_NO_SYMBOL $0EB9
FORCE_SYMBOL $0EBC check_4_new_hi_score
FORCE_NO_SYMBOL $0EBF
COMMENT $0EC2 * Set the restart delay timer
FORCE_NO_SYMBOL $0EC2
COMMENT $0EC5 * Disable all sounds
FORCE_NO_SYMBOL $0EC5
COMMENT_LINE $0ED3 WaitForGameRestart()
COMMENT_LINE $0ED3 This function waits until either the restart delay timer
COMMENT_LINE $0ED3 expires, or the player presses a button, at which time it
COMMENT_LINE $0ED3 will start up a new game.  While it is waiting for the
COMMENT_LINE $0ED3 timer to expire or the player to press a button, it will
COMMENT_LINE $0ED3 display the last player's score (in frame C91B), the
COMMENT_LINE $0ED3 'GAME OVER' string (in frame C8F9)* and the player's
COMMENT_LINE $0ED3 ship (in frame C8D7).
COMMENT $0ED3 * If any buttons are pressed,
FORCE_NO_SYMBOL $0ED3
COMMENT $0ED6 * then restart game.
FORCE_NO_SYMBOL $0ED6
COMMENT $0EDA * Decrement restart delay timer,
FORCE_NO_SYMBOL $0EDA
COMMENT $0EDD * and restart game when it goes
FORCE_NO_SYMBOL $0EDD
COMMENT $0EE0 * to 0.
FORCE_NO_SYMBOL $0EE0
FORCE_SYMBOL $0EE5 StartupNewGame
COMMENT $0EE8 * Set the indirect jump ptr
FORCE_NO_SYMBOL $0EE8
COMMENT $0EEC * Don't draw enemy passage walls
FORCE_NO_SYMBOL $0EEC
FORCE_NO_SYMBOL $0EEF
COMMENT $0EF1 * Flag that player is out of fuel
FORCE_NO_SYMBOL $0EF1
COMMENT $0EF4 * Flag that player is low on fuel
FORCE_NO_SYMBOL $0EF4
FORCE_NO_SYMBOL $0EF7
COMMENT $0EFA * Set string height and width
FORCE_NO_SYMBOL $0EFA
COMMENT $0EFD * Get ptr to frame C8F9
FORCE_NO_SYMBOL $0EFD
COMMENT $0F00 * Flag player in enemy passage
FORCE_NO_SYMBOL $0F00
FORCE_NO_SYMBOL $0F03
COMMENT $0F05 * Frame # = 2 (green)
FORCE_NO_SYMBOL $0F05
FORCE_SYMBOL $0F07 NE_DisplayString
COMMENT $0F0A * Set drawing function
FORCE_NO_SYMBOL $0F0A
FORCE_NO_SYMBOL $0F0D
FORCE_NO_SYMBOL $0F0F
FORCE_NO_SYMBOL $0F11
COMMENT $0F13 * Set scale factor
FORCE_NO_SYMBOL $0F13
FORCE_NO_SYMBOL $0F15
COMMENT $0F17 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0F17
FORCE_NO_SYMBOL $0F19
COMMENT $0F1B * Set intensity
FORCE_NO_SYMBOL $0F1B
FORCE_SYMBOL $0F1D GameOverString
COMMENT $0F20 * Set vector list 1
FORCE_NO_SYMBOL $0F20
FORCE_SYMBOL $0F22 GameOverString
COMMENT $0F25 * Set vector list 2
FORCE_NO_SYMBOL $0F25
FORCE_NO_SYMBOL $0F27
COMMENT $0F2A * Set (y,x) position
FORCE_NO_SYMBOL $0F2A
COMMENT $0F2C * Get ptr to next frame
FORCE_NO_SYMBOL $0F2C
COMMENT $0F2F * Flag player in enemy passage
FORCE_NO_SYMBOL $0F2F
FORCE_NO_SYMBOL $0F32
COMMENT $0F34 * Frame # = 1 (blue)
FORCE_NO_SYMBOL $0F34
FORCE_SYMBOL $0F36 NE_DisplayString
COMMENT $0F39 * Set drawing function
FORCE_NO_SYMBOL $0F39
FORCE_NO_SYMBOL $0F3C
FORCE_NO_SYMBOL $0F3E
FORCE_NO_SYMBOL $0F40
COMMENT $0F42 * Set scale factor
FORCE_NO_SYMBOL $0F42
FORCE_NO_SYMBOL $0F44
COMMENT $0F46 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $0F46
FORCE_NO_SYMBOL $0F48
COMMENT $0F4A * Set intensity
FORCE_NO_SYMBOL $0F4A
COMMENT $0F4C * Player's score string
FORCE_NO_SYMBOL $0F4C
COMMENT $0F4F * Set vector list 1
FORCE_NO_SYMBOL $0F4F
COMMENT $0F51 * Player's score string
FORCE_NO_SYMBOL $0F51
COMMENT $0F54 * Set vector list 2
FORCE_NO_SYMBOL $0F54
FORCE_NO_SYMBOL $0F56
COMMENT $0F59 * Set (y,x) position
FORCE_NO_SYMBOL $0F59
COMMENT $0F5B * Get ptr to next frame
FORCE_NO_SYMBOL $0F5B
COMMENT $0F5E * Mark the next frame as the
FORCE_NO_SYMBOL $0F5E
COMMENT $0F60 * end of the active frame stack
FORCE_NO_SYMBOL $0F60
COMMENT_LINE $0F63 LevelCompleted()
COMMENT_LINE $0F63 This is the main processing function for when the player
COMMENT_LINE $0F63 has completed a level.  It determines whether the player
COMMENT_LINE $0F63 will enter the fuel passage, or go up against the
COMMENT_LINE $0F63 Warlord ship.
FORCE_NO_SYMBOL $0F63
FORCE_NO_SYMBOL $0F66
FORCE_NO_SYMBOL $0F68
FORCE_NO_SYMBOL $0F6B
FORCE_NO_SYMBOL $0F6E
COMMENT $0F70 * Force off enemy ship sound
FORCE_NO_SYMBOL $0F70
FORCE_NO_SYMBOL $0F73
COMMENT $0F75 * Force off player's bullet frames
FORCE_NO_SYMBOL $0F75
FORCE_SYMBOL $0F78 P068F
FORCE_NO_SYMBOL $0F7B
FORCE_NO_SYMBOL $0F80
COMMENT $0F85 * Clear 'warlord hit' counter
FORCE_NO_SYMBOL $0F85
FORCE_SYMBOL $0F88 PrepareToFightWarlordShip
FORCE_SYMBOL $0F8B PlayerFightingWarlordShip
COMMENT $0F8E * Set the indirect jump ptr
FORCE_NO_SYMBOL $0F8E
COMMENT_LINE $0F92 PrepareForFuelPassage()
COMMENT_LINE $0F92 This function prepares for the player to enter the fuel
COMMENT_LINE $0F92 passage.  It sets up the frames used for drawing the
COMMENT_LINE $0F92 fuel walls and cannisters, and moves the player into
COMMENT_LINE $0F92 the next state (in the fuel passage).
FORCE_SYMBOL $0F92 InitAllFuelFrames
FORCE_SYMBOL $0F95 UpdateAllFuelFrames
FORCE_SYMBOL $0F98 PlayerInFuelPassage
COMMENT $0F9B * Set the indirect jump ptr
FORCE_NO_SYMBOL $0F9B
COMMENT $0F9E * Don't draw enemy passage walls
FORCE_NO_SYMBOL $0F9E
COMMENT $0FA1 * Clear fuel object counter
FORCE_NO_SYMBOL $0FA1
FORCE_NO_SYMBOL $0FA4
COMMENT_LINE $0FA8 PlayerInFuelPassage()
COMMENT_LINE $0FA8 This is the main processing function for when the
COMMENT_LINE $0FA8 player is in the fuel passage.
COMMENT_LINE $0FA8 When the user has destroyed all of the enemy ships
COMMENT_LINE $0FA8 in the enemy passage, he will advance to the next
COMMENT_LINE $0FA8 fuel passage.  This function takes care up updating
COMMENT_LINE $0FA8 the player's position, checking to see if he has
COMMENT_LINE $0FA8 picked up any fuel cannisters, and checking to see
COMMENT_LINE $0FA8 if the player has flown through a fuel wall opening,
COMMENT_LINE $0FA8 or been destroyed by flying into a fuel wall.  It
COMMENT_LINE $0FA8 will also detect when the user has completed the fuel
COMMENT_LINE $0FA8 passage, and will advance the user onto the next enemy
COMMENT_LINE $0FA8 passage level.
COMMENT $0FA8 * Prevent fuel bar from flashing
FORCE_NO_SYMBOL $0FA8
COMMENT $0FAB * Clear 'fuel picked up' flag
FORCE_NO_SYMBOL $0FAB
COMMENT $0FAE * Clear 'player thru level' flag
FORCE_NO_SYMBOL $0FAE
FORCE_SYMBOL $0FB1 UpdatePlayersPosition
FORCE_SYMBOL $0FB4 CheckForContactWithFuelObjects
COMMENT $0FB7 * Did player hit a fuel wall?
COMMENT $0FB9 * Yes; ship destroyed
FORCE_SYMBOL $0FB9 PlayerHitFuelWall
COMMENT $0FBC * Set the indirect jump ptr
FORCE_NO_SYMBOL $0FBC
COMMENT $0FC1 * Clear alternate scale factor
FORCE_NO_SYMBOL $0FC1
FORCE_NO_SYMBOL $0FC4
FORCE_NO_SYMBOL $0FC6
COMMENT $0FC9 * Force sound to occur
FORCE_NO_SYMBOL $0FC9
FORCE_NO_SYMBOL $0FCC
COMMENT $0FCE * Set sound characteristics index
FORCE_NO_SYMBOL $0FCE
COMMENT $0FD2 * Did player pickup fuel cannister?
FORCE_NO_SYMBOL $0FD2
COMMENT $0FD6 * Yes; flag that fuel was picked up
FORCE_NO_SYMBOL $0FD6
FORCE_NO_SYMBOL $0FD9
FORCE_NO_SYMBOL $0FDC
COMMENT $0FDE * Force sound to occur
FORCE_NO_SYMBOL $0FDE
FORCE_NO_SYMBOL $0FE1
COMMENT $0FE4 * Add 5 units of fuel to the
FORCE_NO_SYMBOL $0FE4
COMMENT $0FE6 * player's reserves, upto a max
FORCE_NO_SYMBOL $0FE6
COMMENT $0FE8 * of $60 fuel units.
FORCE_NO_SYMBOL $0FEA
FORCE_NO_SYMBOL $0FEC
COMMENT $0FEF * Did player pass thru opening?
FORCE_NO_SYMBOL $0FEF
COMMENT $0FF3 * Yes
FORCE_NO_SYMBOL $0FF3
FORCE_NO_SYMBOL $0FF6
COMMENT $0FF8 * Force sound to occur
FORCE_NO_SYMBOL $0FF8
FORCE_SYMBOL $0FFB UpdateAllFuelFrames
COMMENT $0FFE * Did player complete fuel passage?
FORCE_NO_SYMBOL $0FFE
COMMENT $1003 * Yes; move onto next
FORCE_SYMBOL $1003 SetEnemyShipInfo_2
COMMENT $1006 * enemy passage level.
FORCE_SYMBOL $1006 P0D79
COMMENT_LINE $100A PlayerHitFuelWall()
COMMENT_LINE $100A This is the main processing function for when the
COMMENT_LINE $100A player has collided with one of the fuel walls.
COMMENT_LINE $100A It displays the exploding player's ship.
COMMENT_LINE $100A When the explosion finishes, it decides whether the
COMMENT_LINE $100A the game is over (player has no more ships), or
COMMENT_LINE $100A whether the player can reenter the fuel passage.  If
COMMENT_LINE $100A the player is going to reenter the fuel passage, then
COMMENT_LINE $100A all of the fuel objects will be temporarily forced off,
COMMENT_LINE $100A to give the illusion that the player is reentering
COMMENT_LINE $100A where he left off; the fuel object will eventually be
COMMENT_LINE $100A redisplayed.
FORCE_SYMBOL $100A DrawPlayersShipExploding
COMMENT $100D * Ship done exploding?
FORCE_NO_SYMBOL $100D
COMMENT $1012 * Yes; see if the player has any
FORCE_NO_SYMBOL $1012
COMMENT $1015 * ships left.  If not, then the
FORCE_NO_SYMBOL $1015
COMMENT $1017 * game is over.
COMMENT $1019 * Game Over
FORCE_SYMBOL $1019 P0EAD
COMMENT $101C * Decrement player's ship count
FORCE_NO_SYMBOL $101C
FORCE_SYMBOL $101F PrepareToReenterFuelPassage
COMMENT $1022 * Set the indirect jump ptr
FORCE_NO_SYMBOL $1022
FORCE_SYMBOL $1025 InitializePlayerFrame
FORCE_NO_SYMBOL $1028
COMMENT $102A * Start player with $30 fuel units
FORCE_NO_SYMBOL $102A
FORCE_SYMBOL $102D InitScoreAndShipCountFrames_1
FORCE_NO_SYMBOL $1030
COMMENT $1033 * Set delay timer
FORCE_NO_SYMBOL $1033
COMMENT $1036 * Force all 4 fuel frames invisible
FORCE_NO_SYMBOL $1036
FORCE_NO_SYMBOL $103B
FORCE_NO_SYMBOL $1040
FORCE_NO_SYMBOL $1045
COMMENT_LINE $104B ForceFuelWallFrameInvisible()
COMMENT_LINE $104B Entry:
COMMENT_LINE $104B x = ptr to frame #
COMMENT_LINE $104B After the player hits a fuel wall, we want to temporarily
COMMENT_LINE $104B turn off the remaining fuel objects; after the user
COMMENT_LINE $104B restarts in the fuel passage, the fuel objects will
COMMENT_LINE $104B again become visible (though with different scale factors).
COMMENT_LINE $104B This function looks at the incoming frame #, and if it
COMMENT_LINE $104B is the 'end of frame stack' marker, then it changes the
COMMENT_LINE $104B frame # from $FF to $1F.  Otherwise, it simply makes
COMMENT_LINE $104B the frame invisible, by or'ing in $10.  By changing the
COMMENT_LINE $104B 'end of frame stack' marker, this code will allow the
COMMENT_LINE $104B frames beyond it to be displayed; in this case, the
COMMENT_LINE $104B frames beyond contain the players ship count & score.
FORCE_NO_SYMBOL $104B
FORCE_NO_SYMBOL $104F
FORCE_NO_SYMBOL $1051
FORCE_NO_SYMBOL $1054
FORCE_NO_SYMBOL $1056
COMMENT_LINE $1059 PrepareToReenterFuelPassage()
COMMENT_LINE $1059 This is the main processing function for when
COMMENT_LINE $1059 the player is preparing to reenter the fuel passage,
COMMENT_LINE $1059 after the player has crashed into one of the fuel walls.
COMMENT_LINE $1059 Before entering the fuel passage, it
COMMENT_LINE $1059 will wait for the delay timer to elapse, at which
COMMENT_LINE $1059 point it will reenable all of the fuel object frames.
COMMENT_LINE $1059 It will also reset the scale factor for the first
COMMENT_LINE $1059 fuel object (the wall into which the player crashed)
COMMENT_LINE $1059 so that the fuel wall starts slightly back down the
COMMENT_LINE $1059 fuel passage; it will also update all of the other
COMMENT_LINE $1059 fuel object frames, so that they too are proportionally
COMMENT_LINE $1059 back down the fuel passage.
FORCE_SYMBOL $1059 UpdatePlayersPosition
COMMENT $105C * Decrement the delay timer, and
FORCE_NO_SYMBOL $105C
COMMENT $105F * do nothing until the timer
FORCE_NO_SYMBOL $105F
COMMENT $1062 * counts down to 0.
FORCE_NO_SYMBOL $1062
COMMENT $1067 * Reenable the 4 fuel object frames
FORCE_NO_SYMBOL $1067
FORCE_NO_SYMBOL $106C
FORCE_NO_SYMBOL $1071
FORCE_NO_SYMBOL $1076
FORCE_NO_SYMBOL $107B
COMMENT $107E * Set the 'end of frame stack'
FORCE_NO_SYMBOL $107E
FORCE_NO_SYMBOL $1080
COMMENT $1082 * Reset 1st fuel wall's scale
FORCE_NO_SYMBOL $1082
COMMENT $1085 * factor.
FORCE_NO_SYMBOL $1085
FORCE_SYMBOL $1088 UpdateAllFuelFrames
FORCE_SYMBOL $108B PlayerInFuelPassage
COMMENT $108E * Set the indirect jump ptr
FORCE_NO_SYMBOL $108E
COMMENT_LINE $1092 RestoreFuelWallFrameStatus()
COMMENT_LINE $1092 Entry:
COMMENT_LINE $1092 x = ptr to frame #
COMMENT_LINE $1092 This function will cause the fuel object frames to again
COMMENT_LINE $1092 become visible.  This happens after the player has crashed,
COMMENT_LINE $1092 and has then started to reenter the fuel passage.
COMMENT_LINE $1092 This function looks at the incoming frame #, and if it
COMMENT_LINE $1092 is = to the special tag $1F, then it resets it to $FF
COMMENT_LINE $1092 (the 'end of frame stack' marker).  Otherwise, it forces
COMMENT_LINE $1092 the frame to again be visible, by and'ing the frame
COMMENT_LINE $1092 number with $0F.
FORCE_NO_SYMBOL $1092
COMMENT $1094 * Former end of frame stack?
FORCE_NO_SYMBOL $1094
COMMENT $1098 * Nope, so make visible again
FORCE_NO_SYMBOL $1098
FORCE_NO_SYMBOL $109A
COMMENT $109D * Yes, so retag as end of stack
FORCE_NO_SYMBOL $109D
FORCE_NO_SYMBOL $109F
COMMENT_LINE $10A2 InitScoreAndShipCountFrames_1()
COMMENT_LINE $10A2 InitScoreAndShipCountFrames_2()
COMMENT_LINE $10A2 These functions both fill in 2 frames with information
COMMENT_LINE $10A2 for displaying the player's ship count and score.  The
COMMENT_LINE $10A2 ship count goes into the first frame (in blue), while
COMMENT_LINE $10A2 the score goes into the second frame (in green).
COMMENT_LINE $10A2 InitScoreAndShipCountFrames_1() uses frames C981 & C9A3,
COMMENT_LINE $10A2 while InitScoreAndShipCountFrames_2() uses frames C8F9 &
COMMENT_LINE $10A2 C91B.
COMMENT $10A2 * Use frames C981 & C9A3
FORCE_NO_SYMBOL $10A2
COMMENT $10A7 * Use frames C8F9 & C91B
FORCE_NO_SYMBOL $10A7
FORCE_NO_SYMBOL $10AA
COMMENT $10AD * Set string height & width
FORCE_NO_SYMBOL $10AD
COMMENT $10B0 * Flag player in enemy passage
FORCE_NO_SYMBOL $10B0
FORCE_NO_SYMBOL $10B3
COMMENT $10B5 * Frame # = 1 (blue)
FORCE_NO_SYMBOL $10B5
FORCE_SYMBOL $10B7 NE_DisplayString
COMMENT $10BA * Set drawing function
FORCE_NO_SYMBOL $10BA
FORCE_NO_SYMBOL $10BD
FORCE_NO_SYMBOL $10BF
FORCE_NO_SYMBOL $10C1
COMMENT $10C3 * Set scale factor
FORCE_NO_SYMBOL $10C3
FORCE_NO_SYMBOL $10C5
COMMENT $10C7 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $10C7
FORCE_NO_SYMBOL $10C9
COMMENT $10CB * Set intensity
FORCE_NO_SYMBOL $10CB
COMMENT $10CD * Ptr to ship count string
FORCE_NO_SYMBOL $10CD
COMMENT $10D0 * Set vector list 1
FORCE_NO_SYMBOL $10D0
COMMENT $10D2 * Ptr to ship count string
FORCE_NO_SYMBOL $10D2
COMMENT $10D5 * Set vector list 2
FORCE_NO_SYMBOL $10D5
FORCE_NO_SYMBOL $10D7
COMMENT $10DA * Set (y,x) position
FORCE_NO_SYMBOL $10DA
COMMENT $10DC * Get ptr to next frame
FORCE_NO_SYMBOL $10DC
COMMENT $10DF * Flag player in enemy passage
FORCE_NO_SYMBOL $10DF
FORCE_NO_SYMBOL $10E2
COMMENT $10E4 * Frame # = 2 (green)
FORCE_NO_SYMBOL $10E4
FORCE_SYMBOL $10E6 NE_DisplayString
COMMENT $10E9 * Set drawing function
FORCE_NO_SYMBOL $10E9
FORCE_NO_SYMBOL $10EC
FORCE_NO_SYMBOL $10EE
FORCE_NO_SYMBOL $10F0
COMMENT $10F2 * Set scale factor
FORCE_NO_SYMBOL $10F2
FORCE_NO_SYMBOL $10F4
COMMENT $10F6 * Set embedded obj's scale factor
FORCE_NO_SYMBOL $10F6
FORCE_NO_SYMBOL $10F8
COMMENT $10FA * Set intensity
FORCE_NO_SYMBOL $10FA
COMMENT $10FC * Ptr to player's score
FORCE_NO_SYMBOL $10FC
COMMENT $10FF * Set vector list 1
FORCE_NO_SYMBOL $10FF
COMMENT $1101 * Ptr to player's score
FORCE_NO_SYMBOL $1101
COMMENT $1104 * Set vector list 2
FORCE_NO_SYMBOL $1104
FORCE_NO_SYMBOL $1106
COMMENT $1109 * Set (y,x) position
FORCE_NO_SYMBOL $1109
COMMENT $110B * Get ptr to next frame
FORCE_NO_SYMBOL $110B
FORCE_NO_SYMBOL $110E
COMMENT $1110 * Tag as 'End of frame stack'
FORCE_NO_SYMBOL $1110
COMMENT_LINE $111B InitPlayersScoreAndShipCount()
COMMENT_LINE $111B This function initializes the buffers holding the player's
COMMENT_LINE $111B ship count (C8BE), and the player's score (C8C6).
FORCE_NO_SYMBOL $111B
FORCE_SYMBOL $111E ShipCountString
COMMENT $1121 * Ptr to ship count buffer
FORCE_NO_SYMBOL $1121
COMMENT $1132 * Set buffer to "SHIPS 3",$80
FORCE_NO_SYMBOL $1134
COMMENT $1137 * Ptr to player's score buffer
FORCE_NO_SYMBOL $1137
FORCE_NO_SYMBOL $1140
COMMENT $1143 * Set buffer to "     0",$80
FORCE_NO_SYMBOL $1143
COMMENT_LINE $1146 DrawEnemyPassageWalls()
COMMENT_LINE $1146 Entry:
COMMENT_LINE $1146 u = ptr to array of 2 ptrs, each pointing to a vector
COMMENT_LINE $1146 list.
COMMENT_LINE $1146 This function draws the side walls within the enemy
COMMENT_LINE $1146 passage.  It only draws the walls on one side of the
COMMENT_LINE $1146 passage, since the color of the walls on the other
COMMENT_LINE $1146 side of the passage are a different color.  When drawing
COMMENT_LINE $1146 the walls (there are usually three), it will use the
COMMENT_LINE $1146 first vector ptr in the array, unless the scale factor
COMMENT_LINE $1146 for the segment is > $60, at which point it will draw
COMMENT_LINE $1146 using the second vector ptr.  The first vector ptr
COMMENT_LINE $1146 represents the full wall, while the second vector ptr
COMMENT_LINE $1146 is used when a wall is all the way up front, and is about
COMMENT_LINE $1146 to go off the front of the screen (thus, only a portion of
COMMENT_LINE $1146 the wall is still visible).
COMMENT $1146 * Should enemy walls be drawn?
FORCE_NO_SYMBOL $1146
COMMENT $114B * No
COMMENT $114C * Yes
FORCE_NO_SYMBOL $114E
COMMENT $1150 * Set loop counter; 3 walls
FORCE_NO_SYMBOL $1150
FORCE_NO_SYMBOL $1153
FORCE_NO_SYMBOL $1157
FORCE_NO_SYMBOL $1159
COMMENT $115D * If scale <= $60 then draw
FORCE_NO_SYMBOL $115D
COMMENT $115F * the full wall, else draw only
COMMENT $1161 * the partial wall
FORCE_NO_SYMBOL $1161
FORCE_SYMBOL $1163 DrawOneEnemyPassageWall
COMMENT $1168 * Decrement loop counter
FORCE_NO_SYMBOL $1168
COMMENT $116B * More walls to draw?
COMMENT_LINE $1170 DrawFuelBar()
COMMENT_LINE $1170 This function draws the player's fuel bar (gauge).
COMMENT_LINE $1170 If the player is out of fuel, then the bar is not drawn.
COMMENT_LINE $1170 If the player is low on fuel, then the fuel bar will
COMMENT_LINE $1170 be forced to flash (by not drawing it on every pass
COMMENT_LINE $1170 through this function.  The amount of fuel the player
COMMENT_LINE $1170 has (in CA77) is actually the scale factor used to
COMMENT_LINE $1170 draw the fuel bar.
COMMENT $1170 * Is player out of fuel?
FORCE_NO_SYMBOL $1170
COMMENT $1175 * Yes
COMMENT $1176 * No, but is player low on fuel?
FORCE_NO_SYMBOL $1176
COMMENT $117B * Yes; therefore, force the fuel
FORCE_NO_SYMBOL $117B
COMMENT $117E * bar to flash, by not drawing
FORCE_NO_SYMBOL $117E
COMMENT $1180 * it on every pass.
FORCE_SYMBOL $1183 intensity_to_7F
FORCE_NO_SYMBOL $1186
COMMENT $1188 * Write scale factor ($60)
FORCE_NO_SYMBOL $1188
COMMENT $118A * Drawing position is based on
FORCE_NO_SYMBOL $118A
COMMENT $118D * whether we are drawing for the
FORCE_NO_SYMBOL $118D
COMMENT $1190 * left or right eye.
FORCE_NO_SYMBOL $1192
COMMENT $1195 * Write y value ($80)
FORCE_NO_SYMBOL $1195
FORCE_NO_SYMBOL $1197
COMMENT $1199 * Un-zero integrators, & trigger
FORCE_NO_SYMBOL $1199
COMMENT $119B * IRQ off positive edge.
FORCE_NO_SYMBOL $119B
FORCE_NO_SYMBOL $119D
COMMENT $119F * Write x value ($D0 or $F0)
FORCE_NO_SYMBOL $119F
FORCE_NO_SYMBOL $11A1
FORCE_NO_SYMBOL $11A3
COMMENT $11A5 * Wait for timer interrupt
FORCE_NO_SYMBOL $11A5
COMMENT $11A7 * Display the player's fuel bar
COMMENT $11A9 * Write y value (0)
FORCE_NO_SYMBOL $11A9
FORCE_NO_SYMBOL $11AB
COMMENT $11AD * Get player's fuel units
FORCE_NO_SYMBOL $11AD
COMMENT $11B0 * Write scale factor
FORCE_NO_SYMBOL $11B0
FORCE_NO_SYMBOL $11B2
FORCE_NO_SYMBOL $11B4
COMMENT $11B6 * Write x value ($7F)
FORCE_NO_SYMBOL $11B6
FORCE_NO_SYMBOL $11B8
FORCE_NO_SYMBOL $11BA
FORCE_NO_SYMBOL $11BC
COMMENT $11BE * Wait for timer interrupt
FORCE_NO_SYMBOL $11BE
COMMENT $11C2 * Clear line drawing pattern
FORCE_NO_SYMBOL $11C2
FORCE_SYMBOL $11C4 P0353
COMMENT_LINE $11C8 CheckForCollisionWithBullets()
COMMENT_LINE $11C8 Entry:
COMMENT_LINE $11C8 x = Frame ptr
COMMENT_LINE $11C8 C880 = Contact tolerance value
COMMENT_LINE $11C8 Exit:
COMMENT_LINE $11C8 a = $00 (no contact) or $FF (contact occurred)
COMMENT_LINE $11C8 This function checks each of the player's bullets, to see
COMMENT_LINE $11C8 if one of them have hit the object in the incoming frame.
COMMENT_LINE $11C8 The 'tolerance' value controls how close two objects
COMMENT_LINE $11C8 must be, in order for them to be considered as having
COMMENT_LINE $11C8 collided.  Before checking to see if two objects have
COMMENT_LINE $11C8 collided, the two frames must have similar scale factor
COMMENT_LINE $11C8 values (their difference must be <= 2).
COMMENT $11C8 * Get ptr to first bullet frame
FORCE_NO_SYMBOL $11C8
COMMENT $11CB * Get scale for incoming frame
FORCE_NO_SYMBOL $11CB
FORCE_NO_SYMBOL $11CD
COMMENT $11CF * Skip this bullet frame, if
FORCE_NO_SYMBOL $11CF
COMMENT $11D1 * it is not visible.
COMMENT $11D3 * Calculate the absolute value
FORCE_NO_SYMBOL $11D3
COMMENT $11D5 * of the difference between the
COMMENT $11D7 * 2 frame's scale factors.
COMMENT $11D8 * Skip this bullet, if the scale
FORCE_NO_SYMBOL $11D8
COMMENT $11DA * factors are not within 2.
COMMENT $11DC * Get ptr to next bullet frame
FORCE_NO_SYMBOL $11DC
COMMENT $11DF * Skip this bullet frame, if
FORCE_NO_SYMBOL $11DF
COMMENT $11E1 * it is not visible.
COMMENT $11E3 * Calculate the absolute value
FORCE_NO_SYMBOL $11E3
COMMENT $11E5 * of the difference between the
FORCE_NO_SYMBOL $11E5
COMMENT $11E7 * 2 frame's scale factors.
COMMENT $11EA * Skip this bullet, if the scale
FORCE_NO_SYMBOL $11EA
COMMENT $11EC * factors are not within 2.
COMMENT $11EE * Get ptr to next bullet frame
FORCE_NO_SYMBOL $11EE
COMMENT $11F1 * Skip this bullet frame, if
FORCE_NO_SYMBOL $11F1
COMMENT $11F3 * it is not visible.
COMMENT $11F5 * Bail out; no contact occurred
COMMENT $11F7 * Calculate the absolute value
FORCE_NO_SYMBOL $11F7
COMMENT $11F9 * of the difference between the
FORCE_NO_SYMBOL $11F9
COMMENT $11FB * 2 frame's scale factors.
COMMENT $11FE * Skip this bullet, if the scale
FORCE_NO_SYMBOL $11FE
COMMENT $1200 * factors are not within 2.
COMMENT $1202 * Bail out; no contact occurred
COMMENT $1204 * Calulate the absolute value of
FORCE_NO_SYMBOL $1204
COMMENT $1206 * the difference in the 2 frame's
FORCE_NO_SYMBOL $1206
COMMENT $1208 * x and y values.
FORCE_NO_SYMBOL $1208
FORCE_SYMBOL $120A get_absolute_value_of_ab
COMMENT $120D * Proceed only if the y values
FORCE_NO_SYMBOL $120D
COMMENT $1210 * are within the tolerance level
COMMENT $1212 * Bail out; no contact occurred
COMMENT $1214 * Proceed only if the x values
FORCE_NO_SYMBOL $1214
COMMENT $1217 * are within the tolerance level
COMMENT $1219 * Bail out; no contact occurred
COMMENT $121B * Contact!!
FORCE_NO_SYMBOL $121B
FORCE_NO_SYMBOL $121D
FORCE_NO_SYMBOL $121F
COMMENT $1221 * Tag bullet frame as invisible
FORCE_NO_SYMBOL $1221
COMMENT_LINE $1224 CheckForCollisionWithPlayer()
COMMENT_LINE $1224 Entry:
COMMENT_LINE $1224 x = Frame ptr
COMMENT_LINE $1224 Exit:
COMMENT_LINE $1224 a = $00 (no contact) or $FF (contact occurred)
COMMENT_LINE $1224 This function checks to see if the incoming frame object
COMMENT_LINE $1224 has collided with the player's ship. Before checking to
COMMENT_LINE $1224 see if two objects have collided, the two frames must
COMMENT_LINE $1224 have similar scale factor values (their difference must
COMMENT_LINE $1224 be <= 3).  The 'y' tolerance value is $08, while the 'x'
COMMENT_LINE $1224 tolerance value is $1E (30).
COMMENT $1224 * Initially assume no contact
COMMENT $1225 * Skip check, if the incoming
FORCE_NO_SYMBOL $1225
COMMENT $1227 * frame is not visible.
FORCE_NO_SYMBOL $1227
COMMENT $122C * Skip check, if the incoming
FORCE_NO_SYMBOL $122C
COMMENT $122F * frame is already exploding.
COMMENT $1232 * Get ptr to player's frame
FORCE_NO_SYMBOL $1232
COMMENT $1235 * Skip if already exploding.
FORCE_NO_SYMBOL $1235
COMMENT $123B * Calculate the absolute value
FORCE_NO_SYMBOL $123B
COMMENT $123D * of the difference between the
FORCE_NO_SYMBOL $123D
COMMENT $123F * 2 frame's scale factors.
COMMENT $1242 * No possible contact if the
FORCE_NO_SYMBOL $1242
COMMENT $1244 * scale factors difference > 3
COMMENT $1246 * Bail out; no contact occurred
COMMENT $1248 * Calculate the x & y deltas for
FORCE_NO_SYMBOL $1248
COMMENT $124A * the two frames.
FORCE_NO_SYMBOL $124A
FORCE_NO_SYMBOL $124C
FORCE_SYMBOL $124E get_absolute_value_of_ab
COMMENT $1251 * Proceed only if the y delta
FORCE_NO_SYMBOL $1251
COMMENT $1253 * is < 8
COMMENT $1255 * Bail out; no contact occurred
COMMENT $1257 * Proceed only if the x delta
FORCE_NO_SYMBOL $1257
COMMENT $1259 * is < $1E (30).
COMMENT $125B * Bail out; no contact occurred
COMMENT $125D * Contact!!
FORCE_NO_SYMBOL $125D
COMMENT_LINE $1260 CheckForContactWithFuelObjects:
COMMENT_LINE $1260 Exit:
COMMENT_LINE $1260 a = $00 (No contact)
COMMENT_LINE $1260 $01 (Passed through fuel wall opening)
COMMENT_LINE $1260 $02 (Picked up fuel cannister)
COMMENT_LINE $1260 $FF (Hit fuel wall)
COMMENT_LINE $1260 This function checks to see if the player's ship has
COMMENT_LINE $1260 passed through a fuel wall opening, collided with a
COMMENT_LINE $1260 fuel wall, or picked up a fuel cannister.  It will
COMMENT_LINE $1260 run through each of the fuel object frames, until it
COMMENT_LINE $1260 finds one which is within range; to be within range,
COMMENT_LINE $1260 the difference between the player's scale factor and
COMMENT_LINE $1260 the fuel object's scale factor must be <= 1.  Once an
COMMENT_LINE $1260 in-range frame is located (there may not be one), it
COMMENT_LINE $1260 will check to see if the (y,x) position for the player's
COMMENT_LINE $1260 ship is within the appropriate range to consider success;
COMMENT_LINE $1260 success when dealing with a fuel cannister means the
COMMENT_LINE $1260 player picked it up, while success for a fuel wall means
COMMENT_LINE $1260 the player passed through the opening.
COMMENT $1260 * Get ptr to 1st fuel object frame
FORCE_NO_SYMBOL $1260
COMMENT $1263 * Skip, if this frame is marked
FORCE_NO_SYMBOL $1263
COMMENT $1265 * as the end of the frame stack.
COMMENT $1267 * No contact
COMMENT $1269 * If the fuel object and player's
FORCE_NO_SYMBOL $1269
COMMENT $126B * scale factors are within 1, then
FORCE_NO_SYMBOL $126B
COMMENT $126D * check for pass-thru (fuel wall)
COMMENT $126F * or collection (fuel cannister).
FORCE_NO_SYMBOL $1270
COMMENT $1274 * Check the next frame
FORCE_NO_SYMBOL $1274
COMMENT $1279 * Get the difference between the
FORCE_NO_SYMBOL $1279
COMMENT $127C * the player's y position and the
COMMENT $127D * fuel object's y position.  Save
FORCE_NO_SYMBOL $127D
COMMENT $1280 * the 16-bit value in C891-C892
FORCE_NO_SYMBOL $1280
FORCE_NO_SYMBOL $1284
FORCE_NO_SYMBOL $128B
FORCE_NO_SYMBOL $128E
COMMENT $1291 * Get the difference between the
FORCE_NO_SYMBOL $1291
COMMENT $1294 * the player's x position and the
COMMENT $1295 * fuel object's x position.  Save
FORCE_NO_SYMBOL $1295
COMMENT $1298 * the 16-bit value in C893-C894
FORCE_NO_SYMBOL $1298
FORCE_NO_SYMBOL $129C
FORCE_NO_SYMBOL $12A3
FORCE_NO_SYMBOL $12A6
COMMENT $12A9 * Fuel cannister or fuel wall?
FORCE_NO_SYMBOL $12A9
FORCE_SYMBOL $12AB FuelCannister
COMMENT $12B1 * Fuel cannister.  Is
FORCE_NO_SYMBOL $12B1
COMMENT $12B4 * |y delta| <= 15 ?
FORCE_NO_SYMBOL $12B4
COMMENT $12BA * Nope; missed the cannister
COMMENT $12BC * Is |x delta| <= 15 ?
FORCE_NO_SYMBOL $12BC
FORCE_NO_SYMBOL $12BF
COMMENT $12C5 * Nope; missed the cannister
COMMENT $12C7 * Picked up the fuel cannister;
FORCE_NO_SYMBOL $12C7
COMMENT $12C9 * tag frame as no longer visible.
FORCE_NO_SYMBOL $12C9
FORCE_NO_SYMBOL $12CB
COMMENT $12CE * Large or small wall opening?
FORCE_NO_SYMBOL $12CE
FORCE_SYMBOL $12D0 FuelWallOpening_Large
COMMENT $12D6 * Large opening
FORCE_NO_SYMBOL $12D6
COMMENT $12D9 * Is |y delta| <= 12 ?
FORCE_NO_SYMBOL $12D9
COMMENT $12DF * Nope; hit the wall
FORCE_NO_SYMBOL $12DF
COMMENT $12E2 * Is |x delta| <= 12 ?
FORCE_NO_SYMBOL $12E2
FORCE_NO_SYMBOL $12E5
COMMENT $12EB * Nope; hit the wall
FORCE_NO_SYMBOL $12EB
COMMENT $12EE * Successfully passed thru opening
FORCE_NO_SYMBOL $12EE
COMMENT $12F1 * Small opening
FORCE_NO_SYMBOL $12F1
COMMENT $12F4 * Is |y delta| <= 8 ?
FORCE_NO_SYMBOL $12F4
COMMENT $12FA * Nope; hit the wall
FORCE_NO_SYMBOL $12FA
COMMENT $12FD * Is |x delta| <= 4 ?
FORCE_NO_SYMBOL $12FD
FORCE_NO_SYMBOL $1300
COMMENT $1306 * Nope; hit the wall
FORCE_NO_SYMBOL $1306
COMMENT $1309 * Successfully passed thru opening
FORCE_NO_SYMBOL $1309
COMMENT_LINE $130C InitFuelWallOrCannisterFrame()
COMMENT_LINE $130C Entry:
COMMENT_LINE $130C x = frame ptr
COMMENT_LINE $130C This function fills in the incoming frame with information
COMMENT_LINE $130C for either a fuel wall or a fuel cannister; if C8B5 is
COMMENT_LINE $130C $00, then a fuel wall is initialized, otherwise, the
COMMENT_LINE $130C fuel cannister is initialized.  The system loop counter
COMMENT_LINE $130C (C87D) is used to generate a random index, which is
COMMENT_LINE $130C used to index into an array of positions (used to control
COMMENT_LINE $130C the placement of the wall opening, or the fuel cannister).
COMMENT_LINE $130C C8B4 keeps track of how many fuel objects (walls or
COMMENT_LINE $130C cannisters) have been displayed; after a certain number
COMMENT_LINE $130C of fuel objects have been displayed, the opening in the
COMMENT_LINE $130C fuel walls will get smaller.  C8B6 contains an index,
COMMENT_LINE $130C in the range 0-2, which is used to control the color
COMMENT_LINE $130C of the next fuel object.
COMMENT $130C * Use the system loop counter
FORCE_NO_SYMBOL $130C
COMMENT $130F * to generate a random index
FORCE_NO_SYMBOL $130F
COMMENT $1311 * into the
FORCE_SYMBOL $1311 EmbeddedObjectPositions
COMMENT $1314 * embedded object position array.
COMMENT $1316 * Save the embedded objs position
FORCE_NO_SYMBOL $1316
COMMENT $1319 * Fuel wall or fuel cannister?
FORCE_NO_SYMBOL $1319
FORCE_SYMBOL $131E FuelCannister
COMMENT $1321 * Save vector list 1
FORCE_NO_SYMBOL $1321
COMMENT $1323 * Save vector list 2
FORCE_NO_SYMBOL $1323
FORCE_SYMBOL $1325 DrawThenZeroIntegrators
COMMENT $1328 * Set drawing function
FORCE_NO_SYMBOL $1328
FORCE_SYMBOL $132D DrawFuelWall
COMMENT $1330 * Set drawing function
FORCE_NO_SYMBOL $1330
FORCE_SYMBOL $1333 FuelWallOpening_Large
COMMENT $1336 * See if a large or small fuel
FORCE_NO_SYMBOL $1336
COMMENT $1339 * wall opening is required.
FORCE_NO_SYMBOL $1339
FORCE_SYMBOL $133D FuelWallOpening_Small
COMMENT $1340 * Set vector list 1
FORCE_NO_SYMBOL $1340
COMMENT $1342 * Set vector list 2
FORCE_NO_SYMBOL $1342
COMMENT $1344 * Set up for next pass
FORCE_NO_SYMBOL $1344
COMMENT $1347 * Use C8B6 to generate an index
FORCE_NO_SYMBOL $1347
COMMENT $134A * which will be used to obtain
FORCE_NO_SYMBOL $134A
COMMENT $134C * the frame number (color) for
COMMENT $134E * this frame.
FORCE_SYMBOL $134F FuelWallFrameColors
COMMENT $1355 * Update index for next pass
FORCE_NO_SYMBOL $1355
COMMENT $1358 * Set the frame # (color)
FORCE_NO_SYMBOL $1358
COMMENT $135A * Inc fuel object counter
FORCE_NO_SYMBOL $135A
COMMENT $135E * blue
COMMENT $135F * green
COMMENT $1360 * red
COMMENT_LINE $1361 This array of (y,x) pairs is used to control the
COMMENT_LINE $1361 positions of the embedded objects; i.e. fuel cannisters
COMMENT_LINE $1361 and fuel wall openings.
COMMENT_LINE $1381 UpdateAllFuelFrames()
COMMENT_LINE $1381 This function is responsible for updating the scale
COMMENT_LINE $1381 factor in each of the fuel object frames.  When the
COMMENT_LINE $1381 frontmost fuel object reaches the front of the screen
COMMENT_LINE $1381 (when its scale factor >= $6F), then that object will
COMMENT_LINE $1381 be removed, and all the other fuel objects will be
COMMENT_LINE $1381 shuffled up in the frame stack.  Then, if there are
COMMENT_LINE $1381 still more fuel objects waiting, the last of the fuel
COMMENT_LINE $1381 frames will be initialized to contain the new object.
COMMENT_LINE $1381 If all of the fuel objects have moved off the front of
COMMENT_LINE $1381 the screen, then the player has completed passage thru the
COMMENT_LINE $1381 fuel passage, and the flag in C8B2 will be set.
COMMENT_LINE $1381 If the frontmost fuel object has not reached the front
COMMENT_LINE $1381 of the screen, then we only need to update the scale
COMMENT_LINE $1381 factors and intensities for the fuel object frames.
COMMENT $1381 * Has the front-most fuel object
FORCE_NO_SYMBOL $1381
COMMENT $1384 * reached the front of the screen?
FORCE_NO_SYMBOL $1384
COMMENT $138A * Yes; so shuffle up other frames
FORCE_NO_SYMBOL $138A
COMMENT $138D * Frame 2 scale => frame 1
FORCE_NO_SYMBOL $138D
FORCE_NO_SYMBOL $1390
COMMENT $1393 * Frame 2 frame # => frame 1
FORCE_NO_SYMBOL $1393
FORCE_NO_SYMBOL $1396
COMMENT $1399 * Frame 3 frame # => frame 2
FORCE_NO_SYMBOL $1399
FORCE_NO_SYMBOL $139C
COMMENT $139F * Frame 4 frame # => frame 3
FORCE_NO_SYMBOL $139F
FORCE_NO_SYMBOL $13A2
COMMENT $13A5 * Frame 2 vector list => frame 1
FORCE_NO_SYMBOL $13A5
COMMENT $13A8 * Frame 2 vector list => frame 1
FORCE_NO_SYMBOL $13A8
FORCE_NO_SYMBOL $13AB
COMMENT $13AE * Frame 3 vector list => frame 2
FORCE_NO_SYMBOL $13AE
COMMENT $13B1 * Frame 3 vector list => frame 2
FORCE_NO_SYMBOL $13B1
FORCE_NO_SYMBOL $13B4
COMMENT $13B7 * Frame 4 vector list => frame 3
FORCE_NO_SYMBOL $13B7
COMMENT $13BA * Frame 4 vector list => frame 3
FORCE_NO_SYMBOL $13BA
FORCE_NO_SYMBOL $13BD
COMMENT $13C0 * Frame 2 drawing func => frame 1
FORCE_NO_SYMBOL $13C0
FORCE_NO_SYMBOL $13C3
COMMENT $13C6 * Frame 3 drawing func => frame 2
FORCE_NO_SYMBOL $13C6
FORCE_NO_SYMBOL $13C9
COMMENT $13CC * Frame 4 drawing func => frame 3
FORCE_NO_SYMBOL $13CC
FORCE_NO_SYMBOL $13CF
COMMENT $13D2 * Frame 2 emb-obj pos => frame 1
FORCE_NO_SYMBOL $13D2
FORCE_NO_SYMBOL $13D5
COMMENT $13D8 * Frame 3 emb-obj pos => frame 2
FORCE_NO_SYMBOL $13D8
FORCE_NO_SYMBOL $13DB
COMMENT $13DE * Frame 4 emb-obj pos => frame 3
FORCE_NO_SYMBOL $13DE
COMMENT $13E1 * Either start another fuel object
FORCE_NO_SYMBOL $13E1
COMMENT $13E4 * or disable the last frame.
FORCE_NO_SYMBOL $13E4
COMMENT $13E9 * We don't need to start another
FORCE_NO_SYMBOL $13E9
COMMENT $13EB * fuel obj; so disable last frame
FORCE_NO_SYMBOL $13EB
COMMENT $13F0 * Start another fuel object
FORCE_NO_SYMBOL $13F0
FORCE_SYMBOL $13F3 InitFuelWallOrCannisterFrame
COMMENT $13F6 * Are there any active frames left?
FORCE_NO_SYMBOL $13F6
COMMENT $13FB * No; player is done
FORCE_NO_SYMBOL $13FB
COMMENT $13FF * Update the secondary scale
FORCE_NO_SYMBOL $13FF
COMMENT $1402 * factor for frame 1.
FORCE_NO_SYMBOL $1402
FORCE_SYMBOL $1405 P06E0
FORCE_NO_SYMBOL $1408
COMMENT $140B * Update the secondary scale
FORCE_NO_SYMBOL $140B
COMMENT $140D * factor for frame 2.
FORCE_NO_SYMBOL $140E
COMMENT $1411 * Update the secondary scale
FORCE_NO_SYMBOL $1411
COMMENT $1413 * factor for frame 3.
FORCE_NO_SYMBOL $1414
COMMENT $1417 * Update the secondary scale
FORCE_NO_SYMBOL $1417
COMMENT $1419 * factor for frame 4.
FORCE_NO_SYMBOL $141A
FORCE_NO_SYMBOL $141D
COMMENT $141F * Set loop counter
FORCE_NO_SYMBOL $141F
COMMENT $1422 * Get fuel obj 1 frame ptr
FORCE_NO_SYMBOL $1422
COMMENT $1425 * Get embedded obj's intensity
FORCE_NO_SYMBOL $1425
FORCE_NO_SYMBOL $1427
FORCE_NO_SYMBOL $142B
COMMENT $142D * Calculate intensity =
FORCE_NO_SYMBOL $142D
COMMENT $142F * embedded obj scale factor+$40
FORCE_NO_SYMBOL $142F
COMMENT $1431 * If rollover occurs, then use
COMMENT $1433 * max intensity ($7F).
FORCE_NO_SYMBOL $1433
COMMENT $1435 * Set intensity
FORCE_NO_SYMBOL $1435
COMMENT $1437 * Point to next frame
FORCE_NO_SYMBOL $1437
COMMENT $143A * Decrement loop counter
FORCE_NO_SYMBOL $143A
COMMENT $143D * Done processing the frames?
COMMENT_LINE $1440 InitAllFuelFrames()
COMMENT_LINE $1440 This function initializes the fuel passage variables,
COMMENT_LINE $1440 along with the 5 frames used to display the fuel objects
COMMENT_LINE $1440 (4 of the frames display fuel objects, while the 5th
COMMENT_LINE $1440 frame is used to tag the end of the frame stack).  The
COMMENT_LINE $1440 frame ptrs used are: C8F9, C91B, C93D, C95F and C981.
COMMENT $1440 * Force the secondary scale for
FORCE_NO_SYMBOL $1440
COMMENT $1443 * fuel object 1 to $08000
FORCE_NO_SYMBOL $1443
COMMENT $1446 * Get ptr to fuel obj 1 frame
FORCE_NO_SYMBOL $1446
COMMENT $1449 * Clear the fuel object counter
FORCE_NO_SYMBOL $1449
COMMENT $144C * Force fuel wall to draw first
FORCE_NO_SYMBOL $144C
COMMENT $144F * Init fuel object color index
FORCE_NO_SYMBOL $144F
COMMENT $1452 * Init the 1st 4 fuel objects
FORCE_NO_SYMBOL $1452
COMMENT $1454 * Set loop counter
FORCE_NO_SYMBOL $1454
FORCE_NO_SYMBOL $1457
COMMENT $1459 * Flag player in fuel passage
FORCE_NO_SYMBOL $1459
FORCE_SYMBOL $145C InitFuelWallOrCannisterFrame
FORCE_SYMBOL $145F get_random_a
FORCE_NO_SYMBOL $1462
COMMENT $1465 * Set frame (y,x) to (0,0)
FORCE_NO_SYMBOL $1465
FORCE_NO_SYMBOL $1467
COMMENT $146A * Set scale factor
FORCE_NO_SYMBOL $146A
COMMENT $146C * Get ptr to next frame
FORCE_NO_SYMBOL $146C
COMMENT $146F * Decrement loop counter
FORCE_NO_SYMBOL $146F
COMMENT $1472 * Done processing the frames?
FORCE_NO_SYMBOL $1474
COMMENT $1476 * Tag the end of the frame stack
FORCE_NO_SYMBOL $1476
COMMENT_LINE $1479 Vector list, 4 bytes per endpoint
COMMENT_LINE $148E Vector list, 4 bytes per endpoint
COMMENT_LINE $14A7 Vector list, 4 bytes per endpoint
COMMENT_LINE $14BC Vector list, 4 bytes per endpoint
COMMENT $14DF EP_DrawAllBlueFramesAndWalls_RightEye;
COMMENT $14E1 EP_DrawAllGreenFramesAndWalls_RightEye;
COMMENT $14E5 ; EP_DrawAllBlueFramesAndWalls_LeftEye;
COMMENT $14E7 EP_DrawAllGreenFramesAndWalls_LeftEye;
FORCE_SYMBOL $14EB init_music_buf
FORCE_NO_SYMBOL $14EE
FORCE_NO_SYMBOL $14F0
FORCE_NO_SYMBOL $14F4
FORCE_NO_SYMBOL $14F7
FORCE_NO_SYMBOL $14FA
FORCE_NO_SYMBOL $14FC
COMMENT $14FE * Load the sound bitmask
FORCE_NO_SYMBOL $14FE
FORCE_NO_SYMBOL $1500
FORCE_NO_SYMBOL $1502
FORCE_NO_SYMBOL $1504
FORCE_NO_SYMBOL $1506
FORCE_NO_SYMBOL $150C
FORCE_NO_SYMBOL $150E
FORCE_NO_SYMBOL $1510
FORCE_NO_SYMBOL $1514
FORCE_NO_SYMBOL $1518
FORCE_NO_SYMBOL $151A
FORCE_NO_SYMBOL $151C
FORCE_NO_SYMBOL $151E
FORCE_NO_SYMBOL $1520
FORCE_NO_SYMBOL $1522
FORCE_NO_SYMBOL $1524
COMMENT $1526 * (INDIRECT JUMP)
FORCE_NO_SYMBOL $1526
FORCE_NO_SYMBOL $1528
FORCE_NO_SYMBOL $152C
FORCE_NO_SYMBOL $152E
FORCE_NO_SYMBOL $1530
FORCE_NO_SYMBOL $1534
FORCE_NO_SYMBOL $1536
FORCE_NO_SYMBOL $1538
FORCE_NO_SYMBOL $153A
COMMENT $153C * Clear the sound bitmask
FORCE_NO_SYMBOL $153C
COMMENT_LINE $153F The following is an array of 8 entries, each composed
COMMENT_LINE $153F of 7 bytes, and having the following meaning:
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 0 |     Function    |
COMMENT_LINE $153F ---             ---
COMMENT_LINE $153F 1 |     Pointer     |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 2 |                 |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 3 |                 |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 4 |                 |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 5 |                 |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 6 |                 |
COMMENT_LINE $153F -------------------
COMMENT_LINE $153F 7 |                 |
COMMENT_LINE $153F -------------------
FORCE_NO_SYMBOL $1577
FORCE_NO_SYMBOL $157A
FORCE_NO_SYMBOL $157C
FORCE_NO_SYMBOL $157E
FORCE_SYMBOL $1580 P1680
FORCE_NO_SYMBOL $1585
COMMENT $1589 * Load the sound bitmask
FORCE_NO_SYMBOL $1589
FORCE_NO_SYMBOL $158B
FORCE_NO_SYMBOL $158F
FORCE_NO_SYMBOL $1592
FORCE_NO_SYMBOL $1594
FORCE_NO_SYMBOL $1597
FORCE_NO_SYMBOL $1599
FORCE_NO_SYMBOL $159C
FORCE_NO_SYMBOL $159E
FORCE_NO_SYMBOL $15A0
FORCE_NO_SYMBOL $15A3
FORCE_NO_SYMBOL $15A6
FORCE_NO_SYMBOL $15A8
FORCE_NO_SYMBOL $15AA
FORCE_NO_SYMBOL $15AC
FORCE_NO_SYMBOL $15B0
FORCE_NO_SYMBOL $15B2
FORCE_NO_SYMBOL $15B6
FORCE_NO_SYMBOL $15B8
FORCE_NO_SYMBOL $15BD
FORCE_NO_SYMBOL $15C3
FORCE_NO_SYMBOL $15C5
FORCE_NO_SYMBOL $15C9
FORCE_NO_SYMBOL $15CB
FORCE_NO_SYMBOL $15CD
FORCE_NO_SYMBOL $15CF
FORCE_SYMBOL $15D1 P1680
FORCE_NO_SYMBOL $15D4
COMMENT $15D8 * Load the sound bitmask
FORCE_NO_SYMBOL $15D8
FORCE_NO_SYMBOL $15DA
FORCE_NO_SYMBOL $15DE
FORCE_NO_SYMBOL $15E0
FORCE_NO_SYMBOL $15E2
FORCE_NO_SYMBOL $15E4
FORCE_NO_SYMBOL $15E6
FORCE_NO_SYMBOL $15E8
FORCE_NO_SYMBOL $15EA
FORCE_NO_SYMBOL $15ED
FORCE_NO_SYMBOL $15EF
FORCE_NO_SYMBOL $15F1
FORCE_NO_SYMBOL $15F4
FORCE_NO_SYMBOL $15F6
FORCE_NO_SYMBOL $15F9
FORCE_NO_SYMBOL $15FB
FORCE_NO_SYMBOL $15FE
FORCE_NO_SYMBOL $1600
FORCE_NO_SYMBOL $1603
FORCE_NO_SYMBOL $1607
FORCE_NO_SYMBOL $160B
FORCE_NO_SYMBOL $160D
FORCE_NO_SYMBOL $1611
FORCE_NO_SYMBOL $1613
FORCE_NO_SYMBOL $1615
FORCE_NO_SYMBOL $1617
FORCE_NO_SYMBOL $1619
FORCE_NO_SYMBOL $161D
FORCE_NO_SYMBOL $161F
FORCE_NO_SYMBOL $1621
FORCE_NO_SYMBOL $1623
FORCE_NO_SYMBOL $1625
FORCE_NO_SYMBOL $1627
FORCE_NO_SYMBOL $1629
FORCE_NO_SYMBOL $162B
FORCE_NO_SYMBOL $162E
FORCE_NO_SYMBOL $1630
FORCE_NO_SYMBOL $1632
FORCE_NO_SYMBOL $1634
FORCE_NO_SYMBOL $1636
FORCE_NO_SYMBOL $163A
FORCE_NO_SYMBOL $1640
FORCE_NO_SYMBOL $1643
FORCE_NO_SYMBOL $1645
FORCE_NO_SYMBOL $1647
FORCE_NO_SYMBOL $1649
FORCE_NO_SYMBOL $164D
FORCE_NO_SYMBOL $164F
FORCE_NO_SYMBOL $1653
FORCE_NO_SYMBOL $1655
FORCE_NO_SYMBOL $1658
FORCE_NO_SYMBOL $165A
FORCE_NO_SYMBOL $1660
FORCE_NO_SYMBOL $1663
FORCE_NO_SYMBOL $1667
FORCE_NO_SYMBOL $166B
FORCE_NO_SYMBOL $166D
FORCE_NO_SYMBOL $166F
FORCE_NO_SYMBOL $1671
FORCE_NO_SYMBOL $1675
FORCE_NO_SYMBOL $1677
FORCE_NO_SYMBOL $167C
FORCE_NO_SYMBOL $167E
FORCE_NO_SYMBOL $1680
FORCE_NO_SYMBOL $1683
FORCE_NO_SYMBOL $1685
FORCE_NO_SYMBOL $1687
FORCE_NO_SYMBOL $168C
FORCE_NO_SYMBOL $1690
FORCE_NO_SYMBOL $1692
FORCE_NO_SYMBOL $1694
FORCE_NO_SYMBOL $1697
FORCE_NO_SYMBOL $169B
FORCE_NO_SYMBOL $169F
FORCE_NO_SYMBOL $16A1
FORCE_NO_SYMBOL $16A4
FORCE_NO_SYMBOL $16A7
FORCE_NO_SYMBOL $16A9
COMMENT $16AC * Get the explosion bitmask
FORCE_NO_SYMBOL $16AC
FORCE_NO_SYMBOL $16AE
FORCE_NO_SYMBOL $16B2
COMMENT $16B6 * Use sound characteristic index
FORCE_NO_SYMBOL $16B6
FORCE_SYMBOL $16B8 SoundCharacteristics
FORCE_NO_SYMBOL $16BF
FORCE_NO_SYMBOL $16C1
FORCE_SYMBOL $16C3 generate_explosion_sound
FORCE_NO_SYMBOL $16C6
FORCE_NO_SYMBOL $16CA
COMMENT_LINE $16CF Array of 2 entries, each 4 bytes long.
COMMENT_LINE $1B7C UpdateWarlordShipFrames()
COMMENT_LINE $1B7C This function is responsible for updating the information
COMMENT_LINE $1B7C within the warlord ship frames (C981, C9A3, C9C5, C9E7,
COMMENT_LINE $1B7C and CA09).  It will update the position of the warlord
COMMENT_LINE $1B7C ship, recalculating the x and y delta values when the
COMMENT_LINE $1B7C ship has moved to the edge of its bounding box.  It will
COMMENT_LINE $1B7C also update the intensity and scale, to make the ship
COMMENT_LINE $1B7C appear to get closer.  Afterwards, it will check to see
COMMENT_LINE $1B7C if any of the player's bullets have hit the warlord ship's
COMMENT_LINE $1B7C target.  If one has, then an explosion is generated, and
COMMENT_LINE $1B7C then play continues.
FORCE_NO_SYMBOL $1B7C
COMMENT $1B7E * Get addr of frame's scale
FORCE_NO_SYMBOL $1B7E
FORCE_SYMBOL $1B81 P06E0
COMMENT $1B84 * Get frame addr (Warlord target)
FORCE_NO_SYMBOL $1B84
COMMENT $1B87 * If the scale factor is >= $50
FORCE_NO_SYMBOL $1B87
COMMENT $1B89 * then force it back to 1.
FORCE_NO_SYMBOL $1B89
FORCE_NO_SYMBOL $1B8D
FORCE_NO_SYMBOL $1B8F
COMMENT $1B91 * Load current position
FORCE_NO_SYMBOL $1B91
FORCE_SYMBOL $1B93 get_absolute_value_of_ab
COMMENT $1B96 * If the x position is now out
FORCE_NO_SYMBOL $1B96
COMMENT $1B98 * bounds ( |x|>$3F ), then we
COMMENT $1B9A * need to generate a new x
FORCE_NO_SYMBOL $1B9A
COMMENT $1B9D * movement delta.  Force the
FORCE_NO_SYMBOL $1B9D
COMMENT $1B9F * movement value to move the
FORCE_NO_SYMBOL $1B9F
COMMENT $1BA1 * ship in the opposite direction.
FORCE_NO_SYMBOL $1BA1
COMMENT $1BA6 * Set new x movement delta
FORCE_NO_SYMBOL $1BA6
COMMENT $1BA9 * If the y position is now out
FORCE_NO_SYMBOL $1BA9
COMMENT $1BAB * bounds ( |y|>$3F ), then we
COMMENT $1BAD * need to generate a new y
FORCE_NO_SYMBOL $1BAD
COMMENT $1BB0 * movement delta.  Force the
FORCE_NO_SYMBOL $1BB0
COMMENT $1BB2 * movement value to move the
FORCE_NO_SYMBOL $1BB2
COMMENT $1BB4 * ship in the opposite direction.
FORCE_NO_SYMBOL $1BB4
COMMENT $1BB9 * Set new y movement delta
FORCE_NO_SYMBOL $1BB9
COMMENT $1BBC * Update the position only on
FORCE_NO_SYMBOL $1BBC
COMMENT $1BBF * every other pass.
FORCE_NO_SYMBOL $1BBF
COMMENT $1BC3 * Load current position
FORCE_NO_SYMBOL $1BC3
COMMENT $1BC5 * y += y movement delta
FORCE_NO_SYMBOL $1BC5
COMMENT $1BC8 * x += x movement delta
FORCE_NO_SYMBOL $1BC8
COMMENT $1BCB * Save new position
FORCE_NO_SYMBOL $1BCB
COMMENT $1BCD * Shuffle down the scale factors
FORCE_NO_SYMBOL $1BCD
FORCE_NO_SYMBOL $1BCF
FORCE_NO_SYMBOL $1BD1
COMMENT $1BD3 * Calculate intensity=scale+$40
FORCE_NO_SYMBOL $1BD3
COMMENT $1BD5 * If rollover, use $7F (max)
FORCE_NO_SYMBOL $1BD5
FORCE_NO_SYMBOL $1BD9
COMMENT $1BDB * Set new intensity
FORCE_NO_SYMBOL $1BDB
COMMENT $1BDD * Ptr to other warlord frames
FORCE_NO_SYMBOL $1BDD
COMMENT $1BE0 * Sync all warlord ship frames
FORCE_NO_SYMBOL $1BE0
COMMENT $1BE2 * with the warlord's main frame
COMMENT $1BE6 * Get frame ptr (Warlord target)
FORCE_NO_SYMBOL $1BE6
COMMENT $1BE9 * Check for bullet hit only if
FORCE_NO_SYMBOL $1BE9
COMMENT $1BEC * explosion not already happening.
FORCE_SYMBOL $1BEE CheckForCollisionWithBullets
COMMENT $1BF4 * No bullets hit the target
COMMENT $1BF5 * A bullet hit the target
FORCE_NO_SYMBOL $1BF5
FORCE_NO_SYMBOL $1BF8
COMMENT $1BFA * Force sound to occur
FORCE_NO_SYMBOL $1BFA
FORCE_NO_SYMBOL $1BFD
COMMENT $1BFF * Set sound characteristics index
FORCE_NO_SYMBOL $1BFF
COMMENT $1C02 * Tag that explosion is happening
FORCE_NO_SYMBOL $1C02
FORCE_NO_SYMBOL $1C05
COMMENT $1C07 * Set explosion duration timer
FORCE_NO_SYMBOL $1C07
FORCE_SYMBOL $1C0A ExplosionVectorTable
COMMENT $1C0D * Set vector list 1
FORCE_NO_SYMBOL $1C0D
COMMENT $1C0F * Set vector list 2
FORCE_NO_SYMBOL $1C0F
FORCE_SYMBOL $1C11 NE_DrawAnimatedDots
COMMENT $1C14 * Set drawing function
FORCE_NO_SYMBOL $1C14
COMMENT $1C17 * Increment hit count on warlord
FORCE_NO_SYMBOL $1C17
COMMENT $1C1A * Award 100 pts to the player
FORCE_NO_SYMBOL $1C1A
FORCE_SYMBOL $1C1D CheckForScoreOver20000
COMMENT $1C21 * Keep displaying explosion, until
FORCE_NO_SYMBOL $1C21
COMMENT $1C24 * duration timer goes to 0.
COMMENT $1C27 * Redisplay warlord ship target
FORCE_NO_SYMBOL $1C27
FORCE_SYMBOL $1C2A DrawAnimatedVectorList_Slow
COMMENT $1C2D * Set drawing function
FORCE_NO_SYMBOL $1C2D
FORCE_SYMBOL $1C30 WarlordShipTargetVectorTable
COMMENT $1C33 * Set vector list 1
FORCE_NO_SYMBOL $1C33
COMMENT $1C35 * Set vector list 2
FORCE_NO_SYMBOL $1C35
COMMENT $1C38 * The following block syncs the
FORCE_NO_SYMBOL $1C38
COMMENT $1C3A * incoming warlord frame info (u)
FORCE_NO_SYMBOL $1C3A
COMMENT $1C3C * with that of the warlord ships
FORCE_NO_SYMBOL $1C3C
COMMENT $1C3E * target frame (x=C981).  This
FORCE_NO_SYMBOL $1C3E
COMMENT $1C40 * includes intensities, scale
FORCE_NO_SYMBOL $1C40
COMMENT $1C42 * factors and positions.
FORCE_NO_SYMBOL $1C42
FORCE_NO_SYMBOL $1C44
FORCE_NO_SYMBOL $1C46
FORCE_NO_SYMBOL $1C48
FORCE_NO_SYMBOL $1C4A
COMMENT $1C4C * Point to next warlord frame
FORCE_NO_SYMBOL $1C4C
COMMENT $1C4F * Process the next frame
FORCE_SYMBOL $1C4F P1BE0
COMMENT_LINE $1C52 NE_DrawAnimatedDots()
COMMENT_LINE $1C52 Entry:
COMMENT_LINE $1C52 b = scale factor
COMMENT_LINE $1C52 x = vector table ptr containing 4 vector list pointers
COMMENT_LINE $1C52 This function cycles through a table of vector pointers
COMMENT_LINE $1C52 (actually, just endpoints, since only dots are drawn),
COMMENT_LINE $1C52 drawing the indicated collection of dots.  The result is
COMMENT_LINE $1C52 what appears to be a bunch of animated dots being drawn.
COMMENT $1C52 * Use the system loop counter to
FORCE_NO_SYMBOL $1C52
COMMENT $1C55 * determine which of the 4 dot
FORCE_NO_SYMBOL $1C55
COMMENT $1C57 * lists to draw.
FORCE_SYMBOL $1C5A NE_DrawDots
COMMENT_LINE $1C5E InitWarlordShipFrames()
COMMENT_LINE $1C5E This function fills in the frames used to display the
COMMENT_LINE $1C5E warlord ship.  The frames are used in the following
COMMENT_LINE $1C5E fashion:
COMMENT_LINE $1C5E C981 = warlord ship target area
COMMENT_LINE $1C5E C9A3 = warlord ship body
COMMENT_LINE $1C5E C9C5 = warlord ship body
COMMENT_LINE $1C5E C9E7 = warlord ship top/bottom fins
COMMENT_LINE $1C5E CA09 = warlord ship side fins
COMMENT_LINE $1C5E CA2B = end of frame stack
COMMENT $1C5E * Get ptr to warlord target frame
FORCE_NO_SYMBOL $1C5E
FORCE_SYMBOL $1C61 WarlordShipFrameInfo
COMMENT $1C64 * Process each entry, until $00
COMMENT $1C66 * encountered.
COMMENT $1C68 * Mark last frame as the end of
FORCE_NO_SYMBOL $1C68
COMMENT $1C6A * the frame stack.
FORCE_NO_SYMBOL $1C6A
COMMENT $1C6D * Set drawing function
FORCE_NO_SYMBOL $1C6D
COMMENT $1C72 * Set vector list 2
FORCE_NO_SYMBOL $1C72
COMMENT $1C76 * Set vector list 1
FORCE_NO_SYMBOL $1C76
COMMENT $1C7A * Set frame number (i.e. color)
FORCE_NO_SYMBOL $1C7A
COMMENT $1C7C * Clear explosion flag
FORCE_NO_SYMBOL $1C7C
COMMENT $1C7F * Flag player in enemy passage
FORCE_NO_SYMBOL $1C7F
COMMENT $1C82 * Use the system loop counter to
FORCE_NO_SYMBOL $1C82
COMMENT $1C85 * generate a random (y,x) position
FORCE_NO_SYMBOL $1C85
COMMENT $1C87 * where each coordinate is in the
FORCE_NO_SYMBOL $1C87
COMMENT $1C89 * range of +-$3F.
FORCE_NO_SYMBOL $1C89
COMMENT $1C8C * Determine sign of y value
FORCE_NO_SYMBOL $1C8F
COMMENT $1C92 * Determine sign of x value
COMMENT $1C95 * Set initial (y,x) position
FORCE_NO_SYMBOL $1C95
COMMENT $1C97 * Use the system loop counter to
FORCE_NO_SYMBOL $1C97
COMMENT $1C9A * generate random x and y movement
FORCE_NO_SYMBOL $1C9A
COMMENT $1C9C * delta values, in the range of
FORCE_NO_SYMBOL $1C9C
COMMENT $1C9E * 2 - 7
FORCE_NO_SYMBOL $1C9E
FORCE_NO_SYMBOL $1CA0
COMMENT $1CA2 * Set x movement delta
FORCE_NO_SYMBOL $1CA2
COMMENT $1CA5 * Set y movement delta
FORCE_NO_SYMBOL $1CA5
FORCE_NO_SYMBOL $1CA8
COMMENT $1CAA * Set scale factor
FORCE_NO_SYMBOL $1CAA
COMMENT $1CAC * Set embedded obj's scale factor
FORCE_NO_SYMBOL $1CAC
FORCE_NO_SYMBOL $1CAE
COMMENT $1CB0 * Calculate intensity = scale+$40
FORCE_NO_SYMBOL $1CB0
COMMENT $1CB2 * If rollover occurs, then simply
FORCE_NO_SYMBOL $1CB2
COMMENT $1CB4 * use $7F (max).
FORCE_NO_SYMBOL $1CB6
COMMENT $1CB8 * Set intensity
FORCE_NO_SYMBOL $1CB8
COMMENT $1CBA * Get ptr to next frame
FORCE_NO_SYMBOL $1CBA
COMMENT $1CBD * Continue processing
FORCE_SYMBOL $1CBD P1C64
COMMENT_LINE $1CC0 The following is an array having 6 entries.  Each
COMMENT_LINE $1CC0 entry (with the exception of the last one, which
COMMENT_LINE $1CC0 merely marks the end of the array) is composed of
COMMENT_LINE $1CC0 the following 7 bytes of information:
COMMENT_LINE $1CC0 ------------------
COMMENT_LINE $1CC0 0 |    Drawing     |
COMMENT_LINE $1CC0 ---            ---
COMMENT_LINE $1CC0 2 |    Function    |
COMMENT_LINE $1CC0 ------------------
COMMENT_LINE $1CC0 3 |    Vector      |
COMMENT_LINE $1CC0 ---            ---
COMMENT_LINE $1CC0 4 |  List/Table 1  |
COMMENT_LINE $1CC0 ------------------
COMMENT_LINE $1CC0 5 |    Vector      |
COMMENT_LINE $1CC0 ---            ---
COMMENT_LINE $1CC0 6 |  List/Table 2  |
COMMENT_LINE $1CC0 ------------------
COMMENT_LINE $1CC0 7 | Frame # (color)|
COMMENT_LINE $1CC0 ------------------
COMMENT_LINE $1CE5 ProcessWarlordShipBullet()
COMMENT_LINE $1CE5 This function takes care of processing the warlord ship's
COMMENT_LINE $1CE5 single bullet frame.  If the bullet is visible, then
COMMENT_LINE $1CE5 it will update its scale and intensity values, so that
COMMENT_LINE $1CE5 the bullet appears to be coming at the player.  Once the
COMMENT_LINE $1CE5 bullet reaches the front of the screen, is will stop
COMMENT_LINE $1CE5 being displayed; on a later pass, it will attempt to
COMMENT_LINE $1CE5 fire another bullet.
COMMENT $1CE5 * See if the warship's bullet frame
FORCE_NO_SYMBOL $1CE5
COMMENT $1CE7 * is visible or invisible.
FORCE_NO_SYMBOL $1CE7
COMMENT $1CEC * Get warship target's scale factor
FORCE_NO_SYMBOL $1CEC
FORCE_NO_SYMBOL $1CEF
COMMENT $1CF4 * Use the system loop counter to
FORCE_NO_SYMBOL $1CF4
COMMENT $1CF7 * control how often to fire a new
FORCE_NO_SYMBOL $1CF7
COMMENT $1CF9 * warlord ship bullet.
COMMENT $1CFC * Fire a new warlord ship bullet
FORCE_NO_SYMBOL $1CFC
FORCE_NO_SYMBOL $1CFE
COMMENT $1D01 * Retag frame as being visible.
FORCE_NO_SYMBOL $1D01
COMMENT $1D04 * Set warlord's bullet position the
FORCE_NO_SYMBOL $1D04
COMMENT $1D07 * same as the player's ship.
FORCE_NO_SYMBOL $1D07
COMMENT $1D0A * Start with same scale factor as
FORCE_NO_SYMBOL $1D0A
COMMENT $1D0D * the warlord's target area.
FORCE_NO_SYMBOL $1D0D
COMMENT $1D10 * Point to bullet's scale factor.
FORCE_NO_SYMBOL $1D10
FORCE_NO_SYMBOL $1D13
FORCE_SYMBOL $1D15 P06E0
COMMENT $1D18 * Point to warlord's bullet frame.
FORCE_NO_SYMBOL $1D18
COMMENT $1D1B * Get the scale factor.
FORCE_NO_SYMBOL $1D1B
COMMENT $1D1D * Once the scale factor is > $70,
FORCE_NO_SYMBOL $1D1D
COMMENT $1D1F * then the bullet has reached the
COMMENT $1D21 * front of the screen, so tag it
FORCE_NO_SYMBOL $1D21
COMMENT $1D23 * as no longer visible.
FORCE_NO_SYMBOL $1D23
FORCE_NO_SYMBOL $1D25
COMMENT $1D28 * Adjust bullets scale & intensity
FORCE_NO_SYMBOL $1D28
COMMENT $1D2A * values, so it appears to grow &
COMMENT $1D2B * get brighter as it approaches
COMMENT $1D2C * the front of the screen
FORCE_NO_SYMBOL $1D2D
FORCE_NO_SYMBOL $1D2F
FORCE_NO_SYMBOL $1D31
FORCE_NO_SYMBOL $1D35
COMMENT $1D37 * Calculate intensity = scale+$40
FORCE_NO_SYMBOL $1D37
COMMENT $1D39 * If rollover occurs, then use
FORCE_NO_SYMBOL $1D39
COMMENT $1D3B * $7F (max).
FORCE_NO_SYMBOL $1D3D
COMMENT $1D3F * Set intensity
FORCE_NO_SYMBOL $1D3F
COMMENT_LINE $1D42 InitWarlordShipBulletFrame()
COMMENT_LINE $1D42 This function initializes the frame (C95F) used to
COMMENT_LINE $1D42 display the warlord ship's single bullet.
COMMENT $1D42 * Ptr to warlord bullet frame
FORCE_NO_SYMBOL $1D42
FORCE_NO_SYMBOL $1D45
COMMENT $1D47 * Frame #=$12 (green,invisible)
FORCE_NO_SYMBOL $1D47
FORCE_SYMBOL $1D49 WarlordShipBulletVectorTable
COMMENT $1D4C * Set vector list 1
FORCE_NO_SYMBOL $1D4C
COMMENT $1D4E * Set vector list 2
FORCE_NO_SYMBOL $1D4E
FORCE_SYMBOL $1D50 DrawAnimatedVectorList_Fast
COMMENT $1D53 * Set drawing function
FORCE_NO_SYMBOL $1D53
COMMENT $1D56 * Clear explosion flag
FORCE_NO_SYMBOL $1D56
COMMENT_LINE $1EFA Open space = 1EFA - 1FFF
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$000E DB_DATA 1
RANGE $000E-$000F DB_DATA 1
RANGE $000F-$0010 DB_DATA 1
RANGE $0010-$0011 DB_DATA 1
RANGE $0011-$0018 CHAR_DATA 7
RANGE $0018-$0019 DB_DATA 1
RANGE $0019-$001A DB_DATA 1
RANGE $001A-$001B DB_DATA 1
RANGE $001B-$001C DB_DATA 1
RANGE $001C-$0024 CHAR_DATA 8
RANGE $0024-$0495 CODE
RANGE $0495-$0497 DW_DATA 1
RANGE $0497-$0499 DW_DATA 1
RANGE $0499-$04B3 CODE
RANGE $04B3-$04B5 DW_DATA 1
RANGE $04B5-$04B7 DW_DATA 1
RANGE $04B7-$0504 CODE
RANGE $0504-$0506 DW_DATA 1
RANGE $0506-$0508 DW_DATA 1
RANGE $0508-$050F CHAR_DATA 7
RANGE $050F-$054D CODE
RANGE $054D-$054F DW_DATA 1
RANGE $054F-$0551 DW_DATA 1
RANGE $0551-$0577 CODE
RANGE $0577-$0579 DW_DATA 1
RANGE $0579-$057B DW_DATA 1
RANGE $057B-$0592 CODE
RANGE $0592-$0594 DW_DATA 1
RANGE $0594-$0596 DW_DATA 1
RANGE $0596-$08FD CODE
RANGE $08FD-$08FF DW_DATA 1
RANGE $08FF-$0900 DB_DATA 1
RANGE $0900-$0901 DB_DATA 1
RANGE $0901-$0903 DW_DATA 1
RANGE $0903-$0905 DW_DATA 1
RANGE $0905-$0907 DW_DATA 1
RANGE $0907-$0908 DB_DATA 1
RANGE $0908-$0909 DB_DATA 1
RANGE $0909-$090A DB_DATA 1
RANGE $090A-$090C DW_DATA 1
RANGE $090C-$090D DB_DATA 1
RANGE $090D-$090E DB_DATA 1
RANGE $090E-$0910 DW_DATA 1
RANGE $0910-$0912 DW_DATA 1
RANGE $0912-$0914 DW_DATA 1
RANGE $0914-$0915 DB_DATA 1
RANGE $0915-$0916 DB_DATA 1
RANGE $0916-$0917 DB_DATA 1
RANGE $0917-$0919 DW_DATA 1
RANGE $0919-$091A DB_DATA 1
RANGE $091A-$091B DB_DATA 1
RANGE $091B-$091D DW_DATA 1
RANGE $091D-$091F DW_DATA 1
RANGE $091F-$0921 DW_DATA 1
RANGE $0921-$0922 DB_DATA 1
RANGE $0922-$0923 DB_DATA 1
RANGE $0923-$0924 DB_DATA 1
RANGE $0924-$0926 DW_DATA 1
RANGE $0926-$0927 DB_DATA 1
RANGE $0927-$0928 DB_DATA 1
RANGE $0928-$092A DW_DATA 1
RANGE $092A-$092C DW_DATA 1
RANGE $092C-$092E DW_DATA 1
RANGE $092E-$092F DB_DATA 1
RANGE $092F-$0930 DB_DATA 1
RANGE $0930-$0931 DB_DATA 1
RANGE $0931-$0933 DW_DATA 1
RANGE $0933-$0934 DB_DATA 1
RANGE $0934-$0935 DB_DATA 1
RANGE $0935-$0937 DW_DATA 1
RANGE $0937-$0939 DW_DATA 1
RANGE $0939-$093B DW_DATA 1
RANGE $093B-$093C DB_DATA 1
RANGE $093C-$093D DB_DATA 1
RANGE $093D-$093E DB_DATA 1
RANGE $093E-$0940 DW_DATA 1
RANGE $0940-$0941 DB_DATA 1
RANGE $0941-$0942 DB_DATA 1
RANGE $0942-$0944 DW_DATA 1
RANGE $0944-$0946 DW_DATA 1
RANGE $0946-$0948 DW_DATA 1
RANGE $0948-$0949 DB_DATA 1
RANGE $0949-$094A DB_DATA 1
RANGE $094A-$094B DB_DATA 1
RANGE $094B-$094D DW_DATA 1
RANGE $094D-$094E DB_DATA 1
RANGE $094E-$094F DB_DATA 1
RANGE $094F-$0951 DW_DATA 1
RANGE $0951-$0953 DW_DATA 1
RANGE $0953-$0955 DW_DATA 1
RANGE $0955-$0956 DB_DATA 1
RANGE $0956-$0957 DB_DATA 1
RANGE $0957-$0958 DB_DATA 1
RANGE $0958-$095A DW_DATA 1
RANGE $095A-$095B DB_DATA 1
RANGE $095B-$095C DB_DATA 1
RANGE $095C-$095E DW_DATA 1
RANGE $095E-$0960 DW_DATA 1
RANGE $0960-$0962 DW_DATA 1
RANGE $0962-$0963 DB_DATA 1
RANGE $0963-$0964 DB_DATA 1
RANGE $0964-$0965 DB_DATA 1
RANGE $0965-$0967 DW_DATA 1
RANGE $0967-$0968 DB_DATA 1
RANGE $0968-$0969 DB_DATA 1
RANGE $0969-$096B DW_DATA 1
RANGE $096B-$096D DW_DATA 1
RANGE $096D-$096F DW_DATA 1
RANGE $096F-$0970 DB_DATA 1
RANGE $0970-$0971 DB_DATA 1
RANGE $0971-$0972 DB_DATA 1
RANGE $0972-$0974 DW_DATA 1
RANGE $0974-$0975 DB_DATA 1
RANGE $0975-$0976 DB_DATA 1
RANGE $0976-$0978 DW_DATA 1
RANGE $0978-$097A DW_DATA 1
RANGE $097A-$097C DW_DATA 1
RANGE $097C-$097D DB_DATA 1
RANGE $097D-$097E DB_DATA 1
RANGE $097E-$097F DB_DATA 1
RANGE $097F-$0981 DW_DATA 1
RANGE $0981-$0982 DB_DATA 1
RANGE $0982-$0983 DB_DATA 1
RANGE $0983-$0985 DW_DATA 1
RANGE $0985-$0987 DW_DATA 1
RANGE $0987-$0989 DW_DATA 1
RANGE $0989-$098A DB_DATA 1
RANGE $098A-$098B DB_DATA 1
RANGE $098B-$098C DB_DATA 1
RANGE $098C-$098E DW_DATA 1
RANGE $098E-$098F DB_DATA 1
RANGE $098F-$0990 DB_DATA 1
RANGE $0990-$0992 DW_DATA 1
RANGE $0992-$0994 DW_DATA 1
RANGE $0994-$0996 DW_DATA 1
RANGE $0996-$0997 DB_DATA 1
RANGE $0997-$0998 DB_DATA 1
RANGE $0998-$0999 DB_DATA 1
RANGE $0999-$099B DW_DATA 1
RANGE $099B-$099C DB_DATA 1
RANGE $099C-$099D DB_DATA 1
RANGE $099D-$099F DW_DATA 1
RANGE $099F-$09A1 DW_DATA 1
RANGE $09A1-$09A3 DW_DATA 1
RANGE $09A3-$09A4 DB_DATA 1
RANGE $09A4-$09A5 DB_DATA 1
RANGE $09A5-$09A6 DB_DATA 1
RANGE $09A6-$09A8 DW_DATA 1
RANGE $09A8-$09A9 DB_DATA 1
RANGE $09A9-$09AA DB_DATA 1
RANGE $09AA-$09AC DW_DATA 1
RANGE $09AC-$09AE DW_DATA 1
RANGE $09AE-$09B0 DW_DATA 1
RANGE $09B0-$09B1 DB_DATA 1
RANGE $09B1-$09B2 DB_DATA 1
RANGE $09B2-$09B3 DB_DATA 1
RANGE $09B3-$09B5 DW_DATA 1
RANGE $09B5-$09B6 DB_DATA 1
RANGE $09B6-$09B7 DB_DATA 1
RANGE $09B7-$09B9 DW_DATA 1
RANGE $09B9-$09BB DW_DATA 1
RANGE $09BB-$09BD DW_DATA 1
RANGE $09BD-$09BE DB_DATA 1
RANGE $09BE-$09BF DB_DATA 1
RANGE $09BF-$09C0 DB_DATA 1
RANGE $09C0-$09C2 DW_DATA 1
RANGE $09C2-$09C3 DB_DATA 1
RANGE $09C3-$09C4 DB_DATA 1
RANGE $09C4-$09C6 DW_DATA 1
RANGE $09C6-$09C8 DW_DATA 1
RANGE $09C8-$09CA DW_DATA 1
RANGE $09CA-$09CB DB_DATA 1
RANGE $09CB-$09CC DB_DATA 1
RANGE $09CC-$09CD DB_DATA 1
RANGE $09CD-$09CF DW_DATA 1
RANGE $09CF-$09D0 DB_DATA 1
RANGE $09D0-$09D1 DB_DATA 1
RANGE $09D1-$09D3 DW_DATA 1
RANGE $09D3-$09D5 DW_DATA 1
RANGE $09D5-$09D7 DW_DATA 1
RANGE $09D7-$09D8 DB_DATA 1
RANGE $09D8-$09D9 DB_DATA 1
RANGE $09D9-$09DA DB_DATA 1
RANGE $09DA-$0AC3 CODE
RANGE $0AC3-$0AC4 DB_DATA 1
RANGE $0AC4-$0AC5 DB_DATA 1
RANGE $0AC5-$0AC6 DB_DATA 1
RANGE $0AC6-$0AC7 DB_DATA 1
RANGE $0AC7-$0CDB CODE
RANGE $0CDB-$0CDC DB_DATA 1
RANGE $0CDC-$0CDD DB_DATA 1
RANGE $0CDD-$0CDE DB_DATA 1
RANGE $0CDE-$0CDF DB_DATA 1
RANGE $0CDF-$0CE0 DB_DATA 1
RANGE $0CE0-$0CE1 DB_DATA 1
RANGE $0CE1-$0CE2 DB_DATA 1
RANGE $0CE2-$0CE3 DB_DATA 1
RANGE $0CE3-$0CE4 DB_DATA 1
RANGE $0CE4-$0CE5 DB_DATA 1
RANGE $0CE5-$0EC9 CODE
RANGE $0EC9-$0ED3 CHAR_DATA 10
RANGE $0ED3-$1113 CODE
RANGE $1113-$111B CHAR_DATA 8
RANGE $111B-$135E CODE
RANGE $135E-$135F DB_DATA 1
RANGE $135F-$1360 DB_DATA 1
RANGE $1360-$1361 DB_DATA 1
RANGE $1361-$1363 DW_DATA 1
RANGE $1363-$1365 DW_DATA 1
RANGE $1365-$1367 DW_DATA 1
RANGE $1367-$1369 DW_DATA 1
RANGE $1369-$136B DW_DATA 1
RANGE $136B-$136D DW_DATA 1
RANGE $136D-$136F DW_DATA 1
RANGE $136F-$1371 DW_DATA 1
RANGE $1371-$1373 DW_DATA 1
RANGE $1373-$1375 DW_DATA 1
RANGE $1375-$1377 DW_DATA 1
RANGE $1377-$1379 DW_DATA 1
RANGE $1379-$137B DW_DATA 1
RANGE $137B-$137D DW_DATA 1
RANGE $137D-$137F DW_DATA 1
RANGE $137F-$1381 DW_DATA 1
RANGE $1381-$1479 CODE
RANGE $1479-$147A DB_DATA 1
RANGE $147A-$147B DB_DATA 1
RANGE $147B-$147C DB_DATA 1
RANGE $147C-$147D DB_DATA 1
RANGE $147D-$147E DB_DATA 1
RANGE $147E-$147F DB_DATA 1
RANGE $147F-$1480 DB_DATA 1
RANGE $1480-$1481 DB_DATA 1
RANGE $1481-$1482 DB_DATA 1
RANGE $1482-$1483 DB_DATA 1
RANGE $1483-$1484 DB_DATA 1
RANGE $1484-$1485 DB_DATA 1
RANGE $1485-$1486 DB_DATA 1
RANGE $1486-$1487 DB_DATA 1
RANGE $1487-$1488 DB_DATA 1
RANGE $1488-$1489 DB_DATA 1
RANGE $1489-$148A DB_DATA 1
RANGE $148A-$148B DB_DATA 1
RANGE $148B-$148C DB_DATA 1
RANGE $148C-$148D DB_DATA 1
RANGE $148D-$148E DB_DATA 1
RANGE $148E-$148F DB_DATA 1
RANGE $148F-$1490 DB_DATA 1
RANGE $1490-$1491 DB_DATA 1
RANGE $1491-$1492 DB_DATA 1
RANGE $1492-$1493 DB_DATA 1
RANGE $1493-$1494 DB_DATA 1
RANGE $1494-$1495 DB_DATA 1
RANGE $1495-$1496 DB_DATA 1
RANGE $1496-$1497 DB_DATA 1
RANGE $1497-$1498 DB_DATA 1
RANGE $1498-$1499 DB_DATA 1
RANGE $1499-$149A DB_DATA 1
RANGE $149A-$149B DB_DATA 1
RANGE $149B-$149C DB_DATA 1
RANGE $149C-$149D DB_DATA 1
RANGE $149D-$149E DB_DATA 1
RANGE $149E-$149F DB_DATA 1
RANGE $149F-$14A0 DB_DATA 1
RANGE $14A0-$14A1 DB_DATA 1
RANGE $14A1-$14A2 DB_DATA 1
RANGE $14A2-$14A3 DB_DATA 1
RANGE $14A3-$14A4 DB_DATA 1
RANGE $14A4-$14A5 DB_DATA 1
RANGE $14A5-$14A6 DB_DATA 1
RANGE $14A6-$14A7 DB_DATA 1
RANGE $14A7-$14A8 DB_DATA 1
RANGE $14A8-$14A9 DB_DATA 1
RANGE $14A9-$14AA DB_DATA 1
RANGE $14AA-$14AB DB_DATA 1
RANGE $14AB-$14AC DB_DATA 1
RANGE $14AC-$14AD DB_DATA 1
RANGE $14AD-$14AE DB_DATA 1
RANGE $14AE-$14AF DB_DATA 1
RANGE $14AF-$14B0 DB_DATA 1
RANGE $14B0-$14B1 DB_DATA 1
RANGE $14B1-$14B2 DB_DATA 1
RANGE $14B2-$14B3 DB_DATA 1
RANGE $14B3-$14B4 DB_DATA 1
RANGE $14B4-$14B5 DB_DATA 1
RANGE $14B5-$14B6 DB_DATA 1
RANGE $14B6-$14B7 DB_DATA 1
RANGE $14B7-$14B8 DB_DATA 1
RANGE $14B8-$14B9 DB_DATA 1
RANGE $14B9-$14BA DB_DATA 1
RANGE $14BA-$14BB DB_DATA 1
RANGE $14BB-$14BC DB_DATA 1
RANGE $14BC-$14BD DB_DATA 1
RANGE $14BD-$14BE DB_DATA 1
RANGE $14BE-$14BF DB_DATA 1
RANGE $14BF-$14C0 DB_DATA 1
RANGE $14C0-$14C1 DB_DATA 1
RANGE $14C1-$14C2 DB_DATA 1
RANGE $14C2-$14C3 DB_DATA 1
RANGE $14C3-$14C4 DB_DATA 1
RANGE $14C4-$14C5 DB_DATA 1
RANGE $14C5-$14C6 DB_DATA 1
RANGE $14C6-$14C7 DB_DATA 1
RANGE $14C7-$14C8 DB_DATA 1
RANGE $14C8-$14C9 DB_DATA 1
RANGE $14C9-$14CA DB_DATA 1
RANGE $14CA-$14CB DB_DATA 1
RANGE $14CB-$14CC DB_DATA 1
RANGE $14CC-$14CD DB_DATA 1
RANGE $14CD-$14CE DB_DATA 1
RANGE $14CE-$14CF DB_DATA 1
RANGE $14CF-$14D0 DB_DATA 1
RANGE $14D0-$14D1 DB_DATA 1
RANGE $14D1-$14D3 DW_DATA 1
RANGE $14D3-$14D5 DW_DATA 1
RANGE $14D5-$14D7 DW_DATA 1
RANGE $14D7-$14D9 DW_DATA 1
RANGE $14D9-$14DB DW_DATA 1
RANGE $14DB-$14DD DW_DATA 1
RANGE $14DD-$14DF DW_DATA 1
RANGE $14DF-$14E1 DW_DATA 1
RANGE $14E1-$14E3 DW_DATA 1
RANGE $14E3-$14E5 DW_DATA 1
RANGE $14E5-$14E7 DW_DATA 1
RANGE $14E7-$14E9 DW_DATA 1
RANGE $14E9-$14EB DW_DATA 1
RANGE $14EB-$153F CODE
RANGE $153F-$1541 DW_DATA 1
RANGE $1541-$1542 DB_DATA 1
RANGE $1542-$1543 DB_DATA 1
RANGE $1543-$1544 DB_DATA 1
RANGE $1544-$1545 DB_DATA 1
RANGE $1545-$1546 DB_DATA 1
RANGE $1546-$1548 DW_DATA 1
RANGE $1548-$1549 DB_DATA 1
RANGE $1549-$154A DB_DATA 1
RANGE $154A-$154B DB_DATA 1
RANGE $154B-$154C DB_DATA 1
RANGE $154C-$154D DB_DATA 1
RANGE $154D-$154F DW_DATA 1
RANGE $154F-$1550 DB_DATA 1
RANGE $1550-$1551 DB_DATA 1
RANGE $1551-$1552 DB_DATA 1
RANGE $1552-$1553 DB_DATA 1
RANGE $1553-$1554 DB_DATA 1
RANGE $1554-$1556 DW_DATA 1
RANGE $1556-$1557 DB_DATA 1
RANGE $1557-$1558 DB_DATA 1
RANGE $1558-$1559 DB_DATA 1
RANGE $1559-$155A DB_DATA 1
RANGE $155A-$155B DB_DATA 1
RANGE $155B-$155D DW_DATA 1
RANGE $155D-$155E DB_DATA 1
RANGE $155E-$155F DB_DATA 1
RANGE $155F-$1560 DB_DATA 1
RANGE $1560-$1561 DB_DATA 1
RANGE $1561-$1562 DB_DATA 1
RANGE $1562-$1564 DW_DATA 1
RANGE $1564-$1565 DB_DATA 1
RANGE $1565-$1566 DB_DATA 1
RANGE $1566-$1567 DB_DATA 1
RANGE $1567-$1568 DB_DATA 1
RANGE $1568-$1569 DB_DATA 1
RANGE $1569-$156B DW_DATA 1
RANGE $156B-$156C DB_DATA 1
RANGE $156C-$156D DB_DATA 1
RANGE $156D-$156E DB_DATA 1
RANGE $156E-$156F DB_DATA 1
RANGE $156F-$1570 DB_DATA 1
RANGE $1570-$1572 DW_DATA 1
RANGE $1572-$1573 DB_DATA 1
RANGE $1573-$1574 DB_DATA 1
RANGE $1574-$1575 DB_DATA 1
RANGE $1575-$1576 DB_DATA 1
RANGE $1576-$1577 DB_DATA 1
RANGE $1577-$16CF CODE
RANGE $16CF-$16D0 DB_DATA 1
RANGE $16D0-$16D1 DB_DATA 1
RANGE $16D1-$16D2 DB_DATA 1
RANGE $16D2-$16D3 DB_DATA 1
RANGE $16D3-$16D4 DB_DATA 1
RANGE $16D4-$16D5 DB_DATA 1
RANGE $16D5-$16D6 DB_DATA 1
RANGE $16D6-$16D7 DB_DATA 1
RANGE $16D7-$16D8 DB_DATA 1
RANGE $16D8-$16D9 DB_DATA 1
RANGE $16D9-$16DA DB_DATA 1
RANGE $16DA-$16DB DB_DATA 1
RANGE $16DB-$16DC DB_DATA 1
RANGE $16DC-$16DD DB_DATA 1
RANGE $16DD-$16DE DB_DATA 1
RANGE $16DE-$16DF DB_DATA 1
RANGE $16DF-$16E0 DB_DATA 1
RANGE $16E0-$16E1 DB_DATA 1
RANGE $16E1-$16E2 DB_DATA 1
RANGE $16E2-$16E3 DB_DATA 1
RANGE $16E3-$16E4 DB_DATA 1
RANGE $16E4-$16E5 DB_DATA 1
RANGE $16E5-$16E6 DB_DATA 1
RANGE $16E6-$16E7 DB_DATA 1
RANGE $16E7-$16E8 DB_DATA 1
RANGE $16E8-$16E9 DB_DATA 1
RANGE $16E9-$16EA DB_DATA 1
RANGE $16EA-$16EB DB_DATA 1
RANGE $16EB-$16EC DB_DATA 1
RANGE $16EC-$16ED DB_DATA 1
RANGE $16ED-$16EE DB_DATA 1
RANGE $16EE-$16EF DB_DATA 1
RANGE $16EF-$16F0 DB_DATA 1
RANGE $16F0-$16F1 DB_DATA 1
RANGE $16F1-$16F2 DB_DATA 1
RANGE $16F2-$16F3 DB_DATA 1
RANGE $16F3-$16F4 DB_DATA 1
RANGE $16F4-$16F5 DB_DATA 1
RANGE $16F5-$16F6 DB_DATA 1
RANGE $16F6-$16F7 DB_DATA 1
RANGE $16F7-$16F8 DB_DATA 1
RANGE $16F8-$16F9 DB_DATA 1
RANGE $16F9-$16FA DB_DATA 1
RANGE $16FA-$16FB DB_DATA 1
RANGE $16FB-$16FC DB_DATA 1
RANGE $16FC-$16FD DB_DATA 1
RANGE $16FD-$16FE DB_DATA 1
RANGE $16FE-$16FF DB_DATA 1
RANGE $16FF-$1700 DB_DATA 1
RANGE $1700-$1701 DB_DATA 1
RANGE $1701-$1702 DB_DATA 1
RANGE $1702-$1703 DB_DATA 1
RANGE $1703-$1704 DB_DATA 1
RANGE $1704-$1705 DB_DATA 1
RANGE $1705-$1706 DB_DATA 1
RANGE $1706-$1707 DB_DATA 1
RANGE $1707-$1708 DB_DATA 1
RANGE $1708-$1709 DB_DATA 1
RANGE $1709-$170A DB_DATA 1
RANGE $170A-$170B DB_DATA 1
RANGE $170B-$170C DB_DATA 1
RANGE $170C-$170D DB_DATA 1
RANGE $170D-$170E DB_DATA 1
RANGE $170E-$170F DB_DATA 1
RANGE $170F-$1710 DB_DATA 1
RANGE $1710-$1711 DB_DATA 1
RANGE $1711-$1712 DB_DATA 1
RANGE $1712-$1713 DB_DATA 1
RANGE $1713-$1715 DW_DATA 1
RANGE $1715-$1717 DW_DATA 1
RANGE $1717-$1719 DW_DATA 1
RANGE $1719-$171B DW_DATA 1
RANGE $171B-$171C DB_DATA 1
RANGE $171C-$171D DB_DATA 1
RANGE $171D-$171E DB_DATA 1
RANGE $171E-$171F DB_DATA 1
RANGE $171F-$1720 DB_DATA 1
RANGE $1720-$1721 DB_DATA 1
RANGE $1721-$1722 DB_DATA 1
RANGE $1722-$1723 DB_DATA 1
RANGE $1723-$1724 DB_DATA 1
RANGE $1724-$1725 DB_DATA 1
RANGE $1725-$1726 DB_DATA 1
RANGE $1726-$1727 DB_DATA 1
RANGE $1727-$1728 DB_DATA 1
RANGE $1728-$1729 DB_DATA 1
RANGE $1729-$172A DB_DATA 1
RANGE $172A-$172B DB_DATA 1
RANGE $172B-$172C DB_DATA 1
RANGE $172C-$172D DB_DATA 1
RANGE $172D-$172E DB_DATA 1
RANGE $172E-$172F DB_DATA 1
RANGE $172F-$1730 DB_DATA 1
RANGE $1730-$1731 DB_DATA 1
RANGE $1731-$1732 DB_DATA 1
RANGE $1732-$1733 DB_DATA 1
RANGE $1733-$1734 DB_DATA 1
RANGE $1734-$1735 DB_DATA 1
RANGE $1735-$1736 DB_DATA 1
RANGE $1736-$1737 DB_DATA 1
RANGE $1737-$1738 DB_DATA 1
RANGE $1738-$1739 DB_DATA 1
RANGE $1739-$173A DB_DATA 1
RANGE $173A-$173B DB_DATA 1
RANGE $173B-$173C DB_DATA 1
RANGE $173C-$173D DB_DATA 1
RANGE $173D-$173E DB_DATA 1
RANGE $173E-$173F DB_DATA 1
RANGE $173F-$1740 DB_DATA 1
RANGE $1740-$1741 DB_DATA 1
RANGE $1741-$1742 DB_DATA 1
RANGE $1742-$1743 DB_DATA 1
RANGE $1743-$1744 DB_DATA 1
RANGE $1744-$1745 DB_DATA 1
RANGE $1745-$1746 DB_DATA 1
RANGE $1746-$1747 DB_DATA 1
RANGE $1747-$1748 DB_DATA 1
RANGE $1748-$1749 DB_DATA 1
RANGE $1749-$174A DB_DATA 1
RANGE $174A-$174B DB_DATA 1
RANGE $174B-$174C DB_DATA 1
RANGE $174C-$174D DB_DATA 1
RANGE $174D-$174E DB_DATA 1
RANGE $174E-$174F DB_DATA 1
RANGE $174F-$1750 DB_DATA 1
RANGE $1750-$1751 DB_DATA 1
RANGE $1751-$1752 DB_DATA 1
RANGE $1752-$1753 DB_DATA 1
RANGE $1753-$1754 DB_DATA 1
RANGE $1754-$1755 DB_DATA 1
RANGE $1755-$1756 DB_DATA 1
RANGE $1756-$1757 DB_DATA 1
RANGE $1757-$1758 DB_DATA 1
RANGE $1758-$1759 DB_DATA 1
RANGE $1759-$175A DB_DATA 1
RANGE $175A-$175B DB_DATA 1
RANGE $175B-$175C DB_DATA 1
RANGE $175C-$175D DB_DATA 1
RANGE $175D-$175E DB_DATA 1
RANGE $175E-$175F DB_DATA 1
RANGE $175F-$1760 DB_DATA 1
RANGE $1760-$1761 DB_DATA 1
RANGE $1761-$1762 DB_DATA 1
RANGE $1762-$1763 DB_DATA 1
RANGE $1763-$1764 DB_DATA 1
RANGE $1764-$1765 DB_DATA 1
RANGE $1765-$1766 DB_DATA 1
RANGE $1766-$1767 DB_DATA 1
RANGE $1767-$1769 DW_DATA 1
RANGE $1769-$176B DW_DATA 1
RANGE $176B-$176D DW_DATA 1
RANGE $176D-$176F DW_DATA 1
RANGE $176F-$1770 DB_DATA 1
RANGE $1770-$1771 DB_DATA 1
RANGE $1771-$1772 DB_DATA 1
RANGE $1772-$1773 DB_DATA 1
RANGE $1773-$1774 DB_DATA 1
RANGE $1774-$1775 DB_DATA 1
RANGE $1775-$1776 DB_DATA 1
RANGE $1776-$1777 DB_DATA 1
RANGE $1777-$1778 DB_DATA 1
RANGE $1778-$1779 DB_DATA 1
RANGE $1779-$177A DB_DATA 1
RANGE $177A-$177B DB_DATA 1
RANGE $177B-$177C DB_DATA 1
RANGE $177C-$177D DB_DATA 1
RANGE $177D-$177E DB_DATA 1
RANGE $177E-$177F DB_DATA 1
RANGE $177F-$1780 DB_DATA 1
RANGE $1780-$1781 DB_DATA 1
RANGE $1781-$1782 DB_DATA 1
RANGE $1782-$1783 DB_DATA 1
RANGE $1783-$1784 DB_DATA 1
RANGE $1784-$1785 DB_DATA 1
RANGE $1785-$1786 DB_DATA 1
RANGE $1786-$1787 DB_DATA 1
RANGE $1787-$1788 DB_DATA 1
RANGE $1788-$1789 DB_DATA 1
RANGE $1789-$178A DB_DATA 1
RANGE $178A-$178B DB_DATA 1
RANGE $178B-$178C DB_DATA 1
RANGE $178C-$178D DB_DATA 1
RANGE $178D-$178E DB_DATA 1
RANGE $178E-$178F DB_DATA 1
RANGE $178F-$1790 DB_DATA 1
RANGE $1790-$1791 DB_DATA 1
RANGE $1791-$1792 DB_DATA 1
RANGE $1792-$1793 DB_DATA 1
RANGE $1793-$1794 DB_DATA 1
RANGE $1794-$1795 DB_DATA 1
RANGE $1795-$1796 DB_DATA 1
RANGE $1796-$1797 DB_DATA 1
RANGE $1797-$1798 DB_DATA 1
RANGE $1798-$1799 DB_DATA 1
RANGE $1799-$179A DB_DATA 1
RANGE $179A-$179B DB_DATA 1
RANGE $179B-$179C DB_DATA 1
RANGE $179C-$179D DB_DATA 1
RANGE $179D-$179E DB_DATA 1
RANGE $179E-$179F DB_DATA 1
RANGE $179F-$17A0 DB_DATA 1
RANGE $17A0-$17A1 DB_DATA 1
RANGE $17A1-$17A2 DB_DATA 1
RANGE $17A2-$17A3 DB_DATA 1
RANGE $17A3-$17A4 DB_DATA 1
RANGE $17A4-$17A5 DB_DATA 1
RANGE $17A5-$17A6 DB_DATA 1
RANGE $17A6-$17A7 DB_DATA 1
RANGE $17A7-$17A8 DB_DATA 1
RANGE $17A8-$17A9 DB_DATA 1
RANGE $17A9-$17AA DB_DATA 1
RANGE $17AA-$17AB DB_DATA 1
RANGE $17AB-$17AC DB_DATA 1
RANGE $17AC-$17AD DB_DATA 1
RANGE $17AD-$17AE DB_DATA 1
RANGE $17AE-$17AF DB_DATA 1
RANGE $17AF-$17B0 DB_DATA 1
RANGE $17B0-$17B1 DB_DATA 1
RANGE $17B1-$17B2 DB_DATA 1
RANGE $17B2-$17B3 DB_DATA 1
RANGE $17B3-$17B4 DB_DATA 1
RANGE $17B4-$17B5 DB_DATA 1
RANGE $17B5-$17B6 DB_DATA 1
RANGE $17B6-$17B7 DB_DATA 1
RANGE $17B7-$17B8 DB_DATA 1
RANGE $17B8-$17B9 DB_DATA 1
RANGE $17B9-$17BA DB_DATA 1
RANGE $17BA-$17BB DB_DATA 1
RANGE $17BB-$17BD DW_DATA 1
RANGE $17BD-$17BF DW_DATA 1
RANGE $17BF-$17C1 DW_DATA 1
RANGE $17C1-$17C3 DW_DATA 1
RANGE $17C3-$17C4 DB_DATA 1
RANGE $17C4-$17C5 DB_DATA 1
RANGE $17C5-$17C6 DB_DATA 1
RANGE $17C6-$17C7 DB_DATA 1
RANGE $17C7-$17C8 DB_DATA 1
RANGE $17C8-$17C9 DB_DATA 1
RANGE $17C9-$17CA DB_DATA 1
RANGE $17CA-$17CB DB_DATA 1
RANGE $17CB-$17CC DB_DATA 1
RANGE $17CC-$17CD DB_DATA 1
RANGE $17CD-$17CE DB_DATA 1
RANGE $17CE-$17CF DB_DATA 1
RANGE $17CF-$17D0 DB_DATA 1
RANGE $17D0-$17D1 DB_DATA 1
RANGE $17D1-$17D2 DB_DATA 1
RANGE $17D2-$17D3 DB_DATA 1
RANGE $17D3-$17D4 DB_DATA 1
RANGE $17D4-$17D5 DB_DATA 1
RANGE $17D5-$17D6 DB_DATA 1
RANGE $17D6-$17D7 DB_DATA 1
RANGE $17D7-$17D8 DB_DATA 1
RANGE $17D8-$17D9 DB_DATA 1
RANGE $17D9-$17DA DB_DATA 1
RANGE $17DA-$17DB DB_DATA 1
RANGE $17DB-$17DC DB_DATA 1
RANGE $17DC-$17DD DB_DATA 1
RANGE $17DD-$17DE DB_DATA 1
RANGE $17DE-$17DF DB_DATA 1
RANGE $17DF-$17E0 DB_DATA 1
RANGE $17E0-$17E1 DB_DATA 1
RANGE $17E1-$17E2 DB_DATA 1
RANGE $17E2-$17E3 DB_DATA 1
RANGE $17E3-$17E4 DB_DATA 1
RANGE $17E4-$17E5 DB_DATA 1
RANGE $17E5-$17E6 DB_DATA 1
RANGE $17E6-$17E7 DB_DATA 1
RANGE $17E7-$17E8 DB_DATA 1
RANGE $17E8-$17E9 DB_DATA 1
RANGE $17E9-$17EA DB_DATA 1
RANGE $17EA-$17EB DB_DATA 1
RANGE $17EB-$17EC DB_DATA 1
RANGE $17EC-$17ED DB_DATA 1
RANGE $17ED-$17EE DB_DATA 1
RANGE $17EE-$17EF DB_DATA 1
RANGE $17EF-$17F0 DB_DATA 1
RANGE $17F0-$17F1 DB_DATA 1
RANGE $17F1-$17F2 DB_DATA 1
RANGE $17F2-$17F3 DB_DATA 1
RANGE $17F3-$17F4 DB_DATA 1
RANGE $17F4-$17F5 DB_DATA 1
RANGE $17F5-$17F6 DB_DATA 1
RANGE $17F6-$17F7 DB_DATA 1
RANGE $17F7-$17F8 DB_DATA 1
RANGE $17F8-$17F9 DB_DATA 1
RANGE $17F9-$17FA DB_DATA 1
RANGE $17FA-$17FB DB_DATA 1
RANGE $17FB-$17FC DB_DATA 1
RANGE $17FC-$17FD DB_DATA 1
RANGE $17FD-$17FE DB_DATA 1
RANGE $17FE-$17FF DB_DATA 1
RANGE $17FF-$1800 DB_DATA 1
RANGE $1800-$1801 DB_DATA 1
RANGE $1801-$1802 DB_DATA 1
RANGE $1802-$1803 DB_DATA 1
RANGE $1803-$1804 DB_DATA 1
RANGE $1804-$1805 DB_DATA 1
RANGE $1805-$1806 DB_DATA 1
RANGE $1806-$1807 DB_DATA 1
RANGE $1807-$1808 DB_DATA 1
RANGE $1808-$1809 DB_DATA 1
RANGE $1809-$180A DB_DATA 1
RANGE $180A-$180B DB_DATA 1
RANGE $180B-$180C DB_DATA 1
RANGE $180C-$180D DB_DATA 1
RANGE $180D-$180E DB_DATA 1
RANGE $180E-$180F DB_DATA 1
RANGE $180F-$1810 DB_DATA 1
RANGE $1810-$1811 DB_DATA 1
RANGE $1811-$1812 DB_DATA 1
RANGE $1812-$1813 DB_DATA 1
RANGE $1813-$1814 DB_DATA 1
RANGE $1814-$1815 DB_DATA 1
RANGE $1815-$1816 DB_DATA 1
RANGE $1816-$1817 DB_DATA 1
RANGE $1817-$1818 DB_DATA 1
RANGE $1818-$1819 DB_DATA 1
RANGE $1819-$181A DB_DATA 1
RANGE $181A-$181B DB_DATA 1
RANGE $181B-$181C DB_DATA 1
RANGE $181C-$181D DB_DATA 1
RANGE $181D-$181E DB_DATA 1
RANGE $181E-$181F DB_DATA 1
RANGE $181F-$1820 DB_DATA 1
RANGE $1820-$1821 DB_DATA 1
RANGE $1821-$1822 DB_DATA 1
RANGE $1822-$1823 DB_DATA 1
RANGE $1823-$1824 DB_DATA 1
RANGE $1824-$1825 DB_DATA 1
RANGE $1825-$1826 DB_DATA 1
RANGE $1826-$1827 DB_DATA 1
RANGE $1827-$1828 DB_DATA 1
RANGE $1828-$1829 DB_DATA 1
RANGE $1829-$182A DB_DATA 1
RANGE $182A-$182B DB_DATA 1
RANGE $182B-$182C DB_DATA 1
RANGE $182C-$182D DB_DATA 1
RANGE $182D-$182E DB_DATA 1
RANGE $182E-$182F DB_DATA 1
RANGE $182F-$1830 DB_DATA 1
RANGE $1830-$1831 DB_DATA 1
RANGE $1831-$1832 DB_DATA 1
RANGE $1832-$1833 DB_DATA 1
RANGE $1833-$1834 DB_DATA 1
RANGE $1834-$1835 DB_DATA 1
RANGE $1835-$1836 DB_DATA 1
RANGE $1836-$1837 DB_DATA 1
RANGE $1837-$1838 DB_DATA 1
RANGE $1838-$1839 DB_DATA 1
RANGE $1839-$183A DB_DATA 1
RANGE $183A-$183B DB_DATA 1
RANGE $183B-$183C DB_DATA 1
RANGE $183C-$183D DB_DATA 1
RANGE $183D-$183E DB_DATA 1
RANGE $183E-$183F DB_DATA 1
RANGE $183F-$1840 DB_DATA 1
RANGE $1840-$1841 DB_DATA 1
RANGE $1841-$1842 DB_DATA 1
RANGE $1842-$1843 DB_DATA 1
RANGE $1843-$1844 DB_DATA 1
RANGE $1844-$1845 DB_DATA 1
RANGE $1845-$1847 DW_DATA 1
RANGE $1847-$1849 DW_DATA 1
RANGE $1849-$184B DW_DATA 1
RANGE $184B-$184D DW_DATA 1
RANGE $184D-$184E DB_DATA 1
RANGE $184E-$184F DB_DATA 1
RANGE $184F-$1850 DB_DATA 1
RANGE $1850-$1851 DB_DATA 1
RANGE $1851-$1852 DB_DATA 1
RANGE $1852-$1853 DB_DATA 1
RANGE $1853-$1854 DB_DATA 1
RANGE $1854-$1855 DB_DATA 1
RANGE $1855-$1856 DB_DATA 1
RANGE $1856-$1857 DB_DATA 1
RANGE $1857-$1858 DB_DATA 1
RANGE $1858-$1859 DB_DATA 1
RANGE $1859-$185A DB_DATA 1
RANGE $185A-$185B DB_DATA 1
RANGE $185B-$185C DB_DATA 1
RANGE $185C-$185D DB_DATA 1
RANGE $185D-$185E DB_DATA 1
RANGE $185E-$185F DB_DATA 1
RANGE $185F-$1860 DB_DATA 1
RANGE $1860-$1861 DB_DATA 1
RANGE $1861-$1862 DB_DATA 1
RANGE $1862-$1863 DB_DATA 1
RANGE $1863-$1864 DB_DATA 1
RANGE $1864-$1865 DB_DATA 1
RANGE $1865-$1866 DB_DATA 1
RANGE $1866-$1867 DB_DATA 1
RANGE $1867-$1868 DB_DATA 1
RANGE $1868-$1869 DB_DATA 1
RANGE $1869-$186A DB_DATA 1
RANGE $186A-$186B DB_DATA 1
RANGE $186B-$186C DB_DATA 1
RANGE $186C-$186D DB_DATA 1
RANGE $186D-$186E DB_DATA 1
RANGE $186E-$186F DB_DATA 1
RANGE $186F-$1870 DB_DATA 1
RANGE $1870-$1871 DB_DATA 1
RANGE $1871-$1872 DB_DATA 1
RANGE $1872-$1873 DB_DATA 1
RANGE $1873-$1874 DB_DATA 1
RANGE $1874-$1875 DB_DATA 1
RANGE $1875-$1876 DB_DATA 1
RANGE $1876-$1877 DB_DATA 1
RANGE $1877-$1878 DB_DATA 1
RANGE $1878-$1879 DB_DATA 1
RANGE $1879-$187A DB_DATA 1
RANGE $187A-$187B DB_DATA 1
RANGE $187B-$187C DB_DATA 1
RANGE $187C-$187D DB_DATA 1
RANGE $187D-$187E DB_DATA 1
RANGE $187E-$187F DB_DATA 1
RANGE $187F-$1880 DB_DATA 1
RANGE $1880-$1881 DB_DATA 1
RANGE $1881-$1882 DB_DATA 1
RANGE $1882-$1883 DB_DATA 1
RANGE $1883-$1884 DB_DATA 1
RANGE $1884-$1885 DB_DATA 1
RANGE $1885-$1886 DB_DATA 1
RANGE $1886-$1887 DB_DATA 1
RANGE $1887-$1888 DB_DATA 1
RANGE $1888-$1889 DB_DATA 1
RANGE $1889-$188A DB_DATA 1
RANGE $188A-$188B DB_DATA 1
RANGE $188B-$188C DB_DATA 1
RANGE $188C-$188D DB_DATA 1
RANGE $188D-$188E DB_DATA 1
RANGE $188E-$188F DB_DATA 1
RANGE $188F-$1890 DB_DATA 1
RANGE $1890-$1891 DB_DATA 1
RANGE $1891-$1892 DB_DATA 1
RANGE $1892-$1893 DB_DATA 1
RANGE $1893-$1894 DB_DATA 1
RANGE $1894-$1895 DB_DATA 1
RANGE $1895-$1896 DB_DATA 1
RANGE $1896-$1897 DB_DATA 1
RANGE $1897-$1898 DB_DATA 1
RANGE $1898-$1899 DB_DATA 1
RANGE $1899-$189A DB_DATA 1
RANGE $189A-$189B DB_DATA 1
RANGE $189B-$189C DB_DATA 1
RANGE $189C-$189D DB_DATA 1
RANGE $189D-$189E DB_DATA 1
RANGE $189E-$189F DB_DATA 1
RANGE $189F-$18A0 DB_DATA 1
RANGE $18A0-$18A1 DB_DATA 1
RANGE $18A1-$18A2 DB_DATA 1
RANGE $18A2-$18A3 DB_DATA 1
RANGE $18A3-$18A4 DB_DATA 1
RANGE $18A4-$18A5 DB_DATA 1
RANGE $18A5-$18A6 DB_DATA 1
RANGE $18A6-$18A7 DB_DATA 1
RANGE $18A7-$18A8 DB_DATA 1
RANGE $18A8-$18A9 DB_DATA 1
RANGE $18A9-$18AA DB_DATA 1
RANGE $18AA-$18AB DB_DATA 1
RANGE $18AB-$18AC DB_DATA 1
RANGE $18AC-$18AD DB_DATA 1
RANGE $18AD-$18AE DB_DATA 1
RANGE $18AE-$18AF DB_DATA 1
RANGE $18AF-$18B0 DB_DATA 1
RANGE $18B0-$18B1 DB_DATA 1
RANGE $18B1-$18B2 DB_DATA 1
RANGE $18B2-$18B3 DB_DATA 1
RANGE $18B3-$18B4 DB_DATA 1
RANGE $18B4-$18B5 DB_DATA 1
RANGE $18B5-$18B6 DB_DATA 1
RANGE $18B6-$18B7 DB_DATA 1
RANGE $18B7-$18B8 DB_DATA 1
RANGE $18B8-$18B9 DB_DATA 1
RANGE $18B9-$18BA DB_DATA 1
RANGE $18BA-$18BB DB_DATA 1
RANGE $18BB-$18BC DB_DATA 1
RANGE $18BC-$18BD DB_DATA 1
RANGE $18BD-$18BE DB_DATA 1
RANGE $18BE-$18BF DB_DATA 1
RANGE $18BF-$18C0 DB_DATA 1
RANGE $18C0-$18C1 DB_DATA 1
RANGE $18C1-$18C2 DB_DATA 1
RANGE $18C2-$18C3 DB_DATA 1
RANGE $18C3-$18C4 DB_DATA 1
RANGE $18C4-$18C5 DB_DATA 1
RANGE $18C5-$18C6 DB_DATA 1
RANGE $18C6-$18C7 DB_DATA 1
RANGE $18C7-$18C8 DB_DATA 1
RANGE $18C8-$18C9 DB_DATA 1
RANGE $18C9-$18CA DB_DATA 1
RANGE $18CA-$18CB DB_DATA 1
RANGE $18CB-$18CC DB_DATA 1
RANGE $18CC-$18CD DB_DATA 1
RANGE $18CD-$18CE DB_DATA 1
RANGE $18CE-$18CF DB_DATA 1
RANGE $18CF-$18D0 DB_DATA 1
RANGE $18D0-$18D1 DB_DATA 1
RANGE $18D1-$18D2 DB_DATA 1
RANGE $18D2-$18D3 DB_DATA 1
RANGE $18D3-$18D4 DB_DATA 1
RANGE $18D4-$18D5 DB_DATA 1
RANGE $18D5-$18D6 DB_DATA 1
RANGE $18D6-$18D7 DB_DATA 1
RANGE $18D7-$18D8 DB_DATA 1
RANGE $18D8-$18D9 DB_DATA 1
RANGE $18D9-$18DA DB_DATA 1
RANGE $18DA-$18DB DB_DATA 1
RANGE $18DB-$18DC DB_DATA 1
RANGE $18DC-$18DD DB_DATA 1
RANGE $18DD-$18DE DB_DATA 1
RANGE $18DE-$18DF DB_DATA 1
RANGE $18DF-$18E0 DB_DATA 1
RANGE $18E0-$18E1 DB_DATA 1
RANGE $18E1-$18E2 DB_DATA 1
RANGE $18E2-$18E3 DB_DATA 1
RANGE $18E3-$18E4 DB_DATA 1
RANGE $18E4-$18E5 DB_DATA 1
RANGE $18E5-$18E6 DB_DATA 1
RANGE $18E6-$18E7 DB_DATA 1
RANGE $18E7-$18E8 DB_DATA 1
RANGE $18E8-$18E9 DB_DATA 1
RANGE $18E9-$18EA DB_DATA 1
RANGE $18EA-$18EB DB_DATA 1
RANGE $18EB-$18EC DB_DATA 1
RANGE $18EC-$18ED DB_DATA 1
RANGE $18ED-$18EE DB_DATA 1
RANGE $18EE-$18EF DB_DATA 1
RANGE $18EF-$18F0 DB_DATA 1
RANGE $18F0-$18F1 DB_DATA 1
RANGE $18F1-$18F2 DB_DATA 1
RANGE $18F2-$18F3 DB_DATA 1
RANGE $18F3-$18F4 DB_DATA 1
RANGE $18F4-$18F5 DB_DATA 1
RANGE $18F5-$18F6 DB_DATA 1
RANGE $18F6-$18F7 DB_DATA 1
RANGE $18F7-$18F8 DB_DATA 1
RANGE $18F8-$18F9 DB_DATA 1
RANGE $18F9-$18FA DB_DATA 1
RANGE $18FA-$18FB DB_DATA 1
RANGE $18FB-$18FC DB_DATA 1
RANGE $18FC-$18FD DB_DATA 1
RANGE $18FD-$18FE DB_DATA 1
RANGE $18FE-$18FF DB_DATA 1
RANGE $18FF-$1900 DB_DATA 1
RANGE $1900-$1901 DB_DATA 1
RANGE $1901-$1902 DB_DATA 1
RANGE $1902-$1903 DB_DATA 1
RANGE $1903-$1904 DB_DATA 1
RANGE $1904-$1905 DB_DATA 1
RANGE $1905-$1906 DB_DATA 1
RANGE $1906-$1907 DB_DATA 1
RANGE $1907-$1908 DB_DATA 1
RANGE $1908-$1909 DB_DATA 1
RANGE $1909-$190A DB_DATA 1
RANGE $190A-$190B DB_DATA 1
RANGE $190B-$190C DB_DATA 1
RANGE $190C-$190D DB_DATA 1
RANGE $190D-$190E DB_DATA 1
RANGE $190E-$190F DB_DATA 1
RANGE $190F-$1910 DB_DATA 1
RANGE $1910-$1911 DB_DATA 1
RANGE $1911-$1912 DB_DATA 1
RANGE $1912-$1913 DB_DATA 1
RANGE $1913-$1914 DB_DATA 1
RANGE $1914-$1915 DB_DATA 1
RANGE $1915-$1916 DB_DATA 1
RANGE $1916-$1917 DB_DATA 1
RANGE $1917-$1918 DB_DATA 1
RANGE $1918-$1919 DB_DATA 1
RANGE $1919-$191A DB_DATA 1
RANGE $191A-$191B DB_DATA 1
RANGE $191B-$191C DB_DATA 1
RANGE $191C-$191D DB_DATA 1
RANGE $191D-$191E DB_DATA 1
RANGE $191E-$191F DB_DATA 1
RANGE $191F-$1920 DB_DATA 1
RANGE $1920-$1921 DB_DATA 1
RANGE $1921-$1922 DB_DATA 1
RANGE $1922-$1923 DB_DATA 1
RANGE $1923-$1924 DB_DATA 1
RANGE $1924-$1925 DB_DATA 1
RANGE $1925-$1926 DB_DATA 1
RANGE $1926-$1927 DB_DATA 1
RANGE $1927-$1928 DB_DATA 1
RANGE $1928-$1929 DB_DATA 1
RANGE $1929-$192A DB_DATA 1
RANGE $192A-$192B DB_DATA 1
RANGE $192B-$192C DB_DATA 1
RANGE $192C-$192D DB_DATA 1
RANGE $192D-$192E DB_DATA 1
RANGE $192E-$192F DB_DATA 1
RANGE $192F-$1930 DB_DATA 1
RANGE $1930-$1931 DB_DATA 1
RANGE $1931-$1932 DB_DATA 1
RANGE $1932-$1933 DB_DATA 1
RANGE $1933-$1934 DB_DATA 1
RANGE $1934-$1935 DB_DATA 1
RANGE $1935-$1936 DB_DATA 1
RANGE $1936-$1937 DB_DATA 1
RANGE $1937-$1938 DB_DATA 1
RANGE $1938-$1939 DB_DATA 1
RANGE $1939-$193A DB_DATA 1
RANGE $193A-$193B DB_DATA 1
RANGE $193B-$193C DB_DATA 1
RANGE $193C-$193D DB_DATA 1
RANGE $193D-$193E DB_DATA 1
RANGE $193E-$193F DB_DATA 1
RANGE $193F-$1940 DB_DATA 1
RANGE $1940-$1941 DB_DATA 1
RANGE $1941-$1942 DB_DATA 1
RANGE $1942-$1943 DB_DATA 1
RANGE $1943-$1944 DB_DATA 1
RANGE $1944-$1945 DB_DATA 1
RANGE $1945-$1946 DB_DATA 1
RANGE $1946-$1947 DB_DATA 1
RANGE $1947-$1948 DB_DATA 1
RANGE $1948-$1949 DB_DATA 1
RANGE $1949-$194A DB_DATA 1
RANGE $194A-$194B DB_DATA 1
RANGE $194B-$194C DB_DATA 1
RANGE $194C-$194D DB_DATA 1
RANGE $194D-$194E DB_DATA 1
RANGE $194E-$194F DB_DATA 1
RANGE $194F-$1950 DB_DATA 1
RANGE $1950-$1951 DB_DATA 1
RANGE $1951-$1952 DB_DATA 1
RANGE $1952-$1953 DB_DATA 1
RANGE $1953-$1954 DB_DATA 1
RANGE $1954-$1955 DB_DATA 1
RANGE $1955-$1956 DB_DATA 1
RANGE $1956-$1957 DB_DATA 1
RANGE $1957-$1958 DB_DATA 1
RANGE $1958-$1959 DB_DATA 1
RANGE $1959-$195A DB_DATA 1
RANGE $195A-$195B DB_DATA 1
RANGE $195B-$195C DB_DATA 1
RANGE $195C-$195D DB_DATA 1
RANGE $195D-$195E DB_DATA 1
RANGE $195E-$195F DB_DATA 1
RANGE $195F-$1960 DB_DATA 1
RANGE $1960-$1961 DB_DATA 1
RANGE $1961-$1962 DB_DATA 1
RANGE $1962-$1963 DB_DATA 1
RANGE $1963-$1964 DB_DATA 1
RANGE $1964-$1965 DB_DATA 1
RANGE $1965-$1966 DB_DATA 1
RANGE $1966-$1967 DB_DATA 1
RANGE $1967-$1968 DB_DATA 1
RANGE $1968-$1969 DB_DATA 1
RANGE $1969-$196A DB_DATA 1
RANGE $196A-$196B DB_DATA 1
RANGE $196B-$196C DB_DATA 1
RANGE $196C-$196D DB_DATA 1
RANGE $196D-$196E DB_DATA 1
RANGE $196E-$196F DB_DATA 1
RANGE $196F-$1970 DB_DATA 1
RANGE $1970-$1971 DB_DATA 1
RANGE $1971-$1972 DB_DATA 1
RANGE $1972-$1973 DB_DATA 1
RANGE $1973-$1974 DB_DATA 1
RANGE $1974-$1975 DB_DATA 1
RANGE $1975-$1976 DB_DATA 1
RANGE $1976-$1977 DB_DATA 1
RANGE $1977-$1978 DB_DATA 1
RANGE $1978-$1979 DB_DATA 1
RANGE $1979-$197A DB_DATA 1
RANGE $197A-$197B DB_DATA 1
RANGE $197B-$197C DB_DATA 1
RANGE $197C-$197D DB_DATA 1
RANGE $197D-$197E DB_DATA 1
RANGE $197E-$197F DB_DATA 1
RANGE $197F-$1980 DB_DATA 1
RANGE $1980-$1981 DB_DATA 1
RANGE $1981-$1982 DB_DATA 1
RANGE $1982-$1983 DB_DATA 1
RANGE $1983-$1984 DB_DATA 1
RANGE $1984-$1985 DB_DATA 1
RANGE $1985-$1986 DB_DATA 1
RANGE $1986-$1987 DB_DATA 1
RANGE $1987-$1988 DB_DATA 1
RANGE $1988-$1989 DB_DATA 1
RANGE $1989-$198A DB_DATA 1
RANGE $198A-$198B DB_DATA 1
RANGE $198B-$198C DB_DATA 1
RANGE $198C-$198D DB_DATA 1
RANGE $198D-$198E DB_DATA 1
RANGE $198E-$198F DB_DATA 1
RANGE $198F-$1990 DB_DATA 1
RANGE $1990-$1991 DB_DATA 1
RANGE $1991-$1992 DB_DATA 1
RANGE $1992-$1993 DB_DATA 1
RANGE $1993-$1994 DB_DATA 1
RANGE $1994-$1995 DB_DATA 1
RANGE $1995-$1996 DB_DATA 1
RANGE $1996-$1997 DB_DATA 1
RANGE $1997-$1998 DB_DATA 1
RANGE $1998-$1999 DB_DATA 1
RANGE $1999-$199A DB_DATA 1
RANGE $199A-$199B DB_DATA 1
RANGE $199B-$199C DB_DATA 1
RANGE $199C-$199D DB_DATA 1
RANGE $199D-$199E DB_DATA 1
RANGE $199E-$199F DB_DATA 1
RANGE $199F-$19A0 DB_DATA 1
RANGE $19A0-$19A1 DB_DATA 1
RANGE $19A1-$19A2 DB_DATA 1
RANGE $19A2-$19A3 DB_DATA 1
RANGE $19A3-$19A4 DB_DATA 1
RANGE $19A4-$19A5 DB_DATA 1
RANGE $19A5-$19A6 DB_DATA 1
RANGE $19A6-$19A7 DB_DATA 1
RANGE $19A7-$19A8 DB_DATA 1
RANGE $19A8-$19A9 DB_DATA 1
RANGE $19A9-$19AA DB_DATA 1
RANGE $19AA-$19AB DB_DATA 1
RANGE $19AB-$19AC DB_DATA 1
RANGE $19AC-$19AD DB_DATA 1
RANGE $19AD-$19AE DB_DATA 1
RANGE $19AE-$19AF DB_DATA 1
RANGE $19AF-$19B0 DB_DATA 1
RANGE $19B0-$19B1 DB_DATA 1
RANGE $19B1-$19B2 DB_DATA 1
RANGE $19B2-$19B3 DB_DATA 1
RANGE $19B3-$19B4 DB_DATA 1
RANGE $19B4-$19B5 DB_DATA 1
RANGE $19B5-$19B6 DB_DATA 1
RANGE $19B6-$19B7 DB_DATA 1
RANGE $19B7-$19B8 DB_DATA 1
RANGE $19B8-$19B9 DB_DATA 1
RANGE $19B9-$19BA DB_DATA 1
RANGE $19BA-$19BB DB_DATA 1
RANGE $19BB-$19BC DB_DATA 1
RANGE $19BC-$19BD DB_DATA 1
RANGE $19BD-$19BE DB_DATA 1
RANGE $19BE-$19BF DB_DATA 1
RANGE $19BF-$19C0 DB_DATA 1
RANGE $19C0-$19C1 DB_DATA 1
RANGE $19C1-$19C2 DB_DATA 1
RANGE $19C2-$19C3 DB_DATA 1
RANGE $19C3-$19C4 DB_DATA 1
RANGE $19C4-$19C5 DB_DATA 1
RANGE $19C5-$19C6 DB_DATA 1
RANGE $19C6-$19C7 DB_DATA 1
RANGE $19C7-$19C8 DB_DATA 1
RANGE $19C8-$19C9 DB_DATA 1
RANGE $19C9-$19CA DB_DATA 1
RANGE $19CA-$19CB DB_DATA 1
RANGE $19CB-$19CC DB_DATA 1
RANGE $19CC-$19CD DB_DATA 1
RANGE $19CD-$19CE DB_DATA 1
RANGE $19CE-$19CF DB_DATA 1
RANGE $19CF-$19D0 DB_DATA 1
RANGE $19D0-$19D1 DB_DATA 1
RANGE $19D1-$19D2 DB_DATA 1
RANGE $19D2-$19D3 DB_DATA 1
RANGE $19D3-$19D4 DB_DATA 1
RANGE $19D4-$19D5 DB_DATA 1
RANGE $19D5-$19D6 DB_DATA 1
RANGE $19D6-$19D7 DB_DATA 1
RANGE $19D7-$19D8 DB_DATA 1
RANGE $19D8-$19D9 DB_DATA 1
RANGE $19D9-$19DA DB_DATA 1
RANGE $19DA-$19DB DB_DATA 1
RANGE $19DB-$19DC DB_DATA 1
RANGE $19DC-$19DD DB_DATA 1
RANGE $19DD-$19DE DB_DATA 1
RANGE $19DE-$19DF DB_DATA 1
RANGE $19DF-$19E0 DB_DATA 1
RANGE $19E0-$19E1 DB_DATA 1
RANGE $19E1-$19E2 DB_DATA 1
RANGE $19E2-$19E3 DB_DATA 1
RANGE $19E3-$19E4 DB_DATA 1
RANGE $19E4-$19E5 DB_DATA 1
RANGE $19E5-$19E6 DB_DATA 1
RANGE $19E6-$19E7 DB_DATA 1
RANGE $19E7-$19E8 DB_DATA 1
RANGE $19E8-$19E9 DB_DATA 1
RANGE $19E9-$19EA DB_DATA 1
RANGE $19EA-$19EB DB_DATA 1
RANGE $19EB-$19EC DB_DATA 1
RANGE $19EC-$19ED DB_DATA 1
RANGE $19ED-$19EE DB_DATA 1
RANGE $19EE-$19EF DB_DATA 1
RANGE $19EF-$19F0 DB_DATA 1
RANGE $19F0-$19F1 DB_DATA 1
RANGE $19F1-$19F2 DB_DATA 1
RANGE $19F2-$19F3 DB_DATA 1
RANGE $19F3-$19F4 DB_DATA 1
RANGE $19F4-$19F5 DB_DATA 1
RANGE $19F5-$19F6 DB_DATA 1
RANGE $19F6-$19F7 DB_DATA 1
RANGE $19F7-$19F8 DB_DATA 1
RANGE $19F8-$19F9 DB_DATA 1
RANGE $19F9-$19FA DB_DATA 1
RANGE $19FA-$19FB DB_DATA 1
RANGE $19FB-$19FC DB_DATA 1
RANGE $19FC-$19FD DB_DATA 1
RANGE $19FD-$19FE DB_DATA 1
RANGE $19FE-$19FF DB_DATA 1
RANGE $19FF-$1A00 DB_DATA 1
RANGE $1A00-$1A01 DB_DATA 1
RANGE $1A01-$1A02 DB_DATA 1
RANGE $1A02-$1A03 DB_DATA 1
RANGE $1A03-$1A04 DB_DATA 1
RANGE $1A04-$1A05 DB_DATA 1
RANGE $1A05-$1A06 DB_DATA 1
RANGE $1A06-$1A07 DB_DATA 1
RANGE $1A07-$1A08 DB_DATA 1
RANGE $1A08-$1A09 DB_DATA 1
RANGE $1A09-$1A0A DB_DATA 1
RANGE $1A0A-$1A0B DB_DATA 1
RANGE $1A0B-$1A0C DB_DATA 1
RANGE $1A0C-$1A0D DB_DATA 1
RANGE $1A0D-$1A0E DB_DATA 1
RANGE $1A0E-$1A0F DB_DATA 1
RANGE $1A0F-$1A10 DB_DATA 1
RANGE $1A10-$1A11 DB_DATA 1
RANGE $1A11-$1A12 DB_DATA 1
RANGE $1A12-$1A13 DB_DATA 1
RANGE $1A13-$1A14 DB_DATA 1
RANGE $1A14-$1A15 DB_DATA 1
RANGE $1A15-$1A16 DB_DATA 1
RANGE $1A16-$1A17 DB_DATA 1
RANGE $1A17-$1A18 DB_DATA 1
RANGE $1A18-$1A19 DB_DATA 1
RANGE $1A19-$1A1A DB_DATA 1
RANGE $1A1A-$1A1B DB_DATA 1
RANGE $1A1B-$1A1C DB_DATA 1
RANGE $1A1C-$1A1D DB_DATA 1
RANGE $1A1D-$1A1E DB_DATA 1
RANGE $1A1E-$1A1F DB_DATA 1
RANGE $1A1F-$1A20 DB_DATA 1
RANGE $1A20-$1A21 DB_DATA 1
RANGE $1A21-$1A22 DB_DATA 1
RANGE $1A22-$1A23 DB_DATA 1
RANGE $1A23-$1A24 DB_DATA 1
RANGE $1A24-$1A25 DB_DATA 1
RANGE $1A25-$1A26 DB_DATA 1
RANGE $1A26-$1A27 DB_DATA 1
RANGE $1A27-$1A28 DB_DATA 1
RANGE $1A28-$1A29 DB_DATA 1
RANGE $1A29-$1A2A DB_DATA 1
RANGE $1A2A-$1A2B DB_DATA 1
RANGE $1A2B-$1A2C DB_DATA 1
RANGE $1A2C-$1A2D DB_DATA 1
RANGE $1A2D-$1A2E DB_DATA 1
RANGE $1A2E-$1A2F DB_DATA 1
RANGE $1A2F-$1A30 DB_DATA 1
RANGE $1A30-$1A31 DB_DATA 1
RANGE $1A31-$1A32 DB_DATA 1
RANGE $1A32-$1A33 DB_DATA 1
RANGE $1A33-$1A34 DB_DATA 1
RANGE $1A34-$1A35 DB_DATA 1
RANGE $1A35-$1A36 DB_DATA 1
RANGE $1A36-$1A37 DB_DATA 1
RANGE $1A37-$1A38 DB_DATA 1
RANGE $1A38-$1A39 DB_DATA 1
RANGE $1A39-$1A3A DB_DATA 1
RANGE $1A3A-$1A3B DB_DATA 1
RANGE $1A3B-$1A3C DB_DATA 1
RANGE $1A3C-$1A3D DB_DATA 1
RANGE $1A3D-$1A3E DB_DATA 1
RANGE $1A3E-$1A3F DB_DATA 1
RANGE $1A3F-$1A40 DB_DATA 1
RANGE $1A40-$1A41 DB_DATA 1
RANGE $1A41-$1A42 DB_DATA 1
RANGE $1A42-$1A43 DB_DATA 1
RANGE $1A43-$1A44 DB_DATA 1
RANGE $1A44-$1A45 DB_DATA 1
RANGE $1A45-$1A46 DB_DATA 1
RANGE $1A46-$1A47 DB_DATA 1
RANGE $1A47-$1A48 DB_DATA 1
RANGE $1A48-$1A49 DB_DATA 1
RANGE $1A49-$1A4A DB_DATA 1
RANGE $1A4A-$1A4B DB_DATA 1
RANGE $1A4B-$1A4C DB_DATA 1
RANGE $1A4C-$1A4D DB_DATA 1
RANGE $1A4D-$1A4E DB_DATA 1
RANGE $1A4E-$1A4F DB_DATA 1
RANGE $1A4F-$1A50 DB_DATA 1
RANGE $1A50-$1A51 DB_DATA 1
RANGE $1A51-$1A52 DB_DATA 1
RANGE $1A52-$1A53 DB_DATA 1
RANGE $1A53-$1A54 DB_DATA 1
RANGE $1A54-$1A55 DB_DATA 1
RANGE $1A55-$1A56 DB_DATA 1
RANGE $1A56-$1A57 DB_DATA 1
RANGE $1A57-$1A58 DB_DATA 1
RANGE $1A58-$1A59 DB_DATA 1
RANGE $1A59-$1A5A DB_DATA 1
RANGE $1A5A-$1A5B DB_DATA 1
RANGE $1A5B-$1A5C DB_DATA 1
RANGE $1A5C-$1A5D DB_DATA 1
RANGE $1A5D-$1A5E DB_DATA 1
RANGE $1A5E-$1A5F DB_DATA 1
RANGE $1A5F-$1A60 DB_DATA 1
RANGE $1A60-$1A61 DB_DATA 1
RANGE $1A61-$1A62 DB_DATA 1
RANGE $1A62-$1A63 DB_DATA 1
RANGE $1A63-$1A64 DB_DATA 1
RANGE $1A64-$1A65 DB_DATA 1
RANGE $1A65-$1A66 DB_DATA 1
RANGE $1A66-$1A67 DB_DATA 1
RANGE $1A67-$1A68 DB_DATA 1
RANGE $1A68-$1A69 DB_DATA 1
RANGE $1A69-$1A6A DB_DATA 1
RANGE $1A6A-$1A6B DB_DATA 1
RANGE $1A6B-$1A6C DB_DATA 1
RANGE $1A6C-$1A6D DB_DATA 1
RANGE $1A6D-$1A6E DB_DATA 1
RANGE $1A6E-$1A6F DB_DATA 1
RANGE $1A6F-$1A70 DB_DATA 1
RANGE $1A70-$1A71 DB_DATA 1
RANGE $1A71-$1A72 DB_DATA 1
RANGE $1A72-$1A73 DB_DATA 1
RANGE $1A73-$1A74 DB_DATA 1
RANGE $1A74-$1A75 DB_DATA 1
RANGE $1A75-$1A76 DB_DATA 1
RANGE $1A76-$1A77 DB_DATA 1
RANGE $1A77-$1A78 DB_DATA 1
RANGE $1A78-$1A79 DB_DATA 1
RANGE $1A79-$1A7A DB_DATA 1
RANGE $1A7A-$1A7B DB_DATA 1
RANGE $1A7B-$1A7C DB_DATA 1
RANGE $1A7C-$1A7D DB_DATA 1
RANGE $1A7D-$1A7E DB_DATA 1
RANGE $1A7E-$1A7F DB_DATA 1
RANGE $1A7F-$1A80 DB_DATA 1
RANGE $1A80-$1A81 DB_DATA 1
RANGE $1A81-$1A82 DB_DATA 1
RANGE $1A82-$1A83 DB_DATA 1
RANGE $1A83-$1A84 DB_DATA 1
RANGE $1A84-$1A85 DB_DATA 1
RANGE $1A85-$1A86 DB_DATA 1
RANGE $1A86-$1A87 DB_DATA 1
RANGE $1A87-$1A88 DB_DATA 1
RANGE $1A88-$1A89 DB_DATA 1
RANGE $1A89-$1A8A DB_DATA 1
RANGE $1A8A-$1A8B DB_DATA 1
RANGE $1A8B-$1A8C DB_DATA 1
RANGE $1A8C-$1A8D DB_DATA 1
RANGE $1A8D-$1A8E DB_DATA 1
RANGE $1A8E-$1A8F DB_DATA 1
RANGE $1A8F-$1A90 DB_DATA 1
RANGE $1A90-$1A91 DB_DATA 1
RANGE $1A91-$1A92 DB_DATA 1
RANGE $1A92-$1A93 DB_DATA 1
RANGE $1A93-$1A94 DB_DATA 1
RANGE $1A94-$1A95 DB_DATA 1
RANGE $1A95-$1A96 DB_DATA 1
RANGE $1A96-$1A97 DB_DATA 1
RANGE $1A97-$1A98 DB_DATA 1
RANGE $1A98-$1A99 DB_DATA 1
RANGE $1A99-$1A9A DB_DATA 1
RANGE $1A9A-$1A9B DB_DATA 1
RANGE $1A9B-$1A9C DB_DATA 1
RANGE $1A9C-$1A9D DB_DATA 1
RANGE $1A9D-$1A9E DB_DATA 1
RANGE $1A9E-$1A9F DB_DATA 1
RANGE $1A9F-$1AA0 DB_DATA 1
RANGE $1AA0-$1AA1 DB_DATA 1
RANGE $1AA1-$1AA2 DB_DATA 1
RANGE $1AA2-$1AA3 DB_DATA 1
RANGE $1AA3-$1AA4 DB_DATA 1
RANGE $1AA4-$1AA5 DB_DATA 1
RANGE $1AA5-$1AA6 DB_DATA 1
RANGE $1AA6-$1AA7 DB_DATA 1
RANGE $1AA7-$1AA8 DB_DATA 1
RANGE $1AA8-$1AA9 DB_DATA 1
RANGE $1AA9-$1AAA DB_DATA 1
RANGE $1AAA-$1AAB DB_DATA 1
RANGE $1AAB-$1AAC DB_DATA 1
RANGE $1AAC-$1AAD DB_DATA 1
RANGE $1AAD-$1AAE DB_DATA 1
RANGE $1AAE-$1AAF DB_DATA 1
RANGE $1AAF-$1AB0 DB_DATA 1
RANGE $1AB0-$1AB1 DB_DATA 1
RANGE $1AB1-$1AB2 DB_DATA 1
RANGE $1AB2-$1AB3 DB_DATA 1
RANGE $1AB3-$1AB4 DB_DATA 1
RANGE $1AB4-$1AB5 DB_DATA 1
RANGE $1AB5-$1AB6 DB_DATA 1
RANGE $1AB6-$1AB7 DB_DATA 1
RANGE $1AB7-$1AB8 DB_DATA 1
RANGE $1AB8-$1AB9 DB_DATA 1
RANGE $1AB9-$1ABA DB_DATA 1
RANGE $1ABA-$1ABB DB_DATA 1
RANGE $1ABB-$1ABC DB_DATA 1
RANGE $1ABC-$1ABD DB_DATA 1
RANGE $1ABD-$1ABE DB_DATA 1
RANGE $1ABE-$1ABF DB_DATA 1
RANGE $1ABF-$1AC0 DB_DATA 1
RANGE $1AC0-$1AC1 DB_DATA 1
RANGE $1AC1-$1AC2 DB_DATA 1
RANGE $1AC2-$1AC3 DB_DATA 1
RANGE $1AC3-$1AC4 DB_DATA 1
RANGE $1AC4-$1AC5 DB_DATA 1
RANGE $1AC5-$1AC6 DB_DATA 1
RANGE $1AC6-$1AC7 DB_DATA 1
RANGE $1AC7-$1AC8 DB_DATA 1
RANGE $1AC8-$1AC9 DB_DATA 1
RANGE $1AC9-$1ACA DB_DATA 1
RANGE $1ACA-$1ACB DB_DATA 1
RANGE $1ACB-$1ACC DB_DATA 1
RANGE $1ACC-$1ACD DB_DATA 1
RANGE $1ACD-$1ACE DB_DATA 1
RANGE $1ACE-$1ACF DB_DATA 1
RANGE $1ACF-$1AD0 DB_DATA 1
RANGE $1AD0-$1AD1 DB_DATA 1
RANGE $1AD1-$1AD2 DB_DATA 1
RANGE $1AD2-$1AD3 DB_DATA 1
RANGE $1AD3-$1AD4 DB_DATA 1
RANGE $1AD4-$1AD6 DW_DATA 1
RANGE $1AD6-$1AD8 DW_DATA 1
RANGE $1AD8-$1ADA DW_DATA 1
RANGE $1ADA-$1ADC DW_DATA 1
RANGE $1ADC-$1ADD DB_DATA 1
RANGE $1ADD-$1ADE DB_DATA 1
RANGE $1ADE-$1ADF DB_DATA 1
RANGE $1ADF-$1AE0 DB_DATA 1
RANGE $1AE0-$1AE1 DB_DATA 1
RANGE $1AE1-$1AE2 DB_DATA 1
RANGE $1AE2-$1AE3 DB_DATA 1
RANGE $1AE3-$1AE4 DB_DATA 1
RANGE $1AE4-$1AE5 DB_DATA 1
RANGE $1AE5-$1AE6 DB_DATA 1
RANGE $1AE6-$1AE7 DB_DATA 1
RANGE $1AE7-$1AE8 DB_DATA 1
RANGE $1AE8-$1AE9 DB_DATA 1
RANGE $1AE9-$1AEA DB_DATA 1
RANGE $1AEA-$1AEB DB_DATA 1
RANGE $1AEB-$1AEC DB_DATA 1
RANGE $1AEC-$1AED DB_DATA 1
RANGE $1AED-$1AEE DB_DATA 1
RANGE $1AEE-$1AEF DB_DATA 1
RANGE $1AEF-$1AF0 DB_DATA 1
RANGE $1AF0-$1AF1 DB_DATA 1
RANGE $1AF1-$1AF2 DB_DATA 1
RANGE $1AF2-$1AF3 DB_DATA 1
RANGE $1AF3-$1AF4 DB_DATA 1
RANGE $1AF4-$1AF5 DB_DATA 1
RANGE $1AF5-$1AF6 DB_DATA 1
RANGE $1AF6-$1AF7 DB_DATA 1
RANGE $1AF7-$1AF8 DB_DATA 1
RANGE $1AF8-$1AF9 DB_DATA 1
RANGE $1AF9-$1AFA DB_DATA 1
RANGE $1AFA-$1AFB DB_DATA 1
RANGE $1AFB-$1AFC DB_DATA 1
RANGE $1AFC-$1AFD DB_DATA 1
RANGE $1AFD-$1AFE DB_DATA 1
RANGE $1AFE-$1AFF DB_DATA 1
RANGE $1AFF-$1B00 DB_DATA 1
RANGE $1B00-$1B01 DB_DATA 1
RANGE $1B01-$1B02 DB_DATA 1
RANGE $1B02-$1B03 DB_DATA 1
RANGE $1B03-$1B04 DB_DATA 1
RANGE $1B04-$1B05 DB_DATA 1
RANGE $1B05-$1B06 DB_DATA 1
RANGE $1B06-$1B07 DB_DATA 1
RANGE $1B07-$1B08 DB_DATA 1
RANGE $1B08-$1B09 DB_DATA 1
RANGE $1B09-$1B0A DB_DATA 1
RANGE $1B0A-$1B0B DB_DATA 1
RANGE $1B0B-$1B0C DB_DATA 1
RANGE $1B0C-$1B0D DB_DATA 1
RANGE $1B0D-$1B0E DB_DATA 1
RANGE $1B0E-$1B0F DB_DATA 1
RANGE $1B0F-$1B10 DB_DATA 1
RANGE $1B10-$1B11 DB_DATA 1
RANGE $1B11-$1B12 DB_DATA 1
RANGE $1B12-$1B13 DB_DATA 1
RANGE $1B13-$1B14 DB_DATA 1
RANGE $1B14-$1B15 DB_DATA 1
RANGE $1B15-$1B16 DB_DATA 1
RANGE $1B16-$1B17 DB_DATA 1
RANGE $1B17-$1B18 DB_DATA 1
RANGE $1B18-$1B19 DB_DATA 1
RANGE $1B19-$1B1A DB_DATA 1
RANGE $1B1A-$1B1B DB_DATA 1
RANGE $1B1B-$1B1C DB_DATA 1
RANGE $1B1C-$1B1D DB_DATA 1
RANGE $1B1D-$1B1E DB_DATA 1
RANGE $1B1E-$1B1F DB_DATA 1
RANGE $1B1F-$1B20 DB_DATA 1
RANGE $1B20-$1B21 DB_DATA 1
RANGE $1B21-$1B22 DB_DATA 1
RANGE $1B22-$1B23 DB_DATA 1
RANGE $1B23-$1B24 DB_DATA 1
RANGE $1B24-$1B25 DB_DATA 1
RANGE $1B25-$1B26 DB_DATA 1
RANGE $1B26-$1B27 DB_DATA 1
RANGE $1B27-$1B28 DB_DATA 1
RANGE $1B28-$1B29 DB_DATA 1
RANGE $1B29-$1B2A DB_DATA 1
RANGE $1B2A-$1B2B DB_DATA 1
RANGE $1B2B-$1B2C DB_DATA 1
RANGE $1B2C-$1B2D DB_DATA 1
RANGE $1B2D-$1B2E DB_DATA 1
RANGE $1B2E-$1B2F DB_DATA 1
RANGE $1B2F-$1B30 DB_DATA 1
RANGE $1B30-$1B31 DB_DATA 1
RANGE $1B31-$1B32 DB_DATA 1
RANGE $1B32-$1B33 DB_DATA 1
RANGE $1B33-$1B34 DB_DATA 1
RANGE $1B34-$1B35 DB_DATA 1
RANGE $1B35-$1B36 DB_DATA 1
RANGE $1B36-$1B37 DB_DATA 1
RANGE $1B37-$1B38 DB_DATA 1
RANGE $1B38-$1B39 DB_DATA 1
RANGE $1B39-$1B3A DB_DATA 1
RANGE $1B3A-$1B3B DB_DATA 1
RANGE $1B3B-$1B3C DB_DATA 1
RANGE $1B3C-$1B3D DB_DATA 1
RANGE $1B3D-$1B3E DB_DATA 1
RANGE $1B3E-$1B3F DB_DATA 1
RANGE $1B3F-$1B40 DB_DATA 1
RANGE $1B40-$1B42 DW_DATA 1
RANGE $1B42-$1B44 DW_DATA 1
RANGE $1B44-$1B46 DW_DATA 1
RANGE $1B46-$1B48 DW_DATA 1
RANGE $1B48-$1B49 DB_DATA 1
RANGE $1B49-$1B4A DB_DATA 1
RANGE $1B4A-$1B4B DB_DATA 1
RANGE $1B4B-$1B4C DB_DATA 1
RANGE $1B4C-$1B4D DB_DATA 1
RANGE $1B4D-$1B4E DB_DATA 1
RANGE $1B4E-$1B4F DB_DATA 1
RANGE $1B4F-$1B50 DB_DATA 1
RANGE $1B50-$1B51 DB_DATA 1
RANGE $1B51-$1B52 DB_DATA 1
RANGE $1B52-$1B53 DB_DATA 1
RANGE $1B53-$1B54 DB_DATA 1
RANGE $1B54-$1B55 DB_DATA 1
RANGE $1B55-$1B56 DB_DATA 1
RANGE $1B56-$1B57 DB_DATA 1
RANGE $1B57-$1B58 DB_DATA 1
RANGE $1B58-$1B59 DB_DATA 1
RANGE $1B59-$1B5A DB_DATA 1
RANGE $1B5A-$1B5B DB_DATA 1
RANGE $1B5B-$1B5C DB_DATA 1
RANGE $1B5C-$1B5D DB_DATA 1
RANGE $1B5D-$1B5E DB_DATA 1
RANGE $1B5E-$1B5F DB_DATA 1
RANGE $1B5F-$1B60 DB_DATA 1
RANGE $1B60-$1B61 DB_DATA 1
RANGE $1B61-$1B62 DB_DATA 1
RANGE $1B62-$1B63 DB_DATA 1
RANGE $1B63-$1B64 DB_DATA 1
RANGE $1B64-$1B65 DB_DATA 1
RANGE $1B65-$1B66 DB_DATA 1
RANGE $1B66-$1B67 DB_DATA 1
RANGE $1B67-$1B68 DB_DATA 1
RANGE $1B68-$1B69 DB_DATA 1
RANGE $1B69-$1B6A DB_DATA 1
RANGE $1B6A-$1B6B DB_DATA 1
RANGE $1B6B-$1B6C DB_DATA 1
RANGE $1B6C-$1B6D DB_DATA 1
RANGE $1B6D-$1B6E DB_DATA 1
RANGE $1B6E-$1B6F DB_DATA 1
RANGE $1B6F-$1B70 DB_DATA 1
RANGE $1B70-$1B71 DB_DATA 1
RANGE $1B71-$1B72 DB_DATA 1
RANGE $1B72-$1B73 DB_DATA 1
RANGE $1B73-$1B74 DB_DATA 1
RANGE $1B74-$1B75 DB_DATA 1
RANGE $1B75-$1B76 DB_DATA 1
RANGE $1B76-$1B77 DB_DATA 1
RANGE $1B77-$1B78 DB_DATA 1
RANGE $1B78-$1B79 DB_DATA 1
RANGE $1B79-$1B7A DB_DATA 1
RANGE $1B7A-$1B7B DB_DATA 1
RANGE $1B7B-$1B7C DB_DATA 1
RANGE $1B7C-$1CC0 CODE
RANGE $1CC0-$1CC2 DW_DATA 1
RANGE $1CC2-$1CC4 DW_DATA 1
RANGE $1CC4-$1CC6 DW_DATA 1
RANGE $1CC6-$1CC7 DB_DATA 1
RANGE $1CC7-$1CC9 DW_DATA 1
RANGE $1CC9-$1CCB DW_DATA 1
RANGE $1CCB-$1CCD DW_DATA 1
RANGE $1CCD-$1CCE DB_DATA 1
RANGE $1CCE-$1CD0 DW_DATA 1
RANGE $1CD0-$1CD2 DW_DATA 1
RANGE $1CD2-$1CD4 DW_DATA 1
RANGE $1CD4-$1CD5 DB_DATA 1
RANGE $1CD5-$1CD7 DW_DATA 1
RANGE $1CD7-$1CD9 DW_DATA 1
RANGE $1CD9-$1CDB DW_DATA 1
RANGE $1CDB-$1CDC DB_DATA 1
RANGE $1CDC-$1CDE DW_DATA 1
RANGE $1CDE-$1CE0 DW_DATA 1
RANGE $1CE0-$1CE2 DW_DATA 1
RANGE $1CE2-$1CE3 DB_DATA 1
RANGE $1CE3-$1CE5 DW_DATA 1
RANGE $1CE5-$1D5A CODE
RANGE $1D5A-$1D5C DW_DATA 1
RANGE $1D5C-$1D5E DW_DATA 1
RANGE $1D5E-$1D60 DW_DATA 1
RANGE $1D60-$1D62 DW_DATA 1
RANGE $1D62-$1D63 DB_DATA 1
RANGE $1D63-$1D64 DB_DATA 1
RANGE $1D64-$1D65 DB_DATA 1
RANGE $1D65-$1D66 DB_DATA 1
RANGE $1D66-$1D67 DB_DATA 1
RANGE $1D67-$1D68 DB_DATA 1
RANGE $1D68-$1D69 DB_DATA 1
RANGE $1D69-$1D6A DB_DATA 1
RANGE $1D6A-$1D6B DB_DATA 1
RANGE $1D6B-$1D6C DB_DATA 1
RANGE $1D6C-$1D6D DB_DATA 1
RANGE $1D6D-$1D6E DB_DATA 1
RANGE $1D6E-$1D6F DB_DATA 1
RANGE $1D6F-$1D70 DB_DATA 1
RANGE $1D70-$1D71 DB_DATA 1
RANGE $1D71-$1D72 DB_DATA 1
RANGE $1D72-$1D73 DB_DATA 1
RANGE $1D73-$1D74 DB_DATA 1
RANGE $1D74-$1D75 DB_DATA 1
RANGE $1D75-$1D76 DB_DATA 1
RANGE $1D76-$1D77 DB_DATA 1
RANGE $1D77-$1D78 DB_DATA 1
RANGE $1D78-$1D79 DB_DATA 1
RANGE $1D79-$1D7A DB_DATA 1
RANGE $1D7A-$1D7B DB_DATA 1
RANGE $1D7B-$1D7C DB_DATA 1
RANGE $1D7C-$1D7D DB_DATA 1
RANGE $1D7D-$1D7E DB_DATA 1
RANGE $1D7E-$1D7F DB_DATA 1
RANGE $1D7F-$1D80 DB_DATA 1
RANGE $1D80-$1D81 DB_DATA 1
RANGE $1D81-$1D82 DB_DATA 1
RANGE $1D82-$1D83 DB_DATA 1
RANGE $1D83-$1D84 DB_DATA 1
RANGE $1D84-$1D85 DB_DATA 1
RANGE $1D85-$1D86 DB_DATA 1
RANGE $1D86-$1D87 DB_DATA 1
RANGE $1D87-$1D88 DB_DATA 1
RANGE $1D88-$1D89 DB_DATA 1
RANGE $1D89-$1D8A DB_DATA 1
RANGE $1D8A-$1D8B DB_DATA 1
RANGE $1D8B-$1D8C DB_DATA 1
RANGE $1D8C-$1D8D DB_DATA 1
RANGE $1D8D-$1D8E DB_DATA 1
RANGE $1D8E-$1D8F DB_DATA 1
RANGE $1D8F-$1D90 DB_DATA 1
RANGE $1D90-$1D91 DB_DATA 1
RANGE $1D91-$1D92 DB_DATA 1
RANGE $1D92-$1D93 DB_DATA 1
RANGE $1D93-$1D94 DB_DATA 1
RANGE $1D94-$1D95 DB_DATA 1
RANGE $1D95-$1D96 DB_DATA 1
RANGE $1D96-$1D97 DB_DATA 1
RANGE $1D97-$1D98 DB_DATA 1
RANGE $1D98-$1D99 DB_DATA 1
RANGE $1D99-$1D9A DB_DATA 1
RANGE $1D9A-$1D9B DB_DATA 1
RANGE $1D9B-$1D9C DB_DATA 1
RANGE $1D9C-$1D9D DB_DATA 1
RANGE $1D9D-$1D9E DB_DATA 1
RANGE $1D9E-$1D9F DB_DATA 1
RANGE $1D9F-$1DA0 DB_DATA 1
RANGE $1DA0-$1DA1 DB_DATA 1
RANGE $1DA1-$1DA2 DB_DATA 1
RANGE $1DA2-$1DA3 DB_DATA 1
RANGE $1DA3-$1DA4 DB_DATA 1
RANGE $1DA4-$1DA5 DB_DATA 1
RANGE $1DA5-$1DA6 DB_DATA 1
RANGE $1DA6-$1DA7 DB_DATA 1
RANGE $1DA7-$1DA8 DB_DATA 1
RANGE $1DA8-$1DA9 DB_DATA 1
RANGE $1DA9-$1DAA DB_DATA 1
RANGE $1DAA-$1DAB DB_DATA 1
RANGE $1DAB-$1DAC DB_DATA 1
RANGE $1DAC-$1DAD DB_DATA 1
RANGE $1DAD-$1DAE DB_DATA 1
RANGE $1DAE-$1DAF DB_DATA 1
RANGE $1DAF-$1DB0 DB_DATA 1
RANGE $1DB0-$1DB1 DB_DATA 1
RANGE $1DB1-$1DB2 DB_DATA 1
RANGE $1DB2-$1DB3 DB_DATA 1
RANGE $1DB3-$1DB4 DB_DATA 1
RANGE $1DB4-$1DB5 DB_DATA 1
RANGE $1DB5-$1DB6 DB_DATA 1
RANGE $1DB6-$1DB7 DB_DATA 1
RANGE $1DB7-$1DB8 DB_DATA 1
RANGE $1DB8-$1DB9 DB_DATA 1
RANGE $1DB9-$1DBA DB_DATA 1
RANGE $1DBA-$1DBB DB_DATA 1
RANGE $1DBB-$1DBC DB_DATA 1
RANGE $1DBC-$1DBD DB_DATA 1
RANGE $1DBD-$1DBE DB_DATA 1
RANGE $1DBE-$1DBF DB_DATA 1
RANGE $1DBF-$1DC0 DB_DATA 1
RANGE $1DC0-$1DC1 DB_DATA 1
RANGE $1DC1-$1DC2 DB_DATA 1
RANGE $1DC2-$1DC3 DB_DATA 1
RANGE $1DC3-$1DC4 DB_DATA 1
RANGE $1DC4-$1DC5 DB_DATA 1
RANGE $1DC5-$1DC6 DB_DATA 1
RANGE $1DC6-$1DC7 DB_DATA 1
RANGE $1DC7-$1DC8 DB_DATA 1
RANGE $1DC8-$1DC9 DB_DATA 1
RANGE $1DC9-$1DCA DB_DATA 1
RANGE $1DCA-$1DCB DB_DATA 1
RANGE $1DCB-$1DCC DB_DATA 1
RANGE $1DCC-$1DCD DB_DATA 1
RANGE $1DCD-$1DCE DB_DATA 1
RANGE $1DCE-$1DCF DB_DATA 1
RANGE $1DCF-$1DD0 DB_DATA 1
RANGE $1DD0-$1DD1 DB_DATA 1
RANGE $1DD1-$1DD2 DB_DATA 1
RANGE $1DD2-$1DD3 DB_DATA 1
RANGE $1DD3-$1DD4 DB_DATA 1
RANGE $1DD4-$1DD5 DB_DATA 1
RANGE $1DD5-$1DD6 DB_DATA 1
RANGE $1DD6-$1DD7 DB_DATA 1
RANGE $1DD7-$1DD8 DB_DATA 1
RANGE $1DD8-$1DD9 DB_DATA 1
RANGE $1DD9-$1DDA DB_DATA 1
RANGE $1DDA-$1DDC DW_DATA 1
RANGE $1DDC-$1DDE DW_DATA 1
RANGE $1DDE-$1DE0 DW_DATA 1
RANGE $1DE0-$1DE2 DW_DATA 1
RANGE $1DE2-$1DE3 DB_DATA 1
RANGE $1DE3-$1DE4 DB_DATA 1
RANGE $1DE4-$1DE5 DB_DATA 1
RANGE $1DE5-$1DE6 DB_DATA 1
RANGE $1DE6-$1DE7 DB_DATA 1
RANGE $1DE7-$1DE8 DB_DATA 1
RANGE $1DE8-$1DE9 DB_DATA 1
RANGE $1DE9-$1DEA DB_DATA 1
RANGE $1DEA-$1DEB DB_DATA 1
RANGE $1DEB-$1DEC DB_DATA 1
RANGE $1DEC-$1DED DB_DATA 1
RANGE $1DED-$1DEE DB_DATA 1
RANGE $1DEE-$1DEF DB_DATA 1
RANGE $1DEF-$1DF0 DB_DATA 1
RANGE $1DF0-$1DF1 DB_DATA 1
RANGE $1DF1-$1DF2 DB_DATA 1
RANGE $1DF2-$1DF3 DB_DATA 1
RANGE $1DF3-$1DF4 DB_DATA 1
RANGE $1DF4-$1DF5 DB_DATA 1
RANGE $1DF5-$1DF6 DB_DATA 1
RANGE $1DF6-$1DF7 DB_DATA 1
RANGE $1DF7-$1DF8 DB_DATA 1
RANGE $1DF8-$1DF9 DB_DATA 1
RANGE $1DF9-$1DFA DB_DATA 1
RANGE $1DFA-$1DFB DB_DATA 1
RANGE $1DFB-$1DFC DB_DATA 1
RANGE $1DFC-$1DFD DB_DATA 1
RANGE $1DFD-$1DFE DB_DATA 1
RANGE $1DFE-$1DFF DB_DATA 1
RANGE $1DFF-$1E00 DB_DATA 1
RANGE $1E00-$1E01 DB_DATA 1
RANGE $1E01-$1E02 DB_DATA 1
RANGE $1E02-$1E03 DB_DATA 1
RANGE $1E03-$1E04 DB_DATA 1
RANGE $1E04-$1E05 DB_DATA 1
RANGE $1E05-$1E06 DB_DATA 1
RANGE $1E06-$1E07 DB_DATA 1
RANGE $1E07-$1E08 DB_DATA 1
RANGE $1E08-$1E09 DB_DATA 1
RANGE $1E09-$1E0A DB_DATA 1
RANGE $1E0A-$1E0B DB_DATA 1
RANGE $1E0B-$1E0C DB_DATA 1
RANGE $1E0C-$1E0D DB_DATA 1
RANGE $1E0D-$1E0E DB_DATA 1
RANGE $1E0E-$1E0F DB_DATA 1
RANGE $1E0F-$1E10 DB_DATA 1
RANGE $1E10-$1E11 DB_DATA 1
RANGE $1E11-$1E12 DB_DATA 1
RANGE $1E12-$1E13 DB_DATA 1
RANGE $1E13-$1E14 DB_DATA 1
RANGE $1E14-$1E15 DB_DATA 1
RANGE $1E15-$1E16 DB_DATA 1
RANGE $1E16-$1E17 DB_DATA 1
RANGE $1E17-$1E18 DB_DATA 1
RANGE $1E18-$1E19 DB_DATA 1
RANGE $1E19-$1E1A DB_DATA 1
RANGE $1E1A-$1E1B DB_DATA 1
RANGE $1E1B-$1E1C DB_DATA 1
RANGE $1E1C-$1E1D DB_DATA 1
RANGE $1E1D-$1E1E DB_DATA 1
RANGE $1E1E-$1E1F DB_DATA 1
RANGE $1E1F-$1E20 DB_DATA 1
RANGE $1E20-$1E21 DB_DATA 1
RANGE $1E21-$1E22 DB_DATA 1
RANGE $1E22-$1E23 DB_DATA 1
RANGE $1E23-$1E24 DB_DATA 1
RANGE $1E24-$1E25 DB_DATA 1
RANGE $1E25-$1E26 DB_DATA 1
RANGE $1E26-$1E27 DB_DATA 1
RANGE $1E27-$1E28 DB_DATA 1
RANGE $1E28-$1E29 DB_DATA 1
RANGE $1E29-$1E2A DB_DATA 1
RANGE $1E2A-$1E2B DB_DATA 1
RANGE $1E2B-$1E2C DB_DATA 1
RANGE $1E2C-$1E2D DB_DATA 1
RANGE $1E2D-$1E2E DB_DATA 1
RANGE $1E2E-$1E2F DB_DATA 1
RANGE $1E2F-$1E30 DB_DATA 1
RANGE $1E30-$1E31 DB_DATA 1
RANGE $1E31-$1E32 DB_DATA 1
RANGE $1E32-$1E33 DB_DATA 1
RANGE $1E33-$1E34 DB_DATA 1
RANGE $1E34-$1E35 DB_DATA 1
RANGE $1E35-$1E36 DB_DATA 1
RANGE $1E36-$1E37 DB_DATA 1
RANGE $1E37-$1E38 DB_DATA 1
RANGE $1E38-$1E39 DB_DATA 1
RANGE $1E39-$1E3A DB_DATA 1
RANGE $1E3A-$1E3B DB_DATA 1
RANGE $1E3B-$1E3C DB_DATA 1
RANGE $1E3C-$1E3D DB_DATA 1
RANGE $1E3D-$1E3E DB_DATA 1
RANGE $1E3E-$1E3F DB_DATA 1
RANGE $1E3F-$1E40 DB_DATA 1
RANGE $1E40-$1E41 DB_DATA 1
RANGE $1E41-$1E42 DB_DATA 1
RANGE $1E42-$1E43 DB_DATA 1
RANGE $1E43-$1E44 DB_DATA 1
RANGE $1E44-$1E45 DB_DATA 1
RANGE $1E45-$1E46 DB_DATA 1
RANGE $1E46-$1E47 DB_DATA 1
RANGE $1E47-$1E48 DB_DATA 1
RANGE $1E48-$1E49 DB_DATA 1
RANGE $1E49-$1E4A DB_DATA 1
RANGE $1E4A-$1E4B DB_DATA 1
RANGE $1E4B-$1E4C DB_DATA 1
RANGE $1E4C-$1E4D DB_DATA 1
RANGE $1E4D-$1E4E DB_DATA 1
RANGE $1E4E-$1E4F DB_DATA 1
RANGE $1E4F-$1E50 DB_DATA 1
RANGE $1E50-$1E51 DB_DATA 1
RANGE $1E51-$1E52 DB_DATA 1
RANGE $1E52-$1E53 DB_DATA 1
RANGE $1E53-$1E54 DB_DATA 1
RANGE $1E54-$1E55 DB_DATA 1
RANGE $1E55-$1E56 DB_DATA 1
RANGE $1E56-$1E57 DB_DATA 1
RANGE $1E57-$1E58 DB_DATA 1
RANGE $1E58-$1E59 DB_DATA 1
RANGE $1E59-$1E5A DB_DATA 1
RANGE $1E5A-$1E5B DB_DATA 1
RANGE $1E5B-$1E5C DB_DATA 1
RANGE $1E5C-$1E5D DB_DATA 1
RANGE $1E5D-$1E5E DB_DATA 1
RANGE $1E5E-$1E5F DB_DATA 1
RANGE $1E5F-$1E60 DB_DATA 1
RANGE $1E60-$1E61 DB_DATA 1
RANGE $1E61-$1E62 DB_DATA 1
RANGE $1E62-$1E63 DB_DATA 1
RANGE $1E63-$1E64 DB_DATA 1
RANGE $1E64-$1E65 DB_DATA 1
RANGE $1E65-$1E66 DB_DATA 1
RANGE $1E66-$1E67 DB_DATA 1
RANGE $1E67-$1E68 DB_DATA 1
RANGE $1E68-$1E69 DB_DATA 1
RANGE $1E69-$1E6A DB_DATA 1
RANGE $1E6A-$1E6C DW_DATA 1
RANGE $1E6C-$1E6E DW_DATA 1
RANGE $1E6E-$1E70 DW_DATA 1
RANGE $1E70-$1E72 DW_DATA 1
RANGE $1E72-$1E73 DB_DATA 1
RANGE $1E73-$1E74 DB_DATA 1
RANGE $1E74-$1E75 DB_DATA 1
RANGE $1E75-$1E76 DB_DATA 1
RANGE $1E76-$1E77 DB_DATA 1
RANGE $1E77-$1E78 DB_DATA 1
RANGE $1E78-$1E79 DB_DATA 1
RANGE $1E79-$1E7A DB_DATA 1
RANGE $1E7A-$1E7B DB_DATA 1
RANGE $1E7B-$1E7C DB_DATA 1
RANGE $1E7C-$1E7D DB_DATA 1
RANGE $1E7D-$1E7E DB_DATA 1
RANGE $1E7E-$1E7F DB_DATA 1
RANGE $1E7F-$1E80 DB_DATA 1
RANGE $1E80-$1E81 DB_DATA 1
RANGE $1E81-$1E82 DB_DATA 1
RANGE $1E82-$1E83 DB_DATA 1
RANGE $1E83-$1E84 DB_DATA 1
RANGE $1E84-$1E85 DB_DATA 1
RANGE $1E85-$1E86 DB_DATA 1
RANGE $1E86-$1E87 DB_DATA 1
RANGE $1E87-$1E88 DB_DATA 1
RANGE $1E88-$1E89 DB_DATA 1
RANGE $1E89-$1E8A DB_DATA 1
RANGE $1E8A-$1E8B DB_DATA 1
RANGE $1E8B-$1E8C DB_DATA 1
RANGE $1E8C-$1E8D DB_DATA 1
RANGE $1E8D-$1E8E DB_DATA 1
RANGE $1E8E-$1E8F DB_DATA 1
RANGE $1E8F-$1E90 DB_DATA 1
RANGE $1E90-$1E91 DB_DATA 1
RANGE $1E91-$1E92 DB_DATA 1
RANGE $1E92-$1E93 DB_DATA 1
RANGE $1E93-$1E94 DB_DATA 1
RANGE $1E94-$1E95 DB_DATA 1
RANGE $1E95-$1E96 DB_DATA 1
RANGE $1E96-$1E97 DB_DATA 1
RANGE $1E97-$1E98 DB_DATA 1
RANGE $1E98-$1E99 DB_DATA 1
RANGE $1E99-$1E9A DB_DATA 1
RANGE $1E9A-$1E9B DB_DATA 1
RANGE $1E9B-$1E9C DB_DATA 1
RANGE $1E9C-$1E9D DB_DATA 1
RANGE $1E9D-$1E9E DB_DATA 1
RANGE $1E9E-$1E9F DB_DATA 1
RANGE $1E9F-$1EA0 DB_DATA 1
RANGE $1EA0-$1EA1 DB_DATA 1
RANGE $1EA1-$1EA2 DB_DATA 1
RANGE $1EA2-$1EA3 DB_DATA 1
RANGE $1EA3-$1EA4 DB_DATA 1
RANGE $1EA4-$1EA5 DB_DATA 1
RANGE $1EA5-$1EA6 DB_DATA 1
RANGE $1EA6-$1EA7 DB_DATA 1
RANGE $1EA7-$1EA8 DB_DATA 1
RANGE $1EA8-$1EA9 DB_DATA 1
RANGE $1EA9-$1EAA DB_DATA 1
RANGE $1EAA-$1EAB DB_DATA 1
RANGE $1EAB-$1EAC DB_DATA 1
RANGE $1EAC-$1EAD DB_DATA 1
RANGE $1EAD-$1EAE DB_DATA 1
RANGE $1EAE-$1EAF DB_DATA 1
RANGE $1EAF-$1EB0 DB_DATA 1
RANGE $1EB0-$1EB1 DB_DATA 1
RANGE $1EB1-$1EB2 DB_DATA 1
RANGE $1EB2-$1EB3 DB_DATA 1
RANGE $1EB3-$1EB4 DB_DATA 1
RANGE $1EB4-$1EB5 DB_DATA 1
RANGE $1EB5-$1EB6 DB_DATA 1
RANGE $1EB6-$1EB7 DB_DATA 1
RANGE $1EB7-$1EB8 DB_DATA 1
RANGE $1EB8-$1EB9 DB_DATA 1
RANGE $1EB9-$1EBA DB_DATA 1
RANGE $1EBA-$1EBB DB_DATA 1
RANGE $1EBB-$1EBC DB_DATA 1
RANGE $1EBC-$1EBD DB_DATA 1
RANGE $1EBD-$1EBE DB_DATA 1
RANGE $1EBE-$1EBF DB_DATA 1
RANGE $1EBF-$1EC0 DB_DATA 1
RANGE $1EC0-$1EC1 DB_DATA 1
RANGE $1EC1-$1EC2 DB_DATA 1
RANGE $1EC2-$1EC3 DB_DATA 1
RANGE $1EC3-$1EC4 DB_DATA 1
RANGE $1EC4-$1EC5 DB_DATA 1
RANGE $1EC5-$1EC6 DB_DATA 1
RANGE $1EC6-$1EC7 DB_DATA 1
RANGE $1EC7-$1EC8 DB_DATA 1
RANGE $1EC8-$1EC9 DB_DATA 1
RANGE $1EC9-$1ECA DB_DATA 1
RANGE $1ECA-$1ECB DB_DATA 1
RANGE $1ECB-$1ECC DB_DATA 1
RANGE $1ECC-$1ECD DB_DATA 1
RANGE $1ECD-$1ECE DB_DATA 1
RANGE $1ECE-$1ECF DB_DATA 1
RANGE $1ECF-$1ED0 DB_DATA 1
RANGE $1ED0-$1ED1 DB_DATA 1
RANGE $1ED1-$1ED2 DB_DATA 1
RANGE $1ED2-$1ED3 DB_DATA 1
RANGE $1ED3-$1ED4 DB_DATA 1
RANGE $1ED4-$1ED5 DB_DATA 1
RANGE $1ED5-$1ED6 DB_DATA 1
RANGE $1ED6-$1ED7 DB_DATA 1
RANGE $1ED7-$1ED8 DB_DATA 1
RANGE $1ED8-$1ED9 DB_DATA 1
RANGE $1ED9-$1EDA DB_DATA 1
RANGE $1EDA-$1EDB DB_DATA 1
RANGE $1EDB-$1EDC DB_DATA 1
RANGE $1EDC-$1EDD DB_DATA 1
RANGE $1EDD-$1EDE DB_DATA 1
RANGE $1EDE-$1EDF DB_DATA 1
RANGE $1EDF-$1EE0 DB_DATA 1
RANGE $1EE0-$1EE1 DB_DATA 1
RANGE $1EE1-$1EE2 DB_DATA 1
RANGE $1EE2-$1EE3 DB_DATA 1
RANGE $1EE3-$1EE4 DB_DATA 1
RANGE $1EE4-$1EE5 DB_DATA 1
RANGE $1EE5-$1EE6 DB_DATA 1
RANGE $1EE6-$1EE7 DB_DATA 1
RANGE $1EE7-$1EE8 DB_DATA 1
RANGE $1EE8-$1EE9 DB_DATA 1
RANGE $1EE9-$1EEA DB_DATA 1
RANGE $1EEA-$1EEB DB_DATA 1
RANGE $1EEB-$1EEC DB_DATA 1
RANGE $1EEC-$1EED DB_DATA 1
RANGE $1EED-$1EEE DB_DATA 1
RANGE $1EEE-$1EEF DB_DATA 1
RANGE $1EEF-$1EF0 DB_DATA 1
RANGE $1EF0-$1EF1 DB_DATA 1
RANGE $1EF1-$1EF2 DB_DATA 1
RANGE $1EF2-$1EF3 DB_DATA 1
RANGE $1EF3-$1EF4 DB_DATA 1
RANGE $1EF4-$1EF5 DB_DATA 1
RANGE $1EF5-$1EF6 DB_DATA 1
RANGE $1EF6-$1EF7 DB_DATA 1
RANGE $1EF7-$1EF8 DB_DATA 1
RANGE $1EF8-$1EF9 DB_DATA 1
RANGE $1EF9-$1EFA DB_DATA 1
RANGE $1EFA-$2000 DB_DATA 262

