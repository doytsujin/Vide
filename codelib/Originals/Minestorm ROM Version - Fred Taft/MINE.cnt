BANK 0
EQU $00 
LABEL $F000 start_of_OS_ROM
LABEL $F01C powerup_loop
LABEL $F101 gce_copyright_string
LABEL $F10C vectrex_string
LABEL $F14C init_PIA_chip
LABEL $F164 initialize_OS_RAM
LABEL $F18B reinit
LABEL $F192 waitrecal
LABEL $F1A2 set_refresh
LABEL $F1AA dptoD0
LABEL $F1AF dptoC8
LABEL $F1B4 read_switches
LABEL $F1BA read_switches2
LABEL $F1F8 read_jstick
LABEL $F256 byte_2_sound_chip
LABEL $F259 byte_2_sound_chip2
LABEL $F272 clear_sound_chip
LABEL $F27D copy_bytes_2_sound_chip
LABEL $F289 do_sound
LABEL $F29D intensity_to_1F
LABEL $F2A1 intensity_to_3F
LABEL $F2A5 intensity_to_5F
LABEL $F2A9 intensity_to_7F
LABEL $F2AB intensity_to_a
LABEL $F2BE dotixb
LABEL $F2C1 dotix
LABEL $F2C3 dot_at_d
LABEL $F2C5 dot_at_current_position
LABEL $F2D5 dot_list
LABEL $F2DE dotix_then_reset
LABEL $F2F2 move_pen7F_no_inc
LABEL $F2FC move_pen7F_to_d
LABEL $F308 move_penFF
LABEL $F30C move_pen7F
LABEL $F30E set_scale_factor
LABEL $F310 move_pen
LABEL $F312 move_pen_d
LABEL $F34A set_dp_and_reset0ref
LABEL $F34F check0ref
LABEL $F354 reset0ref
LABEL $F373 print_1_string
LABEL $F378 print_with_dft_hw
LABEL $F37A print_at_d
LABEL $F385 printu
LABEL $F38A printu2
LABEL $F38C printu3
LABEL $F391 print_b_minus_a
LABEL $F393 print_b_minus_a2
LABEL $F3AD move_then_draw_VL_with_count1
LABEL $F3B1 move_then_draw_VL_with_count2
LABEL $F3B5 move_then_draw_VL_with_count3
LABEL $F3B7 move_then_draw_VL_with_count4
LABEL $F3B9 move_then_draw_VL_with_count6
LABEL $F3BC move_then_draw_VL_with_count5
LABEL $F3CE draw_VL_with_count4
LABEL $F3D2 draw_VL_with_count3
LABEL $F3D6 draw_VL_with_count2
LABEL $F3D8 draw_VL_with_count6
LABEL $F3DA draw_VL_with_count5
LABEL $F3DD draw_VL_with_count1
LABEL $F3DF draw_to_d
LABEL $F404 drawl1_scale_FF
LABEL $F408 drawl1_scale_7F
LABEL $F40C drawl1
LABEL $F40E drawl1b
LABEL $F410 next_pt
LABEL $F434 dwp_with_count
LABEL $F437 draw_with_pattern
LABEL $F46E drawl2
LABEL $F495 display_string
LABEL $F511 get_random_a2
LABEL $F517 get_random_a
LABEL $F533 init_music_buf
LABEL $F53F clear_blockxb
LABEL $F542 clear_C8_ram
LABEL $F545 clear_256_bytes
LABEL $F548 clear_block
LABEL $F550 clear_block_to_0x80
LABEL $F552 clear_block_to_a
LABEL $F55A decrement_counters_C82E_C830
LABEL $F55E decrement_counters_C82E_C833
LABEL $F56D delay_b_3
LABEL $F571 delay_b_2
LABEL $F575 delay_b_1
LABEL $F579 delay_b_0
LABEL $F57A start_b_delay
LABEL $F57E get_bit_mask
LABEL $F584 get_absolute_value_of_ab
LABEL $F593 convert_rise_run_to_angle
LABEL $F5D9 get_2nd_index_pair
LABEL $F5DB get_1st_index_pair
LABEL $F5EF get_rotation_index_pairs
LABEL $F5FF convert_abs_angle_to_rise_run
LABEL $F601 convert_angle_to_rise_run
LABEL $F610 rotate_vector_list2
LABEL $F61F rotate_vector_list1
LABEL $F637 transform_next_point
LABEL $F65B xform_1
LABEL $F65D xform_1a
LABEL $F661 xform_2
LABEL $F663 xform_2a
LABEL $F67F move_block
LABEL $F683 move_block2
LABEL $F687 init_sound
LABEL $F68D init_sound2
LABEL $F7A9 get_players_game
LABEL $F82C handle_buttons
LABEL $F835 display_option_string
LABEL $F84F set_dft_score
LABEL $F85E convert_a_to_bcd_and_add
LABEL $F87C add_d_to_x_in_bcd
LABEL $F8C7 compare_scores
LABEL $F8D8 check_4_new_hi_score
LABEL $F8E5 modify_target_and_check_4_hit1
LABEL $F8F3 modify_target_and_check_4_hit2
LABEL $F8FF check_bullet_for_hit
LABEL $F903 check_bullet_for_hit2
LABEL $F92E generate_explosion_sound
LABEL $F794 player_string
LABEL $F79F game_string
LABEL $F9DC bit_masks
LABEL $F9E4 music_stuff1
LABEL $F9EA music_stuff2
LABEL $F9F4 character_table
LABEL $FC24 angle_data1
LABEL $FC2C angle_data2
LABEL $FC6D rotation_pair_table
LABEL $FC8D music_routine_data
LABEL $FD0D intro_music_block
LABEL $FD1D berzerk_music_block
LABEL $FD69 music_header1a
LABEL $FD79 music_header2b
LABEL $FEB6 music_header2a
LABEL $FEE8 music_header1b
LABEL $E000 MS_header
LABEL $ED77 MS_music
LABEL $E016 MS_start
LABEL $E019 PE019
LABEL $E8E3 init_motion_dots
LABEL $E031 restart_game
LABEL $E034 PE034
LABEL $E03D PE03D
LABEL $EDAB mines_at_level_x
LABEL $E0A5 restart_same_level
LABEL $E081 start_next_mine_level
LABEL $E866 bring_ship_to_center
LABEL $EDA7 mine_field_level_pointers
LABEL $E09F goto_next_mine_level
LABEL $E7E4 init_RAM_for_new_level
LABEL $E0B8 check_4_end_of_game
LABEL $E129 seed_the_screen
LABEL $E0F9 main_loop
LABEL $E0D5 start_a_new_game
LABEL $EACF display_both_scores
LABEL $EE2F game_over
LABEL $EA9D MS_print_1_string7F
LABEL $EAF0 process_indirect_jumps
LABEL $E51E draw_non_dead_mines
LABEL $E262 process_jstick_and_buttons
LABEL $E4B8 process_bullets
LABEL $E353 reseed_screen
LABEL $EB43 check_bullets_for_hits
LABEL $EC46 check_ship_4_mine_collision
LABEL $EC95 check_ship_4_enemy_collision
LABEL $E647 display_explosion_pattern
LABEL $E1E7 generate_mine_coords
LABEL $E14C continue_seeding_screen
LABEL $E711 PE711
LABEL $E15C PE15C
LABEL $E18C activate_4_mines
LABEL $EF26 enemy_ship_pt1
LABEL $EA7F move_y_draw_x
LABEL $EF5D enemy_ship_pt2
LABEL $EF94 enemy_ship_pt3
LABEL $E198 PE198
LABEL $E1E6 PE1E6
LABEL $E1A4 PE1A4
LABEL $E1B6 PE1B6
LABEL $E9A1 activate_a_mine
LABEL $EE20 mine_field
LABEL $EAA8 move_y_print_string
LABEL $E239 PE239
LABEL $E208 generate_final_x_for_mine
LABEL $E21A PE21A
LABEL $E214 PE214
LABEL $E226 PE226
LABEL $E220 PE220
LABEL $E23A final_mine_scale_factor
LABEL $E23E mine_velocity
LABEL $E242 mine_values
LABEL $E24A extra_mine_value
LABEL $E252 mine_sizes
LABEL $E25A mine_vector_ptrs
LABEL $EE3D dumb_mine
LABEL $EE53 magnetic_mine
LABEL $EE6F fireball_mine
LABEL $EE8E magnetic_fireball_mine
LABEL $E30A PE30A
LABEL $E31B continue_hyperspace
LABEL $E30C hyperspace
LABEL $E2B0 no_ship_movement
LABEL $E2A0 PE2A0
LABEL $E290 PE290
LABEL $E2AE PE2AE
LABEL $E2C2 PE2C2
LABEL $E7B5 calc_rise_run1
LABEL $E2D4 PE2D4
LABEL $E2F7 draw_cmd_ship1
LABEL $E2EE PE2EE
LABEL $E2F4 draw_cmd_ship2
LABEL $E2F2 PE2F2
LABEL $E84C rotate_cmd_ship
LABEL $EA8D move_y_draw_x2
LABEL $E338 process_hyperspace_dots
LABEL $E330 PE330
LABEL $E98A MS_get_2_random_nums
LABEL $E34A hyperspace_complete
LABEL $E94A draw_hyperspace_motion_dots
LABEL $E837 clear_cmd_ship_xformation
LABEL $E383 PE383
LABEL $EFB3 simple_enemy_ship
LABEL $E384 ind_init_screen_reseeding
LABEL $E3A1 ind_reseed_screen
LABEL $E3F9 PE3F9
LABEL $E3BE PE3BE
LABEL $E3A5 PE3A5
LABEL $E407 PE407
LABEL $E3C7 PE3C7
LABEL $E3D3 found_avail_mine
LABEL $E3F7 PE3F7
LABEL $E412 ind_start_large_mine
LABEL $E426 ind_activate_rangen_mine
LABEL $E430 PE430
LABEL $E447 PE447
LABEL $E43B PE43B
LABEL $E448 SE448
LABEL $E450 SE450
LABEL $E46A SE46A
LABEL $E484 SE484
LABEL $E49E SE49E
LABEL $E4C6 next_bullet
LABEL $E4EC check_fire_button
LABEL $E4E7 erase_bullet
LABEL $EA6D draw_dot7F_ptr_in_y
LABEL $E4DF update_bufr_ptr
LABEL $E526 PE526
LABEL $E533 non_dead_mine
LABEL $E52A update_mine_ptr
LABEL $E5D3 move_mine_dot
LABEL $E5E1 draw_mine_as_dot
LABEL $E5EC mine_becoming_visible
LABEL $E61D delay_B4_moving_mine
LABEL $E627 process_destroyed_mine
LABEL $E5AB process_fireball
LABEL $E58A non_magnetic_mine
LABEL $E596 draw_a_visible_mine
LABEL $E5CB remove_fireball
LABEL $E5FF use_max_scale_factor
LABEL $E61A PE61A
LABEL $E624 PE624
LABEL $E644 PE644
LABEL $E657 check_next_explosion
LABEL $E703 inc_expl_ptr
LABEL $E670 chk_4_cmd_ship_explosion
LABEL $EEBA explosion
LABEL $E6F8 check_4_expired_explosion
LABEL $E6B3 dead_ship
LABEL $E686 draw_expl_cmd_ship
LABEL $EF04 cmd_ship_pt1
LABEL $E76A draw_cmd_ship_fragment
LABEL $EF0B cmd_ship_pt2
LABEL $EF15 cmd_ship_pt3
LABEL $EF1C cmd_ship_pt4
LABEL $E6EC check_ship_count
LABEL $E6D7 next_player
LABEL $E6F1 flag_no_ships_left
LABEL $E6FE explosion_expired
LABEL $ECC9 make_misc_sounds
LABEL $E716 draw_tiny_ship
LABEL $E742 rotate_fireball_vectors
LABEL $E727 PE727
LABEL $EEEB command_ship
LABEL $EEAD fireball
LABEL $E767 PE767
LABEL $E764 PE764
LABEL $E784 add_an_explosion
LABEL $E78B PE78B
LABEL $E796 found_empty_exp_slot
LABEL $E7B3 PE7B3
LABEL $E7A1 PE7A1
LABEL $E7D2 calc_rise_run2
LABEL $E7FA PE7FA
LABEL $E876 PE876
LABEL $E884 PE884
LABEL $E87F PE87F
LABEL $E880 PE880
LABEL $E892 PE892
LABEL $E88D PE88D
LABEL $E88E PE88E
LABEL $E8A2 PE8A2
LABEL $E89D PE89D
LABEL $E89E PE89E
LABEL $E8AA PE8AA
LABEL $E90B simulate_motion1
LABEL $E8FD modify_motion_scales
LABEL $EDE0 motion_dots
LABEL $E8F1 PE8F1
LABEL $E904 PE904
LABEL $E90D simulate_motion2
LABEL $E915 PE915
LABEL $E920 PE920
LABEL $E954 next_set_of_dots
LABEL $E95F draw_the_dots
LABEL $E991 PE991
LABEL $EA3C PEA3C
LABEL $E9B0 PE9B0
LABEL $E9BA PE9BA
LABEL $E9D5 init_a_visible_mine
LABEL $EA13 PEA13
LABEL $EA3E MS_random_num_4_to_3C
LABEL $EA51 PEA51
LABEL $EA57 PEA57
LABEL $EA5D draw_dot7F_at_y
LABEL $EAB4 display_active_players_score
LABEL $EDA3 score_string_positions
LABEL $ED9F score_string_pointers
LABEL $EAEF PEAEF
LABEL $EB1D PEB1D
LABEL $EB29 PEB29
LABEL $EB35 PEB35
LABEL $EB41 PEB41
LABEL $EB59 PEB59
LABEL $EB4F check_for_active_bullet
LABEL $EB5A check_enemy_ship_4_hit
LABEL $EB53 inc_bullet_ptr2
LABEL $EB93 check_mines_for_hits
LABEL $EB9A check_for_active_mine
LABEL $EBA9 check_this_mine
LABEL $EBA0 inc_mine_ptr2
LABEL $EC20 not_a_fireball_mine
LABEL $EC17 start_a_fireball
LABEL $EC63 PEC63
LABEL $EC56 PEC56
LABEL $EC64 check_this_active_mine
LABEL $EC5C inc_mine_ptr3
LABEL $ECB2 PECB2
LABEL $ECB3 cmd_and_enemy_ship_collision
LABEL $ECC9 PECC9
LABEL $ECD6 PECD6
LABEL $ED37 cmd_ship_movement_sound
LABEL $ED07 make_the_misc_sound
LABEL $ECE3 PECE3
LABEL $ED4D explosion_sound
LABEL $ECF0 PECF0
LABEL $ED42 bullet_sound
LABEL $ED00 PED00
LABEL $ECF5 PECF5
LABEL $ED5A mine_pop_sound
LABEL $ED0A PED0A
LABEL $ED1A PED1A
LABEL $ED20 PED20
LABEL $ED30 PED30
LABEL $ED36 PED36
LABEL $ED5A SED5A
LABEL $ED8F MS_music_header1
LABEL $F000 *
COMMENT_LINE $0000 can be assembled correctly now
COMMENT_LINE $0000 compatibilty added by Malban
COMMENT_LINE $0000 assenmble with comand line:
COMMENT_LINE $0000 .\ass\as09.exe -w200 -h0 -l -mcti mine.asm >error
COMMENT_LINE $0000 NOTE: THIS IS THE BIOS ROM VERSION, CARTRIDGE STARTUP GCE gXXXX IS
COMMENT_LINE $0000 NOT IN THIS FILE!
COMMENT_LINE $0000 used the 6809 assembler:
COMMENT_LINE $0000 as09 [1.11].
COMMENT_LINE $0000 Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT_LINE $0000 Available at:
COMMENT_LINE $0000 http://www.falstaff.demon.co.uk/cross.html
COMMENT_LINE $0000 This work was originally done by Fred Taft (fred@hp-pcd.cv.hp.com).
COMMENT_LINE $0000 Please forward any comments, corrections or additions back to Fred.
COMMENT_LINE $0000 Mine Storm
COMMENT_LINE $0000 bios routines
COMMENT_LINE $0000 bios data
COMMENT $E000 * Mine Storm music block pointer
COMMENT $E002 * height = -8
COMMENT $E003 * width = 80
COMMENT $E004 * rel y = 48
COMMENT $E005 * rel x = -24
COMMENT $E00B * height = -8
COMMENT $E00C * width = 80
COMMENT $E00D * rel y = 0
COMMENT $E00E * rel x = -34
COMMENT_LINE $E016 Start of the Mine Storm game
COMMENT $E016 * Clear C883 - CBC5
FORCE_NO_SYMBOL $E016
FORCE_NO_SYMBOL $E01B
FORCE_SYMBOL $E020 init_motion_dots
FORCE_NO_SYMBOL $E023
FORCE_NO_SYMBOL $E026
COMMENT $E028 * Store console enable flags in C880
FORCE_NO_SYMBOL $E028
FORCE_NO_SYMBOL $E02B
COMMENT $E02E * Store jstick mak in C881
FORCE_NO_SYMBOL $E02E
COMMENT $E031 * Clear C883 - CB70
FORCE_NO_SYMBOL $E031
FORCE_NO_SYMBOL $E036
FORCE_SYMBOL $E03D dptoC8
COMMENT $E040 * Ask for number of players
FORCE_NO_SYMBOL $E040
FORCE_SYMBOL $E043 get_players_game
COMMENT $E046 * C879 contains # of players selected
FORCE_NO_SYMBOL $E046
FORCE_NO_SYMBOL $E048
COMMENT $E04A * C89B specifies which player is active
FORCE_NO_SYMBOL $E04A
FORCE_NO_SYMBOL $E04C
COMMENT $E04F * Initialize player 1 score
FORCE_SYMBOL $E04F set_dft_score
FORCE_NO_SYMBOL $E052
COMMENT $E055 * Initialize player 2 score
FORCE_SYMBOL $E055 set_dft_score
FORCE_NO_SYMBOL $E058
COMMENT $E05B * Initialize mine field # for player 1
FORCE_SYMBOL $E05B set_dft_score
FORCE_NO_SYMBOL $E05E
FORCE_SYMBOL $E061 add_d_to_x_in_bcd
FORCE_NO_SYMBOL $E064
COMMENT $E067 * Initialize mine field # for player 2
FORCE_SYMBOL $E067 set_dft_score
FORCE_NO_SYMBOL $E06A
FORCE_SYMBOL $E06D add_d_to_x_in_bcd
COMMENT $E070 * Initialize player 1 & 2's pointers
FORCE_SYMBOL $E070 mines_at_level_x
COMMENT $E073 * into the structure describing which
FORCE_NO_SYMBOL $E073
COMMENT $E075 * mines are at which level.
FORCE_NO_SYMBOL $E075
FORCE_NO_SYMBOL $E077
COMMENT $E079 * Initialize # of ships for active player
FORCE_NO_SYMBOL $E079
COMMENT $E07B * Initialize # of ships for player 1
FORCE_NO_SYMBOL $E07B
COMMENT $E07D * Initialize # of ships for player 2
FORCE_NO_SYMBOL $E07D
FORCE_SYMBOL $E081 bring_ship_to_center
COMMENT $E084 * Increment the pointer into the struct
FORCE_NO_SYMBOL $E084
COMMENT $E088 * describing which mines are at which
FORCE_NO_SYMBOL $E088
COMMENT $E08A * level, for the active player.
FORCE_NO_SYMBOL $E08C
FORCE_SYMBOL $E090 mine_field_level_pointers
COMMENT $E093 * Check the mine field level for
FORCE_NO_SYMBOL $E093
COMMENT $E095 * the active player, and if it is
COMMENT $E097 * a multiple of 4, then award that
FORCE_NO_SYMBOL $E097
COMMENT $E099 * player a bonus ship.
FORCE_NO_SYMBOL $E099
FORCE_NO_SYMBOL $E09D
COMMENT $E09F * Increment active players mine
FORCE_NO_SYMBOL $E09F
COMMENT $E0A2 * field level indicator.
FORCE_SYMBOL $E0A2 add_d_to_x_in_bcd
FORCE_SYMBOL $E0A5 init_RAM_for_new_level
COMMENT $E0A8 * Use the pointer in C8C4 (player 1)
FORCE_NO_SYMBOL $E0A8
COMMENT $E0AB * or C8C6 (player 2) to determine
FORCE_NO_SYMBOL $E0AB
COMMENT $E0AD * which mines are at this level.
FORCE_NO_SYMBOL $E0AF
COMMENT $E0B1 * After level 13, skip any level whose
COMMENT $E0B3 * first byte is negative.
FORCE_SYMBOL $E0B3 seed_the_screen
COMMENT $E0B8 * If C8F0 counts down to 0, then
FORCE_NO_SYMBOL $E0B8
COMMENT $E0BA * start a new game; used as a delay
FORCE_NO_SYMBOL $E0BA
COMMENT $E0BD * after a game is over.
FORCE_NO_SYMBOL $E0BD
COMMENT_LINE $E0C1 Display 'game over' string, & both scores
FORCE_SYMBOL $E0C3 dptoD0
FORCE_SYMBOL $E0C6 display_both_scores
FORCE_SYMBOL $E0C9 game_over
FORCE_SYMBOL $E0CC MS_print_1_string7F
COMMENT $E0D1 * If no buttons pressed, then see if
FORCE_NO_SYMBOL $E0D1
COMMENT $E0D3 * we should goto advanced levels.
COMMENT_LINE $E0D5 Find out if a new hi score is available,
COMMENT_LINE $E0D5 and then start up a new game.
COMMENT $E0D5 * See if player 1 has new hi score
FORCE_NO_SYMBOL $E0D5
FORCE_NO_SYMBOL $E0D8
FORCE_SYMBOL $E0DB check_4_new_hi_score
COMMENT $E0DE * See if player 2 has new hi score
FORCE_NO_SYMBOL $E0DE
FORCE_NO_SYMBOL $E0E1
FORCE_SYMBOL $E0E4 check_4_new_hi_score
FORCE_NO_SYMBOL $E0E7
COMMENT $E0E9 * Just start a new game
FORCE_SYMBOL $E0ED reinit
COMMENT $E0F0 * Flag that a hi score should be displayed
FORCE_NO_SYMBOL $E0F0
FORCE_NO_SYMBOL $E0F2
COMMENT $E0F6 * Go thru a complete reset sequence
FORCE_SYMBOL $E0F6 powerup_loop
COMMENT_LINE $E0F9 This is the main loop during a players turn.  Control will
COMMENT_LINE $E0F9 remain in this loop, until either a player clears a level,
COMMENT_LINE $E0F9 or has his ship destroyed.
FORCE_SYMBOL $E0FB process_indirect_jumps
FORCE_SYMBOL $E0FE draw_non_dead_mines
FORCE_SYMBOL $E101 process_jstick_and_buttons
FORCE_SYMBOL $E104 process_bullets
FORCE_SYMBOL $E107 reseed_screen
FORCE_SYMBOL $E10C check_bullets_for_hits
FORCE_SYMBOL $E10F check_ship_4_mine_collision
FORCE_SYMBOL $E112 check_ship_4_enemy_collision
FORCE_SYMBOL $E115 display_explosion_pattern
COMMENT $E11A * See if cmd ship is disabled
FORCE_NO_SYMBOL $E11A
COMMENT $E120 * See if the game is over
FORCE_NO_SYMBOL $E120
FORCE_SYMBOL $E126 restart_same_level
COMMENT_LINE $E129 This block of code is responsible for seeding the screen
COMMENT_LINE $E129 at the beginning of play.  It will draw the enemy ship
COMMENT_LINE $E129 as it moves from the top of the screen to the bottom.
COMMENT_LINE $E129 After the field has been completely seeded, the mine
COMMENT_LINE $E129 field number will be displayed.
COMMENT_LINE $E129 I think that the x register, at entry, points to a
COMMENT_LINE $E129 structure describing the types of mines for this level.
COMMENT $E129 * Save pointer to mine info
FORCE_NO_SYMBOL $E129
FORCE_NO_SYMBOL $E12B
COMMENT $E12E * C8DC contains enemy ship coords
FORCE_NO_SYMBOL $E12E
COMMENT $E130 * C8B7 is used as loop cntr ($7F)
FORCE_NO_SYMBOL $E130
FORCE_NO_SYMBOL $E132
COMMENT $E134 * Set up 1 of the indirect
FORCE_NO_SYMBOL $E134
COMMENT $E136 * jump ptrs, to generate some
FORCE_SYMBOL $E136 generate_mine_coords
COMMENT $E139 * mine coordinates.
FORCE_NO_SYMBOL $E139
COMMENT $E13B * Load mine buf addr into C8B9-C8BA
FORCE_NO_SYMBOL $E13B
FORCE_NO_SYMBOL $E13E
COMMENT $E140 * Load # of mines into C8B8
FORCE_NO_SYMBOL $E140
FORCE_NO_SYMBOL $E142
FORCE_NO_SYMBOL $E144
FORCE_SYMBOL $E146 MS_music
FORCE_SYMBOL $E149 init_sound2
COMMENT $E14E * Draw active players ship count
FORCE_SYMBOL $E14E PE711
FORCE_SYMBOL $E151 init_sound
COMMENT $E154 * Decrement our loop counter, C8B7
FORCE_NO_SYMBOL $E154
COMMENT $E156 * every other pass.
FORCE_NO_SYMBOL $E156
FORCE_NO_SYMBOL $E15A
FORCE_SYMBOL $E15C process_indirect_jumps
COMMENT_LINE $E15F This block draws the enemy ship
FORCE_SYMBOL $E15F display_both_scores
FORCE_SYMBOL $E162 do_sound
FORCE_SYMBOL $E165 draw_non_dead_mines
FORCE_SYMBOL $E168 intensity_to_5F
COMMENT $E16B * Wait until screen is seeded,
FORCE_NO_SYMBOL $E16B
COMMENT $E16E * then activate 1st 4 mines.
FORCE_SYMBOL $E170 enemy_ship_pt1
FORCE_NO_SYMBOL $E173
COMMENT $E177 * Draw the enemy ship
FORCE_SYMBOL $E177 move_y_draw_x
FORCE_SYMBOL $E17A enemy_ship_pt2
FORCE_SYMBOL $E17D move_y_draw_x
FORCE_SYMBOL $E180 enemy_ship_pt3
FORCE_SYMBOL $E183 move_y_draw_x
COMMENT $E188 * Decrement y coord for enemy ship
FORCE_NO_SYMBOL $E188
COMMENT_LINE $E18C This routine is called at the beginning of a turn for the
COMMENT_LINE $E18C active player.  It will activate the first 4 mines for
COMMENT_LINE $E18C the level.  The type of mines activated are controlled
COMMENT_LINE $E18C by the array whose pointer is contained in C8C2.
FORCE_NO_SYMBOL $E18E
COMMENT $E190 * Use C8B7 as a loop counter
FORCE_NO_SYMBOL $E190
COMMENT $E192 * Use C8B8 as a delay counter; when it
FORCE_NO_SYMBOL $E192
COMMENT $E194 * = 0, stop displaying the mine field
FORCE_NO_SYMBOL $E194
COMMENT $E196 * level, and activate 1st 4 mine.
FORCE_NO_SYMBOL $E196
FORCE_NO_SYMBOL $E198
COMMENT $E19A * Exit when loop counter = 0
FORCE_NO_SYMBOL $E19C
COMMENT $E19E * Don't activate the mines until the
COMMENT $E1A0 * counter in C8B8 = 0; this allows the
FORCE_NO_SYMBOL $E1A0
COMMENT $E1A2 * mine field level to stay displayed awhile
FORCE_NO_SYMBOL $E1A4
COMMENT $E1A6 * After every 31 times thru waitrecal(),
FORCE_NO_SYMBOL $E1A6
COMMENT $E1A8 * activate another mine.
COMMENT $E1AB * Decrement loop counter
FORCE_NO_SYMBOL $E1AB
FORCE_NO_SYMBOL $E1AD
COMMENT $E1AF * Determine what type mine this should be
COMMENT $E1B1 * Set generation number to 'largest'.
FORCE_NO_SYMBOL $E1B1
FORCE_SYMBOL $E1B3 activate_a_mine
FORCE_SYMBOL $E1B8 process_indirect_jumps
COMMENT_LINE $E1BB Tell user what mine field number this is
FORCE_SYMBOL $E1BB intensity_to_7F
FORCE_SYMBOL $E1BE mine_field
FORCE_SYMBOL $E1C1 MS_print_1_string7F
FORCE_NO_SYMBOL $E1C4
FORCE_SYMBOL $E1C8 mine_field_level_pointers
FORCE_NO_SYMBOL $E1CB
FORCE_SYMBOL $E1D0 move_y_print_string
FORCE_SYMBOL $E1D3 draw_non_dead_mines
FORCE_SYMBOL $E1D6 process_jstick_and_buttons
FORCE_SYMBOL $E1D9 process_bullets
FORCE_SYMBOL $E1DE check_bullets_for_hits
FORCE_SYMBOL $E1E1 display_explosion_pattern
COMMENT_LINE $E1E7 This block of code generates random coordinates
COMMENT_LINE $E1E7 for a single mine.  C8B9 contains a pointer to
COMMENT_LINE $E1E7 the appropriate entry in the mine structure.
COMMENT_LINE $E1E7 Before exiting, this routine will update the
COMMENT_LINE $E1E7 pointer in C8B9 to point to the next entry.
COMMENT $E1E7 * Decrement the mine counter (C8B8)
FORCE_NO_SYMBOL $E1E7
COMMENT $E1E9 * and exit when it equals 0.
COMMENT $E1EB * Inc mine dot counter
FORCE_NO_SYMBOL $E1EB
FORCE_SYMBOL $E1ED get_random_a
COMMENT $E1F0 * Reset the ind jump counter, to
FORCE_NO_SYMBOL $E1F0
COMMENT $E1F2 * generate the next set of mine
FORCE_NO_SYMBOL $E1F2
COMMENT $E1F4 * coordinates.
FORCE_NO_SYMBOL $E1F4
COMMENT $E1F6 * Load u register w/ mine structure ptr
FORCE_NO_SYMBOL $E1F6
COMMENT $E1F8 * Flag that a mine is in this slot
FORCE_NO_SYMBOL $E1F8
COMMENT $E1FA * Get the coordinates of enemy ship
FORCE_NO_SYMBOL $E1FA
FORCE_NO_SYMBOL $E1FC
FORCE_NO_SYMBOL $E1FE
COMMENT $E200 * Save y coordinate in 4th slot
FORCE_NO_SYMBOL $E200
FORCE_NO_SYMBOL $E202
COMMENT $E204 * Save x coordinate in 6th slot
FORCE_NO_SYMBOL $E204
FORCE_NO_SYMBOL $E206
COMMENT $E208 * Generate the final x position for
FORCE_SYMBOL $E208 get_random_a
COMMENT $E20B * this mine.
FORCE_NO_SYMBOL $E20E
FORCE_NO_SYMBOL $E212
FORCE_NO_SYMBOL $E214
FORCE_NO_SYMBOL $E21A
FORCE_NO_SYMBOL $E21E
FORCE_NO_SYMBOL $E220
FORCE_NO_SYMBOL $E226
COMMENT $E229 * Determine what the delta movement
COMMENT $E22B * value will be for this mine: -1 or 1
FORCE_NO_SYMBOL $E22C
FORCE_NO_SYMBOL $E22E
COMMENT $E231 * Start with a scale factor of 0
FORCE_NO_SYMBOL $E231
COMMENT $E233 * Update C8B9 to point to next entry
FORCE_NO_SYMBOL $E233
FORCE_NO_SYMBOL $E236
COMMENT $E23B * Small
COMMENT $E23C * Medium
COMMENT $E23D * Large
COMMENT $E23F * Small
COMMENT $E240 * Medium
COMMENT $E241 * Large
COMMENT $E242 * dumb mine = BCD 100
COMMENT $E244 * magnetic mine = BCD 500
COMMENT $E246 * fireball mine = BCD 325
COMMENT $E248 * magnetic fireball mine = BCD 750
COMMENT $E24C * Small (100)
COMMENT $E24E * Medium (35)
COMMENT $E250 * Large (0)
COMMENT $E254 * Small
COMMENT $E256 * Medium
COMMENT $E258 * Large
COMMENT_LINE $E25A Table of pointers to mine vectors
COMMENT_LINE $E262 This block of code processe the hyperspace and move
COMMENT_LINE $E262 buttons.  It also checks the state of the joystick,
COMMENT_LINE $E262 and updates the command ship rotation value, kept
COMMENT_LINE $E262 in C8D4, if the joystick is not centered.  If the
COMMENT_LINE $E262 joystick is left, then the rotation value is
COMMENT_LINE $E262 incremented; if it is to the right, then the rotation
COMMENT_LINE $E262 value is decremented.  After updating the rotation
COMMENT_LINE $E262 value, the command ship will be redrawn at its
COMMENT_LINE $E262 current position (specified in C8C8-C8C9).
FORCE_NO_SYMBOL $E264
COMMENT $E268 * Skip if cmd ship disabled
FORCE_NO_SYMBOL $E268
COMMENT $E26E * Continue hyperspace, if active
FORCE_NO_SYMBOL $E26E
COMMENT $E274 * Check the hyperspace button (2)
FORCE_NO_SYMBOL $E274
COMMENT $E27A * Check the move button (3)
FORCE_NO_SYMBOL $E27A
COMMENT_LINE $E27E The following block of code takes care of
COMMENT_LINE $E27E generating the new command coordinates,
COMMENT_LINE $E27E because it is moving.  It attempts to make
COMMENT_LINE $E27E all turns into smooth motion.
FORCE_NO_SYMBOL $E27E
FORCE_NO_SYMBOL $E280
FORCE_NO_SYMBOL $E284
FORCE_NO_SYMBOL $E288
FORCE_NO_SYMBOL $E28C
FORCE_NO_SYMBOL $E290
FORCE_NO_SYMBOL $E292
FORCE_NO_SYMBOL $E294
FORCE_NO_SYMBOL $E298
FORCE_NO_SYMBOL $E29A
FORCE_NO_SYMBOL $E29C
FORCE_NO_SYMBOL $E2A0
FORCE_NO_SYMBOL $E2A2
FORCE_NO_SYMBOL $E2A4
FORCE_NO_SYMBOL $E2A8
FORCE_NO_SYMBOL $E2AA
FORCE_NO_SYMBOL $E2AC
COMMENT $E2AE * Flag that a sound should be made
FORCE_NO_SYMBOL $E2AE
FORCE_NO_SYMBOL $E2B0
FORCE_NO_SYMBOL $E2B4
FORCE_NO_SYMBOL $E2B6
FORCE_NO_SYMBOL $E2B8
FORCE_SYMBOL $E2BA calc_rise_run1
FORCE_NO_SYMBOL $E2BD
FORCE_NO_SYMBOL $E2C0
FORCE_NO_SYMBOL $E2C2
FORCE_NO_SYMBOL $E2C6
FORCE_NO_SYMBOL $E2C8
FORCE_NO_SYMBOL $E2CA
COMMENT $E2CC * Generate new rise & run
FORCE_SYMBOL $E2CC calc_rise_run1
FORCE_NO_SYMBOL $E2CF
FORCE_NO_SYMBOL $E2D2
COMMENT $E2D4 * Update cmd ships y coord
FORCE_NO_SYMBOL $E2D4
FORCE_NO_SYMBOL $E2D6
FORCE_NO_SYMBOL $E2D8
FORCE_NO_SYMBOL $E2DA
COMMENT $E2DC * Update cmd ships x coord
FORCE_NO_SYMBOL $E2DC
FORCE_NO_SYMBOL $E2DE
FORCE_NO_SYMBOL $E2E0
FORCE_NO_SYMBOL $E2E2
COMMENT_LINE $E2E4 Check joystick state (in C81B)
FORCE_NO_SYMBOL $E2E4
COMMENT $E2E6 * Joystick is centered
COMMENT $E2EA * Joystick to right
FORCE_NO_SYMBOL $E2EA
COMMENT $E2EE * Joystick to left
FORCE_NO_SYMBOL $E2EE
COMMENT_LINE $E2F4 draw_cmd_ship2() runs the command ships coordinates
COMMENT_LINE $E2F4 thru a rotation transformation, and then draws the
COMMENT_LINE $E2F4 command ship using the transforms coordinates.
COMMENT_LINE $E2F4 draw_cmd_ship1() draws the command ship using the
COMMENT_LINE $E2F4 current transformed ship coordinates.
COMMENT $E2F4 * Rotate the command ship
FORCE_SYMBOL $E2F4 rotate_cmd_ship
FORCE_NO_SYMBOL $E2F7
FORCE_SYMBOL $E2FB intensity_to_5F
FORCE_NO_SYMBOL $E2FE
COMMENT $E300 * Draw the xformed command ship
FORCE_NO_SYMBOL $E300
FORCE_NO_SYMBOL $E304
FORCE_SYMBOL $E307 move_y_draw_x2
COMMENT_LINE $E30C This routine handles the hyperspace request
FORCE_NO_SYMBOL $E30C
FORCE_NO_SYMBOL $E30E
FORCE_SYMBOL $E310 get_random_a
FORCE_NO_SYMBOL $E313
FORCE_NO_SYMBOL $E315
FORCE_NO_SYMBOL $E317
FORCE_NO_SYMBOL $E319
FORCE_NO_SYMBOL $E31B
FORCE_NO_SYMBOL $E31F
FORCE_SYMBOL $E323 MS_get_2_random_nums
FORCE_NO_SYMBOL $E326
COMMENT $E328 * Generate new coordinates
FORCE_NO_SYMBOL $E328
COMMENT $E32A * for the command ship.
FORCE_NO_SYMBOL $E32A
FORCE_NO_SYMBOL $E32C
FORCE_NO_SYMBOL $E330
FORCE_NO_SYMBOL $E332
FORCE_NO_SYMBOL $E334
COMMENT_LINE $E338 This code draws the ever decreasing hyperspace dots
COMMENT_LINE $E338 during an active hyperspace.  The scale factor for
COMMENT_LINE $E338 the hyperspace dots, stored in C8EF, is decremented,
COMMENT_LINE $E338 and when it finally reaches a minimum value, the
COMMENT_LINE $E338 hyperspace is complete.
COMMENT $E338 * See if scale factor has reached
FORCE_NO_SYMBOL $E338
COMMENT $E33A * the limit.
FORCE_NO_SYMBOL $E33A
FORCE_NO_SYMBOL $E33E
COMMENT $E340 * Decrement the scale factor
FORCE_NO_SYMBOL $E340
FORCE_NO_SYMBOL $E342
FORCE_SYMBOL $E345 draw_hyperspace_motion_dots
FORCE_NO_SYMBOL $E34A
FORCE_NO_SYMBOL $E34C
FORCE_SYMBOL $E34E clear_cmd_ship_xformation
COMMENT_LINE $E353 After the player has cleared all but the small mines
COMMENT_LINE $E353 from a layer, the enemy ship will again appear, and
COMMENT_LINE $E353 attempt to reseed the screen.  This code checks to
COMMENT_LINE $E353 see if the enemy ship is visible (C8E7), and if it
COMMENT_LINE $E353 is, then it generates new coordinates for it, and
COMMENT_LINE $E353 then moves it.
FORCE_NO_SYMBOL $E353
COMMENT $E356 * Do only if ship is visible
FORCE_NO_SYMBOL $E35A
FORCE_NO_SYMBOL $E35E
FORCE_NO_SYMBOL $E362
FORCE_NO_SYMBOL $E364
FORCE_NO_SYMBOL $E366
COMMENT $E368 * New y coordinate
FORCE_NO_SYMBOL $E368
FORCE_NO_SYMBOL $E36A
FORCE_NO_SYMBOL $E36C
FORCE_NO_SYMBOL $E36E
COMMENT $E370 * New x coordinate
FORCE_NO_SYMBOL $E370
FORCE_SYMBOL $E374 intensity_to_5F
FORCE_NO_SYMBOL $E377
FORCE_NO_SYMBOL $E379
FORCE_SYMBOL $E37D simple_enemy_ship
COMMENT $E380 * Draw the enemy ship
FORCE_SYMBOL $E380 move_y_draw_x
COMMENT_LINE $E384 This procedure is invoked only through the indirect jump
COMMENT_LINE $E384 pointers.  After only small mines are left, this routine
COMMENT_LINE $E384 will eventually be called.  It will determine which way
COMMENT_LINE $E384 the enemy ship will move, and will also = up another
COMMENT_LINE $E384 indirect jump to the routine which does the actual
COMMENT_LINE $E384 reseeding of the screen.
FORCE_SYMBOL $E384 ind_reseed_screen
COMMENT $E387 * Set up next indirect jump ptr
FORCE_NO_SYMBOL $E387
FORCE_SYMBOL $E389 get_random_a
COMMENT $E38C * Determine where enemy ship will move
FORCE_NO_SYMBOL $E38C
FORCE_NO_SYMBOL $E38F
COMMENT $E395 * Save enemy ships new coordinates
FORCE_NO_SYMBOL $E395
FORCE_NO_SYMBOL $E397
FORCE_NO_SYMBOL $E399
FORCE_NO_SYMBOL $E39B
FORCE_NO_SYMBOL $E39D
COMMENT_LINE $E3A1 This routine is invoked only through the indirect jump
COMMENT_LINE $E3A1 mechanism.  It will continue to be called, until either
COMMENT_LINE $E3A1 the enemy ship is destroyed, or until the screen has
COMMENT_LINE $E3A1 been reseeded.  It will reseed upto 7 new mines.
COMMENT $E3A1 * See if all mines have been seeded
FORCE_NO_SYMBOL $E3A1
FORCE_SYMBOL $E3A5 get_random_a
FORCE_NO_SYMBOL $E3A8
COMMENT $E3AA * Set up the indirect jump counter 4
FORCE_NO_SYMBOL $E3AA
COMMENT $E3AC * the next pass.
FORCE_NO_SYMBOL $E3AC
FORCE_SYMBOL $E3AE get_random_a
FORCE_NO_SYMBOL $E3B1
FORCE_NO_SYMBOL $E3B3
FORCE_SYMBOL $E3B5 get_random_a
FORCE_NO_SYMBOL $E3B8
FORCE_NO_SYMBOL $E3BA
FORCE_NO_SYMBOL $E3BE
COMMENT_LINE $E3C2 Load the b register with the number of mines (28),
COMMENT_LINE $E3C2 and load the u register with the pointer to the
COMMENT_LINE $E3C2 mine structure.  Then look through the mine structure
COMMENT_LINE $E3C2 for an available slot, and fill it with the newly
COMMENT_LINE $E3C2 seeded mine.
FORCE_NO_SYMBOL $E3C2
FORCE_NO_SYMBOL $E3C4
COMMENT $E3C7 * Look for an unused mine
FORCE_NO_SYMBOL $E3C7
FORCE_NO_SYMBOL $E3CB
COMMENT $E3D3 * Incr the # of mines which R dots
FORCE_NO_SYMBOL $E3D3
COMMENT $E3D5 * Decrement the reseed counter
FORCE_NO_SYMBOL $E3D5
FORCE_NO_SYMBOL $E3D7
COMMENT $E3D9 * Set y coordinate for mine
FORCE_NO_SYMBOL $E3D9
FORCE_NO_SYMBOL $E3DB
COMMENT $E3DD * Set x coordinate for mine
FORCE_NO_SYMBOL $E3DD
FORCE_NO_SYMBOL $E3DF
COMMENT $E3E1 * Flag that mine is a stationary dot.
FORCE_NO_SYMBOL $E3E1
COMMENT $E3E3 * See if this is 1st mine activated.
FORCE_NO_SYMBOL $E3E3
FORCE_SYMBOL $E3E7 ind_start_large_mine
COMMENT $E3EA * Set things up to eventually
FORCE_NO_SYMBOL $E3EA
COMMENT $E3EC * activate 1 large mine.
FORCE_SYMBOL $E3EC get_random_a
FORCE_NO_SYMBOL $E3EF
FORCE_NO_SYMBOL $E3F1
FORCE_NO_SYMBOL $E3F3
COMMENT $E3F5 * Flag that 1st mine has been activated
FORCE_NO_SYMBOL $E3F5
FORCE_NO_SYMBOL $E3F7
FORCE_NO_SYMBOL $E3FB
FORCE_NO_SYMBOL $E3FF
FORCE_NO_SYMBOL $E403
FORCE_NO_SYMBOL $E405
FORCE_NO_SYMBOL $E407
COMMENT $E409 * Generate rise & run for mine
FORCE_SYMBOL $E409 calc_rise_run1
FORCE_NO_SYMBOL $E40C
FORCE_NO_SYMBOL $E40F
COMMENT_LINE $E412 This routine is called only thru the indirect jump
COMMENT_LINE $E412 handler.  It is responsible for activating a single
COMMENT_LINE $E412 large mine.  The type of mine is indicated by the
COMMENT_LINE $E412 first entry in the table of mines for this level.
FORCE_NO_SYMBOL $E412
FORCE_NO_SYMBOL $E415
COMMENT $E419 * Determine the type of mine
FORCE_NO_SYMBOL $E419
COMMENT $E41B * Set generation to 'largest'
FORCE_NO_SYMBOL $E41B
FORCE_SYMBOL $E41D activate_a_mine
FORCE_SYMBOL $E420 ind_activate_rangen_mine
FORCE_NO_SYMBOL $E423
COMMENT_LINE $E426 This routine decrements the counter in C8C1, and if
COMMENT_LINE $E426 it equal 0, then it activates a mine with a random
COMMENT_LINE $E426 generation number; else, it sets the indirect counter
COMMENT_LINE $E426 in C89C to -1, and returns.  This routine is called
COMMENT_LINE $E426 only thru the indirect jump handler.
FORCE_NO_SYMBOL $E426
FORCE_NO_SYMBOL $E42A
FORCE_NO_SYMBOL $E42C
FORCE_SYMBOL $E430 get_random_a
FORCE_NO_SYMBOL $E435
FORCE_NO_SYMBOL $E439
FORCE_NO_SYMBOL $E43B
FORCE_NO_SYMBOL $E43E
FORCE_NO_SYMBOL $E442
FORCE_SYMBOL $E444 activate_a_mine
COMMENT_LINE $E448 Some sort of pointer table
COMMENT_LINE $E4B8 This routine is responsible for displaying any active
COMMENT_LINE $E4B8 bullets, and also for firing new bullets, when an
COMMENT_LINE $E4B8 available spot in the bullet structure becomes available.
COMMENT_LINE $E4B8 The maximum number of active bullets is 4.  The 40 byte
COMMENT_LINE $E4B8 bullet structure starts at C90B.  A bullet will remain
COMMENT_LINE $E4B8 'active' for at most $18 passes thru this routine.
COMMENT $E4B8 * Loop counter = 4
FORCE_NO_SYMBOL $E4B8
COMMENT $E4BA * Bullet buffer
FORCE_NO_SYMBOL $E4BA
COMMENT $E4BD * State of fire button (4)
FORCE_NO_SYMBOL $E4BD
FORCE_NO_SYMBOL $E4C0
FORCE_SYMBOL $E4C3 intensity_to_7F
COMMENT $E4C6 * If the current spot is empty, then
FORCE_NO_SYMBOL $E4C6
COMMENT $E4C8 * see if a new bullet should be fired
COMMENT $E4CA * Decrement the cycle counter for the
FORCE_NO_SYMBOL $E4CA
COMMENT $E4CC * and erase bullet if it = 0.
FORCE_NO_SYMBOL $E4CE
COMMENT $E4D0 * y
FORCE_NO_SYMBOL $E4D0
COMMENT $E4D2 * Increment bullet coordinates
FORCE_NO_SYMBOL $E4D2
FORCE_NO_SYMBOL $E4D4
COMMENT $E4D6 * x
FORCE_NO_SYMBOL $E4D6
FORCE_NO_SYMBOL $E4D8
FORCE_NO_SYMBOL $E4DA
COMMENT $E4DC * Draw bullet
FORCE_SYMBOL $E4DC draw_dot7F_ptr_in_y
FORCE_NO_SYMBOL $E4DF
COMMENT $E4E1 * Point to next entry
FORCE_NO_SYMBOL $E4E1
FORCE_NO_SYMBOL $E4E7
COMMENT $E4E9 * Decrement active bullet counter
FORCE_NO_SYMBOL $E4E9
FORCE_NO_SYMBOL $E4EC
FORCE_NO_SYMBOL $E4F1
COMMENT $E4F6 * Check the 'fire' button state
FORCE_NO_SYMBOL $E4F6
COMMENT_LINE $E4FA This code 'fires' a new bullet, and fills the
COMMENT_LINE $E4FA available spot in the bullet structure.
FORCE_NO_SYMBOL $E4FA
COMMENT $E4FC * Flag that a bullet sound should be made
FORCE_NO_SYMBOL $E4FC
FORCE_NO_SYMBOL $E4FF
COMMENT $E501 * Get ships coordinates
FORCE_NO_SYMBOL $E501
FORCE_NO_SYMBOL $E504
FORCE_NO_SYMBOL $E506
FORCE_NO_SYMBOL $E509
COMMENT $E50B * Get ship rise
FORCE_NO_SYMBOL $E50B
FORCE_NO_SYMBOL $E50E
COMMENT $E510 * Get ship run
FORCE_NO_SYMBOL $E510
FORCE_NO_SYMBOL $E513
COMMENT $E515 * # of passes before bullet expires
FORCE_NO_SYMBOL $E515
FORCE_NO_SYMBOL $E517
COMMENT $E519 * Increment active bullet counter
FORCE_NO_SYMBOL $E519
COMMENT_LINE $E51E This procedure processes each mine which has not been
COMMENT_LINE $E51E destroyed.  If the mine is a moving dot, then its position
COMMENT_LINE $E51E is updated; if the mine is a dot, then it is draw in its
COMMENT_LINE $E51E appropriate place; if the mine is active, then the appropriate
COMMENT_LINE $E51E mine is drawn; if it is a fireball, then the fireball is drawn.
COMMENT_LINE $E51E The state of the mine is determined by the first byte in the
COMMENT_LINE $E51E mine structure.  The following values are valid:
COMMENT_LINE $E51E $00 - Mine is dead.
COMMENT_LINE $E51E $01 - Mine is in process of being destroyed.
COMMENT_LINE $E51E $08 - Mine is visible and moving.
COMMENT_LINE $E51E $10 - Mine is visible, but not moving.
COMMENT_LINE $E51E $20 - Mine is just becoming visible.
COMMENT_LINE $E51E $40 - Mine is a stationary dot.
COMMENT_LINE $E51E $80 - Mine is still moving to final resting place.
FORCE_NO_SYMBOL $E51E
COMMENT $E520 * Use C88F as a loop counter
FORCE_NO_SYMBOL $E520
COMMENT $E523 * Put mine pointer into u register
FORCE_NO_SYMBOL $E523
FORCE_NO_SYMBOL $E526
FORCE_NO_SYMBOL $E52A
FORCE_NO_SYMBOL $E52D
FORCE_NO_SYMBOL $E537
FORCE_NO_SYMBOL $E53D
FORCE_NO_SYMBOL $E543
FORCE_NO_SYMBOL $E549
FORCE_NO_SYMBOL $E54F
COMMENT $E551 * See if this is a fireball
FORCE_NO_SYMBOL $E551
COMMENT $E555 * Code below moves visible mine
FORCE_NO_SYMBOL $E555
COMMENT $E559 * Skip below if hyperspace active
FORCE_NO_SYMBOL $E559
COMMENT $E55E * Skip below if cmd ship disabled
FORCE_NO_SYMBOL $E55E
FORCE_SYMBOL $E565 dptoC8
COMMENT $E568 * Draw the mine towards the cmd ship
FORCE_NO_SYMBOL $E568
FORCE_NO_SYMBOL $E56A
FORCE_NO_SYMBOL $E56C
FORCE_NO_SYMBOL $E56E
FORCE_NO_SYMBOL $E570
FORCE_NO_SYMBOL $E573
FORCE_NO_SYMBOL $E575
FORCE_SYMBOL $E577 mine_velocity
FORCE_NO_SYMBOL $E57A
FORCE_NO_SYMBOL $E57E
COMMENT $E580 * Calculate new rise and run values
FORCE_SYMBOL $E580 calc_rise_run1
FORCE_NO_SYMBOL $E583
FORCE_NO_SYMBOL $E586
COMMENT $E58A * This block update mine coordinates
FORCE_NO_SYMBOL $E58A
FORCE_NO_SYMBOL $E58C
FORCE_NO_SYMBOL $E58E
FORCE_NO_SYMBOL $E590
FORCE_NO_SYMBOL $E592
FORCE_NO_SYMBOL $E594
COMMENT_LINE $E596 This block of code draws a mine, using information in
COMMENT_LINE $E596 the mine structure element pointed to by the u register.
FORCE_SYMBOL $E596 intensity_to_5F
FORCE_SYMBOL $E599 mine_vector_ptrs
COMMENT $E59C * byte 1 = mine type
FORCE_NO_SYMBOL $E59C
COMMENT $E59F * Set x = ptr to mine vector list
COMMENT $E5A1 * Set y = mine coordinates.
FORCE_NO_SYMBOL $E5A1
COMMENT $E5A3 * Set b = scale factor.
FORCE_NO_SYMBOL $E5A3
FORCE_SYMBOL $E5A5 move_y_draw_x2
FORCE_SYMBOL $E5A8 update_mine_ptr
COMMENT_LINE $E5AB This routine appears to be processing a fireball.
COMMENT_LINE $E5AB It checks to see if the fireball has reached the
COMMENT_LINE $E5AB edge of the display, and if it has, then the
COMMENT_LINE $E5AB fireball is removed; else, the fireball is drawn
COMMENT_LINE $E5AB on the display.
COMMENT $E5AB * See if the fireball has
FORCE_NO_SYMBOL $E5AB
COMMENT $E5AD * reached the edge of the
FORCE_NO_SYMBOL $E5AD
COMMENT $E5AF * display.
FORCE_NO_SYMBOL $E5B1
FORCE_NO_SYMBOL $E5B3
FORCE_NO_SYMBOL $E5B5
FORCE_NO_SYMBOL $E5B9
FORCE_SYMBOL $E5BB intensity_to_7F
COMMENT $E5BE * Draw the fireball
FORCE_NO_SYMBOL $E5BE
FORCE_NO_SYMBOL $E5C0
FORCE_NO_SYMBOL $E5C3
FORCE_SYMBOL $E5C5 move_y_draw_x2
FORCE_SYMBOL $E5C8 update_mine_ptr
COMMENT $E5CB * Flag that the fireball has
FORCE_NO_SYMBOL $E5CB
COMMENT $E5CD * been removed.
FORCE_NO_SYMBOL $E5CD
FORCE_SYMBOL $E5D0 update_mine_ptr
COMMENT_LINE $E5D3 move_mine_dot () does some sort of processing on the
COMMENT_LINE $E5D3 mine's coordinates, and then draws the mine as
COMMENT_LINE $E5D3 a dot.  I believe that the processing being done
COMMENT_LINE $E5D3 is the movement of the dot in the x direction,
COMMENT_LINE $E5D3 after the mine field has been seeded, but before
COMMENT_LINE $E5D3 the mine dot has reached it's final place.
COMMENT_LINE $E5D3 draw_mine_as_dot() draws a mine as a dot.
COMMENT_LINE $E5D3 For both these routines, the u register must
COMMENT_LINE $E5D3 point to a structure element describing the
COMMENT_LINE $E5D3 mine.
COMMENT $E5D3 * Update the mines x coordinate,
FORCE_NO_SYMBOL $E5D3
COMMENT $E5D5 * and check to see if it has reached
FORCE_NO_SYMBOL $E5D5
COMMENT $E5D8 * its final resting place.
FORCE_NO_SYMBOL $E5D8
FORCE_NO_SYMBOL $E5DA
COMMENT $E5DD * Flag that the mine dot is at its
COMMENT $E5DF * final resting place.
FORCE_NO_SYMBOL $E5DF
FORCE_SYMBOL $E5E1 intensity_to_5F
FORCE_NO_SYMBOL $E5E4
FORCE_SYMBOL $E5E6 draw_dot7F_ptr_in_y
FORCE_SYMBOL $E5E9 update_mine_ptr
COMMENT_LINE $E5EC This procedure is called when a mine first becomes visible.
COMMENT_LINE $E5EC If the mine is not a large mine, then the mine is drawn at
COMMENT_LINE $E5EC full scale factor; otherwise, if the mine is a large mine,
COMMENT_LINE $E5EC then it will be drawn with a steadily increasing scale factor.
COMMENT_LINE $E5EC This gives the effect of the mine 'popping' up.
FORCE_NO_SYMBOL $E5EC
COMMENT $E5EE * See if this is a large mine
FORCE_NO_SYMBOL $E5EE
FORCE_NO_SYMBOL $E5F2
FORCE_NO_SYMBOL $E5F4
FORCE_NO_SYMBOL $E5F9
COMMENT $E5FB * Increment the scale factor
FORCE_NO_SYMBOL $E5FB
COMMENT $E5FF * Flag that mine is full size & visible
FORCE_NO_SYMBOL $E5FF
FORCE_NO_SYMBOL $E601
COMMENT $E604 * Set final scale factor
FORCE_NO_SYMBOL $E604
FORCE_NO_SYMBOL $E606
COMMENT $E608 * Set up a delay
FORCE_NO_SYMBOL $E608
FORCE_NO_SYMBOL $E60B
COMMENT $E60E * Check to see if any more mine dots left
FORCE_NO_SYMBOL $E610
COMMENT $E613 * See if re-seeding already in progress.
COMMENT $E615 * Set up indirect counter for reseeding
FORCE_NO_SYMBOL $E615
COMMENT $E617 * since only small mines are left.
FORCE_NO_SYMBOL $E617
FORCE_SYMBOL $E61A draw_a_visible_mine
COMMENT_LINE $E61D This procedure is used to delay the movement of a mine
COMMENT_LINE $E61D right after it become visible.  After the delay is over,
COMMENT_LINE $E61D the mine will start moving.
COMMENT $E61D * Decrement delay counter
FORCE_NO_SYMBOL $E61D
FORCE_NO_SYMBOL $E622
FORCE_SYMBOL $E624 draw_a_visible_mine
COMMENT_LINE $E627 This procedure processes the activation of 2 new mines
COMMENT_LINE $E627 after a mine has been destroyed.  If the destroyed mine
COMMENT_LINE $E627 was a small mine, or a fireball, then 2 new mines will
COMMENT_LINE $E627 not be activated.  At entry time, the 'a' register must
COMMENT_LINE $E627 contain the type of mine to be started up.
COMMENT $E627 * Flag that this mine is gone
FORCE_NO_SYMBOL $E627
FORCE_NO_SYMBOL $E629
COMMENT $E62B * If this was a fireball, then don't
FORCE_NO_SYMBOL $E62B
COMMENT $E62D * start up 2 new mines.
FORCE_NO_SYMBOL $E62F
COMMENT $E631 * If this was a small mine, then don't
COMMENT $E632 * start up 2 new mines.
FORCE_NO_SYMBOL $E636
COMMENT $E63A * Get the type of mine
FORCE_NO_SYMBOL $E63A
FORCE_SYMBOL $E63C activate_a_mine
FORCE_SYMBOL $E63F activate_a_mine
FORCE_SYMBOL $E644 update_mine_ptr
COMMENT_LINE $E647 This routine is responsible for displaying the explosion
COMMENT_LINE $E647 pattern for all active explosions.  If the command ship
COMMENT_LINE $E647 is sexploding, then it will also switch over to the
COMMENT_LINE $E647 next player (eventually).
FORCE_SYMBOL $E649 dptoD0
FORCE_SYMBOL $E64C intensity_to_7F
COMMENT $E64F * Get pointer to the explosion struct
FORCE_NO_SYMBOL $E64F
FORCE_NO_SYMBOL $E652
COMMENT $E654 * Use C88F as a loop counter
FORCE_NO_SYMBOL $E654
FORCE_NO_SYMBOL $E657
COMMENT $E65D * If the scale factor for the explosion
FORCE_NO_SYMBOL $E65D
COMMENT $E65F * has not surpassed the max value, then
FORCE_NO_SYMBOL $E65F
COMMENT $E661 * increment it.
FORCE_NO_SYMBOL $E663
FORCE_NO_SYMBOL $E665
FORCE_NO_SYMBOL $E667
COMMENT $E66A * Draw the explosion pattern
FORCE_SYMBOL $E66A explosion
FORCE_SYMBOL $E66D move_y_draw_x
COMMENT $E670 * This is a cmd ship explosion if bit
COMMENT $E671 * $80 is set.
COMMENT $E675 * Stop displaying explosion when C8F7
FORCE_NO_SYMBOL $E675
COMMENT $E678 * reaches zero.
FORCE_NO_SYMBOL $E67C
COMMENT $E67F * Every other pass through the loop,
FORCE_NO_SYMBOL $E67F
COMMENT $E681 * increment the scale factor used to
COMMENT $E683 * draw the destroyed command ship.
FORCE_NO_SYMBOL $E683
COMMENT $E686 * Draw the cmd ship in pieces.
FORCE_NO_SYMBOL $E686
FORCE_NO_SYMBOL $E689
FORCE_SYMBOL $E68D cmd_ship_pt1
FORCE_SYMBOL $E690 draw_cmd_ship_fragment
FORCE_NO_SYMBOL $E693
FORCE_SYMBOL $E697 cmd_ship_pt2
FORCE_SYMBOL $E69A draw_cmd_ship_fragment
FORCE_NO_SYMBOL $E69D
FORCE_SYMBOL $E6A1 cmd_ship_pt3
FORCE_SYMBOL $E6A4 draw_cmd_ship_fragment
FORCE_NO_SYMBOL $E6A7
FORCE_SYMBOL $E6AB cmd_ship_pt4
FORCE_SYMBOL $E6AE draw_cmd_ship_fragment
COMMENT_LINE $E6B3 This routine is called after a ship has been destroyed.
COMMENT_LINE $E6B3 The number of ships for the active player, kept in C8D9,
COMMENT_LINE $E6B3 will be decremented.  If more than one player is playing,
COMMENT_LINE $E6B3 then save the active players ship count in a memory
COMMENT_LINE $E6B3 location (C8DA for player 1, and C8DB for player 2),
COMMENT_LINE $E6B3 and then determine who's turn it now is.
COMMENT $E6B3 * Decrement the number of ships
FORCE_NO_SYMBOL $E6B3
FORCE_NO_SYMBOL $E6B6
FORCE_NO_SYMBOL $E6B9
COMMENT $E6BC * If more than 1 player is playing,
FORCE_NO_SYMBOL $E6BC
COMMENT $E6BF * then save the active players ship
COMMENT $E6C1 * ship count in RAM.
FORCE_NO_SYMBOL $E6C1
FORCE_NO_SYMBOL $E6C5
FORCE_NO_SYMBOL $E6C8
COMMENT $E6CD * See who's turn it is.  Skip a player
FORCE_NO_SYMBOL $E6CD
COMMENT $E6D0 * if he has no more ships.
FORCE_NO_SYMBOL $E6D2
COMMENT $E6D7 * Increment active player indicator
FORCE_NO_SYMBOL $E6D7
FORCE_NO_SYMBOL $E6DA
FORCE_NO_SYMBOL $E6DC
FORCE_NO_SYMBOL $E6DE
COMMENT $E6E1 * Load the ship count for new player
FORCE_NO_SYMBOL $E6E2
FORCE_NO_SYMBOL $E6E7
COMMENT_LINE $E6EC This routine checks to see if the active player has any ships
COMMENT_LINE $E6EC left, after the command ship has exploded.
FORCE_NO_SYMBOL $E6EC
FORCE_NO_SYMBOL $E6F1
COMMENT $E6F3 * Set C8BE when no ships left
FORCE_NO_SYMBOL $E6F3
COMMENT_LINE $E6F8 This routine checks to see if the explosion has expired.
COMMENT_LINE $E6F8 An explosion expires when its scale factor surpasses a
COMMENT_LINE $E6F8 preset maximum value.
COMMENT $E6F8 * See if scale factor has reached
FORCE_NO_SYMBOL $E6F8
COMMENT $E6FA * the maximum value allowed.
FORCE_NO_SYMBOL $E6FA
FORCE_NO_SYMBOL $E6FE
COMMENT $E700 * Flag completion of cmd ship explosion
FORCE_NO_SYMBOL $E700
FORCE_NO_SYMBOL $E703
FORCE_NO_SYMBOL $E705
FORCE_SYMBOL $E70C make_misc_sounds
COMMENT_LINE $E711 Draw the tiny ships in lower righthand corner
FORCE_SYMBOL $E713 dptoD0
FORCE_SYMBOL $E716 intensity_to_5F
FORCE_NO_SYMBOL $E719
COMMENT $E71C * Position for first ship
FORCE_NO_SYMBOL $E71C
COMMENT $E71F * Don't bother, if the active
FORCE_NO_SYMBOL $E71F
COMMENT $E722 * player has no ships left.
FORCE_NO_SYMBOL $E724
FORCE_NO_SYMBOL $E727
COMMENT $E72A * Exit when all ships drawn
FORCE_NO_SYMBOL $E72C
COMMENT $E72F * Increment x coordinate
FORCE_NO_SYMBOL $E72F
FORCE_NO_SYMBOL $E731
FORCE_NO_SYMBOL $E734
FORCE_NO_SYMBOL $E736
FORCE_SYMBOL $E73A command_ship
COMMENT $E73D * Draw the tiny command ship
FORCE_SYMBOL $E73D move_y_draw_x
COMMENT_LINE $E742 This routine rotates the fireball vector list.  Also,
COMMENT_LINE $E742 it checks to see whether this level has been cleared.
FORCE_NO_SYMBOL $E744
FORCE_NO_SYMBOL $E746
FORCE_SYMBOL $E74B fireball
FORCE_NO_SYMBOL $E74E
FORCE_SYMBOL $E751 rotate_vector_list1
COMMENT_LINE $E754 This block of code determines whether or not the main
COMMENT_LINE $E754 loop should be exited.  If the cmd ship is disabled, or
COMMENT_LINE $E754 if the player has cleared the level, then the main loop
COMMENT_LINE $E754 will be exited (this is flagged by clearing the carry bit.
COMMENT $E754 * See if cmd ship is being exploded
FORCE_NO_SYMBOL $E754
COMMENT $E758 * See if cmd ship is disabled
FORCE_NO_SYMBOL $E758
COMMENT $E75C * check # of active mines
FORCE_NO_SYMBOL $E75C
COMMENT $E760 * check # of dot mines
FORCE_NO_SYMBOL $E760
COMMENT $E764 * Says 'exit main loop'
FORCE_NO_SYMBOL $E764
COMMENT $E767 * Says 'do not exit main loop'
FORCE_NO_SYMBOL $E767
COMMENT_LINE $E76A This routine is responsible for drawing a single fragment
COMMENT_LINE $E76A of the exploding command ship.  At entry, 'a' = scale factor,
COMMENT_LINE $E76A 'y' = pen position, and 'x' = ptr to vector list.
COMMENT $E76C * Move pen to cmd ships location
FORCE_NO_SYMBOL $E76C
FORCE_SYMBOL $E76F move_pen7F_no_inc
FORCE_NO_SYMBOL $E772
COMMENT $E774 * Set scale factor = a register
FORCE_NO_SYMBOL $E774
COMMENT $E778 * Move pen to position in y register
FORCE_SYMBOL $E778 move_pen_d
FORCE_NO_SYMBOL $E77B
FORCE_NO_SYMBOL $E77D
COMMENT $E77F * Draw vector list pointed to by x reg
FORCE_SYMBOL $E77F drawl1b
COMMENT_LINE $E784 This routine is called after a bullet has hit something,
COMMENT_LINE $E784 or the command ship collides with something.  It will
COMMENT_LINE $E784 search through the explosion structure, looking for an
COMMENT_LINE $E784 empty slot.  When it finds one, it will fill it with the
COMMENT_LINE $E784 information passed in.  At entry time, 'a' = type of explosion
COMMENT_LINE $E784 and the scale factor to use, 'b' = the max scale factor to
COMMENT_LINE $E784 be used, and 'x' contains the position for the explosion.
COMMENT_LINE $E784 If the hi bit of 'a' is set, then that flags that it is the
COMMENT_LINE $E784 command ship exploding; the lower 7 bits are used to specify
COMMENT_LINE $E784 the initial scale factor.
FORCE_NO_SYMBOL $E786
FORCE_NO_SYMBOL $E789
COMMENT $E78B * Find an empty spot in structure
FORCE_NO_SYMBOL $E78B
FORCE_NO_SYMBOL $E78F
COMMENT $E796 * Save the explosion type
FORCE_NO_SYMBOL $E796
FORCE_NO_SYMBOL $E798
COMMENT $E79B * See if this is a cmd ship explosion
FORCE_NO_SYMBOL $E79B
COMMENT $E79F * Flag that cmd ship is disabled
FORCE_NO_SYMBOL $E79F
FORCE_NO_SYMBOL $E7A1
FORCE_NO_SYMBOL $E7A3
COMMENT $E7A5 * Save starting scale factor
FORCE_NO_SYMBOL $E7A5
FORCE_NO_SYMBOL $E7A7
FORCE_NO_SYMBOL $E7A9
FORCE_NO_SYMBOL $E7AB
COMMENT $E7AD * Save maximum scale factor
FORCE_NO_SYMBOL $E7AD
COMMENT $E7AF * Flag that cmd ship is exploding
FORCE_NO_SYMBOL $E7AF
COMMENT $E7B1 * Flag that explosion sound should be made
FORCE_NO_SYMBOL $E7B1
COMMENT_LINE $E7B5 This routine is responsible for calculating a rise and run
COMMENT_LINE $E7B5 for an object whose angle of travel is in the 'b' register,
COMMENT_LINE $E7B5 and whose velocity is in the 'a' register.
COMMENT_LINE $E7B5 The rise is returned in the 'y' register, and the run is
COMMENT_LINE $E7B5 returned in the 'x' register.
COMMENT $E7B7 rotate_1_coordinate;
FORCE_SYMBOL $E7B7 convert_angle_to_rise_run
FORCE_NO_SYMBOL $E7BA
FORCE_NO_SYMBOL $E7C3
FORCE_NO_SYMBOL $E7C5
FORCE_NO_SYMBOL $E7CE
COMMENT_LINE $E7D2 This routine also calculates some sort of rise & run pair.
COMMENT_LINE $E7D2 The same parameters are expected at entry time, and the
COMMENT_LINE $E7D2 values are returned in the same registers.
FORCE_NO_SYMBOL $E7DA
FORCE_NO_SYMBOL $E7E0
COMMENT_LINE $E7E4 This routine is called each time a new mine level is
COMMENT_LINE $E7E4 started.  It initializes everything necessary.
FORCE_NO_SYMBOL $E7E4
FORCE_SYMBOL $E7E8 clear_sound_chip
FORCE_NO_SYMBOL $E7EB
COMMENT $E7EF * Clear all 4 indirect jump counters
FORCE_NO_SYMBOL $E7EF
FORCE_NO_SYMBOL $E7F1
FORCE_NO_SYMBOL $E7F3
FORCE_NO_SYMBOL $E7F5
COMMENT $E7F7 * Clear C90B - CB71
FORCE_NO_SYMBOL $E7F7
FORCE_NO_SYMBOL $E7FC
FORCE_NO_SYMBOL $E801
FORCE_NO_SYMBOL $E804
FORCE_NO_SYMBOL $E806
FORCE_NO_SYMBOL $E808
FORCE_NO_SYMBOL $E80A
FORCE_NO_SYMBOL $E80C
COMMENT $E80E * Clear cmd ship disabled flag
FORCE_NO_SYMBOL $E80E
COMMENT $E810 * Clear 'no more ships' flag
FORCE_NO_SYMBOL $E810
COMMENT $E812 * Clear active bullet counter
FORCE_NO_SYMBOL $E812
FORCE_NO_SYMBOL $E814
COMMENT $E816 * Clear cmd ship exploding flag
FORCE_NO_SYMBOL $E816
COMMENT $E818 * Clear destroyed cmd ship scale factor
FORCE_NO_SYMBOL $E818
FORCE_NO_SYMBOL $E81A
COMMENT $E81C * Init cmd ship exploding loop counter
FORCE_NO_SYMBOL $E81C
COMMENT $E81E * Clear # of dot mines
FORCE_NO_SYMBOL $E81E
COMMENT $E820 * Clear mine activated during reseeding flag
FORCE_NO_SYMBOL $E820
FORCE_NO_SYMBOL $E822
COMMENT $E825 * Set end of game loop counter
FORCE_NO_SYMBOL $E825
FORCE_NO_SYMBOL $E827
COMMENT $E829 * Init # of mines to be reseeded
FORCE_NO_SYMBOL $E829
FORCE_SYMBOL $E82B ind_init_screen_reseeding
COMMENT $E82E * Init indirect jump location for reseeding
FORCE_NO_SYMBOL $E82E
FORCE_NO_SYMBOL $E830
COMMENT $E833 * Clear the command ship's
FORCE_NO_SYMBOL $E833
COMMENT $E835 * position indicators.
FORCE_NO_SYMBOL $E835
FORCE_NO_SYMBOL $E837
COMMENT $E83A * Clear rotation counter
FORCE_NO_SYMBOL $E83A
FORCE_NO_SYMBOL $E83C
FORCE_NO_SYMBOL $E83E
COMMENT $E840 * Clear cmd ships velocity
FORCE_NO_SYMBOL $E840
FORCE_NO_SYMBOL $E842
FORCE_NO_SYMBOL $E844
FORCE_NO_SYMBOL $E846
FORCE_NO_SYMBOL $E848
FORCE_NO_SYMBOL $E84A
COMMENT_LINE $E84C This block of code takes the vector list describing the
COMMENT_LINE $E84C command ship, and applies a rotation transformation to
COMMENT_LINE $E84C them.  The current rotation value is in C8D4, and the
COMMENT_LINE $E84C transformed vector list is stored in the buffer
COMMENT_LINE $E84C starting at CB89.
FORCE_NO_SYMBOL $E84C
FORCE_SYMBOL $E84E command_ship
FORCE_NO_SYMBOL $E851
FORCE_SYMBOL $E854 rotate_vector_list1
FORCE_NO_SYMBOL $E857
FORCE_NO_SYMBOL $E859
FORCE_SYMBOL $E85B calc_rise_run2
FORCE_NO_SYMBOL $E85E
FORCE_NO_SYMBOL $E862
COMMENT_LINE $E866 This routine is called after the active player clears
COMMENT_LINE $E866 a mine field level.  This routine will slowly bring the
COMMENT_LINE $E866 command ship back to the center of the screen.  As this
COMMENT_LINE $E866 is being done, a series of dots will be drawn to simulate
COMMENT_LINE $E866 motion.
FORCE_SYMBOL $E86A dptoD0
FORCE_SYMBOL $E86D clear_sound_chip
FORCE_NO_SYMBOL $E872
COMMENT $E874 * Use C88F as a loop counter
FORCE_NO_SYMBOL $E874
FORCE_NO_SYMBOL $E876
COMMENT $E878 * Modify the y coordinate for the
COMMENT $E87A * command ship, in an effort to
COMMENT $E87C * force it back to 0.
FORCE_NO_SYMBOL $E880
FORCE_NO_SYMBOL $E882
COMMENT $E884 * Modify the x coordinate for the
FORCE_NO_SYMBOL $E884
COMMENT $E886 * command ship, in an effort to
COMMENT $E888 * force it back to 0.
FORCE_NO_SYMBOL $E88E
FORCE_NO_SYMBOL $E890
COMMENT $E892 * Modify the rotation value for the
FORCE_NO_SYMBOL $E892
COMMENT $E894 * command ship, in an effort to
COMMENT $E896 * force it back to 0.
FORCE_NO_SYMBOL $E896
FORCE_NO_SYMBOL $E89E
FORCE_NO_SYMBOL $E8A0
COMMENT $E8A2 * This loop, repeated 8 times (once
FORCE_SYMBOL $E8A2 PE2F2
COMMENT $E8A5 * for each scale factor in the array)
FORCE_NO_SYMBOL $E8A5
COMMENT $E8A8 * increments each of the scale factors
FORCE_NO_SYMBOL $E8A8
COMMENT $E8AA * for the motion dots, by 3.
FORCE_NO_SYMBOL $E8AA
FORCE_NO_SYMBOL $E8AC
FORCE_SYMBOL $E8B5 dptoD0
FORCE_SYMBOL $E8B8 display_both_scores
COMMENT $E8BC * " "
FORCE_NO_SYMBOL $E8BC
FORCE_SYMBOL $E8BE simulate_motion1
FORCE_SYMBOL $E8C1 modify_motion_scales
COMMENT_LINE $E8C6 Repeat the above until the ship is centered.
FORCE_NO_SYMBOL $E8C6
FORCE_NO_SYMBOL $E8CC
FORCE_NO_SYMBOL $E8D2
FORCE_NO_SYMBOL $E8D8
FORCE_SYMBOL $E8DE init_RAM_for_new_level
COMMENT_LINE $E8E3 This routine initializes the two arrays
COMMENT_LINE $E8E3 (CB71 and CB81) which contain the data
COMMENT_LINE $E8E3 needed to produce the motion dots (the
COMMENT_LINE $E8E3 dots displayed as the ship moves from
COMMENT_LINE $E8E3 one level to the next).  The 8 entries
COMMENT_LINE $E8E3 in CB71 are pointers to the 8 sets of
COMMENT_LINE $E8E3 required dots.  The 8 entries in CB81
COMMENT_LINE $E8E3 are the corresponding scale factors.
FORCE_SYMBOL $E8E3 motion_dots
FORCE_NO_SYMBOL $E8E6
FORCE_NO_SYMBOL $E8EA
FORCE_NO_SYMBOL $E8ED
FORCE_NO_SYMBOL $E8EF
FORCE_NO_SYMBOL $E8F3
FORCE_NO_SYMBOL $E8F7
COMMENT_LINE $E8FD modify_motion_scales() increments each of the 8 motion
COMMENT_LINE $E8FD scale factors, and then draws the new motion dots.
COMMENT_LINE $E8FD simulate_motion1() and simulate_motion2() both
COMMENT_LINE $E8FD draw the current motion dots.  The motion dots will
COMMENT_LINE $E8FD only be drawn if the scale factor is > the value specified
COMMENT_LINE $E8FD in the 'a' register, and if (scale - 'b') > 0.
FORCE_NO_SYMBOL $E8FF
FORCE_NO_SYMBOL $E902
COMMENT $E904 * Increment each of the scale factors
FORCE_NO_SYMBOL $E90D
COMMENT $E911 * Use 'a' as a loop counter
FORCE_NO_SYMBOL $E911
FORCE_NO_SYMBOL $E915
FORCE_SYMBOL $E919 reset0ref
FORCE_SYMBOL $E920 reset0ref
COMMENT $E923 * Use C823 to hold # of dots
FORCE_NO_SYMBOL $E923
COMMENT $E925 * to be drawn (4).
FORCE_NO_SYMBOL $E925
FORCE_NO_SYMBOL $E928
FORCE_NO_SYMBOL $E92B
FORCE_NO_SYMBOL $E930
COMMENT $E932 * Make sure scale factor is
FORCE_NO_SYMBOL $E932
COMMENT $E934 * within the specified range
FORCE_NO_SYMBOL $E936
COMMENT $E93A * Set the hardware scale factor
FORCE_NO_SYMBOL $E93A
COMMENT $E93C * Draw the dot list
FORCE_NO_SYMBOL $E93C
COMMENT $E93F * Convert loop cntr to a word offset
FORCE_SYMBOL $E942 intensity_to_7F
FORCE_SYMBOL $E945 dot_list
COMMENT_LINE $E94A This routine is responsible for drawing the hyperspace dot
COMMENT_LINE $E94A during a hyperspace.  It draws the 8 sets of motion dots,
COMMENT_LINE $E94A using a decreasing scale factor.  At entry, the 'b' register
COMMENT_LINE $E94A contains the minimum scale factor to be used.
FORCE_NO_SYMBOL $E94C
COMMENT $E950 * Push the loop cntr on the stack
FORCE_NO_SYMBOL $E950
FORCE_NO_SYMBOL $E954
FORCE_SYMBOL $E958 reset0ref
FORCE_SYMBOL $E95F reset0ref
FORCE_NO_SYMBOL $E962
COMMENT $E964 * Use C823 to hold # of dots to draw
FORCE_NO_SYMBOL $E964
FORCE_NO_SYMBOL $E967
FORCE_SYMBOL $E96A move_pen7F_no_inc
FORCE_NO_SYMBOL $E96D
COMMENT $E971 * Calculate the scale factor
FORCE_NO_SYMBOL $E971
FORCE_NO_SYMBOL $E975
COMMENT $E977 * Set scale factor
FORCE_NO_SYMBOL $E977
FORCE_NO_SYMBOL $E979
COMMENT $E97C * Draw the appropriate set of dots
FORCE_NO_SYMBOL $E97C
FORCE_SYMBOL $E982 intensity_to_7F
FORCE_SYMBOL $E985 dot_list
COMMENT_LINE $E98A Generate 2 random numbers (1 byte each), and return
COMMENT_LINE $E98A them in a and b.  The range for the two numbers is:
COMMENT_LINE $E98A $80 <= first #  <= $7F     (a register)
COMMENT_LINE $E98A $A0 <= second # <= $60     (b register)
FORCE_SYMBOL $E98C get_random_a
FORCE_NO_SYMBOL $E98F
FORCE_SYMBOL $E991 get_random_a
FORCE_NO_SYMBOL $E994
FORCE_NO_SYMBOL $E998
FORCE_NO_SYMBOL $E99C
COMMENT_LINE $E9A1 This routine randomly activates a single mine.
COMMENT_LINE $E9A1 At entry, the 'a' register must contain the
COMMENT_LINE $E9A1 type of mine to be activated, while the 'b'
COMMENT_LINE $E9A1 register must contain the generation number
COMMENT_LINE $E9A1 for the mine (i.e. large, medium, or small).
COMMENT $E9A3 * Check C8ED to see if there are any
FORCE_NO_SYMBOL $E9A3
COMMENT $E9A5 * dot mines; if not, then return.
FORCE_NO_SYMBOL $E9A9
COMMENT $E9AB * Generate a random index into the
FORCE_SYMBOL $E9AB get_random_a
COMMENT $E9AE * mine array.
FORCE_NO_SYMBOL $E9AE
FORCE_NO_SYMBOL $E9B0
FORCE_NO_SYMBOL $E9B2
FORCE_NO_SYMBOL $E9B6
COMMENT $E9BA * Multiple offset by element size
FORCE_NO_SYMBOL $E9BA
FORCE_NO_SYMBOL $E9BD
COMMENT $E9C2 * Check to see if this mine is already
FORCE_NO_SYMBOL $E9C2
COMMENT $E9C4 * being used.  If it is, then check
FORCE_NO_SYMBOL $E9C4
COMMENT $E9C6 * the next mine in the structure; else
COMMENT $E9C8 * use this mine.
FORCE_NO_SYMBOL $E9C8
FORCE_NO_SYMBOL $E9CA
FORCE_NO_SYMBOL $E9CC
FORCE_NO_SYMBOL $E9D0
COMMENT $E9D5 * Store the mine type
FORCE_NO_SYMBOL $E9D5
FORCE_NO_SYMBOL $E9D7
FORCE_SYMBOL $E9D9 mine_values
COMMENT $E9E0 * Store mine's value in C889
FORCE_NO_SYMBOL $E9E0
FORCE_NO_SYMBOL $E9E3
FORCE_NO_SYMBOL $E9E5
FORCE_SYMBOL $E9E7 mine_velocity
COMMENT $E9EA * Save mine's velocity
FORCE_NO_SYMBOL $E9EA
FORCE_NO_SYMBOL $E9EE
FORCE_SYMBOL $E9F0 final_mine_scale_factor
COMMENT $E9F5 * Save mine's max scale factor
FORCE_NO_SYMBOL $E9F5
COMMENT $E9F8 * Save mine's generation number
FORCE_NO_SYMBOL $E9F8
FORCE_SYMBOL $E9FA mine_sizes
COMMENT $EA01 * Save mine's size
FORCE_NO_SYMBOL $EA01
FORCE_SYMBOL $EA04 extra_mine_value
COMMENT $EA0A * Get any extra value for mine's size
FORCE_NO_SYMBOL $EA0A
FORCE_NO_SYMBOL $EA0D
COMMENT $EA11 * Flag that a sound should be made
FORCE_NO_SYMBOL $EA11
FORCE_NO_SYMBOL $EA13
FORCE_NO_SYMBOL $EA15
COMMENT $EA18 * Generate lo byte of score
FORCE_NO_SYMBOL $EA18
FORCE_NO_SYMBOL $EA1A
FORCE_NO_SYMBOL $EA1C
COMMENT $EA1F * Generate hi byte of score
FORCE_NO_SYMBOL $EA1F
FORCE_NO_SYMBOL $EA21
FORCE_SYMBOL $EA23 MS_random_num_4_to_3C
FORCE_SYMBOL $EA26 calc_rise_run1
COMMENT $EA29 * Save the rise
FORCE_NO_SYMBOL $EA29
COMMENT $EA2C * Save the run
FORCE_NO_SYMBOL $EA2C
COMMENT $EA2E * Increment 'active mine' counter
FORCE_NO_SYMBOL $EA2E
FORCE_NO_SYMBOL $EA30
FORCE_NO_SYMBOL $EA34
FORCE_NO_SYMBOL $EA36
FORCE_NO_SYMBOL $EA38
FORCE_NO_SYMBOL $EA3A
COMMENT_LINE $EA3E Generate a random number between 4 and $3C.  The
COMMENT_LINE $EA3E result is returned in the b register.
FORCE_SYMBOL $EA40 get_random_a
COMMENT $EA45 * "0"
FORCE_NO_SYMBOL $EA45
FORCE_NO_SYMBOL $EA47
FORCE_NO_SYMBOL $EA49
FORCE_NO_SYMBOL $EA4B
FORCE_NO_SYMBOL $EA4F
FORCE_NO_SYMBOL $EA51
FORCE_NO_SYMBOL $EA55
FORCE_NO_SYMBOL $EA57
FORCE_NO_SYMBOL $EA59
COMMENT_LINE $EA5D Force the scale factor to $7F, then
COMMENT_LINE $EA5D draw a dot at the position contained
COMMENT_LINE $EA5D in the y register.
FORCE_NO_SYMBOL $EA5F
FORCE_NO_SYMBOL $EA61
FORCE_SYMBOL $EA65 dot_at_d
FORCE_SYMBOL $EA68 reset0ref
COMMENT_LINE $EA6D Force the scale factor to $7F, then draw a
COMMENT_LINE $EA6D dot at the position pointed to by the y
COMMENT_LINE $EA6D register (y coord = (0,y), x coord = (2,y)).
FORCE_NO_SYMBOL $EA6F
FORCE_NO_SYMBOL $EA71
FORCE_NO_SYMBOL $EA73
FORCE_NO_SYMBOL $EA75
FORCE_SYMBOL $EA77 dot_at_d
FORCE_SYMBOL $EA7A reset0ref
COMMENT_LINE $EA7F Move the pen to the position specified
COMMENT_LINE $EA7F in the y register, then draw the vector
COMMENT_LINE $EA7F list pointed to by the x register; the
COMMENT_LINE $EA7F scale factor is in the b register.
FORCE_SYMBOL $EA83 move_pen7F_to_d
FORCE_NO_SYMBOL $EA86
FORCE_SYMBOL $EA88 drawl1b
COMMENT_LINE $EA8D Move the pen to the position specified in the y
COMMENT_LINE $EA8D register, and draw the list of vectors pointed to
COMMENT_LINE $EA8D by the x register; the scale factor to be used is
COMMENT_LINE $EA8D in the b register. (y coord = (0,y), x coord = (x,y))
FORCE_SYMBOL $EA91 move_pen7F_no_inc
FORCE_NO_SYMBOL $EA94
FORCE_NO_SYMBOL $EA96
FORCE_SYMBOL $EA98 drawl1b
COMMENT_LINE $EA9D Force the scale factor to $7F, then print
COMMENT_LINE $EA9D a single string (upto a $80).  The pointer
COMMENT_LINE $EA9D to the string block is contained in the
COMMENT_LINE $EA9D u register.
FORCE_NO_SYMBOL $EA9F
FORCE_NO_SYMBOL $EAA1
FORCE_SYMBOL $EAA3 print_1_string
COMMENT_LINE $EAA8 Move the pen to the position specified in the
COMMENT_LINE $EAA8 y register, then print a string.  The pointer
COMMENT_LINE $EAA8 to the string (not a string block) is in the
COMMENT_LINE $EAA8 u register.
FORCE_SYMBOL $EAAC move_pen7F_to_d
FORCE_SYMBOL $EAAF display_string
COMMENT_LINE $EAB4 Use the value in C89B (the active player) to
COMMENT_LINE $EAB4 determine which players score to display,
COMMENT_LINE $EAB4 and then display the score string.
FORCE_SYMBOL $EAB4 intensity_to_7F
FORCE_NO_SYMBOL $EAB7
COMMENT $EABA * Specify height and width
FORCE_NO_SYMBOL $EABA
FORCE_NO_SYMBOL $EABD
FORCE_SYMBOL $EAC0 score_string_positions
COMMENT $EAC4 * Load string position into y
FORCE_SYMBOL $EAC7 score_string_pointers
COMMENT $EACA * Load score string into u
COMMENT_LINE $EACF Display the score for both players
FORCE_SYMBOL $EACF intensity_to_7F
FORCE_NO_SYMBOL $EAD2
COMMENT $EAD5 * Specify height and width
FORCE_NO_SYMBOL $EAD5
COMMENT $EAD8 * Load y with y&x positions
FORCE_NO_SYMBOL $EAD8
COMMENT $EADC * Load u with player 1 score
FORCE_NO_SYMBOL $EADC
COMMENT $EAE1 * See if we need to display player 2 score
FORCE_NO_SYMBOL $EAE1
COMMENT $EAE6 * Load y with y&x positions
FORCE_NO_SYMBOL $EAE6
COMMENT $EAEA * Load u with player 2 score
FORCE_NO_SYMBOL $EAEA
COMMENT_LINE $EAF0 This routine is responsible for reading the current
COMMENT_LINE $EAF0 states of the joystick and buttons.  Next, it will
COMMENT_LINE $EAF0 check each of the four indirect jump counters, and
COMMENT_LINE $EAF0 if any of them equal 0 after being decremented, then
COMMENT_LINE $EAF0 the appropriate indirect handling routine will be
COMMENT_LINE $EAF0 called.  The four indirect counters, and their corresponding
COMMENT_LINE $EAF0 handler routines are shown below:
COMMENT_LINE $EAF0 counter          handler
COMMENT_LINE $EAF0 -------          -------
COMMENT_LINE $EAF0 C89C           C89D-C89E
COMMENT_LINE $EAF0 C89F           C8A0-C8A1
COMMENT_LINE $EAF0 C8A2           C8A3-C8A4
COMMENT_LINE $EAF0 C8A5           C8A6-C8A7
FORCE_SYMBOL $EAF0 waitrecal
FORCE_NO_SYMBOL $EAF5
FORCE_SYMBOL $EAF8 display_active_players_score
COMMENT_LINE $EAFB Set mask (in C880) and read the switches
FORCE_NO_SYMBOL $EAFB
FORCE_SYMBOL $EAFE read_switches
COMMENT_LINE $EB01 Set enable flags (in C881) and read joystick
FORCE_NO_SYMBOL $EB01
FORCE_NO_SYMBOL $EB04
FORCE_NO_SYMBOL $EB07
FORCE_SYMBOL $EB0A read_jstick
FORCE_NO_SYMBOL $EB0D
FORCE_NO_SYMBOL $EB11
FORCE_NO_SYMBOL $EB15
COMMENT $EB19 * (UNKNOWN JUMP)
FORCE_NO_SYMBOL $EB19
FORCE_NO_SYMBOL $EB1D
FORCE_NO_SYMBOL $EB21
COMMENT $EB25 * (UNKNOWN JUMP)
FORCE_NO_SYMBOL $EB25
FORCE_NO_SYMBOL $EB29
FORCE_NO_SYMBOL $EB2D
COMMENT $EB31 * (UNKNOWN JUMP)
FORCE_NO_SYMBOL $EB31
FORCE_NO_SYMBOL $EB35
FORCE_NO_SYMBOL $EB39
COMMENT $EB3D * (UNKNOWN JUMP)
FORCE_NO_SYMBOL $EB3D
COMMENT_LINE $EB43 This routine check to see if any of the
COMMENT_LINE $EB43 bullets have hit a mine or a fireball or
COMMENT_LINE $EB43 the enemy ship.  If something is hit, then
COMMENT_LINE $EB43 the active player's score will be modified.
COMMENT $EB43 * Don't bother checking if there are
FORCE_NO_SYMBOL $EB43
COMMENT $EB45 * no active bullets. (C8EA = 0)
FORCE_NO_SYMBOL $EB47
FORCE_NO_SYMBOL $EB4B
COMMENT $EB4D * Use C88F as a loop counter
FORCE_NO_SYMBOL $EB4D
COMMENT $EB4F * See if this bullet is active
FORCE_NO_SYMBOL $EB4F
COMMENT $EB53 * Increment ptr to next bullet
FORCE_NO_SYMBOL $EB53
FORCE_NO_SYMBOL $EB55
COMMENT $EB5A * Only check for a hit on the enemy
FORCE_NO_SYMBOL $EB5A
COMMENT $EB5C * ship if it is showing (C8E7 > 0).
FORCE_NO_SYMBOL $EB60
FORCE_NO_SYMBOL $EB62
COMMENT $EB64 * bullets position
COMMENT $EB66 * height/2 and width/2 of enemy ship
FORCE_NO_SYMBOL $EB66
COMMENT $EB69 * position of enemy ship
FORCE_NO_SYMBOL $EB69
COMMENT $EB6C * See if the enemy ship was hit
FORCE_SYMBOL $EB6C check_bullet_for_hit
COMMENT $EB73 * HIT - flag that bullet is dead
FORCE_NO_SYMBOL $EB73
COMMENT $EB75 * Flag that enemy ship no longer there
FORCE_NO_SYMBOL $EB75
COMMENT $EB77 * Clear 1 indirect jump counter
FORCE_NO_SYMBOL $EB77
FORCE_SYMBOL $EB79 score_string_pointers
FORCE_NO_SYMBOL $EB7C
COMMENT $EB80 * Inc players score by 1000
FORCE_NO_SYMBOL $EB80
FORCE_SYMBOL $EB83 add_d_to_x_in_bcd
FORCE_NO_SYMBOL $EB86
FORCE_NO_SYMBOL $EB88
FORCE_NO_SYMBOL $EB8A
FORCE_SYMBOL $EB8C add_an_explosion
COMMENT $EB8F * Decrement the # of active bullets
FORCE_NO_SYMBOL $EB8F
COMMENT_LINE $EB93 This routine checks to see if a bullet hit
COMMENT_LINE $EB93 any of the active mines or fireballs.
COMMENT $EB93 * Load 'u' with ptr to mine info
FORCE_NO_SYMBOL $EB93
FORCE_NO_SYMBOL $EB96
COMMENT $EB98 * Use C890 as a counter
FORCE_NO_SYMBOL $EB98
FORCE_NO_SYMBOL $EB9A
COMMENT $EB9C * Make sure mine is active
FORCE_NO_SYMBOL $EB9C
COMMENT $EBA0 * Inc ptr into mine structure
FORCE_NO_SYMBOL $EBA0
FORCE_NO_SYMBOL $EBA3
FORCE_NO_SYMBOL $EBAB
FORCE_NO_SYMBOL $EBAD
COMMENT $EBAF * bullet coordinates
FORCE_NO_SYMBOL $EBB1
COMMENT $EBB3 * mine coordinates
FORCE_NO_SYMBOL $EBB3
COMMENT $EBB7 * height & width of mine
FORCE_NO_SYMBOL $EBB7
COMMENT $EBB9 * returns: carry set = hit, else miss
FORCE_SYMBOL $EBB9 check_bullet_for_hit
COMMENT $EBC0 * Check if this is a fireball mine
FORCE_NO_SYMBOL $EBC0
FORCE_NO_SYMBOL $EBC2
FORCE_SYMBOL $EBC6 score_string_pointers
FORCE_NO_SYMBOL $EBC9
COMMENT $EBCD * Add mines value to players score
FORCE_NO_SYMBOL $EBCD
FORCE_SYMBOL $EBCF add_d_to_x_in_bcd
FORCE_NO_SYMBOL $EBD2
FORCE_NO_SYMBOL $EBD4
FORCE_NO_SYMBOL $EBD6
FORCE_NO_SYMBOL $EBDA
FORCE_NO_SYMBOL $EBDC
FORCE_SYMBOL $EBDE add_an_explosion
COMMENT $EBE1 * Init score for the fireball
FORCE_NO_SYMBOL $EBE1
FORCE_NO_SYMBOL $EBE4
FORCE_NO_SYMBOL $EBE6
FORCE_NO_SYMBOL $EBE8
FORCE_NO_SYMBOL $EBEA
FORCE_NO_SYMBOL $EBEC
FORCE_NO_SYMBOL $EBEE
FORCE_NO_SYMBOL $EBF1
FORCE_NO_SYMBOL $EBF7
FORCE_SYMBOL $EBF9 calc_rise_run1
COMMENT $EBFC * Calculate rise & run for fireball
FORCE_NO_SYMBOL $EBFC
FORCE_NO_SYMBOL $EBFF
COMMENT $EC03 * Flag that the bullet is dead
FORCE_NO_SYMBOL $EC03
FORCE_NO_SYMBOL $EC05
COMMENT $EC08 * Set height/2 & width/2 for fireball
FORCE_NO_SYMBOL $EC08
FORCE_NO_SYMBOL $EC0A
COMMENT $EC0C * Decrement the generation for this mine
FORCE_NO_SYMBOL $EC0C
COMMENT $EC0E * and don't start any more if it = 0
FORCE_SYMBOL $EC11 activate_a_mine
FORCE_SYMBOL $EC14 activate_a_mine
COMMENT $EC17 * Flag that this is a fireball
FORCE_NO_SYMBOL $EC17
FORCE_NO_SYMBOL $EC19
COMMENT $EC1B * Decrement active bullet counter
FORCE_NO_SYMBOL $EC1B
FORCE_SYMBOL $EC1D inc_bullet_ptr2
COMMENT_LINE $EC20 This processes a hit on a non-fireball type mine.
FORCE_NO_SYMBOL $EC20
FORCE_NO_SYMBOL $EC22
COMMENT $EC24 * Flag that the bullet is dead
FORCE_NO_SYMBOL $EC24
FORCE_SYMBOL $EC26 score_string_pointers
FORCE_NO_SYMBOL $EC29
COMMENT $EC2B * Add mines value to players score
FORCE_NO_SYMBOL $EC2D
FORCE_SYMBOL $EC2F add_d_to_x_in_bcd
FORCE_NO_SYMBOL $EC32
FORCE_NO_SYMBOL $EC34
FORCE_NO_SYMBOL $EC38
FORCE_NO_SYMBOL $EC3A
FORCE_SYMBOL $EC3C add_an_explosion
COMMENT $EC3F * Decrement active mine counter
FORCE_NO_SYMBOL $EC3F
COMMENT $EC41 * Decrement the active bullet counter
FORCE_NO_SYMBOL $EC41
FORCE_SYMBOL $EC43 inc_bullet_ptr2
COMMENT_LINE $EC46 This routine check each active mine to see if it has
COMMENT_LINE $EC46 collided with the command ship.
FORCE_NO_SYMBOL $EC46
COMMENT $EC48 * Do only if cmd ship not already dead
FORCE_NO_SYMBOL $EC4A
COMMENT $EC4C * Do only if hyperspace not active
FORCE_NO_SYMBOL $EC4E
FORCE_NO_SYMBOL $EC52
COMMENT $EC54 * Set up a loop counter
FORCE_NO_SYMBOL $EC54
FORCE_NO_SYMBOL $EC56
FORCE_NO_SYMBOL $EC58
FORCE_NO_SYMBOL $EC5C
FORCE_NO_SYMBOL $EC5F
FORCE_NO_SYMBOL $EC66
FORCE_NO_SYMBOL $EC68
COMMENT $EC6A * Load cmd ship's position
FORCE_NO_SYMBOL $EC6C
FORCE_NO_SYMBOL $EC6E
COMMENT $EC70 * Load mine's position
FORCE_NO_SYMBOL $EC70
FORCE_SYMBOL $EC75 check_bullet_for_hit
COMMENT $EC7C * Flag that the mine is dead
FORCE_NO_SYMBOL $EC7C
FORCE_NO_SYMBOL $EC7E
FORCE_NO_SYMBOL $EC80
FORCE_NO_SYMBOL $EC82
FORCE_NO_SYMBOL $EC86
FORCE_NO_SYMBOL $EC88
FORCE_NO_SYMBOL $EC8A
FORCE_SYMBOL $EC8C add_an_explosion
COMMENT $EC8F * Flag for an explosion sound
FORCE_NO_SYMBOL $EC8F
COMMENT $EC91 * Decrement active mine counter
FORCE_NO_SYMBOL $EC91
COMMENT_LINE $EC95 This routine checks to see if the command ship has collided
COMMENT_LINE $EC95 with the enemy ship during reseeding.
COMMENT $EC95 * Do only if cmd ship not disabled
FORCE_NO_SYMBOL $EC95
COMMENT $EC99 * Don't do if hyperspace active
FORCE_NO_SYMBOL $EC99
COMMENT $EC9D * Check only if enemy ship visible
FORCE_NO_SYMBOL $EC9D
FORCE_NO_SYMBOL $ECA1
FORCE_NO_SYMBOL $ECA3
COMMENT $ECA5 * Command ship location
COMMENT $ECA7 * Size of enemy ship
FORCE_NO_SYMBOL $ECA7
COMMENT $ECAA * Enemy ship's location
FORCE_NO_SYMBOL $ECAA
FORCE_SYMBOL $ECAD check_bullet_for_hit
COMMENT $ECB3 * Flag that enemy ship no longer visible
FORCE_NO_SYMBOL $ECB3
FORCE_NO_SYMBOL $ECB5
FORCE_NO_SYMBOL $ECB7
FORCE_NO_SYMBOL $ECB9
FORCE_NO_SYMBOL $ECBD
FORCE_NO_SYMBOL $ECBF
FORCE_NO_SYMBOL $ECC1
FORCE_SYMBOL $ECC3 add_an_explosion
COMMENT $ECC6 * Enable explosion sound
FORCE_NO_SYMBOL $ECC6
COMMENT_LINE $ECC9 This routine is responsible for making miscellaneous sound,
COMMENT_LINE $ECC9 such as when an explosion occurs, or a bullet is fired.
FORCE_NO_SYMBOL $ECC9
FORCE_NO_SYMBOL $ECCE
COMMENT $ECD1 * Make cmd ship movement sound
FORCE_SYMBOL $ECD1 cmd_ship_movement_sound
FORCE_NO_SYMBOL $ECD6
FORCE_NO_SYMBOL $ECDB
COMMENT $ECDE * Make explosion sound
FORCE_SYMBOL $ECDE explosion_sound
FORCE_NO_SYMBOL $ECE3
FORCE_NO_SYMBOL $ECE8
COMMENT $ECEB * Make bullet firing sound
FORCE_SYMBOL $ECEB bullet_sound
FORCE_NO_SYMBOL $ECF0
FORCE_NO_SYMBOL $ECF5
FORCE_NO_SYMBOL $ECF8
COMMENT $ECFB * Make sound of mine 'popping' up
FORCE_SYMBOL $ECFB mine_pop_sound
FORCE_NO_SYMBOL $ED00
COMMENT $ED03 * Make hyperspace sound
FORCE_SYMBOL $ED07 copy_bytes_2_sound_chip
FORCE_NO_SYMBOL $ED0A
FORCE_NO_SYMBOL $ED0D
FORCE_NO_SYMBOL $ED0F
FORCE_NO_SYMBOL $ED13
FORCE_SYMBOL $ED15 byte_2_sound_chip
FORCE_NO_SYMBOL $ED1A
FORCE_SYMBOL $ED1D byte_2_sound_chip
FORCE_NO_SYMBOL $ED20
FORCE_NO_SYMBOL $ED23
FORCE_NO_SYMBOL $ED25
FORCE_NO_SYMBOL $ED29
FORCE_SYMBOL $ED2B byte_2_sound_chip
FORCE_NO_SYMBOL $ED30
FORCE_SYMBOL $ED33 byte_2_sound_chip
COMMENT $ED43 * "9"
COMMENT $ED56 * "8"
COMMENT $ED5F * "0"
COMMENT $ED69 * "="
COMMENT_LINE $ED77 Start of Mine Storm music block
COMMENT $ED9F * Pointer to player 1 score string
COMMENT $EDA1 * Pointer to player 2 score string
COMMENT $EDA3 * Player 1 rel y score position
COMMENT $EDA4 * Player 1 rel x score position
COMMENT $EDA5 * Player 2 rel y score position
COMMENT $EDA6 * Player 2 rel x score position
COMMENT $EDA7 * Pointer to player 1 mine field # string
COMMENT $EDA9 * Pointer to player 2 mine field # string
COMMENT_LINE $EDAB This contains the information describing which mines
COMMENT_LINE $EDAB are to appear at the first 13 mine field levels.  The
COMMENT_LINE $EDAB values map a follows:
COMMENT_LINE $EDAB 0 = dumb mine
COMMENT_LINE $EDAB 1 = magnetic mine
COMMENT_LINE $EDAB 2 = fireball mine
COMMENT_LINE $EDAB 3 = magnetic fireball mine
COMMENT $EDAB * level 1
COMMENT $EDAF * level 2
COMMENT $EDB3 * level 3
COMMENT $EDB7 * level 4
COMMENT $EDBB * level 5
COMMENT $EDBF * level 6
COMMENT $EDC3 * level 7
COMMENT $EDC7 * level 8
COMMENT $EDCB * level 9
COMMENT $EDCF * level 10
COMMENT $EDD3 * level 11
COMMENT $EDD7 * level 12
COMMENT $EDDB * level 13
COMMENT $EE20 * height = -6
COMMENT $EE21 * width = 56
COMMENT $EE22 * rel y = -32
COMMENT $EE23 * rel x =
COMMENT $EE2F * height = -6
COMMENT $EE30 * width = 56
COMMENT $EE31 * rel y = -32
COMMENT $EE32 * rel x =
COMMENT_LINE $EFCC The following is spare space in the ROM
RANGE $0000-$0000 DP $D0
RANGE $E000-$E002 DW_DATA 1
RANGE $E002-$E003 DB_DATA 1
RANGE $E003-$E004 DB_DATA 1
RANGE $E004-$E005 DB_DATA 1
RANGE $E005-$E006 DB_DATA 1
RANGE $E006-$E00B CHAR_DATA 5
RANGE $E00B-$E00C DB_DATA 1
RANGE $E00C-$E00D DB_DATA 1
RANGE $E00D-$E00E DB_DATA 1
RANGE $E00E-$E00F DB_DATA 1
RANGE $E00F-$E016 CHAR_DATA 7
RANGE $E016-$E23A CODE
RANGE $E23A-$E23B DB_DATA 1
RANGE $E23B-$E23C DB_DATA 1
RANGE $E23C-$E23D DB_DATA 1
RANGE $E23D-$E23E DB_DATA 1
RANGE $E23E-$E23F DB_DATA 1
RANGE $E23F-$E240 DB_DATA 1
RANGE $E240-$E241 DB_DATA 1
RANGE $E241-$E242 DB_DATA 1
RANGE $E242-$E243 DB_DATA 1
RANGE $E243-$E244 DB_DATA 1
RANGE $E244-$E245 DB_DATA 1
RANGE $E245-$E246 DB_DATA 1
RANGE $E246-$E247 DB_DATA 1
RANGE $E247-$E248 DB_DATA 1
RANGE $E248-$E249 DB_DATA 1
RANGE $E249-$E24A DB_DATA 1
RANGE $E24A-$E24B DB_DATA 1
RANGE $E24B-$E24C DB_DATA 1
RANGE $E24C-$E24D DB_DATA 1
RANGE $E24D-$E24E DB_DATA 1
RANGE $E24E-$E24F DB_DATA 1
RANGE $E24F-$E250 DB_DATA 1
RANGE $E250-$E251 DB_DATA 1
RANGE $E251-$E252 DB_DATA 1
RANGE $E252-$E253 DB_DATA 1
RANGE $E253-$E254 DB_DATA 1
RANGE $E254-$E255 DB_DATA 1
RANGE $E255-$E256 DB_DATA 1
RANGE $E256-$E257 DB_DATA 1
RANGE $E257-$E258 DB_DATA 1
RANGE $E258-$E259 DB_DATA 1
RANGE $E259-$E25A DB_DATA 1
RANGE $E25A-$E25C DW_DATA 1
RANGE $E25C-$E25E DW_DATA 1
RANGE $E25E-$E260 DW_DATA 1
RANGE $E260-$E262 DW_DATA 1
RANGE $E262-$E448 CODE
RANGE $E448-$E44A DW_DATA 1
RANGE $E44A-$E44C DW_DATA 1
RANGE $E44C-$E44E DW_DATA 1
RANGE $E44E-$E450 DW_DATA 1
RANGE $E450-$E451 DB_DATA 1
RANGE $E451-$E452 DB_DATA 1
RANGE $E452-$E453 DB_DATA 1
RANGE $E453-$E454 DB_DATA 1
RANGE $E454-$E455 DB_DATA 1
RANGE $E455-$E456 DB_DATA 1
RANGE $E456-$E457 DB_DATA 1
RANGE $E457-$E458 DB_DATA 1
RANGE $E458-$E459 DB_DATA 1
RANGE $E459-$E45A DB_DATA 1
RANGE $E45A-$E45B DB_DATA 1
RANGE $E45B-$E45C DB_DATA 1
RANGE $E45C-$E45D DB_DATA 1
RANGE $E45D-$E45E DB_DATA 1
RANGE $E45E-$E45F DB_DATA 1
RANGE $E45F-$E460 DB_DATA 1
RANGE $E460-$E461 DB_DATA 1
RANGE $E461-$E462 DB_DATA 1
RANGE $E462-$E463 DB_DATA 1
RANGE $E463-$E464 DB_DATA 1
RANGE $E464-$E465 DB_DATA 1
RANGE $E465-$E466 DB_DATA 1
RANGE $E466-$E467 DB_DATA 1
RANGE $E467-$E468 DB_DATA 1
RANGE $E468-$E469 DB_DATA 1
RANGE $E469-$E46A DB_DATA 1
RANGE $E46A-$E46B DB_DATA 1
RANGE $E46B-$E46C DB_DATA 1
RANGE $E46C-$E46D DB_DATA 1
RANGE $E46D-$E46E DB_DATA 1
RANGE $E46E-$E46F DB_DATA 1
RANGE $E46F-$E470 DB_DATA 1
RANGE $E470-$E471 DB_DATA 1
RANGE $E471-$E472 DB_DATA 1
RANGE $E472-$E473 DB_DATA 1
RANGE $E473-$E474 DB_DATA 1
RANGE $E474-$E475 DB_DATA 1
RANGE $E475-$E476 DB_DATA 1
RANGE $E476-$E477 DB_DATA 1
RANGE $E477-$E478 DB_DATA 1
RANGE $E478-$E479 DB_DATA 1
RANGE $E479-$E47A DB_DATA 1
RANGE $E47A-$E47B DB_DATA 1
RANGE $E47B-$E47C DB_DATA 1
RANGE $E47C-$E47D DB_DATA 1
RANGE $E47D-$E47E DB_DATA 1
RANGE $E47E-$E47F DB_DATA 1
RANGE $E47F-$E480 DB_DATA 1
RANGE $E480-$E481 DB_DATA 1
RANGE $E481-$E482 DB_DATA 1
RANGE $E482-$E483 DB_DATA 1
RANGE $E483-$E484 DB_DATA 1
RANGE $E484-$E485 DB_DATA 1
RANGE $E485-$E486 DB_DATA 1
RANGE $E486-$E487 DB_DATA 1
RANGE $E487-$E488 DB_DATA 1
RANGE $E488-$E489 DB_DATA 1
RANGE $E489-$E48A DB_DATA 1
RANGE $E48A-$E48B DB_DATA 1
RANGE $E48B-$E48C DB_DATA 1
RANGE $E48C-$E48D DB_DATA 1
RANGE $E48D-$E48E DB_DATA 1
RANGE $E48E-$E48F DB_DATA 1
RANGE $E48F-$E490 DB_DATA 1
RANGE $E490-$E491 DB_DATA 1
RANGE $E491-$E492 DB_DATA 1
RANGE $E492-$E493 DB_DATA 1
RANGE $E493-$E494 DB_DATA 1
RANGE $E494-$E495 DB_DATA 1
RANGE $E495-$E496 DB_DATA 1
RANGE $E496-$E497 DB_DATA 1
RANGE $E497-$E498 DB_DATA 1
RANGE $E498-$E499 DB_DATA 1
RANGE $E499-$E49A DB_DATA 1
RANGE $E49A-$E49B DB_DATA 1
RANGE $E49B-$E49C DB_DATA 1
RANGE $E49C-$E49D DB_DATA 1
RANGE $E49D-$E49E DB_DATA 1
RANGE $E49E-$E49F DB_DATA 1
RANGE $E49F-$E4A0 DB_DATA 1
RANGE $E4A0-$E4A1 DB_DATA 1
RANGE $E4A1-$E4A2 DB_DATA 1
RANGE $E4A2-$E4A3 DB_DATA 1
RANGE $E4A3-$E4A4 DB_DATA 1
RANGE $E4A4-$E4A5 DB_DATA 1
RANGE $E4A5-$E4A6 DB_DATA 1
RANGE $E4A6-$E4A7 DB_DATA 1
RANGE $E4A7-$E4A8 DB_DATA 1
RANGE $E4A8-$E4A9 DB_DATA 1
RANGE $E4A9-$E4AA DB_DATA 1
RANGE $E4AA-$E4AB DB_DATA 1
RANGE $E4AB-$E4AC DB_DATA 1
RANGE $E4AC-$E4AD DB_DATA 1
RANGE $E4AD-$E4AE DB_DATA 1
RANGE $E4AE-$E4AF DB_DATA 1
RANGE $E4AF-$E4B0 DB_DATA 1
RANGE $E4B0-$E4B1 DB_DATA 1
RANGE $E4B1-$E4B2 DB_DATA 1
RANGE $E4B2-$E4B3 DB_DATA 1
RANGE $E4B3-$E4B4 DB_DATA 1
RANGE $E4B4-$E4B5 DB_DATA 1
RANGE $E4B5-$E4B6 DB_DATA 1
RANGE $E4B6-$E4B7 DB_DATA 1
RANGE $E4B7-$E4B8 DB_DATA 1
RANGE $E4B8-$ED37 CODE
RANGE $ED37-$ED38 DB_DATA 1
RANGE $ED38-$ED39 DB_DATA 1
RANGE $ED39-$ED3A DB_DATA 1
RANGE $ED3A-$ED3B DB_DATA 1
RANGE $ED3B-$ED3C DB_DATA 1
RANGE $ED3C-$ED3D DB_DATA 1
RANGE $ED3D-$ED3E DB_DATA 1
RANGE $ED3E-$ED3F DB_DATA 1
RANGE $ED3F-$ED40 DB_DATA 1
RANGE $ED40-$ED41 DB_DATA 1
RANGE $ED41-$ED42 DB_DATA 1
RANGE $ED42-$ED43 DB_DATA 1
RANGE $ED43-$ED44 DB_DATA 1
RANGE $ED44-$ED45 DB_DATA 1
RANGE $ED45-$ED46 DB_DATA 1
RANGE $ED46-$ED47 DB_DATA 1
RANGE $ED47-$ED48 DB_DATA 1
RANGE $ED48-$ED49 DB_DATA 1
RANGE $ED49-$ED4A DB_DATA 1
RANGE $ED4A-$ED4B DB_DATA 1
RANGE $ED4B-$ED4C DB_DATA 1
RANGE $ED4C-$ED4D DB_DATA 1
RANGE $ED4D-$ED4E DB_DATA 1
RANGE $ED4E-$ED4F DB_DATA 1
RANGE $ED4F-$ED50 DB_DATA 1
RANGE $ED50-$ED51 DB_DATA 1
RANGE $ED51-$ED52 DB_DATA 1
RANGE $ED52-$ED53 DB_DATA 1
RANGE $ED53-$ED54 DB_DATA 1
RANGE $ED54-$ED55 DB_DATA 1
RANGE $ED55-$ED56 DB_DATA 1
RANGE $ED56-$ED57 DB_DATA 1
RANGE $ED57-$ED58 DB_DATA 1
RANGE $ED58-$ED59 DB_DATA 1
RANGE $ED59-$ED5A DB_DATA 1
RANGE $ED5A-$ED5B DB_DATA 1
RANGE $ED5B-$ED5C DB_DATA 1
RANGE $ED5C-$ED5D DB_DATA 1
RANGE $ED5D-$ED5E DB_DATA 1
RANGE $ED5E-$ED5F DB_DATA 1
RANGE $ED5F-$ED60 DB_DATA 1
RANGE $ED60-$ED61 DB_DATA 1
RANGE $ED61-$ED62 DB_DATA 1
RANGE $ED62-$ED63 DB_DATA 1
RANGE $ED63-$ED64 DB_DATA 1
RANGE $ED64-$ED65 DB_DATA 1
RANGE $ED65-$ED66 DB_DATA 1
RANGE $ED66-$ED67 DB_DATA 1
RANGE $ED67-$ED68 DB_DATA 1
RANGE $ED68-$ED69 DB_DATA 1
RANGE $ED69-$ED6A DB_DATA 1
RANGE $ED6A-$ED6B DB_DATA 1
RANGE $ED6B-$ED6C DB_DATA 1
RANGE $ED6C-$ED6D DB_DATA 1
RANGE $ED6D-$ED6E DB_DATA 1
RANGE $ED6E-$ED6F DB_DATA 1
RANGE $ED6F-$ED70 DB_DATA 1
RANGE $ED70-$ED71 DB_DATA 1
RANGE $ED71-$ED72 DB_DATA 1
RANGE $ED72-$ED73 DB_DATA 1
RANGE $ED73-$ED74 DB_DATA 1
RANGE $ED74-$ED75 DB_DATA 1
RANGE $ED75-$ED76 DB_DATA 1
RANGE $ED76-$ED77 DB_DATA 1
RANGE $ED77-$ED79 DW_DATA 1
RANGE $ED79-$ED7B DW_DATA 1
RANGE $ED7B-$ED7C DB_DATA 1
RANGE $ED7C-$ED7D DB_DATA 1
RANGE $ED7D-$ED7E DB_DATA 1
RANGE $ED7E-$ED7F DB_DATA 1
RANGE $ED7F-$ED80 DB_DATA 1
RANGE $ED80-$ED81 DB_DATA 1
RANGE $ED81-$ED82 DB_DATA 1
RANGE $ED82-$ED83 DB_DATA 1
RANGE $ED83-$ED84 DB_DATA 1
RANGE $ED84-$ED85 DB_DATA 1
RANGE $ED85-$ED86 DB_DATA 1
RANGE $ED86-$ED87 DB_DATA 1
RANGE $ED87-$ED88 DB_DATA 1
RANGE $ED88-$ED89 DB_DATA 1
RANGE $ED89-$ED8A DB_DATA 1
RANGE $ED8A-$ED8B DB_DATA 1
RANGE $ED8B-$ED8C DB_DATA 1
RANGE $ED8C-$ED8D DB_DATA 1
RANGE $ED8D-$ED8E DB_DATA 1
RANGE $ED8E-$ED8F DB_DATA 1
RANGE $ED8F-$ED90 DB_DATA 1
RANGE $ED90-$ED91 DB_DATA 1
RANGE $ED91-$ED92 DB_DATA 1
RANGE $ED92-$ED93 DB_DATA 1
RANGE $ED93-$ED94 DB_DATA 1
RANGE $ED94-$ED95 DB_DATA 1
RANGE $ED95-$ED96 DB_DATA 1
RANGE $ED96-$ED97 DB_DATA 1
RANGE $ED97-$ED98 DB_DATA 1
RANGE $ED98-$ED99 DB_DATA 1
RANGE $ED99-$ED9A DB_DATA 1
RANGE $ED9A-$ED9B DB_DATA 1
RANGE $ED9B-$ED9C DB_DATA 1
RANGE $ED9C-$ED9D DB_DATA 1
RANGE $ED9D-$ED9E DB_DATA 1
RANGE $ED9E-$ED9F DB_DATA 1
RANGE $ED9F-$EDA1 DW_DATA 1
RANGE $EDA1-$EDA3 DW_DATA 1
RANGE $EDA3-$EDA4 DB_DATA 1
RANGE $EDA4-$EDA5 DB_DATA 1
RANGE $EDA5-$EDA6 DB_DATA 1
RANGE $EDA6-$EDA7 DB_DATA 1
RANGE $EDA7-$EDA9 DW_DATA 1
RANGE $EDA9-$EDAB DW_DATA 1
RANGE $EDAB-$EDAC DB_DATA 1
RANGE $EDAC-$EDAD DB_DATA 1
RANGE $EDAD-$EDAE DB_DATA 1
RANGE $EDAE-$EDAF DB_DATA 1
RANGE $EDAF-$EDB0 DB_DATA 1
RANGE $EDB0-$EDB1 DB_DATA 1
RANGE $EDB1-$EDB2 DB_DATA 1
RANGE $EDB2-$EDB3 DB_DATA 1
RANGE $EDB3-$EDB4 DB_DATA 1
RANGE $EDB4-$EDB5 DB_DATA 1
RANGE $EDB5-$EDB6 DB_DATA 1
RANGE $EDB6-$EDB7 DB_DATA 1
RANGE $EDB7-$EDB8 DB_DATA 1
RANGE $EDB8-$EDB9 DB_DATA 1
RANGE $EDB9-$EDBA DB_DATA 1
RANGE $EDBA-$EDBB DB_DATA 1
RANGE $EDBB-$EDBC DB_DATA 1
RANGE $EDBC-$EDBD DB_DATA 1
RANGE $EDBD-$EDBE DB_DATA 1
RANGE $EDBE-$EDBF DB_DATA 1
RANGE $EDBF-$EDC0 DB_DATA 1
RANGE $EDC0-$EDC1 DB_DATA 1
RANGE $EDC1-$EDC2 DB_DATA 1
RANGE $EDC2-$EDC3 DB_DATA 1
RANGE $EDC3-$EDC4 DB_DATA 1
RANGE $EDC4-$EDC5 DB_DATA 1
RANGE $EDC5-$EDC6 DB_DATA 1
RANGE $EDC6-$EDC7 DB_DATA 1
RANGE $EDC7-$EDC8 DB_DATA 1
RANGE $EDC8-$EDC9 DB_DATA 1
RANGE $EDC9-$EDCA DB_DATA 1
RANGE $EDCA-$EDCB DB_DATA 1
RANGE $EDCB-$EDCC DB_DATA 1
RANGE $EDCC-$EDCD DB_DATA 1
RANGE $EDCD-$EDCE DB_DATA 1
RANGE $EDCE-$EDCF DB_DATA 1
RANGE $EDCF-$EDD0 DB_DATA 1
RANGE $EDD0-$EDD1 DB_DATA 1
RANGE $EDD1-$EDD2 DB_DATA 1
RANGE $EDD2-$EDD3 DB_DATA 1
RANGE $EDD3-$EDD4 DB_DATA 1
RANGE $EDD4-$EDD5 DB_DATA 1
RANGE $EDD5-$EDD6 DB_DATA 1
RANGE $EDD6-$EDD7 DB_DATA 1
RANGE $EDD7-$EDD8 DB_DATA 1
RANGE $EDD8-$EDD9 DB_DATA 1
RANGE $EDD9-$EDDA DB_DATA 1
RANGE $EDDA-$EDDB DB_DATA 1
RANGE $EDDB-$EDDC DB_DATA 1
RANGE $EDDC-$EDDD DB_DATA 1
RANGE $EDDD-$EDDE DB_DATA 1
RANGE $EDDE-$EDDF DB_DATA 1
RANGE $EDDF-$EDE0 DB_DATA 1
RANGE $EDE0-$EDE1 DB_DATA 1
RANGE $EDE1-$EDE2 DB_DATA 1
RANGE $EDE2-$EDE3 DB_DATA 1
RANGE $EDE3-$EDE4 DB_DATA 1
RANGE $EDE4-$EDE5 DB_DATA 1
RANGE $EDE5-$EDE6 DB_DATA 1
RANGE $EDE6-$EDE7 DB_DATA 1
RANGE $EDE7-$EDE8 DB_DATA 1
RANGE $EDE8-$EDE9 DB_DATA 1
RANGE $EDE9-$EDEA DB_DATA 1
RANGE $EDEA-$EDEB DB_DATA 1
RANGE $EDEB-$EDEC DB_DATA 1
RANGE $EDEC-$EDED DB_DATA 1
RANGE $EDED-$EDEE DB_DATA 1
RANGE $EDEE-$EDEF DB_DATA 1
RANGE $EDEF-$EDF0 DB_DATA 1
RANGE $EDF0-$EDF1 DB_DATA 1
RANGE $EDF1-$EDF2 DB_DATA 1
RANGE $EDF2-$EDF3 DB_DATA 1
RANGE $EDF3-$EDF4 DB_DATA 1
RANGE $EDF4-$EDF5 DB_DATA 1
RANGE $EDF5-$EDF6 DB_DATA 1
RANGE $EDF6-$EDF7 DB_DATA 1
RANGE $EDF7-$EDF8 DB_DATA 1
RANGE $EDF8-$EDF9 DB_DATA 1
RANGE $EDF9-$EDFA DB_DATA 1
RANGE $EDFA-$EDFB DB_DATA 1
RANGE $EDFB-$EDFC DB_DATA 1
RANGE $EDFC-$EDFD DB_DATA 1
RANGE $EDFD-$EDFE DB_DATA 1
RANGE $EDFE-$EDFF DB_DATA 1
RANGE $EDFF-$EE00 DB_DATA 1
RANGE $EE00-$EE01 DB_DATA 1
RANGE $EE01-$EE02 DB_DATA 1
RANGE $EE02-$EE03 DB_DATA 1
RANGE $EE03-$EE04 DB_DATA 1
RANGE $EE04-$EE05 DB_DATA 1
RANGE $EE05-$EE06 DB_DATA 1
RANGE $EE06-$EE07 DB_DATA 1
RANGE $EE07-$EE08 DB_DATA 1
RANGE $EE08-$EE09 DB_DATA 1
RANGE $EE09-$EE0A DB_DATA 1
RANGE $EE0A-$EE0B DB_DATA 1
RANGE $EE0B-$EE0C DB_DATA 1
RANGE $EE0C-$EE0D DB_DATA 1
RANGE $EE0D-$EE0E DB_DATA 1
RANGE $EE0E-$EE0F DB_DATA 1
RANGE $EE0F-$EE10 DB_DATA 1
RANGE $EE10-$EE11 DB_DATA 1
RANGE $EE11-$EE12 DB_DATA 1
RANGE $EE12-$EE13 DB_DATA 1
RANGE $EE13-$EE14 DB_DATA 1
RANGE $EE14-$EE15 DB_DATA 1
RANGE $EE15-$EE16 DB_DATA 1
RANGE $EE16-$EE17 DB_DATA 1
RANGE $EE17-$EE18 DB_DATA 1
RANGE $EE18-$EE19 DB_DATA 1
RANGE $EE19-$EE1A DB_DATA 1
RANGE $EE1A-$EE1B DB_DATA 1
RANGE $EE1B-$EE1C DB_DATA 1
RANGE $EE1C-$EE1D DB_DATA 1
RANGE $EE1D-$EE1E DB_DATA 1
RANGE $EE1E-$EE1F DB_DATA 1
RANGE $EE1F-$EE20 DB_DATA 1
RANGE $EE20-$EE21 DB_DATA 1
RANGE $EE21-$EE22 DB_DATA 1
RANGE $EE22-$EE23 DB_DATA 1
RANGE $EE23-$EE24 DB_DATA 1
RANGE $EE24-$EE2F CHAR_DATA 11
RANGE $EE2F-$EE30 DB_DATA 1
RANGE $EE30-$EE31 DB_DATA 1
RANGE $EE31-$EE32 DB_DATA 1
RANGE $EE32-$EE33 DB_DATA 1
RANGE $EE33-$EE3D CHAR_DATA 10
RANGE $EE3D-$EE3E DB_DATA 1
RANGE $EE3E-$EE3F DB_DATA 1
RANGE $EE3F-$EE40 DB_DATA 1
RANGE $EE40-$EE41 DB_DATA 1
RANGE $EE41-$EE42 DB_DATA 1
RANGE $EE42-$EE43 DB_DATA 1
RANGE $EE43-$EE44 DB_DATA 1
RANGE $EE44-$EE45 DB_DATA 1
RANGE $EE45-$EE46 DB_DATA 1
RANGE $EE46-$EE47 DB_DATA 1
RANGE $EE47-$EE48 DB_DATA 1
RANGE $EE48-$EE49 DB_DATA 1
RANGE $EE49-$EE4A DB_DATA 1
RANGE $EE4A-$EE4B DB_DATA 1
RANGE $EE4B-$EE4C DB_DATA 1
RANGE $EE4C-$EE4D DB_DATA 1
RANGE $EE4D-$EE4E DB_DATA 1
RANGE $EE4E-$EE4F DB_DATA 1
RANGE $EE4F-$EE50 DB_DATA 1
RANGE $EE50-$EE51 DB_DATA 1
RANGE $EE51-$EE52 DB_DATA 1
RANGE $EE52-$EE53 DB_DATA 1
RANGE $EE53-$EE54 DB_DATA 1
RANGE $EE54-$EE55 DB_DATA 1
RANGE $EE55-$EE56 DB_DATA 1
RANGE $EE56-$EE57 DB_DATA 1
RANGE $EE57-$EE58 DB_DATA 1
RANGE $EE58-$EE59 DB_DATA 1
RANGE $EE59-$EE5A DB_DATA 1
RANGE $EE5A-$EE5B DB_DATA 1
RANGE $EE5B-$EE5C DB_DATA 1
RANGE $EE5C-$EE5D DB_DATA 1
RANGE $EE5D-$EE5E DB_DATA 1
RANGE $EE5E-$EE5F DB_DATA 1
RANGE $EE5F-$EE60 DB_DATA 1
RANGE $EE60-$EE61 DB_DATA 1
RANGE $EE61-$EE62 DB_DATA 1
RANGE $EE62-$EE63 DB_DATA 1
RANGE $EE63-$EE64 DB_DATA 1
RANGE $EE64-$EE65 DB_DATA 1
RANGE $EE65-$EE66 DB_DATA 1
RANGE $EE66-$EE67 DB_DATA 1
RANGE $EE67-$EE68 DB_DATA 1
RANGE $EE68-$EE69 DB_DATA 1
RANGE $EE69-$EE6A DB_DATA 1
RANGE $EE6A-$EE6B DB_DATA 1
RANGE $EE6B-$EE6C DB_DATA 1
RANGE $EE6C-$EE6D DB_DATA 1
RANGE $EE6D-$EE6E DB_DATA 1
RANGE $EE6E-$EE6F DB_DATA 1
RANGE $EE6F-$EE70 DB_DATA 1
RANGE $EE70-$EE71 DB_DATA 1
RANGE $EE71-$EE72 DB_DATA 1
RANGE $EE72-$EE73 DB_DATA 1
RANGE $EE73-$EE74 DB_DATA 1
RANGE $EE74-$EE75 DB_DATA 1
RANGE $EE75-$EE76 DB_DATA 1
RANGE $EE76-$EE77 DB_DATA 1
RANGE $EE77-$EE78 DB_DATA 1
RANGE $EE78-$EE79 DB_DATA 1
RANGE $EE79-$EE7A DB_DATA 1
RANGE $EE7A-$EE7B DB_DATA 1
RANGE $EE7B-$EE7C DB_DATA 1
RANGE $EE7C-$EE7D DB_DATA 1
RANGE $EE7D-$EE7E DB_DATA 1
RANGE $EE7E-$EE7F DB_DATA 1
RANGE $EE7F-$EE80 DB_DATA 1
RANGE $EE80-$EE81 DB_DATA 1
RANGE $EE81-$EE82 DB_DATA 1
RANGE $EE82-$EE83 DB_DATA 1
RANGE $EE83-$EE84 DB_DATA 1
RANGE $EE84-$EE85 DB_DATA 1
RANGE $EE85-$EE86 DB_DATA 1
RANGE $EE86-$EE87 DB_DATA 1
RANGE $EE87-$EE88 DB_DATA 1
RANGE $EE88-$EE89 DB_DATA 1
RANGE $EE89-$EE8A DB_DATA 1
RANGE $EE8A-$EE8B DB_DATA 1
RANGE $EE8B-$EE8C DB_DATA 1
RANGE $EE8C-$EE8D DB_DATA 1
RANGE $EE8D-$EE8E DB_DATA 1
RANGE $EE8E-$EE8F DB_DATA 1
RANGE $EE8F-$EE90 DB_DATA 1
RANGE $EE90-$EE91 DB_DATA 1
RANGE $EE91-$EE92 DB_DATA 1
RANGE $EE92-$EE93 DB_DATA 1
RANGE $EE93-$EE94 DB_DATA 1
RANGE $EE94-$EE95 DB_DATA 1
RANGE $EE95-$EE96 DB_DATA 1
RANGE $EE96-$EE97 DB_DATA 1
RANGE $EE97-$EE98 DB_DATA 1
RANGE $EE98-$EE99 DB_DATA 1
RANGE $EE99-$EE9A DB_DATA 1
RANGE $EE9A-$EE9B DB_DATA 1
RANGE $EE9B-$EE9C DB_DATA 1
RANGE $EE9C-$EE9D DB_DATA 1
RANGE $EE9D-$EE9E DB_DATA 1
RANGE $EE9E-$EE9F DB_DATA 1
RANGE $EE9F-$EEA0 DB_DATA 1
RANGE $EEA0-$EEA1 DB_DATA 1
RANGE $EEA1-$EEA2 DB_DATA 1
RANGE $EEA2-$EEA3 DB_DATA 1
RANGE $EEA3-$EEA4 DB_DATA 1
RANGE $EEA4-$EEA5 DB_DATA 1
RANGE $EEA5-$EEA6 DB_DATA 1
RANGE $EEA6-$EEA7 DB_DATA 1
RANGE $EEA7-$EEA8 DB_DATA 1
RANGE $EEA8-$EEA9 DB_DATA 1
RANGE $EEA9-$EEAA DB_DATA 1
RANGE $EEAA-$EEAB DB_DATA 1
RANGE $EEAB-$EEAC DB_DATA 1
RANGE $EEAC-$EEAD DB_DATA 1
RANGE $EEAD-$EEAE DB_DATA 1
RANGE $EEAE-$EEAF DB_DATA 1
RANGE $EEAF-$EEB0 DB_DATA 1
RANGE $EEB0-$EEB1 DB_DATA 1
RANGE $EEB1-$EEB2 DB_DATA 1
RANGE $EEB2-$EEB3 DB_DATA 1
RANGE $EEB3-$EEB4 DB_DATA 1
RANGE $EEB4-$EEB5 DB_DATA 1
RANGE $EEB5-$EEB6 DB_DATA 1
RANGE $EEB6-$EEB7 DB_DATA 1
RANGE $EEB7-$EEB8 DB_DATA 1
RANGE $EEB8-$EEB9 DB_DATA 1
RANGE $EEB9-$EEBA DB_DATA 1
RANGE $EEBA-$EEBB DB_DATA 1
RANGE $EEBB-$EEBC DB_DATA 1
RANGE $EEBC-$EEBD DB_DATA 1
RANGE $EEBD-$EEBE DB_DATA 1
RANGE $EEBE-$EEBF DB_DATA 1
RANGE $EEBF-$EEC0 DB_DATA 1
RANGE $EEC0-$EEC1 DB_DATA 1
RANGE $EEC1-$EEC2 DB_DATA 1
RANGE $EEC2-$EEC3 DB_DATA 1
RANGE $EEC3-$EEC4 DB_DATA 1
RANGE $EEC4-$EEC5 DB_DATA 1
RANGE $EEC5-$EEC6 DB_DATA 1
RANGE $EEC6-$EEC7 DB_DATA 1
RANGE $EEC7-$EEC8 DB_DATA 1
RANGE $EEC8-$EEC9 DB_DATA 1
RANGE $EEC9-$EECA DB_DATA 1
RANGE $EECA-$EECB DB_DATA 1
RANGE $EECB-$EECC DB_DATA 1
RANGE $EECC-$EECD DB_DATA 1
RANGE $EECD-$EECE DB_DATA 1
RANGE $EECE-$EECF DB_DATA 1
RANGE $EECF-$EED0 DB_DATA 1
RANGE $EED0-$EED1 DB_DATA 1
RANGE $EED1-$EED2 DB_DATA 1
RANGE $EED2-$EED3 DB_DATA 1
RANGE $EED3-$EED4 DB_DATA 1
RANGE $EED4-$EED5 DB_DATA 1
RANGE $EED5-$EED6 DB_DATA 1
RANGE $EED6-$EED7 DB_DATA 1
RANGE $EED7-$EED8 DB_DATA 1
RANGE $EED8-$EED9 DB_DATA 1
RANGE $EED9-$EEDA DB_DATA 1
RANGE $EEDA-$EEDB DB_DATA 1
RANGE $EEDB-$EEDC DB_DATA 1
RANGE $EEDC-$EEDD DB_DATA 1
RANGE $EEDD-$EEDE DB_DATA 1
RANGE $EEDE-$EEDF DB_DATA 1
RANGE $EEDF-$EEE0 DB_DATA 1
RANGE $EEE0-$EEE1 DB_DATA 1
RANGE $EEE1-$EEE2 DB_DATA 1
RANGE $EEE2-$EEE3 DB_DATA 1
RANGE $EEE3-$EEE4 DB_DATA 1
RANGE $EEE4-$EEE5 DB_DATA 1
RANGE $EEE5-$EEE6 DB_DATA 1
RANGE $EEE6-$EEE7 DB_DATA 1
RANGE $EEE7-$EEE8 DB_DATA 1
RANGE $EEE8-$EEE9 DB_DATA 1
RANGE $EEE9-$EEEA DB_DATA 1
RANGE $EEEA-$EEEB DB_DATA 1
RANGE $EEEB-$EEEC DB_DATA 1
RANGE $EEEC-$EEED DB_DATA 1
RANGE $EEED-$EEEE DB_DATA 1
RANGE $EEEE-$EEEF DB_DATA 1
RANGE $EEEF-$EEF0 DB_DATA 1
RANGE $EEF0-$EEF1 DB_DATA 1
RANGE $EEF1-$EEF2 DB_DATA 1
RANGE $EEF2-$EEF3 DB_DATA 1
RANGE $EEF3-$EEF4 DB_DATA 1
RANGE $EEF4-$EEF5 DB_DATA 1
RANGE $EEF5-$EEF6 DB_DATA 1
RANGE $EEF6-$EEF7 DB_DATA 1
RANGE $EEF7-$EEF8 DB_DATA 1
RANGE $EEF8-$EEF9 DB_DATA 1
RANGE $EEF9-$EEFA DB_DATA 1
RANGE $EEFA-$EEFB DB_DATA 1
RANGE $EEFB-$EEFC DB_DATA 1
RANGE $EEFC-$EEFD DB_DATA 1
RANGE $EEFD-$EEFE DB_DATA 1
RANGE $EEFE-$EEFF DB_DATA 1
RANGE $EEFF-$EF00 DB_DATA 1
RANGE $EF00-$EF01 DB_DATA 1
RANGE $EF01-$EF02 DB_DATA 1
RANGE $EF02-$EF03 DB_DATA 1
RANGE $EF03-$EF04 DB_DATA 1
RANGE $EF04-$EF05 DB_DATA 1
RANGE $EF05-$EF06 DB_DATA 1
RANGE $EF06-$EF07 DB_DATA 1
RANGE $EF07-$EF08 DB_DATA 1
RANGE $EF08-$EF09 DB_DATA 1
RANGE $EF09-$EF0A DB_DATA 1
RANGE $EF0A-$EF0B DB_DATA 1
RANGE $EF0B-$EF0C DB_DATA 1
RANGE $EF0C-$EF0D DB_DATA 1
RANGE $EF0D-$EF0E DB_DATA 1
RANGE $EF0E-$EF0F DB_DATA 1
RANGE $EF0F-$EF10 DB_DATA 1
RANGE $EF10-$EF11 DB_DATA 1
RANGE $EF11-$EF12 DB_DATA 1
RANGE $EF12-$EF13 DB_DATA 1
RANGE $EF13-$EF14 DB_DATA 1
RANGE $EF14-$EF15 DB_DATA 1
RANGE $EF15-$EF16 DB_DATA 1
RANGE $EF16-$EF17 DB_DATA 1
RANGE $EF17-$EF18 DB_DATA 1
RANGE $EF18-$EF19 DB_DATA 1
RANGE $EF19-$EF1A DB_DATA 1
RANGE $EF1A-$EF1B DB_DATA 1
RANGE $EF1B-$EF1C DB_DATA 1
RANGE $EF1C-$EF1D DB_DATA 1
RANGE $EF1D-$EF1E DB_DATA 1
RANGE $EF1E-$EF1F DB_DATA 1
RANGE $EF1F-$EF20 DB_DATA 1
RANGE $EF20-$EF21 DB_DATA 1
RANGE $EF21-$EF22 DB_DATA 1
RANGE $EF22-$EF23 DB_DATA 1
RANGE $EF23-$EF24 DB_DATA 1
RANGE $EF24-$EF25 DB_DATA 1
RANGE $EF25-$EF26 DB_DATA 1
RANGE $EF26-$EF27 DB_DATA 1
RANGE $EF27-$EF28 DB_DATA 1
RANGE $EF28-$EF29 DB_DATA 1
RANGE $EF29-$EF2A DB_DATA 1
RANGE $EF2A-$EF2B DB_DATA 1
RANGE $EF2B-$EF2C DB_DATA 1
RANGE $EF2C-$EF2D DB_DATA 1
RANGE $EF2D-$EF2E DB_DATA 1
RANGE $EF2E-$EF2F DB_DATA 1
RANGE $EF2F-$EF30 DB_DATA 1
RANGE $EF30-$EF31 DB_DATA 1
RANGE $EF31-$EF32 DB_DATA 1
RANGE $EF32-$EF33 DB_DATA 1
RANGE $EF33-$EF34 DB_DATA 1
RANGE $EF34-$EF35 DB_DATA 1
RANGE $EF35-$EF36 DB_DATA 1
RANGE $EF36-$EF37 DB_DATA 1
RANGE $EF37-$EF38 DB_DATA 1
RANGE $EF38-$EF39 DB_DATA 1
RANGE $EF39-$EF3A DB_DATA 1
RANGE $EF3A-$EF3B DB_DATA 1
RANGE $EF3B-$EF3C DB_DATA 1
RANGE $EF3C-$EF3D DB_DATA 1
RANGE $EF3D-$EF3E DB_DATA 1
RANGE $EF3E-$EF3F DB_DATA 1
RANGE $EF3F-$EF40 DB_DATA 1
RANGE $EF40-$EF41 DB_DATA 1
RANGE $EF41-$EF42 DB_DATA 1
RANGE $EF42-$EF43 DB_DATA 1
RANGE $EF43-$EF44 DB_DATA 1
RANGE $EF44-$EF45 DB_DATA 1
RANGE $EF45-$EF46 DB_DATA 1
RANGE $EF46-$EF47 DB_DATA 1
RANGE $EF47-$EF48 DB_DATA 1
RANGE $EF48-$EF49 DB_DATA 1
RANGE $EF49-$EF4A DB_DATA 1
RANGE $EF4A-$EF4B DB_DATA 1
RANGE $EF4B-$EF4C DB_DATA 1
RANGE $EF4C-$EF4D DB_DATA 1
RANGE $EF4D-$EF4E DB_DATA 1
RANGE $EF4E-$EF4F DB_DATA 1
RANGE $EF4F-$EF50 DB_DATA 1
RANGE $EF50-$EF51 DB_DATA 1
RANGE $EF51-$EF52 DB_DATA 1
RANGE $EF52-$EF53 DB_DATA 1
RANGE $EF53-$EF54 DB_DATA 1
RANGE $EF54-$EF55 DB_DATA 1
RANGE $EF55-$EF56 DB_DATA 1
RANGE $EF56-$EF57 DB_DATA 1
RANGE $EF57-$EF58 DB_DATA 1
RANGE $EF58-$EF59 DB_DATA 1
RANGE $EF59-$EF5A DB_DATA 1
RANGE $EF5A-$EF5B DB_DATA 1
RANGE $EF5B-$EF5C DB_DATA 1
RANGE $EF5C-$EF5D DB_DATA 1
RANGE $EF5D-$EF5E DB_DATA 1
RANGE $EF5E-$EF5F DB_DATA 1
RANGE $EF5F-$EF60 DB_DATA 1
RANGE $EF60-$EF61 DB_DATA 1
RANGE $EF61-$EF62 DB_DATA 1
RANGE $EF62-$EF63 DB_DATA 1
RANGE $EF63-$EF64 DB_DATA 1
RANGE $EF64-$EF65 DB_DATA 1
RANGE $EF65-$EF66 DB_DATA 1
RANGE $EF66-$EF67 DB_DATA 1
RANGE $EF67-$EF68 DB_DATA 1
RANGE $EF68-$EF69 DB_DATA 1
RANGE $EF69-$EF6A DB_DATA 1
RANGE $EF6A-$EF6B DB_DATA 1
RANGE $EF6B-$EF6C DB_DATA 1
RANGE $EF6C-$EF6D DB_DATA 1
RANGE $EF6D-$EF6E DB_DATA 1
RANGE $EF6E-$EF6F DB_DATA 1
RANGE $EF6F-$EF70 DB_DATA 1
RANGE $EF70-$EF71 DB_DATA 1
RANGE $EF71-$EF72 DB_DATA 1
RANGE $EF72-$EF73 DB_DATA 1
RANGE $EF73-$EF74 DB_DATA 1
RANGE $EF74-$EF75 DB_DATA 1
RANGE $EF75-$EF76 DB_DATA 1
RANGE $EF76-$EF77 DB_DATA 1
RANGE $EF77-$EF78 DB_DATA 1
RANGE $EF78-$EF79 DB_DATA 1
RANGE $EF79-$EF7A DB_DATA 1
RANGE $EF7A-$EF7B DB_DATA 1
RANGE $EF7B-$EF7C DB_DATA 1
RANGE $EF7C-$EF7D DB_DATA 1
RANGE $EF7D-$EF7E DB_DATA 1
RANGE $EF7E-$EF7F DB_DATA 1
RANGE $EF7F-$EF80 DB_DATA 1
RANGE $EF80-$EF81 DB_DATA 1
RANGE $EF81-$EF82 DB_DATA 1
RANGE $EF82-$EF83 DB_DATA 1
RANGE $EF83-$EF84 DB_DATA 1
RANGE $EF84-$EF85 DB_DATA 1
RANGE $EF85-$EF86 DB_DATA 1
RANGE $EF86-$EF87 DB_DATA 1
RANGE $EF87-$EF88 DB_DATA 1
RANGE $EF88-$EF89 DB_DATA 1
RANGE $EF89-$EF8A DB_DATA 1
RANGE $EF8A-$EF8B DB_DATA 1
RANGE $EF8B-$EF8C DB_DATA 1
RANGE $EF8C-$EF8D DB_DATA 1
RANGE $EF8D-$EF8E DB_DATA 1
RANGE $EF8E-$EF8F DB_DATA 1
RANGE $EF8F-$EF90 DB_DATA 1
RANGE $EF90-$EF91 DB_DATA 1
RANGE $EF91-$EF92 DB_DATA 1
RANGE $EF92-$EF93 DB_DATA 1
RANGE $EF93-$EF94 DB_DATA 1
RANGE $EF94-$EF95 DB_DATA 1
RANGE $EF95-$EF96 DB_DATA 1
RANGE $EF96-$EF97 DB_DATA 1
RANGE $EF97-$EF98 DB_DATA 1
RANGE $EF98-$EF99 DB_DATA 1
RANGE $EF99-$EF9A DB_DATA 1
RANGE $EF9A-$EF9B DB_DATA 1
RANGE $EF9B-$EF9C DB_DATA 1
RANGE $EF9C-$EF9D DB_DATA 1
RANGE $EF9D-$EF9E DB_DATA 1
RANGE $EF9E-$EF9F DB_DATA 1
RANGE $EF9F-$EFA0 DB_DATA 1
RANGE $EFA0-$EFA1 DB_DATA 1
RANGE $EFA1-$EFA2 DB_DATA 1
RANGE $EFA2-$EFA3 DB_DATA 1
RANGE $EFA3-$EFA4 DB_DATA 1
RANGE $EFA4-$EFA5 DB_DATA 1
RANGE $EFA5-$EFA6 DB_DATA 1
RANGE $EFA6-$EFA7 DB_DATA 1
RANGE $EFA7-$EFA8 DB_DATA 1
RANGE $EFA8-$EFA9 DB_DATA 1
RANGE $EFA9-$EFAA DB_DATA 1
RANGE $EFAA-$EFAB DB_DATA 1
RANGE $EFAB-$EFAC DB_DATA 1
RANGE $EFAC-$EFAD DB_DATA 1
RANGE $EFAD-$EFAE DB_DATA 1
RANGE $EFAE-$EFAF DB_DATA 1
RANGE $EFAF-$EFB0 DB_DATA 1
RANGE $EFB0-$EFB1 DB_DATA 1
RANGE $EFB1-$EFB2 DB_DATA 1
RANGE $EFB2-$EFB3 DB_DATA 1
RANGE $EFB3-$EFB4 DB_DATA 1
RANGE $EFB4-$EFB5 DB_DATA 1
RANGE $EFB5-$EFB6 DB_DATA 1
RANGE $EFB6-$EFB7 DB_DATA 1
RANGE $EFB7-$EFB8 DB_DATA 1
RANGE $EFB8-$EFB9 DB_DATA 1
RANGE $EFB9-$EFBA DB_DATA 1
RANGE $EFBA-$EFBB DB_DATA 1
RANGE $EFBB-$EFBC DB_DATA 1
RANGE $EFBC-$EFBD DB_DATA 1
RANGE $EFBD-$EFBE DB_DATA 1
RANGE $EFBE-$EFBF DB_DATA 1
RANGE $EFBF-$EFC0 DB_DATA 1
RANGE $EFC0-$EFC1 DB_DATA 1
RANGE $EFC1-$EFC2 DB_DATA 1
RANGE $EFC2-$EFC3 DB_DATA 1
RANGE $EFC3-$EFC4 DB_DATA 1
RANGE $EFC4-$EFC5 DB_DATA 1
RANGE $EFC5-$EFC6 DB_DATA 1
RANGE $EFC6-$EFC7 DB_DATA 1
RANGE $EFC7-$EFC8 DB_DATA 1
RANGE $EFC8-$EFC9 DB_DATA 1
RANGE $EFC9-$EFCA DB_DATA 1
RANGE $EFCA-$EFCB DB_DATA 1
RANGE $EFCB-$EFCC DB_DATA 1
RANGE $EFCC-$EFCD DB_DATA 1
RANGE $EFCD-$EFCE DB_DATA 1
RANGE $EFCE-$EFCF DB_DATA 1
RANGE $EFCF-$EFD0 DB_DATA 1
RANGE $EFD0-$EFD1 DB_DATA 1
RANGE $EFD1-$EFD2 DB_DATA 1
RANGE $EFD2-$EFD3 DB_DATA 1
RANGE $EFD3-$EFD4 DB_DATA 1
RANGE $EFD4-$EFD5 DB_DATA 1
RANGE $EFD5-$EFD6 DB_DATA 1
RANGE $EFD6-$EFD7 DB_DATA 1
RANGE $EFD7-$EFD8 DB_DATA 1
RANGE $EFD8-$EFD9 DB_DATA 1
RANGE $EFD9-$EFDA DB_DATA 1
RANGE $EFDA-$EFDB DB_DATA 1
RANGE $EFDB-$EFDC DB_DATA 1
RANGE $EFDC-$EFDD DB_DATA 1
RANGE $EFDD-$EFDE DB_DATA 1
RANGE $EFDE-$EFDF DB_DATA 1
RANGE $EFDF-$EFE0 DB_DATA 1
RANGE $EFE0-$EFE1 DB_DATA 1
RANGE $EFE1-$EFE2 DB_DATA 1
RANGE $EFE2-$EFE3 DB_DATA 1
RANGE $EFE3-$EFE4 DB_DATA 1
RANGE $EFE4-$EFE5 DB_DATA 1
RANGE $EFE5-$EFE6 DB_DATA 1
RANGE $EFE6-$EFE7 DB_DATA 1
RANGE $EFE7-$EFE8 DB_DATA 1
RANGE $EFE8-$EFE9 DB_DATA 1
RANGE $EFE9-$EFEA DB_DATA 1
RANGE $EFEA-$EFEB DB_DATA 1
RANGE $EFEB-$EFEC DB_DATA 1
RANGE $EFEC-$EFED DB_DATA 1
RANGE $EFED-$EFEE DB_DATA 1
RANGE $EFEE-$EFEF DB_DATA 1
RANGE $EFEF-$EFF0 DB_DATA 1
RANGE $EFF0-$EFF1 DB_DATA 1
RANGE $EFF1-$EFF2 DB_DATA 1
RANGE $EFF2-$EFF3 DB_DATA 1
RANGE $EFF3-$EFF4 DB_DATA 1
RANGE $EFF4-$EFF5 DB_DATA 1
RANGE $EFF5-$EFF6 DB_DATA 1
RANGE $EFF6-$EFF7 DB_DATA 1
RANGE $EFF7-$EFF8 DB_DATA 1
RANGE $EFF8-$EFF9 DB_DATA 1
RANGE $EFF9-$EFFA DB_DATA 1
RANGE $EFFA-$EFFB DB_DATA 1
RANGE $EFFB-$EFFC DB_DATA 1
RANGE $EFFC-$EFFD DB_DATA 1
RANGE $EFFD-$EFFE DB_DATA 1
RANGE $EFFE-$EFFF DB_DATA 1
RANGE $EFFF-$F000 DB_DATA 1

