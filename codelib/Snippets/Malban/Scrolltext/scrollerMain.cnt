BANK 0
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $F192 Wait_Recal
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F2A5 Intensity_5F
LABEL $F2AB Intensity_a
LABEL $FD0D music1
LABEL $C880 SCROLL_RAM_START
EQU $60 SCALE_FACTOR_GAME
LABEL $F160 NORMAL_TEXT_SIZE
COMMENT_LABEL $F160 big text that is
LABEL $C885 scroll_y
LABEL $C887 scroll_x_left
LABEL $C888 scroll_x_right
LABEL $C884 scroll_speed
LABEL $C88A scroll_intensity
LABEL $0051 hello_world_string
LABEL $00B5 set_up_scrolling
EQU $43 main1
LABEL $00EB do_one_scroll_step
EQU $00 USE_RELATIVE_POSITIONING
EQU $08 SCROLL_SCALE_FACTOR
EQU $0F NUMBER_OF_SCROLL_LETTERS
LABEL $C880 scroll_text_address_start
LABEL $C882 scroll_text_address_current
LABEL $C886 scroll_x
LABEL $C889 scroll_step_width
LABEL $C88B counter
LABEL $C88C tmp1
LABEL $C88E divide_tmp
LABEL $C88D mov_x
LABEL $00E2 divide_by_zero1
LABEL $00DC divide_next1
LABEL $00D1 divide_next11
LABEL $00E4 divide_end1
LABEL $0122 getNextChar_start
LABEL $0122 scroll_text_not_over_yet
LABEL $012E getNextChar
LABEL $013A no_text_end
LABEL $0143 no_scroll_space
LABEL $0517 ABC_28
LABEL $0160 load_x_with_letter_address_done
LABEL $014C no_scroll_fullstop
LABEL $04B5 ABC_26
LABEL $0155 no_scroll_0
LABEL $04C5 ABC_27
LABEL $01E8 _abc
LABEL $018C LF33D5
LABEL $0197 next_VListByte
LABEL $01B6 draw_one_line
LABEL $01B0 LF33D9
LABEL $01D7 done_Draw
LABEL $01CE LF3F410
EQU $0C BLOWUP
COMMENT_LABEL $0C max = 126
LABEL $0222 ABC_0
LABEL $023E ABC_1
LABEL $0257 ABC_2
LABEL $0276 ABC_3
LABEL $028F ABC_4
LABEL $02AB ABC_5
LABEL $02C1 ABC_6
LABEL $02E6 ABC_7
LABEL $02FC ABC_8
LABEL $0312 ABC_9
LABEL $032B ABC_10
LABEL $0341 ABC_11
LABEL $0351 ABC_12
LABEL $0367 ABC_13
LABEL $0377 ABC_14
LABEL $0399 ABC_15
LABEL $03B2 ABC_16
LABEL $03DA ABC_17
LABEL $03F9 ABC_18
LABEL $0424 ABC_19
LABEL $0437 ABC_20
LABEL $0450 ABC_21
LABEL $0463 ABC_22
LABEL $047C ABC_23
LABEL $048C ABC_24
LABEL $04A2 ABC_25
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 DEFINE SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 load vectrex bios routine definitions
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 a = $18, b = $83 disable RAMP, muxsel=false, channel 1 (integrators offsets)
COMMENT $0000 Clear D/A output
COMMENT $0000 set mux to channel 1, leave mux disabled
COMMENT $0000 enable mux, reset integrator offset values
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 Disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 scale for placing first point
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 the local directive doesn't work here ???
COMMENT_LINE $0000 I think because it is a makro using makro...
COMMENT $0000 Decrement line count
COMMENT $0000 Go back for more points
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 defines 'LF3F4' as a local variable
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT_LINE $0000 the followin two instructions might be optimized
COMMENT_LINE $0000 but there is something about 18 cycles :-)
COMMENT $0000 Point to next coordinate pair
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor?)
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 defines 'LF3F4' as a local variable
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT_LINE $0000 the followin two instructions might be optimized
COMMENT_LINE $0000 but there is something about 18 cycles :-)
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor?)
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makro ...
COMMENT_LINE $0000 they search for a better (faster) scale/DAC relation and use
COMMENT_LINE $0000 the scaling thus found, it should be somewhat faster that way...
COMMENT_LINE $0000 per round we save approxematly: ? cycles
COMMENT_LINE $0000 both destroy X and D
COMMENT_LINE $0000 SCALE factor is changed
COMMENT_LINE $0000 forget it !!!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0000 NOT DONE:
COMMENT_LINE $0000 what should be done:
COMMENT_LINE $0000 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0000 a = a * s
COMMENT_LINE $0000 b = b * s
COMMENT_LINE $0000 scaling = scaling / s
COMMENT_LINE $0000 that would give the most efficient positioning
COMMENT_LINE $0000 bother it takes more time to calculate the above,
COMMENT_LINE $0000 than it saves
COMMENT_LINE $0000 with every positioning via this routine now,
COMMENT_LINE $0000 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0000 to do one simple positioning!!!
COMMENT_LINE $0000 that is probably about 300 cycles per positioning
COMMENT_LINE $0000 this is done about 30-40 times per round
COMMENT_LINE $0000 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0000 and we haven't drawn a single line yet!!!
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 Don't reset the zero reference yet
COMMENT $0000 Get the next mode byte
COMMENT_LINE $0000 JSR Draw_VL ;If <>1, draw a solid line
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 Variable / RAM SECTION
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 insert your variables (RAM usage) in the BSS section
COMMENT_LINE $0000 user RAM starts at $c880
COMMENT $0000 start of our ram space
COMMENT_LINE $C880 ***************************************************************************
COMMENT_LINE $C880 HEADER SECTION
COMMENT_LINE $C880 ***************************************************************************
COMMENT_LINE $C880 The cartridge ROM starts at address 0
COMMENT_LINE $0000 the first few bytes are mandatory, otherwise the BIOS will not load
COMMENT_LINE $0000 the ROM file, and will start MineStorm instead
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $001B end of game header
COMMENT_LINE $001C ***************************************************************************
COMMENT_LINE $001C CODE SECTION
COMMENT_LINE $001C ***************************************************************************
COMMENT $001F load default text height & width
COMMENT $0022 poke it to ram location
COMMENT_LINE $0024 just for show a little scroll text...
COMMENT_LINE $0024 scrolltext destroys a whole load of valuable
COMMENT_LINE $0024 ram space...
COMMENT_LINE $0024 had to use some ram twice...
COMMENT $0024 y position of scroller
COMMENT $0026 store it
COMMENT $0029 left boundary
COMMENT $002B store it
COMMENT $002E right boundary
COMMENT $0030 store it
COMMENT $0033 scroll speed (going from right to left)
COMMENT $0035 store it
COMMENT $0038 and intensity of scroll text
COMMENT $003A store it
COMMENT $0043 Vectrex BIOS recalibration
COMMENT $0046 Sets the intensity of the
COMMENT_LINE $0049 vector beam to $5f
COMMENT $00B5 vectrex function includes
COMMENT_LINE $00B5 if above is 1, than positioning of letters is relative to first letter
COMMENT_LINE $00B5 if != 1 than each letter is poisitioned individually
COMMENT_LINE $00B5 a "RESET" to ZERO and of the offsets
COMMENT_LINE $00B5 is done befor drawing of each letter
COMMENT_LINE $00B5 this is a bit slower, but perhaps results in a more
COMMENT_LINE $00B5 stable display!
COMMENT_LINE $00B5 Scroller of text (normal vectrex text format)
COMMENT_LINE $00B5 using vector chartable
COMMENT_LINE $00B5 the chars 0,0
COMMENT_LINE $00B5 (start is allways = end!)
COMMENT_LINE $00B5 all letters are drawn in "SCROLL_SCALE_FACTOR"
COMMENT_LINE $00B5 positioning is done in "SCALE_FACTOR_GAME"
COMMENT_LINE $00B5 two routines,
COMMENT_LINE $00B5 a) set_up_scrolling() need parameter = to RAM addresses (see function head)
COMMENT_LINE $00B5 expectes dp = $c8
COMMENT_LINE $00B5 b) do_one_scroll_step() no parameters
COMMENT_LINE $00B5 expectes dp = $d0
COMMENT_LINE $00B5 macros for MOV and DRAW_MODE
COMMENT_LINE $00B5 can be replaced with BIOS to save more space (althogh slower)
COMMENT_LINE $00B5 setup uses MACRO DIV
COMMENT_LINE $00B5 RAM start must be = to SCROLL_RAM_START
COMMENT $C880 start of our ram space
COMMENT $C880 this is fix for one scroll, the start of the original text
COMMENT $C882 this is the current scroller start position in text
COMMENT $C884 speed of scroll, should be negative
COMMENT $C885 current y pos of scroll (allways the same) (SCALE_FACTOR_GAME)
COMMENT $C886 current x pos of first (top left) char in the scrolling display (SCALE_FACTOR_GAME)
COMMENT $C887 left position, lower than this and a char is "discarded"
COMMENT $C888 new chars start (more or less) here
COMMENT $C889 calculated, this is the offset between two chars in the scroller (SCALE_FACTOR_GAME)
COMMENT $C88A only set once upon every "scroll"
COMMENT $C88B counte, used to count the currently drawn chars, initiates with NUMBER_OF_SCROLL_LETTERS and is brought to zero
COMMENT $C88C used as a storage for yx position, and during setup in MUL
COMMENT $C88E used in setup for DIV
COMMENT_LINE $00B5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $00B5 scroll subroutines used in the startup screen                             ;
COMMENT_LINE $00B5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $00B5 ***************************************************************************
COMMENT_LINE $00B5 below are all subroutines for scroll text
COMMENT_LINE $00B5 scrolling from right to left!
COMMENT_LINE $00B5 (only two) set_up_scrolling(), do_one_scroll_step()
COMMENT_LINE $00B5 scroll text ends with $80
COMMENT_LINE $00B5 this restarts scrolling...
COMMENT_LINE $00B5 ***************************************************************************
COMMENT_LINE $00B5 expects text address in X register
COMMENT_LINE $00B5 scroll_y:                  the y coordinate (signed byte value)
COMMENT_LINE $00B5 scroll_x_left              (signed byte value)
COMMENT_LINE $00B5 scroll_x_right             (signed byte value)
COMMENT_LINE $00B5 scroll_speed               (signed byte value) must be negative
COMMENT_LINE $00B5 scroll_intensity           (byte value)
COMMENT_LINE $00B5 NUMBER_OF_SCROLL_LETTERS
COMMENT_LINE $00B5 uses tmp1, tmp2
COMMENT $00B5 remember address of first letter
COMMENT $00B7 and store it as current address
COMMENT $00B9 how many letters are at most to be displayed at once?
COMMENT $00BC remember that value in tmp1 (16 bit)
COMMENT $00BE load right boundary
COMMENT $00C0 subtract left boundary
COMMENT $00C2 SEX it, this is the 16 bit width 'in pixel'
COMMENT $00C3 divide it by the number of letters to be displayed
COMMENT $00E4 remember that as the scroll step...
COMMENT $00E6 and screen address where last letter will appear
COMMENT $00E8 here our first char will be displayed
COMMENT $00EA bye bye...
COMMENT_LINE $00EB ***************************************************************************
COMMENT_LINE $00EB does one scroll step of text initialized with the above function
COMMENT_LINE $00EB does also all printing...
COMMENT_LINE $00EB expects dp = to d0
COMMENT_LINE $00EB sets intensity and trashs beam position (as well as everything else...)
COMMENT_LINE $00EB destroys tmp1
COMMENT $00EB load intensity
COMMENT $00F1 at least one reset int the begining!
COMMENT $00F1 setup counter of chars to be displayed
COMMENT $00F6 get address of current letter
COMMENT $00FA load x coordinate
COMMENT $00FD add to scroll speed (x coordinate that is)
COMMENT $0100 is on left side out of bounds?
COMMENT $0103 if not go on... REALLY get the char
COMMENT $0105 other wise correct x position
COMMENT $0108 the start of X now should point to the NEXT char, whoch is one "width" away
COMMENT $010B and remember it
COMMENT $010E increment char pointer to scrolltext by one
COMMENT $0110 and store it back
COMMENT_LINE $0114 init new letter here
COMMENT $0114 load the current letter to B
COMMENT $0116 compare to $80, end marker
COMMENT $0118 if not set, go on
COMMENT $011A otherwise load start address of text
COMMENT $011E store it as current
COMMENT $0122 load y, x coordinate
COMMENT $0125 add to B (x coordinate that is)
COMMENT $0128 store the new x position
COMMENT $012B this will be our next MOV, the first mov actually moves to
COMMENT_LINE $012E start position of scroller, all subsequent moves only to the "width" of one scroll char!
COMMENT $012E and load the first letter of the text to B (and inc y)
COMMENT $0130 compare to $80, end marker
COMMENT $0132 if not set, go on
COMMENT $0134 otherwise load start address of text
COMMENT $0138 and load the first letter of the text to B
COMMENT_LINE $013A here we certainly have a correct 'letter'- value in B register
COMMENT $013A really correct? isn't it a SPACE
COMMENT $013C no? than go on...
COMMENT $013E otherwise zero everything, pointer to vector list
COMMENT $0141 go on
COMMENT $0143 is it even a 'fullstop'
COMMENT $0145 if not... go on
COMMENT $0147 if it is load vectorlist addres to X
COMMENT $014A and go on
COMMENT $014C is it even a 'turtle' :-)
COMMENT $014E if not... go on
COMMENT $0150 if it is load vectorlist addres to X
COMMENT $0153 and go on
COMMENT_LINE $0155 no it should be a 'real' letter (CAPITAL!!!)
COMMENT_LINE $0155 lets calculate the abc-table offset...
COMMENT $0155 subtract smallest letter, so A has 0 offset
COMMENT $0157 multiply by two, since addresses are 16 bit
COMMENT $0158 SEX it :-)
COMMENT $0159 and add the abc (table of vector list address of the alphabet's letters)
COMMENT $015C get that into an index register (X)
COMMENT $015E load the letters address from the table
COMMENT $0160 draw each letter with a move from zero, perhaps more stable!
COMMENT $0162 /BLANK low and /ZERO low
COMMENT $0164 a = $18, b = $83 disable RAMP, muxsel=false, channel 1 (integrators offsets)
COMMENT $0166 Clear D/A output
COMMENT $0168 set mux to channel 1, leave mux disabled
COMMENT $016A enable mux, reset integrator offset values
COMMENT $016E /BLANK low and /ZERO low
COMMENT $0170 Disable mux
COMMENT $0172 everything we do with "positioning" is scale SCALE_FACTOR_GAME
COMMENT $0172 scale for placing first point
COMMENT $0174 move to time 1 lo, this means scaling
COMMENT $0176 the current move vector
COMMENT $0179 as a macro
COMMENT_LINE $0179 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0179 NOT DONE:
COMMENT_LINE $0179 what should be done:
COMMENT_LINE $0179 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0179 a = a * s
COMMENT_LINE $0179 b = b * s
COMMENT_LINE $0179 scaling = scaling / s
COMMENT_LINE $0179 that would give the most efficient positioning
COMMENT_LINE $0179 bother it takes more time to calculate the above,
COMMENT_LINE $0179 than it saves
COMMENT_LINE $0179 with every positioning via this routine now,
COMMENT_LINE $0179 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0179 to do one simple positioning!!!
COMMENT_LINE $0179 that is probably about 300 cycles per positioning
COMMENT_LINE $0179 this is done about 30-40 times per round
COMMENT_LINE $0179 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0179 and we haven't drawn a single line yet!!!
COMMENT $0179 Store Y in D/A register
COMMENT $017B Blank low, zero high?
COMMENT $0180 Enable mux
COMMENT $0182 Clear shift regigster
COMMENT $0184 Disable mux
COMMENT $0186 Store X in D/A register
COMMENT $0188 enable timer
COMMENT_LINE $0190 in X is the current pointer to the to be drawn char
COMMENT $0190 drawing of letters is done in SCROLL_SCALE_FACTOR
COMMENT $0190 scale for placing first point
COMMENT $0192 move to time 1 lo, this means scaling
COMMENT $0194 Don't reset the zero reference yet
COMMENT $0197 Get the next mode byte
COMMENT_LINE $019D optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $019D NOT DONE:
COMMENT_LINE $019D what should be done:
COMMENT_LINE $019D s = $ff / max(abs(a),abs(b))
COMMENT_LINE $019D a = a * s
COMMENT_LINE $019D b = b * s
COMMENT_LINE $019D scaling = scaling / s
COMMENT_LINE $019D that would give the most efficient positioning
COMMENT_LINE $019D bother it takes more time to calculate the above,
COMMENT_LINE $019D than it saves
COMMENT_LINE $019D with every positioning via this routine now,
COMMENT_LINE $019D it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $019D to do one simple positioning!!!
COMMENT_LINE $019D that is probably about 300 cycles per positioning
COMMENT_LINE $019D this is done about 30-40 times per round
COMMENT_LINE $019D alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $019D and we haven't drawn a single line yet!!!
COMMENT $019D Store Y in D/A register
COMMENT $019F Blank low, zero high?
COMMENT $01A4 Enable mux
COMMENT $01A6 Clear shift regigster
COMMENT $01A8 Disable mux
COMMENT $01AA Store X in D/A register
COMMENT $01AC enable timer
COMMENT $01BB Send Y to A/D
COMMENT $01BD Enable mux
COMMENT_LINE $01BF the followin two instructions might be optimized
COMMENT_LINE $01BF but there is something about 18 cycles :-)
COMMENT $01BF Wait a moment
COMMENT $01C0 Disable mux
COMMENT $01C2 Send X to A/D
COMMENT $01C4 Shift reg=$FF (solid line), T1H=0
COMMENT $01C7 Put pattern in shift register
COMMENT $01C9 Set T1H (scale factor?)
COMMENT $01CB B-reg = T1 interrupt bit
COMMENT $01CE Wait for T1 to time out
COMMENT $01D2 Wait a moment more
COMMENT $01D3 Clear shift register (blank output)
COMMENT_LINE $01D5 JSR Draw_VL ;If <>1, draw a solid line
COMMENT $01D7 setup next move as y = 0
COMMENT $01D7 and width of one scroll "char"
COMMENT $01D7 store to temp
COMMENT $01D7 and width of one scroll "char"
COMMENT $01DD store to temp
COMMENT $01E0 are we done yet?
COMMENT $01E7 ok, that was our scroll step :-)
COMMENT_LINE $01E8 ***************************************************************************
COMMENT_LINE $01E8 used variables and constants...
COMMENT_LINE $01E8 SCROLL_SCALE_FACTOR             EQU    $6
COMMENT_LINE $01E8 NUMBER_OF_SCROLL_LETTERS        EQU    10
COMMENT_LINE $01E8 scroll_text_address_start       EQU    scroll_variables_start
COMMENT_LINE $01E8 scroll_text_address_current     EQU    scroll_text_address_start + 2
COMMENT_LINE $01E8 scroll_speed                    EQU    scroll_text_address_current + 2
COMMENT_LINE $01E8 scroll_y                        EQU    scroll_speed + 1
COMMENT_LINE $01E8 scroll_left_boundary            EQU    scroll_y + 1
COMMENT_LINE $01E8 scroll_right_boundary           EQU    scroll_left_boundary + 1
COMMENT_LINE $01E8 scroll_step_width               EQU    scroll_right_boundary + 1
COMMENT_LINE $01E8 scroll_intensity                EQU    scroll_step_width + 1
COMMENT_LINE $01E8 scroll_objects                  EQU    scroll_intensity + 1
COMMENT_LINE $01E8 scroll_objects_end              EQU    (scroll_objects+(5*NUMBER_OF_SCROLL_LETTERS)+1)
COMMENT_LINE $01E8 scroll_variables_end            EQU    scroll_objects_end
COMMENT_LINE $01E8 ***************************************************************************
COMMENT_LINE $01E8 all letters start at the bottom left and end at the bottom right
COMMENT_LINE $01E8 hight of font is 9
COMMENT_LINE $01E8 width is 5 + 1 space == 6
COMMENT_LINE $01E8 (Turtle is wider!)
COMMENT $01E8 list of all single vectorlists in this
COMMENT $021C dot
COMMENT $021E turtle
COMMENT $0220 space
COMMENT $0222 move to y, x
COMMENT $0225 mode, y, x
COMMENT $0228 mode, y, x
COMMENT $022B mode, y, x
COMMENT $022E mode, y, x
COMMENT $0231 mode, y, x
COMMENT $0234 mode, y, x
COMMENT $0237 mode, y, x
COMMENT $023A mode, y, x
COMMENT $023D endmarker (1)
COMMENT $023E move to y, x
COMMENT $0241 mode, y, x
COMMENT $0244 mode, y, x
COMMENT $0247 mode, y, x
COMMENT $024A mode, y, x
COMMENT $024D mode, y, x
COMMENT $0250 mode, y, x
COMMENT $0253 mode, y, x
COMMENT $0256 endmarker (1)
COMMENT $0257 move to y, x
COMMENT $025A mode, y, x
COMMENT $025D mode, y, x
COMMENT $0260 mode, y, x
COMMENT $0263 mode, y, x
COMMENT $0266 mode, y, x
COMMENT $0269 mode, y, x
COMMENT $026C mode, y, x
COMMENT $026F mode, y, x
COMMENT $0272 mode, y, x
COMMENT $0275 endmarker (1)
COMMENT $0276 move to y, x
COMMENT $0279 mode, y, x
COMMENT $027C mode, y, x
COMMENT $027F mode, y, x
COMMENT $0282 mode, y, x
COMMENT $0285 mode, y, x
COMMENT $0288 mode, y, x
COMMENT $028B mode, y, x
COMMENT $028E endmarker (1)
COMMENT $028F move to y, x
COMMENT $0292 mode, y, x
COMMENT $0295 mode, y, x
COMMENT $0298 mode, y, x
COMMENT $029B mode, y, x
COMMENT $029E mode, y, x
COMMENT $02A1 mode, y, x
COMMENT $02A4 mode, y, x
COMMENT $02A7 mode, y, x
COMMENT $02AA endmarker (1)
COMMENT $02AB move to y, x
COMMENT $02AE mode, y, x
COMMENT $02B1 mode, y, x
COMMENT $02B4 mode, y, x
COMMENT $02B7 mode, y, x
COMMENT $02BA mode, y, x
COMMENT $02BD mode, y, x
COMMENT $02C0 endmarker (1)
COMMENT $02C1 move to y, x
COMMENT $02C4 mode, y, x
COMMENT $02C7 mode, y, x
COMMENT $02CA mode, y, x
COMMENT $02CD mode, y, x
COMMENT $02D0 mode, y, x
COMMENT $02D3 mode, y, x
COMMENT $02D6 mode, y, x
COMMENT $02D9 mode, y, x
COMMENT $02DC mode, y, x
COMMENT $02DF mode, y, x
COMMENT $02E2 mode, y, x
COMMENT $02E5 endmarker (1)
COMMENT $02E6 move to y, x
COMMENT $02E9 mode, y, x
COMMENT $02EC mode, y, x
COMMENT $02EF mode, y, x
COMMENT $02F2 mode, y, x
COMMENT $02F5 mode, y, x
COMMENT $02F8 mode, y, x
COMMENT $02FB endmarker (1)
COMMENT $02FC move to y, x
COMMENT $02FF mode, y, x
COMMENT $0302 mode, y, x
COMMENT $0305 mode, y, x
COMMENT $0308 mode, y, x
COMMENT $030B mode, y, x
COMMENT $030E mode, y, x
COMMENT $0311 endmarker (1)
COMMENT $0312 move to y, x
COMMENT $0315 mode, y, x
COMMENT $0318 mode, y, x
COMMENT $031B mode, y, x
COMMENT $031E mode, y, x
COMMENT $0321 mode, y, x
COMMENT $0324 mode, y, x
COMMENT $0327 mode, y, x
COMMENT $032A endmarker (1)
COMMENT $032B move to y, x
COMMENT $032E mode, y, x
COMMENT $0331 mode, y, x
COMMENT $0334 mode, y, x
COMMENT $0337 mode, y, x
COMMENT $033A mode, y, x
COMMENT $033D mode, y, x
COMMENT $0340 endmarker (1)
COMMENT $0341 move to y, x
COMMENT $0344 mode, y, x
COMMENT $0347 mode, y, x
COMMENT $034A mode, y, x
COMMENT $034D mode, y, x
COMMENT $0350 endmarker (1)
COMMENT $0351 move to y, x
COMMENT $0354 mode, y, x
COMMENT $0357 mode, y, x
COMMENT $035A mode, y, x
COMMENT $035D mode, y, x
COMMENT $0360 mode, y, x
COMMENT $0363 mode, y, x
COMMENT $0366 endmarker (1)
COMMENT $0367 move to y, x
COMMENT $036A mode, y, x
COMMENT $036D mode, y, x
COMMENT $0370 mode, y, x
COMMENT $0373 mode, y, x
COMMENT $0376 endmarker (1)
COMMENT $0377 move to y, x
COMMENT $037A mode, y, x
COMMENT $037D mode, y, x
COMMENT $0380 mode, y, x
COMMENT $0383 mode, y, x
COMMENT $0386 mode, y, x
COMMENT $0389 mode, y, x
COMMENT $038C mode, y, x
COMMENT $038F mode, y, x
COMMENT $0392 mode, y, x
COMMENT $0395 mode, y, x
COMMENT $0398 endmarker (1)
COMMENT $0399 move to y, x
COMMENT $039C mode, y, x
COMMENT $039F mode, y, x
COMMENT $03A2 mode, y, x
COMMENT $03A5 mode, y, x
COMMENT $03A8 mode, y, x
COMMENT $03AB mode, y, x
COMMENT $03AE mode, y, x
COMMENT $03B1 endmarker (1)
COMMENT $03B2 move to y, x
COMMENT $03B5 mode, y, x
COMMENT $03B8 mode, y, x
COMMENT $03BB mode, y, x
COMMENT $03BE mode, y, x
COMMENT $03C1 mode, y, x
COMMENT $03C4 mode, y, x
COMMENT $03C7 mode, y, x
COMMENT $03CA mode, y, x
COMMENT $03CD mode, y, x
COMMENT $03D0 mode, y, x
COMMENT $03D3 mode, y, x
COMMENT $03D6 mode, y, x
COMMENT $03D9 endmarker (1)
COMMENT $03DA move to y, x
COMMENT $03DD mode, y, x
COMMENT $03E0 mode, y, x
COMMENT $03E3 mode, y, x
COMMENT $03E6 mode, y, x
COMMENT $03E9 mode, y, x
COMMENT $03EC mode, y, x
COMMENT $03EF mode, y, x
COMMENT $03F2 mode, y, x
COMMENT $03F5 mode, y, x
COMMENT $03F8 endmarker (1)
COMMENT $03F9 move to y, x
COMMENT $03FC mode, y, x
COMMENT $03FF mode, y, x
COMMENT $0402 mode, y, x
COMMENT $0405 mode, y, x
COMMENT $0408 mode, y, x
COMMENT $040B mode, y, x
COMMENT $040E mode, y, x
COMMENT $0411 mode, y, x
COMMENT $0414 mode, y, x
COMMENT $0417 mode, y, x
COMMENT $041A mode, y, x
COMMENT $041D mode, y, x
COMMENT $0420 mode, y, x
COMMENT $0423 endmarker (1)
COMMENT $0424 move to y, x
COMMENT $0427 mode, y, x
COMMENT $042A mode, y, x
COMMENT $042D mode, y, x
COMMENT $0430 mode, y, x
COMMENT $0433 mode, y, x
COMMENT $0436 endmarker (1)
COMMENT $0437 move to y, x
COMMENT $043A mode, y, x
COMMENT $043D mode, y, x
COMMENT $0440 mode, y, x
COMMENT $0443 mode, y, x
COMMENT $0446 mode, y, x
COMMENT $0449 mode, y, x
COMMENT $044C mode, y, x
COMMENT $044F endmarker (1)
COMMENT $0450 move to y, x
COMMENT $0453 mode, y, x
COMMENT $0456 mode, y, x
COMMENT $0459 mode, y, x
COMMENT $045C mode, y, x
COMMENT $045F mode, y, x
COMMENT $0462 endmarker (1)
COMMENT $0463 move to y, x
COMMENT $0466 mode, y, x
COMMENT $0469 mode, y, x
COMMENT $046C mode, y, x
COMMENT $046F mode, y, x
COMMENT $0472 mode, y, x
COMMENT $0475 mode, y, x
COMMENT $0478 mode, y, x
COMMENT $047B endmarker (1)
COMMENT $047C move to y, x
COMMENT $047F mode, y, x
COMMENT $0482 mode, y, x
COMMENT $0485 mode, y, x
COMMENT $0488 mode, y, x
COMMENT $048B endmarker (1)
COMMENT $048C move to y, x
COMMENT $048F mode, y, x
COMMENT $0492 mode, y, x
COMMENT $0495 mode, y, x
COMMENT $0498 mode, y, x
COMMENT $049B mode, y, x
COMMENT $049E mode, y, x
COMMENT $04A1 endmarker (1)
COMMENT $04A2 move to y, x
COMMENT $04A5 mode, y, x
COMMENT $04A8 mode, y, x
COMMENT $04AB mode, y, x
COMMENT $04AE mode, y, x
COMMENT $04B1 mode, y, x
COMMENT $04B4 endmarker (1)
COMMENT $04B5 move to y, x
COMMENT $04B8 mode, y, x
COMMENT $04BB mode, y, x
COMMENT $04BE mode, y, x
COMMENT $04C1 mode, y, x
COMMENT $04C4 endmarker (1)
COMMENT $04C5 move to y, x
COMMENT $04C8 mode, y, x
COMMENT $04CB mode, y, x
COMMENT $04CE mode, y, x
COMMENT $04D1 mode, y, x
COMMENT $04D4 mode, y, x
COMMENT $04D7 mode, y, x
COMMENT $04DA mode, y, x
COMMENT $04DD mode, y, x
COMMENT $04E0 mode, y, x
COMMENT $04E3 mode, y, x
COMMENT $04E6 mode, y, x
COMMENT $04E9 mode, y, x
COMMENT $04EC mode, y, x
COMMENT $04EF mode, y, x
COMMENT $04F2 mode, y, x
COMMENT $04F5 mode, y, x
COMMENT $04F8 mode, y, x
COMMENT $04FB mode, y, x
COMMENT $04FE mode, y, x
COMMENT $0501 mode, y, x
COMMENT $0504 mode, y, x
COMMENT $0507 mode, y, x
COMMENT $050A mode, y, x
COMMENT $050D mode, y, x
COMMENT $0510 mode, y, x
COMMENT $0513 mode, y, x
COMMENT $0516 endmarker (1)
COMMENT $0517 move to y, x
COMMENT_LINE $051A DB $00, +BLOWUP*$00, +BLOWUP*$06 ; mode, y, x
COMMENT $051A endmarker (1)
RANGE $0000-$001F DP $D0
RANGE $001F-$00EB DP $C8
RANGE $00EB-$051B DP $D0
RANGE $0000-$000B DB_DATA
RANGE $000B-$000D DW_DATA
RANGE $000D-$001C DB_DATA
RANGE $001C-$0051 CODE
RANGE $0051-$00B5 DB_DATA
RANGE $00B5-$01E8 CODE
RANGE $01E8-$0222 DW_DATA
RANGE $0222-$051B DB_DATA

