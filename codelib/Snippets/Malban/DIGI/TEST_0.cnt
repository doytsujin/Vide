BANK 0
EQU $00 
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_b
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $012C T2_TIMER_PEROID_REAL
EQU $2C T2_TIMER_PEROID_LO
EQU $01 T2_TIMER_PEROID_HI
LABEL $2C01 T2_TIMER_PEROID
EQU $32 SCALE_FACTOR_DIGIT
EQU $47 RECAL_COUNTER_RESET
EQU $00 DEMO_LEFT
EQU $01 DEMO_RIGHT
EQU $02 DEMO_FROGGER
LABEL $C880 user_ram
COMMENT_LABEL $C880 well start of our ram space
LABEL $C880 user_ram_start
LABEL $C880 via_b_start
COMMENT_LABEL $C880 1
LABEL $C881 digit_sound_struct
LABEL $C881 digit_is_playing
COMMENT_LABEL $C881 1
LABEL $C882 digit_start_pos
COMMENT_LABEL $C882 1
LABEL $C883 digit_length
COMMENT_LABEL $C883 2
LABEL $C885 digit_looping
COMMENT_LABEL $C885 1
LABEL $C886 digit_current_pos
COMMENT_LABEL $C886 2
LABEL $C888 digit_end_pos
COMMENT_LABEL $C888 2
LABEL $C88A digit_counter
COMMENT_LABEL $C88A 2
LABEL $C88C digit_recal_counter
COMMENT_LABEL $C88C 1
LABEL $C88D digit_sound_struct_end
LABEL $C88D demo_state
COMMENT_LABEL $C88D 1
LABEL $02B7 music
LABEL $11BB FROGGER_START
LABEL $08B2 FROGGER_LENGTH
LABEL $00BF init_digit_sound
EQU $38 main
LABEL $00F4 wait_recal_digitj
LABEL $02A4 intensity_a_digitj
LABEL $0072 left_frog
LABEL $0051 right_frog
LABEL $00A9 frogger_only
LABEL $01B3 move_to_d_digitj
LABEL $02BD frogger_left
LABEL $0208 draw_vlc_digitj
LABEL $0307 LEFT_START
LABEL $07E2 LEFT_LENGTH
LABEL $02E2 frogger_right
LABEL $0AE9 RIGHT_START
LABEL $06D2 RIGHT_LENGTH
LABEL $00F4 wait_for_next_digit3
LABEL $0128 timer_restart_only4
LABEL $00FC wait_for_next_digit5
LABEL $011B sound_not_done4
LABEL $010A sound_done4
LABEL $0124 sound_restart_timer4
LABEL $012D makro_rts4
LABEL $0139 recal_loop13
LABEL $014D recal_loop23
LABEL $01AD timer_restart_only9
LABEL $0181 wait_for_next_digit10
LABEL $01A0 sound_not_done9
LABEL $018F sound_done9
LABEL $01A9 sound_restart_timer9
LABEL $01B2 makro_rts9
LABEL $01E9 timer_restart_only14
LABEL $01BD wait_for_next_digit15
LABEL $01DC sound_not_done14
LABEL $01CB sound_done14
LABEL $01E5 sound_restart_timer14
LABEL $01EE makro_rts14
LABEL $0203 wait_for_t113
LABEL $023C timer_restart_only19
LABEL $0210 wait_for_next_digit20
LABEL $022F sound_not_done19
LABEL $021E sound_done19
LABEL $0238 sound_restart_timer19
LABEL $0241 makro_rts19
LABEL $0243 DRAW_VLA_DIGIT18
LABEL $025D wait_for_t123
LABEL $0298 timer_restart_only24
LABEL $026C wait_for_next_digit25
LABEL $028B sound_not_done24
LABEL $027A sound_done24
LABEL $0294 sound_restart_timer24
LABEL $029D makro_rts24
EQU $19 SPRITE_BLOW_UP
COMMENT_LABEL $19 thru this sprites get a possible max of 5 * 25 = 125 (pretty near 127...)
LABEL $0307 sample_start
LABEL $1A6D *
COMMENT_LINE $0000 plays digitized sound, while displaying vectors
COMMENT_LINE $0000 first try was using interrupts, but handling them used to much
COMMENT_LINE $0000 time.
COMMENT_LINE $0000 therefor I switched to using timer 2 (without interrupt handling) only,
COMMENT_LINE $0000 that means in order to recalibrate I somehow have to keep track of
COMMENT_LINE $0000 system time
COMMENT_LINE $0000 the sound digitized routine pretty much allways uses ## cycles
COMMENT_LINE $0000 and I nearly have to call it every ### cycles
COMMENT_LINE $0000 which means I have to built
COMMENT_LINE $0000 uniform vector drawing routines, which also
COMMENT_LINE $0000 means some sort of fixed (or at least KNOWN) scalefactors to use
COMMENT_LINE $0000 (for positioning AND drawining AND recalibration!)
COMMENT_LINE $0000 I must use vector functions which allways use exactly the
COMMENT_LINE $0000 same cycles, so that I can calculate for the recalibration-needed 30000
COMMENT_LINE $0000 cycles...
COMMENT_LINE $0000 actually it is enough to insure that those function do not take longer
COMMENT_LINE $0000 than the 'pause' between our sample-byte-outputs
COMMENT_LINE $0000 samples must be:
COMMENT_LINE $0000 8 bit mono signed
COMMENT_LINE $0000 different sample-frequency can be used, provided
COMMENT_LINE $0000 the constant "T2_TIMER_PEROID_REAL" is = to a appropriate value
COMMENT_LINE $0000 for now this routine playes all samples 'backwards'
COMMENT_LINE $0000 -> so you also have to turn your samples arround :-)
COMMENT_LINE $0000 I used the 6809 assembler:
COMMENT_LINE $0000 as09 [1.11].
COMMENT_LINE $0000 Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT_LINE $0000 Available at:
COMMENT_LINE $0000 http://www.falstaff.demon.co.uk/cross.html
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 This is the single most important variable...
COMMENT_LINE $0000 for different sample frequency, THIS must be adjusted...
COMMENT_LINE $0000 140 for 8KHz samples
COMMENT_LINE $0000 300 for 4KHz samples
COMMENT_LINE $0000 ??? for ?KHz samples
COMMENT_LINE $0000 we must use a fixed scale value, since  somehow we must
COMMENT_LINE $0000 calculate the wait_recal
COMMENT_LINE $0000 (actually we MUST asure, that we stay not for more time in the
COMMENT_LINE $0000 move_to_d or draw_vlc functions, this is sort of a delimiter)
COMMENT_LINE $0000 it should be ok, to use smaller values,
COMMENT_LINE $0000 this (50) value was ment for use with 8kHz samples,
COMMENT_LINE $0000 for 4kHz samples it could probably be doubled...
COMMENT_LINE $0000 (without changing anything else)
COMMENT_LINE $0000 30000 cycles per wait_recal
COMMENT_LINE $0000 divided by T2_TIMER_PEROID_REAL + length of one digital sample play + offset for use of jsr's...
COMMENT_LINE $0000 about 70  for 4 kHz
COMMENT_LINE $0000 about 135 for 8 kHz
COMMENT_LINE $0000 this means only this many times our samples can be called
COMMENT_LINE $0000 this also means the way it is implemented now...
COMMENT_LINE $0000 only about that many vectors can be drawn
COMMENT_LINE $0000 in order to be able to draw more vectors, the DRAW_VLC
COMMENT_LINE $0000 function must be changed, so that more than just one vector is
COMMENT_LINE $0000 drawn between two samples (can easily be done)
COMMENT_LINE $0000 sort of a state machine :-), only relevant for the 'demo'
COMMENT_LINE $0000 these are the three states!
COMMENT_LINE $0000 user variable definitions
COMMENT_LINE $0000 $c880
COMMENT_LINE $0000 this sets the timer to our restart value
COMMENT $0000 name of macro
COMMENT $0000 load the timer 2 value we calculated
COMMENT $0000 and set the timer
COMMENT $0000 end of macro
COMMENT_LINE $0000 this sets VIA B to our known sample state...
COMMENT $0000 name of macro
COMMENT $0000 load the calculated VIA B
COMMENT $0000 write back to reg B in 6522
COMMENT $0000 end of macro
COMMENT_LINE $0000 this calculates our sample state for VIA B
COMMENT $0000 name of macro
COMMENT $0000 data reg B from 6522
COMMENT $0000 save top 5 bits, mask off bottom 3
COMMENT $0000 set S/H, SEL 0, SEL 1
COMMENT $0000 and remember it
COMMENT $0000 end of macro
COMMENT_LINE $0000 this is a waiter, for our current sample-byte to finnish
COMMENT $0000 name of macro
COMMENT $0000 B-reg = T2 interrupt bit
COMMENT $0000 Wait for T2 to time out
COMMENT $0000 repeat
COMMENT $0000 end of macro
COMMENT_LINE $0000 well, not really a 'digit' function... but it does what it's called
COMMENT $0000 Save intensity in $C827
COMMENT $0000 Store intensity in D/A
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because ?
COMMENT $0000 turn off mux
COMMENT_LINE $0000 Kills D
COMMENT_LINE $0000 must ALLWAYS have Y, U, U contains the length of the sample, Y the position
COMMENT_LINE $0000 must ALLWAYS have Timer 2
COMMENT_LINE $0000 Kills and VIA port B and A
COMMENT_LINE $0000 cycles left = 130 (with clays digitized sound = 8Khz)
COMMENT_LINE $0000 cycles left = 300 (4Khz)
COMMENT_LINE $0000 uses 27+30 cycles when completely done, without restart
COMMENT_LINE $0000 uses 51+30 cycles when completely done, with restart
COMMENT_LINE $0000 uses 32+30 cycles when one digitized sound byte was played.
COMMENT_LINE $0000 + 9
COMMENT_LINE $0000 => Interrupts are not worth it...
COMMENT $0000 name of macro
COMMENT_LINE $0000 load current digit byte and increment counter
COMMENT $0000 decrement our counter, used for wait_recal
COMMENT $0000 is there a digital sample to be played?
COMMENT $0000 no, than jump out of here
COMMENT $0000 otherwise we wait till the last played
COMMENT_LINE $0000 sample-byte is finnished
COMMENT $0000 this one is in truth only a U=U-1
COMMENT $0000 if it is zero, than we are finnished
COMMENT $0000 with this sample, otherwise we continue further below
COMMENT_LINE $0000 if we are done, should we restart?
COMMENT $0000 is this sample a looping one?
COMMENT $0000 store it to is_playing
COMMENT $0000 if none looping... we are done
COMMENT_LINE $0000 but we still must use the timer
COMMENT_LINE $0000 ok, for restart, we only change current position
COMMENT $0000 load the counter to U
COMMENT $0000 load the start position
COMMENT_LINE $0000 this is the end_position of the sample,
COMMENT_LINE $0000 since we go backwards
COMMENT $0000 and restart the timer, next byte
COMMENT_LINE $0000 is played next round...
COMMENT_LINE $0000 here our normal 'digit_byte_playing_section'
COMMENT $0000 load the next sample_byte to A
COMMENT_LINE $0000 and store it to the 6522 -> PSG
COMMENT $0000 store in reg A in 6522 (DAC)
COMMENT_LINE $0000 following must come after the above, or we
COMMENT_LINE $0000 put noise to the psg,
COMMENT_LINE $0000 likewise, before storing anything else to
COMMENT_LINE $0000 port A, we will disable the connection to PSG
COMMENT $0000 this sets the MUX of 6522 to PSG
COMMENT $0000 Clear shift regigster, why ???
COMMENT_LINE $0000 without it, the display 'wobbles' a bit???
COMMENT $0000 and disable the mux, so no junk will
COMMENT_LINE $0000 enter our PSG-DAC...
COMMENT $0000 restart timer...
COMMENT $0000 end of macro
COMMENT_LINE $0000 uses for a scalefactor of 50
COMMENT_LINE $0000 about 100+... cycles (could still be optimized further)
COMMENT $0000 save the position
COMMENT $0000 play one sample_byte
COMMENT $0000 restore position
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 t1 flag
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses for a scalefactor of 50
COMMENT_LINE $0000 exactly 51 cycles (could still be optimized further)
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux switched
COMMENT $0000 Point to next coordinate pair X=X+2
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor), enabling t1
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses 8 cycles
COMMENT_LINE $0000 (in relation to the last done digital output)
COMMENT_LINE $0000 only one vector drawn for now...
COMMENT_LINE $0000 could probably be doubled (2*51 < 130)
COMMENT $0000 play one sample-byte
COMMENT $0000 load # of lines in this list
COMMENT $0000 helper RAM, here we store the # of lines
COMMENT $0000 load y, x
COMMENT $0000 draw the line
COMMENT $0000 and play one sample-byte
COMMENT $0000 load line count
COMMENT $0000 decrement it
COMMENT $0000 go back for more points if not below 0
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses 0 cycles
COMMENT_LINE $0000 (in relation to the last done digital output)
COMMENT_LINE $0000 a wait_recal routine for the sample... output
COMMENT $0000 play one sample-byte
COMMENT $0000 load # of time_outs
COMMENT $0000 # should we recalibrate now?
COMMENT $0000 if not yet... loop till the time is right
COMMENT_LINE $0000 now we move out of bounds
COMMENT_LINE $0000 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0000 loop 5 times
COMMENT $0000 store that
COMMENT $0000 load the next pos, super long saturation
COMMENT $0000 move to d -> must be achieved
COMMENT $0000 done yet with out 5?
COMMENT $0000 not yet? than loop
COMMENT $0000 blank low and zero low
COMMENT_LINE $0000 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0000 loop 5 times
COMMENT $0000 store that
COMMENT $0000 load the next pos, super long saturation
COMMENT $0000 move to d -> must be achieved
COMMENT $0000 done yet with out 5?
COMMENT $0000 not yet? than loop
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 mux=1, disable mux
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mux
COMMENT $0000 load our calculated reset value
COMMENT $0000 and store it to our timer counter...
COMMENT $0000 rethink our VIAB value
COMMENT $0000 and do one sample-byte
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $0029 end of game header
COMMENT_LINE $002A ***************************************************************************
COMMENT_LINE $002A here the cartridge program starts off
COMMENT $002A position of sample
FORCE_SYMBOL $002A FROGGER_START
COMMENT $002D length of sample
FORCE_SYMBOL $002D FROGGER_LENGTH
COMMENT $0030 init it!
FORCE_SYMBOL $0030 init_digit_sound
COMMENT $0033 init state'machine' to FROGGER
FORCE_SYMBOL $0033 DEMO_FROGGER
COMMENT $0035 and set it
FORCE_SYMBOL $0035 demo_state
COMMENT_LINE $0038 first allways is a wait_recal, as usual
COMMENT $0038 same as makro: WAIT_RECAL_DIGIT
FORCE_SYMBOL $0038 wait_recal_digitj
COMMENT_LINE $003B set some intensity for our to be displayed vectors
COMMENT $003B seems about bright enough
FORCE_NO_SYMBOL $003B
COMMENT $003D and set the intensity
FORCE_SYMBOL $003D intensity_a_digitj
COMMENT_LINE $0040 same as makro: INTENSITY_A_DIGIT
COMMENT_LINE $0040 and jump to the state we are in...
COMMENT $0040 load current state
FORCE_SYMBOL $0040 demo_state
COMMENT $0043 is it LEFT?
FORCE_SYMBOL $0043 DEMO_LEFT
COMMENT $0045 than go there, otherwise
COMMENT $0047 is it RIGHT?
FORCE_SYMBOL $0047 DEMO_RIGHT
COMMENT $0049 than go there, otherwise
COMMENT $004B is it FROGGER?
FORCE_SYMBOL $004B DEMO_FROGGER
COMMENT $004D than go there, otherwise
COMMENT $004F default... should never be here
COMMENT_LINE $0051 this draws the right frog
COMMENT $0051 some position, y=0, x=$60
FORCE_NO_SYMBOL $0051
COMMENT $0054 move to D
FORCE_SYMBOL $0054 move_to_d_digitj
COMMENT_LINE $0057 same as makro: MOVE_TO_D_DIGIT
COMMENT $0057 load vector list
FORCE_SYMBOL $0057 frogger_left
COMMENT $005A and display it
FORCE_SYMBOL $005A draw_vlc_digitj
COMMENT_LINE $005D same as makro: DRAW_VLC_DIGIT
COMMENT $005D are we still playing a sample?
FORCE_SYMBOL $005D digit_is_playing
COMMENT $0060 yep? than go back to main
COMMENT $0062 otherwise initialize the next state
FORCE_SYMBOL $0062 DEMO_LEFT
COMMENT $0064 to LEFT and store it here
FORCE_SYMBOL $0064 demo_state
COMMENT $0067 position of LEFT-sample
FORCE_SYMBOL $0067 LEFT_START
COMMENT $006A length of LEFT-sample
FORCE_SYMBOL $006A LEFT_LENGTH
COMMENT $006D and initialize the sound...
FORCE_SYMBOL $006D init_digit_sound
COMMENT $0070 back to main loop
COMMENT_LINE $0072 this draws the right frog
COMMENT_LINE $0072 first move it, this is cumbersome, due to the fixed
COMMENT_LINE $0072 scale factor
COMMENT $0072 load y
COMMENT $0074 load x
COMMENT $0076 and move there...
FORCE_SYMBOL $0076 move_to_d_digitj
COMMENT_LINE $0079 same as makro: MOVE_TO_D_DIGIT
COMMENT $0079 load y
COMMENT $007B load x
COMMENT $007D and move there...
FORCE_SYMBOL $007D move_to_d_digitj
COMMENT_LINE $0080 same as makro: MOVE_TO_D_DIGIT
COMMENT $0080 load y
COMMENT $0082 load x
COMMENT $0084 and move there...
FORCE_SYMBOL $0084 move_to_d_digitj
COMMENT_LINE $0087 same as makro: MOVE_TO_D_DIGIT
COMMENT $0087 load y
COMMENT $0089 load x
COMMENT $008B and move there...
FORCE_SYMBOL $008B move_to_d_digitj
COMMENT_LINE $008E same as makro: MOVE_TO_D_DIGIT
COMMENT $008E load right vector list
FORCE_SYMBOL $008E frogger_right
COMMENT $0091 and draw it
FORCE_SYMBOL $0091 draw_vlc_digitj
COMMENT_LINE $0094 same as makro: DRAW_VLC_DIGIT
COMMENT $0094 are we still playing a sample?
FORCE_SYMBOL $0094 digit_is_playing
COMMENT $0097 yep? than go back to main
COMMENT $0099 otherwise initialize the next state
FORCE_SYMBOL $0099 DEMO_FROGGER
COMMENT $009B to FROGGER and store it here
FORCE_SYMBOL $009B demo_state
COMMENT $009E position of FROGGER-sample
FORCE_SYMBOL $009E FROGGER_START
COMMENT $00A1 length of FROGGER-sample
FORCE_SYMBOL $00A1 FROGGER_LENGTH
COMMENT $00A4 and initialize the sound...
FORCE_SYMBOL $00A4 init_digit_sound
COMMENT $00A7 back to main loop
COMMENT $00A9 are we still playing a sample?
FORCE_SYMBOL $00A9 digit_is_playing
COMMENT $00AC yep? than go back to main
COMMENT $00AE otherwise initialize the next state
FORCE_SYMBOL $00AE DEMO_RIGHT
COMMENT $00B0 to RIGHT and store it here
FORCE_SYMBOL $00B0 demo_state
COMMENT $00B3 position of RIGHT-sample
FORCE_SYMBOL $00B3 RIGHT_START
COMMENT $00B6 length of RIGHT-sample
FORCE_SYMBOL $00B6 RIGHT_LENGTH
COMMENT $00B9 and initialize the sound...
FORCE_SYMBOL $00B9 init_digit_sound
COMMENT $00BC back to main loop
COMMENT_LINE $00BF ***************************************************************************
COMMENT_LINE $00BF expects startposition in D
COMMENT_LINE $00BF expects length in X
COMMENT_LINE $00BF sets up Y and U register, these should under no circumstances be destroyed
COMMENT $00BF store new start position
FORCE_SYMBOL $00BF digit_start_pos
COMMENT $00C2 store the length
FORCE_SYMBOL $00C2 digit_length
COMMENT $00C5 same in counter...
FORCE_SYMBOL $00C5 digit_counter
COMMENT $00C8 move X to D
COMMENT $00CA calculate end position
FORCE_SYMBOL $00CA digit_start_pos
COMMENT $00CD and store it
FORCE_SYMBOL $00CD digit_end_pos
COMMENT $00D0 looping per default is OFF
FORCE_NO_SYMBOL $00D0
COMMENT $00D2 store it
FORCE_SYMBOL $00D2 digit_looping
COMMENT $00D5 sound is playing is ON
FORCE_NO_SYMBOL $00D5
COMMENT $00D7 sound is playing
FORCE_SYMBOL $00D7 digit_is_playing
COMMENT $00DA calculate out first VIA B poke
COMMENT $00DA data reg B from 6522
FORCE_SYMBOL $00DA VIA_port_b
COMMENT $00DC save top 5 bits, mask off bottom 3
FORCE_NO_SYMBOL $00DC
COMMENT $00DE set S/H, SEL 0, SEL 1
FORCE_NO_SYMBOL $00DE
COMMENT $00E0 and remember it
FORCE_SYMBOL $00E0 via_b_start
COMMENT $00E3 initialize U to length, this will be counted down...
FORCE_SYMBOL $00E3 digit_counter
COMMENT $00E6 initialize Y to position in sample data
FORCE_SYMBOL $00E6 digit_end_pos
COMMENT $00EA set the fixed scale factor we will use...
FORCE_SYMBOL $00EA SCALE_FACTOR_DIGIT
COMMENT $00EC move to time 1 lo, this means scaling
FORCE_SYMBOL $00EC VIA_t1_cnt_lo
COMMENT $00EE set our timer 2 for the first time...
COMMENT $00EE load the timer 2 value we calculated
FORCE_SYMBOL $00EE T2_TIMER_PEROID
COMMENT $00F1 and set the timer
FORCE_SYMBOL $00F1 VIA_t2_lo
COMMENT $00F3 back
COMMENT_LINE $00F4 ***************************************************************************
COMMENT_LINE $00F4 now the makros from above as functions...
COMMENT_LINE $00F4 shortens the source...
COMMENT_LINE $00F4 ***************************************************************************
COMMENT $00F4 play one sample-byte
COMMENT_LINE $00F4 load current digit byte and increment counter
COMMENT $00F4 decrement our counter, used for wait_recal
FORCE_SYMBOL $00F4 digit_recal_counter
COMMENT $00F7 is there a digital sample to be played?
FORCE_SYMBOL $00F7 digit_is_playing
COMMENT $00FA no, than jump out of here
COMMENT $00FC otherwise we wait till the last played
COMMENT $00FC B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $00FC
COMMENT $00FE Wait for T2 to time out
FORCE_SYMBOL $00FE VIA_int_flags
COMMENT $0100 repeat
COMMENT_LINE $0102 sample-byte is finnished
COMMENT $0102 this one is in truth only a U=U-1
COMMENT $0104 if it is zero, than we are finnished
FORCE_NO_SYMBOL $0104
COMMENT $0108 with this sample, otherwise we continue further below
COMMENT_LINE $010A if we are done, should we restart?
COMMENT $010A is this sample a looping one?
FORCE_SYMBOL $010A digit_looping
COMMENT $010D store it to is_playing
FORCE_SYMBOL $010D digit_is_playing
COMMENT $0110 if none looping... we are done
COMMENT_LINE $0112 but we still must use the timer
COMMENT_LINE $0112 ok, for restart, we only change current position
COMMENT $0112 load the counter to U
FORCE_SYMBOL $0112 digit_counter
COMMENT $0115 load the start position
FORCE_SYMBOL $0115 digit_end_pos
COMMENT_LINE $0119 this is the end_position of the sample,
COMMENT_LINE $0119 since we go backwards
COMMENT $0119 and restart the timer, next byte
COMMENT_LINE $011B is played next round...
COMMENT_LINE $011B here our normal 'digit_byte_playing_section'
COMMENT $011B load the next sample_byte to A
COMMENT_LINE $011D and store it to the 6522 -> PSG
COMMENT $011D store in reg A in 6522 (DAC)
FORCE_SYMBOL $011D VIA_port_a
COMMENT_LINE $011F following must come after the above, or we
COMMENT_LINE $011F put noise to the psg,
COMMENT_LINE $011F likewise, before storing anything else to
COMMENT_LINE $011F port A, we will disable the connection to PSG
COMMENT $011F this sets the MUX of 6522 to PSG
COMMENT $011F load the calculated VIA B
FORCE_SYMBOL $011F via_b_start
COMMENT $0122 write back to reg B in 6522
FORCE_SYMBOL $0122 VIA_port_b
COMMENT $0124 Clear shift regigster, why ???
FORCE_SYMBOL $0124 VIA_shift_reg
COMMENT_LINE $0126 without it, the display 'wobbles' a bit???
COMMENT $0126 and disable the mux, so no junk will
FORCE_SYMBOL $0126 VIA_port_b
COMMENT_LINE $0128 enter our PSG-DAC...
COMMENT $0128 restart timer...
COMMENT $0128 load the timer 2 value we calculated
FORCE_SYMBOL $0128 T2_TIMER_PEROID
COMMENT $012B and set the timer
FORCE_SYMBOL $012B VIA_t2_lo
COMMENT $012D load # of time_outs
FORCE_SYMBOL $012D digit_recal_counter
COMMENT $0130 # should we recalibrate now?
FORCE_SYMBOL $0130 RECAL_COUNTER_RESET
COMMENT $0132 if not yet... loop till the time is right
COMMENT_LINE $0134 now we move out of bounds
COMMENT_LINE $0134 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0134 loop 5 times
FORCE_NO_SYMBOL $0134
COMMENT $0136 store that
FORCE_NO_SYMBOL $0136
COMMENT $0139 load the next pos, super long saturation
FORCE_NO_SYMBOL $0139
COMMENT $013C move to d -> must be achieved
FORCE_SYMBOL $013C move_to_d_digitj
COMMENT $013F done yet with out 5?
FORCE_NO_SYMBOL $013F
COMMENT $0142 not yet? than loop
FORCE_NO_SYMBOL $0144
COMMENT $0146 blank low and zero low
FORCE_SYMBOL $0146 VIA_cntl
COMMENT_LINE $0148 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0148 loop 5 times
FORCE_NO_SYMBOL $0148
COMMENT $014A store that
FORCE_NO_SYMBOL $014A
COMMENT $014D load the next pos, super long saturation
FORCE_NO_SYMBOL $014D
COMMENT $0150 move to d -> must be achieved
FORCE_SYMBOL $0150 move_to_d_digitj
COMMENT $0153 done yet with out 5?
FORCE_NO_SYMBOL $0153
COMMENT $0156 not yet? than loop
FORCE_NO_SYMBOL $0158
COMMENT $015A /BLANK low and /ZERO low
FORCE_SYMBOL $015A VIA_cntl
FORCE_NO_SYMBOL $015C
COMMENT $015F mux=1, disable mux
FORCE_SYMBOL $015F VIA_port_b
COMMENT $0161 clear D/A register
FORCE_SYMBOL $0161 VIA_port_a
COMMENT $0163 mux=1, enable mux
FORCE_SYMBOL $0163 VIA_port_b
COMMENT $0165 do it again
FORCE_SYMBOL $0165 VIA_port_b
FORCE_NO_SYMBOL $0167
COMMENT $0169 disable mux
FORCE_SYMBOL $0169 VIA_port_b
COMMENT $016B load our calculated reset value
FORCE_SYMBOL $016B RECAL_COUNTER_RESET
COMMENT $016D and store it to our timer counter...
FORCE_SYMBOL $016D digit_recal_counter
COMMENT $0170 rethink our VIAB value
COMMENT $0170 data reg B from 6522
FORCE_SYMBOL $0170 VIA_port_b
COMMENT $0172 save top 5 bits, mask off bottom 3
FORCE_NO_SYMBOL $0172
COMMENT $0174 set S/H, SEL 0, SEL 1
FORCE_NO_SYMBOL $0174
COMMENT $0176 and remember it
FORCE_SYMBOL $0176 via_b_start
COMMENT $0179 and do one sample-byte
COMMENT_LINE $0179 load current digit byte and increment counter
COMMENT $0179 decrement our counter, used for wait_recal
FORCE_SYMBOL $0179 digit_recal_counter
COMMENT $017C is there a digital sample to be played?
FORCE_SYMBOL $017C digit_is_playing
COMMENT $017F no, than jump out of here
COMMENT $0181 otherwise we wait till the last played
COMMENT $0181 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0181
COMMENT $0183 Wait for T2 to time out
FORCE_SYMBOL $0183 VIA_int_flags
COMMENT $0185 repeat
COMMENT_LINE $0187 sample-byte is finnished
COMMENT $0187 this one is in truth only a U=U-1
COMMENT $0189 if it is zero, than we are finnished
FORCE_NO_SYMBOL $0189
COMMENT $018D with this sample, otherwise we continue further below
COMMENT_LINE $018F if we are done, should we restart?
COMMENT $018F is this sample a looping one?
FORCE_SYMBOL $018F digit_looping
COMMENT $0192 store it to is_playing
FORCE_SYMBOL $0192 digit_is_playing
COMMENT $0195 if none looping... we are done
COMMENT_LINE $0197 but we still must use the timer
COMMENT_LINE $0197 ok, for restart, we only change current position
COMMENT $0197 load the counter to U
FORCE_SYMBOL $0197 digit_counter
COMMENT $019A load the start position
FORCE_SYMBOL $019A digit_end_pos
COMMENT_LINE $019E this is the end_position of the sample,
COMMENT_LINE $019E since we go backwards
COMMENT $019E and restart the timer, next byte
COMMENT_LINE $01A0 is played next round...
COMMENT_LINE $01A0 here our normal 'digit_byte_playing_section'
COMMENT $01A0 load the next sample_byte to A
COMMENT_LINE $01A2 and store it to the 6522 -> PSG
COMMENT $01A2 store in reg A in 6522 (DAC)
FORCE_SYMBOL $01A2 VIA_port_a
COMMENT_LINE $01A4 following must come after the above, or we
COMMENT_LINE $01A4 put noise to the psg,
COMMENT_LINE $01A4 likewise, before storing anything else to
COMMENT_LINE $01A4 port A, we will disable the connection to PSG
COMMENT $01A4 this sets the MUX of 6522 to PSG
COMMENT $01A4 load the calculated VIA B
FORCE_SYMBOL $01A4 via_b_start
COMMENT $01A7 write back to reg B in 6522
FORCE_SYMBOL $01A7 VIA_port_b
COMMENT $01A9 Clear shift regigster, why ???
FORCE_SYMBOL $01A9 VIA_shift_reg
COMMENT_LINE $01AB without it, the display 'wobbles' a bit???
COMMENT $01AB and disable the mux, so no junk will
FORCE_SYMBOL $01AB VIA_port_b
COMMENT_LINE $01AD enter our PSG-DAC...
COMMENT $01AD restart timer...
COMMENT $01AD load the timer 2 value we calculated
FORCE_SYMBOL $01AD T2_TIMER_PEROID
COMMENT $01B0 and set the timer
FORCE_SYMBOL $01B0 VIA_t2_lo
COMMENT_LINE $01B3 ***************************************************************************
COMMENT_LINE $01B3 position in D
COMMENT $01B3 save the position
COMMENT $01B5 play one sample_byte
COMMENT_LINE $01B5 load current digit byte and increment counter
COMMENT $01B5 decrement our counter, used for wait_recal
FORCE_SYMBOL $01B5 digit_recal_counter
COMMENT $01B8 is there a digital sample to be played?
FORCE_SYMBOL $01B8 digit_is_playing
COMMENT $01BB no, than jump out of here
COMMENT $01BD otherwise we wait till the last played
COMMENT $01BD B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $01BD
COMMENT $01BF Wait for T2 to time out
FORCE_SYMBOL $01BF VIA_int_flags
COMMENT $01C1 repeat
COMMENT_LINE $01C3 sample-byte is finnished
COMMENT $01C3 this one is in truth only a U=U-1
COMMENT $01C5 if it is zero, than we are finnished
FORCE_NO_SYMBOL $01C5
COMMENT $01C9 with this sample, otherwise we continue further below
COMMENT_LINE $01CB if we are done, should we restart?
COMMENT $01CB is this sample a looping one?
FORCE_SYMBOL $01CB digit_looping
COMMENT $01CE store it to is_playing
FORCE_SYMBOL $01CE digit_is_playing
COMMENT $01D1 if none looping... we are done
COMMENT_LINE $01D3 but we still must use the timer
COMMENT_LINE $01D3 ok, for restart, we only change current position
COMMENT $01D3 load the counter to U
FORCE_SYMBOL $01D3 digit_counter
COMMENT $01D6 load the start position
FORCE_SYMBOL $01D6 digit_end_pos
COMMENT_LINE $01DA this is the end_position of the sample,
COMMENT_LINE $01DA since we go backwards
COMMENT $01DA and restart the timer, next byte
COMMENT_LINE $01DC is played next round...
COMMENT_LINE $01DC here our normal 'digit_byte_playing_section'
COMMENT $01DC load the next sample_byte to A
COMMENT_LINE $01DE and store it to the 6522 -> PSG
COMMENT $01DE store in reg A in 6522 (DAC)
FORCE_SYMBOL $01DE VIA_port_a
COMMENT_LINE $01E0 following must come after the above, or we
COMMENT_LINE $01E0 put noise to the psg,
COMMENT_LINE $01E0 likewise, before storing anything else to
COMMENT_LINE $01E0 port A, we will disable the connection to PSG
COMMENT $01E0 this sets the MUX of 6522 to PSG
COMMENT $01E0 load the calculated VIA B
FORCE_SYMBOL $01E0 via_b_start
COMMENT $01E3 write back to reg B in 6522
FORCE_SYMBOL $01E3 VIA_port_b
COMMENT $01E5 Clear shift regigster, why ???
FORCE_SYMBOL $01E5 VIA_shift_reg
COMMENT_LINE $01E7 without it, the display 'wobbles' a bit???
COMMENT $01E7 and disable the mux, so no junk will
FORCE_SYMBOL $01E7 VIA_port_b
COMMENT_LINE $01E9 enter our PSG-DAC...
COMMENT $01E9 restart timer...
COMMENT $01E9 load the timer 2 value we calculated
FORCE_SYMBOL $01E9 T2_TIMER_PEROID
COMMENT $01EC and set the timer
FORCE_SYMBOL $01EC VIA_t2_lo
COMMENT $01EE restore position
COMMENT $01F0 Store Y in D/A register
FORCE_SYMBOL $01F0 VIA_port_a
COMMENT $01F2 Blank low, zero high?
FORCE_NO_SYMBOL $01F2
FORCE_SYMBOL $01F4 VIA_cntl
COMMENT $01F7 Enable mux
FORCE_SYMBOL $01F7 VIA_port_b
COMMENT $01F9 Clear shift regigster
FORCE_SYMBOL $01F9 VIA_shift_reg
COMMENT $01FB Disable mux
FORCE_SYMBOL $01FB VIA_port_b
COMMENT $01FD Store X in D/A register
FORCE_SYMBOL $01FD VIA_port_a
COMMENT $01FF enable timer
FORCE_SYMBOL $01FF VIA_t1_cnt_hi
COMMENT $0201 t1 flag
FORCE_NO_SYMBOL $0201
FORCE_SYMBOL $0203 VIA_int_flags
COMMENT_LINE $0208 ***************************************************************************
COMMENT_LINE $0208 vector list in X
COMMENT $0208 play one sample-byte
COMMENT_LINE $0208 load current digit byte and increment counter
COMMENT $0208 decrement our counter, used for wait_recal
FORCE_SYMBOL $0208 digit_recal_counter
COMMENT $020B is there a digital sample to be played?
FORCE_SYMBOL $020B digit_is_playing
COMMENT $020E no, than jump out of here
COMMENT $0210 otherwise we wait till the last played
COMMENT $0210 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0210
COMMENT $0212 Wait for T2 to time out
FORCE_SYMBOL $0212 VIA_int_flags
COMMENT $0214 repeat
COMMENT_LINE $0216 sample-byte is finnished
COMMENT $0216 this one is in truth only a U=U-1
COMMENT $0218 if it is zero, than we are finnished
FORCE_NO_SYMBOL $0218
COMMENT $021C with this sample, otherwise we continue further below
COMMENT_LINE $021E if we are done, should we restart?
COMMENT $021E is this sample a looping one?
FORCE_SYMBOL $021E digit_looping
COMMENT $0221 store it to is_playing
FORCE_SYMBOL $0221 digit_is_playing
COMMENT $0224 if none looping... we are done
COMMENT_LINE $0226 but we still must use the timer
COMMENT_LINE $0226 ok, for restart, we only change current position
COMMENT $0226 load the counter to U
FORCE_SYMBOL $0226 digit_counter
COMMENT $0229 load the start position
FORCE_SYMBOL $0229 digit_end_pos
COMMENT_LINE $022D this is the end_position of the sample,
COMMENT_LINE $022D since we go backwards
COMMENT $022D and restart the timer, next byte
COMMENT_LINE $022F is played next round...
COMMENT_LINE $022F here our normal 'digit_byte_playing_section'
COMMENT $022F load the next sample_byte to A
COMMENT_LINE $0231 and store it to the 6522 -> PSG
COMMENT $0231 store in reg A in 6522 (DAC)
FORCE_SYMBOL $0231 VIA_port_a
COMMENT_LINE $0233 following must come after the above, or we
COMMENT_LINE $0233 put noise to the psg,
COMMENT_LINE $0233 likewise, before storing anything else to
COMMENT_LINE $0233 port A, we will disable the connection to PSG
COMMENT $0233 this sets the MUX of 6522 to PSG
COMMENT $0233 load the calculated VIA B
FORCE_SYMBOL $0233 via_b_start
COMMENT $0236 write back to reg B in 6522
FORCE_SYMBOL $0236 VIA_port_b
COMMENT $0238 Clear shift regigster, why ???
FORCE_SYMBOL $0238 VIA_shift_reg
COMMENT_LINE $023A without it, the display 'wobbles' a bit???
COMMENT $023A and disable the mux, so no junk will
FORCE_SYMBOL $023A VIA_port_b
COMMENT_LINE $023C enter our PSG-DAC...
COMMENT $023C restart timer...
COMMENT $023C load the timer 2 value we calculated
FORCE_SYMBOL $023C T2_TIMER_PEROID
COMMENT $023F and set the timer
FORCE_SYMBOL $023F VIA_t2_lo
COMMENT $0241 load # of lines in this list
COMMENT $0243 helper RAM, here we store the # of lines
FORCE_NO_SYMBOL $0243
COMMENT $0246 load y, x
FORCE_NO_SYMBOL $0246
COMMENT $0248 draw the line
COMMENT $0248 Send Y to A/D
FORCE_SYMBOL $0248 VIA_port_a
COMMENT $024A Enable mux switched
FORCE_SYMBOL $024A VIA_port_b
COMMENT $024C Point to next coordinate pair X=X+2
FORCE_NO_SYMBOL $024C
COMMENT $024E Wait a moment
COMMENT $024F Disable mux
FORCE_SYMBOL $024F VIA_port_b
COMMENT $0251 Send X to A/D
FORCE_SYMBOL $0251 VIA_port_a
COMMENT $0253 Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $0253
COMMENT $0256 Put pattern in shift register
FORCE_SYMBOL $0256 VIA_shift_reg
COMMENT $0258 Set T1H (scale factor), enabling t1
FORCE_SYMBOL $0258 VIA_t1_cnt_hi
COMMENT $025A B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $025A
FORCE_SYMBOL $025D VIA_int_flags
COMMENT $0262 Clear shift register (blank output)
FORCE_SYMBOL $0262 VIA_shift_reg
COMMENT $0264 and play one sample-byte
COMMENT_LINE $0264 load current digit byte and increment counter
COMMENT $0264 decrement our counter, used for wait_recal
FORCE_SYMBOL $0264 digit_recal_counter
COMMENT $0267 is there a digital sample to be played?
FORCE_SYMBOL $0267 digit_is_playing
COMMENT $026A no, than jump out of here
COMMENT $026C otherwise we wait till the last played
COMMENT $026C B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $026C
COMMENT $026E Wait for T2 to time out
FORCE_SYMBOL $026E VIA_int_flags
COMMENT $0270 repeat
COMMENT_LINE $0272 sample-byte is finnished
COMMENT $0272 this one is in truth only a U=U-1
COMMENT $0274 if it is zero, than we are finnished
FORCE_NO_SYMBOL $0274
COMMENT $0278 with this sample, otherwise we continue further below
COMMENT_LINE $027A if we are done, should we restart?
COMMENT $027A is this sample a looping one?
FORCE_SYMBOL $027A digit_looping
COMMENT $027D store it to is_playing
FORCE_SYMBOL $027D digit_is_playing
COMMENT $0280 if none looping... we are done
COMMENT_LINE $0282 but we still must use the timer
COMMENT_LINE $0282 ok, for restart, we only change current position
COMMENT $0282 load the counter to U
FORCE_SYMBOL $0282 digit_counter
COMMENT $0285 load the start position
FORCE_SYMBOL $0285 digit_end_pos
COMMENT_LINE $0289 this is the end_position of the sample,
COMMENT_LINE $0289 since we go backwards
COMMENT $0289 and restart the timer, next byte
COMMENT_LINE $028B is played next round...
COMMENT_LINE $028B here our normal 'digit_byte_playing_section'
COMMENT $028B load the next sample_byte to A
COMMENT_LINE $028D and store it to the 6522 -> PSG
COMMENT $028D store in reg A in 6522 (DAC)
FORCE_SYMBOL $028D VIA_port_a
COMMENT_LINE $028F following must come after the above, or we
COMMENT_LINE $028F put noise to the psg,
COMMENT_LINE $028F likewise, before storing anything else to
COMMENT_LINE $028F port A, we will disable the connection to PSG
COMMENT $028F this sets the MUX of 6522 to PSG
COMMENT $028F load the calculated VIA B
FORCE_SYMBOL $028F via_b_start
COMMENT $0292 write back to reg B in 6522
FORCE_SYMBOL $0292 VIA_port_b
COMMENT $0294 Clear shift regigster, why ???
FORCE_SYMBOL $0294 VIA_shift_reg
COMMENT_LINE $0296 without it, the display 'wobbles' a bit???
COMMENT $0296 and disable the mux, so no junk will
FORCE_SYMBOL $0296 VIA_port_b
COMMENT_LINE $0298 enter our PSG-DAC...
COMMENT $0298 restart timer...
COMMENT $0298 load the timer 2 value we calculated
FORCE_SYMBOL $0298 T2_TIMER_PEROID
COMMENT $029B and set the timer
FORCE_SYMBOL $029B VIA_t2_lo
COMMENT $029D load line count
FORCE_NO_SYMBOL $029D
COMMENT $02A0 decrement it
COMMENT $02A1 go back for more points if not below 0
COMMENT_LINE $02A4 ***************************************************************************
COMMENT_LINE $02A4 intensity in A
COMMENT $02A4 Save intensity in $C827
FORCE_SYMBOL $02A4 Vec_Brightness
COMMENT $02A7 Store intensity in D/A
FORCE_SYMBOL $02A7 VIA_port_a
COMMENT $02A9 mux disabled channel 2
FORCE_NO_SYMBOL $02A9
FORCE_SYMBOL $02AC VIA_port_b
COMMENT $02AE mux enabled channel 2
FORCE_SYMBOL $02AE VIA_port_b
COMMENT $02B0 do it again just because ?
FORCE_SYMBOL $02B0 VIA_port_b
FORCE_NO_SYMBOL $02B2
COMMENT $02B4 turn off mux
FORCE_SYMBOL $02B4 VIA_port_b
COMMENT_LINE $02B7 ***************************************************************************
COMMENT_LINE $02B7 ***************************************************************************
COMMENT_LINE $0307 DB backwards - Data of file: "/Users/chrissalo/NetBeansProjects/Veccy/codelib/Sound/DIGI/LEFT.BIN"
COMMENT_LINE $0AE9 DB backwards - Data of file: "/Users/chrissalo/NetBeansProjects/Veccy/codelib/Sound/DIGI/RIGHT.BIN"
COMMENT_LINE $11BB DB backwards - Data of file: "/Users/chrissalo/NetBeansProjects/Veccy/codelib/Sound/DIGI/FROGGER.BIN"
COMMENT_LINE $1A6D where are the samples?
COMMENT_LINE $1A6D this must follow after the above 'sample_start' definition!
COMMENT_LINE $1A6D otherwise the assembler doesn't calculate 'sample_start' properly
RANGE $0000-$1A6D DP $D0
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0029 CHAR_DATA 24
RANGE $0029-$002A DB_DATA 1
RANGE $002A-$02B7 CODE
RANGE $02B7-$02BB DW_DATA 2
RANGE $02BB-$02BD DB_DATA 2
RANGE $02BD-$02BE DB_DATA 1
RANGE $02BE-$02C0 DB_DATA 2
RANGE $02C0-$02C2 DB_DATA 2
RANGE $02C2-$02C4 DB_DATA 2
RANGE $02C4-$02C6 DB_DATA 2
RANGE $02C6-$02C8 DB_DATA 2
RANGE $02C8-$02CA DB_DATA 2
RANGE $02CA-$02CC DB_DATA 2
RANGE $02CC-$02CE DB_DATA 2
RANGE $02CE-$02D0 DB_DATA 2
RANGE $02D0-$02D2 DB_DATA 2
RANGE $02D2-$02D4 DB_DATA 2
RANGE $02D4-$02D6 DB_DATA 2
RANGE $02D6-$02D8 DB_DATA 2
RANGE $02D8-$02DA DB_DATA 2
RANGE $02DA-$02DC DB_DATA 2
RANGE $02DC-$02DE DB_DATA 2
RANGE $02DE-$02E0 DB_DATA 2
RANGE $02E0-$02E2 DB_DATA 2
RANGE $02E2-$02E3 DB_DATA 1
RANGE $02E3-$02E5 DB_DATA 2
RANGE $02E5-$02E7 DB_DATA 2
RANGE $02E7-$02E9 DB_DATA 2
RANGE $02E9-$02EB DB_DATA 2
RANGE $02EB-$02ED DB_DATA 2
RANGE $02ED-$02EF DB_DATA 2
RANGE $02EF-$02F1 DB_DATA 2
RANGE $02F1-$02F3 DB_DATA 2
RANGE $02F3-$02F5 DB_DATA 2
RANGE $02F5-$02F7 DB_DATA 2
RANGE $02F7-$02F9 DB_DATA 2
RANGE $02F9-$02FB DB_DATA 2
RANGE $02FB-$02FD DB_DATA 2
RANGE $02FD-$02FF DB_DATA 2
RANGE $02FF-$0301 DB_DATA 2
RANGE $0301-$0303 DB_DATA 2
RANGE $0303-$0305 DB_DATA 2
RANGE $0305-$0307 DB_DATA 2
RANGE $0307-$0311 DB_DATA 10
RANGE $0311-$031B DB_DATA 10
RANGE $031B-$0325 DB_DATA 10
RANGE $0325-$032F DB_DATA 10
RANGE $032F-$0339 DB_DATA 10
RANGE $0339-$0343 DB_DATA 10
RANGE $0343-$034D DB_DATA 10
RANGE $034D-$0357 DB_DATA 10
RANGE $0357-$0361 DB_DATA 10
RANGE $0361-$036B DB_DATA 10
RANGE $036B-$0375 DB_DATA 10
RANGE $0375-$037F DB_DATA 10
RANGE $037F-$0389 DB_DATA 10
RANGE $0389-$0393 DB_DATA 10
RANGE $0393-$039D DB_DATA 10
RANGE $039D-$03A7 DB_DATA 10
RANGE $03A7-$03B1 DB_DATA 10
RANGE $03B1-$03BB DB_DATA 10
RANGE $03BB-$03C5 DB_DATA 10
RANGE $03C5-$03CF DB_DATA 10
RANGE $03CF-$03D9 DB_DATA 10
RANGE $03D9-$03E3 DB_DATA 10
RANGE $03E3-$03ED DB_DATA 10
RANGE $03ED-$03F7 DB_DATA 10
RANGE $03F7-$0401 DB_DATA 10
RANGE $0401-$040B DB_DATA 10
RANGE $040B-$0415 DB_DATA 10
RANGE $0415-$041F DB_DATA 10
RANGE $041F-$0429 DB_DATA 10
RANGE $0429-$0433 DB_DATA 10
RANGE $0433-$043D DB_DATA 10
RANGE $043D-$0447 DB_DATA 10
RANGE $0447-$0451 DB_DATA 10
RANGE $0451-$045B DB_DATA 10
RANGE $045B-$0465 DB_DATA 10
RANGE $0465-$046F DB_DATA 10
RANGE $046F-$0479 DB_DATA 10
RANGE $0479-$0483 DB_DATA 10
RANGE $0483-$048D DB_DATA 10
RANGE $048D-$0497 DB_DATA 10
RANGE $0497-$04A1 DB_DATA 10
RANGE $04A1-$04AB DB_DATA 10
RANGE $04AB-$04B5 DB_DATA 10
RANGE $04B5-$04BF DB_DATA 10
RANGE $04BF-$04C9 DB_DATA 10
RANGE $04C9-$04D3 DB_DATA 10
RANGE $04D3-$04DD DB_DATA 10
RANGE $04DD-$04E7 DB_DATA 10
RANGE $04E7-$04F1 DB_DATA 10
RANGE $04F1-$04FB DB_DATA 10
RANGE $04FB-$0505 DB_DATA 10
RANGE $0505-$050F DB_DATA 10
RANGE $050F-$0519 DB_DATA 10
RANGE $0519-$0523 DB_DATA 10
RANGE $0523-$052D DB_DATA 10
RANGE $052D-$0537 DB_DATA 10
RANGE $0537-$0541 DB_DATA 10
RANGE $0541-$054B DB_DATA 10
RANGE $054B-$0555 DB_DATA 10
RANGE $0555-$055F DB_DATA 10
RANGE $055F-$0569 DB_DATA 10
RANGE $0569-$0573 DB_DATA 10
RANGE $0573-$057D DB_DATA 10
RANGE $057D-$0587 DB_DATA 10
RANGE $0587-$0591 DB_DATA 10
RANGE $0591-$059B DB_DATA 10
RANGE $059B-$05A5 DB_DATA 10
RANGE $05A5-$05AF DB_DATA 10
RANGE $05AF-$05B9 DB_DATA 10
RANGE $05B9-$05C3 DB_DATA 10
RANGE $05C3-$05CD DB_DATA 10
RANGE $05CD-$05D7 DB_DATA 10
RANGE $05D7-$05E1 DB_DATA 10
RANGE $05E1-$05EB DB_DATA 10
RANGE $05EB-$05F5 DB_DATA 10
RANGE $05F5-$05FF DB_DATA 10
RANGE $05FF-$0609 DB_DATA 10
RANGE $0609-$0613 DB_DATA 10
RANGE $0613-$061D DB_DATA 10
RANGE $061D-$0627 DB_DATA 10
RANGE $0627-$0631 DB_DATA 10
RANGE $0631-$063B DB_DATA 10
RANGE $063B-$0645 DB_DATA 10
RANGE $0645-$064F DB_DATA 10
RANGE $064F-$0659 DB_DATA 10
RANGE $0659-$0663 DB_DATA 10
RANGE $0663-$066D DB_DATA 10
RANGE $066D-$0677 DB_DATA 10
RANGE $0677-$0681 DB_DATA 10
RANGE $0681-$068B DB_DATA 10
RANGE $068B-$0695 DB_DATA 10
RANGE $0695-$069F DB_DATA 10
RANGE $069F-$06A9 DB_DATA 10
RANGE $06A9-$06B3 DB_DATA 10
RANGE $06B3-$06BD DB_DATA 10
RANGE $06BD-$06C7 DB_DATA 10
RANGE $06C7-$06D1 DB_DATA 10
RANGE $06D1-$06DB DB_DATA 10
RANGE $06DB-$06E5 DB_DATA 10
RANGE $06E5-$06EF DB_DATA 10
RANGE $06EF-$06F9 DB_DATA 10
RANGE $06F9-$0703 DB_DATA 10
RANGE $0703-$070D DB_DATA 10
RANGE $070D-$0717 DB_DATA 10
RANGE $0717-$0721 DB_DATA 10
RANGE $0721-$072B DB_DATA 10
RANGE $072B-$0735 DB_DATA 10
RANGE $0735-$073F DB_DATA 10
RANGE $073F-$0749 DB_DATA 10
RANGE $0749-$0753 DB_DATA 10
RANGE $0753-$075D DB_DATA 10
RANGE $075D-$0767 DB_DATA 10
RANGE $0767-$0771 DB_DATA 10
RANGE $0771-$077B DB_DATA 10
RANGE $077B-$0785 DB_DATA 10
RANGE $0785-$078F DB_DATA 10
RANGE $078F-$0799 DB_DATA 10
RANGE $0799-$07A3 DB_DATA 10
RANGE $07A3-$07AD DB_DATA 10
RANGE $07AD-$07B7 DB_DATA 10
RANGE $07B7-$07C1 DB_DATA 10
RANGE $07C1-$07CB DB_DATA 10
RANGE $07CB-$07D5 DB_DATA 10
RANGE $07D5-$07DF DB_DATA 10
RANGE $07DF-$07E9 DB_DATA 10
RANGE $07E9-$07F3 DB_DATA 10
RANGE $07F3-$07FD DB_DATA 10
RANGE $07FD-$0807 DB_DATA 10
RANGE $0807-$0811 DB_DATA 10
RANGE $0811-$081B DB_DATA 10
RANGE $081B-$0825 DB_DATA 10
RANGE $0825-$082F DB_DATA 10
RANGE $082F-$0839 DB_DATA 10
RANGE $0839-$0843 DB_DATA 10
RANGE $0843-$084D DB_DATA 10
RANGE $084D-$0857 DB_DATA 10
RANGE $0857-$0861 DB_DATA 10
RANGE $0861-$086B DB_DATA 10
RANGE $086B-$0875 DB_DATA 10
RANGE $0875-$087F DB_DATA 10
RANGE $087F-$0889 DB_DATA 10
RANGE $0889-$0893 DB_DATA 10
RANGE $0893-$089D DB_DATA 10
RANGE $089D-$08A7 DB_DATA 10
RANGE $08A7-$08B1 DB_DATA 10
RANGE $08B1-$08BB DB_DATA 10
RANGE $08BB-$08C5 DB_DATA 10
RANGE $08C5-$08CF DB_DATA 10
RANGE $08CF-$08D9 DB_DATA 10
RANGE $08D9-$08E3 DB_DATA 10
RANGE $08E3-$08ED DB_DATA 10
RANGE $08ED-$08F7 DB_DATA 10
RANGE $08F7-$0901 DB_DATA 10
RANGE $0901-$090B DB_DATA 10
RANGE $090B-$0915 DB_DATA 10
RANGE $0915-$091F DB_DATA 10
RANGE $091F-$0929 DB_DATA 10
RANGE $0929-$0933 DB_DATA 10
RANGE $0933-$093D DB_DATA 10
RANGE $093D-$0947 DB_DATA 10
RANGE $0947-$0951 DB_DATA 10
RANGE $0951-$095B DB_DATA 10
RANGE $095B-$0965 DB_DATA 10
RANGE $0965-$096F DB_DATA 10
RANGE $096F-$0979 DB_DATA 10
RANGE $0979-$0983 DB_DATA 10
RANGE $0983-$098D DB_DATA 10
RANGE $098D-$0997 DB_DATA 10
RANGE $0997-$09A1 DB_DATA 10
RANGE $09A1-$09AB DB_DATA 10
RANGE $09AB-$09B5 DB_DATA 10
RANGE $09B5-$09BF DB_DATA 10
RANGE $09BF-$09C9 DB_DATA 10
RANGE $09C9-$09D3 DB_DATA 10
RANGE $09D3-$09DD DB_DATA 10
RANGE $09DD-$09E7 DB_DATA 10
RANGE $09E7-$09F1 DB_DATA 10
RANGE $09F1-$09FB DB_DATA 10
RANGE $09FB-$0A05 DB_DATA 10
RANGE $0A05-$0A0F DB_DATA 10
RANGE $0A0F-$0A19 DB_DATA 10
RANGE $0A19-$0A23 DB_DATA 10
RANGE $0A23-$0A2D DB_DATA 10
RANGE $0A2D-$0A37 DB_DATA 10
RANGE $0A37-$0A41 DB_DATA 10
RANGE $0A41-$0A4B DB_DATA 10
RANGE $0A4B-$0A55 DB_DATA 10
RANGE $0A55-$0A5F DB_DATA 10
RANGE $0A5F-$0A69 DB_DATA 10
RANGE $0A69-$0A73 DB_DATA 10
RANGE $0A73-$0A7D DB_DATA 10
RANGE $0A7D-$0A87 DB_DATA 10
RANGE $0A87-$0A91 DB_DATA 10
RANGE $0A91-$0A9B DB_DATA 10
RANGE $0A9B-$0AA5 DB_DATA 10
RANGE $0AA5-$0AAF DB_DATA 10
RANGE $0AAF-$0AB9 DB_DATA 10
RANGE $0AB9-$0AC3 DB_DATA 10
RANGE $0AC3-$0ACD DB_DATA 10
RANGE $0ACD-$0AD7 DB_DATA 10
RANGE $0AD7-$0AE1 DB_DATA 10
RANGE $0AE1-$0AE9 DB_DATA 8
RANGE $0AE9-$0AF3 DB_DATA 10
RANGE $0AF3-$0AFD DB_DATA 10
RANGE $0AFD-$0B07 DB_DATA 10
RANGE $0B07-$0B11 DB_DATA 10
RANGE $0B11-$0B1B DB_DATA 10
RANGE $0B1B-$0B25 DB_DATA 10
RANGE $0B25-$0B2F DB_DATA 10
RANGE $0B2F-$0B39 DB_DATA 10
RANGE $0B39-$0B43 DB_DATA 10
RANGE $0B43-$0B4D DB_DATA 10
RANGE $0B4D-$0B57 DB_DATA 10
RANGE $0B57-$0B61 DB_DATA 10
RANGE $0B61-$0B6B DB_DATA 10
RANGE $0B6B-$0B75 DB_DATA 10
RANGE $0B75-$0B7F DB_DATA 10
RANGE $0B7F-$0B89 DB_DATA 10
RANGE $0B89-$0B93 DB_DATA 10
RANGE $0B93-$0B9D DB_DATA 10
RANGE $0B9D-$0BA7 DB_DATA 10
RANGE $0BA7-$0BB1 DB_DATA 10
RANGE $0BB1-$0BBB DB_DATA 10
RANGE $0BBB-$0BC5 DB_DATA 10
RANGE $0BC5-$0BCF DB_DATA 10
RANGE $0BCF-$0BD9 DB_DATA 10
RANGE $0BD9-$0BE3 DB_DATA 10
RANGE $0BE3-$0BED DB_DATA 10
RANGE $0BED-$0BF7 DB_DATA 10
RANGE $0BF7-$0C01 DB_DATA 10
RANGE $0C01-$0C0B DB_DATA 10
RANGE $0C0B-$0C15 DB_DATA 10
RANGE $0C15-$0C1F DB_DATA 10
RANGE $0C1F-$0C29 DB_DATA 10
RANGE $0C29-$0C33 DB_DATA 10
RANGE $0C33-$0C3D DB_DATA 10
RANGE $0C3D-$0C47 DB_DATA 10
RANGE $0C47-$0C51 DB_DATA 10
RANGE $0C51-$0C5B DB_DATA 10
RANGE $0C5B-$0C65 DB_DATA 10
RANGE $0C65-$0C6F DB_DATA 10
RANGE $0C6F-$0C79 DB_DATA 10
RANGE $0C79-$0C83 DB_DATA 10
RANGE $0C83-$0C8D DB_DATA 10
RANGE $0C8D-$0C97 DB_DATA 10
RANGE $0C97-$0CA1 DB_DATA 10
RANGE $0CA1-$0CAB DB_DATA 10
RANGE $0CAB-$0CB5 DB_DATA 10
RANGE $0CB5-$0CBF DB_DATA 10
RANGE $0CBF-$0CC9 DB_DATA 10
RANGE $0CC9-$0CD3 DB_DATA 10
RANGE $0CD3-$0CDD DB_DATA 10
RANGE $0CDD-$0CE7 DB_DATA 10
RANGE $0CE7-$0CF1 DB_DATA 10
RANGE $0CF1-$0CFB DB_DATA 10
RANGE $0CFB-$0D05 DB_DATA 10
RANGE $0D05-$0D0F DB_DATA 10
RANGE $0D0F-$0D19 DB_DATA 10
RANGE $0D19-$0D23 DB_DATA 10
RANGE $0D23-$0D2D DB_DATA 10
RANGE $0D2D-$0D37 DB_DATA 10
RANGE $0D37-$0D41 DB_DATA 10
RANGE $0D41-$0D4B DB_DATA 10
RANGE $0D4B-$0D55 DB_DATA 10
RANGE $0D55-$0D5F DB_DATA 10
RANGE $0D5F-$0D69 DB_DATA 10
RANGE $0D69-$0D73 DB_DATA 10
RANGE $0D73-$0D7D DB_DATA 10
RANGE $0D7D-$0D87 DB_DATA 10
RANGE $0D87-$0D91 DB_DATA 10
RANGE $0D91-$0D9B DB_DATA 10
RANGE $0D9B-$0DA5 DB_DATA 10
RANGE $0DA5-$0DAF DB_DATA 10
RANGE $0DAF-$0DB9 DB_DATA 10
RANGE $0DB9-$0DC3 DB_DATA 10
RANGE $0DC3-$0DCD DB_DATA 10
RANGE $0DCD-$0DD7 DB_DATA 10
RANGE $0DD7-$0DE1 DB_DATA 10
RANGE $0DE1-$0DEB DB_DATA 10
RANGE $0DEB-$0DF5 DB_DATA 10
RANGE $0DF5-$0DFF DB_DATA 10
RANGE $0DFF-$0E09 DB_DATA 10
RANGE $0E09-$0E13 DB_DATA 10
RANGE $0E13-$0E1D DB_DATA 10
RANGE $0E1D-$0E27 DB_DATA 10
RANGE $0E27-$0E31 DB_DATA 10
RANGE $0E31-$0E3B DB_DATA 10
RANGE $0E3B-$0E45 DB_DATA 10
RANGE $0E45-$0E4F DB_DATA 10
RANGE $0E4F-$0E59 DB_DATA 10
RANGE $0E59-$0E63 DB_DATA 10
RANGE $0E63-$0E6D DB_DATA 10
RANGE $0E6D-$0E77 DB_DATA 10
RANGE $0E77-$0E81 DB_DATA 10
RANGE $0E81-$0E8B DB_DATA 10
RANGE $0E8B-$0E95 DB_DATA 10
RANGE $0E95-$0E9F DB_DATA 10
RANGE $0E9F-$0EA9 DB_DATA 10
RANGE $0EA9-$0EB3 DB_DATA 10
RANGE $0EB3-$0EBD DB_DATA 10
RANGE $0EBD-$0EC7 DB_DATA 10
RANGE $0EC7-$0ED1 DB_DATA 10
RANGE $0ED1-$0EDB DB_DATA 10
RANGE $0EDB-$0EE5 DB_DATA 10
RANGE $0EE5-$0EEF DB_DATA 10
RANGE $0EEF-$0EF9 DB_DATA 10
RANGE $0EF9-$0F03 DB_DATA 10
RANGE $0F03-$0F0D DB_DATA 10
RANGE $0F0D-$0F17 DB_DATA 10
RANGE $0F17-$0F21 DB_DATA 10
RANGE $0F21-$0F2B DB_DATA 10
RANGE $0F2B-$0F35 DB_DATA 10
RANGE $0F35-$0F3F DB_DATA 10
RANGE $0F3F-$0F49 DB_DATA 10
RANGE $0F49-$0F53 DB_DATA 10
RANGE $0F53-$0F5D DB_DATA 10
RANGE $0F5D-$0F67 DB_DATA 10
RANGE $0F67-$0F71 DB_DATA 10
RANGE $0F71-$0F7B DB_DATA 10
RANGE $0F7B-$0F85 DB_DATA 10
RANGE $0F85-$0F8F DB_DATA 10
RANGE $0F8F-$0F99 DB_DATA 10
RANGE $0F99-$0FA3 DB_DATA 10
RANGE $0FA3-$0FAD DB_DATA 10
RANGE $0FAD-$0FB7 DB_DATA 10
RANGE $0FB7-$0FC1 DB_DATA 10
RANGE $0FC1-$0FCB DB_DATA 10
RANGE $0FCB-$0FD5 DB_DATA 10
RANGE $0FD5-$0FDF DB_DATA 10
RANGE $0FDF-$0FE9 DB_DATA 10
RANGE $0FE9-$0FF3 DB_DATA 10
RANGE $0FF3-$0FFD DB_DATA 10
RANGE $0FFD-$1007 DB_DATA 10
RANGE $1007-$1011 DB_DATA 10
RANGE $1011-$101B DB_DATA 10
RANGE $101B-$1025 DB_DATA 10
RANGE $1025-$102F DB_DATA 10
RANGE $102F-$1039 DB_DATA 10
RANGE $1039-$1043 DB_DATA 10
RANGE $1043-$104D DB_DATA 10
RANGE $104D-$1057 DB_DATA 10
RANGE $1057-$1061 DB_DATA 10
RANGE $1061-$106B DB_DATA 10
RANGE $106B-$1075 DB_DATA 10
RANGE $1075-$107F DB_DATA 10
RANGE $107F-$1089 DB_DATA 10
RANGE $1089-$1093 DB_DATA 10
RANGE $1093-$109D DB_DATA 10
RANGE $109D-$10A7 DB_DATA 10
RANGE $10A7-$10B1 DB_DATA 10
RANGE $10B1-$10BB DB_DATA 10
RANGE $10BB-$10C5 DB_DATA 10
RANGE $10C5-$10CF DB_DATA 10
RANGE $10CF-$10D9 DB_DATA 10
RANGE $10D9-$10E3 DB_DATA 10
RANGE $10E3-$10ED DB_DATA 10
RANGE $10ED-$10F7 DB_DATA 10
RANGE $10F7-$1101 DB_DATA 10
RANGE $1101-$110B DB_DATA 10
RANGE $110B-$1115 DB_DATA 10
RANGE $1115-$111F DB_DATA 10
RANGE $111F-$1129 DB_DATA 10
RANGE $1129-$1133 DB_DATA 10
RANGE $1133-$113D DB_DATA 10
RANGE $113D-$1147 DB_DATA 10
RANGE $1147-$1151 DB_DATA 10
RANGE $1151-$115B DB_DATA 10
RANGE $115B-$1165 DB_DATA 10
RANGE $1165-$116F DB_DATA 10
RANGE $116F-$1179 DB_DATA 10
RANGE $1179-$1183 DB_DATA 10
RANGE $1183-$118D DB_DATA 10
RANGE $118D-$1197 DB_DATA 10
RANGE $1197-$11A1 DB_DATA 10
RANGE $11A1-$11AB DB_DATA 10
RANGE $11AB-$11B5 DB_DATA 10
RANGE $11B5-$11BB DB_DATA 6
RANGE $11BB-$11C5 DB_DATA 10
RANGE $11C5-$11CF DB_DATA 10
RANGE $11CF-$11D9 DB_DATA 10
RANGE $11D9-$11E3 DB_DATA 10
RANGE $11E3-$11ED DB_DATA 10
RANGE $11ED-$11F7 DB_DATA 10
RANGE $11F7-$1201 DB_DATA 10
RANGE $1201-$120B DB_DATA 10
RANGE $120B-$1215 DB_DATA 10
RANGE $1215-$121F DB_DATA 10
RANGE $121F-$1229 DB_DATA 10
RANGE $1229-$1233 DB_DATA 10
RANGE $1233-$123D DB_DATA 10
RANGE $123D-$1247 DB_DATA 10
RANGE $1247-$1251 DB_DATA 10
RANGE $1251-$125B DB_DATA 10
RANGE $125B-$1265 DB_DATA 10
RANGE $1265-$126F DB_DATA 10
RANGE $126F-$1279 DB_DATA 10
RANGE $1279-$1283 DB_DATA 10
RANGE $1283-$128D DB_DATA 10
RANGE $128D-$1297 DB_DATA 10
RANGE $1297-$12A1 DB_DATA 10
RANGE $12A1-$12AB DB_DATA 10
RANGE $12AB-$12B5 DB_DATA 10
RANGE $12B5-$12BF DB_DATA 10
RANGE $12BF-$12C9 DB_DATA 10
RANGE $12C9-$12D3 DB_DATA 10
RANGE $12D3-$12DD DB_DATA 10
RANGE $12DD-$12E7 DB_DATA 10
RANGE $12E7-$12F1 DB_DATA 10
RANGE $12F1-$12FB DB_DATA 10
RANGE $12FB-$1305 DB_DATA 10
RANGE $1305-$130F DB_DATA 10
RANGE $130F-$1319 DB_DATA 10
RANGE $1319-$1323 DB_DATA 10
RANGE $1323-$132D DB_DATA 10
RANGE $132D-$1337 DB_DATA 10
RANGE $1337-$1341 DB_DATA 10
RANGE $1341-$134B DB_DATA 10
RANGE $134B-$1355 DB_DATA 10
RANGE $1355-$135F DB_DATA 10
RANGE $135F-$1369 DB_DATA 10
RANGE $1369-$1373 DB_DATA 10
RANGE $1373-$137D DB_DATA 10
RANGE $137D-$1387 DB_DATA 10
RANGE $1387-$1391 DB_DATA 10
RANGE $1391-$139B DB_DATA 10
RANGE $139B-$13A5 DB_DATA 10
RANGE $13A5-$13AF DB_DATA 10
RANGE $13AF-$13B9 DB_DATA 10
RANGE $13B9-$13C3 DB_DATA 10
RANGE $13C3-$13CD DB_DATA 10
RANGE $13CD-$13D7 DB_DATA 10
RANGE $13D7-$13E1 DB_DATA 10
RANGE $13E1-$13EB DB_DATA 10
RANGE $13EB-$13F5 DB_DATA 10
RANGE $13F5-$13FF DB_DATA 10
RANGE $13FF-$1409 DB_DATA 10
RANGE $1409-$1413 DB_DATA 10
RANGE $1413-$141D DB_DATA 10
RANGE $141D-$1427 DB_DATA 10
RANGE $1427-$1431 DB_DATA 10
RANGE $1431-$143B DB_DATA 10
RANGE $143B-$1445 DB_DATA 10
RANGE $1445-$144F DB_DATA 10
RANGE $144F-$1459 DB_DATA 10
RANGE $1459-$1463 DB_DATA 10
RANGE $1463-$146D DB_DATA 10
RANGE $146D-$1477 DB_DATA 10
RANGE $1477-$1481 DB_DATA 10
RANGE $1481-$148B DB_DATA 10
RANGE $148B-$1495 DB_DATA 10
RANGE $1495-$149F DB_DATA 10
RANGE $149F-$14A9 DB_DATA 10
RANGE $14A9-$14B3 DB_DATA 10
RANGE $14B3-$14BD DB_DATA 10
RANGE $14BD-$14C7 DB_DATA 10
RANGE $14C7-$14D1 DB_DATA 10
RANGE $14D1-$14DB DB_DATA 10
RANGE $14DB-$14E5 DB_DATA 10
RANGE $14E5-$14EF DB_DATA 10
RANGE $14EF-$14F9 DB_DATA 10
RANGE $14F9-$1503 DB_DATA 10
RANGE $1503-$150D DB_DATA 10
RANGE $150D-$1517 DB_DATA 10
RANGE $1517-$1521 DB_DATA 10
RANGE $1521-$152B DB_DATA 10
RANGE $152B-$1535 DB_DATA 10
RANGE $1535-$153F DB_DATA 10
RANGE $153F-$1549 DB_DATA 10
RANGE $1549-$1553 DB_DATA 10
RANGE $1553-$155D DB_DATA 10
RANGE $155D-$1567 DB_DATA 10
RANGE $1567-$1571 DB_DATA 10
RANGE $1571-$157B DB_DATA 10
RANGE $157B-$1585 DB_DATA 10
RANGE $1585-$158F DB_DATA 10
RANGE $158F-$1599 DB_DATA 10
RANGE $1599-$15A3 DB_DATA 10
RANGE $15A3-$15AD DB_DATA 10
RANGE $15AD-$15B7 DB_DATA 10
RANGE $15B7-$15C1 DB_DATA 10
RANGE $15C1-$15CB DB_DATA 10
RANGE $15CB-$15D5 DB_DATA 10
RANGE $15D5-$15DF DB_DATA 10
RANGE $15DF-$15E9 DB_DATA 10
RANGE $15E9-$15F3 DB_DATA 10
RANGE $15F3-$15FD DB_DATA 10
RANGE $15FD-$1607 DB_DATA 10
RANGE $1607-$1611 DB_DATA 10
RANGE $1611-$161B DB_DATA 10
RANGE $161B-$1625 DB_DATA 10
RANGE $1625-$162F DB_DATA 10
RANGE $162F-$1639 DB_DATA 10
RANGE $1639-$1643 DB_DATA 10
RANGE $1643-$164D DB_DATA 10
RANGE $164D-$1657 DB_DATA 10
RANGE $1657-$1661 DB_DATA 10
RANGE $1661-$166B DB_DATA 10
RANGE $166B-$1675 DB_DATA 10
RANGE $1675-$167F DB_DATA 10
RANGE $167F-$1689 DB_DATA 10
RANGE $1689-$1693 DB_DATA 10
RANGE $1693-$169D DB_DATA 10
RANGE $169D-$16A7 DB_DATA 10
RANGE $16A7-$16B1 DB_DATA 10
RANGE $16B1-$16BB DB_DATA 10
RANGE $16BB-$16C5 DB_DATA 10
RANGE $16C5-$16CF DB_DATA 10
RANGE $16CF-$16D9 DB_DATA 10
RANGE $16D9-$16E3 DB_DATA 10
RANGE $16E3-$16ED DB_DATA 10
RANGE $16ED-$16F7 DB_DATA 10
RANGE $16F7-$1701 DB_DATA 10
RANGE $1701-$170B DB_DATA 10
RANGE $170B-$1715 DB_DATA 10
RANGE $1715-$171F DB_DATA 10
RANGE $171F-$1729 DB_DATA 10
RANGE $1729-$1733 DB_DATA 10
RANGE $1733-$173D DB_DATA 10
RANGE $173D-$1747 DB_DATA 10
RANGE $1747-$1751 DB_DATA 10
RANGE $1751-$175B DB_DATA 10
RANGE $175B-$1765 DB_DATA 10
RANGE $1765-$176F DB_DATA 10
RANGE $176F-$1779 DB_DATA 10
RANGE $1779-$1783 DB_DATA 10
RANGE $1783-$178D DB_DATA 10
RANGE $178D-$1797 DB_DATA 10
RANGE $1797-$17A1 DB_DATA 10
RANGE $17A1-$17AB DB_DATA 10
RANGE $17AB-$17B5 DB_DATA 10
RANGE $17B5-$17BF DB_DATA 10
RANGE $17BF-$17C9 DB_DATA 10
RANGE $17C9-$17D3 DB_DATA 10
RANGE $17D3-$17DD DB_DATA 10
RANGE $17DD-$17E7 DB_DATA 10
RANGE $17E7-$17F1 DB_DATA 10
RANGE $17F1-$17FB DB_DATA 10
RANGE $17FB-$1805 DB_DATA 10
RANGE $1805-$180F DB_DATA 10
RANGE $180F-$1819 DB_DATA 10
RANGE $1819-$1823 DB_DATA 10
RANGE $1823-$182D DB_DATA 10
RANGE $182D-$1837 DB_DATA 10
RANGE $1837-$1841 DB_DATA 10
RANGE $1841-$184B DB_DATA 10
RANGE $184B-$1855 DB_DATA 10
RANGE $1855-$185F DB_DATA 10
RANGE $185F-$1869 DB_DATA 10
RANGE $1869-$1873 DB_DATA 10
RANGE $1873-$187D DB_DATA 10
RANGE $187D-$1887 DB_DATA 10
RANGE $1887-$1891 DB_DATA 10
RANGE $1891-$189B DB_DATA 10
RANGE $189B-$18A5 DB_DATA 10
RANGE $18A5-$18AF DB_DATA 10
RANGE $18AF-$18B9 DB_DATA 10
RANGE $18B9-$18C3 DB_DATA 10
RANGE $18C3-$18CD DB_DATA 10
RANGE $18CD-$18D7 DB_DATA 10
RANGE $18D7-$18E1 DB_DATA 10
RANGE $18E1-$18EB DB_DATA 10
RANGE $18EB-$18F5 DB_DATA 10
RANGE $18F5-$18FF DB_DATA 10
RANGE $18FF-$1909 DB_DATA 10
RANGE $1909-$1913 DB_DATA 10
RANGE $1913-$191D DB_DATA 10
RANGE $191D-$1927 DB_DATA 10
RANGE $1927-$1931 DB_DATA 10
RANGE $1931-$193B DB_DATA 10
RANGE $193B-$1945 DB_DATA 10
RANGE $1945-$194F DB_DATA 10
RANGE $194F-$1959 DB_DATA 10
RANGE $1959-$1963 DB_DATA 10
RANGE $1963-$196D DB_DATA 10
RANGE $196D-$1977 DB_DATA 10
RANGE $1977-$1981 DB_DATA 10
RANGE $1981-$198B DB_DATA 10
RANGE $198B-$1995 DB_DATA 10
RANGE $1995-$199F DB_DATA 10
RANGE $199F-$19A9 DB_DATA 10
RANGE $19A9-$19B3 DB_DATA 10
RANGE $19B3-$19BD DB_DATA 10
RANGE $19BD-$19C7 DB_DATA 10
RANGE $19C7-$19D1 DB_DATA 10
RANGE $19D1-$19DB DB_DATA 10
RANGE $19DB-$19E5 DB_DATA 10
RANGE $19E5-$19EF DB_DATA 10
RANGE $19EF-$19F9 DB_DATA 10
RANGE $19F9-$1A03 DB_DATA 10
RANGE $1A03-$1A0D DB_DATA 10
RANGE $1A0D-$1A17 DB_DATA 10
RANGE $1A17-$1A21 DB_DATA 10
RANGE $1A21-$1A2B DB_DATA 10
RANGE $1A2B-$1A35 DB_DATA 10
RANGE $1A35-$1A3F DB_DATA 10
RANGE $1A3F-$1A49 DB_DATA 10
RANGE $1A49-$1A53 DB_DATA 10
RANGE $1A53-$1A5D DB_DATA 10
RANGE $1A5D-$1A67 DB_DATA 10
RANGE $1A67-$1A6D DB_DATA 6

