BANK 0
EQU $01 INCLUDE_I
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $F192 Wait_Recal
LABEL $F1BA Read_Btns
LABEL $F2AB Intensity_a
LABEL $F2FC Moveto_d_7F
LABEL $F354 Reset0Ref
EQU $02 S_INTENSITY
EQU $01 S_XPOS
LABEL $C826 intensityIndexNibble
COMMENT_LABEL $C826 low byte of "Vec_Loop_Count", this counter is increased
LABEL $C880 statusFlag
COMMENT_LABEL $C880 negative = link not established, 0 = I am primary, 1 = I am secondary
LABEL $C881 primary_structure
COMMENT_LABEL $C881 3 bytes
LABEL $C881 primary_pos
LABEL $C883 primary_intensity
LABEL $C884 secondary_structure
COMMENT_LABEL $C884 3 bytes
LABEL $C884 secondary_pos
LABEL $C885 secondary_x
LABEL $C886 secondary_intensity
LABEL $C887 joy_y
COMMENT_LABEL $C887 contains digital joytick position Y, +1 = up, -1 = down, 0 = no move
LABEL $C888 joy_x
COMMENT_LABEL $C888 contains digital joytick position X, +1 = right, -1 = left, 0 = no move
LABEL $C889 jumper
COMMENT_LABEL $C889 contains indirect jump addresses used in main loop
LABEL $CBF0 _CBF0
COMMENT_LABEL $CBF0 have not figured out what this is...
LABEL $0011 no_music
LABEL $01D3 start
LABEL $0017 syncVectrex_3bytes
LABEL $0195 JoytickFFCommunication_A
LABEL $0166 write_A_toJoy2
LABEL $0041 otherWasFound
LABEL $0150 wait_CA1_Timer_D
LABEL $00CF secondaryVectrexCommunication
EQU $51 next_byte_communication
LABEL $014D wait_CA1_Timer_01ff
LABEL $0155 vl_test0155
LABEL $0160 vl_test0160
LABEL $01F1 init_jumper
LABEL $01DE main_loop
LABEL $03AB queryInputPort0
LABEL $01F8 init_vars_main
LABEL $021F no_link
LABEL $0218 we_are_secondary
LABEL $023B primary_main
LABEL $0269 secondary_main
LABEL $0368 no_link_string
COMMENT_LABEL $0368 text "NO LINK" in format: %Y %X %M
LABEL $02F1 draw_vector_list
LABEL $03FF intensity_blink
LABEL $0299 check_input_port0
LABEL $0334 you
COMMENT_LABEL $0334 text "YOU" in format: %Y %X %M
LABEL $02BE draw_players
LABEL $02A9 increase_intensity
LABEL $02B2 check_digital_pos
LABEL $0317 triangle
COMMENT_LABEL $0317 triangle list in format: %Y %X %M
LABEL $0324 diamond
COMMENT_LABEL $0324 diamond list in format: %Y %X %M
LABEL $02F3 display_next_vector
LABEL $030A timerLoop
LABEL $03BC waitLoopV
LABEL $03D5 yReadDone
LABEL $03E2 waitLoopH
LABEL $03FB xReadDone
COMMENT_LINE $0000 Note:
COMMENT_LINE $0000 This is a disassembly of a binary file I got from a fellow vectrexian.
COMMENT_LINE $0000 The original file was programmed by Alex Herbert
COMMENT_LINE $0000 I was assured that Alex had given is consent in making the file available,
COMMENT_LINE $0000 but sadly I had never the opportunity to get in contact with Alex himself.
COMMENT_LINE $0000 Alex: if you do not wish to share this file, please contact me and I will remove it.
COMMENT_LINE $0000 veclink V1 in Port 1
COMMENT_LINE $0000 button 4 (bit 7) is triggering a VIA interrupt (CA1)
COMMENT_LINE $0000 which is used to synchronize the communication
COMMENT_LINE $0000 with button 4 connected one vectrex can trigger an interrupt on the other
COMMENT_LINE $0000 the actual data is transported
COMMENT_LINE $0000 via bit 5 and 6 (on what I call the primary vectrex) (Port 1: Button 2 and 3)
COMMENT_LINE $0000 via bit 4 and 5 (on what I call the secondary vectrex) (Port 1: Button 1 and 2)
COMMENT_LINE $0000 a quarter of a parallel connection :-)
COMMENT_LINE $0000 the communication seems to be "bi" directional
COMMENT_LINE $0000 sending and data sets CA1, the other side waits for CA1
COMMENT_LINE $0000 and immediately sorts out the data of the 2 bits
COMMENT_LINE $0000 and with acknowledgment sends its own data back... and so forth
COMMENT_LINE $0000 cable schematics:
COMMENT_LINE $0000 Vectrex A                Vectrex B
COMMENT_LINE $0000 1 |--------------------------| 4
COMMENT_LINE $0000 |
COMMENT_LINE $0000 |
COMMENT_LINE $0000 >
COMMENT_LINE $0000 <   680 Ohm Resistor
COMMENT_LINE $0000 >
COMMENT_LINE $0000 <
COMMENT_LINE $0000 |
COMMENT_LINE $0000 |
COMMENT_LINE $0000 8 |--------------------------| 8
COMMENT_LINE $0000 |
COMMENT_LINE $0000 |
COMMENT_LINE $0000 >
COMMENT_LINE $0000 <   680 Ohm Resistor
COMMENT_LINE $0000 >
COMMENT_LINE $0000 <
COMMENT_LINE $0000 |
COMMENT_LINE $0000 |
COMMENT_LINE $0000 4 |--------------------------| 3
COMMENT_LINE $0000 2 |--------------------------| 1
COMMENT_LINE $0000 3 |--------------------------| 2
COMMENT_LINE $0000 Additional information that was made available to me:
COMMENT_LINE $0000 (quotation)
COMMENT_LINE $0000 "
COMMENT_LINE $0000 According To the information I have received from Alex Herbert there are several versions of the cable.
COMMENT_LINE $0000 Depending on which of Alex's libraries you use the following will be true.
COMMENT_LINE $0000 Earlier version of the cable. The I/O on pin 4 is harder to drive than pins 1,2,3 so the pull up resistors
COMMENT_LINE $0000 were used to try and correct the voltage levels, but - even then it was still iffy.
COMMENT_LINE $0000 The new cable just avoids this by not using pin 4. It means we have 1 less pin for data which should in theory
COMMENT_LINE $0000 reduce the maximum bandwidth, but I was able to optimize it quite well and didn't loose much performance.
COMMENT_LINE $0000 This cable has been performing rock solid.
COMMENT_LINE $0000 "
COMMENT_LINE $0000 Malban - Thoughts:
COMMENT_LINE $0000 Since I have no cable of my own, I can't do any further tests.
COMMENT_LINE $0000 The "linkage" routines below do sort of work (most of the time)
COMMENT_LINE $0000 as reported by Alex:
COMMENT_LINE $0000 "...Earlier version of the cable. The I/O on pin 4 is harder to drive than pins 1,2,3 so the pull
COMMENT_LINE $0000 up resistors were used to try and correct the voltage levels, but even then it was still iffy."
COMMENT_LINE $0000 The linkage thus seems to be not to stable.
COMMENT_LINE $0000 Emulation of the above cable also results sometimes in "broken" links - I regard that mostly as
COMMENT_LINE $0000 syncing problems of two emulators running in two different threads, but I can't help to wonder...
COMMENT_LINE $0000 examining the core communication routine, I noticed the:
COMMENT_LINE $0000 ora      #$80
COMMENT_LINE $0000 with every data transfer that is done, my first guess was, that setting the high bit
COMMENT_LINE $0000 should = the CA1 on the other vectrex to do the actual syncing.
COMMENT_LINE $0000 (this is what my old comments still state - but this is WRONG!)
COMMENT_LINE $0000 BUT the cable (look above) is "crossed", so setting bit 4 on the one vectrex which is
COMMENT_LINE $0000 sending data does not achieve any CA1 interrupt on the other side.
COMMENT_LINE $0000 Setting bit 4 on the primary vectrex will result in bit 3 of the secondary vectrex
COMMENT_LINE $0000 while setting bit 4 on the secondary vectrex will result in bit 1 being = on the primary.
COMMENT_LINE $0000 (all bits in regard to above picture, not the actual bits of port A of PSG)
COMMENT_LINE $0000 So - Question:             Is the below given communication routine actually buggy?
COMMENT_LINE $0000 or
COMMENT_LINE $0000 Question alternative:      What am I missing?
COMMENT_LINE $0000 Tentive answer from Malban:
COMMENT_LINE $0000 My guess is, that the ora $80 are left overs from an "older" example routine and an even older veclink cable (v0.9?).
COMMENT_LINE $0000 The actual syncing is done in "JoytickFFCommunication_A", which sends "$ff" to the other vectrex, which inherently obviously
COMMENT_LINE $0000 will = the CA1 flag, since all bits receive a 1.
COMMENT_LINE $0000 This theory is backed up by the fact that you can comment out all of the ora $80 and the routine still works
COMMENT_LINE $0000 equally well (or not well in the case of a slow emulator)
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slightly changed by Malban                ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 with every call WaitRecal, it is used below as an
COMMENT_LINE $0000 offset for intensity levels of the "you" sign
COMMENT_LINE $0000 GCS Copyright
COMMENT $0000 it seems communication VLinkCable is done via
COMMENT_LINE $000B Start music pointer
COMMENT $000B Start music pointer
COMMENT_LINE $000D end of header
COMMENT $000D end of header
COMMENT_LINE $000E start of cartridge code!
COMMENT $000E start of cartridge code!
COMMENT_LINE $0017 this routine syncs 3 bytes *2 (both structures) (actually the number of bytes between primary_structure and secondary_structure)
COMMENT_LINE $0017 while doing the syncing the link is continually tested if it still in working order
COMMENT_LINE $0017 this routine also sets the status flag of the link connection
COMMENT_LINE $0017 negative = link not established, 0 = I am primary, 1 = I am secondary
COMMENT $0017 setup DP
COMMENT $001B reading and writing from the view of primary vectrex
COMMENT $001E read data to this address [data original from secondary vectrex]
COMMENT $0022 default status: link is broken (needed for a "hard" exit in the subroutines)
COMMENT $0024 store the status of the connection
COMMENT $0027 sends a "ff" to the other vectrex and receives one "byte" - also tests the link
COMMENT $002A remember value got from joystick port 2
COMMENT $002C 1011 1111 test byte to look if we are primary or secondary
COMMENT_LINE $002E upper bit 3 is "cross"-connected to either bit 2 or 4, the later triggers a CA1
COMMENT_LINE $002E examining the result tells us if we are secondary or primary
COMMENT $002E tell the other vectrex
COMMENT $0031 0001 1000 ; SHIFT mode = 110 - SHIFT out under control of system clock
COMMENT $0033 (bit 6+7 = 00) timer one shot mode ramp not controlled by bit 7 of VIA B
COMMENT $0035 get last read value from joystick port
COMMENT $0037 (equal to CA1 interrupt)
COMMENT $0039 if bit 7 is set, branch [other vectrex was already found]
COMMENT $003B wait a "long time" for other vectrex
COMMENT $003E if return happens we found a vectrex,
COMMENT_LINE $0041 if there is NO return, than the subroutine
COMMENT_LINE $0041 went straight ahead to "our" caller and the next instruction is never reached!
COMMENT_LINE $0041 send ff and read one "byte"
COMMENT $0041 if vectrex is not found, the subroutine returns directly
COMMENT $0044 only bits of port 2
COMMENT $0046 upper halfbyte ($f0) without CA1 ($80)
COMMENT_LINE $0048 this is the "examining" of the "#$BF" that was send from the other side...
COMMENT_LINE $0048 if we recieved x000 xxxx (from the sent 1011 xxxx), than we are primary
COMMENT_LINE $0048 if not, than we are secondary
COMMENT $004C $1000 1111, triger CA1 on other vectrex, 000 data, 1111 "buttons" of joy 1 (ignore)
COMMENT_LINE $004E we are primary!
COMMENT_LINE $004E which puts the other vectrex as secondary
COMMENT_LINE $004E receive bit 7 and 6 [rr00 0000] (and send nothing)
COMMENT $004E the other vectrex receives a 000 as data, which will be "ignored"
COMMENT_LINE $0057 only bit 5 and 6 contain data
COMMENT $0057 from data
COMMENT $0059 0xx0 0000 -> xx00 0000, correct bit position
COMMENT $005A store received upper two bits in y
COMMENT_LINE $005C load data to transport
COMMENT $005C to data
COMMENT $005E put bits to 5 and 6 xx00 0000 -> 0xx0 0000
COMMENT $005F only bit 5 and 6 contain data
COMMENT $0061 = bit 7 (CA1 of other vectrex)
COMMENT_LINE $0063 receive bit 5 and 4 [00rr 0000]
COMMENT $0063 send bit 7 and 6 [ww00 0000]
COMMENT $006C only bit 5 and 6 contain data
COMMENT $006E 0xx0 0000 -> 00xx 0000, correct bit position
COMMENT $006F and combine the two bits with already received data
COMMENT $0071 write data
COMMENT $0073 get next data to be sent
COMMENT $0075 put bits to 5 and 6 00xx 0000 -> 0xx0 0000
COMMENT $0076 only bit 5 and 6 contain data
COMMENT $0078 = bit 7 (CA1 of other vectrex)
COMMENT_LINE $007A receive bit 3 and 2 [0000 rr00]
COMMENT $007A send bit 5 and 4 [00ww 0000]
COMMENT $0083 only bit 5 and 6 contain data
COMMENT $0087 0xx0 0000 -> 0000 xx00, correct bit position
COMMENT $0088 and combine the two bits with already received data
COMMENT $008A write data
COMMENT $008C get next data to be sent
COMMENT $0090 put bits to 5 and 6 0000 xx00 -> 0xx0 0000
COMMENT $0091 only bit 5 and 6 contain data
COMMENT $0093 = bit 7 (CA1 of other vectrex)
COMMENT_LINE $0095 receive bit 1 and 0 [0000 00rr]
COMMENT $0095 send bit 3 and 2 [0000 ww00]
COMMENT $009E only bit 5 and 6 contain data
COMMENT $00A4 0xx0 0000 -> 0000 00xx, correct bit position
COMMENT $00A5 and combine the two bits with already received data
COMMENT $00A7 write data, inc y
COMMENT $00A9 get next data to be sent, inc x
COMMENT $00AF put bits to 5 and 6 0000 00xx -> 0xx0 0000
COMMENT $00B0 only bit 5 and 6 contain data
COMMENT $00B2 = bit 7 (CA1 of other vectrex)
COMMENT_LINE $00B4 (also receive bit 7 and 6 [rr00 0000] - if any avalable)
COMMENT $00B4 send bit 1 and 0 [0000 00ww]
COMMENT_LINE $00B7 (3 bytes)
COMMENT $00B7 did we finish sending all data?
COMMENT $00BA no, than go on sending
COMMENT $00BC dont know, indicator second primary?
COMMENT $00BF one last sync for good will?
COMMENT $00C5 restore some sensible timer settings?
COMMENT $00C8 VIA timer lo -> hi
COMMENT $00CA clean up aux VIA register
COMMENT_LINE $00CC (bit 6+7 = 10) timer one shot mode ramp controlled by bit 7 of VIA B
COMMENT $00CC 1001 1000 SHIFT mode = 110 - SHIFT out under control of system clock
COMMENT $00CE done
COMMENT_LINE $00CF a) read and write addresses are switched
COMMENT_LINE $00CF b) for data transport bit 4 and 5 are used instead of 5 and 6
COMMENT_LINE $00CF send bit 7 and 6 [ww00 0000]
COMMENT_LINE $00CF receive bit 7 and 6 [rr00 0000]
COMMENT_LINE $00CF load data to transport
COMMENT $00CF secondary communication has two quirks
COMMENT $00D1 put bits to 4 and 5 xx00 0000 -> 00xx 0000
COMMENT $00D3 only bit 4 and 5 contain data
COMMENT $00D5 = bit 7 (CA1 of other vectrex)
COMMENT $00E0 only bit 4 and 5 contain data
COMMENT $00E3 00xx 0000 -> xx00 0000, correct bit position
COMMENT $00E4 store received upper two bits in x
COMMENT_LINE $00E6 receive bit 5 and 4 [00rr 0000]
COMMENT_LINE $00E6 get next data to be sent
COMMENT $00E6 send bit 5 and 4 [00ww 0000]
COMMENT $00E8 only bit 4 and 5 contain data
COMMENT $00EA = bit 7 (CA1 of other vectrex)
COMMENT $00F5 only bit 4 and 5 contain data
COMMENT $00F7 and combine the two bits with already received data
COMMENT $00F9 write data
COMMENT_LINE $00FB receive bit 3 and 2 [0000 rr00]
COMMENT_LINE $00FB get next data to be sent
COMMENT $00FB send bit 3 and 2 [0000 ww00]
COMMENT $00FE put bits to 4 and 5 0000 xx00 -> 00xx 0000
COMMENT $00FF only bit 4 and 5 contain data
COMMENT $0101 = bit 7 (CA1 of other vectrex)
COMMENT $010C only bit 4 and 5 contain data
COMMENT $010F 00xx 0000 -> 0000 xx00, correct bit position
COMMENT $0110 and combine the two bits with already received data
COMMENT $0112 write data
COMMENT_LINE $0114 receive bit 1 and 0 [0000 00rr]
COMMENT_LINE $0114 get next data to be sent, and inc y
COMMENT $0114 send bit 1 and 0 [0000 00ww]
COMMENT $0119 put bits to 4 and 5 0000 00xx -> 00xx 0000
COMMENT $011A only bit 4 and 5 contain data
COMMENT $011C = bit 7 (CA1 of other vectrex)
COMMENT $0127 only bit 4 and 5 contain data
COMMENT $012C 0000 00xx -> 0000 xx00, correct bit position
COMMENT $012D and combine the two bits with already received data
COMMENT $012F write data, inc x
COMMENT_LINE $0131 (3 bytes)
COMMENT $0131 did we finish sending all data?
COMMENT $0136 = bit 7 (CA1 of other vectrex)
COMMENT $0138 one last sync for good will?
COMMENT $013E dont know, indicator second primary?
COMMENT $0141 restore some sensible timer settings?
COMMENT $0144 VIA timer1 lo -> hi
COMMENT_LINE $0146 VIA timer 2 lo -> hi ???
COMMENT $0146 what is that for?
COMMENT_LINE $0148 (bit 6+7 = 10) timer one shot mode ramp controlled by bit 7 of VIA B
COMMENT_LINE $0148 clean up aux VIA register
COMMENT $0148 1001 1000 SHIFT mode = 110 - SHIFT out under control of system clock
COMMENT_LINE $014D with timeout after 0x01ff cylces
COMMENT $014D wait for interrupt CA1
COMMENT_LINE $0150 with timeout given in D (Timer 16 bit)
COMMENT_LINE $0150 init timer
COMMENT_LINE $0150 store given parameter to A to timer 1 low [latch (reg 6 is written]
COMMENT_LINE $0150 B to timer 1 high [latch reg 6 is transfered to reg 4]
COMMENT_LINE $0150 B is also transfere3d to reg 7 high latch
COMMENT_LINE $0150 resets interrupt flag
COMMENT_LINE $0150 store timer values
COMMENT $0150 wait for interrupt CA1
COMMENT $0152 interrupt test flags
COMMENT $0155 test interrupt flag register ($d) for #$40 (Timer 1)
COMMENT $0157 if = -> branch, timeout was reached
COMMENT $0159 test interrupt flag register ($d) for #$02 (CA1)
COMMENT_LINE $015B connecting another vectrex one can thus
COMMENT_LINE $015B generate an interupt from that other vectrex via joystick port
COMMENT_LINE $015B if CA1 interrupt not detected  - go on trying
COMMENT $015B CA1 is connected to Joystick Port 2 Button 4
COMMENT_LINE $015D clear 0x02 to VIA interrupt flag register by writing 1
COMMENT $015D CA1 interrupt was detected
COMMENT $015F go back
COMMENT_LINE $0160 clean up aux VIA register
COMMENT $0160 timeout happened
COMMENT_LINE $0162 (bit 6+7 = 10) timer one shot mode ramp controlled by bit 7 of VIA B
COMMENT $0162 1001 1000 SHIFT mode = 110 - SHIFT out under control of system clock
COMMENT $0164 is this a double RTS? go back 2 subroutine calls?
COMMENT_LINE $0166 write value to joystick port 2 (buttons)
COMMENT_LINE $0166 Port A of PSG is kept in OUTPUT mode
COMMENT_LINE $0166 store given value on stack
COMMENT $0166 value given in A
COMMENT_LINE $0168 Register 7 of PSG
COMMENT $0168 Latch Reg $07 of PSG
COMMENT $016A VIA A = 0x07 (DAC)
COMMENT $016F VIA Port B = 99, mux disabled, RAMP disabled, BC1/BDIR = 11 (Latch address)
COMMENT $0171 VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT_LINE $0173 $7f to VIA A (DAC) $7f = 0111 1111, disable all noise and tone in psg,
COMMENT $0173 write value of $7f to reg $07 (latched)
COMMENT_LINE $0175 $7f to VIA A (DAC)
COMMENT $0175 ENABLE OUTPUT on port A of PSG (port B irrelevant since it is a 8912)
COMMENT $017A VIA Port B = 91, mux disabled, RAMP disabled, BC1/BDIR = 10 (Write to PSG)
COMMENT $017C VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT $017E Latch Reg $E of PSG (Port A)
COMMENT $0180 $0e to VIA A (DAC)
COMMENT $0185 VIA Port B = 99, mux disabled, RAMP disabled, BC1/BDIR = 11 (Latch address)
COMMENT $0187 VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT_LINE $0189 read value from stack
COMMENT $0189 write A to port
COMMENT $018B output value to via VIA port A to Port A of PSG (Joystick buttons)
COMMENT $0190 VIA Port B = 91, mux disabled, RAMP disabled, BC1/BDIR = 10 (Write to PSG)
COMMENT $0192 VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT_LINE $0195 setup joyport communication
COMMENT_LINE $0195 sends $ff to Joystick 2
COMMENT_LINE $0195 $ff inherently has bit 7 set, which also triggers CA1 on other vectrex
COMMENT_LINE $0195 and reads afterwards joystick port 2
COMMENT_LINE $0195 value of read is kept in A
COMMENT_LINE $0195 PSG port A is kept in INPUT mode
COMMENT_LINE $0195 Latch Reg $07 of PSG
COMMENT_LINE $0195 Register 7 of PSG
COMMENT $0197 VIA A = 0x07 (DAC)
COMMENT $019C VIA Port B = 99, mux disabled, RAMP disabled, BC1/BDIR = 11 (Latch address)
COMMENT $019E VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT_LINE $01A0 $3f to VIA A (DAC) $3f = 0011 1111, disable all noise and tone in psg,
COMMENT $01A0 write value of $3f to reg $07 (latched)
COMMENT $01A2 enable INPUT on port A of PSG (port B irrelevant since it is a 8912)
COMMENT $01A7 VIA Port B = 91, mux disabled, RAMP disabled, BC1/BDIR = 10 (Write to PSG)
COMMENT $01A9 VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT $01AB Latch Reg $E of PSG (Port A)
COMMENT $01AD $0e to VIA A (DAC)
COMMENT $01B2 VIA Port B = 99, mux disabled, RAMP disabled, BC1/BDIR = 11 (Latch address)
COMMENT $01B4 VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT $01B6 write value of $ff to reg $0e (latched)
COMMENT $01B8 write $ff to VIA A (DAC)
COMMENT $01BD VIA Port B = 91, mux disabled, RAMP disabled, BC1/BDIR = 10 (Write to PSG)
COMMENT $01BF VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT $01C4 configure VIA A as input (all zeroes 0)
COMMENT $01C6 VIA Port B = 89, mux disabled, RAMP disabled, BC1/BDIR = 01 (Read from PSG)
COMMENT $01CA read value to a from VIA A, which in turn reads Port A of PSG
COMMENT $01CC VIA Port B = 81, mux disabled, RAMP disabled, BC1/BDIR = 00 (PSG inactive)
COMMENT $01D0 configure VIA A as output (all zeroes 1)
COMMENT $01D3 set up direct page to d0 for the complete "game"
COMMENT $01D7 load a space and store it to...
COMMENT $01D9 not used? CBF0 is part of the BIOS highscore setting
COMMENT $01DC init main subroutine to "init"
COMMENT $01DE the last thing done in the mainloop "last round" was a draw
COMMENT $01DF this must be finished here with a mov 0 to SHIFT (switch the beam off)
COMMENT $01E2 recalibrate
COMMENT $01E5 query input devices (port 0)
COMMENT $01E8 sync 3 bytes TO other player and 3 bytes from other player, also sets link status
COMMENT $01EB go to the current main routine (one of: "no link" (or "init"), "primary", "secondary")
COMMENT $01EF and repeat that forever
COMMENT_LINE $01F1 each time the link cable is "faulty" (connection is lost)
COMMENT_LINE $01F1 this routine is called (or upon startup)
COMMENT_LINE $01F1 this sets the main "subroutine" to "init"
COMMENT $01F1 in the first update round (or link is broken), initialize
COMMENT $01F4 the "main" subroutine is init the player vars (which also is "no link")
COMMENT_LINE $01F8 this routine sets up player vars (position, intensity...)
COMMENT_LINE $01F8 checks the current link status
COMMENT_LINE $01F8 and sets the main "subroutine" (jumper) according to the link status
COMMENT_LINE $01F8 each player structure consists of 3 bytes
COMMENT_LINE $01F8 ypos, xpos, intensity
COMMENT_LINE $01F8 the first three "word" moves, fill both player structures
COMMENT $01F8 position of primary player (y,x)
COMMENT $01FE primary intensity and secondary y
COMMENT $0204 secondary x and secondary intensity
COMMENT_LINE $020A check current connection state
COMMENT $020D if negative no link was found
COMMENT $020F if positive (1) jump, we are secondary
COMMENT $0211 we are primary, load our main routine and store it
COMMENT $0214 to the indirect jump table
COMMENT $0218 we are secondary, load our main routine and store it
COMMENT $021B to the indirect jump table
COMMENT_LINE $021F "main" loop entry if link is broken,
COMMENT_LINE $021F this is accessed "directly" from "init_vars_main"
COMMENT_LINE $021F not thru a jumper
COMMENT_LINE $021F this is an "endpoint" of the jumper call to init_vars_main and is
COMMENT_LINE $021F exited with a jump to a subroutine, which returns correctly to the main loop (saving a few cycles)
COMMENT $021F setup DP
COMMENT $0223 reset vector beam
COMMENT $0226 set intensity
COMMENT $0228 to $3f
COMMENT $022B move to a position
COMMENT $0231 set a low scaling factor
COMMENT $0233 (timer 1 is scaling)
COMMENT $0235 load the vector representation of "no link" to U
COMMENT $0238 and draw that -> and exit subroutine to main
COMMENT_LINE $023B drawing the "you" at the right position
COMMENT_LINE $023B players are actually drawn with the "same" routine (no differentiation between primary and secondary)
COMMENT $023B ensure link is still valid
COMMENT $023E if not, jump to init (must be 0 for primary)
COMMENT $0240 setup DP
COMMENT $0244 reset vector beam
COMMENT $0247 intensity of "you" string offset table
COMMENT $024A load waitRecal counter as an offset
COMMENT $024D divide by two
COMMENT $024E and only use the lower nibble
COMMENT $0250 as an offset index to the "blink" intensities
COMMENT $0252 set intensity
COMMENT $0255 x = current used player structure
COMMENT $0258 get current input readings (joystick and buttons), and set D to POS of player
COMMENT $025A move "cursor" to that position
COMMENT $025D set a low scaling factor
COMMENT $025F (timer 1 is scaling)
COMMENT $0261 load pointer of vectorlist "you" to U
COMMENT $0264 and output it at the current position
COMMENT $0267 draw the player "signs"
COMMENT_LINE $0269 drawing the "you" at the right position
COMMENT_LINE $0269 players are actually drawn with the "same" routine (no differentiation between primary and secondary)
COMMENT $0269 ensure link is still valid
COMMENT $026C must be 1 for secondary
COMMENT $026E if not, jump to init
COMMENT $0270 setup DP
COMMENT $0274 reset vector beam
COMMENT $0277 intensity of "you" string offset table
COMMENT $027A load waitRecal counter as an offset
COMMENT $027D divide by two
COMMENT $027E and only use the lower nibble
COMMENT $0280 as an offset index to the "blink" intensities
COMMENT $0282 set intensity
COMMENT $0285 x = current used player structure
COMMENT $0288 get current input readings (joystick and buttons), and set D to POS of player
COMMENT $028A move "cursor" to that position
COMMENT $028D set a low scaling factor
COMMENT $028F (timer 1 is scaling)
COMMENT $0291 load pointer of vectorlist "you" to U
COMMENT $0294 and output it at the current position
COMMENT $0297 draw the player "signs"
COMMENT_LINE $0299 in x is the player structure given
COMMENT_LINE $0299 apply the current input to the given player structure
COMMENT_LINE $0299 digital joystick movements (filled before) are represented
COMMENT_LINE $0299 by +1, 0, -1 (for vertical and horizontal joystick positions)
COMMENT_LINE $0299 button states are respected and applied (intensity change of pressed or released)
COMMENT_LINE $0299 exits with D filled with position of player
COMMENT_LINE $0299 first
COMMENT_LINE $0299 check the button state of port 0
COMMENT_LINE $0299 if any button is pressed, intensity in the player structure is decreased (not below 0)
COMMENT_LINE $0299 if no button is pressed it is increased (not above intensity $4f)
COMMENT $0299 load current button state
COMMENT $029C test for any button of port 0 (mask: 0000 1111)
COMMENT_LINE $02A0 decrease intensity if no button was pressed
COMMENT $02A0 load current intensity
COMMENT $02A2 check if already zero, if yes, just go on
COMMENT $02A4 if not - decrease it
COMMENT $02A5 and store it in the player structure
COMMENT $02A7 go on
COMMENT $02A9 load current intensity
COMMENT $02AB check if maxed
COMMENT $02AD if yes - go on
COMMENT $02AF if not increase
COMMENT $02B0 and store it
COMMENT $02B2 load the last got joystick vertical/horizontal values to D[Y,X] (0,-1 or 1))
COMMENT $02B5 double Y (contains now -2, 0 or +2)
COMMENT $02B6 add to that value the current Y pos from player structure
COMMENT $02B8 do the same with x: double X (contains now -2, 0 or +2)
COMMENT $02B9 add to that value the current X pos from player structure
COMMENT $02BB and store the result back to the player structure
COMMENT $02BD leaving with d set to the position Y, X
COMMENT $02BE reset vector beam
COMMENT $02C1 get intensity of primary
COMMENT $02C4 set that intensity
COMMENT $02C7 load the primary position
COMMENT $02CA move there
COMMENT $02CD load a "medium" scale value
COMMENT $02CF and set it (timer 1 is scaling)
COMMENT $02D1 for primary load the trianlge vectorlist
COMMENT $02D4 and draw it
COMMENT $02D7 repeat the above for secondary player, - reset vector beam
COMMENT $02DA get intensity of secondary
COMMENT $02DD set that intensity
COMMENT $02E0 load the secondary position
COMMENT $02E3 move there
COMMENT $02E6 load a "medium" scale value
COMMENT $02E8 and set it (timer 1 is scaling)
COMMENT $02EA for secondary load the diamond vectorlist
COMMENT $02ED and draw it
COMMENT $02F0 done
COMMENT_LINE $02F1 expects pointer to a vector list in U
COMMENT_LINE $02F1 format of vector list is: %Y %X %M (delta Y, delta X, mode)
COMMENT_LINE $02F1 mode: $80 = end
COMMENT_LINE $02F1 anything else = pattern
COMMENT $02F1 load Y delta to A
COMMENT $02F3 store to DAC
COMMENT $02F5 clr port B (mux enabled, mux sel = y) -> thus integrator Y will update with Y delta
COMMENT $02F7 get X delta to A and pattern to B
COMMENT $02F9 disable mux
COMMENT $02FB set X delta to A
COMMENT_LINE $02FE I think Alex is doing a trick here
COMMENT_LINE $02FE to prevent the "dotting" of vectors
COMMENT_LINE $02FE when being displayed
COMMENT_LINE $02FE usually the light is switched ON too soon, this might prevent that (a little)
COMMENT $02FE shorten the pattern by 3 upper bits (6 cycles are still "blank") [1 shift needs 2 cpu cycles]
COMMENT_LINE $0300 as long, as bit 0 is 1 at the end of the complete shift cycle, the line will be displayed
COMMENT_LINE $0300 correctly, I wonder what appears on screen if bit 0 of the pattern is 0, than probably
COMMENT_LINE $0300 only the beginning and the end of the line is shown
COMMENT $0300 put that configured pattern to shift, shifting starts
COMMENT $0302 start the timer (this instruction takes exactly 6 cycles - this is the above done offset!)
COMMENT $0304 load the un altered pattern to b
COMMENT $0306 and patch that also (upper 4 bits only)
COMMENT_LINE $0308 I don't know what patching the "switch of" shift really accomplishes
COMMENT_LINE $0308 since RAMP will be disabled by the timer, and shift will still be on for to long...
COMMENT $0308 test bit for timer 1
COMMENT $030A test if timer has run out
COMMENT $030C if timer is still counting down - continue
COMMENT $030E store the "other" side of the patched pattern to shiftreg
COMMENT $0310 load net pattern byte
COMMENT $0312 if == $80 we finished with our vector list
COMMENT $0314 if not - display next vector
COMMENT_LINE $03AB query joystick buttons
COMMENT_LINE $03AB joytick pot readings are also switched by the (de)muliplexer (analog section)
COMMENT_LINE $03AB with joystick pots the switching is not done in regard of the output (in opposite to "input" switching of integrator logic)
COMMENT_LINE $03AB but with regard to input
COMMENT_LINE $03AB thus, the SEL part of the mux now selects which joystick pot is selected and send to the compare logic.
COMMENT_LINE $03AB mux sel:
COMMENT_LINE $03AB xxxx x00x: port 0 horizontal
COMMENT_LINE $03AB xxxx x01x: port 0 vertical
COMMENT_LINE $03AB xxxx x10x: port 1 horizontal
COMMENT_LINE $03AB xxxx x11x: port 1 vertical
COMMENT_LINE $03AB the result of the pot reading is compared to the
COMMENT_LINE $03AB value present in the dac and according to the comparisson the compare flag of VIA (bit 5 of port b) is set.
COMMENT_LINE $03AB (compare bit is = if contents of dac was "smaller" (signed) than the "pot" read)
COMMENT $03AB setup DP
COMMENT $03AF read joystick buttons and set the result to BIOS RAM location (Vec_Btn_State)
COMMENT_LINE $03B2 reset integrator offsets
COMMENT $03B2 mux disabled, mux sel = 01 (vertical pot port 0)
COMMENT $03B6 dac = 0
COMMENT $03B8 mux enabled, mux sel = 01
COMMENT $03BA a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $03BC ...
COMMENT $03BD wait...
COMMENT $03BF disable mux
COMMENT $03C1 load b with comparator bit (0010 0000)
COMMENT $03C3 load a with test value (positive y)
COMMENT $03C5 test value to DAC
COMMENT $03C7 default result value y was pushed UP
COMMENT $03C9 test comparator
COMMENT $03CB if comparator cleared - joystick was moved up
COMMENT $03CD "load" with negative value
COMMENT $03CF also switch the possible result in A
COMMENT $03D0 test comparator again
COMMENT $03D2 if cleared the joystick was moved down
COMMENT $03D4 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $03D5 remember the result in "our" joystick data
COMMENT_LINE $03D8 now the same for horizontal
COMMENT $03D8 mux disabled, mux sel = 00 (horizontal pot port 0)
COMMENT $03DC dac = 0
COMMENT $03DE mux enabled, mux sel = 01
COMMENT $03E0 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $03E2 ...
COMMENT $03E3 wait...
COMMENT $03E5 disable mux
COMMENT $03E7 load b with comparator bit (0010 0000)
COMMENT $03E9 load a with test value (positive x)
COMMENT $03EB test value to DAC
COMMENT $03ED default result value x was pushed right
COMMENT $03EF test comparator
COMMENT $03F1 if comparator cleared - joystick was moved right
COMMENT $03F3 "load" with negative value
COMMENT $03F5 also switch the possible result in A
COMMENT $03F6 test comparator again
COMMENT $03F8 if cleared the joystick was moved left
COMMENT $03FA if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $03FB remember the result in "our" joystick data
COMMENT $03FE done
COMMENT_LINE $03FF the "you" string is shown with different intensity levels
COMMENT_LINE $03FF this is an offset table to the intensities used (16) -> blinking
RANGE $0000-$040D DP $D0
RANGE $0000-$000B DB_DATA
RANGE $000B-$000D DW_DATA
RANGE $000D-$000E DB_DATA
RANGE $000E-$0011 CODE
RANGE $0011-$0017 DB_DATA
RANGE $0017-$0317 CODE
RANGE $0317-$03AB DB_DATA
RANGE $03AB-$03FF CODE
RANGE $03FF-$040F DB_DATA

