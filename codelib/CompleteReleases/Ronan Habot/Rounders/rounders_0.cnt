BANK 0
EQU $00 
LABEL $F192 Wait_Recal
LABEL $D004 VIA_t1_cnt_lo
LABEL $C856 Vec_Music_Flag
LABEL $C867 Vec_Expl_Flag
LABEL $C829 Vec_line_pat
LABEL $C823 Vec_Misc_Count
LABEL $F2AB Intensity_to_a
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F312 Moveto_d
LABEL $F30C Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F434 Draw_Pat_VL_a
LABEL $F3DD Draw_VL
LABEL $F3CE Draw_VLc
LABEL $F410 Draw_VLp
LABEL $F56D Delay_3
LABEL $F57A Delay_b
LABEL $F584 Abs_a_b
LABEL $F1BA Read_Btns
LABEL $C80F Vec_Btn_State
LABEL $F378 Print_Str_xy
LABEL $F37A Print_Str_d
LABEL $F3BE Mov_Draw_VL_d
LABEL $F3DF Draw_line_d
LABEL $F34A Reset0Ref_D0
LABEL $F354 Reset0Ref
LABEL $F2D5 Dot_list
LABEL $F2C5 Dot_here
LABEL $F511 Random
LABEL $F517 Random_3
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_D8
LABEL $F8FF Obj_Hit
LABEL $C82A Vec_Text_HW
LABEL $F256 byte2sndchip
LABEL $F259 byte2sndchip2
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $C81F JOYENS
COMMENT_LABEL $C81F JOYSTICK ENABLES (4 BYTES)
LABEL $F1F8 Joy_Digital
LABEL $F1F5 Joy_Analog
LABEL $C81A Vec_Joy_Resltn
LABEL $C81B Vec_Joy_1_X
LABEL $C81C Vec_Joy_1_Y
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $CBEB Vec_High_Score
LABEL $F393 Print_Ships
LABEL $F06C Warm_Start
LABEL $FD0D Music1
LABEL $FD1D Music2
LABEL $FD81 Music3
LABEL $FDD3 Music4
LABEL $FE38 Music5
LABEL $FE76 Music6
LABEL $FEC6 Music7
LABEL $FEF8 Music8
LABEL $FF26 Music9
LABEL $FF44 Musica
LABEL $FF62 Musicb
LABEL $FF7A Musicc
LABEL $FF8F Musicd
LABEL $F289 Do_Sound
LABEL $F687 Init_Music_chk
LABEL $F548 Clear_x_d
LABEL $F53F Clear_x_b
LABEL $F000 Cold_Start
LABEL $F256 Sound_Byte
LABEL $F601 Rise_Run_Y
LABEL $F5FF Rise_Run_X
LABEL $F610 Rot_VL_ab
LABEL $C880 Vec_Text_Width_neg
LABEL $C881 PointsNr
LABEL $C882 RealTimeCounter
LABEL $C883 temp
LABEL $C884 OpeningString
COMMENT_LABEL $C884 Reserve 13 locations
LABEL $C890 Plyr1BallYpos
LABEL $C891 Plyr1BallXpos
LABEL $C892 Plyr1BallFlag
LABEL $C893 Plyr1LocationIndex
LABEL $C894 Plyr1Ypos
LABEL $C895 Plyr1Xpos
LABEL $C896 Plyr1BallDirection
LABEL $C997 Plyr1PaddleMem
COMMENT_LABEL $C997 Reserve 10 locations
LABEL $C9A1 Plyr1BallMoveY
LABEL $C9A2 Plyr1BallMoveX
LABEL $C9A3 Plyr1BallIndex
LABEL $C9A5 Plyr1TurnsNr
LABEL $C9A6 Plyr1MissedFlag
LABEL $C9A7 Plyr1ScoreTable
COMMENT_LABEL $C9A7 Reseve 8 locations
LABEL $C9B0 Plyr1LevelDelay
LABEL $C9B1 Plyr1LevelFlag
LABEL $C9B2 Plyr1CurrentScore
LABEL $C9B3 Plyr1Level
LABEL $C9B4 DrawPlyr1Flag
LABEL $C8A0 Plyr2BallYpos
LABEL $C8A1 Plyr2BallXpos
LABEL $C8A2 Plyr2BallFlag
LABEL $C8A3 plyr2IndxLoc
LABEL $C8A4 plyr2Ypos
LABEL $C8A5 plyr2Xpos
LABEL $C8A6 Plyr2BallDirection
LABEL $C8A7 OrigRandom
LABEL $C8A8 PosRandom
LABEL $C8A0 PlyrNum
LABEL $C8A1 RndJoyType
LABEL $C8A2 RndHiScoreTable
COMMENT_LABEL $C8A2 Reserve 8 locations
LABEL $C8B0 MissedSoundFlag
LABEL $C8B1 HitSoundFlag
LABEL $C8B2 LevelSoundFlag
LABEL $C8B3 TempRadius
LABEL $C8B4 TempIndex
LABEL $C8B5 TempBtns
LABEL $C8B6 CtrlType
LABEL $C900 dbg1_tbl
LABEL $C908 dbg2_tbl
LABEL $C910 dbg3_tbl
LABEL $C918 TempValue1
LABEL $C919 TempValue2
EQU $00 VEC_CTRL
COMMENT_LABEL $00 Regular Vectrex controller
EQU $01 DRV_CTRL
COMMENT_LABEL $01 Atari Driving controller (Vectrex Ctrlr is on Port#2)
EQU $04 OPENING_CIR_DISTANCE
COMMENT_LABEL $04 64 (256/4) points for the opeining circle
EQU $03 PADDLE_VL
COMMENT_LABEL $03 Vector Length -1 of paddle
EQU $02 SCALE1
COMMENT_LABEL $02 Scale factor for paddle1
EQU $01 SCALE2
COMMENT_LABEL $01 Scale factor for Box
EQU $0B PDL_MEM
COMMENT_LABEL $0B Locations in the memory
EQU $57 PADDLE_RADIUS
COMMENT_LABEL $57 was 90
EQU $03 HIT_SOUND_NOTES_NUM
COMMENT_LABEL $03 Number of notes to play
EQU $09 MAX_TURNS
COMMENT_LABEL $09 Number of turns per player
LABEL $7F90 PLYR1_INFO_YX
COMMENT_LABEL $7F90 Location for plyr1 info
LABEL $7083 PLYR1_SCORE_YX
COMMENT_LABEL $7083 Location for plyr1 score
LABEL $7F50 PLYR1_LEVEL_YX
COMMENT_LABEL $7F50 Location for plyr1 level
LABEL $4AE9 HSCORE_POS
COMMENT_LABEL $4AE9 Location of HiScore @ the end
EQU $05 NOVICE
EQU $04 INTERMIDIATE
EQU $03 EXPERT
EQU $32 SWITCH_TO_INTERMIDIATE
EQU $4B SWITCH_TO_EXPERT
EQU $64 SWITCH_TO_BLINK
LABEL $05B9 l_RndStart
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
EQU $1E _my_Char_Tableb1
EQU $6E _my_Char_Tableb2
LABEL $00BE _my_Char_Tableb3
LABEL $F9D4 Char_Tablef1
LABEL $FA74 Char_Tablef2
LABEL $FB14 Char_Tablef3
LABEL $FBB4 Char_Tablef4
EQU -$02 Char_Tableb1
EQU $4E Char_Tableb2
LABEL $009E Char_Tableb3
LABEL $010E my_Print_Str_hwyx
LABEL $012D LF33D2
LABEL $013C LF4A53
LABEL $0159 LF4C7_14
LABEL $018B LF4C7_26
LABEL $01BD LF4C7_18
LABEL $01EF LF4C7_210
LABEL $0221 LF4C7_112
LABEL $0253 LF4C7_214
LABEL $0285 LF4C7_116
LABEL $028F LF50A3
LABEL $029A my_Print_Str
LABEL $02A3 LF4A518
LABEL $02C0 LF4C7_119
LABEL $02F2 LF4C7_221
LABEL $0324 LF4C7_123
LABEL $0356 LF4C7_225
LABEL $0388 LF4C7_127
LABEL $03BA LF4C7_229
LABEL $03EC LF4C7_131
LABEL $03F6 LF50A18
LABEL $0401 my_Print_List
LABEL $0401 Print_List133
LABEL $041B LF33D35
LABEL $042A LF4A536
LABEL $0447 LF4C7_137
LABEL $0479 LF4C7_239
LABEL $04AB LF4C7_141
LABEL $04DD LF4C7_243
LABEL $050F LF4C7_145
LABEL $0541 LF4C7_247
LABEL $0573 LF4C7_149
LABEL $057D LF50A36
LABEL $058F my_Print_Ships
LABEL $05A5 LF3A3_
LABEL $099A s_RndInit
LABEL $05DC s_RndOpening
LABEL $1906 s_RndSetJoystick
LABEL $05C2 l_RndMainLoop
LABEL $098F s_RndRefreshScreen
LABEL $1258 s_RndDrawBackground
LABEL $1915 s_RndCheckJoystick
LABEL $1216 s_RndDrawPlyr1
LABEL $1073 s_RndDrawPlyr1Ball
LABEL $19AE s_RndCheckSound
LABEL $1278 s_RndPrintInfo
LABEL $1A8F s_RndCheckGameStatus
LABEL $1E98 l_RoundersString
LABEL $19A2 s_CopyMem
LABEL $05F6 l_RndOpening_loop
LABEL $1993 s_RealTimeClock
LABEL $1F2F paddle1
LABEL $0639 l_PrintRounders
LABEL $065F LF33D52
LABEL $066E LF4A553
LABEL $068B LF4C7_154
LABEL $06BD LF4C7_256
LABEL $06EF LF4C7_158
LABEL $0721 LF4C7_260
LABEL $0753 LF4C7_162
LABEL $0785 LF4C7_264
LABEL $07B7 LF4C7_166
LABEL $07C1 LF50A53
LABEL $1E44 l_RndOpenString1
LABEL $07EE LF33D69
LABEL $07FD LF4A570
LABEL $081A LF4C7_171
LABEL $084C LF4C7_273
LABEL $087E LF4C7_175
LABEL $08B0 LF4C7_277
LABEL $08E2 LF4C7_179
LABEL $0914 LF4C7_281
LABEL $0946 LF4C7_183
LABEL $0950 LF50A70
LABEL $1FC3 sin_entry_0
LABEL $20C3 cos_entry_0
LABEL $0968 l_CircleLoop
LABEL $0982 l_WaitForBtn
LABEL $09E2 s_RndSelectGameType
LABEL $0992 l_DontWaitRecal
LABEL $09E2 s_RndSelGameType_loop
LABEL $1EA4 l_RndGameTypeMsg1
LABEL $0A02 LF33D88
LABEL $0A11 LF4A589
LABEL $0A2E LF4C7_190
LABEL $0A60 LF4C7_292
LABEL $0A92 LF4C7_194
LABEL $0AC4 LF4C7_296
LABEL $0AF6 LF4C7_198
LABEL $0B28 LF4C7_2100
LABEL $0B5A LF4C7_1102
LABEL $0B64 LF50A89
LABEL $1EB5 l_RndGameTypeMsg2
LABEL $0B8B LF33D105
LABEL $0B9A LF4A5106
LABEL $0BB7 LF4C7_1107
LABEL $0BE9 LF4C7_2109
LABEL $0C1B LF4C7_1111
LABEL $0C4D LF4C7_2113
LABEL $0C7F LF4C7_1115
LABEL $0CB1 LF4C7_2117
LABEL $0CE3 LF4C7_1119
LABEL $0CED LF50A106
LABEL $1EC3 l_RndGameTypeMsg3
LABEL $0D14 LF33D122
LABEL $0D23 LF4A5123
LABEL $0D40 LF4C7_1124
LABEL $0D72 LF4C7_2126
LABEL $0DA4 LF4C7_1128
LABEL $0DD6 LF4C7_2130
LABEL $0E08 LF4C7_1132
LABEL $0E3A LF4C7_2134
LABEL $0E6C LF4C7_1136
LABEL $0E76 LF50A123
LABEL $1ED7 l_RndGameTypeMsg4
LABEL $0EA2 LF33D140
LABEL $0EB1 LF4A5141
LABEL $0ECE LF4C7_1142
LABEL $0F00 LF4C7_2144
LABEL $0F32 LF4C7_1146
LABEL $0F64 LF4C7_2148
LABEL $0F96 LF4C7_1150
LABEL $0FC8 LF4C7_2152
LABEL $0FFA LF4C7_1154
LABEL $1004 LF50A141
LABEL $100E l_WaitForBtns
LABEL $1017 l_CheckCntrl1Btn1
LABEL $1021 l_CheckCntrl1Btn2
LABEL $101B l_Button1Pressed
LABEL $1030 l_CheckCntrl1Btn3
LABEL $1025 l_Button2Pressed
LABEL $103C l_CheckCntrl2Btn1
LABEL $1034 l_Button3Pressed
LABEL $104B l_CheckCntrl2Btn2
LABEL $1040 l_Button21Pressed
LABEL $105F l_CheckCntrl2Btn3
LABEL $104F l_Button22Pressed
LABEL $1065 l_Button23Pressed
LABEL $108B l_ExitDrawPlyr1Ball
LABEL $1F37 l_Ball
LABEL $108C s_PlyrBallMove
LABEL $1098 l_BallHasToMove
LABEL $2185 l_BallMoveEntry
LABEL $10BC l_BallMovesIn
LABEL $10B4 l_BallMovesOut
LABEL $10C2 l_StoreBallPos
LABEL $1134 l_CheckBallHitCenter
LABEL $10CD l_CheckBallHitPlyr
LABEL $11D7 s_CalcRadius
LABEL $1143 l_NoHitThisTime
LABEL $1118 l_CheckBallMissedPlyr
LABEL $2345 l_PaddleHitEntry
LABEL $10FA l_SpecialHitCheck
LABEL $1144 l_Plyr1ChangeDirection
LABEL $1129 l_PlyrMissed
LABEL $1148 s_ChangeBallDirection
LABEL $1147 l_ExitPlyrBallMove
LABEL $11C3 l_Plyr1UpdateDirectionFlag
LABEL $2457 l_RndTbl
LABEL $1169 l_CalcNewIndex
LABEL $1165 l_NotAnExpertYet
LABEL $117D l_NegativeIndex
LABEL $1175 l_positiveIndex
LABEL $1183 l_CheckNewIndexRange1
LABEL $118D l_CheckNewIndexRange2
LABEL $1193 l_StoreNewIndex
LABEL $2407 l_HitCenterPos
LABEL $1AA6 s_UpdateLevels
LABEL $11DA l_CalcY
LABEL $11E1 l_CalcX
LABEL $11E9 l_CalcIndex
LABEL $2245 l_RadiusEntry0
LABEL $11F2 s_RndDrawCircle
LABEL $11F9 l_BckgndCircleLoop
LABEL $1225 l_NoBlinkMode
LABEL $1257 l_ExitRndDrawPlyr1
LABEL $1F40 l_Box
LABEL $128F l_PrintLevelInfo
LABEL $1424 l_NotNovice
LABEL $1F01 l_RndLevelNOVICE
LABEL $12B5 LF33D157
LABEL $12C4 LF4A5158
LABEL $12E1 LF4C7_1159
LABEL $1313 LF4C7_2161
LABEL $1345 LF4C7_1163
LABEL $1377 LF4C7_2165
LABEL $13A9 LF4C7_1167
LABEL $13DB LF4C7_2169
LABEL $140D LF4C7_1171
LABEL $1417 LF50A158
LABEL $18D1 l_EndOfLevelInfo
LABEL $15B6 l_NotIntermidiate
LABEL $1F0B l_RndLevelINTER
LABEL $1447 LF33D174
LABEL $1456 LF4A5175
LABEL $1473 LF4C7_1176
LABEL $14A5 LF4C7_2178
LABEL $14D7 LF4C7_1180
LABEL $1509 LF4C7_2182
LABEL $153B LF4C7_1184
LABEL $156D LF4C7_2186
LABEL $159F LF4C7_1188
LABEL $15A9 LF50A175
LABEL $1748 l_NotExpert
LABEL $1F1B l_RndLevelEXPERT
LABEL $15D9 LF33D191
LABEL $15E8 LF4A5192
LABEL $1605 LF4C7_1193
LABEL $1637 LF4C7_2195
LABEL $1669 LF4C7_1197
LABEL $169B LF4C7_2199
LABEL $16CD LF4C7_1201
LABEL $16FF LF4C7_2203
LABEL $1731 LF4C7_1205
LABEL $173B LF50A192
LABEL $1F25 l_RndLevelBLINK
LABEL $1765 LF33D208
LABEL $1774 LF4A5209
LABEL $1791 LF4C7_1210
LABEL $17C3 LF4C7_2212
LABEL $17F5 LF4C7_1214
LABEL $1827 LF4C7_2216
LABEL $1859 LF4C7_1218
LABEL $188B LF4C7_2220
LABEL $18BD LF4C7_1222
LABEL $18C7 LF50A209
LABEL $18D5 l_RndPrintValues
LABEL $1931 l_AtariDrvCtrl
LABEL $191A l_RndDigitalStick
LABEL $193A l_RndXDone
LABEL $192C l_RndLeftMove
LABEL $1927 l_RndRightMove
LABEL $2467 s_DrvCtrlr
LABEL $193E s_RndCheckBtns
LABEL $1957 l_RndCheckBtnsRTS
LABEL $1948 check_btn1_4
LABEL $1950 check_btn2_4
LABEL $1958 s_StartSession
LABEL $199E l_ExitUpdateRealTimeClock
LABEL $19B0 l_CheckMissedFlag
LABEL $19B7 l_MakeMissedSound
LABEL $19E7 l_CheckHitFlag
LABEL $19C9 l_PlayMissedSound
LABEL $19BC l_StopMissedSound
LABEL $1A65 l_CheckSoundExit
LABEL $1A68 l_MissedVolume
LABEL $19EE l_MakeHitSound
LABEL $1A26 l_CheckLevelFlag
COMMENT_LABEL $1A26 using channel 3
LABEL $19FF l_PlayHitSound
LABEL $1A73 l_HitSound
LABEL $1A2D l_CheckLevelSound
LABEL $1A65 l_Check4FallSound
LABEL $1A3E l_PlayLevelSound
LABEL $1A78 l_GoodSound
LABEL $1A84 l_Bad_Volume
LABEL $1A8F l_StatusMissedFlag
LABEL $1AA5 l_RndCheckGameStatusExit
LABEL $1AA2 l_RndGmaeOver
LABEL $1AF2 s_RndGameOver
LABEL $1AEE l_SetUpdateFlag
LABEL $1AAD l_CheckIntermidiate
LABEL $1AC4 l_CheckExpert
LABEL $1AB1 l_SwitchToINTERMIDIATE
LABEL $1ADE l_CheckBlinkLevel
LABEL $1ACB l_SwitchToEXPERT
LABEL $1AED l_ExitUpdateLevels
LABEL $1AE5 l_SwitchToBLINK
LABEL $1AFB l_RndGameOver_loop
LABEL $1EE5 l_RndHighScoreMsg
LABEL $1B2D LF33D226
LABEL $1B3C LF4A5227
LABEL $1B59 LF4C7_1228
LABEL $1B8B LF4C7_2230
LABEL $1BBD LF4C7_1232
LABEL $1BEF LF4C7_2234
LABEL $1C21 LF4C7_1236
LABEL $1C53 LF4C7_2238
LABEL $1C85 LF4C7_1240
LABEL $1C8F LF50A227
LABEL $1EF3 l_RndGameOverMsg
LABEL $1CCC LF33D245
LABEL $1CDB LF4A5246
LABEL $1CF8 LF4C7_1247
LABEL $1D2A LF4C7_2249
LABEL $1D5C LF4C7_1251
LABEL $1D8E LF4C7_2253
LABEL $1DC0 LF4C7_1255
LABEL $1DF2 LF4C7_2257
LABEL $1E24 LF4C7_1259
LABEL $1E2E LF50A246
LABEL $1E41 l_RndBtnWasPressed
LABEL $1E5E l_RndOpenString2
LABEL $1E7C l_RndOpenString3
LABEL $1F49 sin_tbl
LABEL $2043 cos_tbl
LABEL $2143 l_BallMove
LABEL $21C5 l_Radius
LABEL $22C5 l_PaddleHit
LABEL $2482 l_DirTbl
LABEL $2492 *
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   ROUNDERS.ASM                                                      |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   Copyright 2001, Ronen Habot                                       |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 file created 01-Jun-99
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   VECTREX.INC                                                       |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   Copyright 1999, Ronen Habot                                       |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 file created 01-Dec-99
COMMENT_LINE $0000 Explosion_Snd		EQU	$F92E
COMMENT_LINE $0000 Do_Sound		EQU     $F289
COMMENT_LINE $0000 Clear_Sound		EQU	$F272
COMMENT_LINE $0000 Player 1 variables
COMMENT_LINE $0000 ;;Plyr1BallEndIndex	EQU	$C9A4
COMMENT_LINE $0000 Player 2 variables
COMMENT_LINE $0000 General purpose variables
COMMENT_LINE $0000 Sound related variables
COMMENT_LINE $0000 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0000 Begining of the main program
COMMENT_LINE $0000 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $0000 magic init block
FORCE_SYMBOL $001B l_RndStart
COMMENT $001E replecement for bios print func
COMMENT_LINE $001E VIA_t1_cnt_lo   EQU     $D004   ;VIA timer 1 count register lo (scale factor)
COMMENT_LINE $001E **************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 expects
COMMENT_LINE $0000 b = speed
COMMENT_LINE $0000 first char
COMMENT_LINE $0000 u pointer to string
COMMENT_LINE $0000 X pointer to character display table
COMMENT_LINE $0000 Y speed = to zero
COMMENT_LINE $0000 ...
COMMENT $0000 Send it to the D/A
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT $0000 Send it to the D/A
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 expects
COMMENT_LINE $0000 b = speed
COMMENT_LINE $0000 first char
COMMENT_LINE $0000 u pointer to string
COMMENT_LINE $0000 X pointer to inverted character display table
COMMENT_LINE $0000 Y speed = to zero
COMMENT_LINE $0000 ...
COMMENT $0000 negative x speed
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 now move down
COMMENT $0000 store 'height' to dac (y)
COMMENT $0000 disable RAMP, enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 zero dac
COMMENT_LINE $0000 now only y set, x to zero
COMMENT $0000 enable RAMP, disable mux
COMMENT_LINE $0000 here we move down
COMMENT $0000 enable RAMP, enable mux
COMMENT_LINE $0000 tricky, cutting y off while
COMMENT_LINE $0000 integrating, saves one switch of mux
COMMENT_LINE $0000 still b=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 now finnished moving down
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 now move down
COMMENT $0000 store 'height' to dac (y)
COMMENT $0000 disable RAMP, enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 zero dac
COMMENT_LINE $0000 now only y set, x to zero
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 Get first character
COMMENT $0000 enable RAMP, enable mux
COMMENT_LINE $0000 tricky, cutting y off while
COMMENT_LINE $0000 integrating, saves one switch of mux
COMMENT_LINE $0000 still B=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 now finnished moving down
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 U=String pointer to first $81
COMMENT $0000 Clear D/A output
COMMENT $0000 Shift reg mode = 110, T1 PB7 enabled
COMMENT $0000 enable mux, set y to 0 disable ramp
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text width
COMMENT $0000 T1->PB7 enabled
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 this is mainly taken from move to d makro...
COMMENT_LINE $0000 for a describtion look at that or the rom dissassembly...
COMMENT_LINE $0000 Moveto_d_7F start
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT $0000 text size
COMMENT $0000 position
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 special printstr routines
COMMENT_LINE $0000 expect
COMMENT_LINE $0000 strings termitated on both ends with $81
COMMENT_LINE $0000 ***************************************************************************
COMMENT $010E text size
FORCE_SYMBOL $0110 Vec_Text_HW
COMMENT $0113 position
COMMENT_LINE $0115 Moveto_d_7F start
FORCE_SYMBOL $0115 VIA_port_a
FORCE_NO_SYMBOL $0117
FORCE_SYMBOL $0119 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $011B
FORCE_SYMBOL $011D VIA_cntl
FORCE_SYMBOL $0120 VIA_port_b
FORCE_SYMBOL $0122 VIA_shift_reg
FORCE_SYMBOL $0124 VIA_port_b
FORCE_SYMBOL $0126 VIA_port_a
FORCE_SYMBOL $0128 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $012A
FORCE_SYMBOL $012D VIA_int_flags
FORCE_SYMBOL $0131 VIA_port_a
COMMENT_LINE $0133 U=String pointer to first $81
FORCE_NO_SYMBOL $0133
COMMENT $0135 Clear D/A output
FORCE_SYMBOL $0135 VIA_port_a
COMMENT $0137 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0137 VIA_aux_cntl
FORCE_SYMBOL $0139 Char_Tablef1
FORCE_NO_SYMBOL $013C
COMMENT $013E enable mux, set y to 0 disable ramp
FORCE_SYMBOL $013E VIA_port_b
COMMENT $0140 disable RAMP, disable mux
FORCE_SYMBOL $0140 VIA_port_b
COMMENT $0144 Get text width
FORCE_SYMBOL $0144 Vec_Text_Width
FORCE_SYMBOL $0148 Vec_Text_Width_neg
COMMENT $014E Send it to the D/A
FORCE_SYMBOL $014E VIA_port_a
FORCE_NO_SYMBOL $0150
COMMENT $0152 enable RAMP, disable mux
FORCE_SYMBOL $0152 VIA_port_b
COMMENT $0154 delay needed for drawing
COMMENT $0159 Get bitmap from chargen table
COMMENT $015B Save in shift register
FORCE_SYMBOL $015B VIA_shift_reg
COMMENT $015D Get next character
COMMENT $015F Go back if not terminator
COMMENT_LINE $0161 A=$81
COMMENT $0161 disable RAMP, disable mux
FORCE_SYMBOL $0161 VIA_port_b
FORCE_SYMBOL $0163 Char_Tableb1
COMMENT $0166 Get text height
FORCE_SYMBOL $0166 Vec_Text_Height
COMMENT_LINE $0169 now move down
COMMENT $0169 store 'height' to dac (y)
FORCE_SYMBOL $0169 VIA_port_a
COMMENT $016B disable RAMP, enable mux
FORCE_SYMBOL $016B VIA_port_b
COMMENT $016D disable RAMP, disable mux
FORCE_SYMBOL $016D VIA_port_b
COMMENT $016F zero dac
FORCE_SYMBOL $016F VIA_port_a
COMMENT_LINE $0171 now only y set, x to zero
FORCE_NO_SYMBOL $0171
COMMENT $0173 enable RAMP, disable mux
FORCE_SYMBOL $0173 VIA_port_b
COMMENT $0177 Get first character
COMMENT $0179 enable RAMP, enable mux
FORCE_SYMBOL $0179 VIA_port_b
COMMENT_LINE $017B tricky, cutting y off while
COMMENT_LINE $017B integrating, saves one switch of mux
COMMENT_LINE $017B still B=$81
COMMENT $017B disable RAMP, disable mux
FORCE_SYMBOL $017B VIA_port_b
FORCE_SYMBOL $017D Vec_Text_Width_neg
COMMENT_LINE $0180 now finnished moving down
COMMENT $0180 negative x speed
FORCE_SYMBOL $0180 VIA_port_a
FORCE_NO_SYMBOL $0182
COMMENT $0184 enable RAMP, disable mux
FORCE_SYMBOL $0184 VIA_port_b
COMMENT $0186 delay needed for drawing
COMMENT $018B Get bitmap from chargen table
COMMENT $018D Save in shift register
FORCE_SYMBOL $018D VIA_shift_reg
COMMENT $018F Get next character
COMMENT $0191 Go back if not terminator
COMMENT_LINE $0193 A=$81
COMMENT $0193 disable RAMP, disable mux
FORCE_SYMBOL $0193 VIA_port_b
FORCE_SYMBOL $0195 Char_Tablef2
COMMENT $0198 Get text height
FORCE_SYMBOL $0198 Vec_Text_Height
COMMENT_LINE $019B now move down
COMMENT $019B store 'height' to dac (y)
FORCE_SYMBOL $019B VIA_port_a
COMMENT $019D disable RAMP, enable mux
FORCE_SYMBOL $019D VIA_port_b
COMMENT $019F disable RAMP, disable mux
FORCE_SYMBOL $019F VIA_port_b
COMMENT $01A1 zero dac
FORCE_SYMBOL $01A1 VIA_port_a
COMMENT_LINE $01A3 now only y set, x to zero
FORCE_NO_SYMBOL $01A3
COMMENT $01A5 enable RAMP, disable mux
FORCE_SYMBOL $01A5 VIA_port_b
COMMENT_LINE $01A7 here we move down
COMMENT $01AB enable RAMP, enable mux
FORCE_SYMBOL $01AB VIA_port_b
COMMENT_LINE $01AD tricky, cutting y off while
COMMENT_LINE $01AD integrating, saves one switch of mux
COMMENT_LINE $01AD still b=$81
COMMENT $01AD disable RAMP, disable mux
FORCE_SYMBOL $01AD VIA_port_b
FORCE_SYMBOL $01AF Vec_Text_Width
COMMENT_LINE $01B2 now finnished moving down
COMMENT $01B2 Send it to the D/A
FORCE_SYMBOL $01B2 VIA_port_a
FORCE_NO_SYMBOL $01B4
COMMENT $01B6 enable RAMP, disable mux
FORCE_SYMBOL $01B6 VIA_port_b
COMMENT $01B8 delay needed for drawing
COMMENT $01BD Get bitmap from chargen table
COMMENT $01BF Save in shift register
FORCE_SYMBOL $01BF VIA_shift_reg
COMMENT $01C1 Get next character
COMMENT $01C3 Go back if not terminator
COMMENT_LINE $01C5 A=$81
COMMENT $01C5 disable RAMP, disable mux
FORCE_SYMBOL $01C5 VIA_port_b
FORCE_SYMBOL $01C7 Char_Tableb2
COMMENT $01CA Get text height
FORCE_SYMBOL $01CA Vec_Text_Height
COMMENT_LINE $01CD now move down
COMMENT $01CD store 'height' to dac (y)
FORCE_SYMBOL $01CD VIA_port_a
COMMENT $01CF disable RAMP, enable mux
FORCE_SYMBOL $01CF VIA_port_b
COMMENT $01D1 disable RAMP, disable mux
FORCE_SYMBOL $01D1 VIA_port_b
COMMENT $01D3 zero dac
FORCE_SYMBOL $01D3 VIA_port_a
COMMENT_LINE $01D5 now only y set, x to zero
FORCE_NO_SYMBOL $01D5
COMMENT $01D7 enable RAMP, disable mux
FORCE_SYMBOL $01D7 VIA_port_b
COMMENT $01DB Get first character
COMMENT $01DD enable RAMP, enable mux
FORCE_SYMBOL $01DD VIA_port_b
COMMENT_LINE $01DF tricky, cutting y off while
COMMENT_LINE $01DF integrating, saves one switch of mux
COMMENT_LINE $01DF still B=$81
COMMENT $01DF disable RAMP, disable mux
FORCE_SYMBOL $01DF VIA_port_b
FORCE_SYMBOL $01E1 Vec_Text_Width_neg
COMMENT_LINE $01E4 now finnished moving down
COMMENT $01E4 negative x speed
FORCE_SYMBOL $01E4 VIA_port_a
FORCE_NO_SYMBOL $01E6
COMMENT $01E8 enable RAMP, disable mux
FORCE_SYMBOL $01E8 VIA_port_b
COMMENT $01EA delay needed for drawing
COMMENT $01EF Get bitmap from chargen table
COMMENT $01F1 Save in shift register
FORCE_SYMBOL $01F1 VIA_shift_reg
COMMENT $01F3 Get next character
COMMENT $01F5 Go back if not terminator
COMMENT_LINE $01F7 A=$81
COMMENT $01F7 disable RAMP, disable mux
FORCE_SYMBOL $01F7 VIA_port_b
FORCE_SYMBOL $01F9 Char_Tablef3
COMMENT $01FC Get text height
FORCE_SYMBOL $01FC Vec_Text_Height
COMMENT_LINE $01FF now move down
COMMENT $01FF store 'height' to dac (y)
FORCE_SYMBOL $01FF VIA_port_a
COMMENT $0201 disable RAMP, enable mux
FORCE_SYMBOL $0201 VIA_port_b
COMMENT $0203 disable RAMP, disable mux
FORCE_SYMBOL $0203 VIA_port_b
COMMENT $0205 zero dac
FORCE_SYMBOL $0205 VIA_port_a
COMMENT_LINE $0207 now only y set, x to zero
FORCE_NO_SYMBOL $0207
COMMENT $0209 enable RAMP, disable mux
FORCE_SYMBOL $0209 VIA_port_b
COMMENT_LINE $020B here we move down
COMMENT $020F enable RAMP, enable mux
FORCE_SYMBOL $020F VIA_port_b
COMMENT_LINE $0211 tricky, cutting y off while
COMMENT_LINE $0211 integrating, saves one switch of mux
COMMENT_LINE $0211 still b=$81
COMMENT $0211 disable RAMP, disable mux
FORCE_SYMBOL $0211 VIA_port_b
FORCE_SYMBOL $0213 Vec_Text_Width
COMMENT_LINE $0216 now finnished moving down
COMMENT $0216 Send it to the D/A
FORCE_SYMBOL $0216 VIA_port_a
FORCE_NO_SYMBOL $0218
COMMENT $021A enable RAMP, disable mux
FORCE_SYMBOL $021A VIA_port_b
COMMENT $021C delay needed for drawing
COMMENT $0221 Get bitmap from chargen table
COMMENT $0223 Save in shift register
FORCE_SYMBOL $0223 VIA_shift_reg
COMMENT $0225 Get next character
COMMENT $0227 Go back if not terminator
COMMENT_LINE $0229 A=$81
COMMENT $0229 disable RAMP, disable mux
FORCE_SYMBOL $0229 VIA_port_b
FORCE_SYMBOL $022B Char_Tableb3
COMMENT $022E Get text height
FORCE_SYMBOL $022E Vec_Text_Height
COMMENT_LINE $0231 now move down
COMMENT $0231 store 'height' to dac (y)
FORCE_SYMBOL $0231 VIA_port_a
COMMENT $0233 disable RAMP, enable mux
FORCE_SYMBOL $0233 VIA_port_b
COMMENT $0235 disable RAMP, disable mux
FORCE_SYMBOL $0235 VIA_port_b
COMMENT $0237 zero dac
FORCE_SYMBOL $0237 VIA_port_a
COMMENT_LINE $0239 now only y set, x to zero
FORCE_NO_SYMBOL $0239
COMMENT $023B enable RAMP, disable mux
FORCE_SYMBOL $023B VIA_port_b
COMMENT $023F Get first character
COMMENT $0241 enable RAMP, enable mux
FORCE_SYMBOL $0241 VIA_port_b
COMMENT_LINE $0243 tricky, cutting y off while
COMMENT_LINE $0243 integrating, saves one switch of mux
COMMENT_LINE $0243 still B=$81
COMMENT $0243 disable RAMP, disable mux
FORCE_SYMBOL $0243 VIA_port_b
FORCE_SYMBOL $0245 Vec_Text_Width_neg
COMMENT_LINE $0248 now finnished moving down
COMMENT $0248 negative x speed
FORCE_SYMBOL $0248 VIA_port_a
FORCE_NO_SYMBOL $024A
COMMENT $024C enable RAMP, disable mux
FORCE_SYMBOL $024C VIA_port_b
COMMENT $024E delay needed for drawing
COMMENT $0253 Get bitmap from chargen table
COMMENT $0255 Save in shift register
FORCE_SYMBOL $0255 VIA_shift_reg
COMMENT $0257 Get next character
COMMENT $0259 Go back if not terminator
COMMENT_LINE $025B A=$81
COMMENT $025B disable RAMP, disable mux
FORCE_SYMBOL $025B VIA_port_b
FORCE_SYMBOL $025D Char_Tablef4
COMMENT $0260 Get text height
FORCE_SYMBOL $0260 Vec_Text_Height
COMMENT_LINE $0263 now move down
COMMENT $0263 store 'height' to dac (y)
FORCE_SYMBOL $0263 VIA_port_a
COMMENT $0265 disable RAMP, enable mux
FORCE_SYMBOL $0265 VIA_port_b
COMMENT $0267 disable RAMP, disable mux
FORCE_SYMBOL $0267 VIA_port_b
COMMENT $0269 zero dac
FORCE_SYMBOL $0269 VIA_port_a
COMMENT_LINE $026B now only y set, x to zero
FORCE_NO_SYMBOL $026B
COMMENT $026D enable RAMP, disable mux
FORCE_SYMBOL $026D VIA_port_b
COMMENT_LINE $026F here we move down
COMMENT $0273 enable RAMP, enable mux
FORCE_SYMBOL $0273 VIA_port_b
COMMENT_LINE $0275 tricky, cutting y off while
COMMENT_LINE $0275 integrating, saves one switch of mux
COMMENT_LINE $0275 still b=$81
COMMENT $0275 disable RAMP, disable mux
FORCE_SYMBOL $0275 VIA_port_b
FORCE_SYMBOL $0277 Vec_Text_Width
COMMENT_LINE $027A now finnished moving down
COMMENT $027A Send it to the D/A
FORCE_SYMBOL $027A VIA_port_a
FORCE_NO_SYMBOL $027C
COMMENT $027E enable RAMP, disable mux
FORCE_SYMBOL $027E VIA_port_b
COMMENT $0280 delay needed for drawing
COMMENT $0285 Get bitmap from chargen table
COMMENT $0287 Save in shift register
FORCE_SYMBOL $0287 VIA_shift_reg
COMMENT $0289 Get next character
COMMENT $028B Go back if not terminator
COMMENT_LINE $028D A=$81
COMMENT $028D disable RAMP, disable mux
FORCE_SYMBOL $028D VIA_port_b
FORCE_NO_SYMBOL $028F
COMMENT $0291 T1->PB7 enabled
FORCE_SYMBOL $0291 VIA_aux_cntl
FORCE_SYMBOL $0293 VIA_shift_reg
FORCE_NO_SYMBOL $0295
COMMENT $0297 /BLANK low and /ZERO low
FORCE_SYMBOL $0297 VIA_cntl
COMMENT_LINE $029A ***************************************************************************
COMMENT_LINE $029A my_print_str_d
COMMENT_LINE $029A PRINT_STR_D
COMMENT_LINE $029A RTS
COMMENT_LINE $029A ***************************************************************************
COMMENT_LINE $029A U=String pointer to first $81
FORCE_NO_SYMBOL $029A
COMMENT $029C Clear D/A output
FORCE_SYMBOL $029C VIA_port_a
COMMENT $029E Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $029E VIA_aux_cntl
FORCE_SYMBOL $02A0 Char_Tablef1
FORCE_NO_SYMBOL $02A3
COMMENT $02A5 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $02A5 VIA_port_b
COMMENT $02A7 disable RAMP, disable mux
FORCE_SYMBOL $02A7 VIA_port_b
COMMENT $02AB Get text width
FORCE_SYMBOL $02AB Vec_Text_Width
FORCE_SYMBOL $02AF Vec_Text_Width_neg
COMMENT $02B5 Send it to the D/A
FORCE_SYMBOL $02B5 VIA_port_a
FORCE_NO_SYMBOL $02B7
COMMENT $02B9 enable RAMP, disable mux
FORCE_SYMBOL $02B9 VIA_port_b
COMMENT $02BB delay needed for drawing
COMMENT $02C0 Get bitmap from chargen table
COMMENT $02C2 Save in shift register
FORCE_SYMBOL $02C2 VIA_shift_reg
COMMENT $02C4 Get next character
COMMENT $02C6 Go back if not terminator
COMMENT_LINE $02C8 A=$81
COMMENT $02C8 disable RAMP, disable mux
FORCE_SYMBOL $02C8 VIA_port_b
FORCE_SYMBOL $02CA Char_Tableb1
COMMENT $02CD Get text height
FORCE_SYMBOL $02CD Vec_Text_Height
COMMENT_LINE $02D0 now move down
COMMENT $02D0 store 'height' to dac (y)
FORCE_SYMBOL $02D0 VIA_port_a
COMMENT $02D2 disable RAMP, enable mux
FORCE_SYMBOL $02D2 VIA_port_b
COMMENT $02D4 disable RAMP, disable mux
FORCE_SYMBOL $02D4 VIA_port_b
COMMENT $02D6 zero dac
FORCE_SYMBOL $02D6 VIA_port_a
COMMENT_LINE $02D8 now only y set, x to zero
FORCE_NO_SYMBOL $02D8
COMMENT $02DA enable RAMP, disable mux
FORCE_SYMBOL $02DA VIA_port_b
COMMENT $02DE Get first character
COMMENT $02E0 enable RAMP, enable mux
FORCE_SYMBOL $02E0 VIA_port_b
COMMENT_LINE $02E2 tricky, cutting y off while
COMMENT_LINE $02E2 integrating, saves one switch of mux
COMMENT_LINE $02E2 still B=$81
COMMENT $02E2 disable RAMP, disable mux
FORCE_SYMBOL $02E2 VIA_port_b
FORCE_SYMBOL $02E4 Vec_Text_Width_neg
COMMENT_LINE $02E7 now finnished moving down
COMMENT $02E7 negative x speed
FORCE_SYMBOL $02E7 VIA_port_a
FORCE_NO_SYMBOL $02E9
COMMENT $02EB enable RAMP, disable mux
FORCE_SYMBOL $02EB VIA_port_b
COMMENT $02ED delay needed for drawing
COMMENT $02F2 Get bitmap from chargen table
COMMENT $02F4 Save in shift register
FORCE_SYMBOL $02F4 VIA_shift_reg
COMMENT $02F6 Get next character
COMMENT $02F8 Go back if not terminator
COMMENT_LINE $02FA A=$81
COMMENT $02FA disable RAMP, disable mux
FORCE_SYMBOL $02FA VIA_port_b
FORCE_SYMBOL $02FC Char_Tablef2
COMMENT $02FF Get text height
FORCE_SYMBOL $02FF Vec_Text_Height
COMMENT_LINE $0302 now move down
COMMENT $0302 store 'height' to dac (y)
FORCE_SYMBOL $0302 VIA_port_a
COMMENT $0304 disable RAMP, enable mux
FORCE_SYMBOL $0304 VIA_port_b
COMMENT $0306 disable RAMP, disable mux
FORCE_SYMBOL $0306 VIA_port_b
COMMENT $0308 zero dac
FORCE_SYMBOL $0308 VIA_port_a
COMMENT_LINE $030A now only y set, x to zero
FORCE_NO_SYMBOL $030A
COMMENT $030C enable RAMP, disable mux
FORCE_SYMBOL $030C VIA_port_b
COMMENT_LINE $030E here we move down
COMMENT $0312 enable RAMP, enable mux
FORCE_SYMBOL $0312 VIA_port_b
COMMENT_LINE $0314 tricky, cutting y off while
COMMENT_LINE $0314 integrating, saves one switch of mux
COMMENT_LINE $0314 still b=$81
COMMENT $0314 disable RAMP, disable mux
FORCE_SYMBOL $0314 VIA_port_b
FORCE_SYMBOL $0316 Vec_Text_Width
COMMENT_LINE $0319 now finnished moving down
COMMENT $0319 Send it to the D/A
FORCE_SYMBOL $0319 VIA_port_a
FORCE_NO_SYMBOL $031B
COMMENT $031D enable RAMP, disable mux
FORCE_SYMBOL $031D VIA_port_b
COMMENT $031F delay needed for drawing
COMMENT $0324 Get bitmap from chargen table
COMMENT $0326 Save in shift register
FORCE_SYMBOL $0326 VIA_shift_reg
COMMENT $0328 Get next character
COMMENT $032A Go back if not terminator
COMMENT_LINE $032C A=$81
COMMENT $032C disable RAMP, disable mux
FORCE_SYMBOL $032C VIA_port_b
FORCE_SYMBOL $032E Char_Tableb2
COMMENT $0331 Get text height
FORCE_SYMBOL $0331 Vec_Text_Height
COMMENT_LINE $0334 now move down
COMMENT $0334 store 'height' to dac (y)
FORCE_SYMBOL $0334 VIA_port_a
COMMENT $0336 disable RAMP, enable mux
FORCE_SYMBOL $0336 VIA_port_b
COMMENT $0338 disable RAMP, disable mux
FORCE_SYMBOL $0338 VIA_port_b
COMMENT $033A zero dac
FORCE_SYMBOL $033A VIA_port_a
COMMENT_LINE $033C now only y set, x to zero
FORCE_NO_SYMBOL $033C
COMMENT $033E enable RAMP, disable mux
FORCE_SYMBOL $033E VIA_port_b
COMMENT $0342 Get first character
COMMENT $0344 enable RAMP, enable mux
FORCE_SYMBOL $0344 VIA_port_b
COMMENT_LINE $0346 tricky, cutting y off while
COMMENT_LINE $0346 integrating, saves one switch of mux
COMMENT_LINE $0346 still B=$81
COMMENT $0346 disable RAMP, disable mux
FORCE_SYMBOL $0346 VIA_port_b
FORCE_SYMBOL $0348 Vec_Text_Width_neg
COMMENT_LINE $034B now finnished moving down
COMMENT $034B negative x speed
FORCE_SYMBOL $034B VIA_port_a
FORCE_NO_SYMBOL $034D
COMMENT $034F enable RAMP, disable mux
FORCE_SYMBOL $034F VIA_port_b
COMMENT $0351 delay needed for drawing
COMMENT $0356 Get bitmap from chargen table
COMMENT $0358 Save in shift register
FORCE_SYMBOL $0358 VIA_shift_reg
COMMENT $035A Get next character
COMMENT $035C Go back if not terminator
COMMENT_LINE $035E A=$81
COMMENT $035E disable RAMP, disable mux
FORCE_SYMBOL $035E VIA_port_b
FORCE_SYMBOL $0360 Char_Tablef3
COMMENT $0363 Get text height
FORCE_SYMBOL $0363 Vec_Text_Height
COMMENT_LINE $0366 now move down
COMMENT $0366 store 'height' to dac (y)
FORCE_SYMBOL $0366 VIA_port_a
COMMENT $0368 disable RAMP, enable mux
FORCE_SYMBOL $0368 VIA_port_b
COMMENT $036A disable RAMP, disable mux
FORCE_SYMBOL $036A VIA_port_b
COMMENT $036C zero dac
FORCE_SYMBOL $036C VIA_port_a
COMMENT_LINE $036E now only y set, x to zero
FORCE_NO_SYMBOL $036E
COMMENT $0370 enable RAMP, disable mux
FORCE_SYMBOL $0370 VIA_port_b
COMMENT_LINE $0372 here we move down
COMMENT $0376 enable RAMP, enable mux
FORCE_SYMBOL $0376 VIA_port_b
COMMENT_LINE $0378 tricky, cutting y off while
COMMENT_LINE $0378 integrating, saves one switch of mux
COMMENT_LINE $0378 still b=$81
COMMENT $0378 disable RAMP, disable mux
FORCE_SYMBOL $0378 VIA_port_b
FORCE_SYMBOL $037A Vec_Text_Width
COMMENT_LINE $037D now finnished moving down
COMMENT $037D Send it to the D/A
FORCE_SYMBOL $037D VIA_port_a
FORCE_NO_SYMBOL $037F
COMMENT $0381 enable RAMP, disable mux
FORCE_SYMBOL $0381 VIA_port_b
COMMENT $0383 delay needed for drawing
COMMENT $0388 Get bitmap from chargen table
COMMENT $038A Save in shift register
FORCE_SYMBOL $038A VIA_shift_reg
COMMENT $038C Get next character
COMMENT $038E Go back if not terminator
COMMENT_LINE $0390 A=$81
COMMENT $0390 disable RAMP, disable mux
FORCE_SYMBOL $0390 VIA_port_b
FORCE_SYMBOL $0392 Char_Tableb3
COMMENT $0395 Get text height
FORCE_SYMBOL $0395 Vec_Text_Height
COMMENT_LINE $0398 now move down
COMMENT $0398 store 'height' to dac (y)
FORCE_SYMBOL $0398 VIA_port_a
COMMENT $039A disable RAMP, enable mux
FORCE_SYMBOL $039A VIA_port_b
COMMENT $039C disable RAMP, disable mux
FORCE_SYMBOL $039C VIA_port_b
COMMENT $039E zero dac
FORCE_SYMBOL $039E VIA_port_a
COMMENT_LINE $03A0 now only y set, x to zero
FORCE_NO_SYMBOL $03A0
COMMENT $03A2 enable RAMP, disable mux
FORCE_SYMBOL $03A2 VIA_port_b
COMMENT $03A6 Get first character
COMMENT $03A8 enable RAMP, enable mux
FORCE_SYMBOL $03A8 VIA_port_b
COMMENT_LINE $03AA tricky, cutting y off while
COMMENT_LINE $03AA integrating, saves one switch of mux
COMMENT_LINE $03AA still B=$81
COMMENT $03AA disable RAMP, disable mux
FORCE_SYMBOL $03AA VIA_port_b
FORCE_SYMBOL $03AC Vec_Text_Width_neg
COMMENT_LINE $03AF now finnished moving down
COMMENT $03AF negative x speed
FORCE_SYMBOL $03AF VIA_port_a
FORCE_NO_SYMBOL $03B1
COMMENT $03B3 enable RAMP, disable mux
FORCE_SYMBOL $03B3 VIA_port_b
COMMENT $03B5 delay needed for drawing
COMMENT $03BA Get bitmap from chargen table
COMMENT $03BC Save in shift register
FORCE_SYMBOL $03BC VIA_shift_reg
COMMENT $03BE Get next character
COMMENT $03C0 Go back if not terminator
COMMENT_LINE $03C2 A=$81
COMMENT $03C2 disable RAMP, disable mux
FORCE_SYMBOL $03C2 VIA_port_b
FORCE_SYMBOL $03C4 Char_Tablef4
COMMENT $03C7 Get text height
FORCE_SYMBOL $03C7 Vec_Text_Height
COMMENT_LINE $03CA now move down
COMMENT $03CA store 'height' to dac (y)
FORCE_SYMBOL $03CA VIA_port_a
COMMENT $03CC disable RAMP, enable mux
FORCE_SYMBOL $03CC VIA_port_b
COMMENT $03CE disable RAMP, disable mux
FORCE_SYMBOL $03CE VIA_port_b
COMMENT $03D0 zero dac
FORCE_SYMBOL $03D0 VIA_port_a
COMMENT_LINE $03D2 now only y set, x to zero
FORCE_NO_SYMBOL $03D2
COMMENT $03D4 enable RAMP, disable mux
FORCE_SYMBOL $03D4 VIA_port_b
COMMENT_LINE $03D6 here we move down
COMMENT $03DA enable RAMP, enable mux
FORCE_SYMBOL $03DA VIA_port_b
COMMENT_LINE $03DC tricky, cutting y off while
COMMENT_LINE $03DC integrating, saves one switch of mux
COMMENT_LINE $03DC still b=$81
COMMENT $03DC disable RAMP, disable mux
FORCE_SYMBOL $03DC VIA_port_b
FORCE_SYMBOL $03DE Vec_Text_Width
COMMENT_LINE $03E1 now finnished moving down
COMMENT $03E1 Send it to the D/A
FORCE_SYMBOL $03E1 VIA_port_a
FORCE_NO_SYMBOL $03E3
COMMENT $03E5 enable RAMP, disable mux
FORCE_SYMBOL $03E5 VIA_port_b
COMMENT $03E7 delay needed for drawing
COMMENT $03EC Get bitmap from chargen table
COMMENT $03EE Save in shift register
FORCE_SYMBOL $03EE VIA_shift_reg
COMMENT $03F0 Get next character
COMMENT $03F2 Go back if not terminator
COMMENT_LINE $03F4 A=$81
COMMENT $03F4 disable RAMP, disable mux
FORCE_SYMBOL $03F4 VIA_port_b
FORCE_NO_SYMBOL $03F6
COMMENT $03F8 T1->PB7 enabled
FORCE_SYMBOL $03F8 VIA_aux_cntl
FORCE_SYMBOL $03FA VIA_shift_reg
FORCE_NO_SYMBOL $03FC
COMMENT $03FE /BLANK low and /ZERO low
FORCE_SYMBOL $03FE VIA_cntl
COMMENT_LINE $0401 ***************************************************************************
COMMENT_LINE $0403 Moveto_d_7F start
FORCE_SYMBOL $0403 VIA_port_a
FORCE_NO_SYMBOL $0405
FORCE_SYMBOL $0407 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0409
FORCE_SYMBOL $040B VIA_cntl
FORCE_SYMBOL $040E VIA_port_b
FORCE_SYMBOL $0410 VIA_shift_reg
FORCE_SYMBOL $0412 VIA_port_b
FORCE_SYMBOL $0414 VIA_port_a
FORCE_SYMBOL $0416 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0418
FORCE_SYMBOL $041B VIA_int_flags
FORCE_SYMBOL $041F VIA_port_a
COMMENT_LINE $0421 U=String pointer to first $81
FORCE_NO_SYMBOL $0421
COMMENT $0423 Clear D/A output
FORCE_SYMBOL $0423 VIA_port_a
COMMENT $0425 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0425 VIA_aux_cntl
FORCE_SYMBOL $0427 Char_Tablef1
FORCE_NO_SYMBOL $042A
COMMENT $042C enable mux, set y to 0 disable ramp
FORCE_SYMBOL $042C VIA_port_b
COMMENT $042E disable RAMP, disable mux
FORCE_SYMBOL $042E VIA_port_b
COMMENT $0432 Get text width
FORCE_SYMBOL $0432 Vec_Text_Width
FORCE_SYMBOL $0436 Vec_Text_Width_neg
COMMENT $043C Send it to the D/A
FORCE_SYMBOL $043C VIA_port_a
FORCE_NO_SYMBOL $043E
COMMENT $0440 enable RAMP, disable mux
FORCE_SYMBOL $0440 VIA_port_b
COMMENT $0442 delay needed for drawing
COMMENT $0447 Get bitmap from chargen table
COMMENT $0449 Save in shift register
FORCE_SYMBOL $0449 VIA_shift_reg
COMMENT $044B Get next character
COMMENT $044D Go back if not terminator
COMMENT_LINE $044F A=$81
COMMENT $044F disable RAMP, disable mux
FORCE_SYMBOL $044F VIA_port_b
FORCE_SYMBOL $0451 Char_Tableb1
COMMENT $0454 Get text height
FORCE_SYMBOL $0454 Vec_Text_Height
COMMENT_LINE $0457 now move down
COMMENT $0457 store 'height' to dac (y)
FORCE_SYMBOL $0457 VIA_port_a
COMMENT $0459 disable RAMP, enable mux
FORCE_SYMBOL $0459 VIA_port_b
COMMENT $045B disable RAMP, disable mux
FORCE_SYMBOL $045B VIA_port_b
COMMENT $045D zero dac
FORCE_SYMBOL $045D VIA_port_a
COMMENT_LINE $045F now only y set, x to zero
FORCE_NO_SYMBOL $045F
COMMENT $0461 enable RAMP, disable mux
FORCE_SYMBOL $0461 VIA_port_b
COMMENT $0465 Get first character
COMMENT $0467 enable RAMP, enable mux
FORCE_SYMBOL $0467 VIA_port_b
COMMENT_LINE $0469 tricky, cutting y off while
COMMENT_LINE $0469 integrating, saves one switch of mux
COMMENT_LINE $0469 still B=$81
COMMENT $0469 disable RAMP, disable mux
FORCE_SYMBOL $0469 VIA_port_b
FORCE_SYMBOL $046B Vec_Text_Width_neg
COMMENT_LINE $046E now finnished moving down
COMMENT $046E negative x speed
FORCE_SYMBOL $046E VIA_port_a
FORCE_NO_SYMBOL $0470
COMMENT $0472 enable RAMP, disable mux
FORCE_SYMBOL $0472 VIA_port_b
COMMENT $0474 delay needed for drawing
COMMENT $0479 Get bitmap from chargen table
COMMENT $047B Save in shift register
FORCE_SYMBOL $047B VIA_shift_reg
COMMENT $047D Get next character
COMMENT $047F Go back if not terminator
COMMENT_LINE $0481 A=$81
COMMENT $0481 disable RAMP, disable mux
FORCE_SYMBOL $0481 VIA_port_b
FORCE_SYMBOL $0483 Char_Tablef2
COMMENT $0486 Get text height
FORCE_SYMBOL $0486 Vec_Text_Height
COMMENT_LINE $0489 now move down
COMMENT $0489 store 'height' to dac (y)
FORCE_SYMBOL $0489 VIA_port_a
COMMENT $048B disable RAMP, enable mux
FORCE_SYMBOL $048B VIA_port_b
COMMENT $048D disable RAMP, disable mux
FORCE_SYMBOL $048D VIA_port_b
COMMENT $048F zero dac
FORCE_SYMBOL $048F VIA_port_a
COMMENT_LINE $0491 now only y set, x to zero
FORCE_NO_SYMBOL $0491
COMMENT $0493 enable RAMP, disable mux
FORCE_SYMBOL $0493 VIA_port_b
COMMENT_LINE $0495 here we move down
COMMENT $0499 enable RAMP, enable mux
FORCE_SYMBOL $0499 VIA_port_b
COMMENT_LINE $049B tricky, cutting y off while
COMMENT_LINE $049B integrating, saves one switch of mux
COMMENT_LINE $049B still b=$81
COMMENT $049B disable RAMP, disable mux
FORCE_SYMBOL $049B VIA_port_b
FORCE_SYMBOL $049D Vec_Text_Width
COMMENT_LINE $04A0 now finnished moving down
COMMENT $04A0 Send it to the D/A
FORCE_SYMBOL $04A0 VIA_port_a
FORCE_NO_SYMBOL $04A2
COMMENT $04A4 enable RAMP, disable mux
FORCE_SYMBOL $04A4 VIA_port_b
COMMENT $04A6 delay needed for drawing
COMMENT $04AB Get bitmap from chargen table
COMMENT $04AD Save in shift register
FORCE_SYMBOL $04AD VIA_shift_reg
COMMENT $04AF Get next character
COMMENT $04B1 Go back if not terminator
COMMENT_LINE $04B3 A=$81
COMMENT $04B3 disable RAMP, disable mux
FORCE_SYMBOL $04B3 VIA_port_b
FORCE_SYMBOL $04B5 Char_Tableb2
COMMENT $04B8 Get text height
FORCE_SYMBOL $04B8 Vec_Text_Height
COMMENT_LINE $04BB now move down
COMMENT $04BB store 'height' to dac (y)
FORCE_SYMBOL $04BB VIA_port_a
COMMENT $04BD disable RAMP, enable mux
FORCE_SYMBOL $04BD VIA_port_b
COMMENT $04BF disable RAMP, disable mux
FORCE_SYMBOL $04BF VIA_port_b
COMMENT $04C1 zero dac
FORCE_SYMBOL $04C1 VIA_port_a
COMMENT_LINE $04C3 now only y set, x to zero
FORCE_NO_SYMBOL $04C3
COMMENT $04C5 enable RAMP, disable mux
FORCE_SYMBOL $04C5 VIA_port_b
COMMENT $04C9 Get first character
COMMENT $04CB enable RAMP, enable mux
FORCE_SYMBOL $04CB VIA_port_b
COMMENT_LINE $04CD tricky, cutting y off while
COMMENT_LINE $04CD integrating, saves one switch of mux
COMMENT_LINE $04CD still B=$81
COMMENT $04CD disable RAMP, disable mux
FORCE_SYMBOL $04CD VIA_port_b
FORCE_SYMBOL $04CF Vec_Text_Width_neg
COMMENT_LINE $04D2 now finnished moving down
COMMENT $04D2 negative x speed
FORCE_SYMBOL $04D2 VIA_port_a
FORCE_NO_SYMBOL $04D4
COMMENT $04D6 enable RAMP, disable mux
FORCE_SYMBOL $04D6 VIA_port_b
COMMENT $04D8 delay needed for drawing
COMMENT $04DD Get bitmap from chargen table
COMMENT $04DF Save in shift register
FORCE_SYMBOL $04DF VIA_shift_reg
COMMENT $04E1 Get next character
COMMENT $04E3 Go back if not terminator
COMMENT_LINE $04E5 A=$81
COMMENT $04E5 disable RAMP, disable mux
FORCE_SYMBOL $04E5 VIA_port_b
FORCE_SYMBOL $04E7 Char_Tablef3
COMMENT $04EA Get text height
FORCE_SYMBOL $04EA Vec_Text_Height
COMMENT_LINE $04ED now move down
COMMENT $04ED store 'height' to dac (y)
FORCE_SYMBOL $04ED VIA_port_a
COMMENT $04EF disable RAMP, enable mux
FORCE_SYMBOL $04EF VIA_port_b
COMMENT $04F1 disable RAMP, disable mux
FORCE_SYMBOL $04F1 VIA_port_b
COMMENT $04F3 zero dac
FORCE_SYMBOL $04F3 VIA_port_a
COMMENT_LINE $04F5 now only y set, x to zero
FORCE_NO_SYMBOL $04F5
COMMENT $04F7 enable RAMP, disable mux
FORCE_SYMBOL $04F7 VIA_port_b
COMMENT_LINE $04F9 here we move down
COMMENT $04FD enable RAMP, enable mux
FORCE_SYMBOL $04FD VIA_port_b
COMMENT_LINE $04FF tricky, cutting y off while
COMMENT_LINE $04FF integrating, saves one switch of mux
COMMENT_LINE $04FF still b=$81
COMMENT $04FF disable RAMP, disable mux
FORCE_SYMBOL $04FF VIA_port_b
FORCE_SYMBOL $0501 Vec_Text_Width
COMMENT_LINE $0504 now finnished moving down
COMMENT $0504 Send it to the D/A
FORCE_SYMBOL $0504 VIA_port_a
FORCE_NO_SYMBOL $0506
COMMENT $0508 enable RAMP, disable mux
FORCE_SYMBOL $0508 VIA_port_b
COMMENT $050A delay needed for drawing
COMMENT $050F Get bitmap from chargen table
COMMENT $0511 Save in shift register
FORCE_SYMBOL $0511 VIA_shift_reg
COMMENT $0513 Get next character
COMMENT $0515 Go back if not terminator
COMMENT_LINE $0517 A=$81
COMMENT $0517 disable RAMP, disable mux
FORCE_SYMBOL $0517 VIA_port_b
FORCE_SYMBOL $0519 Char_Tableb3
COMMENT $051C Get text height
FORCE_SYMBOL $051C Vec_Text_Height
COMMENT_LINE $051F now move down
COMMENT $051F store 'height' to dac (y)
FORCE_SYMBOL $051F VIA_port_a
COMMENT $0521 disable RAMP, enable mux
FORCE_SYMBOL $0521 VIA_port_b
COMMENT $0523 disable RAMP, disable mux
FORCE_SYMBOL $0523 VIA_port_b
COMMENT $0525 zero dac
FORCE_SYMBOL $0525 VIA_port_a
COMMENT_LINE $0527 now only y set, x to zero
FORCE_NO_SYMBOL $0527
COMMENT $0529 enable RAMP, disable mux
FORCE_SYMBOL $0529 VIA_port_b
COMMENT $052D Get first character
COMMENT $052F enable RAMP, enable mux
FORCE_SYMBOL $052F VIA_port_b
COMMENT_LINE $0531 tricky, cutting y off while
COMMENT_LINE $0531 integrating, saves one switch of mux
COMMENT_LINE $0531 still B=$81
COMMENT $0531 disable RAMP, disable mux
FORCE_SYMBOL $0531 VIA_port_b
FORCE_SYMBOL $0533 Vec_Text_Width_neg
COMMENT_LINE $0536 now finnished moving down
COMMENT $0536 negative x speed
FORCE_SYMBOL $0536 VIA_port_a
FORCE_NO_SYMBOL $0538
COMMENT $053A enable RAMP, disable mux
FORCE_SYMBOL $053A VIA_port_b
COMMENT $053C delay needed for drawing
COMMENT $0541 Get bitmap from chargen table
COMMENT $0543 Save in shift register
FORCE_SYMBOL $0543 VIA_shift_reg
COMMENT $0545 Get next character
COMMENT $0547 Go back if not terminator
COMMENT_LINE $0549 A=$81
COMMENT $0549 disable RAMP, disable mux
FORCE_SYMBOL $0549 VIA_port_b
FORCE_SYMBOL $054B Char_Tablef4
COMMENT $054E Get text height
FORCE_SYMBOL $054E Vec_Text_Height
COMMENT_LINE $0551 now move down
COMMENT $0551 store 'height' to dac (y)
FORCE_SYMBOL $0551 VIA_port_a
COMMENT $0553 disable RAMP, enable mux
FORCE_SYMBOL $0553 VIA_port_b
COMMENT $0555 disable RAMP, disable mux
FORCE_SYMBOL $0555 VIA_port_b
COMMENT $0557 zero dac
FORCE_SYMBOL $0557 VIA_port_a
COMMENT_LINE $0559 now only y set, x to zero
FORCE_NO_SYMBOL $0559
COMMENT $055B enable RAMP, disable mux
FORCE_SYMBOL $055B VIA_port_b
COMMENT_LINE $055D here we move down
COMMENT $0561 enable RAMP, enable mux
FORCE_SYMBOL $0561 VIA_port_b
COMMENT_LINE $0563 tricky, cutting y off while
COMMENT_LINE $0563 integrating, saves one switch of mux
COMMENT_LINE $0563 still b=$81
COMMENT $0563 disable RAMP, disable mux
FORCE_SYMBOL $0563 VIA_port_b
FORCE_SYMBOL $0565 Vec_Text_Width
COMMENT_LINE $0568 now finnished moving down
COMMENT $0568 Send it to the D/A
FORCE_SYMBOL $0568 VIA_port_a
FORCE_NO_SYMBOL $056A
COMMENT $056C enable RAMP, disable mux
FORCE_SYMBOL $056C VIA_port_b
COMMENT $056E delay needed for drawing
COMMENT $0573 Get bitmap from chargen table
COMMENT $0575 Save in shift register
FORCE_SYMBOL $0575 VIA_shift_reg
COMMENT $0577 Get next character
COMMENT $0579 Go back if not terminator
COMMENT_LINE $057B A=$81
COMMENT $057B disable RAMP, disable mux
FORCE_SYMBOL $057B VIA_port_b
FORCE_NO_SYMBOL $057D
COMMENT $057F T1->PB7 enabled
FORCE_SYMBOL $057F VIA_aux_cntl
FORCE_SYMBOL $0581 VIA_shift_reg
FORCE_NO_SYMBOL $0583
COMMENT $0585 /BLANK low and /ZERO low
FORCE_SYMBOL $0585 VIA_cntl
FORCE_NO_SYMBOL $0587
COMMENT_LINE $058F ***************************************************************************
COMMENT $058F Save B-reg
COMMENT $0591 build print struct... with $81 header ... on the stack
FORCE_NO_SYMBOL $0591
COMMENT $0593 Point U into the stack
COMMENT $0595 push $81
COMMENT $0597 load  space
FORCE_NO_SYMBOL $0597
COMMENT $0599 push space
COMMENT $059B Save A-reg = ship symbol
COMMENT $059D Get back B-reg (no of ships)
COMMENT $059F If B-reg >9 then
FORCE_NO_SYMBOL $059F
COMMENT $05A3 load $6C = infinty symbol
COMMENT $05A5 otherwise make an ascii number
FORCE_NO_SYMBOL $05A5
COMMENT $05A7 load minus
COMMENT $05A9 Push digit and minus sign
COMMENT $05AB end of string...
FORCE_NO_SYMBOL $05AB
COMMENT $05AD push end of string
COMMENT $05AF Push (y,x) coordinates
COMMENT $05B1 move to position
COMMENT $05B3 and print it (u points to constructed string structure)
FORCE_SYMBOL $05B3 Moveto_d_7F
COMMENT $05B6 print it
FORCE_SYMBOL $05B6 my_Print_Str
COMMENT_LINE $05B9 ***************************************************************************
COMMENT $05B9 replecement for bios print func
COMMENT_LINE $05B9 make sure there is enough time from calling this
COMMENT_LINE $05B9 to do the next move/draw
COMMENT $0000 Replacing Reset0Ref subroutine
COMMENT_LINE $0000 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $0000 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $0000 LDD   #0x0302;
COMMENT_LINE $0000 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $0000 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 LDB   #0x01;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 LDB    #0x00CC;
COMMENT $0000 0x0C;
COMMENT $0000 end of macro
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $0000 STA     <VIA_port_b
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 3
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT_LINE $0000 one more round
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 Replacing Draw_VLc subrutine
COMMENT $0000 0x01
COMMENT $0000 0x00
COMMENT $0000 0x00
COMMENT $0000 0x01
COMMENT $0000 0x0a
COMMENT $0000 0x05
COMMENT $0000 0x0D
COMMENT $0000 0x0a
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $05B9 general initialization
FORCE_SYMBOL $05B9 s_RndInit
COMMENT $05BC Opening music and graphics
FORCE_SYMBOL $05BC s_RndOpening
FORCE_SYMBOL $05BF s_RndSetJoystick
COMMENT_LINE $05C2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $05C2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $05C2 Wait_recal etc.
FORCE_SYMBOL $05C2 s_RndRefreshScreen
COMMENT $05C5 Refresh background
FORCE_SYMBOL $05C5 s_RndDrawBackground
COMMENT $05C8 Check controller movement
FORCE_SYMBOL $05C8 s_RndCheckJoystick
COMMENT $05CB Draw Player1's paddle
FORCE_SYMBOL $05CB s_RndDrawPlyr1
COMMENT $05CE Draw Player1's ball
FORCE_SYMBOL $05CE s_RndDrawPlyr1Ball
COMMENT $05D1 Play sounds when needed
FORCE_SYMBOL $05D1 s_RndCheckSound
COMMENT $05D4 Print the score
FORCE_SYMBOL $05D4 s_RndPrintInfo
COMMENT $05D7 Check next level/game over
FORCE_SYMBOL $05D7 s_RndCheckGameStatus
COMMENT $05DA Return to main loop
COMMENT_LINE $05DC >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $05DC opeining - This procedure call the YM music routines, displays the opening
COMMENT_LINE $05DC letters and, waits for a button to be pressed to start the game.
COMMENT_LINE $05DC This is a program by itself...
COMMENT_LINE $05DC <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $05DC Get Buttons status
FORCE_SYMBOL $05DC Read_Btns
COMMENT_LINE $05DF Set/Clear required variables
FORCE_SYMBOL $05DF Vec_Text_Width_neg
FORCE_NO_SYMBOL $05E2
COMMENT $05E4 PointsNr updates every ~1 sec
FORCE_SYMBOL $05E4 PointsNr
FORCE_SYMBOL $05E7 RealTimeCounter
COMMENT_LINE $05EA Copy opening string from ROM to RAM
FORCE_SYMBOL $05EA l_RoundersString
FORCE_SYMBOL $05ED OpeningString
FORCE_NO_SYMBOL $05F1
FORCE_SYMBOL $05F3 s_CopyMem
COMMENT $05F6 reset the crt
FORCE_SYMBOL $05F6 Wait_Recal
FORCE_NO_SYMBOL $05F9
FORCE_SYMBOL $05FB PointsNr
COMMENT $05FE Check if 1 sec passed and update points Nr
FORCE_SYMBOL $05FE s_RealTimeClock
FORCE_SYMBOL $0601 PointsNr
COMMENT $0604 Set the intensity to $7F
FORCE_SYMBOL $0604 Intensity_7F
FORCE_NO_SYMBOL $0607
COMMENT $0609 Set scaling factor to be 7f
FORCE_SYMBOL $0609 VIA_t1_cnt_lo
COMMENT_LINE $060B Rotate box...
FORCE_SYMBOL $060B OpeningString
COMMENT $060E A<- Ypos of ROUNDERS text
FORCE_NO_SYMBOL $060E
COMMENT $0610 Divide by 2
COMMENT $0611 Divide by 2 once more,
COMMENT $0612 Length of vector list of the Paddle -1
FORCE_SYMBOL $0612 PADDLE_VL
COMMENT $0614 X<- Address of paddle vector list
FORCE_SYMBOL $0614 paddle1
COMMENT_LINE $0617 LDX   #l_Box                    ;X<- Address of paddle vector list
COMMENT_LINE $0617 LEAX  1,X
COMMENT_LINE $0617 needed to be drawn.
COMMENT $0617 U points to the rotated vector list result
FORCE_SYMBOL $0617 Plyr1PaddleMem
COMMENT $061A Execute rotation based on previous information.
FORCE_SYMBOL $061A Rot_VL_ab
FORCE_SYMBOL $061D Reset0Ref
FORCE_NO_SYMBOL $0620
FORCE_SYMBOL $0623 Moveto_d
COMMENT_LINE $0626 Draw the rotated paddle
COMMENT $0626 X<- Address of paddle vector list
FORCE_SYMBOL $0626 Plyr1PaddleMem
COMMENT $0629 Number of vectors -1 to draw
FORCE_SYMBOL $0629 PADDLE_VL
COMMENT $062B Store for Draw_VL bios subroutine
FORCE_NO_SYMBOL $062B
COMMENT $062E Draw Player 1's paddle
FORCE_SYMBOL $062E Draw_VL
COMMENT_LINE $0631 Update ROUNDERS text location
FORCE_SYMBOL $0631 OpeningString
COMMENT $0634 A<- Ypos of ROUNDERS text
FORCE_NO_SYMBOL $0634
COMMENT_LINE $0636 ;;;CMPA  #-40
COMMENT_LINE $0636 ;;;BEQ   l_PrintRounders
COMMENT $0636 A<-A+1
COMMENT $0637 Store A back to the memory
FORCE_NO_SYMBOL $0637
COMMENT $0639 Set the Text size to LARGE
FORCE_NO_SYMBOL $0639
FORCE_SYMBOL $063C Vec_Text_HW
FORCE_SYMBOL $063F Reset0Ref
COMMENT_LINE $0642 LDU   #OpeningString
FORCE_SYMBOL $0642 l_RoundersString
COMMENT $0645 Call enhenced print routine
COMMENT_LINE $0647 Moveto_d_7F start
FORCE_SYMBOL $0647 VIA_port_a
FORCE_NO_SYMBOL $0649
FORCE_SYMBOL $064B VIA_t1_cnt_lo
FORCE_NO_SYMBOL $064D
FORCE_SYMBOL $064F VIA_cntl
FORCE_SYMBOL $0652 VIA_port_b
FORCE_SYMBOL $0654 VIA_shift_reg
FORCE_SYMBOL $0656 VIA_port_b
FORCE_SYMBOL $0658 VIA_port_a
FORCE_SYMBOL $065A VIA_t1_cnt_hi
FORCE_NO_SYMBOL $065C
FORCE_SYMBOL $065F VIA_int_flags
FORCE_SYMBOL $0663 VIA_port_a
COMMENT_LINE $0665 U=String pointer to first $81
FORCE_NO_SYMBOL $0665
COMMENT $0667 Clear D/A output
FORCE_SYMBOL $0667 VIA_port_a
COMMENT $0669 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0669 VIA_aux_cntl
FORCE_SYMBOL $066B Char_Tablef1
FORCE_NO_SYMBOL $066E
COMMENT $0670 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0670 VIA_port_b
COMMENT $0672 disable RAMP, disable mux
FORCE_SYMBOL $0672 VIA_port_b
COMMENT $0676 Get text width
FORCE_SYMBOL $0676 Vec_Text_Width
FORCE_SYMBOL $067A Vec_Text_Width_neg
COMMENT $0680 Send it to the D/A
FORCE_SYMBOL $0680 VIA_port_a
FORCE_NO_SYMBOL $0682
COMMENT $0684 enable RAMP, disable mux
FORCE_SYMBOL $0684 VIA_port_b
COMMENT $0686 delay needed for drawing
COMMENT $068B Get bitmap from chargen table
COMMENT $068D Save in shift register
FORCE_SYMBOL $068D VIA_shift_reg
COMMENT $068F Get next character
COMMENT $0691 Go back if not terminator
COMMENT_LINE $0693 A=$81
COMMENT $0693 disable RAMP, disable mux
FORCE_SYMBOL $0693 VIA_port_b
FORCE_SYMBOL $0695 Char_Tableb1
COMMENT $0698 Get text height
FORCE_SYMBOL $0698 Vec_Text_Height
COMMENT_LINE $069B now move down
COMMENT $069B store 'height' to dac (y)
FORCE_SYMBOL $069B VIA_port_a
COMMENT $069D disable RAMP, enable mux
FORCE_SYMBOL $069D VIA_port_b
COMMENT $069F disable RAMP, disable mux
FORCE_SYMBOL $069F VIA_port_b
COMMENT $06A1 zero dac
FORCE_SYMBOL $06A1 VIA_port_a
COMMENT_LINE $06A3 now only y set, x to zero
FORCE_NO_SYMBOL $06A3
COMMENT $06A5 enable RAMP, disable mux
FORCE_SYMBOL $06A5 VIA_port_b
COMMENT $06A9 Get first character
COMMENT $06AB enable RAMP, enable mux
FORCE_SYMBOL $06AB VIA_port_b
COMMENT_LINE $06AD tricky, cutting y off while
COMMENT_LINE $06AD integrating, saves one switch of mux
COMMENT_LINE $06AD still B=$81
COMMENT $06AD disable RAMP, disable mux
FORCE_SYMBOL $06AD VIA_port_b
FORCE_SYMBOL $06AF Vec_Text_Width_neg
COMMENT_LINE $06B2 now finnished moving down
COMMENT $06B2 negative x speed
FORCE_SYMBOL $06B2 VIA_port_a
FORCE_NO_SYMBOL $06B4
COMMENT $06B6 enable RAMP, disable mux
FORCE_SYMBOL $06B6 VIA_port_b
COMMENT $06B8 delay needed for drawing
COMMENT $06BD Get bitmap from chargen table
COMMENT $06BF Save in shift register
FORCE_SYMBOL $06BF VIA_shift_reg
COMMENT $06C1 Get next character
COMMENT $06C3 Go back if not terminator
COMMENT_LINE $06C5 A=$81
COMMENT $06C5 disable RAMP, disable mux
FORCE_SYMBOL $06C5 VIA_port_b
FORCE_SYMBOL $06C7 Char_Tablef2
COMMENT $06CA Get text height
FORCE_SYMBOL $06CA Vec_Text_Height
COMMENT_LINE $06CD now move down
COMMENT $06CD store 'height' to dac (y)
FORCE_SYMBOL $06CD VIA_port_a
COMMENT $06CF disable RAMP, enable mux
FORCE_SYMBOL $06CF VIA_port_b
COMMENT $06D1 disable RAMP, disable mux
FORCE_SYMBOL $06D1 VIA_port_b
COMMENT $06D3 zero dac
FORCE_SYMBOL $06D3 VIA_port_a
COMMENT_LINE $06D5 now only y set, x to zero
FORCE_NO_SYMBOL $06D5
COMMENT $06D7 enable RAMP, disable mux
FORCE_SYMBOL $06D7 VIA_port_b
COMMENT_LINE $06D9 here we move down
COMMENT $06DD enable RAMP, enable mux
FORCE_SYMBOL $06DD VIA_port_b
COMMENT_LINE $06DF tricky, cutting y off while
COMMENT_LINE $06DF integrating, saves one switch of mux
COMMENT_LINE $06DF still b=$81
COMMENT $06DF disable RAMP, disable mux
FORCE_SYMBOL $06DF VIA_port_b
FORCE_SYMBOL $06E1 Vec_Text_Width
COMMENT_LINE $06E4 now finnished moving down
COMMENT $06E4 Send it to the D/A
FORCE_SYMBOL $06E4 VIA_port_a
FORCE_NO_SYMBOL $06E6
COMMENT $06E8 enable RAMP, disable mux
FORCE_SYMBOL $06E8 VIA_port_b
COMMENT $06EA delay needed for drawing
COMMENT $06EF Get bitmap from chargen table
COMMENT $06F1 Save in shift register
FORCE_SYMBOL $06F1 VIA_shift_reg
COMMENT $06F3 Get next character
COMMENT $06F5 Go back if not terminator
COMMENT_LINE $06F7 A=$81
COMMENT $06F7 disable RAMP, disable mux
FORCE_SYMBOL $06F7 VIA_port_b
FORCE_SYMBOL $06F9 Char_Tableb2
COMMENT $06FC Get text height
FORCE_SYMBOL $06FC Vec_Text_Height
COMMENT_LINE $06FF now move down
COMMENT $06FF store 'height' to dac (y)
FORCE_SYMBOL $06FF VIA_port_a
COMMENT $0701 disable RAMP, enable mux
FORCE_SYMBOL $0701 VIA_port_b
COMMENT $0703 disable RAMP, disable mux
FORCE_SYMBOL $0703 VIA_port_b
COMMENT $0705 zero dac
FORCE_SYMBOL $0705 VIA_port_a
COMMENT_LINE $0707 now only y set, x to zero
FORCE_NO_SYMBOL $0707
COMMENT $0709 enable RAMP, disable mux
FORCE_SYMBOL $0709 VIA_port_b
COMMENT $070D Get first character
COMMENT $070F enable RAMP, enable mux
FORCE_SYMBOL $070F VIA_port_b
COMMENT_LINE $0711 tricky, cutting y off while
COMMENT_LINE $0711 integrating, saves one switch of mux
COMMENT_LINE $0711 still B=$81
COMMENT $0711 disable RAMP, disable mux
FORCE_SYMBOL $0711 VIA_port_b
FORCE_SYMBOL $0713 Vec_Text_Width_neg
COMMENT_LINE $0716 now finnished moving down
COMMENT $0716 negative x speed
FORCE_SYMBOL $0716 VIA_port_a
FORCE_NO_SYMBOL $0718
COMMENT $071A enable RAMP, disable mux
FORCE_SYMBOL $071A VIA_port_b
COMMENT $071C delay needed for drawing
COMMENT $0721 Get bitmap from chargen table
COMMENT $0723 Save in shift register
FORCE_SYMBOL $0723 VIA_shift_reg
COMMENT $0725 Get next character
COMMENT $0727 Go back if not terminator
COMMENT_LINE $0729 A=$81
COMMENT $0729 disable RAMP, disable mux
FORCE_SYMBOL $0729 VIA_port_b
FORCE_SYMBOL $072B Char_Tablef3
COMMENT $072E Get text height
FORCE_SYMBOL $072E Vec_Text_Height
COMMENT_LINE $0731 now move down
COMMENT $0731 store 'height' to dac (y)
FORCE_SYMBOL $0731 VIA_port_a
COMMENT $0733 disable RAMP, enable mux
FORCE_SYMBOL $0733 VIA_port_b
COMMENT $0735 disable RAMP, disable mux
FORCE_SYMBOL $0735 VIA_port_b
COMMENT $0737 zero dac
FORCE_SYMBOL $0737 VIA_port_a
COMMENT_LINE $0739 now only y set, x to zero
FORCE_NO_SYMBOL $0739
COMMENT $073B enable RAMP, disable mux
FORCE_SYMBOL $073B VIA_port_b
COMMENT_LINE $073D here we move down
COMMENT $0741 enable RAMP, enable mux
FORCE_SYMBOL $0741 VIA_port_b
COMMENT_LINE $0743 tricky, cutting y off while
COMMENT_LINE $0743 integrating, saves one switch of mux
COMMENT_LINE $0743 still b=$81
COMMENT $0743 disable RAMP, disable mux
FORCE_SYMBOL $0743 VIA_port_b
FORCE_SYMBOL $0745 Vec_Text_Width
COMMENT_LINE $0748 now finnished moving down
COMMENT $0748 Send it to the D/A
FORCE_SYMBOL $0748 VIA_port_a
FORCE_NO_SYMBOL $074A
COMMENT $074C enable RAMP, disable mux
FORCE_SYMBOL $074C VIA_port_b
COMMENT $074E delay needed for drawing
COMMENT $0753 Get bitmap from chargen table
COMMENT $0755 Save in shift register
FORCE_SYMBOL $0755 VIA_shift_reg
COMMENT $0757 Get next character
COMMENT $0759 Go back if not terminator
COMMENT_LINE $075B A=$81
COMMENT $075B disable RAMP, disable mux
FORCE_SYMBOL $075B VIA_port_b
FORCE_SYMBOL $075D Char_Tableb3
COMMENT $0760 Get text height
FORCE_SYMBOL $0760 Vec_Text_Height
COMMENT_LINE $0763 now move down
COMMENT $0763 store 'height' to dac (y)
FORCE_SYMBOL $0763 VIA_port_a
COMMENT $0765 disable RAMP, enable mux
FORCE_SYMBOL $0765 VIA_port_b
COMMENT $0767 disable RAMP, disable mux
FORCE_SYMBOL $0767 VIA_port_b
COMMENT $0769 zero dac
FORCE_SYMBOL $0769 VIA_port_a
COMMENT_LINE $076B now only y set, x to zero
FORCE_NO_SYMBOL $076B
COMMENT $076D enable RAMP, disable mux
FORCE_SYMBOL $076D VIA_port_b
COMMENT $0771 Get first character
COMMENT $0773 enable RAMP, enable mux
FORCE_SYMBOL $0773 VIA_port_b
COMMENT_LINE $0775 tricky, cutting y off while
COMMENT_LINE $0775 integrating, saves one switch of mux
COMMENT_LINE $0775 still B=$81
COMMENT $0775 disable RAMP, disable mux
FORCE_SYMBOL $0775 VIA_port_b
FORCE_SYMBOL $0777 Vec_Text_Width_neg
COMMENT_LINE $077A now finnished moving down
COMMENT $077A negative x speed
FORCE_SYMBOL $077A VIA_port_a
FORCE_NO_SYMBOL $077C
COMMENT $077E enable RAMP, disable mux
FORCE_SYMBOL $077E VIA_port_b
COMMENT $0780 delay needed for drawing
COMMENT $0785 Get bitmap from chargen table
COMMENT $0787 Save in shift register
FORCE_SYMBOL $0787 VIA_shift_reg
COMMENT $0789 Get next character
COMMENT $078B Go back if not terminator
COMMENT_LINE $078D A=$81
COMMENT $078D disable RAMP, disable mux
FORCE_SYMBOL $078D VIA_port_b
FORCE_SYMBOL $078F Char_Tablef4
COMMENT $0792 Get text height
FORCE_SYMBOL $0792 Vec_Text_Height
COMMENT_LINE $0795 now move down
COMMENT $0795 store 'height' to dac (y)
FORCE_SYMBOL $0795 VIA_port_a
COMMENT $0797 disable RAMP, enable mux
FORCE_SYMBOL $0797 VIA_port_b
COMMENT $0799 disable RAMP, disable mux
FORCE_SYMBOL $0799 VIA_port_b
COMMENT $079B zero dac
FORCE_SYMBOL $079B VIA_port_a
COMMENT_LINE $079D now only y set, x to zero
FORCE_NO_SYMBOL $079D
COMMENT $079F enable RAMP, disable mux
FORCE_SYMBOL $079F VIA_port_b
COMMENT_LINE $07A1 here we move down
COMMENT $07A5 enable RAMP, enable mux
FORCE_SYMBOL $07A5 VIA_port_b
COMMENT_LINE $07A7 tricky, cutting y off while
COMMENT_LINE $07A7 integrating, saves one switch of mux
COMMENT_LINE $07A7 still b=$81
COMMENT $07A7 disable RAMP, disable mux
FORCE_SYMBOL $07A7 VIA_port_b
FORCE_SYMBOL $07A9 Vec_Text_Width
COMMENT_LINE $07AC now finnished moving down
COMMENT $07AC Send it to the D/A
FORCE_SYMBOL $07AC VIA_port_a
FORCE_NO_SYMBOL $07AE
COMMENT $07B0 enable RAMP, disable mux
FORCE_SYMBOL $07B0 VIA_port_b
COMMENT $07B2 delay needed for drawing
COMMENT $07B7 Get bitmap from chargen table
COMMENT $07B9 Save in shift register
FORCE_SYMBOL $07B9 VIA_shift_reg
COMMENT $07BB Get next character
COMMENT $07BD Go back if not terminator
COMMENT_LINE $07BF A=$81
COMMENT $07BF disable RAMP, disable mux
FORCE_SYMBOL $07BF VIA_port_b
FORCE_NO_SYMBOL $07C1
COMMENT $07C3 T1->PB7 enabled
FORCE_SYMBOL $07C3 VIA_aux_cntl
FORCE_SYMBOL $07C5 VIA_shift_reg
FORCE_NO_SYMBOL $07C7
COMMENT $07C9 /BLANK low and /ZERO low
FORCE_SYMBOL $07C9 VIA_cntl
COMMENT $07CB Set the Text size
FORCE_NO_SYMBOL $07CB
FORCE_SYMBOL $07CE Vec_Text_HW
COMMENT $07D1 Print (c) Ronen Habot message
FORCE_SYMBOL $07D1 l_RndOpenString1
COMMENT $07D4 Call enhenced print routine
COMMENT_LINE $07D6 Moveto_d_7F start
FORCE_SYMBOL $07D6 VIA_port_a
FORCE_NO_SYMBOL $07D8
FORCE_SYMBOL $07DA VIA_t1_cnt_lo
FORCE_NO_SYMBOL $07DC
FORCE_SYMBOL $07DE VIA_cntl
FORCE_SYMBOL $07E1 VIA_port_b
FORCE_SYMBOL $07E3 VIA_shift_reg
FORCE_SYMBOL $07E5 VIA_port_b
FORCE_SYMBOL $07E7 VIA_port_a
FORCE_SYMBOL $07E9 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $07EB
FORCE_SYMBOL $07EE VIA_int_flags
FORCE_SYMBOL $07F2 VIA_port_a
COMMENT_LINE $07F4 U=String pointer to first $81
FORCE_NO_SYMBOL $07F4
COMMENT $07F6 Clear D/A output
FORCE_SYMBOL $07F6 VIA_port_a
COMMENT $07F8 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $07F8 VIA_aux_cntl
FORCE_SYMBOL $07FA Char_Tablef1
FORCE_NO_SYMBOL $07FD
COMMENT $07FF enable mux, set y to 0 disable ramp
FORCE_SYMBOL $07FF VIA_port_b
COMMENT $0801 disable RAMP, disable mux
FORCE_SYMBOL $0801 VIA_port_b
COMMENT $0805 Get text width
FORCE_SYMBOL $0805 Vec_Text_Width
FORCE_SYMBOL $0809 Vec_Text_Width_neg
COMMENT $080F Send it to the D/A
FORCE_SYMBOL $080F VIA_port_a
FORCE_NO_SYMBOL $0811
COMMENT $0813 enable RAMP, disable mux
FORCE_SYMBOL $0813 VIA_port_b
COMMENT $0815 delay needed for drawing
COMMENT $081A Get bitmap from chargen table
COMMENT $081C Save in shift register
FORCE_SYMBOL $081C VIA_shift_reg
COMMENT $081E Get next character
COMMENT $0820 Go back if not terminator
COMMENT_LINE $0822 A=$81
COMMENT $0822 disable RAMP, disable mux
FORCE_SYMBOL $0822 VIA_port_b
FORCE_SYMBOL $0824 Char_Tableb1
COMMENT $0827 Get text height
FORCE_SYMBOL $0827 Vec_Text_Height
COMMENT_LINE $082A now move down
COMMENT $082A store 'height' to dac (y)
FORCE_SYMBOL $082A VIA_port_a
COMMENT $082C disable RAMP, enable mux
FORCE_SYMBOL $082C VIA_port_b
COMMENT $082E disable RAMP, disable mux
FORCE_SYMBOL $082E VIA_port_b
COMMENT $0830 zero dac
FORCE_SYMBOL $0830 VIA_port_a
COMMENT_LINE $0832 now only y set, x to zero
FORCE_NO_SYMBOL $0832
COMMENT $0834 enable RAMP, disable mux
FORCE_SYMBOL $0834 VIA_port_b
COMMENT $0838 Get first character
COMMENT $083A enable RAMP, enable mux
FORCE_SYMBOL $083A VIA_port_b
COMMENT_LINE $083C tricky, cutting y off while
COMMENT_LINE $083C integrating, saves one switch of mux
COMMENT_LINE $083C still B=$81
COMMENT $083C disable RAMP, disable mux
FORCE_SYMBOL $083C VIA_port_b
FORCE_SYMBOL $083E Vec_Text_Width_neg
COMMENT_LINE $0841 now finnished moving down
COMMENT $0841 negative x speed
FORCE_SYMBOL $0841 VIA_port_a
FORCE_NO_SYMBOL $0843
COMMENT $0845 enable RAMP, disable mux
FORCE_SYMBOL $0845 VIA_port_b
COMMENT $0847 delay needed for drawing
COMMENT $084C Get bitmap from chargen table
COMMENT $084E Save in shift register
FORCE_SYMBOL $084E VIA_shift_reg
COMMENT $0850 Get next character
COMMENT $0852 Go back if not terminator
COMMENT_LINE $0854 A=$81
COMMENT $0854 disable RAMP, disable mux
FORCE_SYMBOL $0854 VIA_port_b
FORCE_SYMBOL $0856 Char_Tablef2
COMMENT $0859 Get text height
FORCE_SYMBOL $0859 Vec_Text_Height
COMMENT_LINE $085C now move down
COMMENT $085C store 'height' to dac (y)
FORCE_SYMBOL $085C VIA_port_a
COMMENT $085E disable RAMP, enable mux
FORCE_SYMBOL $085E VIA_port_b
COMMENT $0860 disable RAMP, disable mux
FORCE_SYMBOL $0860 VIA_port_b
COMMENT $0862 zero dac
FORCE_SYMBOL $0862 VIA_port_a
COMMENT_LINE $0864 now only y set, x to zero
FORCE_NO_SYMBOL $0864
COMMENT $0866 enable RAMP, disable mux
FORCE_SYMBOL $0866 VIA_port_b
COMMENT_LINE $0868 here we move down
COMMENT $086C enable RAMP, enable mux
FORCE_SYMBOL $086C VIA_port_b
COMMENT_LINE $086E tricky, cutting y off while
COMMENT_LINE $086E integrating, saves one switch of mux
COMMENT_LINE $086E still b=$81
COMMENT $086E disable RAMP, disable mux
FORCE_SYMBOL $086E VIA_port_b
FORCE_SYMBOL $0870 Vec_Text_Width
COMMENT_LINE $0873 now finnished moving down
COMMENT $0873 Send it to the D/A
FORCE_SYMBOL $0873 VIA_port_a
FORCE_NO_SYMBOL $0875
COMMENT $0877 enable RAMP, disable mux
FORCE_SYMBOL $0877 VIA_port_b
COMMENT $0879 delay needed for drawing
COMMENT $087E Get bitmap from chargen table
COMMENT $0880 Save in shift register
FORCE_SYMBOL $0880 VIA_shift_reg
COMMENT $0882 Get next character
COMMENT $0884 Go back if not terminator
COMMENT_LINE $0886 A=$81
COMMENT $0886 disable RAMP, disable mux
FORCE_SYMBOL $0886 VIA_port_b
FORCE_SYMBOL $0888 Char_Tableb2
COMMENT $088B Get text height
FORCE_SYMBOL $088B Vec_Text_Height
COMMENT_LINE $088E now move down
COMMENT $088E store 'height' to dac (y)
FORCE_SYMBOL $088E VIA_port_a
COMMENT $0890 disable RAMP, enable mux
FORCE_SYMBOL $0890 VIA_port_b
COMMENT $0892 disable RAMP, disable mux
FORCE_SYMBOL $0892 VIA_port_b
COMMENT $0894 zero dac
FORCE_SYMBOL $0894 VIA_port_a
COMMENT_LINE $0896 now only y set, x to zero
FORCE_NO_SYMBOL $0896
COMMENT $0898 enable RAMP, disable mux
FORCE_SYMBOL $0898 VIA_port_b
COMMENT $089C Get first character
COMMENT $089E enable RAMP, enable mux
FORCE_SYMBOL $089E VIA_port_b
COMMENT_LINE $08A0 tricky, cutting y off while
COMMENT_LINE $08A0 integrating, saves one switch of mux
COMMENT_LINE $08A0 still B=$81
COMMENT $08A0 disable RAMP, disable mux
FORCE_SYMBOL $08A0 VIA_port_b
FORCE_SYMBOL $08A2 Vec_Text_Width_neg
COMMENT_LINE $08A5 now finnished moving down
COMMENT $08A5 negative x speed
FORCE_SYMBOL $08A5 VIA_port_a
FORCE_NO_SYMBOL $08A7
COMMENT $08A9 enable RAMP, disable mux
FORCE_SYMBOL $08A9 VIA_port_b
COMMENT $08AB delay needed for drawing
COMMENT $08B0 Get bitmap from chargen table
COMMENT $08B2 Save in shift register
FORCE_SYMBOL $08B2 VIA_shift_reg
COMMENT $08B4 Get next character
COMMENT $08B6 Go back if not terminator
COMMENT_LINE $08B8 A=$81
COMMENT $08B8 disable RAMP, disable mux
FORCE_SYMBOL $08B8 VIA_port_b
FORCE_SYMBOL $08BA Char_Tablef3
COMMENT $08BD Get text height
FORCE_SYMBOL $08BD Vec_Text_Height
COMMENT_LINE $08C0 now move down
COMMENT $08C0 store 'height' to dac (y)
FORCE_SYMBOL $08C0 VIA_port_a
COMMENT $08C2 disable RAMP, enable mux
FORCE_SYMBOL $08C2 VIA_port_b
COMMENT $08C4 disable RAMP, disable mux
FORCE_SYMBOL $08C4 VIA_port_b
COMMENT $08C6 zero dac
FORCE_SYMBOL $08C6 VIA_port_a
COMMENT_LINE $08C8 now only y set, x to zero
FORCE_NO_SYMBOL $08C8
COMMENT $08CA enable RAMP, disable mux
FORCE_SYMBOL $08CA VIA_port_b
COMMENT_LINE $08CC here we move down
COMMENT $08D0 enable RAMP, enable mux
FORCE_SYMBOL $08D0 VIA_port_b
COMMENT_LINE $08D2 tricky, cutting y off while
COMMENT_LINE $08D2 integrating, saves one switch of mux
COMMENT_LINE $08D2 still b=$81
COMMENT $08D2 disable RAMP, disable mux
FORCE_SYMBOL $08D2 VIA_port_b
FORCE_SYMBOL $08D4 Vec_Text_Width
COMMENT_LINE $08D7 now finnished moving down
COMMENT $08D7 Send it to the D/A
FORCE_SYMBOL $08D7 VIA_port_a
FORCE_NO_SYMBOL $08D9
COMMENT $08DB enable RAMP, disable mux
FORCE_SYMBOL $08DB VIA_port_b
COMMENT $08DD delay needed for drawing
COMMENT $08E2 Get bitmap from chargen table
COMMENT $08E4 Save in shift register
FORCE_SYMBOL $08E4 VIA_shift_reg
COMMENT $08E6 Get next character
COMMENT $08E8 Go back if not terminator
COMMENT_LINE $08EA A=$81
COMMENT $08EA disable RAMP, disable mux
FORCE_SYMBOL $08EA VIA_port_b
FORCE_SYMBOL $08EC Char_Tableb3
COMMENT $08EF Get text height
FORCE_SYMBOL $08EF Vec_Text_Height
COMMENT_LINE $08F2 now move down
COMMENT $08F2 store 'height' to dac (y)
FORCE_SYMBOL $08F2 VIA_port_a
COMMENT $08F4 disable RAMP, enable mux
FORCE_SYMBOL $08F4 VIA_port_b
COMMENT $08F6 disable RAMP, disable mux
FORCE_SYMBOL $08F6 VIA_port_b
COMMENT $08F8 zero dac
FORCE_SYMBOL $08F8 VIA_port_a
COMMENT_LINE $08FA now only y set, x to zero
FORCE_NO_SYMBOL $08FA
COMMENT $08FC enable RAMP, disable mux
FORCE_SYMBOL $08FC VIA_port_b
COMMENT $0900 Get first character
COMMENT $0902 enable RAMP, enable mux
FORCE_SYMBOL $0902 VIA_port_b
COMMENT_LINE $0904 tricky, cutting y off while
COMMENT_LINE $0904 integrating, saves one switch of mux
COMMENT_LINE $0904 still B=$81
COMMENT $0904 disable RAMP, disable mux
FORCE_SYMBOL $0904 VIA_port_b
FORCE_SYMBOL $0906 Vec_Text_Width_neg
COMMENT_LINE $0909 now finnished moving down
COMMENT $0909 negative x speed
FORCE_SYMBOL $0909 VIA_port_a
FORCE_NO_SYMBOL $090B
COMMENT $090D enable RAMP, disable mux
FORCE_SYMBOL $090D VIA_port_b
COMMENT $090F delay needed for drawing
COMMENT $0914 Get bitmap from chargen table
COMMENT $0916 Save in shift register
FORCE_SYMBOL $0916 VIA_shift_reg
COMMENT $0918 Get next character
COMMENT $091A Go back if not terminator
COMMENT_LINE $091C A=$81
COMMENT $091C disable RAMP, disable mux
FORCE_SYMBOL $091C VIA_port_b
FORCE_SYMBOL $091E Char_Tablef4
COMMENT $0921 Get text height
FORCE_SYMBOL $0921 Vec_Text_Height
COMMENT_LINE $0924 now move down
COMMENT $0924 store 'height' to dac (y)
FORCE_SYMBOL $0924 VIA_port_a
COMMENT $0926 disable RAMP, enable mux
FORCE_SYMBOL $0926 VIA_port_b
COMMENT $0928 disable RAMP, disable mux
FORCE_SYMBOL $0928 VIA_port_b
COMMENT $092A zero dac
FORCE_SYMBOL $092A VIA_port_a
COMMENT_LINE $092C now only y set, x to zero
FORCE_NO_SYMBOL $092C
COMMENT $092E enable RAMP, disable mux
FORCE_SYMBOL $092E VIA_port_b
COMMENT_LINE $0930 here we move down
COMMENT $0934 enable RAMP, enable mux
FORCE_SYMBOL $0934 VIA_port_b
COMMENT_LINE $0936 tricky, cutting y off while
COMMENT_LINE $0936 integrating, saves one switch of mux
COMMENT_LINE $0936 still b=$81
COMMENT $0936 disable RAMP, disable mux
FORCE_SYMBOL $0936 VIA_port_b
FORCE_SYMBOL $0938 Vec_Text_Width
COMMENT_LINE $093B now finnished moving down
COMMENT $093B Send it to the D/A
FORCE_SYMBOL $093B VIA_port_a
FORCE_NO_SYMBOL $093D
COMMENT $093F enable RAMP, disable mux
FORCE_SYMBOL $093F VIA_port_b
COMMENT $0941 delay needed for drawing
COMMENT $0946 Get bitmap from chargen table
COMMENT $0948 Save in shift register
FORCE_SYMBOL $0948 VIA_shift_reg
COMMENT $094A Get next character
COMMENT $094C Go back if not terminator
COMMENT_LINE $094E A=$81
COMMENT $094E disable RAMP, disable mux
FORCE_SYMBOL $094E VIA_port_b
FORCE_NO_SYMBOL $0950
COMMENT $0952 T1->PB7 enabled
FORCE_SYMBOL $0952 VIA_aux_cntl
FORCE_SYMBOL $0954 VIA_shift_reg
FORCE_NO_SYMBOL $0956
COMMENT $0958 /BLANK low and /ZERO low
FORCE_SYMBOL $0958 VIA_cntl
COMMENT_LINE $095A LDU   #l_RndOpenString2		;Print 1 - Vectrex controller, or,
COMMENT_LINE $095A PRINT_STR_YX                    ;Call enhenced print routine
COMMENT_LINE $095A LDU   #l_RndOpenString3		;Print 4 - Modified 2600 Paddle
COMMENT_LINE $095A PRINT_STR_YX                    ;Call enhenced print routine
COMMENT_LINE $095A Start plotting the dots for the circle
COMMENT $095A Must be here since it changes A
FORCE_NO_SYMBOL $095A
COMMENT_LINE $095D STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $095D STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $095D LDD   #0x0302;
COMMENT_LINE $095D CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $095D STA   <VIA_port_b       ;0x00;
COMMENT_LINE $095D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $095D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $095D LDB   #0x01;
COMMENT_LINE $095D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $095D LDB    #0x00CC;
COMMENT $095D 0x0C;
FORCE_SYMBOL $095D VIA_cntl
COMMENT $095F Initialize index for next plot
FORCE_NO_SYMBOL $095F
COMMENT $0961 Initialize the X dimention pointer
FORCE_SYMBOL $0961 sin_entry_0
COMMENT $0964 Initialize the Y dimention pointer
FORCE_SYMBOL $0964 cos_entry_0
COMMENT $0968 Store A in the stack
COMMENT $096A B <- Ypos of current dot
COMMENT $096C A <- Xpos of current dot
COMMENT $096E Move screen ptr according to the circle
FORCE_SYMBOL $096E Moveto_d
FORCE_SYMBOL $0971 Dot_here
COMMENT $0974 Must be here since it changes A
FORCE_NO_SYMBOL $0974
COMMENT_LINE $0977 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $0977 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $0977 LDD   #0x0302;
COMMENT_LINE $0977 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $0977 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $0977 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0977 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0977 LDB   #0x01;
COMMENT_LINE $0977 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0977 LDB    #0x00CC;
COMMENT $0977 0x0C;
FORCE_SYMBOL $0977 VIA_cntl
COMMENT $0979 Restore A from stack
COMMENT $097B Change A to point to next point on circle
FORCE_SYMBOL $097B OPENING_CIR_DISTANCE
COMMENT $097D PointsNr updates every ~1 sec
FORCE_SYMBOL $097D PointsNr
COMMENT $0982 Get Buttons status
FORCE_SYMBOL $0982 Read_Btns
COMMENT $0985 If no button pressed,
FORCE_NO_SYMBOL $0985
COMMENT $0987 goto opening_loop...
COMMENT_LINE $098B l_CheckIfNormalPlay:
COMMENT_LINE $098B BITA  #$01
COMMENT_LINE $098B BEQ   l_CheckCntrl1Btn4                ;
COMMENT_LINE $098B CLR   RndJoyType                   ;ORIGINAL CONTROLLER selected...
COMMENT_LINE $098B JMP   l_RndSelectPlyrNum
COMMENT_LINE $098B l_CheckCntrl1Btn4:
COMMENT_LINE $098B BITA  #$08
COMMENT_LINE $098B BEQ   l_RndOpening_loop              ;
COMMENT_LINE $098B ;JSR   Joy_Analog                ;ATARI 2600 PADDLE selected...
COMMENT_LINE $098B ;LDA   Vec_Joy_1_X               ;A <- Xpos of joystick 1
COMMENT_LINE $098B ;;STA   rnd_LastAnalogVal
COMMENT_LINE $098B ;LDA   #$04
COMMENT_LINE $098B ;STA   RndJoyType
COMMENT_LINE $098B ;ADDA  #$30                      ;prepare the digit 4 for the menu
COMMENT_LINE $098B ;LDU   #menu_ram_str
COMMENT_LINE $098B ;STA   27,u                      ;store the digit 4 in the menu line
COMMENT_LINE $098B ;;;;;; TEMPORARY CODE ;;;;;
COMMENT_LINE $098B CLR   RndJoyType                ;ORIGINAL CONTROLLER selected...
COMMENT_LINE $098B ;;;;;; END OF TEMPORARY CODE;;;;;
COMMENT_LINE $098B l_RndSelectPlyrNum:
COMMENT_LINE $098B ;JSR   s_RndStopMusic            ;Turn intro music off...
FORCE_SYMBOL $098B s_RndSelectGameType
COMMENT_LINE $098E LDA   Plyr1LevelDelay
COMMENT $098E Return to main program
COMMENT_LINE $098F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $098F refresh_scrn - Responsible for the reset of the crt, settings of the scale
COMMENT_LINE $098F factor and the real-time clock.
COMMENT_LINE $098F <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $098F Refresh the CRT
FORCE_SYMBOL $098F Wait_Recal
COMMENT $0992 Delay 30 cycles...
FORCE_SYMBOL $0992 Delay_3
FORCE_NO_SYMBOL $0995
COMMENT $0997 Set scaling factor to 7f
FORCE_SYMBOL $0997 VIA_t1_cnt_lo
COMMENT $0999 Return to the caller
COMMENT_LINE $099A >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $099A INIT - Initialize all variables and data structures.
COMMENT_LINE $099A <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $099A VEC_CTRL
COMMENT $099C Vectrex controller on Port#1 default
FORCE_SYMBOL $099C CtrlType
COMMENT $099F Clear real-clock counter
FORCE_SYMBOL $099F RealTimeCounter
COMMENT $09A2 Clear sound flag
FORCE_SYMBOL $09A2 MissedSoundFlag
COMMENT $09A5 Clear sound flag
FORCE_SYMBOL $09A5 HitSoundFlag
COMMENT $09A8 Clear Level sound flag
FORCE_SYMBOL $09A8 LevelSoundFlag
COMMENT $09AB Clear Level
FORCE_SYMBOL $09AB Plyr1Level
COMMENT $09AE Update level - NOVICE
FORCE_SYMBOL $09AE Plyr1Level
FORCE_NO_SYMBOL $09B1
COMMENT $09B3 Make sure Plyr1 is displayed...
FORCE_SYMBOL $09B3 DrawPlyr1Flag
COMMENT $09B6 Center position of Plyr1's paddle
FORCE_NO_SYMBOL $09B6
FORCE_SYMBOL $09B8 Plyr1LocationIndex
FORCE_SYMBOL $09BB Plyr1LocationIndex
COMMENT $09BE No Ball to display for plyr1
FORCE_SYMBOL $09BE Plyr1BallFlag
COMMENT $09C1 Move in...
FORCE_SYMBOL $09C1 Plyr1BallDirection
FORCE_SYMBOL $09C4 Plyr1MissedFlag
FORCE_SYMBOL $09C7 Plyr1LevelFlag
FORCE_SYMBOL $09CA Plyr1CurrentScore
FORCE_SYMBOL $09CD MAX_TURNS
FORCE_SYMBOL $09CF Plyr1TurnsNr
FORCE_SYMBOL $09D2 Plyr1ScoreTable
FORCE_SYMBOL $09D5 Clear_Score
COMMENT $09D8 No Ball to display for plyr2
FORCE_SYMBOL $09D8 Plyr2BallFlag
COMMENT $09DB TEMP- move in...
FORCE_SYMBOL $09DB Plyr2BallDirection
COMMENT $09DE Set # of players to 1
FORCE_SYMBOL $09DE PlyrNum
COMMENT $09E1 Return to the caller
COMMENT_LINE $09E2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $09E2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $09E2 reset the crt
FORCE_SYMBOL $09E2 Wait_Recal
COMMENT_LINE $09E5 RESET_0_REF;                    ;Call Reset0Ref macro
FORCE_SYMBOL $09E5 l_RndGameTypeMsg1
COMMENT $09E8 Call enhenced print routine
COMMENT_LINE $09EA Moveto_d_7F start
FORCE_SYMBOL $09EA VIA_port_a
FORCE_NO_SYMBOL $09EC
FORCE_SYMBOL $09EE VIA_t1_cnt_lo
FORCE_NO_SYMBOL $09F0
FORCE_SYMBOL $09F2 VIA_cntl
FORCE_SYMBOL $09F5 VIA_port_b
FORCE_SYMBOL $09F7 VIA_shift_reg
FORCE_SYMBOL $09F9 VIA_port_b
FORCE_SYMBOL $09FB VIA_port_a
FORCE_SYMBOL $09FD VIA_t1_cnt_hi
FORCE_NO_SYMBOL $09FF
FORCE_SYMBOL $0A02 VIA_int_flags
FORCE_SYMBOL $0A06 VIA_port_a
COMMENT_LINE $0A08 U=String pointer to first $81
FORCE_NO_SYMBOL $0A08
COMMENT $0A0A Clear D/A output
FORCE_SYMBOL $0A0A VIA_port_a
COMMENT $0A0C Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0A0C VIA_aux_cntl
FORCE_SYMBOL $0A0E Char_Tablef1
FORCE_NO_SYMBOL $0A11
COMMENT $0A13 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0A13 VIA_port_b
COMMENT $0A15 disable RAMP, disable mux
FORCE_SYMBOL $0A15 VIA_port_b
COMMENT $0A19 Get text width
FORCE_SYMBOL $0A19 Vec_Text_Width
FORCE_SYMBOL $0A1D Vec_Text_Width_neg
COMMENT $0A23 Send it to the D/A
FORCE_SYMBOL $0A23 VIA_port_a
FORCE_NO_SYMBOL $0A25
COMMENT $0A27 enable RAMP, disable mux
FORCE_SYMBOL $0A27 VIA_port_b
COMMENT $0A29 delay needed for drawing
COMMENT $0A2E Get bitmap from chargen table
COMMENT $0A30 Save in shift register
FORCE_SYMBOL $0A30 VIA_shift_reg
COMMENT $0A32 Get next character
COMMENT $0A34 Go back if not terminator
COMMENT_LINE $0A36 A=$81
COMMENT $0A36 disable RAMP, disable mux
FORCE_SYMBOL $0A36 VIA_port_b
FORCE_SYMBOL $0A38 Char_Tableb1
COMMENT $0A3B Get text height
FORCE_SYMBOL $0A3B Vec_Text_Height
COMMENT_LINE $0A3E now move down
COMMENT $0A3E store 'height' to dac (y)
FORCE_SYMBOL $0A3E VIA_port_a
COMMENT $0A40 disable RAMP, enable mux
FORCE_SYMBOL $0A40 VIA_port_b
COMMENT $0A42 disable RAMP, disable mux
FORCE_SYMBOL $0A42 VIA_port_b
COMMENT $0A44 zero dac
FORCE_SYMBOL $0A44 VIA_port_a
COMMENT_LINE $0A46 now only y set, x to zero
FORCE_NO_SYMBOL $0A46
COMMENT $0A48 enable RAMP, disable mux
FORCE_SYMBOL $0A48 VIA_port_b
COMMENT $0A4C Get first character
COMMENT $0A4E enable RAMP, enable mux
FORCE_SYMBOL $0A4E VIA_port_b
COMMENT_LINE $0A50 tricky, cutting y off while
COMMENT_LINE $0A50 integrating, saves one switch of mux
COMMENT_LINE $0A50 still B=$81
COMMENT $0A50 disable RAMP, disable mux
FORCE_SYMBOL $0A50 VIA_port_b
FORCE_SYMBOL $0A52 Vec_Text_Width_neg
COMMENT_LINE $0A55 now finnished moving down
COMMENT $0A55 negative x speed
FORCE_SYMBOL $0A55 VIA_port_a
FORCE_NO_SYMBOL $0A57
COMMENT $0A59 enable RAMP, disable mux
FORCE_SYMBOL $0A59 VIA_port_b
COMMENT $0A5B delay needed for drawing
COMMENT $0A60 Get bitmap from chargen table
COMMENT $0A62 Save in shift register
FORCE_SYMBOL $0A62 VIA_shift_reg
COMMENT $0A64 Get next character
COMMENT $0A66 Go back if not terminator
COMMENT_LINE $0A68 A=$81
COMMENT $0A68 disable RAMP, disable mux
FORCE_SYMBOL $0A68 VIA_port_b
FORCE_SYMBOL $0A6A Char_Tablef2
COMMENT $0A6D Get text height
FORCE_SYMBOL $0A6D Vec_Text_Height
COMMENT_LINE $0A70 now move down
COMMENT $0A70 store 'height' to dac (y)
FORCE_SYMBOL $0A70 VIA_port_a
COMMENT $0A72 disable RAMP, enable mux
FORCE_SYMBOL $0A72 VIA_port_b
COMMENT $0A74 disable RAMP, disable mux
FORCE_SYMBOL $0A74 VIA_port_b
COMMENT $0A76 zero dac
FORCE_SYMBOL $0A76 VIA_port_a
COMMENT_LINE $0A78 now only y set, x to zero
FORCE_NO_SYMBOL $0A78
COMMENT $0A7A enable RAMP, disable mux
FORCE_SYMBOL $0A7A VIA_port_b
COMMENT_LINE $0A7C here we move down
COMMENT $0A80 enable RAMP, enable mux
FORCE_SYMBOL $0A80 VIA_port_b
COMMENT_LINE $0A82 tricky, cutting y off while
COMMENT_LINE $0A82 integrating, saves one switch of mux
COMMENT_LINE $0A82 still b=$81
COMMENT $0A82 disable RAMP, disable mux
FORCE_SYMBOL $0A82 VIA_port_b
FORCE_SYMBOL $0A84 Vec_Text_Width
COMMENT_LINE $0A87 now finnished moving down
COMMENT $0A87 Send it to the D/A
FORCE_SYMBOL $0A87 VIA_port_a
FORCE_NO_SYMBOL $0A89
COMMENT $0A8B enable RAMP, disable mux
FORCE_SYMBOL $0A8B VIA_port_b
COMMENT $0A8D delay needed for drawing
COMMENT $0A92 Get bitmap from chargen table
COMMENT $0A94 Save in shift register
FORCE_SYMBOL $0A94 VIA_shift_reg
COMMENT $0A96 Get next character
COMMENT $0A98 Go back if not terminator
COMMENT_LINE $0A9A A=$81
COMMENT $0A9A disable RAMP, disable mux
FORCE_SYMBOL $0A9A VIA_port_b
FORCE_SYMBOL $0A9C Char_Tableb2
COMMENT $0A9F Get text height
FORCE_SYMBOL $0A9F Vec_Text_Height
COMMENT_LINE $0AA2 now move down
COMMENT $0AA2 store 'height' to dac (y)
FORCE_SYMBOL $0AA2 VIA_port_a
COMMENT $0AA4 disable RAMP, enable mux
FORCE_SYMBOL $0AA4 VIA_port_b
COMMENT $0AA6 disable RAMP, disable mux
FORCE_SYMBOL $0AA6 VIA_port_b
COMMENT $0AA8 zero dac
FORCE_SYMBOL $0AA8 VIA_port_a
COMMENT_LINE $0AAA now only y set, x to zero
FORCE_NO_SYMBOL $0AAA
COMMENT $0AAC enable RAMP, disable mux
FORCE_SYMBOL $0AAC VIA_port_b
COMMENT $0AB0 Get first character
COMMENT $0AB2 enable RAMP, enable mux
FORCE_SYMBOL $0AB2 VIA_port_b
COMMENT_LINE $0AB4 tricky, cutting y off while
COMMENT_LINE $0AB4 integrating, saves one switch of mux
COMMENT_LINE $0AB4 still B=$81
COMMENT $0AB4 disable RAMP, disable mux
FORCE_SYMBOL $0AB4 VIA_port_b
FORCE_SYMBOL $0AB6 Vec_Text_Width_neg
COMMENT_LINE $0AB9 now finnished moving down
COMMENT $0AB9 negative x speed
FORCE_SYMBOL $0AB9 VIA_port_a
FORCE_NO_SYMBOL $0ABB
COMMENT $0ABD enable RAMP, disable mux
FORCE_SYMBOL $0ABD VIA_port_b
COMMENT $0ABF delay needed for drawing
COMMENT $0AC4 Get bitmap from chargen table
COMMENT $0AC6 Save in shift register
FORCE_SYMBOL $0AC6 VIA_shift_reg
COMMENT $0AC8 Get next character
COMMENT $0ACA Go back if not terminator
COMMENT_LINE $0ACC A=$81
COMMENT $0ACC disable RAMP, disable mux
FORCE_SYMBOL $0ACC VIA_port_b
FORCE_SYMBOL $0ACE Char_Tablef3
COMMENT $0AD1 Get text height
FORCE_SYMBOL $0AD1 Vec_Text_Height
COMMENT_LINE $0AD4 now move down
COMMENT $0AD4 store 'height' to dac (y)
FORCE_SYMBOL $0AD4 VIA_port_a
COMMENT $0AD6 disable RAMP, enable mux
FORCE_SYMBOL $0AD6 VIA_port_b
COMMENT $0AD8 disable RAMP, disable mux
FORCE_SYMBOL $0AD8 VIA_port_b
COMMENT $0ADA zero dac
FORCE_SYMBOL $0ADA VIA_port_a
COMMENT_LINE $0ADC now only y set, x to zero
FORCE_NO_SYMBOL $0ADC
COMMENT $0ADE enable RAMP, disable mux
FORCE_SYMBOL $0ADE VIA_port_b
COMMENT_LINE $0AE0 here we move down
COMMENT $0AE4 enable RAMP, enable mux
FORCE_SYMBOL $0AE4 VIA_port_b
COMMENT_LINE $0AE6 tricky, cutting y off while
COMMENT_LINE $0AE6 integrating, saves one switch of mux
COMMENT_LINE $0AE6 still b=$81
COMMENT $0AE6 disable RAMP, disable mux
FORCE_SYMBOL $0AE6 VIA_port_b
FORCE_SYMBOL $0AE8 Vec_Text_Width
COMMENT_LINE $0AEB now finnished moving down
COMMENT $0AEB Send it to the D/A
FORCE_SYMBOL $0AEB VIA_port_a
FORCE_NO_SYMBOL $0AED
COMMENT $0AEF enable RAMP, disable mux
FORCE_SYMBOL $0AEF VIA_port_b
COMMENT $0AF1 delay needed for drawing
COMMENT $0AF6 Get bitmap from chargen table
COMMENT $0AF8 Save in shift register
FORCE_SYMBOL $0AF8 VIA_shift_reg
COMMENT $0AFA Get next character
COMMENT $0AFC Go back if not terminator
COMMENT_LINE $0AFE A=$81
COMMENT $0AFE disable RAMP, disable mux
FORCE_SYMBOL $0AFE VIA_port_b
FORCE_SYMBOL $0B00 Char_Tableb3
COMMENT $0B03 Get text height
FORCE_SYMBOL $0B03 Vec_Text_Height
COMMENT_LINE $0B06 now move down
COMMENT $0B06 store 'height' to dac (y)
FORCE_SYMBOL $0B06 VIA_port_a
COMMENT $0B08 disable RAMP, enable mux
FORCE_SYMBOL $0B08 VIA_port_b
COMMENT $0B0A disable RAMP, disable mux
FORCE_SYMBOL $0B0A VIA_port_b
COMMENT $0B0C zero dac
FORCE_SYMBOL $0B0C VIA_port_a
COMMENT_LINE $0B0E now only y set, x to zero
FORCE_NO_SYMBOL $0B0E
COMMENT $0B10 enable RAMP, disable mux
FORCE_SYMBOL $0B10 VIA_port_b
COMMENT $0B14 Get first character
COMMENT $0B16 enable RAMP, enable mux
FORCE_SYMBOL $0B16 VIA_port_b
COMMENT_LINE $0B18 tricky, cutting y off while
COMMENT_LINE $0B18 integrating, saves one switch of mux
COMMENT_LINE $0B18 still B=$81
COMMENT $0B18 disable RAMP, disable mux
FORCE_SYMBOL $0B18 VIA_port_b
FORCE_SYMBOL $0B1A Vec_Text_Width_neg
COMMENT_LINE $0B1D now finnished moving down
COMMENT $0B1D negative x speed
FORCE_SYMBOL $0B1D VIA_port_a
FORCE_NO_SYMBOL $0B1F
COMMENT $0B21 enable RAMP, disable mux
FORCE_SYMBOL $0B21 VIA_port_b
COMMENT $0B23 delay needed for drawing
COMMENT $0B28 Get bitmap from chargen table
COMMENT $0B2A Save in shift register
FORCE_SYMBOL $0B2A VIA_shift_reg
COMMENT $0B2C Get next character
COMMENT $0B2E Go back if not terminator
COMMENT_LINE $0B30 A=$81
COMMENT $0B30 disable RAMP, disable mux
FORCE_SYMBOL $0B30 VIA_port_b
FORCE_SYMBOL $0B32 Char_Tablef4
COMMENT $0B35 Get text height
FORCE_SYMBOL $0B35 Vec_Text_Height
COMMENT_LINE $0B38 now move down
COMMENT $0B38 store 'height' to dac (y)
FORCE_SYMBOL $0B38 VIA_port_a
COMMENT $0B3A disable RAMP, enable mux
FORCE_SYMBOL $0B3A VIA_port_b
COMMENT $0B3C disable RAMP, disable mux
FORCE_SYMBOL $0B3C VIA_port_b
COMMENT $0B3E zero dac
FORCE_SYMBOL $0B3E VIA_port_a
COMMENT_LINE $0B40 now only y set, x to zero
FORCE_NO_SYMBOL $0B40
COMMENT $0B42 enable RAMP, disable mux
FORCE_SYMBOL $0B42 VIA_port_b
COMMENT_LINE $0B44 here we move down
COMMENT $0B48 enable RAMP, enable mux
FORCE_SYMBOL $0B48 VIA_port_b
COMMENT_LINE $0B4A tricky, cutting y off while
COMMENT_LINE $0B4A integrating, saves one switch of mux
COMMENT_LINE $0B4A still b=$81
COMMENT $0B4A disable RAMP, disable mux
FORCE_SYMBOL $0B4A VIA_port_b
FORCE_SYMBOL $0B4C Vec_Text_Width
COMMENT_LINE $0B4F now finnished moving down
COMMENT $0B4F Send it to the D/A
FORCE_SYMBOL $0B4F VIA_port_a
FORCE_NO_SYMBOL $0B51
COMMENT $0B53 enable RAMP, disable mux
FORCE_SYMBOL $0B53 VIA_port_b
COMMENT $0B55 delay needed for drawing
COMMENT $0B5A Get bitmap from chargen table
COMMENT $0B5C Save in shift register
FORCE_SYMBOL $0B5C VIA_shift_reg
COMMENT $0B5E Get next character
COMMENT $0B60 Go back if not terminator
COMMENT_LINE $0B62 A=$81
COMMENT $0B62 disable RAMP, disable mux
FORCE_SYMBOL $0B62 VIA_port_b
FORCE_NO_SYMBOL $0B64
COMMENT $0B66 T1->PB7 enabled
FORCE_SYMBOL $0B66 VIA_aux_cntl
FORCE_SYMBOL $0B68 VIA_shift_reg
FORCE_NO_SYMBOL $0B6A
COMMENT $0B6C /BLANK low and /ZERO low
FORCE_SYMBOL $0B6C VIA_cntl
COMMENT_LINE $0B6E RESET_0_REF;                    ;Call Reset0Ref macro
FORCE_SYMBOL $0B6E l_RndGameTypeMsg2
COMMENT $0B71 Call enhenced print routine
COMMENT_LINE $0B73 Moveto_d_7F start
FORCE_SYMBOL $0B73 VIA_port_a
FORCE_NO_SYMBOL $0B75
FORCE_SYMBOL $0B77 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0B79
FORCE_SYMBOL $0B7B VIA_cntl
FORCE_SYMBOL $0B7E VIA_port_b
FORCE_SYMBOL $0B80 VIA_shift_reg
FORCE_SYMBOL $0B82 VIA_port_b
FORCE_SYMBOL $0B84 VIA_port_a
FORCE_SYMBOL $0B86 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0B88
FORCE_SYMBOL $0B8B VIA_int_flags
FORCE_SYMBOL $0B8F VIA_port_a
COMMENT_LINE $0B91 U=String pointer to first $81
FORCE_NO_SYMBOL $0B91
COMMENT $0B93 Clear D/A output
FORCE_SYMBOL $0B93 VIA_port_a
COMMENT $0B95 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0B95 VIA_aux_cntl
FORCE_SYMBOL $0B97 Char_Tablef1
FORCE_NO_SYMBOL $0B9A
COMMENT $0B9C enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0B9C VIA_port_b
COMMENT $0B9E disable RAMP, disable mux
FORCE_SYMBOL $0B9E VIA_port_b
COMMENT $0BA2 Get text width
FORCE_SYMBOL $0BA2 Vec_Text_Width
FORCE_SYMBOL $0BA6 Vec_Text_Width_neg
COMMENT $0BAC Send it to the D/A
FORCE_SYMBOL $0BAC VIA_port_a
FORCE_NO_SYMBOL $0BAE
COMMENT $0BB0 enable RAMP, disable mux
FORCE_SYMBOL $0BB0 VIA_port_b
COMMENT $0BB2 delay needed for drawing
COMMENT $0BB7 Get bitmap from chargen table
COMMENT $0BB9 Save in shift register
FORCE_SYMBOL $0BB9 VIA_shift_reg
COMMENT $0BBB Get next character
COMMENT $0BBD Go back if not terminator
COMMENT_LINE $0BBF A=$81
COMMENT $0BBF disable RAMP, disable mux
FORCE_SYMBOL $0BBF VIA_port_b
FORCE_SYMBOL $0BC1 Char_Tableb1
COMMENT $0BC4 Get text height
FORCE_SYMBOL $0BC4 Vec_Text_Height
COMMENT_LINE $0BC7 now move down
COMMENT $0BC7 store 'height' to dac (y)
FORCE_SYMBOL $0BC7 VIA_port_a
COMMENT $0BC9 disable RAMP, enable mux
FORCE_SYMBOL $0BC9 VIA_port_b
COMMENT $0BCB disable RAMP, disable mux
FORCE_SYMBOL $0BCB VIA_port_b
COMMENT $0BCD zero dac
FORCE_SYMBOL $0BCD VIA_port_a
COMMENT_LINE $0BCF now only y set, x to zero
FORCE_NO_SYMBOL $0BCF
COMMENT $0BD1 enable RAMP, disable mux
FORCE_SYMBOL $0BD1 VIA_port_b
COMMENT $0BD5 Get first character
COMMENT $0BD7 enable RAMP, enable mux
FORCE_SYMBOL $0BD7 VIA_port_b
COMMENT_LINE $0BD9 tricky, cutting y off while
COMMENT_LINE $0BD9 integrating, saves one switch of mux
COMMENT_LINE $0BD9 still B=$81
COMMENT $0BD9 disable RAMP, disable mux
FORCE_SYMBOL $0BD9 VIA_port_b
FORCE_SYMBOL $0BDB Vec_Text_Width_neg
COMMENT_LINE $0BDE now finnished moving down
COMMENT $0BDE negative x speed
FORCE_SYMBOL $0BDE VIA_port_a
FORCE_NO_SYMBOL $0BE0
COMMENT $0BE2 enable RAMP, disable mux
FORCE_SYMBOL $0BE2 VIA_port_b
COMMENT $0BE4 delay needed for drawing
COMMENT $0BE9 Get bitmap from chargen table
COMMENT $0BEB Save in shift register
FORCE_SYMBOL $0BEB VIA_shift_reg
COMMENT $0BED Get next character
COMMENT $0BEF Go back if not terminator
COMMENT_LINE $0BF1 A=$81
COMMENT $0BF1 disable RAMP, disable mux
FORCE_SYMBOL $0BF1 VIA_port_b
FORCE_SYMBOL $0BF3 Char_Tablef2
COMMENT $0BF6 Get text height
FORCE_SYMBOL $0BF6 Vec_Text_Height
COMMENT_LINE $0BF9 now move down
COMMENT $0BF9 store 'height' to dac (y)
FORCE_SYMBOL $0BF9 VIA_port_a
COMMENT $0BFB disable RAMP, enable mux
FORCE_SYMBOL $0BFB VIA_port_b
COMMENT $0BFD disable RAMP, disable mux
FORCE_SYMBOL $0BFD VIA_port_b
COMMENT $0BFF zero dac
FORCE_SYMBOL $0BFF VIA_port_a
COMMENT_LINE $0C01 now only y set, x to zero
FORCE_NO_SYMBOL $0C01
COMMENT $0C03 enable RAMP, disable mux
FORCE_SYMBOL $0C03 VIA_port_b
COMMENT_LINE $0C05 here we move down
COMMENT $0C09 enable RAMP, enable mux
FORCE_SYMBOL $0C09 VIA_port_b
COMMENT_LINE $0C0B tricky, cutting y off while
COMMENT_LINE $0C0B integrating, saves one switch of mux
COMMENT_LINE $0C0B still b=$81
COMMENT $0C0B disable RAMP, disable mux
FORCE_SYMBOL $0C0B VIA_port_b
FORCE_SYMBOL $0C0D Vec_Text_Width
COMMENT_LINE $0C10 now finnished moving down
COMMENT $0C10 Send it to the D/A
FORCE_SYMBOL $0C10 VIA_port_a
FORCE_NO_SYMBOL $0C12
COMMENT $0C14 enable RAMP, disable mux
FORCE_SYMBOL $0C14 VIA_port_b
COMMENT $0C16 delay needed for drawing
COMMENT $0C1B Get bitmap from chargen table
COMMENT $0C1D Save in shift register
FORCE_SYMBOL $0C1D VIA_shift_reg
COMMENT $0C1F Get next character
COMMENT $0C21 Go back if not terminator
COMMENT_LINE $0C23 A=$81
COMMENT $0C23 disable RAMP, disable mux
FORCE_SYMBOL $0C23 VIA_port_b
FORCE_SYMBOL $0C25 Char_Tableb2
COMMENT $0C28 Get text height
FORCE_SYMBOL $0C28 Vec_Text_Height
COMMENT_LINE $0C2B now move down
COMMENT $0C2B store 'height' to dac (y)
FORCE_SYMBOL $0C2B VIA_port_a
COMMENT $0C2D disable RAMP, enable mux
FORCE_SYMBOL $0C2D VIA_port_b
COMMENT $0C2F disable RAMP, disable mux
FORCE_SYMBOL $0C2F VIA_port_b
COMMENT $0C31 zero dac
FORCE_SYMBOL $0C31 VIA_port_a
COMMENT_LINE $0C33 now only y set, x to zero
FORCE_NO_SYMBOL $0C33
COMMENT $0C35 enable RAMP, disable mux
FORCE_SYMBOL $0C35 VIA_port_b
COMMENT $0C39 Get first character
COMMENT $0C3B enable RAMP, enable mux
FORCE_SYMBOL $0C3B VIA_port_b
COMMENT_LINE $0C3D tricky, cutting y off while
COMMENT_LINE $0C3D integrating, saves one switch of mux
COMMENT_LINE $0C3D still B=$81
COMMENT $0C3D disable RAMP, disable mux
FORCE_SYMBOL $0C3D VIA_port_b
FORCE_SYMBOL $0C3F Vec_Text_Width_neg
COMMENT_LINE $0C42 now finnished moving down
COMMENT $0C42 negative x speed
FORCE_SYMBOL $0C42 VIA_port_a
FORCE_NO_SYMBOL $0C44
COMMENT $0C46 enable RAMP, disable mux
FORCE_SYMBOL $0C46 VIA_port_b
COMMENT $0C48 delay needed for drawing
COMMENT $0C4D Get bitmap from chargen table
COMMENT $0C4F Save in shift register
FORCE_SYMBOL $0C4F VIA_shift_reg
COMMENT $0C51 Get next character
COMMENT $0C53 Go back if not terminator
COMMENT_LINE $0C55 A=$81
COMMENT $0C55 disable RAMP, disable mux
FORCE_SYMBOL $0C55 VIA_port_b
FORCE_SYMBOL $0C57 Char_Tablef3
COMMENT $0C5A Get text height
FORCE_SYMBOL $0C5A Vec_Text_Height
COMMENT_LINE $0C5D now move down
COMMENT $0C5D store 'height' to dac (y)
FORCE_SYMBOL $0C5D VIA_port_a
COMMENT $0C5F disable RAMP, enable mux
FORCE_SYMBOL $0C5F VIA_port_b
COMMENT $0C61 disable RAMP, disable mux
FORCE_SYMBOL $0C61 VIA_port_b
COMMENT $0C63 zero dac
FORCE_SYMBOL $0C63 VIA_port_a
COMMENT_LINE $0C65 now only y set, x to zero
FORCE_NO_SYMBOL $0C65
COMMENT $0C67 enable RAMP, disable mux
FORCE_SYMBOL $0C67 VIA_port_b
COMMENT_LINE $0C69 here we move down
COMMENT $0C6D enable RAMP, enable mux
FORCE_SYMBOL $0C6D VIA_port_b
COMMENT_LINE $0C6F tricky, cutting y off while
COMMENT_LINE $0C6F integrating, saves one switch of mux
COMMENT_LINE $0C6F still b=$81
COMMENT $0C6F disable RAMP, disable mux
FORCE_SYMBOL $0C6F VIA_port_b
FORCE_SYMBOL $0C71 Vec_Text_Width
COMMENT_LINE $0C74 now finnished moving down
COMMENT $0C74 Send it to the D/A
FORCE_SYMBOL $0C74 VIA_port_a
FORCE_NO_SYMBOL $0C76
COMMENT $0C78 enable RAMP, disable mux
FORCE_SYMBOL $0C78 VIA_port_b
COMMENT $0C7A delay needed for drawing
COMMENT $0C7F Get bitmap from chargen table
COMMENT $0C81 Save in shift register
FORCE_SYMBOL $0C81 VIA_shift_reg
COMMENT $0C83 Get next character
COMMENT $0C85 Go back if not terminator
COMMENT_LINE $0C87 A=$81
COMMENT $0C87 disable RAMP, disable mux
FORCE_SYMBOL $0C87 VIA_port_b
FORCE_SYMBOL $0C89 Char_Tableb3
COMMENT $0C8C Get text height
FORCE_SYMBOL $0C8C Vec_Text_Height
COMMENT_LINE $0C8F now move down
COMMENT $0C8F store 'height' to dac (y)
FORCE_SYMBOL $0C8F VIA_port_a
COMMENT $0C91 disable RAMP, enable mux
FORCE_SYMBOL $0C91 VIA_port_b
COMMENT $0C93 disable RAMP, disable mux
FORCE_SYMBOL $0C93 VIA_port_b
COMMENT $0C95 zero dac
FORCE_SYMBOL $0C95 VIA_port_a
COMMENT_LINE $0C97 now only y set, x to zero
FORCE_NO_SYMBOL $0C97
COMMENT $0C99 enable RAMP, disable mux
FORCE_SYMBOL $0C99 VIA_port_b
COMMENT $0C9D Get first character
COMMENT $0C9F enable RAMP, enable mux
FORCE_SYMBOL $0C9F VIA_port_b
COMMENT_LINE $0CA1 tricky, cutting y off while
COMMENT_LINE $0CA1 integrating, saves one switch of mux
COMMENT_LINE $0CA1 still B=$81
COMMENT $0CA1 disable RAMP, disable mux
FORCE_SYMBOL $0CA1 VIA_port_b
FORCE_SYMBOL $0CA3 Vec_Text_Width_neg
COMMENT_LINE $0CA6 now finnished moving down
COMMENT $0CA6 negative x speed
FORCE_SYMBOL $0CA6 VIA_port_a
FORCE_NO_SYMBOL $0CA8
COMMENT $0CAA enable RAMP, disable mux
FORCE_SYMBOL $0CAA VIA_port_b
COMMENT $0CAC delay needed for drawing
COMMENT $0CB1 Get bitmap from chargen table
COMMENT $0CB3 Save in shift register
FORCE_SYMBOL $0CB3 VIA_shift_reg
COMMENT $0CB5 Get next character
COMMENT $0CB7 Go back if not terminator
COMMENT_LINE $0CB9 A=$81
COMMENT $0CB9 disable RAMP, disable mux
FORCE_SYMBOL $0CB9 VIA_port_b
FORCE_SYMBOL $0CBB Char_Tablef4
COMMENT $0CBE Get text height
FORCE_SYMBOL $0CBE Vec_Text_Height
COMMENT_LINE $0CC1 now move down
COMMENT $0CC1 store 'height' to dac (y)
FORCE_SYMBOL $0CC1 VIA_port_a
COMMENT $0CC3 disable RAMP, enable mux
FORCE_SYMBOL $0CC3 VIA_port_b
COMMENT $0CC5 disable RAMP, disable mux
FORCE_SYMBOL $0CC5 VIA_port_b
COMMENT $0CC7 zero dac
FORCE_SYMBOL $0CC7 VIA_port_a
COMMENT_LINE $0CC9 now only y set, x to zero
FORCE_NO_SYMBOL $0CC9
COMMENT $0CCB enable RAMP, disable mux
FORCE_SYMBOL $0CCB VIA_port_b
COMMENT_LINE $0CCD here we move down
COMMENT $0CD1 enable RAMP, enable mux
FORCE_SYMBOL $0CD1 VIA_port_b
COMMENT_LINE $0CD3 tricky, cutting y off while
COMMENT_LINE $0CD3 integrating, saves one switch of mux
COMMENT_LINE $0CD3 still b=$81
COMMENT $0CD3 disable RAMP, disable mux
FORCE_SYMBOL $0CD3 VIA_port_b
FORCE_SYMBOL $0CD5 Vec_Text_Width
COMMENT_LINE $0CD8 now finnished moving down
COMMENT $0CD8 Send it to the D/A
FORCE_SYMBOL $0CD8 VIA_port_a
FORCE_NO_SYMBOL $0CDA
COMMENT $0CDC enable RAMP, disable mux
FORCE_SYMBOL $0CDC VIA_port_b
COMMENT $0CDE delay needed for drawing
COMMENT $0CE3 Get bitmap from chargen table
COMMENT $0CE5 Save in shift register
FORCE_SYMBOL $0CE5 VIA_shift_reg
COMMENT $0CE7 Get next character
COMMENT $0CE9 Go back if not terminator
COMMENT_LINE $0CEB A=$81
COMMENT $0CEB disable RAMP, disable mux
FORCE_SYMBOL $0CEB VIA_port_b
FORCE_NO_SYMBOL $0CED
COMMENT $0CEF T1->PB7 enabled
FORCE_SYMBOL $0CEF VIA_aux_cntl
FORCE_SYMBOL $0CF1 VIA_shift_reg
FORCE_NO_SYMBOL $0CF3
COMMENT $0CF5 /BLANK low and /ZERO low
FORCE_SYMBOL $0CF5 VIA_cntl
COMMENT_LINE $0CF7 RESET_0_REF;                    ;Call Reset0Ref macro
FORCE_SYMBOL $0CF7 l_RndGameTypeMsg3
COMMENT $0CFA Call enhenced print routine
COMMENT_LINE $0CFC Moveto_d_7F start
FORCE_SYMBOL $0CFC VIA_port_a
FORCE_NO_SYMBOL $0CFE
FORCE_SYMBOL $0D00 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0D02
FORCE_SYMBOL $0D04 VIA_cntl
FORCE_SYMBOL $0D07 VIA_port_b
FORCE_SYMBOL $0D09 VIA_shift_reg
FORCE_SYMBOL $0D0B VIA_port_b
FORCE_SYMBOL $0D0D VIA_port_a
FORCE_SYMBOL $0D0F VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0D11
FORCE_SYMBOL $0D14 VIA_int_flags
FORCE_SYMBOL $0D18 VIA_port_a
COMMENT_LINE $0D1A U=String pointer to first $81
FORCE_NO_SYMBOL $0D1A
COMMENT $0D1C Clear D/A output
FORCE_SYMBOL $0D1C VIA_port_a
COMMENT $0D1E Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0D1E VIA_aux_cntl
FORCE_SYMBOL $0D20 Char_Tablef1
FORCE_NO_SYMBOL $0D23
COMMENT $0D25 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0D25 VIA_port_b
COMMENT $0D27 disable RAMP, disable mux
FORCE_SYMBOL $0D27 VIA_port_b
COMMENT $0D2B Get text width
FORCE_SYMBOL $0D2B Vec_Text_Width
FORCE_SYMBOL $0D2F Vec_Text_Width_neg
COMMENT $0D35 Send it to the D/A
FORCE_SYMBOL $0D35 VIA_port_a
FORCE_NO_SYMBOL $0D37
COMMENT $0D39 enable RAMP, disable mux
FORCE_SYMBOL $0D39 VIA_port_b
COMMENT $0D3B delay needed for drawing
COMMENT $0D40 Get bitmap from chargen table
COMMENT $0D42 Save in shift register
FORCE_SYMBOL $0D42 VIA_shift_reg
COMMENT $0D44 Get next character
COMMENT $0D46 Go back if not terminator
COMMENT_LINE $0D48 A=$81
COMMENT $0D48 disable RAMP, disable mux
FORCE_SYMBOL $0D48 VIA_port_b
FORCE_SYMBOL $0D4A Char_Tableb1
COMMENT $0D4D Get text height
FORCE_SYMBOL $0D4D Vec_Text_Height
COMMENT_LINE $0D50 now move down
COMMENT $0D50 store 'height' to dac (y)
FORCE_SYMBOL $0D50 VIA_port_a
COMMENT $0D52 disable RAMP, enable mux
FORCE_SYMBOL $0D52 VIA_port_b
COMMENT $0D54 disable RAMP, disable mux
FORCE_SYMBOL $0D54 VIA_port_b
COMMENT $0D56 zero dac
FORCE_SYMBOL $0D56 VIA_port_a
COMMENT_LINE $0D58 now only y set, x to zero
FORCE_NO_SYMBOL $0D58
COMMENT $0D5A enable RAMP, disable mux
FORCE_SYMBOL $0D5A VIA_port_b
COMMENT $0D5E Get first character
COMMENT $0D60 enable RAMP, enable mux
FORCE_SYMBOL $0D60 VIA_port_b
COMMENT_LINE $0D62 tricky, cutting y off while
COMMENT_LINE $0D62 integrating, saves one switch of mux
COMMENT_LINE $0D62 still B=$81
COMMENT $0D62 disable RAMP, disable mux
FORCE_SYMBOL $0D62 VIA_port_b
FORCE_SYMBOL $0D64 Vec_Text_Width_neg
COMMENT_LINE $0D67 now finnished moving down
COMMENT $0D67 negative x speed
FORCE_SYMBOL $0D67 VIA_port_a
FORCE_NO_SYMBOL $0D69
COMMENT $0D6B enable RAMP, disable mux
FORCE_SYMBOL $0D6B VIA_port_b
COMMENT $0D6D delay needed for drawing
COMMENT $0D72 Get bitmap from chargen table
COMMENT $0D74 Save in shift register
FORCE_SYMBOL $0D74 VIA_shift_reg
COMMENT $0D76 Get next character
COMMENT $0D78 Go back if not terminator
COMMENT_LINE $0D7A A=$81
COMMENT $0D7A disable RAMP, disable mux
FORCE_SYMBOL $0D7A VIA_port_b
FORCE_SYMBOL $0D7C Char_Tablef2
COMMENT $0D7F Get text height
FORCE_SYMBOL $0D7F Vec_Text_Height
COMMENT_LINE $0D82 now move down
COMMENT $0D82 store 'height' to dac (y)
FORCE_SYMBOL $0D82 VIA_port_a
COMMENT $0D84 disable RAMP, enable mux
FORCE_SYMBOL $0D84 VIA_port_b
COMMENT $0D86 disable RAMP, disable mux
FORCE_SYMBOL $0D86 VIA_port_b
COMMENT $0D88 zero dac
FORCE_SYMBOL $0D88 VIA_port_a
COMMENT_LINE $0D8A now only y set, x to zero
FORCE_NO_SYMBOL $0D8A
COMMENT $0D8C enable RAMP, disable mux
FORCE_SYMBOL $0D8C VIA_port_b
COMMENT_LINE $0D8E here we move down
COMMENT $0D92 enable RAMP, enable mux
FORCE_SYMBOL $0D92 VIA_port_b
COMMENT_LINE $0D94 tricky, cutting y off while
COMMENT_LINE $0D94 integrating, saves one switch of mux
COMMENT_LINE $0D94 still b=$81
COMMENT $0D94 disable RAMP, disable mux
FORCE_SYMBOL $0D94 VIA_port_b
FORCE_SYMBOL $0D96 Vec_Text_Width
COMMENT_LINE $0D99 now finnished moving down
COMMENT $0D99 Send it to the D/A
FORCE_SYMBOL $0D99 VIA_port_a
FORCE_NO_SYMBOL $0D9B
COMMENT $0D9D enable RAMP, disable mux
FORCE_SYMBOL $0D9D VIA_port_b
COMMENT $0D9F delay needed for drawing
COMMENT $0DA4 Get bitmap from chargen table
COMMENT $0DA6 Save in shift register
FORCE_SYMBOL $0DA6 VIA_shift_reg
COMMENT $0DA8 Get next character
COMMENT $0DAA Go back if not terminator
COMMENT_LINE $0DAC A=$81
COMMENT $0DAC disable RAMP, disable mux
FORCE_SYMBOL $0DAC VIA_port_b
FORCE_SYMBOL $0DAE Char_Tableb2
COMMENT $0DB1 Get text height
FORCE_SYMBOL $0DB1 Vec_Text_Height
COMMENT_LINE $0DB4 now move down
COMMENT $0DB4 store 'height' to dac (y)
FORCE_SYMBOL $0DB4 VIA_port_a
COMMENT $0DB6 disable RAMP, enable mux
FORCE_SYMBOL $0DB6 VIA_port_b
COMMENT $0DB8 disable RAMP, disable mux
FORCE_SYMBOL $0DB8 VIA_port_b
COMMENT $0DBA zero dac
FORCE_SYMBOL $0DBA VIA_port_a
COMMENT_LINE $0DBC now only y set, x to zero
FORCE_NO_SYMBOL $0DBC
COMMENT $0DBE enable RAMP, disable mux
FORCE_SYMBOL $0DBE VIA_port_b
COMMENT $0DC2 Get first character
COMMENT $0DC4 enable RAMP, enable mux
FORCE_SYMBOL $0DC4 VIA_port_b
COMMENT_LINE $0DC6 tricky, cutting y off while
COMMENT_LINE $0DC6 integrating, saves one switch of mux
COMMENT_LINE $0DC6 still B=$81
COMMENT $0DC6 disable RAMP, disable mux
FORCE_SYMBOL $0DC6 VIA_port_b
FORCE_SYMBOL $0DC8 Vec_Text_Width_neg
COMMENT_LINE $0DCB now finnished moving down
COMMENT $0DCB negative x speed
FORCE_SYMBOL $0DCB VIA_port_a
FORCE_NO_SYMBOL $0DCD
COMMENT $0DCF enable RAMP, disable mux
FORCE_SYMBOL $0DCF VIA_port_b
COMMENT $0DD1 delay needed for drawing
COMMENT $0DD6 Get bitmap from chargen table
COMMENT $0DD8 Save in shift register
FORCE_SYMBOL $0DD8 VIA_shift_reg
COMMENT $0DDA Get next character
COMMENT $0DDC Go back if not terminator
COMMENT_LINE $0DDE A=$81
COMMENT $0DDE disable RAMP, disable mux
FORCE_SYMBOL $0DDE VIA_port_b
FORCE_SYMBOL $0DE0 Char_Tablef3
COMMENT $0DE3 Get text height
FORCE_SYMBOL $0DE3 Vec_Text_Height
COMMENT_LINE $0DE6 now move down
COMMENT $0DE6 store 'height' to dac (y)
FORCE_SYMBOL $0DE6 VIA_port_a
COMMENT $0DE8 disable RAMP, enable mux
FORCE_SYMBOL $0DE8 VIA_port_b
COMMENT $0DEA disable RAMP, disable mux
FORCE_SYMBOL $0DEA VIA_port_b
COMMENT $0DEC zero dac
FORCE_SYMBOL $0DEC VIA_port_a
COMMENT_LINE $0DEE now only y set, x to zero
FORCE_NO_SYMBOL $0DEE
COMMENT $0DF0 enable RAMP, disable mux
FORCE_SYMBOL $0DF0 VIA_port_b
COMMENT_LINE $0DF2 here we move down
COMMENT $0DF6 enable RAMP, enable mux
FORCE_SYMBOL $0DF6 VIA_port_b
COMMENT_LINE $0DF8 tricky, cutting y off while
COMMENT_LINE $0DF8 integrating, saves one switch of mux
COMMENT_LINE $0DF8 still b=$81
COMMENT $0DF8 disable RAMP, disable mux
FORCE_SYMBOL $0DF8 VIA_port_b
FORCE_SYMBOL $0DFA Vec_Text_Width
COMMENT_LINE $0DFD now finnished moving down
COMMENT $0DFD Send it to the D/A
FORCE_SYMBOL $0DFD VIA_port_a
FORCE_NO_SYMBOL $0DFF
COMMENT $0E01 enable RAMP, disable mux
FORCE_SYMBOL $0E01 VIA_port_b
COMMENT $0E03 delay needed for drawing
COMMENT $0E08 Get bitmap from chargen table
COMMENT $0E0A Save in shift register
FORCE_SYMBOL $0E0A VIA_shift_reg
COMMENT $0E0C Get next character
COMMENT $0E0E Go back if not terminator
COMMENT_LINE $0E10 A=$81
COMMENT $0E10 disable RAMP, disable mux
FORCE_SYMBOL $0E10 VIA_port_b
FORCE_SYMBOL $0E12 Char_Tableb3
COMMENT $0E15 Get text height
FORCE_SYMBOL $0E15 Vec_Text_Height
COMMENT_LINE $0E18 now move down
COMMENT $0E18 store 'height' to dac (y)
FORCE_SYMBOL $0E18 VIA_port_a
COMMENT $0E1A disable RAMP, enable mux
FORCE_SYMBOL $0E1A VIA_port_b
COMMENT $0E1C disable RAMP, disable mux
FORCE_SYMBOL $0E1C VIA_port_b
COMMENT $0E1E zero dac
FORCE_SYMBOL $0E1E VIA_port_a
COMMENT_LINE $0E20 now only y set, x to zero
FORCE_NO_SYMBOL $0E20
COMMENT $0E22 enable RAMP, disable mux
FORCE_SYMBOL $0E22 VIA_port_b
COMMENT $0E26 Get first character
COMMENT $0E28 enable RAMP, enable mux
FORCE_SYMBOL $0E28 VIA_port_b
COMMENT_LINE $0E2A tricky, cutting y off while
COMMENT_LINE $0E2A integrating, saves one switch of mux
COMMENT_LINE $0E2A still B=$81
COMMENT $0E2A disable RAMP, disable mux
FORCE_SYMBOL $0E2A VIA_port_b
FORCE_SYMBOL $0E2C Vec_Text_Width_neg
COMMENT_LINE $0E2F now finnished moving down
COMMENT $0E2F negative x speed
FORCE_SYMBOL $0E2F VIA_port_a
FORCE_NO_SYMBOL $0E31
COMMENT $0E33 enable RAMP, disable mux
FORCE_SYMBOL $0E33 VIA_port_b
COMMENT $0E35 delay needed for drawing
COMMENT $0E3A Get bitmap from chargen table
COMMENT $0E3C Save in shift register
FORCE_SYMBOL $0E3C VIA_shift_reg
COMMENT $0E3E Get next character
COMMENT $0E40 Go back if not terminator
COMMENT_LINE $0E42 A=$81
COMMENT $0E42 disable RAMP, disable mux
FORCE_SYMBOL $0E42 VIA_port_b
FORCE_SYMBOL $0E44 Char_Tablef4
COMMENT $0E47 Get text height
FORCE_SYMBOL $0E47 Vec_Text_Height
COMMENT_LINE $0E4A now move down
COMMENT $0E4A store 'height' to dac (y)
FORCE_SYMBOL $0E4A VIA_port_a
COMMENT $0E4C disable RAMP, enable mux
FORCE_SYMBOL $0E4C VIA_port_b
COMMENT $0E4E disable RAMP, disable mux
FORCE_SYMBOL $0E4E VIA_port_b
COMMENT $0E50 zero dac
FORCE_SYMBOL $0E50 VIA_port_a
COMMENT_LINE $0E52 now only y set, x to zero
FORCE_NO_SYMBOL $0E52
COMMENT $0E54 enable RAMP, disable mux
FORCE_SYMBOL $0E54 VIA_port_b
COMMENT_LINE $0E56 here we move down
COMMENT $0E5A enable RAMP, enable mux
FORCE_SYMBOL $0E5A VIA_port_b
COMMENT_LINE $0E5C tricky, cutting y off while
COMMENT_LINE $0E5C integrating, saves one switch of mux
COMMENT_LINE $0E5C still b=$81
COMMENT $0E5C disable RAMP, disable mux
FORCE_SYMBOL $0E5C VIA_port_b
FORCE_SYMBOL $0E5E Vec_Text_Width
COMMENT_LINE $0E61 now finnished moving down
COMMENT $0E61 Send it to the D/A
FORCE_SYMBOL $0E61 VIA_port_a
FORCE_NO_SYMBOL $0E63
COMMENT $0E65 enable RAMP, disable mux
FORCE_SYMBOL $0E65 VIA_port_b
COMMENT $0E67 delay needed for drawing
COMMENT $0E6C Get bitmap from chargen table
COMMENT $0E6E Save in shift register
FORCE_SYMBOL $0E6E VIA_shift_reg
COMMENT $0E70 Get next character
COMMENT $0E72 Go back if not terminator
COMMENT_LINE $0E74 A=$81
COMMENT $0E74 disable RAMP, disable mux
FORCE_SYMBOL $0E74 VIA_port_b
FORCE_NO_SYMBOL $0E76
COMMENT $0E78 T1->PB7 enabled
FORCE_SYMBOL $0E78 VIA_aux_cntl
FORCE_SYMBOL $0E7A VIA_shift_reg
FORCE_NO_SYMBOL $0E7C
COMMENT $0E7E /BLANK low and /ZERO low
FORCE_SYMBOL $0E7E VIA_cntl
COMMENT $0E80 ;Call Reset0Ref macro
FORCE_NO_SYMBOL $0E80
COMMENT_LINE $0E83 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $0E83 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $0E83 LDD   #0x0302;
COMMENT_LINE $0E83 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $0E83 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $0E83 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0E83 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0E83 LDB   #0x01;
COMMENT_LINE $0E83 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0E83 LDB    #0x00CC;
COMMENT $0E83 0x0C;
FORCE_SYMBOL $0E83 VIA_cntl
FORCE_SYMBOL $0E85 l_RndGameTypeMsg4
COMMENT $0E88 Call enhenced print routine
COMMENT_LINE $0E8A Moveto_d_7F start
FORCE_SYMBOL $0E8A VIA_port_a
FORCE_NO_SYMBOL $0E8C
FORCE_SYMBOL $0E8E VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0E90
FORCE_SYMBOL $0E92 VIA_cntl
FORCE_SYMBOL $0E95 VIA_port_b
FORCE_SYMBOL $0E97 VIA_shift_reg
FORCE_SYMBOL $0E99 VIA_port_b
FORCE_SYMBOL $0E9B VIA_port_a
FORCE_SYMBOL $0E9D VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0E9F
FORCE_SYMBOL $0EA2 VIA_int_flags
FORCE_SYMBOL $0EA6 VIA_port_a
COMMENT_LINE $0EA8 U=String pointer to first $81
FORCE_NO_SYMBOL $0EA8
COMMENT $0EAA Clear D/A output
FORCE_SYMBOL $0EAA VIA_port_a
COMMENT $0EAC Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0EAC VIA_aux_cntl
FORCE_SYMBOL $0EAE Char_Tablef1
FORCE_NO_SYMBOL $0EB1
COMMENT $0EB3 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0EB3 VIA_port_b
COMMENT $0EB5 disable RAMP, disable mux
FORCE_SYMBOL $0EB5 VIA_port_b
COMMENT $0EB9 Get text width
FORCE_SYMBOL $0EB9 Vec_Text_Width
FORCE_SYMBOL $0EBD Vec_Text_Width_neg
COMMENT $0EC3 Send it to the D/A
FORCE_SYMBOL $0EC3 VIA_port_a
FORCE_NO_SYMBOL $0EC5
COMMENT $0EC7 enable RAMP, disable mux
FORCE_SYMBOL $0EC7 VIA_port_b
COMMENT $0EC9 delay needed for drawing
COMMENT $0ECE Get bitmap from chargen table
COMMENT $0ED0 Save in shift register
FORCE_SYMBOL $0ED0 VIA_shift_reg
COMMENT $0ED2 Get next character
COMMENT $0ED4 Go back if not terminator
COMMENT_LINE $0ED6 A=$81
COMMENT $0ED6 disable RAMP, disable mux
FORCE_SYMBOL $0ED6 VIA_port_b
FORCE_SYMBOL $0ED8 Char_Tableb1
COMMENT $0EDB Get text height
FORCE_SYMBOL $0EDB Vec_Text_Height
COMMENT_LINE $0EDE now move down
COMMENT $0EDE store 'height' to dac (y)
FORCE_SYMBOL $0EDE VIA_port_a
COMMENT $0EE0 disable RAMP, enable mux
FORCE_SYMBOL $0EE0 VIA_port_b
COMMENT $0EE2 disable RAMP, disable mux
FORCE_SYMBOL $0EE2 VIA_port_b
COMMENT $0EE4 zero dac
FORCE_SYMBOL $0EE4 VIA_port_a
COMMENT_LINE $0EE6 now only y set, x to zero
FORCE_NO_SYMBOL $0EE6
COMMENT $0EE8 enable RAMP, disable mux
FORCE_SYMBOL $0EE8 VIA_port_b
COMMENT $0EEC Get first character
COMMENT $0EEE enable RAMP, enable mux
FORCE_SYMBOL $0EEE VIA_port_b
COMMENT_LINE $0EF0 tricky, cutting y off while
COMMENT_LINE $0EF0 integrating, saves one switch of mux
COMMENT_LINE $0EF0 still B=$81
COMMENT $0EF0 disable RAMP, disable mux
FORCE_SYMBOL $0EF0 VIA_port_b
FORCE_SYMBOL $0EF2 Vec_Text_Width_neg
COMMENT_LINE $0EF5 now finnished moving down
COMMENT $0EF5 negative x speed
FORCE_SYMBOL $0EF5 VIA_port_a
FORCE_NO_SYMBOL $0EF7
COMMENT $0EF9 enable RAMP, disable mux
FORCE_SYMBOL $0EF9 VIA_port_b
COMMENT $0EFB delay needed for drawing
COMMENT $0F00 Get bitmap from chargen table
COMMENT $0F02 Save in shift register
FORCE_SYMBOL $0F02 VIA_shift_reg
COMMENT $0F04 Get next character
COMMENT $0F06 Go back if not terminator
COMMENT_LINE $0F08 A=$81
COMMENT $0F08 disable RAMP, disable mux
FORCE_SYMBOL $0F08 VIA_port_b
FORCE_SYMBOL $0F0A Char_Tablef2
COMMENT $0F0D Get text height
FORCE_SYMBOL $0F0D Vec_Text_Height
COMMENT_LINE $0F10 now move down
COMMENT $0F10 store 'height' to dac (y)
FORCE_SYMBOL $0F10 VIA_port_a
COMMENT $0F12 disable RAMP, enable mux
FORCE_SYMBOL $0F12 VIA_port_b
COMMENT $0F14 disable RAMP, disable mux
FORCE_SYMBOL $0F14 VIA_port_b
COMMENT $0F16 zero dac
FORCE_SYMBOL $0F16 VIA_port_a
COMMENT_LINE $0F18 now only y set, x to zero
FORCE_NO_SYMBOL $0F18
COMMENT $0F1A enable RAMP, disable mux
FORCE_SYMBOL $0F1A VIA_port_b
COMMENT_LINE $0F1C here we move down
COMMENT $0F20 enable RAMP, enable mux
FORCE_SYMBOL $0F20 VIA_port_b
COMMENT_LINE $0F22 tricky, cutting y off while
COMMENT_LINE $0F22 integrating, saves one switch of mux
COMMENT_LINE $0F22 still b=$81
COMMENT $0F22 disable RAMP, disable mux
FORCE_SYMBOL $0F22 VIA_port_b
FORCE_SYMBOL $0F24 Vec_Text_Width
COMMENT_LINE $0F27 now finnished moving down
COMMENT $0F27 Send it to the D/A
FORCE_SYMBOL $0F27 VIA_port_a
FORCE_NO_SYMBOL $0F29
COMMENT $0F2B enable RAMP, disable mux
FORCE_SYMBOL $0F2B VIA_port_b
COMMENT $0F2D delay needed for drawing
COMMENT $0F32 Get bitmap from chargen table
COMMENT $0F34 Save in shift register
FORCE_SYMBOL $0F34 VIA_shift_reg
COMMENT $0F36 Get next character
COMMENT $0F38 Go back if not terminator
COMMENT_LINE $0F3A A=$81
COMMENT $0F3A disable RAMP, disable mux
FORCE_SYMBOL $0F3A VIA_port_b
FORCE_SYMBOL $0F3C Char_Tableb2
COMMENT $0F3F Get text height
FORCE_SYMBOL $0F3F Vec_Text_Height
COMMENT_LINE $0F42 now move down
COMMENT $0F42 store 'height' to dac (y)
FORCE_SYMBOL $0F42 VIA_port_a
COMMENT $0F44 disable RAMP, enable mux
FORCE_SYMBOL $0F44 VIA_port_b
COMMENT $0F46 disable RAMP, disable mux
FORCE_SYMBOL $0F46 VIA_port_b
COMMENT $0F48 zero dac
FORCE_SYMBOL $0F48 VIA_port_a
COMMENT_LINE $0F4A now only y set, x to zero
FORCE_NO_SYMBOL $0F4A
COMMENT $0F4C enable RAMP, disable mux
FORCE_SYMBOL $0F4C VIA_port_b
COMMENT $0F50 Get first character
COMMENT $0F52 enable RAMP, enable mux
FORCE_SYMBOL $0F52 VIA_port_b
COMMENT_LINE $0F54 tricky, cutting y off while
COMMENT_LINE $0F54 integrating, saves one switch of mux
COMMENT_LINE $0F54 still B=$81
COMMENT $0F54 disable RAMP, disable mux
FORCE_SYMBOL $0F54 VIA_port_b
FORCE_SYMBOL $0F56 Vec_Text_Width_neg
COMMENT_LINE $0F59 now finnished moving down
COMMENT $0F59 negative x speed
FORCE_SYMBOL $0F59 VIA_port_a
FORCE_NO_SYMBOL $0F5B
COMMENT $0F5D enable RAMP, disable mux
FORCE_SYMBOL $0F5D VIA_port_b
COMMENT $0F5F delay needed for drawing
COMMENT $0F64 Get bitmap from chargen table
COMMENT $0F66 Save in shift register
FORCE_SYMBOL $0F66 VIA_shift_reg
COMMENT $0F68 Get next character
COMMENT $0F6A Go back if not terminator
COMMENT_LINE $0F6C A=$81
COMMENT $0F6C disable RAMP, disable mux
FORCE_SYMBOL $0F6C VIA_port_b
FORCE_SYMBOL $0F6E Char_Tablef3
COMMENT $0F71 Get text height
FORCE_SYMBOL $0F71 Vec_Text_Height
COMMENT_LINE $0F74 now move down
COMMENT $0F74 store 'height' to dac (y)
FORCE_SYMBOL $0F74 VIA_port_a
COMMENT $0F76 disable RAMP, enable mux
FORCE_SYMBOL $0F76 VIA_port_b
COMMENT $0F78 disable RAMP, disable mux
FORCE_SYMBOL $0F78 VIA_port_b
COMMENT $0F7A zero dac
FORCE_SYMBOL $0F7A VIA_port_a
COMMENT_LINE $0F7C now only y set, x to zero
FORCE_NO_SYMBOL $0F7C
COMMENT $0F7E enable RAMP, disable mux
FORCE_SYMBOL $0F7E VIA_port_b
COMMENT_LINE $0F80 here we move down
COMMENT $0F84 enable RAMP, enable mux
FORCE_SYMBOL $0F84 VIA_port_b
COMMENT_LINE $0F86 tricky, cutting y off while
COMMENT_LINE $0F86 integrating, saves one switch of mux
COMMENT_LINE $0F86 still b=$81
COMMENT $0F86 disable RAMP, disable mux
FORCE_SYMBOL $0F86 VIA_port_b
FORCE_SYMBOL $0F88 Vec_Text_Width
COMMENT_LINE $0F8B now finnished moving down
COMMENT $0F8B Send it to the D/A
FORCE_SYMBOL $0F8B VIA_port_a
FORCE_NO_SYMBOL $0F8D
COMMENT $0F8F enable RAMP, disable mux
FORCE_SYMBOL $0F8F VIA_port_b
COMMENT $0F91 delay needed for drawing
COMMENT $0F96 Get bitmap from chargen table
COMMENT $0F98 Save in shift register
FORCE_SYMBOL $0F98 VIA_shift_reg
COMMENT $0F9A Get next character
COMMENT $0F9C Go back if not terminator
COMMENT_LINE $0F9E A=$81
COMMENT $0F9E disable RAMP, disable mux
FORCE_SYMBOL $0F9E VIA_port_b
FORCE_SYMBOL $0FA0 Char_Tableb3
COMMENT $0FA3 Get text height
FORCE_SYMBOL $0FA3 Vec_Text_Height
COMMENT_LINE $0FA6 now move down
COMMENT $0FA6 store 'height' to dac (y)
FORCE_SYMBOL $0FA6 VIA_port_a
COMMENT $0FA8 disable RAMP, enable mux
FORCE_SYMBOL $0FA8 VIA_port_b
COMMENT $0FAA disable RAMP, disable mux
FORCE_SYMBOL $0FAA VIA_port_b
COMMENT $0FAC zero dac
FORCE_SYMBOL $0FAC VIA_port_a
COMMENT_LINE $0FAE now only y set, x to zero
FORCE_NO_SYMBOL $0FAE
COMMENT $0FB0 enable RAMP, disable mux
FORCE_SYMBOL $0FB0 VIA_port_b
COMMENT $0FB4 Get first character
COMMENT $0FB6 enable RAMP, enable mux
FORCE_SYMBOL $0FB6 VIA_port_b
COMMENT_LINE $0FB8 tricky, cutting y off while
COMMENT_LINE $0FB8 integrating, saves one switch of mux
COMMENT_LINE $0FB8 still B=$81
COMMENT $0FB8 disable RAMP, disable mux
FORCE_SYMBOL $0FB8 VIA_port_b
FORCE_SYMBOL $0FBA Vec_Text_Width_neg
COMMENT_LINE $0FBD now finnished moving down
COMMENT $0FBD negative x speed
FORCE_SYMBOL $0FBD VIA_port_a
FORCE_NO_SYMBOL $0FBF
COMMENT $0FC1 enable RAMP, disable mux
FORCE_SYMBOL $0FC1 VIA_port_b
COMMENT $0FC3 delay needed for drawing
COMMENT $0FC8 Get bitmap from chargen table
COMMENT $0FCA Save in shift register
FORCE_SYMBOL $0FCA VIA_shift_reg
COMMENT $0FCC Get next character
COMMENT $0FCE Go back if not terminator
COMMENT_LINE $0FD0 A=$81
COMMENT $0FD0 disable RAMP, disable mux
FORCE_SYMBOL $0FD0 VIA_port_b
FORCE_SYMBOL $0FD2 Char_Tablef4
COMMENT $0FD5 Get text height
FORCE_SYMBOL $0FD5 Vec_Text_Height
COMMENT_LINE $0FD8 now move down
COMMENT $0FD8 store 'height' to dac (y)
FORCE_SYMBOL $0FD8 VIA_port_a
COMMENT $0FDA disable RAMP, enable mux
FORCE_SYMBOL $0FDA VIA_port_b
COMMENT $0FDC disable RAMP, disable mux
FORCE_SYMBOL $0FDC VIA_port_b
COMMENT $0FDE zero dac
FORCE_SYMBOL $0FDE VIA_port_a
COMMENT_LINE $0FE0 now only y set, x to zero
FORCE_NO_SYMBOL $0FE0
COMMENT $0FE2 enable RAMP, disable mux
FORCE_SYMBOL $0FE2 VIA_port_b
COMMENT_LINE $0FE4 here we move down
COMMENT $0FE8 enable RAMP, enable mux
FORCE_SYMBOL $0FE8 VIA_port_b
COMMENT_LINE $0FEA tricky, cutting y off while
COMMENT_LINE $0FEA integrating, saves one switch of mux
COMMENT_LINE $0FEA still b=$81
COMMENT $0FEA disable RAMP, disable mux
FORCE_SYMBOL $0FEA VIA_port_b
FORCE_SYMBOL $0FEC Vec_Text_Width
COMMENT_LINE $0FEF now finnished moving down
COMMENT $0FEF Send it to the D/A
FORCE_SYMBOL $0FEF VIA_port_a
FORCE_NO_SYMBOL $0FF1
COMMENT $0FF3 enable RAMP, disable mux
FORCE_SYMBOL $0FF3 VIA_port_b
COMMENT $0FF5 delay needed for drawing
COMMENT $0FFA Get bitmap from chargen table
COMMENT $0FFC Save in shift register
FORCE_SYMBOL $0FFC VIA_shift_reg
COMMENT $0FFE Get next character
COMMENT $1000 Go back if not terminator
COMMENT_LINE $1002 A=$81
COMMENT $1002 disable RAMP, disable mux
FORCE_SYMBOL $1002 VIA_port_b
FORCE_NO_SYMBOL $1004
COMMENT $1006 T1->PB7 enabled
FORCE_SYMBOL $1006 VIA_aux_cntl
FORCE_SYMBOL $1008 VIA_shift_reg
FORCE_NO_SYMBOL $100A
COMMENT $100C /BLANK low and /ZERO low
FORCE_SYMBOL $100C VIA_cntl
COMMENT $100E Get Buttons status
FORCE_SYMBOL $100E Read_Btns
COMMENT $1011 If no button pressed,
FORCE_NO_SYMBOL $1011
COMMENT $1013 goto opening_loop...
FORCE_NO_SYMBOL $1017
COMMENT $101B Delay of Novice level...
FORCE_SYMBOL $101B NOVICE
FORCE_SYMBOL $101D Plyr1LevelDelay
FORCE_NO_SYMBOL $1021
COMMENT $1025 Delay of intermidiate level...
FORCE_SYMBOL $1025 INTERMIDIATE
FORCE_SYMBOL $1027 Plyr1LevelDelay
COMMENT $102A So - it is level 2...
FORCE_NO_SYMBOL $102A
FORCE_SYMBOL $102C Plyr1Level
FORCE_NO_SYMBOL $1030
COMMENT_LINE $1032 BEQ   s_RndSelGameType_loop	;Nothing else to check, keep looping
COMMENT $1034 Delay of Novice level...
FORCE_SYMBOL $1034 EXPERT
FORCE_SYMBOL $1036 Plyr1LevelDelay
FORCE_SYMBOL $1039 Plyr1Level
COMMENT_LINE $103C ; At this point check for Controller #2 buttons. If pressed, Atari
COMMENT_LINE $103C ; Driving controller is connected at Port #1...
FORCE_NO_SYMBOL $103C
FORCE_SYMBOL $1040 DRV_CTRL
COMMENT $1042 Vectrex controller on Port#1 default
FORCE_SYMBOL $1042 CtrlType
COMMENT $1045 Delay of Novice level...
FORCE_SYMBOL $1045 NOVICE
FORCE_SYMBOL $1047 Plyr1LevelDelay
FORCE_NO_SYMBOL $104B
FORCE_SYMBOL $104F DRV_CTRL
COMMENT $1051 Vectrex controller on Port#1 default
FORCE_SYMBOL $1051 CtrlType
COMMENT $1054 Delay of intermidiate level...
FORCE_SYMBOL $1054 INTERMIDIATE
FORCE_SYMBOL $1056 Plyr1LevelDelay
COMMENT $1059 So - it is level 2...
FORCE_NO_SYMBOL $1059
FORCE_SYMBOL $105B Plyr1Level
FORCE_NO_SYMBOL $105F
COMMENT $1061 Nothing else to check, keep looping
FORCE_SYMBOL $1065 DRV_CTRL
COMMENT $1067 Vectrex controller on Port#1 default
FORCE_SYMBOL $1067 CtrlType
COMMENT $106A Delay of Novice level...
FORCE_SYMBOL $106A EXPERT
FORCE_SYMBOL $106C Plyr1LevelDelay
FORCE_SYMBOL $106F Plyr1Level
COMMENT_LINE $1073 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1073 s_RndDrawPlyr1Ball -
COMMENT_LINE $1073 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $1073 Check whether Ball should be displayed
FORCE_SYMBOL $1073 Plyr1BallFlag
COMMENT $1078 Center the beam
FORCE_SYMBOL $1078 Reset0Ref
COMMENT $107B D <- ball coordinates
FORCE_SYMBOL $107B Plyr1BallYpos
COMMENT $107E Move beam to D
FORCE_SYMBOL $107E Moveto_d
COMMENT $1081 X<- Address of ball vector list
FORCE_SYMBOL $1081 l_Ball
COMMENT $1084 Draw the ball
FORCE_SYMBOL $1084 Draw_VLc
COMMENT $1087 Indicate Plyr1
COMMENT_LINE $1088 LDB   #$02			;Indicate ball speed
COMMENT $1088 Calculate next coordinates of ball
FORCE_SYMBOL $1088 s_PlyrBallMove
COMMENT $108B return to caller
COMMENT_LINE $108C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $108C s_PlyrBallMove - Moves (the pointers of) the Ball asociated with each player.
COMMENT_LINE $108C A -> Plyr Nr.
COMMENT_LINE $108C B -> Plyr Ball speed.
COMMENT_LINE $108C Plyr1BallStart(Y,X)
COMMENT_LINE $108C Plyr1BallEnd(Y,X)
COMMENT_LINE $108C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $108C TIKS for delay (# of refresh cycles)
FORCE_SYMBOL $108C Plyr1LevelDelay
FORCE_SYMBOL $108F s_RealTimeClock
FORCE_SYMBOL $1092 RealTimeCounter
FORCE_SYMBOL $1098 Plyr1BallIndex
FORCE_SYMBOL $109B l_BallMoveEntry
COMMENT $10A4 Now, D contains the values for ball movement
FORCE_SYMBOL $10A6 Plyr1BallMoveY
COMMENT_LINE $10A9 Calculate next Ypos and Xpos of the ball
FORCE_SYMBOL $10A9 Plyr1BallYpos
FORCE_SYMBOL $10AC Plyr1BallXpos
FORCE_SYMBOL $10AF Plyr1BallDirection
FORCE_SYMBOL $10B4 Plyr1BallMoveY
FORCE_SYMBOL $10B7 Plyr1BallMoveX
FORCE_SYMBOL $10BC Plyr1BallMoveY
FORCE_SYMBOL $10BF Plyr1BallMoveX
FORCE_SYMBOL $10C2 Plyr1BallYpos
FORCE_SYMBOL $10C5 Plyr1BallXpos
COMMENT_LINE $10C8 Check if hit a destination
FORCE_SYMBOL $10C8 Plyr1BallDirection
COMMENT $10CD D gets current ball position
FORCE_SYMBOL $10CD Plyr1BallYpos
COMMENT $10D0 A contains the actual R (distance from [0,0])
FORCE_SYMBOL $10D0 s_CalcRadius
FORCE_SYMBOL $10D3 PADDLE_RADIUS
COMMENT $10D5 If A < PADDLE_RADIUS there is no hit...
COMMENT $10D7 If A > PADDLE_RADIUS+13 the player missed for sure!
COMMENT_LINE $10DB Now, the ball crosses the (invisible) circle that the paddle moves accross.
COMMENT_LINE $10DB At this point in time, check if the paddle is near by... If it is, change
COMMENT_LINE $10DB direction and keep playing, else, let the ball get out of the screen and have
COMMENT_LINE $10DB a new round started.
FORCE_SYMBOL $10DB Plyr1BallIndex
COMMENT $10DE ADjust index (signed way...)
FORCE_SYMBOL $10DE Plyr1BallIndex
FORCE_SYMBOL $10E1 l_PaddleHitEntry
COMMENT $10E8 Point to next entry in the table
COMMENT $10E9 Get left corner index of the paddle
COMMENT $10EB Check if the current crossing point is within
FORCE_SYMBOL $10EB Plyr1LocationIndex
COMMENT_LINE $10EE the paddle's range (as specified by the l_PaddleHit
COMMENT_LINE $10EE table)
COMMENT $10F0 Point to next entry in the table
COMMENT $10F1 Get right corner index of the paddle
FORCE_SYMBOL $10F3 Plyr1LocationIndex
FORCE_SYMBOL $10FA Plyr1LocationIndex
FORCE_NO_SYMBOL $10FD
FORCE_SYMBOL $10FF TempIndex
COMMENT $1102 Point to next entry in the table
COMMENT $1103 Get left corner index of the paddle
FORCE_NO_SYMBOL $1105
COMMENT $1107 Check if the current crossing point is within
FORCE_SYMBOL $1107 TempIndex
COMMENT_LINE $110A the paddle's range (as specified by the l_PaddleHit
COMMENT_LINE $110A table)
COMMENT $110C Point to next entry in the table
COMMENT $110D Get right corner index of the paddle
FORCE_NO_SYMBOL $110F
FORCE_SYMBOL $1111 TempIndex
COMMENT_LINE $1118 ;Check if ball passed player's line first on Y and then on X
COMMENT $1118 Get current Ypos of the ball
FORCE_SYMBOL $1118 Plyr1BallYpos
COMMENT $111B since ball moves outwards, check if next
FORCE_SYMBOL $111B Plyr1BallMoveY
COMMENT $111E BallYpos would overflow. If so - player missed!
COMMENT $1120 Get current Xpos of the ball
FORCE_SYMBOL $1120 Plyr1BallXpos
COMMENT $1123 since ball moves outwards, check if next
FORCE_SYMBOL $1123 Plyr1BallMoveX
COMMENT $1126 BallXpos would overflow. If so - player missed!
COMMENT $1128 Return to caller
COMMENT $1129 A <- Number of notes to play explosion sound
FORCE_NO_SYMBOL $1129
COMMENT $112B Reload the explosion notes counter
FORCE_SYMBOL $112B MissedSoundFlag
FORCE_NO_SYMBOL $112E
COMMENT $1130 Indicate main loop that Plyr1 missed!
FORCE_SYMBOL $1130 Plyr1MissedFlag
COMMENT $1133 Return to caller
COMMENT $1134 Position of central Box/Circle
FORCE_NO_SYMBOL $1134
FORCE_SYMBOL $1138 Plyr1BallYpos
COMMENT_LINE $113B LDD   #$2020			;Size of central Box
COMMENT $113B Size of central Box
FORCE_NO_SYMBOL $113B
COMMENT $113E Check if ball hit central Box/Circle
FORCE_SYMBOL $113E Obj_Hit
COMMENT $1141 If Carry set, change ball direction
FORCE_SYMBOL $1144 s_ChangeBallDirection
COMMENT_LINE $1148 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1148 s_ChangeBallDirection
COMMENT_LINE $1148 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1148 If ball hit center, calculate the return path (make sure meets the paddle...) and,
COMMENT_LINE $1148 update (don't show yet)  score
COMMENT $1148 Check direction Flag
FORCE_SYMBOL $1148 Plyr1BallDirection
COMMENT $114B If the ball moves outwards just change direction...
FORCE_SYMBOL $114D Plyr1BallYpos
COMMENT_LINE $1150 STB   TempValue1		;------ DEBUG -----
COMMENT_LINE $1150 STA   TempValue2		;------ DEBUG -----
COMMENT_LINE $1150 BRA   l_Plyr1UpdateDirectionFlag
COMMENT $1150 X points to the randomize table
FORCE_SYMBOL $1150 l_RndTbl
COMMENT $1153 Calculate a new EndIndex...
FORCE_SYMBOL $1153 Random_3
FORCE_SYMBOL $1156 OrigRandom
COMMENT $115C A Gets a random (valid offset) number
FORCE_SYMBOL $115E Plyr1LevelDelay
FORCE_SYMBOL $1161 EXPERT
FORCE_NO_SYMBOL $1169
FORCE_SYMBOL $116B PosRandom
COMMENT $116E Get the original value and check out the sign
FORCE_SYMBOL $116E OrigRandom
FORCE_NO_SYMBOL $1171
FORCE_SYMBOL $1175 Plyr1BallIndex
FORCE_SYMBOL $1178 PosRandom
FORCE_SYMBOL $117D Plyr1BallIndex
FORCE_SYMBOL $1180 PosRandom
FORCE_NO_SYMBOL $1185
FORCE_NO_SYMBOL $1189
COMMENT $118D Mask numbers bigger than 63...
FORCE_NO_SYMBOL $118D
FORCE_NO_SYMBOL $1191
FORCE_SYMBOL $1193 Plyr1BallIndex
FORCE_SYMBOL $1196 l_HitCenterPos
FORCE_SYMBOL $119B Plyr1BallYpos
FORCE_SYMBOL $119E l_BallMoveEntry
FORCE_SYMBOL $11A5 Plyr1BallIndex
COMMENT $11AA Now, D contains the values for ball movement
FORCE_SYMBOL $11AC Plyr1BallMoveY
COMMENT $11AF A Score increase
FORCE_SYMBOL $11AF Plyr1Level
COMMENT_LINE $11B2 LDA   #$01			;A Score increase
COMMENT $11B2 X Pointer to Score Array in the RAM
FORCE_SYMBOL $11B2 Plyr1ScoreTable
COMMENT $11B5 BIOS function to take care of the rest...
FORCE_SYMBOL $11B5 Add_Score_a
COMMENT $11B8 Free running counter for level monitoring
FORCE_SYMBOL $11B8 Plyr1CurrentScore
COMMENT $11BB Check if still need to check level
FORCE_SYMBOL $11BB Plyr1LevelFlag
FORCE_SYMBOL $11C0 s_UpdateLevels
COMMENT $11C3 Read current value
FORCE_SYMBOL $11C3 Plyr1BallDirection
COMMENT $11C6 Add +1
COMMENT $11C7 Mask bits 7 downto 1 (A could be 0 or 1)
FORCE_NO_SYMBOL $11C7
COMMENT $11C9 Store back into memory
FORCE_SYMBOL $11C9 Plyr1BallDirection
COMMENT_LINE $11CC Prepare sound Flag
COMMENT $11CC A is number of notes to play
FORCE_SYMBOL $11CC HIT_SOUND_NOTES_NUM
COMMENT $11CE Store it to the RAM
FORCE_SYMBOL $11CE HitSoundFlag
COMMENT_LINE $11D1 Update persistance value (just in case where we are in Blink mode!...)
FORCE_NO_SYMBOL $11D1
FORCE_SYMBOL $11D3 DrawPlyr1Flag
COMMENT $11D6 Return to caller
COMMENT_LINE $11D7 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $11D7 D contains YX pair of a given point, the result is the distance from (0,0) in
COMMENT_LINE $11D7 ACC A.
COMMENT_LINE $11D7 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $11D7 Must use absolute values!
FORCE_SYMBOL $11D7 Abs_a_b
COMMENT $11DA Mask irelevant bits
FORCE_NO_SYMBOL $11DA
COMMENT $11DC High Nibble of A contains MSB value of index
COMMENT $11DD If not Zero calculte X
COMMENT $11DF If Zero, turn to 0x10 to avoid too big jumps in R
FORCE_NO_SYMBOL $11DF
COMMENT $11E1 Mask irelevant bits
FORCE_NO_SYMBOL $11E1
COMMENT $11E5 High Nibble of A contains MSB value of index
FORCE_SYMBOL $11E6 TempRadius
COMMENT $11E9 A now is the index to the RadiusTbl
FORCE_SYMBOL $11E9 TempRadius
FORCE_SYMBOL $11EC l_RadiusEntry0
COMMENT $11EF A now gets the radius value
COMMENT_LINE $11F2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $11F2 A is begining index
COMMENT_LINE $11F2 s_RndDrawCircle -
COMMENT_LINE $11F2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $11F2 Initialize the X dimention pointer
FORCE_SYMBOL $11F2 sin_entry_0
COMMENT $11F5 Initialize the Y dimention pointer
FORCE_SYMBOL $11F5 cos_entry_0
COMMENT $11F9 Store A in the stack
COMMENT $11FB B <- Ypos of current dot
COMMENT $11FF A <- Xpos of current dot
COMMENT $1203 Move screen ptr according to the circle
FORCE_SYMBOL $1203 Moveto_d
FORCE_SYMBOL $1206 Dot_here
COMMENT $1209 Must be here since it changes A
FORCE_SYMBOL $1209 Reset0Ref
COMMENT_LINE $120C JSR   Intensity_5F              ;Set the intensity to $5F
COMMENT $120C Restore A from stack
COMMENT $120E Change A to point to next point on circle
FORCE_SYMBOL $120E OPENING_CIR_DISTANCE
FORCE_SYMBOL $1210 PointsNr
COMMENT $1215 Return to the caller
COMMENT_LINE $1216 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1216 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1216 Plyr1Level
COMMENT $1219 Check if Blink mode...
FORCE_NO_SYMBOL $1219
COMMENT $121D If Blink mode, check the drawing flag,
FORCE_SYMBOL $121D DrawPlyr1Flag
COMMENT $1220 when cleared, don't draw paddle in this round...
COMMENT $1222 Update the persistance of the paddle...
FORCE_SYMBOL $1222 DrawPlyr1Flag
COMMENT $1225 Must be here since it changes A,B...
FORCE_SYMBOL $1225 Reset0Ref
FORCE_SYMBOL $1228 cos_entry_0
FORCE_SYMBOL $122B sin_entry_0
FORCE_SYMBOL $122F Plyr1LocationIndex
COMMENT $1234 Now, D contains the Y,X coordinates
COMMENT_LINE $1236 of the paddle
FORCE_SYMBOL $1236 Plyr1Ypos
COMMENT $1239 Moving the pointer is done with 7F
FORCE_SYMBOL $1239 Moveto_d
COMMENT_LINE $123C scaling factor.
COMMENT_LINE $123C JSR   Dot_here			;This is for debug only!
COMMENT $123C This is the rotation angle (x4)
FORCE_SYMBOL $123C Plyr1LocationIndex
COMMENT $123F Divide by 2
COMMENT $1240 Divide by 2 once more,
COMMENT $1241 Length of vector list of the Paddle -1
FORCE_SYMBOL $1241 PADDLE_VL
COMMENT $1243 X<- Address of paddle vector list
FORCE_SYMBOL $1243 paddle1
COMMENT_LINE $1246 needed to be drawn.
COMMENT $1246 U points to the rotated vector list result
FORCE_SYMBOL $1246 Plyr1PaddleMem
COMMENT $1249 Execute rotation based on previous information.
FORCE_SYMBOL $1249 Rot_VL_ab
COMMENT_LINE $124C Draw the rotated paddle
COMMENT $124C X<- Address of paddle vector list
FORCE_SYMBOL $124C Plyr1PaddleMem
COMMENT $124F Number of vectors -1 to draw
FORCE_SYMBOL $124F PADDLE_VL
COMMENT $1251 Store for Draw_VL bios subroutine
FORCE_NO_SYMBOL $1251
COMMENT $1254 Draw Player 1's paddle
FORCE_SYMBOL $1254 Draw_VL
COMMENT_LINE $1258 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1258 draw_background - This procedure draws the screen background based on a
COMMENT_LINE $1258 vector table defined at #bckgnd. This procedure is called
COMMENT_LINE $1258 every refresh cycle in order to keep the background always
COMMENT_LINE $1258 visible. The scaling factor here is = to $7F.
COMMENT_LINE $1258 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $1258 Set the intensity to $5F
FORCE_SYMBOL $1258 Intensity_5F
COMMENT $125B ;Must be here since it changes A
FORCE_SYMBOL $125B Reset0Ref
FORCE_NO_SYMBOL $125E
COMMENT $1262 Make sure that PointsNr is a multiplication
FORCE_SYMBOL $1262 PointsNr
COMMENT_LINE $1265 of OPENING_CIR_DISTANCE, otherwise, only
COMMENT_LINE $1265 this circle will be displayed!
FORCE_SYMBOL $1265 s_RndDrawCircle
COMMENT_LINE $1268 DEBUG
COMMENT $1268 ;Must be here since it changes A
FORCE_SYMBOL $1268 Reset0Ref
FORCE_NO_SYMBOL $126B
COMMENT $126E Move pointer to the center
FORCE_SYMBOL $126E Moveto_d
FORCE_SYMBOL $1271 l_Box
COMMENT $1274 This is for debug only!
FORCE_SYMBOL $1274 Draw_VLc
COMMENT $1277 Return to caller
COMMENT_LINE $1278 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1278 print_info: This procedure is responsible for prinitng game info such as:
COMMENT_LINE $1278 Score, High score, car speed, cars left etc.
COMMENT_LINE $1278 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FORCE_SYMBOL $1278 Reset0Ref
COMMENT_LINE $127B Print "(n) - I" at the upper left corner
COMMENT $127B The hex value of "I"
FORCE_NO_SYMBOL $127B
COMMENT $127D Number of turns available to player 1
FORCE_SYMBOL $127D Plyr1TurnsNr
COMMENT $1280 XY position of the printout
FORCE_SYMBOL $1280 PLYR1_INFO_YX
COMMENT $1283 BIOS subroutine that take care of the rest...
FORCE_SYMBOL $1283 Print_Ships
COMMENT_LINE $1286 Print Player1 current score
FORCE_SYMBOL $1286 PLYR1_SCORE_YX
FORCE_SYMBOL $1289 Plyr1ScoreTable
FORCE_SYMBOL $128C Print_Str_d
FORCE_SYMBOL $128F Plyr1Level
FORCE_NO_SYMBOL $1292
FORCE_SYMBOL $1298 l_RndLevelNOVICE
COMMENT $129B Call enhenced print routine
COMMENT_LINE $129D Moveto_d_7F start
FORCE_SYMBOL $129D VIA_port_a
FORCE_NO_SYMBOL $129F
FORCE_SYMBOL $12A1 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $12A3
FORCE_SYMBOL $12A5 VIA_cntl
FORCE_SYMBOL $12A8 VIA_port_b
FORCE_SYMBOL $12AA VIA_shift_reg
FORCE_SYMBOL $12AC VIA_port_b
FORCE_SYMBOL $12AE VIA_port_a
FORCE_SYMBOL $12B0 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $12B2
FORCE_SYMBOL $12B5 VIA_int_flags
FORCE_SYMBOL $12B9 VIA_port_a
COMMENT_LINE $12BB U=String pointer to first $81
FORCE_NO_SYMBOL $12BB
COMMENT $12BD Clear D/A output
FORCE_SYMBOL $12BD VIA_port_a
COMMENT $12BF Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $12BF VIA_aux_cntl
FORCE_SYMBOL $12C1 Char_Tablef1
FORCE_NO_SYMBOL $12C4
COMMENT $12C6 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $12C6 VIA_port_b
COMMENT $12C8 disable RAMP, disable mux
FORCE_SYMBOL $12C8 VIA_port_b
COMMENT $12CC Get text width
FORCE_SYMBOL $12CC Vec_Text_Width
FORCE_SYMBOL $12D0 Vec_Text_Width_neg
COMMENT $12D6 Send it to the D/A
FORCE_SYMBOL $12D6 VIA_port_a
FORCE_NO_SYMBOL $12D8
COMMENT $12DA enable RAMP, disable mux
FORCE_SYMBOL $12DA VIA_port_b
COMMENT $12DC delay needed for drawing
COMMENT $12E1 Get bitmap from chargen table
COMMENT $12E3 Save in shift register
FORCE_SYMBOL $12E3 VIA_shift_reg
COMMENT $12E5 Get next character
COMMENT $12E7 Go back if not terminator
COMMENT_LINE $12E9 A=$81
COMMENT $12E9 disable RAMP, disable mux
FORCE_SYMBOL $12E9 VIA_port_b
FORCE_SYMBOL $12EB Char_Tableb1
COMMENT $12EE Get text height
FORCE_SYMBOL $12EE Vec_Text_Height
COMMENT_LINE $12F1 now move down
COMMENT $12F1 store 'height' to dac (y)
FORCE_SYMBOL $12F1 VIA_port_a
COMMENT $12F3 disable RAMP, enable mux
FORCE_SYMBOL $12F3 VIA_port_b
COMMENT $12F5 disable RAMP, disable mux
FORCE_SYMBOL $12F5 VIA_port_b
COMMENT $12F7 zero dac
FORCE_SYMBOL $12F7 VIA_port_a
COMMENT_LINE $12F9 now only y set, x to zero
FORCE_NO_SYMBOL $12F9
COMMENT $12FB enable RAMP, disable mux
FORCE_SYMBOL $12FB VIA_port_b
COMMENT $12FF Get first character
COMMENT $1301 enable RAMP, enable mux
FORCE_SYMBOL $1301 VIA_port_b
COMMENT_LINE $1303 tricky, cutting y off while
COMMENT_LINE $1303 integrating, saves one switch of mux
COMMENT_LINE $1303 still B=$81
COMMENT $1303 disable RAMP, disable mux
FORCE_SYMBOL $1303 VIA_port_b
FORCE_SYMBOL $1305 Vec_Text_Width_neg
COMMENT_LINE $1308 now finnished moving down
COMMENT $1308 negative x speed
FORCE_SYMBOL $1308 VIA_port_a
FORCE_NO_SYMBOL $130A
COMMENT $130C enable RAMP, disable mux
FORCE_SYMBOL $130C VIA_port_b
COMMENT $130E delay needed for drawing
COMMENT $1313 Get bitmap from chargen table
COMMENT $1315 Save in shift register
FORCE_SYMBOL $1315 VIA_shift_reg
COMMENT $1317 Get next character
COMMENT $1319 Go back if not terminator
COMMENT_LINE $131B A=$81
COMMENT $131B disable RAMP, disable mux
FORCE_SYMBOL $131B VIA_port_b
FORCE_SYMBOL $131D Char_Tablef2
COMMENT $1320 Get text height
FORCE_SYMBOL $1320 Vec_Text_Height
COMMENT_LINE $1323 now move down
COMMENT $1323 store 'height' to dac (y)
FORCE_SYMBOL $1323 VIA_port_a
COMMENT $1325 disable RAMP, enable mux
FORCE_SYMBOL $1325 VIA_port_b
COMMENT $1327 disable RAMP, disable mux
FORCE_SYMBOL $1327 VIA_port_b
COMMENT $1329 zero dac
FORCE_SYMBOL $1329 VIA_port_a
COMMENT_LINE $132B now only y set, x to zero
FORCE_NO_SYMBOL $132B
COMMENT $132D enable RAMP, disable mux
FORCE_SYMBOL $132D VIA_port_b
COMMENT_LINE $132F here we move down
COMMENT $1333 enable RAMP, enable mux
FORCE_SYMBOL $1333 VIA_port_b
COMMENT_LINE $1335 tricky, cutting y off while
COMMENT_LINE $1335 integrating, saves one switch of mux
COMMENT_LINE $1335 still b=$81
COMMENT $1335 disable RAMP, disable mux
FORCE_SYMBOL $1335 VIA_port_b
FORCE_SYMBOL $1337 Vec_Text_Width
COMMENT_LINE $133A now finnished moving down
COMMENT $133A Send it to the D/A
FORCE_SYMBOL $133A VIA_port_a
FORCE_NO_SYMBOL $133C
COMMENT $133E enable RAMP, disable mux
FORCE_SYMBOL $133E VIA_port_b
COMMENT $1340 delay needed for drawing
COMMENT $1345 Get bitmap from chargen table
COMMENT $1347 Save in shift register
FORCE_SYMBOL $1347 VIA_shift_reg
COMMENT $1349 Get next character
COMMENT $134B Go back if not terminator
COMMENT_LINE $134D A=$81
COMMENT $134D disable RAMP, disable mux
FORCE_SYMBOL $134D VIA_port_b
FORCE_SYMBOL $134F Char_Tableb2
COMMENT $1352 Get text height
FORCE_SYMBOL $1352 Vec_Text_Height
COMMENT_LINE $1355 now move down
COMMENT $1355 store 'height' to dac (y)
FORCE_SYMBOL $1355 VIA_port_a
COMMENT $1357 disable RAMP, enable mux
FORCE_SYMBOL $1357 VIA_port_b
COMMENT $1359 disable RAMP, disable mux
FORCE_SYMBOL $1359 VIA_port_b
COMMENT $135B zero dac
FORCE_SYMBOL $135B VIA_port_a
COMMENT_LINE $135D now only y set, x to zero
FORCE_NO_SYMBOL $135D
COMMENT $135F enable RAMP, disable mux
FORCE_SYMBOL $135F VIA_port_b
COMMENT $1363 Get first character
COMMENT $1365 enable RAMP, enable mux
FORCE_SYMBOL $1365 VIA_port_b
COMMENT_LINE $1367 tricky, cutting y off while
COMMENT_LINE $1367 integrating, saves one switch of mux
COMMENT_LINE $1367 still B=$81
COMMENT $1367 disable RAMP, disable mux
FORCE_SYMBOL $1367 VIA_port_b
FORCE_SYMBOL $1369 Vec_Text_Width_neg
COMMENT_LINE $136C now finnished moving down
COMMENT $136C negative x speed
FORCE_SYMBOL $136C VIA_port_a
FORCE_NO_SYMBOL $136E
COMMENT $1370 enable RAMP, disable mux
FORCE_SYMBOL $1370 VIA_port_b
COMMENT $1372 delay needed for drawing
COMMENT $1377 Get bitmap from chargen table
COMMENT $1379 Save in shift register
FORCE_SYMBOL $1379 VIA_shift_reg
COMMENT $137B Get next character
COMMENT $137D Go back if not terminator
COMMENT_LINE $137F A=$81
COMMENT $137F disable RAMP, disable mux
FORCE_SYMBOL $137F VIA_port_b
FORCE_SYMBOL $1381 Char_Tablef3
COMMENT $1384 Get text height
FORCE_SYMBOL $1384 Vec_Text_Height
COMMENT_LINE $1387 now move down
COMMENT $1387 store 'height' to dac (y)
FORCE_SYMBOL $1387 VIA_port_a
COMMENT $1389 disable RAMP, enable mux
FORCE_SYMBOL $1389 VIA_port_b
COMMENT $138B disable RAMP, disable mux
FORCE_SYMBOL $138B VIA_port_b
COMMENT $138D zero dac
FORCE_SYMBOL $138D VIA_port_a
COMMENT_LINE $138F now only y set, x to zero
FORCE_NO_SYMBOL $138F
COMMENT $1391 enable RAMP, disable mux
FORCE_SYMBOL $1391 VIA_port_b
COMMENT_LINE $1393 here we move down
COMMENT $1397 enable RAMP, enable mux
FORCE_SYMBOL $1397 VIA_port_b
COMMENT_LINE $1399 tricky, cutting y off while
COMMENT_LINE $1399 integrating, saves one switch of mux
COMMENT_LINE $1399 still b=$81
COMMENT $1399 disable RAMP, disable mux
FORCE_SYMBOL $1399 VIA_port_b
FORCE_SYMBOL $139B Vec_Text_Width
COMMENT_LINE $139E now finnished moving down
COMMENT $139E Send it to the D/A
FORCE_SYMBOL $139E VIA_port_a
FORCE_NO_SYMBOL $13A0
COMMENT $13A2 enable RAMP, disable mux
FORCE_SYMBOL $13A2 VIA_port_b
COMMENT $13A4 delay needed for drawing
COMMENT $13A9 Get bitmap from chargen table
COMMENT $13AB Save in shift register
FORCE_SYMBOL $13AB VIA_shift_reg
COMMENT $13AD Get next character
COMMENT $13AF Go back if not terminator
COMMENT_LINE $13B1 A=$81
COMMENT $13B1 disable RAMP, disable mux
FORCE_SYMBOL $13B1 VIA_port_b
FORCE_SYMBOL $13B3 Char_Tableb3
COMMENT $13B6 Get text height
FORCE_SYMBOL $13B6 Vec_Text_Height
COMMENT_LINE $13B9 now move down
COMMENT $13B9 store 'height' to dac (y)
FORCE_SYMBOL $13B9 VIA_port_a
COMMENT $13BB disable RAMP, enable mux
FORCE_SYMBOL $13BB VIA_port_b
COMMENT $13BD disable RAMP, disable mux
FORCE_SYMBOL $13BD VIA_port_b
COMMENT $13BF zero dac
FORCE_SYMBOL $13BF VIA_port_a
COMMENT_LINE $13C1 now only y set, x to zero
FORCE_NO_SYMBOL $13C1
COMMENT $13C3 enable RAMP, disable mux
FORCE_SYMBOL $13C3 VIA_port_b
COMMENT $13C7 Get first character
COMMENT $13C9 enable RAMP, enable mux
FORCE_SYMBOL $13C9 VIA_port_b
COMMENT_LINE $13CB tricky, cutting y off while
COMMENT_LINE $13CB integrating, saves one switch of mux
COMMENT_LINE $13CB still B=$81
COMMENT $13CB disable RAMP, disable mux
FORCE_SYMBOL $13CB VIA_port_b
FORCE_SYMBOL $13CD Vec_Text_Width_neg
COMMENT_LINE $13D0 now finnished moving down
COMMENT $13D0 negative x speed
FORCE_SYMBOL $13D0 VIA_port_a
FORCE_NO_SYMBOL $13D2
COMMENT $13D4 enable RAMP, disable mux
FORCE_SYMBOL $13D4 VIA_port_b
COMMENT $13D6 delay needed for drawing
COMMENT $13DB Get bitmap from chargen table
COMMENT $13DD Save in shift register
FORCE_SYMBOL $13DD VIA_shift_reg
COMMENT $13DF Get next character
COMMENT $13E1 Go back if not terminator
COMMENT_LINE $13E3 A=$81
COMMENT $13E3 disable RAMP, disable mux
FORCE_SYMBOL $13E3 VIA_port_b
FORCE_SYMBOL $13E5 Char_Tablef4
COMMENT $13E8 Get text height
FORCE_SYMBOL $13E8 Vec_Text_Height
COMMENT_LINE $13EB now move down
COMMENT $13EB store 'height' to dac (y)
FORCE_SYMBOL $13EB VIA_port_a
COMMENT $13ED disable RAMP, enable mux
FORCE_SYMBOL $13ED VIA_port_b
COMMENT $13EF disable RAMP, disable mux
FORCE_SYMBOL $13EF VIA_port_b
COMMENT $13F1 zero dac
FORCE_SYMBOL $13F1 VIA_port_a
COMMENT_LINE $13F3 now only y set, x to zero
FORCE_NO_SYMBOL $13F3
COMMENT $13F5 enable RAMP, disable mux
FORCE_SYMBOL $13F5 VIA_port_b
COMMENT_LINE $13F7 here we move down
COMMENT $13FB enable RAMP, enable mux
FORCE_SYMBOL $13FB VIA_port_b
COMMENT_LINE $13FD tricky, cutting y off while
COMMENT_LINE $13FD integrating, saves one switch of mux
COMMENT_LINE $13FD still b=$81
COMMENT $13FD disable RAMP, disable mux
FORCE_SYMBOL $13FD VIA_port_b
FORCE_SYMBOL $13FF Vec_Text_Width
COMMENT_LINE $1402 now finnished moving down
COMMENT $1402 Send it to the D/A
FORCE_SYMBOL $1402 VIA_port_a
FORCE_NO_SYMBOL $1404
COMMENT $1406 enable RAMP, disable mux
FORCE_SYMBOL $1406 VIA_port_b
COMMENT $1408 delay needed for drawing
COMMENT $140D Get bitmap from chargen table
COMMENT $140F Save in shift register
FORCE_SYMBOL $140F VIA_shift_reg
COMMENT $1411 Get next character
COMMENT $1413 Go back if not terminator
COMMENT_LINE $1415 A=$81
COMMENT $1415 disable RAMP, disable mux
FORCE_SYMBOL $1415 VIA_port_b
FORCE_NO_SYMBOL $1417
COMMENT $1419 T1->PB7 enabled
FORCE_SYMBOL $1419 VIA_aux_cntl
FORCE_SYMBOL $141B VIA_shift_reg
FORCE_NO_SYMBOL $141D
COMMENT $141F /BLANK low and /ZERO low
FORCE_SYMBOL $141F VIA_cntl
FORCE_NO_SYMBOL $1424
FORCE_SYMBOL $142A l_RndLevelINTER
COMMENT $142D Call enhenced print routine
COMMENT_LINE $142F Moveto_d_7F start
FORCE_SYMBOL $142F VIA_port_a
FORCE_NO_SYMBOL $1431
FORCE_SYMBOL $1433 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1435
FORCE_SYMBOL $1437 VIA_cntl
FORCE_SYMBOL $143A VIA_port_b
FORCE_SYMBOL $143C VIA_shift_reg
FORCE_SYMBOL $143E VIA_port_b
FORCE_SYMBOL $1440 VIA_port_a
FORCE_SYMBOL $1442 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1444
FORCE_SYMBOL $1447 VIA_int_flags
FORCE_SYMBOL $144B VIA_port_a
COMMENT_LINE $144D U=String pointer to first $81
FORCE_NO_SYMBOL $144D
COMMENT $144F Clear D/A output
FORCE_SYMBOL $144F VIA_port_a
COMMENT $1451 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $1451 VIA_aux_cntl
FORCE_SYMBOL $1453 Char_Tablef1
FORCE_NO_SYMBOL $1456
COMMENT $1458 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $1458 VIA_port_b
COMMENT $145A disable RAMP, disable mux
FORCE_SYMBOL $145A VIA_port_b
COMMENT $145E Get text width
FORCE_SYMBOL $145E Vec_Text_Width
FORCE_SYMBOL $1462 Vec_Text_Width_neg
COMMENT $1468 Send it to the D/A
FORCE_SYMBOL $1468 VIA_port_a
FORCE_NO_SYMBOL $146A
COMMENT $146C enable RAMP, disable mux
FORCE_SYMBOL $146C VIA_port_b
COMMENT $146E delay needed for drawing
COMMENT $1473 Get bitmap from chargen table
COMMENT $1475 Save in shift register
FORCE_SYMBOL $1475 VIA_shift_reg
COMMENT $1477 Get next character
COMMENT $1479 Go back if not terminator
COMMENT_LINE $147B A=$81
COMMENT $147B disable RAMP, disable mux
FORCE_SYMBOL $147B VIA_port_b
FORCE_SYMBOL $147D Char_Tableb1
COMMENT $1480 Get text height
FORCE_SYMBOL $1480 Vec_Text_Height
COMMENT_LINE $1483 now move down
COMMENT $1483 store 'height' to dac (y)
FORCE_SYMBOL $1483 VIA_port_a
COMMENT $1485 disable RAMP, enable mux
FORCE_SYMBOL $1485 VIA_port_b
COMMENT $1487 disable RAMP, disable mux
FORCE_SYMBOL $1487 VIA_port_b
COMMENT $1489 zero dac
FORCE_SYMBOL $1489 VIA_port_a
COMMENT_LINE $148B now only y set, x to zero
FORCE_NO_SYMBOL $148B
COMMENT $148D enable RAMP, disable mux
FORCE_SYMBOL $148D VIA_port_b
COMMENT $1491 Get first character
COMMENT $1493 enable RAMP, enable mux
FORCE_SYMBOL $1493 VIA_port_b
COMMENT_LINE $1495 tricky, cutting y off while
COMMENT_LINE $1495 integrating, saves one switch of mux
COMMENT_LINE $1495 still B=$81
COMMENT $1495 disable RAMP, disable mux
FORCE_SYMBOL $1495 VIA_port_b
FORCE_SYMBOL $1497 Vec_Text_Width_neg
COMMENT_LINE $149A now finnished moving down
COMMENT $149A negative x speed
FORCE_SYMBOL $149A VIA_port_a
FORCE_NO_SYMBOL $149C
COMMENT $149E enable RAMP, disable mux
FORCE_SYMBOL $149E VIA_port_b
COMMENT $14A0 delay needed for drawing
COMMENT $14A5 Get bitmap from chargen table
COMMENT $14A7 Save in shift register
FORCE_SYMBOL $14A7 VIA_shift_reg
COMMENT $14A9 Get next character
COMMENT $14AB Go back if not terminator
COMMENT_LINE $14AD A=$81
COMMENT $14AD disable RAMP, disable mux
FORCE_SYMBOL $14AD VIA_port_b
FORCE_SYMBOL $14AF Char_Tablef2
COMMENT $14B2 Get text height
FORCE_SYMBOL $14B2 Vec_Text_Height
COMMENT_LINE $14B5 now move down
COMMENT $14B5 store 'height' to dac (y)
FORCE_SYMBOL $14B5 VIA_port_a
COMMENT $14B7 disable RAMP, enable mux
FORCE_SYMBOL $14B7 VIA_port_b
COMMENT $14B9 disable RAMP, disable mux
FORCE_SYMBOL $14B9 VIA_port_b
COMMENT $14BB zero dac
FORCE_SYMBOL $14BB VIA_port_a
COMMENT_LINE $14BD now only y set, x to zero
FORCE_NO_SYMBOL $14BD
COMMENT $14BF enable RAMP, disable mux
FORCE_SYMBOL $14BF VIA_port_b
COMMENT_LINE $14C1 here we move down
COMMENT $14C5 enable RAMP, enable mux
FORCE_SYMBOL $14C5 VIA_port_b
COMMENT_LINE $14C7 tricky, cutting y off while
COMMENT_LINE $14C7 integrating, saves one switch of mux
COMMENT_LINE $14C7 still b=$81
COMMENT $14C7 disable RAMP, disable mux
FORCE_SYMBOL $14C7 VIA_port_b
FORCE_SYMBOL $14C9 Vec_Text_Width
COMMENT_LINE $14CC now finnished moving down
COMMENT $14CC Send it to the D/A
FORCE_SYMBOL $14CC VIA_port_a
FORCE_NO_SYMBOL $14CE
COMMENT $14D0 enable RAMP, disable mux
FORCE_SYMBOL $14D0 VIA_port_b
COMMENT $14D2 delay needed for drawing
COMMENT $14D7 Get bitmap from chargen table
COMMENT $14D9 Save in shift register
FORCE_SYMBOL $14D9 VIA_shift_reg
COMMENT $14DB Get next character
COMMENT $14DD Go back if not terminator
COMMENT_LINE $14DF A=$81
COMMENT $14DF disable RAMP, disable mux
FORCE_SYMBOL $14DF VIA_port_b
FORCE_SYMBOL $14E1 Char_Tableb2
COMMENT $14E4 Get text height
FORCE_SYMBOL $14E4 Vec_Text_Height
COMMENT_LINE $14E7 now move down
COMMENT $14E7 store 'height' to dac (y)
FORCE_SYMBOL $14E7 VIA_port_a
COMMENT $14E9 disable RAMP, enable mux
FORCE_SYMBOL $14E9 VIA_port_b
COMMENT $14EB disable RAMP, disable mux
FORCE_SYMBOL $14EB VIA_port_b
COMMENT $14ED zero dac
FORCE_SYMBOL $14ED VIA_port_a
COMMENT_LINE $14EF now only y set, x to zero
FORCE_NO_SYMBOL $14EF
COMMENT $14F1 enable RAMP, disable mux
FORCE_SYMBOL $14F1 VIA_port_b
COMMENT $14F5 Get first character
COMMENT $14F7 enable RAMP, enable mux
FORCE_SYMBOL $14F7 VIA_port_b
COMMENT_LINE $14F9 tricky, cutting y off while
COMMENT_LINE $14F9 integrating, saves one switch of mux
COMMENT_LINE $14F9 still B=$81
COMMENT $14F9 disable RAMP, disable mux
FORCE_SYMBOL $14F9 VIA_port_b
FORCE_SYMBOL $14FB Vec_Text_Width_neg
COMMENT_LINE $14FE now finnished moving down
COMMENT $14FE negative x speed
FORCE_SYMBOL $14FE VIA_port_a
FORCE_NO_SYMBOL $1500
COMMENT $1502 enable RAMP, disable mux
FORCE_SYMBOL $1502 VIA_port_b
COMMENT $1504 delay needed for drawing
COMMENT $1509 Get bitmap from chargen table
COMMENT $150B Save in shift register
FORCE_SYMBOL $150B VIA_shift_reg
COMMENT $150D Get next character
COMMENT $150F Go back if not terminator
COMMENT_LINE $1511 A=$81
COMMENT $1511 disable RAMP, disable mux
FORCE_SYMBOL $1511 VIA_port_b
FORCE_SYMBOL $1513 Char_Tablef3
COMMENT $1516 Get text height
FORCE_SYMBOL $1516 Vec_Text_Height
COMMENT_LINE $1519 now move down
COMMENT $1519 store 'height' to dac (y)
FORCE_SYMBOL $1519 VIA_port_a
COMMENT $151B disable RAMP, enable mux
FORCE_SYMBOL $151B VIA_port_b
COMMENT $151D disable RAMP, disable mux
FORCE_SYMBOL $151D VIA_port_b
COMMENT $151F zero dac
FORCE_SYMBOL $151F VIA_port_a
COMMENT_LINE $1521 now only y set, x to zero
FORCE_NO_SYMBOL $1521
COMMENT $1523 enable RAMP, disable mux
FORCE_SYMBOL $1523 VIA_port_b
COMMENT_LINE $1525 here we move down
COMMENT $1529 enable RAMP, enable mux
FORCE_SYMBOL $1529 VIA_port_b
COMMENT_LINE $152B tricky, cutting y off while
COMMENT_LINE $152B integrating, saves one switch of mux
COMMENT_LINE $152B still b=$81
COMMENT $152B disable RAMP, disable mux
FORCE_SYMBOL $152B VIA_port_b
FORCE_SYMBOL $152D Vec_Text_Width
COMMENT_LINE $1530 now finnished moving down
COMMENT $1530 Send it to the D/A
FORCE_SYMBOL $1530 VIA_port_a
FORCE_NO_SYMBOL $1532
COMMENT $1534 enable RAMP, disable mux
FORCE_SYMBOL $1534 VIA_port_b
COMMENT $1536 delay needed for drawing
COMMENT $153B Get bitmap from chargen table
COMMENT $153D Save in shift register
FORCE_SYMBOL $153D VIA_shift_reg
COMMENT $153F Get next character
COMMENT $1541 Go back if not terminator
COMMENT_LINE $1543 A=$81
COMMENT $1543 disable RAMP, disable mux
FORCE_SYMBOL $1543 VIA_port_b
FORCE_SYMBOL $1545 Char_Tableb3
COMMENT $1548 Get text height
FORCE_SYMBOL $1548 Vec_Text_Height
COMMENT_LINE $154B now move down
COMMENT $154B store 'height' to dac (y)
FORCE_SYMBOL $154B VIA_port_a
COMMENT $154D disable RAMP, enable mux
FORCE_SYMBOL $154D VIA_port_b
COMMENT $154F disable RAMP, disable mux
FORCE_SYMBOL $154F VIA_port_b
COMMENT $1551 zero dac
FORCE_SYMBOL $1551 VIA_port_a
COMMENT_LINE $1553 now only y set, x to zero
FORCE_NO_SYMBOL $1553
COMMENT $1555 enable RAMP, disable mux
FORCE_SYMBOL $1555 VIA_port_b
COMMENT $1559 Get first character
COMMENT $155B enable RAMP, enable mux
FORCE_SYMBOL $155B VIA_port_b
COMMENT_LINE $155D tricky, cutting y off while
COMMENT_LINE $155D integrating, saves one switch of mux
COMMENT_LINE $155D still B=$81
COMMENT $155D disable RAMP, disable mux
FORCE_SYMBOL $155D VIA_port_b
FORCE_SYMBOL $155F Vec_Text_Width_neg
COMMENT_LINE $1562 now finnished moving down
COMMENT $1562 negative x speed
FORCE_SYMBOL $1562 VIA_port_a
FORCE_NO_SYMBOL $1564
COMMENT $1566 enable RAMP, disable mux
FORCE_SYMBOL $1566 VIA_port_b
COMMENT $1568 delay needed for drawing
COMMENT $156D Get bitmap from chargen table
COMMENT $156F Save in shift register
FORCE_SYMBOL $156F VIA_shift_reg
COMMENT $1571 Get next character
COMMENT $1573 Go back if not terminator
COMMENT_LINE $1575 A=$81
COMMENT $1575 disable RAMP, disable mux
FORCE_SYMBOL $1575 VIA_port_b
FORCE_SYMBOL $1577 Char_Tablef4
COMMENT $157A Get text height
FORCE_SYMBOL $157A Vec_Text_Height
COMMENT_LINE $157D now move down
COMMENT $157D store 'height' to dac (y)
FORCE_SYMBOL $157D VIA_port_a
COMMENT $157F disable RAMP, enable mux
FORCE_SYMBOL $157F VIA_port_b
COMMENT $1581 disable RAMP, disable mux
FORCE_SYMBOL $1581 VIA_port_b
COMMENT $1583 zero dac
FORCE_SYMBOL $1583 VIA_port_a
COMMENT_LINE $1585 now only y set, x to zero
FORCE_NO_SYMBOL $1585
COMMENT $1587 enable RAMP, disable mux
FORCE_SYMBOL $1587 VIA_port_b
COMMENT_LINE $1589 here we move down
COMMENT $158D enable RAMP, enable mux
FORCE_SYMBOL $158D VIA_port_b
COMMENT_LINE $158F tricky, cutting y off while
COMMENT_LINE $158F integrating, saves one switch of mux
COMMENT_LINE $158F still b=$81
COMMENT $158F disable RAMP, disable mux
FORCE_SYMBOL $158F VIA_port_b
FORCE_SYMBOL $1591 Vec_Text_Width
COMMENT_LINE $1594 now finnished moving down
COMMENT $1594 Send it to the D/A
FORCE_SYMBOL $1594 VIA_port_a
FORCE_NO_SYMBOL $1596
COMMENT $1598 enable RAMP, disable mux
FORCE_SYMBOL $1598 VIA_port_b
COMMENT $159A delay needed for drawing
COMMENT $159F Get bitmap from chargen table
COMMENT $15A1 Save in shift register
FORCE_SYMBOL $15A1 VIA_shift_reg
COMMENT $15A3 Get next character
COMMENT $15A5 Go back if not terminator
COMMENT_LINE $15A7 A=$81
COMMENT $15A7 disable RAMP, disable mux
FORCE_SYMBOL $15A7 VIA_port_b
FORCE_NO_SYMBOL $15A9
COMMENT $15AB T1->PB7 enabled
FORCE_SYMBOL $15AB VIA_aux_cntl
FORCE_SYMBOL $15AD VIA_shift_reg
FORCE_NO_SYMBOL $15AF
COMMENT $15B1 /BLANK low and /ZERO low
FORCE_SYMBOL $15B1 VIA_cntl
FORCE_NO_SYMBOL $15B6
FORCE_SYMBOL $15BC l_RndLevelEXPERT
COMMENT $15BF Call enhenced print routine
COMMENT_LINE $15C1 Moveto_d_7F start
FORCE_SYMBOL $15C1 VIA_port_a
FORCE_NO_SYMBOL $15C3
FORCE_SYMBOL $15C5 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $15C7
FORCE_SYMBOL $15C9 VIA_cntl
FORCE_SYMBOL $15CC VIA_port_b
FORCE_SYMBOL $15CE VIA_shift_reg
FORCE_SYMBOL $15D0 VIA_port_b
FORCE_SYMBOL $15D2 VIA_port_a
FORCE_SYMBOL $15D4 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $15D6
FORCE_SYMBOL $15D9 VIA_int_flags
FORCE_SYMBOL $15DD VIA_port_a
COMMENT_LINE $15DF U=String pointer to first $81
FORCE_NO_SYMBOL $15DF
COMMENT $15E1 Clear D/A output
FORCE_SYMBOL $15E1 VIA_port_a
COMMENT $15E3 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $15E3 VIA_aux_cntl
FORCE_SYMBOL $15E5 Char_Tablef1
FORCE_NO_SYMBOL $15E8
COMMENT $15EA enable mux, set y to 0 disable ramp
FORCE_SYMBOL $15EA VIA_port_b
COMMENT $15EC disable RAMP, disable mux
FORCE_SYMBOL $15EC VIA_port_b
COMMENT $15F0 Get text width
FORCE_SYMBOL $15F0 Vec_Text_Width
FORCE_SYMBOL $15F4 Vec_Text_Width_neg
COMMENT $15FA Send it to the D/A
FORCE_SYMBOL $15FA VIA_port_a
FORCE_NO_SYMBOL $15FC
COMMENT $15FE enable RAMP, disable mux
FORCE_SYMBOL $15FE VIA_port_b
COMMENT $1600 delay needed for drawing
COMMENT $1605 Get bitmap from chargen table
COMMENT $1607 Save in shift register
FORCE_SYMBOL $1607 VIA_shift_reg
COMMENT $1609 Get next character
COMMENT $160B Go back if not terminator
COMMENT_LINE $160D A=$81
COMMENT $160D disable RAMP, disable mux
FORCE_SYMBOL $160D VIA_port_b
FORCE_SYMBOL $160F Char_Tableb1
COMMENT $1612 Get text height
FORCE_SYMBOL $1612 Vec_Text_Height
COMMENT_LINE $1615 now move down
COMMENT $1615 store 'height' to dac (y)
FORCE_SYMBOL $1615 VIA_port_a
COMMENT $1617 disable RAMP, enable mux
FORCE_SYMBOL $1617 VIA_port_b
COMMENT $1619 disable RAMP, disable mux
FORCE_SYMBOL $1619 VIA_port_b
COMMENT $161B zero dac
FORCE_SYMBOL $161B VIA_port_a
COMMENT_LINE $161D now only y set, x to zero
FORCE_NO_SYMBOL $161D
COMMENT $161F enable RAMP, disable mux
FORCE_SYMBOL $161F VIA_port_b
COMMENT $1623 Get first character
COMMENT $1625 enable RAMP, enable mux
FORCE_SYMBOL $1625 VIA_port_b
COMMENT_LINE $1627 tricky, cutting y off while
COMMENT_LINE $1627 integrating, saves one switch of mux
COMMENT_LINE $1627 still B=$81
COMMENT $1627 disable RAMP, disable mux
FORCE_SYMBOL $1627 VIA_port_b
FORCE_SYMBOL $1629 Vec_Text_Width_neg
COMMENT_LINE $162C now finnished moving down
COMMENT $162C negative x speed
FORCE_SYMBOL $162C VIA_port_a
FORCE_NO_SYMBOL $162E
COMMENT $1630 enable RAMP, disable mux
FORCE_SYMBOL $1630 VIA_port_b
COMMENT $1632 delay needed for drawing
COMMENT $1637 Get bitmap from chargen table
COMMENT $1639 Save in shift register
FORCE_SYMBOL $1639 VIA_shift_reg
COMMENT $163B Get next character
COMMENT $163D Go back if not terminator
COMMENT_LINE $163F A=$81
COMMENT $163F disable RAMP, disable mux
FORCE_SYMBOL $163F VIA_port_b
FORCE_SYMBOL $1641 Char_Tablef2
COMMENT $1644 Get text height
FORCE_SYMBOL $1644 Vec_Text_Height
COMMENT_LINE $1647 now move down
COMMENT $1647 store 'height' to dac (y)
FORCE_SYMBOL $1647 VIA_port_a
COMMENT $1649 disable RAMP, enable mux
FORCE_SYMBOL $1649 VIA_port_b
COMMENT $164B disable RAMP, disable mux
FORCE_SYMBOL $164B VIA_port_b
COMMENT $164D zero dac
FORCE_SYMBOL $164D VIA_port_a
COMMENT_LINE $164F now only y set, x to zero
FORCE_NO_SYMBOL $164F
COMMENT $1651 enable RAMP, disable mux
FORCE_SYMBOL $1651 VIA_port_b
COMMENT_LINE $1653 here we move down
COMMENT $1657 enable RAMP, enable mux
FORCE_SYMBOL $1657 VIA_port_b
COMMENT_LINE $1659 tricky, cutting y off while
COMMENT_LINE $1659 integrating, saves one switch of mux
COMMENT_LINE $1659 still b=$81
COMMENT $1659 disable RAMP, disable mux
FORCE_SYMBOL $1659 VIA_port_b
FORCE_SYMBOL $165B Vec_Text_Width
COMMENT_LINE $165E now finnished moving down
COMMENT $165E Send it to the D/A
FORCE_SYMBOL $165E VIA_port_a
FORCE_NO_SYMBOL $1660
COMMENT $1662 enable RAMP, disable mux
FORCE_SYMBOL $1662 VIA_port_b
COMMENT $1664 delay needed for drawing
COMMENT $1669 Get bitmap from chargen table
COMMENT $166B Save in shift register
FORCE_SYMBOL $166B VIA_shift_reg
COMMENT $166D Get next character
COMMENT $166F Go back if not terminator
COMMENT_LINE $1671 A=$81
COMMENT $1671 disable RAMP, disable mux
FORCE_SYMBOL $1671 VIA_port_b
FORCE_SYMBOL $1673 Char_Tableb2
COMMENT $1676 Get text height
FORCE_SYMBOL $1676 Vec_Text_Height
COMMENT_LINE $1679 now move down
COMMENT $1679 store 'height' to dac (y)
FORCE_SYMBOL $1679 VIA_port_a
COMMENT $167B disable RAMP, enable mux
FORCE_SYMBOL $167B VIA_port_b
COMMENT $167D disable RAMP, disable mux
FORCE_SYMBOL $167D VIA_port_b
COMMENT $167F zero dac
FORCE_SYMBOL $167F VIA_port_a
COMMENT_LINE $1681 now only y set, x to zero
FORCE_NO_SYMBOL $1681
COMMENT $1683 enable RAMP, disable mux
FORCE_SYMBOL $1683 VIA_port_b
COMMENT $1687 Get first character
COMMENT $1689 enable RAMP, enable mux
FORCE_SYMBOL $1689 VIA_port_b
COMMENT_LINE $168B tricky, cutting y off while
COMMENT_LINE $168B integrating, saves one switch of mux
COMMENT_LINE $168B still B=$81
COMMENT $168B disable RAMP, disable mux
FORCE_SYMBOL $168B VIA_port_b
FORCE_SYMBOL $168D Vec_Text_Width_neg
COMMENT_LINE $1690 now finnished moving down
COMMENT $1690 negative x speed
FORCE_SYMBOL $1690 VIA_port_a
FORCE_NO_SYMBOL $1692
COMMENT $1694 enable RAMP, disable mux
FORCE_SYMBOL $1694 VIA_port_b
COMMENT $1696 delay needed for drawing
COMMENT $169B Get bitmap from chargen table
COMMENT $169D Save in shift register
FORCE_SYMBOL $169D VIA_shift_reg
COMMENT $169F Get next character
COMMENT $16A1 Go back if not terminator
COMMENT_LINE $16A3 A=$81
COMMENT $16A3 disable RAMP, disable mux
FORCE_SYMBOL $16A3 VIA_port_b
FORCE_SYMBOL $16A5 Char_Tablef3
COMMENT $16A8 Get text height
FORCE_SYMBOL $16A8 Vec_Text_Height
COMMENT_LINE $16AB now move down
COMMENT $16AB store 'height' to dac (y)
FORCE_SYMBOL $16AB VIA_port_a
COMMENT $16AD disable RAMP, enable mux
FORCE_SYMBOL $16AD VIA_port_b
COMMENT $16AF disable RAMP, disable mux
FORCE_SYMBOL $16AF VIA_port_b
COMMENT $16B1 zero dac
FORCE_SYMBOL $16B1 VIA_port_a
COMMENT_LINE $16B3 now only y set, x to zero
FORCE_NO_SYMBOL $16B3
COMMENT $16B5 enable RAMP, disable mux
FORCE_SYMBOL $16B5 VIA_port_b
COMMENT_LINE $16B7 here we move down
COMMENT $16BB enable RAMP, enable mux
FORCE_SYMBOL $16BB VIA_port_b
COMMENT_LINE $16BD tricky, cutting y off while
COMMENT_LINE $16BD integrating, saves one switch of mux
COMMENT_LINE $16BD still b=$81
COMMENT $16BD disable RAMP, disable mux
FORCE_SYMBOL $16BD VIA_port_b
FORCE_SYMBOL $16BF Vec_Text_Width
COMMENT_LINE $16C2 now finnished moving down
COMMENT $16C2 Send it to the D/A
FORCE_SYMBOL $16C2 VIA_port_a
FORCE_NO_SYMBOL $16C4
COMMENT $16C6 enable RAMP, disable mux
FORCE_SYMBOL $16C6 VIA_port_b
COMMENT $16C8 delay needed for drawing
COMMENT $16CD Get bitmap from chargen table
COMMENT $16CF Save in shift register
FORCE_SYMBOL $16CF VIA_shift_reg
COMMENT $16D1 Get next character
COMMENT $16D3 Go back if not terminator
COMMENT_LINE $16D5 A=$81
COMMENT $16D5 disable RAMP, disable mux
FORCE_SYMBOL $16D5 VIA_port_b
FORCE_SYMBOL $16D7 Char_Tableb3
COMMENT $16DA Get text height
FORCE_SYMBOL $16DA Vec_Text_Height
COMMENT_LINE $16DD now move down
COMMENT $16DD store 'height' to dac (y)
FORCE_SYMBOL $16DD VIA_port_a
COMMENT $16DF disable RAMP, enable mux
FORCE_SYMBOL $16DF VIA_port_b
COMMENT $16E1 disable RAMP, disable mux
FORCE_SYMBOL $16E1 VIA_port_b
COMMENT $16E3 zero dac
FORCE_SYMBOL $16E3 VIA_port_a
COMMENT_LINE $16E5 now only y set, x to zero
FORCE_NO_SYMBOL $16E5
COMMENT $16E7 enable RAMP, disable mux
FORCE_SYMBOL $16E7 VIA_port_b
COMMENT $16EB Get first character
COMMENT $16ED enable RAMP, enable mux
FORCE_SYMBOL $16ED VIA_port_b
COMMENT_LINE $16EF tricky, cutting y off while
COMMENT_LINE $16EF integrating, saves one switch of mux
COMMENT_LINE $16EF still B=$81
COMMENT $16EF disable RAMP, disable mux
FORCE_SYMBOL $16EF VIA_port_b
FORCE_SYMBOL $16F1 Vec_Text_Width_neg
COMMENT_LINE $16F4 now finnished moving down
COMMENT $16F4 negative x speed
FORCE_SYMBOL $16F4 VIA_port_a
FORCE_NO_SYMBOL $16F6
COMMENT $16F8 enable RAMP, disable mux
FORCE_SYMBOL $16F8 VIA_port_b
COMMENT $16FA delay needed for drawing
COMMENT $16FF Get bitmap from chargen table
COMMENT $1701 Save in shift register
FORCE_SYMBOL $1701 VIA_shift_reg
COMMENT $1703 Get next character
COMMENT $1705 Go back if not terminator
COMMENT_LINE $1707 A=$81
COMMENT $1707 disable RAMP, disable mux
FORCE_SYMBOL $1707 VIA_port_b
FORCE_SYMBOL $1709 Char_Tablef4
COMMENT $170C Get text height
FORCE_SYMBOL $170C Vec_Text_Height
COMMENT_LINE $170F now move down
COMMENT $170F store 'height' to dac (y)
FORCE_SYMBOL $170F VIA_port_a
COMMENT $1711 disable RAMP, enable mux
FORCE_SYMBOL $1711 VIA_port_b
COMMENT $1713 disable RAMP, disable mux
FORCE_SYMBOL $1713 VIA_port_b
COMMENT $1715 zero dac
FORCE_SYMBOL $1715 VIA_port_a
COMMENT_LINE $1717 now only y set, x to zero
FORCE_NO_SYMBOL $1717
COMMENT $1719 enable RAMP, disable mux
FORCE_SYMBOL $1719 VIA_port_b
COMMENT_LINE $171B here we move down
COMMENT $171F enable RAMP, enable mux
FORCE_SYMBOL $171F VIA_port_b
COMMENT_LINE $1721 tricky, cutting y off while
COMMENT_LINE $1721 integrating, saves one switch of mux
COMMENT_LINE $1721 still b=$81
COMMENT $1721 disable RAMP, disable mux
FORCE_SYMBOL $1721 VIA_port_b
FORCE_SYMBOL $1723 Vec_Text_Width
COMMENT_LINE $1726 now finnished moving down
COMMENT $1726 Send it to the D/A
FORCE_SYMBOL $1726 VIA_port_a
FORCE_NO_SYMBOL $1728
COMMENT $172A enable RAMP, disable mux
FORCE_SYMBOL $172A VIA_port_b
COMMENT $172C delay needed for drawing
COMMENT $1731 Get bitmap from chargen table
COMMENT $1733 Save in shift register
FORCE_SYMBOL $1733 VIA_shift_reg
COMMENT $1735 Get next character
COMMENT $1737 Go back if not terminator
COMMENT_LINE $1739 A=$81
COMMENT $1739 disable RAMP, disable mux
FORCE_SYMBOL $1739 VIA_port_b
FORCE_NO_SYMBOL $173B
COMMENT $173D T1->PB7 enabled
FORCE_SYMBOL $173D VIA_aux_cntl
FORCE_SYMBOL $173F VIA_shift_reg
FORCE_NO_SYMBOL $1741
COMMENT $1743 /BLANK low and /ZERO low
FORCE_SYMBOL $1743 VIA_cntl
FORCE_SYMBOL $1748 l_RndLevelBLINK
COMMENT $174B Call enhenced print routine
COMMENT_LINE $174D Moveto_d_7F start
FORCE_SYMBOL $174D VIA_port_a
FORCE_NO_SYMBOL $174F
FORCE_SYMBOL $1751 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1753
FORCE_SYMBOL $1755 VIA_cntl
FORCE_SYMBOL $1758 VIA_port_b
FORCE_SYMBOL $175A VIA_shift_reg
FORCE_SYMBOL $175C VIA_port_b
FORCE_SYMBOL $175E VIA_port_a
FORCE_SYMBOL $1760 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1762
FORCE_SYMBOL $1765 VIA_int_flags
FORCE_SYMBOL $1769 VIA_port_a
COMMENT_LINE $176B U=String pointer to first $81
FORCE_NO_SYMBOL $176B
COMMENT $176D Clear D/A output
FORCE_SYMBOL $176D VIA_port_a
COMMENT $176F Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $176F VIA_aux_cntl
FORCE_SYMBOL $1771 Char_Tablef1
FORCE_NO_SYMBOL $1774
COMMENT $1776 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $1776 VIA_port_b
COMMENT $1778 disable RAMP, disable mux
FORCE_SYMBOL $1778 VIA_port_b
COMMENT $177C Get text width
FORCE_SYMBOL $177C Vec_Text_Width
FORCE_SYMBOL $1780 Vec_Text_Width_neg
COMMENT $1786 Send it to the D/A
FORCE_SYMBOL $1786 VIA_port_a
FORCE_NO_SYMBOL $1788
COMMENT $178A enable RAMP, disable mux
FORCE_SYMBOL $178A VIA_port_b
COMMENT $178C delay needed for drawing
COMMENT $1791 Get bitmap from chargen table
COMMENT $1793 Save in shift register
FORCE_SYMBOL $1793 VIA_shift_reg
COMMENT $1795 Get next character
COMMENT $1797 Go back if not terminator
COMMENT_LINE $1799 A=$81
COMMENT $1799 disable RAMP, disable mux
FORCE_SYMBOL $1799 VIA_port_b
FORCE_SYMBOL $179B Char_Tableb1
COMMENT $179E Get text height
FORCE_SYMBOL $179E Vec_Text_Height
COMMENT_LINE $17A1 now move down
COMMENT $17A1 store 'height' to dac (y)
FORCE_SYMBOL $17A1 VIA_port_a
COMMENT $17A3 disable RAMP, enable mux
FORCE_SYMBOL $17A3 VIA_port_b
COMMENT $17A5 disable RAMP, disable mux
FORCE_SYMBOL $17A5 VIA_port_b
COMMENT $17A7 zero dac
FORCE_SYMBOL $17A7 VIA_port_a
COMMENT_LINE $17A9 now only y set, x to zero
FORCE_NO_SYMBOL $17A9
COMMENT $17AB enable RAMP, disable mux
FORCE_SYMBOL $17AB VIA_port_b
COMMENT $17AF Get first character
COMMENT $17B1 enable RAMP, enable mux
FORCE_SYMBOL $17B1 VIA_port_b
COMMENT_LINE $17B3 tricky, cutting y off while
COMMENT_LINE $17B3 integrating, saves one switch of mux
COMMENT_LINE $17B3 still B=$81
COMMENT $17B3 disable RAMP, disable mux
FORCE_SYMBOL $17B3 VIA_port_b
FORCE_SYMBOL $17B5 Vec_Text_Width_neg
COMMENT_LINE $17B8 now finnished moving down
COMMENT $17B8 negative x speed
FORCE_SYMBOL $17B8 VIA_port_a
FORCE_NO_SYMBOL $17BA
COMMENT $17BC enable RAMP, disable mux
FORCE_SYMBOL $17BC VIA_port_b
COMMENT $17BE delay needed for drawing
COMMENT $17C3 Get bitmap from chargen table
COMMENT $17C5 Save in shift register
FORCE_SYMBOL $17C5 VIA_shift_reg
COMMENT $17C7 Get next character
COMMENT $17C9 Go back if not terminator
COMMENT_LINE $17CB A=$81
COMMENT $17CB disable RAMP, disable mux
FORCE_SYMBOL $17CB VIA_port_b
FORCE_SYMBOL $17CD Char_Tablef2
COMMENT $17D0 Get text height
FORCE_SYMBOL $17D0 Vec_Text_Height
COMMENT_LINE $17D3 now move down
COMMENT $17D3 store 'height' to dac (y)
FORCE_SYMBOL $17D3 VIA_port_a
COMMENT $17D5 disable RAMP, enable mux
FORCE_SYMBOL $17D5 VIA_port_b
COMMENT $17D7 disable RAMP, disable mux
FORCE_SYMBOL $17D7 VIA_port_b
COMMENT $17D9 zero dac
FORCE_SYMBOL $17D9 VIA_port_a
COMMENT_LINE $17DB now only y set, x to zero
FORCE_NO_SYMBOL $17DB
COMMENT $17DD enable RAMP, disable mux
FORCE_SYMBOL $17DD VIA_port_b
COMMENT_LINE $17DF here we move down
COMMENT $17E3 enable RAMP, enable mux
FORCE_SYMBOL $17E3 VIA_port_b
COMMENT_LINE $17E5 tricky, cutting y off while
COMMENT_LINE $17E5 integrating, saves one switch of mux
COMMENT_LINE $17E5 still b=$81
COMMENT $17E5 disable RAMP, disable mux
FORCE_SYMBOL $17E5 VIA_port_b
FORCE_SYMBOL $17E7 Vec_Text_Width
COMMENT_LINE $17EA now finnished moving down
COMMENT $17EA Send it to the D/A
FORCE_SYMBOL $17EA VIA_port_a
FORCE_NO_SYMBOL $17EC
COMMENT $17EE enable RAMP, disable mux
FORCE_SYMBOL $17EE VIA_port_b
COMMENT $17F0 delay needed for drawing
COMMENT $17F5 Get bitmap from chargen table
COMMENT $17F7 Save in shift register
FORCE_SYMBOL $17F7 VIA_shift_reg
COMMENT $17F9 Get next character
COMMENT $17FB Go back if not terminator
COMMENT_LINE $17FD A=$81
COMMENT $17FD disable RAMP, disable mux
FORCE_SYMBOL $17FD VIA_port_b
FORCE_SYMBOL $17FF Char_Tableb2
COMMENT $1802 Get text height
FORCE_SYMBOL $1802 Vec_Text_Height
COMMENT_LINE $1805 now move down
COMMENT $1805 store 'height' to dac (y)
FORCE_SYMBOL $1805 VIA_port_a
COMMENT $1807 disable RAMP, enable mux
FORCE_SYMBOL $1807 VIA_port_b
COMMENT $1809 disable RAMP, disable mux
FORCE_SYMBOL $1809 VIA_port_b
COMMENT $180B zero dac
FORCE_SYMBOL $180B VIA_port_a
COMMENT_LINE $180D now only y set, x to zero
FORCE_NO_SYMBOL $180D
COMMENT $180F enable RAMP, disable mux
FORCE_SYMBOL $180F VIA_port_b
COMMENT $1813 Get first character
COMMENT $1815 enable RAMP, enable mux
FORCE_SYMBOL $1815 VIA_port_b
COMMENT_LINE $1817 tricky, cutting y off while
COMMENT_LINE $1817 integrating, saves one switch of mux
COMMENT_LINE $1817 still B=$81
COMMENT $1817 disable RAMP, disable mux
FORCE_SYMBOL $1817 VIA_port_b
FORCE_SYMBOL $1819 Vec_Text_Width_neg
COMMENT_LINE $181C now finnished moving down
COMMENT $181C negative x speed
FORCE_SYMBOL $181C VIA_port_a
FORCE_NO_SYMBOL $181E
COMMENT $1820 enable RAMP, disable mux
FORCE_SYMBOL $1820 VIA_port_b
COMMENT $1822 delay needed for drawing
COMMENT $1827 Get bitmap from chargen table
COMMENT $1829 Save in shift register
FORCE_SYMBOL $1829 VIA_shift_reg
COMMENT $182B Get next character
COMMENT $182D Go back if not terminator
COMMENT_LINE $182F A=$81
COMMENT $182F disable RAMP, disable mux
FORCE_SYMBOL $182F VIA_port_b
FORCE_SYMBOL $1831 Char_Tablef3
COMMENT $1834 Get text height
FORCE_SYMBOL $1834 Vec_Text_Height
COMMENT_LINE $1837 now move down
COMMENT $1837 store 'height' to dac (y)
FORCE_SYMBOL $1837 VIA_port_a
COMMENT $1839 disable RAMP, enable mux
FORCE_SYMBOL $1839 VIA_port_b
COMMENT $183B disable RAMP, disable mux
FORCE_SYMBOL $183B VIA_port_b
COMMENT $183D zero dac
FORCE_SYMBOL $183D VIA_port_a
COMMENT_LINE $183F now only y set, x to zero
FORCE_NO_SYMBOL $183F
COMMENT $1841 enable RAMP, disable mux
FORCE_SYMBOL $1841 VIA_port_b
COMMENT_LINE $1843 here we move down
COMMENT $1847 enable RAMP, enable mux
FORCE_SYMBOL $1847 VIA_port_b
COMMENT_LINE $1849 tricky, cutting y off while
COMMENT_LINE $1849 integrating, saves one switch of mux
COMMENT_LINE $1849 still b=$81
COMMENT $1849 disable RAMP, disable mux
FORCE_SYMBOL $1849 VIA_port_b
FORCE_SYMBOL $184B Vec_Text_Width
COMMENT_LINE $184E now finnished moving down
COMMENT $184E Send it to the D/A
FORCE_SYMBOL $184E VIA_port_a
FORCE_NO_SYMBOL $1850
COMMENT $1852 enable RAMP, disable mux
FORCE_SYMBOL $1852 VIA_port_b
COMMENT $1854 delay needed for drawing
COMMENT $1859 Get bitmap from chargen table
COMMENT $185B Save in shift register
FORCE_SYMBOL $185B VIA_shift_reg
COMMENT $185D Get next character
COMMENT $185F Go back if not terminator
COMMENT_LINE $1861 A=$81
COMMENT $1861 disable RAMP, disable mux
FORCE_SYMBOL $1861 VIA_port_b
FORCE_SYMBOL $1863 Char_Tableb3
COMMENT $1866 Get text height
FORCE_SYMBOL $1866 Vec_Text_Height
COMMENT_LINE $1869 now move down
COMMENT $1869 store 'height' to dac (y)
FORCE_SYMBOL $1869 VIA_port_a
COMMENT $186B disable RAMP, enable mux
FORCE_SYMBOL $186B VIA_port_b
COMMENT $186D disable RAMP, disable mux
FORCE_SYMBOL $186D VIA_port_b
COMMENT $186F zero dac
FORCE_SYMBOL $186F VIA_port_a
COMMENT_LINE $1871 now only y set, x to zero
FORCE_NO_SYMBOL $1871
COMMENT $1873 enable RAMP, disable mux
FORCE_SYMBOL $1873 VIA_port_b
COMMENT $1877 Get first character
COMMENT $1879 enable RAMP, enable mux
FORCE_SYMBOL $1879 VIA_port_b
COMMENT_LINE $187B tricky, cutting y off while
COMMENT_LINE $187B integrating, saves one switch of mux
COMMENT_LINE $187B still B=$81
COMMENT $187B disable RAMP, disable mux
FORCE_SYMBOL $187B VIA_port_b
FORCE_SYMBOL $187D Vec_Text_Width_neg
COMMENT_LINE $1880 now finnished moving down
COMMENT $1880 negative x speed
FORCE_SYMBOL $1880 VIA_port_a
FORCE_NO_SYMBOL $1882
COMMENT $1884 enable RAMP, disable mux
FORCE_SYMBOL $1884 VIA_port_b
COMMENT $1886 delay needed for drawing
COMMENT $188B Get bitmap from chargen table
COMMENT $188D Save in shift register
FORCE_SYMBOL $188D VIA_shift_reg
COMMENT $188F Get next character
COMMENT $1891 Go back if not terminator
COMMENT_LINE $1893 A=$81
COMMENT $1893 disable RAMP, disable mux
FORCE_SYMBOL $1893 VIA_port_b
FORCE_SYMBOL $1895 Char_Tablef4
COMMENT $1898 Get text height
FORCE_SYMBOL $1898 Vec_Text_Height
COMMENT_LINE $189B now move down
COMMENT $189B store 'height' to dac (y)
FORCE_SYMBOL $189B VIA_port_a
COMMENT $189D disable RAMP, enable mux
FORCE_SYMBOL $189D VIA_port_b
COMMENT $189F disable RAMP, disable mux
FORCE_SYMBOL $189F VIA_port_b
COMMENT $18A1 zero dac
FORCE_SYMBOL $18A1 VIA_port_a
COMMENT_LINE $18A3 now only y set, x to zero
FORCE_NO_SYMBOL $18A3
COMMENT $18A5 enable RAMP, disable mux
FORCE_SYMBOL $18A5 VIA_port_b
COMMENT_LINE $18A7 here we move down
COMMENT $18AB enable RAMP, enable mux
FORCE_SYMBOL $18AB VIA_port_b
COMMENT_LINE $18AD tricky, cutting y off while
COMMENT_LINE $18AD integrating, saves one switch of mux
COMMENT_LINE $18AD still b=$81
COMMENT $18AD disable RAMP, disable mux
FORCE_SYMBOL $18AD VIA_port_b
FORCE_SYMBOL $18AF Vec_Text_Width
COMMENT_LINE $18B2 now finnished moving down
COMMENT $18B2 Send it to the D/A
FORCE_SYMBOL $18B2 VIA_port_a
FORCE_NO_SYMBOL $18B4
COMMENT $18B6 enable RAMP, disable mux
FORCE_SYMBOL $18B6 VIA_port_b
COMMENT $18B8 delay needed for drawing
COMMENT $18BD Get bitmap from chargen table
COMMENT $18BF Save in shift register
FORCE_SYMBOL $18BF VIA_shift_reg
COMMENT $18C1 Get next character
COMMENT $18C3 Go back if not terminator
COMMENT_LINE $18C5 A=$81
COMMENT $18C5 disable RAMP, disable mux
FORCE_SYMBOL $18C5 VIA_port_b
FORCE_NO_SYMBOL $18C7
COMMENT $18C9 T1->PB7 enabled
FORCE_SYMBOL $18C9 VIA_aux_cntl
FORCE_SYMBOL $18CB VIA_shift_reg
FORCE_NO_SYMBOL $18CD
COMMENT $18CF /BLANK low and /ZERO low
FORCE_SYMBOL $18CF VIA_cntl
COMMENT $18D2 ------ DEBUG -----
FORCE_SYMBOL $18D2 TempValue2
COMMENT_LINE $18D5 LDA   #$7F                      ;
COMMENT_LINE $18D5 STA   VIA_t1_cnt_lo             ;Set scaling factor to be 7f
COMMENT_LINE $18D5 LDD   #$8080                    ;YX position of the score
COMMENT_LINE $18D5 LDU   #rnd_Score_tbl                ;u points to the score string
COMMENT_LINE $18D5 JSR   Print_Str_d               ;Print the score!
COMMENT_LINE $18D5 ;      *** DEBUG ***
COMMENT_LINE $18D5 ;*******************
COMMENT_LINE $18D5 ;*** Left value ***
COMMENT_LINE $18D5 ;*******************
COMMENT_LINE $18D5 LDX   #dbg1_tbl
COMMENT_LINE $18D5 JSR   Clear_Score
COMMENT_LINE $18D5 LDA   Plyr1LocationIndex
COMMENT_LINE $18D5 LDX   #dbg1_tbl
COMMENT_LINE $18D5 JSR   Add_Score_a
COMMENT_LINE $18D5 LDD   #$8090
COMMENT_LINE $18D5 LDU   #dbg1_tbl
COMMENT_LINE $18D5 JSR   Print_Str_d
COMMENT_LINE $18D5 ;*******************
COMMENT_LINE $18D5 ;*** Center value ***
COMMENT_LINE $18D5 ;*******************
FORCE_SYMBOL $18D5 dbg2_tbl
FORCE_SYMBOL $18D8 Clear_Score
FORCE_SYMBOL $18DB TempValue1
FORCE_SYMBOL $18DE dbg2_tbl
FORCE_SYMBOL $18E1 Add_Score_a
FORCE_NO_SYMBOL $18E4
FORCE_SYMBOL $18E7 dbg2_tbl
FORCE_SYMBOL $18EA Print_Str_d
COMMENT_LINE $18ED ;*******************
COMMENT_LINE $18ED ;*** Right value ***
COMMENT_LINE $18ED ;*******************
FORCE_SYMBOL $18ED dbg3_tbl
FORCE_SYMBOL $18F0 Clear_Score
FORCE_SYMBOL $18F3 TempValue2
FORCE_SYMBOL $18F6 dbg3_tbl
FORCE_SYMBOL $18F9 Add_Score_a
FORCE_NO_SYMBOL $18FC
FORCE_SYMBOL $18FF dbg3_tbl
FORCE_SYMBOL $1902 Print_Str_d
COMMENT_LINE $1905 ;      *** DEBUG END ***
COMMENT $1905 Return to caller
COMMENT_LINE $1906 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1906 setjoystick - Enables the Joysticks controllers. In this case, Joystick #2
COMMENT_LINE $1906 is disabled.
COMMENT_LINE $1906 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1906 JOYENS
COMMENT $1909 Enable Joystick1 X doamin1
FORCE_NO_SYMBOL $1909
COMMENT $190E Disable Joystick1 Y domain
COMMENT $1910 Disable Joystick2 X domain
COMMENT $1912 Disable Joystick2 Y doamin
COMMENT $1914 Return to the caller
COMMENT_LINE $1915 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1915 checkjoystick - Monitors Joystic1 movement and = the player's car postion
COMMENT_LINE $1915 and speed accordingly.
COMMENT_LINE $1915 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1915 CtrlType
COMMENT $191A Read joystick position
FORCE_SYMBOL $191A Joy_Digital
FORCE_SYMBOL $191D Plyr1LocationIndex
COMMENT $1920 A <- Xpos of joystick 1
FORCE_SYMBOL $1920 Vec_Joy_1_X
FORCE_SYMBOL $1927 Plyr1LocationIndex
FORCE_SYMBOL $192C Plyr1LocationIndex
COMMENT $1931 Call Driving Controller Routine, A will identify direction
FORCE_SYMBOL $1931 s_DrvCtrlr
FORCE_SYMBOL $1934 Plyr1LocationIndex
FORCE_SYMBOL $1937 Plyr1LocationIndex
FORCE_SYMBOL $193A s_RndCheckBtns
COMMENT $193D Return to the caller
COMMENT_LINE $193E >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $193E check_btns: Responsible for checking if a button was pressed. If so, checks
COMMENT_LINE $193E which button. Since only one button is used in the game and only
COMMENT_LINE $193E to exit a displayed menu, once button1 is pressed, the flag
COMMENT_LINE $193E (indicating end of the menu) is cleared.
COMMENT_LINE $193E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $193E Get Buttons status
FORCE_SYMBOL $193E Read_Btns
FORCE_NO_SYMBOL $1941
COMMENT_LINE $1944 STA   TempValue1		;------ DEBUG -----
FORCE_NO_SYMBOL $1944
COMMENT $1948 Check for button 4 (controller 1)
FORCE_NO_SYMBOL $1948
COMMENT $194C Display the ball...
FORCE_SYMBOL $194C s_StartSession
COMMENT $1950 Check for button 4 (controller 2)
FORCE_NO_SYMBOL $1950
COMMENT $1954 Display the ball...
FORCE_SYMBOL $1954 s_StartSession
COMMENT $1957 Return to the caller
COMMENT $1958 Skip this part is ball is already present
FORCE_SYMBOL $1958 Plyr1BallFlag
COMMENT_LINE $195B BNE   s_StartSession
FORCE_NO_SYMBOL $195D
COMMENT $195F Set Player1 ball flag
FORCE_SYMBOL $195F Plyr1BallFlag
COMMENT $1962 Initialize the X dimention pointer
FORCE_SYMBOL $1962 cos_entry_0
COMMENT $1965 Initialize the Y dimention pointer
FORCE_SYMBOL $1965 sin_entry_0
FORCE_SYMBOL $1969 Plyr1LocationIndex
COMMENT_LINE $196C SUBA  #$04			;Adjust the origin of the ball to paddle's center
COMMENT $196E Now, D contains the Y,X coordinates
COMMENT_LINE $1970 of the paddle
FORCE_SYMBOL $1970 Plyr1BallYpos
FORCE_SYMBOL $1973 l_BallMoveEntry
COMMENT $197A A is the offset within the BallMove table
FORCE_SYMBOL $197A Plyr1LocationIndex
COMMENT_LINE $197D SUBA  #$04			;Adjust the origin of the ball to paddle's center
COMMENT $197D Since each Entry takes 2 locations,divide
COMMENT $197E only by 2 (instead of 4), make sure A is even
FORCE_NO_SYMBOL $197E
FORCE_SYMBOL $1980 Plyr1BallIndex
COMMENT $1985 Now, D contains the values for ball movement
FORCE_SYMBOL $1987 Plyr1BallMoveY
FORCE_SYMBOL $198A RealTimeCounter
FORCE_NO_SYMBOL $198D
COMMENT $198F Make sure Plyr1 is displayed...
FORCE_SYMBOL $198F DrawPlyr1Flag
COMMENT_LINE $1993 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1993 ; A <- TIKS_PER_SECOND
COMMENT_LINE $1993 ; B <- current counter value, increamneted by 1 if a second passed.
COMMENT_LINE $1993 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1993 RealTimeCounter
COMMENT_LINE $1998 Here about 1 Sec passed since last match, update B
FORCE_SYMBOL $1998 RealTimeCounter
FORCE_SYMBOL $199B OPENING_CIR_DISTANCE
FORCE_SYMBOL $199E RealTimeCounter
COMMENT_LINE $19A2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $19A2 X -> ptr to Source
COMMENT_LINE $19A2 Y -> ptr to Destination
COMMENT_LINE $19A2 A -> Length
COMMENT_LINE $19A2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $19A2 B <- Source Data
COMMENT $19A4 [Destination] <- B
COMMENT $19A9 Don't forget entry (0)
COMMENT $19AD Return to caller
COMMENT_LINE $19AE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $19AE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $19B0 ------------------------------------
COMMENT_LINE $19B0 --- Missed ball sound generation ---
COMMENT_LINE $19B0 ------------------------------------
FORCE_SYMBOL $19B0 MissedSoundFlag
FORCE_SYMBOL $19B7 MissedSoundFlag
COMMENT $19BC B=current channel activity
FORCE_NO_SYMBOL $19BC
COMMENT $19BF Deactivate Tone+Noise1 (set)
FORCE_NO_SYMBOL $19BF
COMMENT $19C1 Sound reg. 0x07
FORCE_NO_SYMBOL $19C1
FORCE_SYMBOL $19C3 Sound_Byte
COMMENT $19C9 Noise value
FORCE_NO_SYMBOL $19C9
COMMENT $19CB Sound reg, 0x06
FORCE_NO_SYMBOL $19CB
FORCE_SYMBOL $19CD Sound_Byte
COMMENT $19D0 A<- current index to volume
FORCE_SYMBOL $19D0 MissedSoundFlag
COMMENT $19D3 X<- *ptr to explosion volume
FORCE_SYMBOL $19D3 l_MissedVolume
COMMENT $19D6 B<- current explosion volume
COMMENT $19D8 Sound reg. Volume 1
FORCE_NO_SYMBOL $19D8
FORCE_SYMBOL $19DA Sound_Byte
COMMENT $19DD B=current channel activity
FORCE_NO_SYMBOL $19DD
COMMENT $19E0 Activate Noise1 (reset)
FORCE_NO_SYMBOL $19E0
COMMENT $19E2 Sound reg. 0x07
FORCE_NO_SYMBOL $19E2
FORCE_SYMBOL $19E4 Sound_Byte
COMMENT_LINE $19E7 -----------------------------------------------
COMMENT_LINE $19E7 --- Hit (center or paddle) sound generation ---
COMMENT_LINE $19E7 -----------------------------------------------
FORCE_SYMBOL $19E7 HitSoundFlag
FORCE_SYMBOL $19EE HitSoundFlag
COMMENT $19F3 B=current channel activity
FORCE_NO_SYMBOL $19F3
COMMENT $19F6 Deactivate Tone+Noise2 (set)
FORCE_NO_SYMBOL $19F6
COMMENT $19F8 Sound reg. 0x07
FORCE_NO_SYMBOL $19F8
FORCE_SYMBOL $19FA Sound_Byte
FORCE_SYMBOL $19FF l_HitSound
FORCE_SYMBOL $1A02 HitSoundFlag
COMMENT $1A05 Tone 2 LSB value
COMMENT $1A07 Sound reg, 0x00
FORCE_NO_SYMBOL $1A07
FORCE_SYMBOL $1A09 Sound_Byte
COMMENT $1A0C Tone 2 MSB value
FORCE_NO_SYMBOL $1A0C
COMMENT $1A0E Sound reg. 0x01
FORCE_NO_SYMBOL $1A0E
FORCE_SYMBOL $1A10 Sound_Byte
COMMENT $1A13 Channel 2 Max. volume
FORCE_NO_SYMBOL $1A13
COMMENT $1A15 Sound reg. Volume 2
FORCE_NO_SYMBOL $1A15
FORCE_SYMBOL $1A17 Sound_Byte
COMMENT $1A1A B=current channel activity
FORCE_NO_SYMBOL $1A1A
COMMENT $1A1D Activate Tone2 (reset)
FORCE_NO_SYMBOL $1A1D
COMMENT $1A1F Deactivate Noise2 (set)
FORCE_NO_SYMBOL $1A1F
COMMENT $1A21 Sound reg. 0x07
FORCE_NO_SYMBOL $1A21
FORCE_SYMBOL $1A23 Sound_Byte
COMMENT_LINE $1A26 -------------------------------------
COMMENT_LINE $1A26 --- Level change sound generation ---
COMMENT_LINE $1A26 -------------------------------------
FORCE_SYMBOL $1A26 LevelSoundFlag
FORCE_SYMBOL $1A2D LevelSoundFlag
COMMENT $1A32 B=current channel activity
FORCE_NO_SYMBOL $1A32
COMMENT $1A35 Deactivate Tone+Noise3 (set)
FORCE_NO_SYMBOL $1A35
COMMENT $1A37 Sound reg. 0x07
FORCE_NO_SYMBOL $1A37
FORCE_SYMBOL $1A39 Sound_Byte
FORCE_SYMBOL $1A3E l_GoodSound
FORCE_SYMBOL $1A41 LevelSoundFlag
COMMENT $1A44 Tone 3 LSB value
COMMENT $1A46 Sound reg, 0x00
FORCE_NO_SYMBOL $1A46
FORCE_SYMBOL $1A48 Sound_Byte
COMMENT $1A4B Tone 3 MSB value
FORCE_NO_SYMBOL $1A4B
COMMENT $1A4D Sound reg. 0x01
FORCE_NO_SYMBOL $1A4D
FORCE_SYMBOL $1A4F Sound_Byte
COMMENT $1A52 Channel 3 Max. volume
FORCE_NO_SYMBOL $1A52
COMMENT $1A54 Sound reg. Volume 3
FORCE_NO_SYMBOL $1A54
FORCE_SYMBOL $1A56 Sound_Byte
COMMENT $1A59 B=current channel activity
FORCE_NO_SYMBOL $1A59
COMMENT $1A5C Activate Tone3 (reset)
FORCE_NO_SYMBOL $1A5C
COMMENT $1A5E Deactivate Noise3 (set)
FORCE_NO_SYMBOL $1A5E
COMMENT $1A60 Sound reg. 0x07
FORCE_NO_SYMBOL $1A60
FORCE_SYMBOL $1A62 Sound_Byte
COMMENT_LINE $1A65 LDA   fallSndFlag
COMMENT_LINE $1A65 BNE   l_FallSound
COMMENT_LINE $1A65 BRA   l_Check4BadSound
COMMENT_LINE $1A65 l_FallSound:
COMMENT_LINE $1A65 DEC   fallSndFlag
COMMENT_LINE $1A65 BNE   l_PlayFallSound
COMMENT_LINE $1A65 LDB   $C807                     ;B=current channel activity
COMMENT_LINE $1A65 ORB   #$24                      ;Deactivate Tone+Noise3 (set)
COMMENT_LINE $1A65 LDA   #$07                      ;Sound reg. 0x07
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 BRA   l_Check4BadSound
COMMENT_LINE $1A65 l_PlayFallSound:
COMMENT_LINE $1A65 LDB   fallSndFlag
COMMENT_LINE $1A65 ADDB  #$64
COMMENT_LINE $1A65 LDA   #$04                      ;Sound reg, 0x00
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDB   #$00                      ;Tone 3 MSB value
COMMENT_LINE $1A65 LDA   #$05                      ;Sound reg. 0x01
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDB   #$0F                      ;Channel 3 Max. volume
COMMENT_LINE $1A65 LDA   #$0A                      ;Sound reg. Volume 3
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDB   $C807                     ;B=current channel activity
COMMENT_LINE $1A65 ANDB  #$FB                      ;Activate Tone3 (reset)
COMMENT_LINE $1A65 ORB   #$20                      ;Deactivate Noise3 (set)
COMMENT_LINE $1A65 LDA   #$07                      ;Sound reg. 0x07
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 l_Check4BadSound:
COMMENT_LINE $1A65 LDA   badSndFlag
COMMENT_LINE $1A65 BNE   l_BadSound
COMMENT_LINE $1A65 BRA   l_CheckSoundExit
COMMENT_LINE $1A65 l_BadSound:
COMMENT_LINE $1A65 DEC   badSndFlag
COMMENT_LINE $1A65 BNE   l_PlayBadSound
COMMENT_LINE $1A65 LDB   $C807                     ;B=current channel activity
COMMENT_LINE $1A65 ORB   #$24                      ;Deactivate Tone+Noise3 (set)
COMMENT_LINE $1A65 LDA   #$07                      ;Sound reg. 0x07
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 BRA   l_CheckSoundExit
COMMENT_LINE $1A65 l_PlayBadSound:
COMMENT_LINE $1A65 LDB   #$FF                      ;Channel 3 constant tone
COMMENT_LINE $1A65 LDA   #$04                      ;Sound reg, 0x00
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDB   #$00                      ;Tone 3 MSB value
COMMENT_LINE $1A65 LDA   #$05                      ;Sound reg. 0x01
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDA   badSndFlag
COMMENT_LINE $1A65 LDX   #l_Bad_Volume
COMMENT_LINE $1A65 LDB   a,x                       ;Tone 3 LSB value
COMMENT_LINE $1A65 LDA   #$0A                      ;Sound reg. Volume 3
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A65 LDB   $C807                     ;B=current channel activity
COMMENT_LINE $1A65 ANDB  #$FB                      ;Activate Tone3 (reset)
COMMENT_LINE $1A65 ORB   #$20                      ;Deactivate Noise3 (set)
COMMENT_LINE $1A65 LDA   #$07                      ;Sound reg. 0x07
COMMENT_LINE $1A65 JSR   Sound_Byte
COMMENT_LINE $1A68 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1A68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1A8F >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1A8F <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1A8F Plyr1MissedFlag
COMMENT $1A94 Clear the Missed flag
FORCE_SYMBOL $1A94 Plyr1MissedFlag
COMMENT $1A97 Clear the Ball flag (no ball anymore)
FORCE_SYMBOL $1A97 Plyr1BallFlag
COMMENT $1A9A Make sure next ball goes inwards
FORCE_SYMBOL $1A9A Plyr1BallDirection
FORCE_SYMBOL $1A9D Plyr1TurnsNr
FORCE_SYMBOL $1AA2 s_RndGameOver
COMMENT_LINE $1AA6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1AA6 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1AA6 Plyr1CurrentScore
FORCE_NO_SYMBOL $1AA9
FORCE_SYMBOL $1AAD SWITCH_TO_INTERMIDIATE
FORCE_SYMBOL $1AB1 Plyr1LevelDelay
FORCE_SYMBOL $1AB4 INTERMIDIATE
COMMENT $1AB6 Don't change if not intermidiate...
FORCE_NO_SYMBOL $1AB8
FORCE_SYMBOL $1ABA LevelSoundFlag
FORCE_SYMBOL $1ABD Plyr1Level
FORCE_SYMBOL $1AC0 Plyr1LevelDelay
FORCE_SYMBOL $1AC4 Plyr1CurrentScore
FORCE_SYMBOL $1AC7 SWITCH_TO_EXPERT
FORCE_SYMBOL $1ACB Plyr1LevelDelay
FORCE_SYMBOL $1ACE EXPERT
COMMENT $1AD0 Don't change if not expert...
FORCE_NO_SYMBOL $1AD2
FORCE_SYMBOL $1AD4 LevelSoundFlag
FORCE_SYMBOL $1AD7 Plyr1Level
FORCE_SYMBOL $1ADA Plyr1LevelDelay
FORCE_SYMBOL $1ADE Plyr1CurrentScore
FORCE_SYMBOL $1AE1 SWITCH_TO_BLINK
FORCE_NO_SYMBOL $1AE5
FORCE_SYMBOL $1AE7 LevelSoundFlag
FORCE_SYMBOL $1AEA Plyr1Level
COMMENT $1AEE No more level checks
FORCE_SYMBOL $1AEE Plyr1LevelFlag
COMMENT_LINE $1AF2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1AF2 s_RndGameOver - End of game screen
COMMENT_LINE $1AF2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $1AF2 X points to current score table
FORCE_SYMBOL $1AF2 Plyr1ScoreTable
COMMENT $1AF5 U points to Vectrex HiScore table
FORCE_SYMBOL $1AF5 Vec_High_Score
COMMENT $1AF8 Compare and update HiScore table
FORCE_SYMBOL $1AF8 New_High_Score
COMMENT $1AFB reset the crt
FORCE_SYMBOL $1AFB Wait_Recal
FORCE_NO_SYMBOL $1AFE
COMMENT $1B00 Set scaling factor to be 7f
FORCE_SYMBOL $1B00 VIA_t1_cnt_lo
FORCE_SYMBOL $1B02 s_RndDrawBackground
FORCE_SYMBOL $1B05 s_RndDrawPlyr1
FORCE_SYMBOL $1B08 s_RndPrintInfo
COMMENT $1B0B ;Call Reset0Ref macro
FORCE_NO_SYMBOL $1B0B
COMMENT_LINE $1B0E STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1B0E STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1B0E LDD   #0x0302;
COMMENT_LINE $1B0E CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1B0E STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1B0E STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1B0E STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1B0E LDB   #0x01;
COMMENT_LINE $1B0E STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1B0E LDB    #0x00CC;
COMMENT $1B0E 0x0C;
FORCE_SYMBOL $1B0E VIA_cntl
FORCE_SYMBOL $1B10 l_RndHighScoreMsg
COMMENT_LINE $1B15 Moveto_d_7F start
FORCE_SYMBOL $1B15 VIA_port_a
FORCE_NO_SYMBOL $1B17
FORCE_SYMBOL $1B19 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1B1B
FORCE_SYMBOL $1B1D VIA_cntl
FORCE_SYMBOL $1B20 VIA_port_b
FORCE_SYMBOL $1B22 VIA_shift_reg
FORCE_SYMBOL $1B24 VIA_port_b
FORCE_SYMBOL $1B26 VIA_port_a
FORCE_SYMBOL $1B28 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1B2A
FORCE_SYMBOL $1B2D VIA_int_flags
FORCE_SYMBOL $1B31 VIA_port_a
COMMENT_LINE $1B33 U=String pointer to first $81
FORCE_NO_SYMBOL $1B33
COMMENT $1B35 Clear D/A output
FORCE_SYMBOL $1B35 VIA_port_a
COMMENT $1B37 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $1B37 VIA_aux_cntl
FORCE_SYMBOL $1B39 Char_Tablef1
FORCE_NO_SYMBOL $1B3C
COMMENT $1B3E enable mux, set y to 0 disable ramp
FORCE_SYMBOL $1B3E VIA_port_b
COMMENT $1B40 disable RAMP, disable mux
FORCE_SYMBOL $1B40 VIA_port_b
COMMENT $1B44 Get text width
FORCE_SYMBOL $1B44 Vec_Text_Width
FORCE_SYMBOL $1B48 Vec_Text_Width_neg
COMMENT $1B4E Send it to the D/A
FORCE_SYMBOL $1B4E VIA_port_a
FORCE_NO_SYMBOL $1B50
COMMENT $1B52 enable RAMP, disable mux
FORCE_SYMBOL $1B52 VIA_port_b
COMMENT $1B54 delay needed for drawing
COMMENT $1B59 Get bitmap from chargen table
COMMENT $1B5B Save in shift register
FORCE_SYMBOL $1B5B VIA_shift_reg
COMMENT $1B5D Get next character
COMMENT $1B5F Go back if not terminator
COMMENT_LINE $1B61 A=$81
COMMENT $1B61 disable RAMP, disable mux
FORCE_SYMBOL $1B61 VIA_port_b
FORCE_SYMBOL $1B63 Char_Tableb1
COMMENT $1B66 Get text height
FORCE_SYMBOL $1B66 Vec_Text_Height
COMMENT_LINE $1B69 now move down
COMMENT $1B69 store 'height' to dac (y)
FORCE_SYMBOL $1B69 VIA_port_a
COMMENT $1B6B disable RAMP, enable mux
FORCE_SYMBOL $1B6B VIA_port_b
COMMENT $1B6D disable RAMP, disable mux
FORCE_SYMBOL $1B6D VIA_port_b
COMMENT $1B6F zero dac
FORCE_SYMBOL $1B6F VIA_port_a
COMMENT_LINE $1B71 now only y set, x to zero
FORCE_NO_SYMBOL $1B71
COMMENT $1B73 enable RAMP, disable mux
FORCE_SYMBOL $1B73 VIA_port_b
COMMENT $1B77 Get first character
COMMENT $1B79 enable RAMP, enable mux
FORCE_SYMBOL $1B79 VIA_port_b
COMMENT_LINE $1B7B tricky, cutting y off while
COMMENT_LINE $1B7B integrating, saves one switch of mux
COMMENT_LINE $1B7B still B=$81
COMMENT $1B7B disable RAMP, disable mux
FORCE_SYMBOL $1B7B VIA_port_b
FORCE_SYMBOL $1B7D Vec_Text_Width_neg
COMMENT_LINE $1B80 now finnished moving down
COMMENT $1B80 negative x speed
FORCE_SYMBOL $1B80 VIA_port_a
FORCE_NO_SYMBOL $1B82
COMMENT $1B84 enable RAMP, disable mux
FORCE_SYMBOL $1B84 VIA_port_b
COMMENT $1B86 delay needed for drawing
COMMENT $1B8B Get bitmap from chargen table
COMMENT $1B8D Save in shift register
FORCE_SYMBOL $1B8D VIA_shift_reg
COMMENT $1B8F Get next character
COMMENT $1B91 Go back if not terminator
COMMENT_LINE $1B93 A=$81
COMMENT $1B93 disable RAMP, disable mux
FORCE_SYMBOL $1B93 VIA_port_b
FORCE_SYMBOL $1B95 Char_Tablef2
COMMENT $1B98 Get text height
FORCE_SYMBOL $1B98 Vec_Text_Height
COMMENT_LINE $1B9B now move down
COMMENT $1B9B store 'height' to dac (y)
FORCE_SYMBOL $1B9B VIA_port_a
COMMENT $1B9D disable RAMP, enable mux
FORCE_SYMBOL $1B9D VIA_port_b
COMMENT $1B9F disable RAMP, disable mux
FORCE_SYMBOL $1B9F VIA_port_b
COMMENT $1BA1 zero dac
FORCE_SYMBOL $1BA1 VIA_port_a
COMMENT_LINE $1BA3 now only y set, x to zero
FORCE_NO_SYMBOL $1BA3
COMMENT $1BA5 enable RAMP, disable mux
FORCE_SYMBOL $1BA5 VIA_port_b
COMMENT_LINE $1BA7 here we move down
COMMENT $1BAB enable RAMP, enable mux
FORCE_SYMBOL $1BAB VIA_port_b
COMMENT_LINE $1BAD tricky, cutting y off while
COMMENT_LINE $1BAD integrating, saves one switch of mux
COMMENT_LINE $1BAD still b=$81
COMMENT $1BAD disable RAMP, disable mux
FORCE_SYMBOL $1BAD VIA_port_b
FORCE_SYMBOL $1BAF Vec_Text_Width
COMMENT_LINE $1BB2 now finnished moving down
COMMENT $1BB2 Send it to the D/A
FORCE_SYMBOL $1BB2 VIA_port_a
FORCE_NO_SYMBOL $1BB4
COMMENT $1BB6 enable RAMP, disable mux
FORCE_SYMBOL $1BB6 VIA_port_b
COMMENT $1BB8 delay needed for drawing
COMMENT $1BBD Get bitmap from chargen table
COMMENT $1BBF Save in shift register
FORCE_SYMBOL $1BBF VIA_shift_reg
COMMENT $1BC1 Get next character
COMMENT $1BC3 Go back if not terminator
COMMENT_LINE $1BC5 A=$81
COMMENT $1BC5 disable RAMP, disable mux
FORCE_SYMBOL $1BC5 VIA_port_b
FORCE_SYMBOL $1BC7 Char_Tableb2
COMMENT $1BCA Get text height
FORCE_SYMBOL $1BCA Vec_Text_Height
COMMENT_LINE $1BCD now move down
COMMENT $1BCD store 'height' to dac (y)
FORCE_SYMBOL $1BCD VIA_port_a
COMMENT $1BCF disable RAMP, enable mux
FORCE_SYMBOL $1BCF VIA_port_b
COMMENT $1BD1 disable RAMP, disable mux
FORCE_SYMBOL $1BD1 VIA_port_b
COMMENT $1BD3 zero dac
FORCE_SYMBOL $1BD3 VIA_port_a
COMMENT_LINE $1BD5 now only y set, x to zero
FORCE_NO_SYMBOL $1BD5
COMMENT $1BD7 enable RAMP, disable mux
FORCE_SYMBOL $1BD7 VIA_port_b
COMMENT $1BDB Get first character
COMMENT $1BDD enable RAMP, enable mux
FORCE_SYMBOL $1BDD VIA_port_b
COMMENT_LINE $1BDF tricky, cutting y off while
COMMENT_LINE $1BDF integrating, saves one switch of mux
COMMENT_LINE $1BDF still B=$81
COMMENT $1BDF disable RAMP, disable mux
FORCE_SYMBOL $1BDF VIA_port_b
FORCE_SYMBOL $1BE1 Vec_Text_Width_neg
COMMENT_LINE $1BE4 now finnished moving down
COMMENT $1BE4 negative x speed
FORCE_SYMBOL $1BE4 VIA_port_a
FORCE_NO_SYMBOL $1BE6
COMMENT $1BE8 enable RAMP, disable mux
FORCE_SYMBOL $1BE8 VIA_port_b
COMMENT $1BEA delay needed for drawing
COMMENT $1BEF Get bitmap from chargen table
COMMENT $1BF1 Save in shift register
FORCE_SYMBOL $1BF1 VIA_shift_reg
COMMENT $1BF3 Get next character
COMMENT $1BF5 Go back if not terminator
COMMENT_LINE $1BF7 A=$81
COMMENT $1BF7 disable RAMP, disable mux
FORCE_SYMBOL $1BF7 VIA_port_b
FORCE_SYMBOL $1BF9 Char_Tablef3
COMMENT $1BFC Get text height
FORCE_SYMBOL $1BFC Vec_Text_Height
COMMENT_LINE $1BFF now move down
COMMENT $1BFF store 'height' to dac (y)
FORCE_SYMBOL $1BFF VIA_port_a
COMMENT $1C01 disable RAMP, enable mux
FORCE_SYMBOL $1C01 VIA_port_b
COMMENT $1C03 disable RAMP, disable mux
FORCE_SYMBOL $1C03 VIA_port_b
COMMENT $1C05 zero dac
FORCE_SYMBOL $1C05 VIA_port_a
COMMENT_LINE $1C07 now only y set, x to zero
FORCE_NO_SYMBOL $1C07
COMMENT $1C09 enable RAMP, disable mux
FORCE_SYMBOL $1C09 VIA_port_b
COMMENT_LINE $1C0B here we move down
COMMENT $1C0F enable RAMP, enable mux
FORCE_SYMBOL $1C0F VIA_port_b
COMMENT_LINE $1C11 tricky, cutting y off while
COMMENT_LINE $1C11 integrating, saves one switch of mux
COMMENT_LINE $1C11 still b=$81
COMMENT $1C11 disable RAMP, disable mux
FORCE_SYMBOL $1C11 VIA_port_b
FORCE_SYMBOL $1C13 Vec_Text_Width
COMMENT_LINE $1C16 now finnished moving down
COMMENT $1C16 Send it to the D/A
FORCE_SYMBOL $1C16 VIA_port_a
FORCE_NO_SYMBOL $1C18
COMMENT $1C1A enable RAMP, disable mux
FORCE_SYMBOL $1C1A VIA_port_b
COMMENT $1C1C delay needed for drawing
COMMENT $1C21 Get bitmap from chargen table
COMMENT $1C23 Save in shift register
FORCE_SYMBOL $1C23 VIA_shift_reg
COMMENT $1C25 Get next character
COMMENT $1C27 Go back if not terminator
COMMENT_LINE $1C29 A=$81
COMMENT $1C29 disable RAMP, disable mux
FORCE_SYMBOL $1C29 VIA_port_b
FORCE_SYMBOL $1C2B Char_Tableb3
COMMENT $1C2E Get text height
FORCE_SYMBOL $1C2E Vec_Text_Height
COMMENT_LINE $1C31 now move down
COMMENT $1C31 store 'height' to dac (y)
FORCE_SYMBOL $1C31 VIA_port_a
COMMENT $1C33 disable RAMP, enable mux
FORCE_SYMBOL $1C33 VIA_port_b
COMMENT $1C35 disable RAMP, disable mux
FORCE_SYMBOL $1C35 VIA_port_b
COMMENT $1C37 zero dac
FORCE_SYMBOL $1C37 VIA_port_a
COMMENT_LINE $1C39 now only y set, x to zero
FORCE_NO_SYMBOL $1C39
COMMENT $1C3B enable RAMP, disable mux
FORCE_SYMBOL $1C3B VIA_port_b
COMMENT $1C3F Get first character
COMMENT $1C41 enable RAMP, enable mux
FORCE_SYMBOL $1C41 VIA_port_b
COMMENT_LINE $1C43 tricky, cutting y off while
COMMENT_LINE $1C43 integrating, saves one switch of mux
COMMENT_LINE $1C43 still B=$81
COMMENT $1C43 disable RAMP, disable mux
FORCE_SYMBOL $1C43 VIA_port_b
FORCE_SYMBOL $1C45 Vec_Text_Width_neg
COMMENT_LINE $1C48 now finnished moving down
COMMENT $1C48 negative x speed
FORCE_SYMBOL $1C48 VIA_port_a
FORCE_NO_SYMBOL $1C4A
COMMENT $1C4C enable RAMP, disable mux
FORCE_SYMBOL $1C4C VIA_port_b
COMMENT $1C4E delay needed for drawing
COMMENT $1C53 Get bitmap from chargen table
COMMENT $1C55 Save in shift register
FORCE_SYMBOL $1C55 VIA_shift_reg
COMMENT $1C57 Get next character
COMMENT $1C59 Go back if not terminator
COMMENT_LINE $1C5B A=$81
COMMENT $1C5B disable RAMP, disable mux
FORCE_SYMBOL $1C5B VIA_port_b
FORCE_SYMBOL $1C5D Char_Tablef4
COMMENT $1C60 Get text height
FORCE_SYMBOL $1C60 Vec_Text_Height
COMMENT_LINE $1C63 now move down
COMMENT $1C63 store 'height' to dac (y)
FORCE_SYMBOL $1C63 VIA_port_a
COMMENT $1C65 disable RAMP, enable mux
FORCE_SYMBOL $1C65 VIA_port_b
COMMENT $1C67 disable RAMP, disable mux
FORCE_SYMBOL $1C67 VIA_port_b
COMMENT $1C69 zero dac
FORCE_SYMBOL $1C69 VIA_port_a
COMMENT_LINE $1C6B now only y set, x to zero
FORCE_NO_SYMBOL $1C6B
COMMENT $1C6D enable RAMP, disable mux
FORCE_SYMBOL $1C6D VIA_port_b
COMMENT_LINE $1C6F here we move down
COMMENT $1C73 enable RAMP, enable mux
FORCE_SYMBOL $1C73 VIA_port_b
COMMENT_LINE $1C75 tricky, cutting y off while
COMMENT_LINE $1C75 integrating, saves one switch of mux
COMMENT_LINE $1C75 still b=$81
COMMENT $1C75 disable RAMP, disable mux
FORCE_SYMBOL $1C75 VIA_port_b
FORCE_SYMBOL $1C77 Vec_Text_Width
COMMENT_LINE $1C7A now finnished moving down
COMMENT $1C7A Send it to the D/A
FORCE_SYMBOL $1C7A VIA_port_a
FORCE_NO_SYMBOL $1C7C
COMMENT $1C7E enable RAMP, disable mux
FORCE_SYMBOL $1C7E VIA_port_b
COMMENT $1C80 delay needed for drawing
COMMENT $1C85 Get bitmap from chargen table
COMMENT $1C87 Save in shift register
FORCE_SYMBOL $1C87 VIA_shift_reg
COMMENT $1C89 Get next character
COMMENT $1C8B Go back if not terminator
COMMENT_LINE $1C8D A=$81
COMMENT $1C8D disable RAMP, disable mux
FORCE_SYMBOL $1C8D VIA_port_b
FORCE_NO_SYMBOL $1C8F
COMMENT $1C91 T1->PB7 enabled
FORCE_SYMBOL $1C91 VIA_aux_cntl
FORCE_SYMBOL $1C93 VIA_shift_reg
FORCE_NO_SYMBOL $1C95
COMMENT $1C97 /BLANK low and /ZERO low
FORCE_SYMBOL $1C97 VIA_cntl
COMMENT $1C99 ;Call Reset0Ref macro
FORCE_NO_SYMBOL $1C99
COMMENT_LINE $1C9C STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1C9C STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1C9C LDD   #0x0302;
COMMENT_LINE $1C9C CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1C9C STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1C9C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1C9C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1C9C LDB   #0x01;
COMMENT_LINE $1C9C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1C9C LDB    #0x00CC;
COMMENT $1C9C 0x0C;
FORCE_SYMBOL $1C9C VIA_cntl
COMMENT $1C9E Set D to the (Y,X) of the HiScore
FORCE_SYMBOL $1C9E HSCORE_POS
COMMENT $1CA1 U Points to the HiScore table
FORCE_SYMBOL $1CA1 RndHiScoreTable
COMMENT $1CA4 U Points to the HiScore table
FORCE_SYMBOL $1CA4 Vec_High_Score
COMMENT_LINE $1CA7 LDU   #Plyr1ScoreTable          ;X points to current score table
COMMENT $1CA7 Print the HighScore on the screen
FORCE_SYMBOL $1CA7 Print_Str_d
COMMENT_LINE $1CAA JSR   Reset0Ref
COMMENT $1CAA ;Call Reset0Ref macro
FORCE_NO_SYMBOL $1CAA
COMMENT_LINE $1CAD STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1CAD STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1CAD LDD   #0x0302;
COMMENT_LINE $1CAD CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1CAD STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1CAD STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1CAD STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1CAD LDB   #0x01;
COMMENT_LINE $1CAD STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1CAD LDB    #0x00CC;
COMMENT $1CAD 0x0C;
FORCE_SYMBOL $1CAD VIA_cntl
FORCE_SYMBOL $1CAF l_RndGameOverMsg
COMMENT_LINE $1CB4 Moveto_d_7F start
FORCE_SYMBOL $1CB4 VIA_port_a
FORCE_NO_SYMBOL $1CB6
FORCE_SYMBOL $1CB8 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1CBA
FORCE_SYMBOL $1CBC VIA_cntl
FORCE_SYMBOL $1CBF VIA_port_b
FORCE_SYMBOL $1CC1 VIA_shift_reg
FORCE_SYMBOL $1CC3 VIA_port_b
FORCE_SYMBOL $1CC5 VIA_port_a
FORCE_SYMBOL $1CC7 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1CC9
FORCE_SYMBOL $1CCC VIA_int_flags
FORCE_SYMBOL $1CD0 VIA_port_a
COMMENT_LINE $1CD2 U=String pointer to first $81
FORCE_NO_SYMBOL $1CD2
COMMENT $1CD4 Clear D/A output
FORCE_SYMBOL $1CD4 VIA_port_a
COMMENT $1CD6 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $1CD6 VIA_aux_cntl
FORCE_SYMBOL $1CD8 Char_Tablef1
FORCE_NO_SYMBOL $1CDB
COMMENT $1CDD enable mux, set y to 0 disable ramp
FORCE_SYMBOL $1CDD VIA_port_b
COMMENT $1CDF disable RAMP, disable mux
FORCE_SYMBOL $1CDF VIA_port_b
COMMENT $1CE3 Get text width
FORCE_SYMBOL $1CE3 Vec_Text_Width
FORCE_SYMBOL $1CE7 Vec_Text_Width_neg
COMMENT $1CED Send it to the D/A
FORCE_SYMBOL $1CED VIA_port_a
FORCE_NO_SYMBOL $1CEF
COMMENT $1CF1 enable RAMP, disable mux
FORCE_SYMBOL $1CF1 VIA_port_b
COMMENT $1CF3 delay needed for drawing
COMMENT $1CF8 Get bitmap from chargen table
COMMENT $1CFA Save in shift register
FORCE_SYMBOL $1CFA VIA_shift_reg
COMMENT $1CFC Get next character
COMMENT $1CFE Go back if not terminator
COMMENT_LINE $1D00 A=$81
COMMENT $1D00 disable RAMP, disable mux
FORCE_SYMBOL $1D00 VIA_port_b
FORCE_SYMBOL $1D02 Char_Tableb1
COMMENT $1D05 Get text height
FORCE_SYMBOL $1D05 Vec_Text_Height
COMMENT_LINE $1D08 now move down
COMMENT $1D08 store 'height' to dac (y)
FORCE_SYMBOL $1D08 VIA_port_a
COMMENT $1D0A disable RAMP, enable mux
FORCE_SYMBOL $1D0A VIA_port_b
COMMENT $1D0C disable RAMP, disable mux
FORCE_SYMBOL $1D0C VIA_port_b
COMMENT $1D0E zero dac
FORCE_SYMBOL $1D0E VIA_port_a
COMMENT_LINE $1D10 now only y set, x to zero
FORCE_NO_SYMBOL $1D10
COMMENT $1D12 enable RAMP, disable mux
FORCE_SYMBOL $1D12 VIA_port_b
COMMENT $1D16 Get first character
COMMENT $1D18 enable RAMP, enable mux
FORCE_SYMBOL $1D18 VIA_port_b
COMMENT_LINE $1D1A tricky, cutting y off while
COMMENT_LINE $1D1A integrating, saves one switch of mux
COMMENT_LINE $1D1A still B=$81
COMMENT $1D1A disable RAMP, disable mux
FORCE_SYMBOL $1D1A VIA_port_b
FORCE_SYMBOL $1D1C Vec_Text_Width_neg
COMMENT_LINE $1D1F now finnished moving down
COMMENT $1D1F negative x speed
FORCE_SYMBOL $1D1F VIA_port_a
FORCE_NO_SYMBOL $1D21
COMMENT $1D23 enable RAMP, disable mux
FORCE_SYMBOL $1D23 VIA_port_b
COMMENT $1D25 delay needed for drawing
COMMENT $1D2A Get bitmap from chargen table
COMMENT $1D2C Save in shift register
FORCE_SYMBOL $1D2C VIA_shift_reg
COMMENT $1D2E Get next character
COMMENT $1D30 Go back if not terminator
COMMENT_LINE $1D32 A=$81
COMMENT $1D32 disable RAMP, disable mux
FORCE_SYMBOL $1D32 VIA_port_b
FORCE_SYMBOL $1D34 Char_Tablef2
COMMENT $1D37 Get text height
FORCE_SYMBOL $1D37 Vec_Text_Height
COMMENT_LINE $1D3A now move down
COMMENT $1D3A store 'height' to dac (y)
FORCE_SYMBOL $1D3A VIA_port_a
COMMENT $1D3C disable RAMP, enable mux
FORCE_SYMBOL $1D3C VIA_port_b
COMMENT $1D3E disable RAMP, disable mux
FORCE_SYMBOL $1D3E VIA_port_b
COMMENT $1D40 zero dac
FORCE_SYMBOL $1D40 VIA_port_a
COMMENT_LINE $1D42 now only y set, x to zero
FORCE_NO_SYMBOL $1D42
COMMENT $1D44 enable RAMP, disable mux
FORCE_SYMBOL $1D44 VIA_port_b
COMMENT_LINE $1D46 here we move down
COMMENT $1D4A enable RAMP, enable mux
FORCE_SYMBOL $1D4A VIA_port_b
COMMENT_LINE $1D4C tricky, cutting y off while
COMMENT_LINE $1D4C integrating, saves one switch of mux
COMMENT_LINE $1D4C still b=$81
COMMENT $1D4C disable RAMP, disable mux
FORCE_SYMBOL $1D4C VIA_port_b
FORCE_SYMBOL $1D4E Vec_Text_Width
COMMENT_LINE $1D51 now finnished moving down
COMMENT $1D51 Send it to the D/A
FORCE_SYMBOL $1D51 VIA_port_a
FORCE_NO_SYMBOL $1D53
COMMENT $1D55 enable RAMP, disable mux
FORCE_SYMBOL $1D55 VIA_port_b
COMMENT $1D57 delay needed for drawing
COMMENT $1D5C Get bitmap from chargen table
COMMENT $1D5E Save in shift register
FORCE_SYMBOL $1D5E VIA_shift_reg
COMMENT $1D60 Get next character
COMMENT $1D62 Go back if not terminator
COMMENT_LINE $1D64 A=$81
COMMENT $1D64 disable RAMP, disable mux
FORCE_SYMBOL $1D64 VIA_port_b
FORCE_SYMBOL $1D66 Char_Tableb2
COMMENT $1D69 Get text height
FORCE_SYMBOL $1D69 Vec_Text_Height
COMMENT_LINE $1D6C now move down
COMMENT $1D6C store 'height' to dac (y)
FORCE_SYMBOL $1D6C VIA_port_a
COMMENT $1D6E disable RAMP, enable mux
FORCE_SYMBOL $1D6E VIA_port_b
COMMENT $1D70 disable RAMP, disable mux
FORCE_SYMBOL $1D70 VIA_port_b
COMMENT $1D72 zero dac
FORCE_SYMBOL $1D72 VIA_port_a
COMMENT_LINE $1D74 now only y set, x to zero
FORCE_NO_SYMBOL $1D74
COMMENT $1D76 enable RAMP, disable mux
FORCE_SYMBOL $1D76 VIA_port_b
COMMENT $1D7A Get first character
COMMENT $1D7C enable RAMP, enable mux
FORCE_SYMBOL $1D7C VIA_port_b
COMMENT_LINE $1D7E tricky, cutting y off while
COMMENT_LINE $1D7E integrating, saves one switch of mux
COMMENT_LINE $1D7E still B=$81
COMMENT $1D7E disable RAMP, disable mux
FORCE_SYMBOL $1D7E VIA_port_b
FORCE_SYMBOL $1D80 Vec_Text_Width_neg
COMMENT_LINE $1D83 now finnished moving down
COMMENT $1D83 negative x speed
FORCE_SYMBOL $1D83 VIA_port_a
FORCE_NO_SYMBOL $1D85
COMMENT $1D87 enable RAMP, disable mux
FORCE_SYMBOL $1D87 VIA_port_b
COMMENT $1D89 delay needed for drawing
COMMENT $1D8E Get bitmap from chargen table
COMMENT $1D90 Save in shift register
FORCE_SYMBOL $1D90 VIA_shift_reg
COMMENT $1D92 Get next character
COMMENT $1D94 Go back if not terminator
COMMENT_LINE $1D96 A=$81
COMMENT $1D96 disable RAMP, disable mux
FORCE_SYMBOL $1D96 VIA_port_b
FORCE_SYMBOL $1D98 Char_Tablef3
COMMENT $1D9B Get text height
FORCE_SYMBOL $1D9B Vec_Text_Height
COMMENT_LINE $1D9E now move down
COMMENT $1D9E store 'height' to dac (y)
FORCE_SYMBOL $1D9E VIA_port_a
COMMENT $1DA0 disable RAMP, enable mux
FORCE_SYMBOL $1DA0 VIA_port_b
COMMENT $1DA2 disable RAMP, disable mux
FORCE_SYMBOL $1DA2 VIA_port_b
COMMENT $1DA4 zero dac
FORCE_SYMBOL $1DA4 VIA_port_a
COMMENT_LINE $1DA6 now only y set, x to zero
FORCE_NO_SYMBOL $1DA6
COMMENT $1DA8 enable RAMP, disable mux
FORCE_SYMBOL $1DA8 VIA_port_b
COMMENT_LINE $1DAA here we move down
COMMENT $1DAE enable RAMP, enable mux
FORCE_SYMBOL $1DAE VIA_port_b
COMMENT_LINE $1DB0 tricky, cutting y off while
COMMENT_LINE $1DB0 integrating, saves one switch of mux
COMMENT_LINE $1DB0 still b=$81
COMMENT $1DB0 disable RAMP, disable mux
FORCE_SYMBOL $1DB0 VIA_port_b
FORCE_SYMBOL $1DB2 Vec_Text_Width
COMMENT_LINE $1DB5 now finnished moving down
COMMENT $1DB5 Send it to the D/A
FORCE_SYMBOL $1DB5 VIA_port_a
FORCE_NO_SYMBOL $1DB7
COMMENT $1DB9 enable RAMP, disable mux
FORCE_SYMBOL $1DB9 VIA_port_b
COMMENT $1DBB delay needed for drawing
COMMENT $1DC0 Get bitmap from chargen table
COMMENT $1DC2 Save in shift register
FORCE_SYMBOL $1DC2 VIA_shift_reg
COMMENT $1DC4 Get next character
COMMENT $1DC6 Go back if not terminator
COMMENT_LINE $1DC8 A=$81
COMMENT $1DC8 disable RAMP, disable mux
FORCE_SYMBOL $1DC8 VIA_port_b
FORCE_SYMBOL $1DCA Char_Tableb3
COMMENT $1DCD Get text height
FORCE_SYMBOL $1DCD Vec_Text_Height
COMMENT_LINE $1DD0 now move down
COMMENT $1DD0 store 'height' to dac (y)
FORCE_SYMBOL $1DD0 VIA_port_a
COMMENT $1DD2 disable RAMP, enable mux
FORCE_SYMBOL $1DD2 VIA_port_b
COMMENT $1DD4 disable RAMP, disable mux
FORCE_SYMBOL $1DD4 VIA_port_b
COMMENT $1DD6 zero dac
FORCE_SYMBOL $1DD6 VIA_port_a
COMMENT_LINE $1DD8 now only y set, x to zero
FORCE_NO_SYMBOL $1DD8
COMMENT $1DDA enable RAMP, disable mux
FORCE_SYMBOL $1DDA VIA_port_b
COMMENT $1DDE Get first character
COMMENT $1DE0 enable RAMP, enable mux
FORCE_SYMBOL $1DE0 VIA_port_b
COMMENT_LINE $1DE2 tricky, cutting y off while
COMMENT_LINE $1DE2 integrating, saves one switch of mux
COMMENT_LINE $1DE2 still B=$81
COMMENT $1DE2 disable RAMP, disable mux
FORCE_SYMBOL $1DE2 VIA_port_b
FORCE_SYMBOL $1DE4 Vec_Text_Width_neg
COMMENT_LINE $1DE7 now finnished moving down
COMMENT $1DE7 negative x speed
FORCE_SYMBOL $1DE7 VIA_port_a
FORCE_NO_SYMBOL $1DE9
COMMENT $1DEB enable RAMP, disable mux
FORCE_SYMBOL $1DEB VIA_port_b
COMMENT $1DED delay needed for drawing
COMMENT $1DF2 Get bitmap from chargen table
COMMENT $1DF4 Save in shift register
FORCE_SYMBOL $1DF4 VIA_shift_reg
COMMENT $1DF6 Get next character
COMMENT $1DF8 Go back if not terminator
COMMENT_LINE $1DFA A=$81
COMMENT $1DFA disable RAMP, disable mux
FORCE_SYMBOL $1DFA VIA_port_b
FORCE_SYMBOL $1DFC Char_Tablef4
COMMENT $1DFF Get text height
FORCE_SYMBOL $1DFF Vec_Text_Height
COMMENT_LINE $1E02 now move down
COMMENT $1E02 store 'height' to dac (y)
FORCE_SYMBOL $1E02 VIA_port_a
COMMENT $1E04 disable RAMP, enable mux
FORCE_SYMBOL $1E04 VIA_port_b
COMMENT $1E06 disable RAMP, disable mux
FORCE_SYMBOL $1E06 VIA_port_b
COMMENT $1E08 zero dac
FORCE_SYMBOL $1E08 VIA_port_a
COMMENT_LINE $1E0A now only y set, x to zero
FORCE_NO_SYMBOL $1E0A
COMMENT $1E0C enable RAMP, disable mux
FORCE_SYMBOL $1E0C VIA_port_b
COMMENT_LINE $1E0E here we move down
COMMENT $1E12 enable RAMP, enable mux
FORCE_SYMBOL $1E12 VIA_port_b
COMMENT_LINE $1E14 tricky, cutting y off while
COMMENT_LINE $1E14 integrating, saves one switch of mux
COMMENT_LINE $1E14 still b=$81
COMMENT $1E14 disable RAMP, disable mux
FORCE_SYMBOL $1E14 VIA_port_b
FORCE_SYMBOL $1E16 Vec_Text_Width
COMMENT_LINE $1E19 now finnished moving down
COMMENT $1E19 Send it to the D/A
FORCE_SYMBOL $1E19 VIA_port_a
FORCE_NO_SYMBOL $1E1B
COMMENT $1E1D enable RAMP, disable mux
FORCE_SYMBOL $1E1D VIA_port_b
COMMENT $1E1F delay needed for drawing
COMMENT $1E24 Get bitmap from chargen table
COMMENT $1E26 Save in shift register
FORCE_SYMBOL $1E26 VIA_shift_reg
COMMENT $1E28 Get next character
COMMENT $1E2A Go back if not terminator
COMMENT_LINE $1E2C A=$81
COMMENT $1E2C disable RAMP, disable mux
FORCE_SYMBOL $1E2C VIA_port_b
FORCE_NO_SYMBOL $1E2E
COMMENT $1E30 T1->PB7 enabled
FORCE_SYMBOL $1E30 VIA_aux_cntl
FORCE_SYMBOL $1E32 VIA_shift_reg
FORCE_NO_SYMBOL $1E34
COMMENT $1E36 /BLANK low and /ZERO low
FORCE_SYMBOL $1E36 VIA_cntl
COMMENT $1E38 Get Buttons status
FORCE_SYMBOL $1E38 Read_Btns
COMMENT $1E3B If no button pressed,
FORCE_NO_SYMBOL $1E3B
COMMENT $1E3D Goto GameOver_loop...
COMMENT $1E41 SoftReset to the system
FORCE_SYMBOL $1E41 Cold_Start
COMMENT_LINE $1E44 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1E44 The following are tables of text to be displayed while the game is ongoing
COMMENT_LINE $1E44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1F49 Sine table - offset 128 of the table is the actual begining of the table
COMMENT_LINE $1F49 and it is labled as sin_entry_0
COMMENT_LINE $2043 Cosine table - offset 128 of the table is the actual begining of the table
COMMENT_LINE $2043 and it is labled as cos_entry_0
COMMENT_LINE $2143 ; This file is a table that contains the ball movement per index.
COMMENT_LINE $2143 ; There are 64 pairs only.
COMMENT_LINE $2143 Upper-Left quarter
COMMENT $2143 #-128
COMMENT $2145 #-128
COMMENT $2147 #-124
COMMENT $2149 #-120
COMMENT $214B #-116
COMMENT $214D #-112
COMMENT $214F #-108
COMMENT $2151 #-104
COMMENT $2153 #-100
COMMENT $2155 #-096
COMMENT $2157 #-092
COMMENT $2159 #-088
COMMENT $215B #-084
COMMENT $215D #-080
COMMENT $215F #-076
COMMENT $2161 #-072
COMMENT $2163 #-068
COMMENT_LINE $2165 Bottom-Left quarter
COMMENT $2165 #-064
COMMENT $2167 #-060
COMMENT $2169 #-056
COMMENT $216B #-052
COMMENT $216D #-048
COMMENT $216F #-044
COMMENT $2171 #-040
COMMENT $2173 #-036
COMMENT $2175 #-032
COMMENT $2177 #-028
COMMENT $2179 #-024
COMMENT $217B #-020
COMMENT $217D #-016
COMMENT $217F #-012
COMMENT $2181 #-008
COMMENT $2183 #-004
COMMENT_LINE $2185 Bottom-Right quarter
COMMENT $2185 # 000
COMMENT $2187 # 004
COMMENT $2189 # 008
COMMENT $218B # 012
COMMENT $218D # 016
COMMENT $218F # 020
COMMENT $2191 # 024
COMMENT $2193 # 028
COMMENT $2195 # 032
COMMENT $2197 # 036
COMMENT $2199 # 040
COMMENT $219B # 044
COMMENT $219D # 048
COMMENT $219F # 052
COMMENT $21A1 # 056
COMMENT $21A3 # 060
COMMENT_LINE $21A5 Upper-Right quarter
COMMENT $21A5 # 064
COMMENT $21A7 # 068
COMMENT $21A9 # 072
COMMENT $21AB # 076
COMMENT $21AD # 080
COMMENT $21AF # 084
COMMENT $21B1 # 088
COMMENT $21B3 # 092
COMMENT $21B5 # 096
COMMENT $21B7 # 100
COMMENT $21B9 # 104
COMMENT $21BB # 108
COMMENT $21BD # 112
COMMENT $21BF # 116
COMMENT $21C1 # 120
COMMENT $21C3 # 124
COMMENT_LINE $21C5 ; This table returns the radius of a given X and pair. To find a radius,
COMMENT_LINE $21C5 ; the index has to be "prepared" in the following way: Index = X(6:3)&Y(6:3).
COMMENT_LINE $21C5 ; This means that the sign is being ignored and the accuracy is not 100%,
COMMENT_LINE $21C5 ; but, it should be close enough...
COMMENT_LINE $22C5 ; This table defines the possible hit location of the ball on the paddle.
COMMENT_LINE $22C5 ; The insed is one of 64 possible angles (which correspond to the Ball
COMMENT_LINE $22C5 ; movement possibilities).
COMMENT $22C5 #032
COMMENT $22C9 #033
COMMENT $22CD #034
COMMENT $22D1 #035
COMMENT $22D5 #036
COMMENT $22D9 #037
COMMENT $22DD #038
COMMENT $22E1 #039
COMMENT $22E5 #040
COMMENT $22E9 #041
COMMENT $22ED #042
COMMENT $22F1 #043
COMMENT $22F5 #044
COMMENT $22F9 #045
COMMENT $22FD #046
COMMENT $2301 #047
COMMENT $2305 #048
COMMENT $2309 #049
COMMENT $230D #050
COMMENT $2311 #051
COMMENT $2315 #052
COMMENT $2319 #053
COMMENT $231D #054
COMMENT $2321 #055
COMMENT $2325 #056
COMMENT $2329 #057
COMMENT $232D #058
COMMENT $2331 #059
COMMENT $2335 #060
COMMENT $2339 #061
COMMENT $233D #062
COMMENT $2341 #063
COMMENT $2345 #000
COMMENT $2349 #001
COMMENT $234D #002
COMMENT $2351 #003
COMMENT $2355 #004
COMMENT $2359 #005
COMMENT $235D #006
COMMENT $2361 #007
COMMENT $2365 #008
COMMENT $2369 #009
COMMENT $236D #010
COMMENT $2371 #011
COMMENT $2375 #012
COMMENT $2379 #013
COMMENT $237D #014
COMMENT $2381 #015
COMMENT $2385 #016
COMMENT $2389 #017
COMMENT $238D #018
COMMENT $2391 #019
COMMENT $2395 #020
COMMENT $2399 #021
COMMENT $239D #022
COMMENT $23A1 #023
COMMENT $23A5 #024
COMMENT $23A9 #025
COMMENT $23AD #026
COMMENT $23B1 #027
COMMENT $23B5 #028
COMMENT $23B9 #029
COMMENT $23BD #030
COMMENT $23C1 #031
COMMENT $23C5 #-32
COMMENT $23C7 #-32
COMMENT $23C9 #
COMMENT $23CB #
COMMENT $23CD #
COMMENT $23CF #
COMMENT $23D1 #
COMMENT $23D3 #
COMMENT $23D5 #
COMMENT $23D7 #
COMMENT $23D9 #
COMMENT $23DB #
COMMENT $23DD #
COMMENT $23DF #
COMMENT $23E1 #
COMMENT $23E3 #
COMMENT $23E5 #
COMMENT $23E7 #
COMMENT $23E9 #
COMMENT $23EB #
COMMENT $23ED #
COMMENT $23EF #
COMMENT $23F1 #
COMMENT $23F3 #
COMMENT $23F5 #
COMMENT $23F7 #
COMMENT $23F9 #
COMMENT $23FB #
COMMENT $23FD #
COMMENT $23FF #
COMMENT $2401 #
COMMENT $2403 #
COMMENT $2405 #
COMMENT $2407 #00
COMMENT $2409 #01
COMMENT $240B #02
COMMENT $240D #03
COMMENT $240F #04
COMMENT $2411 #05
COMMENT $2413 #06
COMMENT $2415 #07
COMMENT $2417 #
COMMENT $2419 #
COMMENT $241B #10
COMMENT $241D #11
COMMENT $241F #12
COMMENT $2421 #13
COMMENT $2423 #14
COMMENT $2425 #
COMMENT $2427 #
COMMENT $2429 #
COMMENT $242B #
COMMENT $242D #
COMMENT $242F #
COMMENT $2431 #
COMMENT $2433 #
COMMENT $2435 #
COMMENT $2437 #24
COMMENT $2439 #
COMMENT $243B #
COMMENT $243D #
COMMENT $243F #
COMMENT $2441 #
COMMENT $2443 #
COMMENT $2445 #32 -> LocIndex is 124
COMMENT_LINE $2447 MSNibble : low level random offset
COMMENT_LINE $2447 LSNibble : High level random offset
COMMENT_LINE $2467 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2467 Assumes Atari Driving Controller connected to Port #1
COMMENT_LINE $2467 When done, A contains the direction of the rotation
COMMENT_LINE $2467 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $2467 Get Buttons status
FORCE_SYMBOL $2467 Read_Btns
COMMENT $246A Current buttons value
FORCE_NO_SYMBOL $246A
COMMENT $246D Mask non-relevant bits
FORCE_NO_SYMBOL $246D
COMMENT $246F Previous buttons value
FORCE_NO_SYMBOL $246F
COMMENT $2472 Mask non-relevant bits
FORCE_NO_SYMBOL $2472
COMMENT $2474 Shift left 1st time
COMMENT $2475 Shift left 2nd time
COMMENT $2476 Store in temp RAM location
FORCE_SYMBOL $2476 TempBtns
COMMENT $2479 A - offset to l_DirTbl
FORCE_SYMBOL $2479 TempBtns
COMMENT $247C X - Pointer to l_DirTbl start
FORCE_SYMBOL $247C l_DirTbl
COMMENT $247F A = value to add to position index:
COMMENT_LINE $2481 -2 => Move right
COMMENT_LINE $2481 0 => No change
COMMENT_LINE $2481 +2 => Move left
COMMENT $2482 Loc#0 - no change
COMMENT $2483 Loc#1
COMMENT $2484 Loc#2
COMMENT $2485 Loc#3
COMMENT $2486 Loc#4
COMMENT $2487 Loc#5
COMMENT $2488 Loc#6
COMMENT $2489 Loc#7
COMMENT $248A Loc#8
COMMENT $248B Loc#9
COMMENT $248C Loc#10
COMMENT $248D Loc#11
COMMENT $248E Loc#12
COMMENT $248F Loc#13
COMMENT $2490 Loc#14
COMMENT $2491 Loc#15
COMMENT_LINE $2492 ;;;;;;;;;;;;
COMMENT_LINE $2492 ;;;;;;;;;;;;
COMMENT_LINE $2492 ;; MISC STUFF
COMMENT_LINE $2492 ;;;;;;;;;;;;
COMMENT_LINE $2492 ;;;;;;;;;;;;
COMMENT_LINE $2492 ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 ; do_menu: This procedure is responsible to write the menus of the game. It
COMMENT_LINE $2492 displays different lines based on the game's mode. At the end, it
COMMENT_LINE $2492 deletes all the menu lines...
COMMENT_LINE $2492 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_RndPrintMenu:
COMMENT_LINE $2492 RTS                             ;return to caller
COMMENT_LINE $2492 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 s_PrintLevelMenu - Responsible to print the level menus
COMMENT_LINE $2492 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_PrintLevelMenu:
COMMENT_LINE $2492 LDA   CurrentLvl
COMMENT_LINE $2492 CMPA  #LVL1                     ;Check if CurrentLvl == LVL1,
COMMENT_LINE $2492 BNE   l_CheckLevel2                  ;If not, check if LVL2...
COMMENT_LINE $2492 LDU   #menu_lvl1_line1_str      ;U <- Point to menu_lvl1_line1_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #lvl1_str
COMMENT_LINE $2492 BRA   l_PrintLevel                 ;Proceed to end of the procedure
COMMENT_LINE $2492 l_CheckLevel2:
COMMENT_LINE $2492 CMPA  #LVL2                     ;Check if CurrentLvl == LVL2,
COMMENT_LINE $2492 BNE   l_CheckLevel3                  ;If not, check if LVL3...
COMMENT_LINE $2492 LDU   #menu_lvl2_line1_str      ;U <- Point to menu_lvl2_line1_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #lvl2_str
COMMENT_LINE $2492 BRA   l_PrintLevel                 ;Proceed to end of the procedure
COMMENT_LINE $2492 l_CheckLevel3:
COMMENT_LINE $2492 LDU   #menu_lvl3_line1_str      ;U <- Point to menu_lvl3_line1_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #lvl3_str
COMMENT_LINE $2492 l_PrintLevel:
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #menu_line2_str           ;Always print menu_line2_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 RTS
COMMENT_LINE $2492 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 s_PrintMissedMenu -
COMMENT_LINE $2492 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_PrintMissedMenu:
COMMENT_LINE $2492 LDU   #menu_explsn_line1_str    ;U <- Point to menu_explsn_line1_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #menu_explsn_line2_str    ;U <- Point to menu_explsn_line1_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 LDU   #menu_line2_str           ;U <- Point to menu_line2_str
COMMENT_LINE $2492 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $2492 RTS                                             ;Return to the caller
COMMENT_LINE $2492 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 ******************************************************************************
COMMENT_LINE $2492 convert a to ASCII, assumes u -> *start of string, 42,u: MSB, 43,u: LSB
COMMENT_LINE $2492 ******************************************************************************
COMMENT_LINE $2492 s_AToHex:
COMMENT_LINE $2492 PSHS  A
COMMENT_LINE $2492 PSHS  A
COMMENT_LINE $2492 ;Calculate ASCII for MSB
COMMENT_LINE $2492 LSRA
COMMENT_LINE $2492 LSRA
COMMENT_LINE $2492 LSRA
COMMENT_LINE $2492 LSRA
COMMENT_LINE $2492 CMPA #$09
COMMENT_LINE $2492 BLS  l_AddMsb0x30
COMMENT_LINE $2492 ADDA #$07
COMMENT_LINE $2492 l_AddMsb0x30:
COMMENT_LINE $2492 ADDA #$30
COMMENT_LINE $2492 ;STA  42,U                      ;Store the MS nibble in location8 of the                                        ;current line
COMMENT_LINE $2492 STA  43,U                       ;Store the MS nibble in location8 of the                                        ;current line
COMMENT_LINE $2492 PULS  A                         ;Calculate ASCII for LSB
COMMENT_LINE $2492 ANDA  #$0F
COMMENT_LINE $2492 CMPA #$09
COMMENT_LINE $2492 BLS  l_AddLsb0x30
COMMENT_LINE $2492 ADDA #$07
COMMENT_LINE $2492 l_AddLsb0x30:
COMMENT_LINE $2492 ADDA  #$30
COMMENT_LINE $2492 ;STA   43,U                     ;Store the LS nibble in location9 of the
COMMENT_LINE $2492 STA   44,U                      ;Store the LS nibble in location9 of the
COMMENT_LINE $2492 ;current line
COMMENT_LINE $2492 PULS  A
COMMENT_LINE $2492 RTS                             ;Return to the caller
COMMENT_LINE $2492 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 *****************************************************************************
COMMENT_LINE $2492 s_RndDToBcd:
COMMENT_LINE $2492 LDU   #$0000
COMMENT_LINE $2492 l_RndCheck1000:
COMMENT_LINE $2492 CMPD  #$3E7                     ;More than 1,000?
COMMENT_LINE $2492 BLS   l_RndCheck100
COMMENT_LINE $2492 SUBD  #$3E8                     ;Sub 1,000 from D,
COMMENT_LINE $2492 LEAU  $1000,u                   ;Add 1,000 to u
COMMENT_LINE $2492 BRA   l_RndCheck1000                ;Proceed, till D < 1000
COMMENT_LINE $2492 l_RndCheck100:
COMMENT_LINE $2492 CMPD  #$63                      ;More than 100?
COMMENT_LINE $2492 BLS   l_RndCheck10
COMMENT_LINE $2492 SUBD  #$64                      ;Sub 100 from D,
COMMENT_LINE $2492 LEAU  $100,u                    ;Add 100 to u
COMMENT_LINE $2492 BRA   l_RndCheck100                 ;Proceed, till d < 100
COMMENT_LINE $2492 l_RndCheck10:
COMMENT_LINE $2492 CMPD  #$09                      ;More than 9?
COMMENT_LINE $2492 BLS   l_RndCompleteBcd
COMMENT_LINE $2492 SUBD  #$0A                      ;Sub 10 from d,
COMMENT_LINE $2492 LEAU  $10,u                     ;Add 10 to u
COMMENT_LINE $2492 BRA   l_RndCheck10                  ;Proceed, till d < 10
COMMENT_LINE $2492 l_RndCompleteBcd:
COMMENT_LINE $2492 LEAU  d,u                       ;Add the remain to u
COMMENT_LINE $2492 TFR   u,d
COMMENT_LINE $2492 RTS                             ;Return to the caller
COMMENT_LINE $2492 ;
COMMENT_LINE $2492 ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 ; s_DivideAtX: Divides two numbers:
COMMENT_LINE $2492 ;           *x = a div b, *x+ = reminder, @ exit, b=remian, a=0
COMMENT_LINE $2492 ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_DivideAtX:
COMMENT_LINE $2492 CLR   ,x                        ;clear the result field
COMMENT_LINE $2492 STB   1,x                       ;*x+ <- b
COMMENT_LINE $2492 repeat_div:
COMMENT_LINE $2492 CMPA  1,x                       ; check if b>a, if so, that's the end
COMMENT_LINE $2492 BLO   a_smaller_then_b
COMMENT_LINE $2492 SUBA  1,x                       ;a = a-b
COMMENT_LINE $2492 INC   ,x                        ;result <- result + 1
COMMENT_LINE $2492 BRA   repeat_div
COMMENT_LINE $2492 a_smaller_then_b:
COMMENT_LINE $2492 STA   1,x
COMMENT_LINE $2492 RTS                             ;Return to the caller
COMMENT_LINE $2492 ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 ; s_CheckPaddleHit - Checks whether the paddle are catching either the bombs,heart,
COMMENT_LINE $2492 ;             diamond or, ex.
COMMENT_LINE $2492 ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_CheckPaddleHit:
COMMENT_LINE $2492 RTS                             ;Return to the caller
COMMENT_LINE $2492 ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2492 ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2492 s_RndSelectPlyrNum:
COMMENT_LINE $2492 s_RndSelPlyrNum_loop:
COMMENT_LINE $2492 JSR   Wait_Recal                ;reset the crt
COMMENT_LINE $2492 RESET_0_REF;                    ;Call Reset0Ref macro
COMMENT_LINE $2492 LDU   #l_RndSelectPlyrMsg1
COMMENT_LINE $2492 PRINT_STR_YX                    ;Call enhenced print routine
COMMENT_LINE $2492 RESET_0_REF;                    ;Call Reset0Ref macro
COMMENT_LINE $2492 LDU   #l_RndSelectPlyrMsg2
COMMENT_LINE $2492 PRINT_STR_YX                    ;Call enhenced print routine
COMMENT_LINE $2492 l_PlyrNumWaitForBtns:
COMMENT_LINE $2492 JSR   Read_Btns   	        ; Get Buttons status
COMMENT_LINE $2492 CMPA  #$00                      ; If no button pressed,
COMMENT_LINE $2492 BEQ   s_RndSelPlyrNum_loop      ; goto opening_loop...
COMMENT_LINE $2492 l_PlyrNumCheckCntrl1Btn1:
COMMENT_LINE $2492 BITA  #$01
COMMENT_LINE $2492 BEQ   l_PlyrNumCheckCntrl1Btn2         ;
COMMENT_LINE $2492 l_PlyrNumButton1Pressed:
COMMENT_LINE $2492 CLR   PlyrNum			;Set # of players to 1
COMMENT_LINE $2492 RTS
COMMENT_LINE $2492 l_PlyrNumCheckCntrl1Btn2:
COMMENT_LINE $2492 BITA  #$02
COMMENT_LINE $2492 BEQ   s_RndSelPlyrNum_loop	;Nothing else to check, keep looping
COMMENT_LINE $2492 l_PlyrNumButton2Pressed:
COMMENT_LINE $2492 LDA   #$01
COMMENT_LINE $2492 STA   PlyrNum			;Set # of players to 2
COMMENT_LINE $2492 RTS
COMMENT_LINE $2492 l_RndSelectPlyrMsg1:
COMMENT_LINE $2492 DB      30,-60,$81, "PRESS 1 FOR SINGLE PLAYER GAME, OR,", $81
COMMENT_LINE $2492 l_RndSelectPlyrMsg2:
COMMENT_LINE $2492 DB      -30,-50,$81, "PRESS 2 FOR TWO PLAYERS GAME.", $81
COMMENT_LINE $2492 ;
RANGE $0000-$2492 DP $D0
RANGE $0000-$0002 DB_DATA 2
RANGE $0002-$000A CHAR_DATA 8
RANGE $000A-$000B DB_DATA 1
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$000F DW_DATA 1
RANGE $000F-$0011 DW_DATA 1
RANGE $0011-$0019 CHAR_DATA 8
RANGE $0019-$001B DB_DATA 2
RANGE $001B-$001E CODE
RANGE $001E-$002E DB_DATA 16
RANGE $002E-$003E DB_DATA 16
RANGE $003E-$004E DB_DATA 16
RANGE $004E-$005E DB_DATA 16
RANGE $005E-$006E DB_DATA 16
RANGE $006E-$007E DB_DATA 16
RANGE $007E-$008E DB_DATA 16
RANGE $008E-$009E DB_DATA 16
RANGE $009E-$00AE DB_DATA 16
RANGE $00AE-$00BE DB_DATA 16
RANGE $00BE-$00CE DB_DATA 16
RANGE $00CE-$00DE DB_DATA 16
RANGE $00DE-$00EE DB_DATA 16
RANGE $00EE-$00FE DB_DATA 16
RANGE $00FE-$010E DB_DATA 16
RANGE $010E-$1A68 CODE
RANGE $1A68-$1A69 DB_DATA 1
RANGE $1A69-$1A6A DB_DATA 1
RANGE $1A6A-$1A6B DB_DATA 1
RANGE $1A6B-$1A6C DB_DATA 1
RANGE $1A6C-$1A6D DB_DATA 1
RANGE $1A6D-$1A6E DB_DATA 1
RANGE $1A6E-$1A6F DB_DATA 1
RANGE $1A6F-$1A70 DB_DATA 1
RANGE $1A70-$1A71 DB_DATA 1
RANGE $1A71-$1A72 DB_DATA 1
RANGE $1A72-$1A73 DB_DATA 1
RANGE $1A73-$1A74 DB_DATA 1
RANGE $1A74-$1A75 DB_DATA 1
RANGE $1A75-$1A76 DB_DATA 1
RANGE $1A76-$1A77 DB_DATA 1
RANGE $1A77-$1A78 DB_DATA 1
RANGE $1A78-$1A79 DB_DATA 1
RANGE $1A79-$1A7A DB_DATA 1
RANGE $1A7A-$1A7B DB_DATA 1
RANGE $1A7B-$1A7C DB_DATA 1
RANGE $1A7C-$1A7D DB_DATA 1
RANGE $1A7D-$1A7E DB_DATA 1
RANGE $1A7E-$1A7F DB_DATA 1
RANGE $1A7F-$1A80 DB_DATA 1
RANGE $1A80-$1A81 DB_DATA 1
RANGE $1A81-$1A82 DB_DATA 1
RANGE $1A82-$1A83 DB_DATA 1
RANGE $1A83-$1A84 DB_DATA 1
RANGE $1A84-$1A85 DB_DATA 1
RANGE $1A85-$1A86 DB_DATA 1
RANGE $1A86-$1A87 DB_DATA 1
RANGE $1A87-$1A88 DB_DATA 1
RANGE $1A88-$1A89 DB_DATA 1
RANGE $1A89-$1A8A DB_DATA 1
RANGE $1A8A-$1A8B DB_DATA 1
RANGE $1A8B-$1A8C DB_DATA 1
RANGE $1A8C-$1A8D DB_DATA 1
RANGE $1A8D-$1A8E DB_DATA 1
RANGE $1A8E-$1A8F DB_DATA 1
RANGE $1A8F-$1E44 CODE
RANGE $1E44-$1E5E DB_DATA 26
RANGE $1E5E-$1E7C DB_DATA 30
RANGE $1E7C-$1E98 DB_DATA 28
RANGE $1E98-$1EA4 DB_DATA 12
RANGE $1EA4-$1EB5 DB_DATA 17
RANGE $1EB5-$1EC3 DB_DATA 14
RANGE $1EC3-$1ED7 DB_DATA 20
RANGE $1ED7-$1EE5 DB_DATA 14
RANGE $1EE5-$1EF3 DB_DATA 14
RANGE $1EF3-$1F01 DB_DATA 14
RANGE $1F01-$1F0B DB_DATA 10
RANGE $1F0B-$1F1B DB_DATA 16
RANGE $1F1B-$1F25 DB_DATA 10
RANGE $1F25-$1F2F DB_DATA 10
RANGE $1F2F-$1F31 DB_DATA 2
RANGE $1F31-$1F33 DB_DATA 2
RANGE $1F33-$1F35 DB_DATA 2
RANGE $1F35-$1F37 DB_DATA 2
RANGE $1F37-$1F38 DB_DATA 1
RANGE $1F38-$1F3A DB_DATA 2
RANGE $1F3A-$1F3C DB_DATA 2
RANGE $1F3C-$1F3E DB_DATA 2
RANGE $1F3E-$1F40 DB_DATA 2
RANGE $1F40-$1F41 DB_DATA 1
RANGE $1F41-$1F43 DB_DATA 2
RANGE $1F43-$1F45 DB_DATA 2
RANGE $1F45-$1F47 DB_DATA 2
RANGE $1F47-$1F49 DB_DATA 2
RANGE $1F49-$1F4A DB_DATA 1
RANGE $1F4A-$1F4B DB_DATA 1
RANGE $1F4B-$1F4C DB_DATA 1
RANGE $1F4C-$1F4D DB_DATA 1
RANGE $1F4D-$1F4E DB_DATA 1
RANGE $1F4E-$1F4F DB_DATA 1
RANGE $1F4F-$1F50 DB_DATA 1
RANGE $1F50-$1F51 DB_DATA 1
RANGE $1F51-$1F52 DB_DATA 1
RANGE $1F52-$1F53 DB_DATA 1
RANGE $1F53-$1F54 DB_DATA 1
RANGE $1F54-$1F55 DB_DATA 1
RANGE $1F55-$1F56 DB_DATA 1
RANGE $1F56-$1F57 DB_DATA 1
RANGE $1F57-$1F58 DB_DATA 1
RANGE $1F58-$1F59 DB_DATA 1
RANGE $1F59-$1F5A DB_DATA 1
RANGE $1F5A-$1F5B DB_DATA 1
RANGE $1F5B-$1F5C DB_DATA 1
RANGE $1F5C-$1F5D DB_DATA 1
RANGE $1F5D-$1F5E DB_DATA 1
RANGE $1F5E-$1F5F DB_DATA 1
RANGE $1F5F-$1F60 DB_DATA 1
RANGE $1F60-$1F61 DB_DATA 1
RANGE $1F61-$1F62 DB_DATA 1
RANGE $1F62-$1F63 DB_DATA 1
RANGE $1F63-$1F64 DB_DATA 1
RANGE $1F64-$1F65 DB_DATA 1
RANGE $1F65-$1F66 DB_DATA 1
RANGE $1F66-$1F67 DB_DATA 1
RANGE $1F67-$1F68 DB_DATA 1
RANGE $1F68-$1F69 DB_DATA 1
RANGE $1F69-$1F6A DB_DATA 1
RANGE $1F6A-$1F6B DB_DATA 1
RANGE $1F6B-$1F6C DB_DATA 1
RANGE $1F6C-$1F6D DB_DATA 1
RANGE $1F6D-$1F6E DB_DATA 1
RANGE $1F6E-$1F6F DB_DATA 1
RANGE $1F6F-$1F70 DB_DATA 1
RANGE $1F70-$1F71 DB_DATA 1
RANGE $1F71-$1F72 DB_DATA 1
RANGE $1F72-$1F73 DB_DATA 1
RANGE $1F73-$1F74 DB_DATA 1
RANGE $1F74-$1F75 DB_DATA 1
RANGE $1F75-$1F76 DB_DATA 1
RANGE $1F76-$1F77 DB_DATA 1
RANGE $1F77-$1F78 DB_DATA 1
RANGE $1F78-$1F79 DB_DATA 1
RANGE $1F79-$1F7A DB_DATA 1
RANGE $1F7A-$1F7B DB_DATA 1
RANGE $1F7B-$1F7C DB_DATA 1
RANGE $1F7C-$1F7D DB_DATA 1
RANGE $1F7D-$1F7E DB_DATA 1
RANGE $1F7E-$1F7F DB_DATA 1
RANGE $1F7F-$1F80 DB_DATA 1
RANGE $1F80-$1F81 DB_DATA 1
RANGE $1F81-$1F82 DB_DATA 1
RANGE $1F82-$1F83 DB_DATA 1
RANGE $1F83-$1F84 DB_DATA 1
RANGE $1F84-$1F85 DB_DATA 1
RANGE $1F85-$1F86 DB_DATA 1
RANGE $1F86-$1F87 DB_DATA 1
RANGE $1F87-$1F88 DB_DATA 1
RANGE $1F88-$1F89 DB_DATA 1
RANGE $1F89-$1F8A DB_DATA 1
RANGE $1F8A-$1F8B DB_DATA 1
RANGE $1F8B-$1F8C DB_DATA 1
RANGE $1F8C-$1F8D DB_DATA 1
RANGE $1F8D-$1F8E DB_DATA 1
RANGE $1F8E-$1F8F DB_DATA 1
RANGE $1F8F-$1F90 DB_DATA 1
RANGE $1F90-$1F91 DB_DATA 1
RANGE $1F91-$1F92 DB_DATA 1
RANGE $1F92-$1F93 DB_DATA 1
RANGE $1F93-$1F94 DB_DATA 1
RANGE $1F94-$1F95 DB_DATA 1
RANGE $1F95-$1F96 DB_DATA 1
RANGE $1F96-$1F97 DB_DATA 1
RANGE $1F97-$1F98 DB_DATA 1
RANGE $1F98-$1F99 DB_DATA 1
RANGE $1F99-$1F9A DB_DATA 1
RANGE $1F9A-$1F9B DB_DATA 1
RANGE $1F9B-$1F9C DB_DATA 1
RANGE $1F9C-$1F9D DB_DATA 1
RANGE $1F9D-$1F9E DB_DATA 1
RANGE $1F9E-$1F9F DB_DATA 1
RANGE $1F9F-$1FA0 DB_DATA 1
RANGE $1FA0-$1FA1 DB_DATA 1
RANGE $1FA1-$1FA2 DB_DATA 1
RANGE $1FA2-$1FA3 DB_DATA 1
RANGE $1FA3-$1FA4 DB_DATA 1
RANGE $1FA4-$1FA5 DB_DATA 1
RANGE $1FA5-$1FA6 DB_DATA 1
RANGE $1FA6-$1FA7 DB_DATA 1
RANGE $1FA7-$1FA8 DB_DATA 1
RANGE $1FA8-$1FA9 DB_DATA 1
RANGE $1FA9-$1FAA DB_DATA 1
RANGE $1FAA-$1FAB DB_DATA 1
RANGE $1FAB-$1FAC DB_DATA 1
RANGE $1FAC-$1FAD DB_DATA 1
RANGE $1FAD-$1FAE DB_DATA 1
RANGE $1FAE-$1FAF DB_DATA 1
RANGE $1FAF-$1FB0 DB_DATA 1
RANGE $1FB0-$1FB1 DB_DATA 1
RANGE $1FB1-$1FB2 DB_DATA 1
RANGE $1FB2-$1FB3 DB_DATA 1
RANGE $1FB3-$1FB4 DB_DATA 1
RANGE $1FB4-$1FB5 DB_DATA 1
RANGE $1FB5-$1FB6 DB_DATA 1
RANGE $1FB6-$1FB7 DB_DATA 1
RANGE $1FB7-$1FB8 DB_DATA 1
RANGE $1FB8-$1FB9 DB_DATA 1
RANGE $1FB9-$1FBA DB_DATA 1
RANGE $1FBA-$1FBB DB_DATA 1
RANGE $1FBB-$1FBC DB_DATA 1
RANGE $1FBC-$1FBD DB_DATA 1
RANGE $1FBD-$1FBE DB_DATA 1
RANGE $1FBE-$1FBF DB_DATA 1
RANGE $1FBF-$1FC0 DB_DATA 1
RANGE $1FC0-$1FC1 DB_DATA 1
RANGE $1FC1-$1FC2 DB_DATA 1
RANGE $1FC2-$1FC3 DB_DATA 1
RANGE $1FC3-$1FC4 DB_DATA 1
RANGE $1FC4-$1FC5 DB_DATA 1
RANGE $1FC5-$1FC6 DB_DATA 1
RANGE $1FC6-$1FC7 DB_DATA 1
RANGE $1FC7-$1FC8 DB_DATA 1
RANGE $1FC8-$1FC9 DB_DATA 1
RANGE $1FC9-$1FCA DB_DATA 1
RANGE $1FCA-$1FCB DB_DATA 1
RANGE $1FCB-$1FCC DB_DATA 1
RANGE $1FCC-$1FCD DB_DATA 1
RANGE $1FCD-$1FCE DB_DATA 1
RANGE $1FCE-$1FCF DB_DATA 1
RANGE $1FCF-$1FD0 DB_DATA 1
RANGE $1FD0-$1FD1 DB_DATA 1
RANGE $1FD1-$1FD2 DB_DATA 1
RANGE $1FD2-$1FD3 DB_DATA 1
RANGE $1FD3-$1FD4 DB_DATA 1
RANGE $1FD4-$1FD5 DB_DATA 1
RANGE $1FD5-$1FD6 DB_DATA 1
RANGE $1FD6-$1FD7 DB_DATA 1
RANGE $1FD7-$1FD8 DB_DATA 1
RANGE $1FD8-$1FD9 DB_DATA 1
RANGE $1FD9-$1FDA DB_DATA 1
RANGE $1FDA-$1FDB DB_DATA 1
RANGE $1FDB-$1FDC DB_DATA 1
RANGE $1FDC-$1FDD DB_DATA 1
RANGE $1FDD-$1FDE DB_DATA 1
RANGE $1FDE-$1FDF DB_DATA 1
RANGE $1FDF-$1FE0 DB_DATA 1
RANGE $1FE0-$1FE1 DB_DATA 1
RANGE $1FE1-$1FE2 DB_DATA 1
RANGE $1FE2-$1FE3 DB_DATA 1
RANGE $1FE3-$1FE4 DB_DATA 1
RANGE $1FE4-$1FE5 DB_DATA 1
RANGE $1FE5-$1FE6 DB_DATA 1
RANGE $1FE6-$1FE7 DB_DATA 1
RANGE $1FE7-$1FE8 DB_DATA 1
RANGE $1FE8-$1FE9 DB_DATA 1
RANGE $1FE9-$1FEA DB_DATA 1
RANGE $1FEA-$1FEB DB_DATA 1
RANGE $1FEB-$1FEC DB_DATA 1
RANGE $1FEC-$1FED DB_DATA 1
RANGE $1FED-$1FEE DB_DATA 1
RANGE $1FEE-$1FEF DB_DATA 1
RANGE $1FEF-$1FF0 DB_DATA 1
RANGE $1FF0-$1FF1 DB_DATA 1
RANGE $1FF1-$1FF2 DB_DATA 1
RANGE $1FF2-$1FF3 DB_DATA 1
RANGE $1FF3-$1FF4 DB_DATA 1
RANGE $1FF4-$1FF5 DB_DATA 1
RANGE $1FF5-$1FF6 DB_DATA 1
RANGE $1FF6-$1FF7 DB_DATA 1
RANGE $1FF7-$1FF8 DB_DATA 1
RANGE $1FF8-$1FF9 DB_DATA 1
RANGE $1FF9-$1FFA DB_DATA 1
RANGE $1FFA-$1FFB DB_DATA 1
RANGE $1FFB-$1FFC DB_DATA 1
RANGE $1FFC-$1FFD DB_DATA 1
RANGE $1FFD-$1FFE DB_DATA 1
RANGE $1FFE-$1FFF DB_DATA 1
RANGE $1FFF-$2000 DB_DATA 1
RANGE $2000-$2001 DB_DATA 1
RANGE $2001-$2002 DB_DATA 1
RANGE $2002-$2003 DB_DATA 1
RANGE $2003-$2004 DB_DATA 1
RANGE $2004-$2005 DB_DATA 1
RANGE $2005-$2006 DB_DATA 1
RANGE $2006-$2007 DB_DATA 1
RANGE $2007-$2008 DB_DATA 1
RANGE $2008-$2009 DB_DATA 1
RANGE $2009-$200A DB_DATA 1
RANGE $200A-$200B DB_DATA 1
RANGE $200B-$200C DB_DATA 1
RANGE $200C-$200D DB_DATA 1
RANGE $200D-$200E DB_DATA 1
RANGE $200E-$200F DB_DATA 1
RANGE $200F-$2010 DB_DATA 1
RANGE $2010-$2011 DB_DATA 1
RANGE $2011-$2012 DB_DATA 1
RANGE $2012-$2013 DB_DATA 1
RANGE $2013-$2014 DB_DATA 1
RANGE $2014-$2015 DB_DATA 1
RANGE $2015-$2016 DB_DATA 1
RANGE $2016-$2017 DB_DATA 1
RANGE $2017-$2018 DB_DATA 1
RANGE $2018-$2019 DB_DATA 1
RANGE $2019-$201A DB_DATA 1
RANGE $201A-$201B DB_DATA 1
RANGE $201B-$201C DB_DATA 1
RANGE $201C-$201D DB_DATA 1
RANGE $201D-$201E DB_DATA 1
RANGE $201E-$201F DB_DATA 1
RANGE $201F-$2020 DB_DATA 1
RANGE $2020-$2021 DB_DATA 1
RANGE $2021-$2022 DB_DATA 1
RANGE $2022-$2023 DB_DATA 1
RANGE $2023-$2024 DB_DATA 1
RANGE $2024-$2025 DB_DATA 1
RANGE $2025-$2026 DB_DATA 1
RANGE $2026-$2027 DB_DATA 1
RANGE $2027-$2028 DB_DATA 1
RANGE $2028-$2029 DB_DATA 1
RANGE $2029-$202A DB_DATA 1
RANGE $202A-$202B DB_DATA 1
RANGE $202B-$202C DB_DATA 1
RANGE $202C-$202D DB_DATA 1
RANGE $202D-$202E DB_DATA 1
RANGE $202E-$202F DB_DATA 1
RANGE $202F-$2030 DB_DATA 1
RANGE $2030-$2031 DB_DATA 1
RANGE $2031-$2032 DB_DATA 1
RANGE $2032-$2033 DB_DATA 1
RANGE $2033-$2034 DB_DATA 1
RANGE $2034-$2035 DB_DATA 1
RANGE $2035-$2036 DB_DATA 1
RANGE $2036-$2037 DB_DATA 1
RANGE $2037-$2038 DB_DATA 1
RANGE $2038-$2039 DB_DATA 1
RANGE $2039-$203A DB_DATA 1
RANGE $203A-$203B DB_DATA 1
RANGE $203B-$203C DB_DATA 1
RANGE $203C-$203D DB_DATA 1
RANGE $203D-$203E DB_DATA 1
RANGE $203E-$203F DB_DATA 1
RANGE $203F-$2040 DB_DATA 1
RANGE $2040-$2041 DB_DATA 1
RANGE $2041-$2042 DB_DATA 1
RANGE $2042-$2043 DB_DATA 1
RANGE $2043-$2044 DB_DATA 1
RANGE $2044-$2045 DB_DATA 1
RANGE $2045-$2046 DB_DATA 1
RANGE $2046-$2047 DB_DATA 1
RANGE $2047-$2048 DB_DATA 1
RANGE $2048-$2049 DB_DATA 1
RANGE $2049-$204A DB_DATA 1
RANGE $204A-$204B DB_DATA 1
RANGE $204B-$204C DB_DATA 1
RANGE $204C-$204D DB_DATA 1
RANGE $204D-$204E DB_DATA 1
RANGE $204E-$204F DB_DATA 1
RANGE $204F-$2050 DB_DATA 1
RANGE $2050-$2051 DB_DATA 1
RANGE $2051-$2052 DB_DATA 1
RANGE $2052-$2053 DB_DATA 1
RANGE $2053-$2054 DB_DATA 1
RANGE $2054-$2055 DB_DATA 1
RANGE $2055-$2056 DB_DATA 1
RANGE $2056-$2057 DB_DATA 1
RANGE $2057-$2058 DB_DATA 1
RANGE $2058-$2059 DB_DATA 1
RANGE $2059-$205A DB_DATA 1
RANGE $205A-$205B DB_DATA 1
RANGE $205B-$205C DB_DATA 1
RANGE $205C-$205D DB_DATA 1
RANGE $205D-$205E DB_DATA 1
RANGE $205E-$205F DB_DATA 1
RANGE $205F-$2060 DB_DATA 1
RANGE $2060-$2061 DB_DATA 1
RANGE $2061-$2062 DB_DATA 1
RANGE $2062-$2063 DB_DATA 1
RANGE $2063-$2064 DB_DATA 1
RANGE $2064-$2065 DB_DATA 1
RANGE $2065-$2066 DB_DATA 1
RANGE $2066-$2067 DB_DATA 1
RANGE $2067-$2068 DB_DATA 1
RANGE $2068-$2069 DB_DATA 1
RANGE $2069-$206A DB_DATA 1
RANGE $206A-$206B DB_DATA 1
RANGE $206B-$206C DB_DATA 1
RANGE $206C-$206D DB_DATA 1
RANGE $206D-$206E DB_DATA 1
RANGE $206E-$206F DB_DATA 1
RANGE $206F-$2070 DB_DATA 1
RANGE $2070-$2071 DB_DATA 1
RANGE $2071-$2072 DB_DATA 1
RANGE $2072-$2073 DB_DATA 1
RANGE $2073-$2074 DB_DATA 1
RANGE $2074-$2075 DB_DATA 1
RANGE $2075-$2076 DB_DATA 1
RANGE $2076-$2077 DB_DATA 1
RANGE $2077-$2078 DB_DATA 1
RANGE $2078-$2079 DB_DATA 1
RANGE $2079-$207A DB_DATA 1
RANGE $207A-$207B DB_DATA 1
RANGE $207B-$207C DB_DATA 1
RANGE $207C-$207D DB_DATA 1
RANGE $207D-$207E DB_DATA 1
RANGE $207E-$207F DB_DATA 1
RANGE $207F-$2080 DB_DATA 1
RANGE $2080-$2081 DB_DATA 1
RANGE $2081-$2082 DB_DATA 1
RANGE $2082-$2083 DB_DATA 1
RANGE $2083-$2084 DB_DATA 1
RANGE $2084-$2085 DB_DATA 1
RANGE $2085-$2086 DB_DATA 1
RANGE $2086-$2087 DB_DATA 1
RANGE $2087-$2088 DB_DATA 1
RANGE $2088-$2089 DB_DATA 1
RANGE $2089-$208A DB_DATA 1
RANGE $208A-$208B DB_DATA 1
RANGE $208B-$208C DB_DATA 1
RANGE $208C-$208D DB_DATA 1
RANGE $208D-$208E DB_DATA 1
RANGE $208E-$208F DB_DATA 1
RANGE $208F-$2090 DB_DATA 1
RANGE $2090-$2091 DB_DATA 1
RANGE $2091-$2092 DB_DATA 1
RANGE $2092-$2093 DB_DATA 1
RANGE $2093-$2094 DB_DATA 1
RANGE $2094-$2095 DB_DATA 1
RANGE $2095-$2096 DB_DATA 1
RANGE $2096-$2097 DB_DATA 1
RANGE $2097-$2098 DB_DATA 1
RANGE $2098-$2099 DB_DATA 1
RANGE $2099-$209A DB_DATA 1
RANGE $209A-$209B DB_DATA 1
RANGE $209B-$209C DB_DATA 1
RANGE $209C-$209D DB_DATA 1
RANGE $209D-$209E DB_DATA 1
RANGE $209E-$209F DB_DATA 1
RANGE $209F-$20A0 DB_DATA 1
RANGE $20A0-$20A1 DB_DATA 1
RANGE $20A1-$20A2 DB_DATA 1
RANGE $20A2-$20A3 DB_DATA 1
RANGE $20A3-$20A4 DB_DATA 1
RANGE $20A4-$20A5 DB_DATA 1
RANGE $20A5-$20A6 DB_DATA 1
RANGE $20A6-$20A7 DB_DATA 1
RANGE $20A7-$20A8 DB_DATA 1
RANGE $20A8-$20A9 DB_DATA 1
RANGE $20A9-$20AA DB_DATA 1
RANGE $20AA-$20AB DB_DATA 1
RANGE $20AB-$20AC DB_DATA 1
RANGE $20AC-$20AD DB_DATA 1
RANGE $20AD-$20AE DB_DATA 1
RANGE $20AE-$20AF DB_DATA 1
RANGE $20AF-$20B0 DB_DATA 1
RANGE $20B0-$20B1 DB_DATA 1
RANGE $20B1-$20B2 DB_DATA 1
RANGE $20B2-$20B3 DB_DATA 1
RANGE $20B3-$20B4 DB_DATA 1
RANGE $20B4-$20B5 DB_DATA 1
RANGE $20B5-$20B6 DB_DATA 1
RANGE $20B6-$20B7 DB_DATA 1
RANGE $20B7-$20B8 DB_DATA 1
RANGE $20B8-$20B9 DB_DATA 1
RANGE $20B9-$20BA DB_DATA 1
RANGE $20BA-$20BB DB_DATA 1
RANGE $20BB-$20BC DB_DATA 1
RANGE $20BC-$20BD DB_DATA 1
RANGE $20BD-$20BE DB_DATA 1
RANGE $20BE-$20BF DB_DATA 1
RANGE $20BF-$20C0 DB_DATA 1
RANGE $20C0-$20C1 DB_DATA 1
RANGE $20C1-$20C2 DB_DATA 1
RANGE $20C2-$20C3 DB_DATA 1
RANGE $20C3-$20C4 DB_DATA 1
RANGE $20C4-$20C5 DB_DATA 1
RANGE $20C5-$20C6 DB_DATA 1
RANGE $20C6-$20C7 DB_DATA 1
RANGE $20C7-$20C8 DB_DATA 1
RANGE $20C8-$20C9 DB_DATA 1
RANGE $20C9-$20CA DB_DATA 1
RANGE $20CA-$20CB DB_DATA 1
RANGE $20CB-$20CC DB_DATA 1
RANGE $20CC-$20CD DB_DATA 1
RANGE $20CD-$20CE DB_DATA 1
RANGE $20CE-$20CF DB_DATA 1
RANGE $20CF-$20D0 DB_DATA 1
RANGE $20D0-$20D1 DB_DATA 1
RANGE $20D1-$20D2 DB_DATA 1
RANGE $20D2-$20D3 DB_DATA 1
RANGE $20D3-$20D4 DB_DATA 1
RANGE $20D4-$20D5 DB_DATA 1
RANGE $20D5-$20D6 DB_DATA 1
RANGE $20D6-$20D7 DB_DATA 1
RANGE $20D7-$20D8 DB_DATA 1
RANGE $20D8-$20D9 DB_DATA 1
RANGE $20D9-$20DA DB_DATA 1
RANGE $20DA-$20DB DB_DATA 1
RANGE $20DB-$20DC DB_DATA 1
RANGE $20DC-$20DD DB_DATA 1
RANGE $20DD-$20DE DB_DATA 1
RANGE $20DE-$20DF DB_DATA 1
RANGE $20DF-$20E0 DB_DATA 1
RANGE $20E0-$20E1 DB_DATA 1
RANGE $20E1-$20E2 DB_DATA 1
RANGE $20E2-$20E3 DB_DATA 1
RANGE $20E3-$20E4 DB_DATA 1
RANGE $20E4-$20E5 DB_DATA 1
RANGE $20E5-$20E6 DB_DATA 1
RANGE $20E6-$20E7 DB_DATA 1
RANGE $20E7-$20E8 DB_DATA 1
RANGE $20E8-$20E9 DB_DATA 1
RANGE $20E9-$20EA DB_DATA 1
RANGE $20EA-$20EB DB_DATA 1
RANGE $20EB-$20EC DB_DATA 1
RANGE $20EC-$20ED DB_DATA 1
RANGE $20ED-$20EE DB_DATA 1
RANGE $20EE-$20EF DB_DATA 1
RANGE $20EF-$20F0 DB_DATA 1
RANGE $20F0-$20F1 DB_DATA 1
RANGE $20F1-$20F2 DB_DATA 1
RANGE $20F2-$20F3 DB_DATA 1
RANGE $20F3-$20F4 DB_DATA 1
RANGE $20F4-$20F5 DB_DATA 1
RANGE $20F5-$20F6 DB_DATA 1
RANGE $20F6-$20F7 DB_DATA 1
RANGE $20F7-$20F8 DB_DATA 1
RANGE $20F8-$20F9 DB_DATA 1
RANGE $20F9-$20FA DB_DATA 1
RANGE $20FA-$20FB DB_DATA 1
RANGE $20FB-$20FC DB_DATA 1
RANGE $20FC-$20FD DB_DATA 1
RANGE $20FD-$20FE DB_DATA 1
RANGE $20FE-$20FF DB_DATA 1
RANGE $20FF-$2100 DB_DATA 1
RANGE $2100-$2101 DB_DATA 1
RANGE $2101-$2102 DB_DATA 1
RANGE $2102-$2103 DB_DATA 1
RANGE $2103-$2104 DB_DATA 1
RANGE $2104-$2105 DB_DATA 1
RANGE $2105-$2106 DB_DATA 1
RANGE $2106-$2107 DB_DATA 1
RANGE $2107-$2108 DB_DATA 1
RANGE $2108-$2109 DB_DATA 1
RANGE $2109-$210A DB_DATA 1
RANGE $210A-$210B DB_DATA 1
RANGE $210B-$210C DB_DATA 1
RANGE $210C-$210D DB_DATA 1
RANGE $210D-$210E DB_DATA 1
RANGE $210E-$210F DB_DATA 1
RANGE $210F-$2110 DB_DATA 1
RANGE $2110-$2111 DB_DATA 1
RANGE $2111-$2112 DB_DATA 1
RANGE $2112-$2113 DB_DATA 1
RANGE $2113-$2114 DB_DATA 1
RANGE $2114-$2115 DB_DATA 1
RANGE $2115-$2116 DB_DATA 1
RANGE $2116-$2117 DB_DATA 1
RANGE $2117-$2118 DB_DATA 1
RANGE $2118-$2119 DB_DATA 1
RANGE $2119-$211A DB_DATA 1
RANGE $211A-$211B DB_DATA 1
RANGE $211B-$211C DB_DATA 1
RANGE $211C-$211D DB_DATA 1
RANGE $211D-$211E DB_DATA 1
RANGE $211E-$211F DB_DATA 1
RANGE $211F-$2120 DB_DATA 1
RANGE $2120-$2121 DB_DATA 1
RANGE $2121-$2122 DB_DATA 1
RANGE $2122-$2123 DB_DATA 1
RANGE $2123-$2124 DB_DATA 1
RANGE $2124-$2125 DB_DATA 1
RANGE $2125-$2126 DB_DATA 1
RANGE $2126-$2127 DB_DATA 1
RANGE $2127-$2128 DB_DATA 1
RANGE $2128-$2129 DB_DATA 1
RANGE $2129-$212A DB_DATA 1
RANGE $212A-$212B DB_DATA 1
RANGE $212B-$212C DB_DATA 1
RANGE $212C-$212D DB_DATA 1
RANGE $212D-$212E DB_DATA 1
RANGE $212E-$212F DB_DATA 1
RANGE $212F-$2130 DB_DATA 1
RANGE $2130-$2131 DB_DATA 1
RANGE $2131-$2132 DB_DATA 1
RANGE $2132-$2133 DB_DATA 1
RANGE $2133-$2134 DB_DATA 1
RANGE $2134-$2135 DB_DATA 1
RANGE $2135-$2136 DB_DATA 1
RANGE $2136-$2137 DB_DATA 1
RANGE $2137-$2138 DB_DATA 1
RANGE $2138-$2139 DB_DATA 1
RANGE $2139-$213A DB_DATA 1
RANGE $213A-$213B DB_DATA 1
RANGE $213B-$213C DB_DATA 1
RANGE $213C-$213D DB_DATA 1
RANGE $213D-$213E DB_DATA 1
RANGE $213E-$213F DB_DATA 1
RANGE $213F-$2140 DB_DATA 1
RANGE $2140-$2141 DB_DATA 1
RANGE $2141-$2142 DB_DATA 1
RANGE $2142-$2143 DB_DATA 1
RANGE $2143-$2145 DB_DATA 2
RANGE $2145-$2147 DB_DATA 2
RANGE $2147-$2149 DB_DATA 2
RANGE $2149-$214B DB_DATA 2
RANGE $214B-$214D DB_DATA 2
RANGE $214D-$214F DB_DATA 2
RANGE $214F-$2151 DB_DATA 2
RANGE $2151-$2153 DB_DATA 2
RANGE $2153-$2155 DB_DATA 2
RANGE $2155-$2157 DB_DATA 2
RANGE $2157-$2159 DB_DATA 2
RANGE $2159-$215B DB_DATA 2
RANGE $215B-$215D DB_DATA 2
RANGE $215D-$215F DB_DATA 2
RANGE $215F-$2161 DB_DATA 2
RANGE $2161-$2163 DB_DATA 2
RANGE $2163-$2165 DB_DATA 2
RANGE $2165-$2167 DB_DATA 2
RANGE $2167-$2169 DB_DATA 2
RANGE $2169-$216B DB_DATA 2
RANGE $216B-$216D DB_DATA 2
RANGE $216D-$216F DB_DATA 2
RANGE $216F-$2171 DB_DATA 2
RANGE $2171-$2173 DB_DATA 2
RANGE $2173-$2175 DB_DATA 2
RANGE $2175-$2177 DB_DATA 2
RANGE $2177-$2179 DB_DATA 2
RANGE $2179-$217B DB_DATA 2
RANGE $217B-$217D DB_DATA 2
RANGE $217D-$217F DB_DATA 2
RANGE $217F-$2181 DB_DATA 2
RANGE $2181-$2183 DB_DATA 2
RANGE $2183-$2185 DB_DATA 2
RANGE $2185-$2187 DB_DATA 2
RANGE $2187-$2189 DB_DATA 2
RANGE $2189-$218B DB_DATA 2
RANGE $218B-$218D DB_DATA 2
RANGE $218D-$218F DB_DATA 2
RANGE $218F-$2191 DB_DATA 2
RANGE $2191-$2193 DB_DATA 2
RANGE $2193-$2195 DB_DATA 2
RANGE $2195-$2197 DB_DATA 2
RANGE $2197-$2199 DB_DATA 2
RANGE $2199-$219B DB_DATA 2
RANGE $219B-$219D DB_DATA 2
RANGE $219D-$219F DB_DATA 2
RANGE $219F-$21A1 DB_DATA 2
RANGE $21A1-$21A3 DB_DATA 2
RANGE $21A3-$21A5 DB_DATA 2
RANGE $21A5-$21A7 DB_DATA 2
RANGE $21A7-$21A9 DB_DATA 2
RANGE $21A9-$21AB DB_DATA 2
RANGE $21AB-$21AD DB_DATA 2
RANGE $21AD-$21AF DB_DATA 2
RANGE $21AF-$21B1 DB_DATA 2
RANGE $21B1-$21B3 DB_DATA 2
RANGE $21B3-$21B5 DB_DATA 2
RANGE $21B5-$21B7 DB_DATA 2
RANGE $21B7-$21B9 DB_DATA 2
RANGE $21B9-$21BB DB_DATA 2
RANGE $21BB-$21BD DB_DATA 2
RANGE $21BD-$21BF DB_DATA 2
RANGE $21BF-$21C1 DB_DATA 2
RANGE $21C1-$21C3 DB_DATA 2
RANGE $21C3-$21C5 DB_DATA 2
RANGE $21C5-$21C6 DB_DATA 1
RANGE $21C6-$21C7 DB_DATA 1
RANGE $21C7-$21C8 DB_DATA 1
RANGE $21C8-$21C9 DB_DATA 1
RANGE $21C9-$21CA DB_DATA 1
RANGE $21CA-$21CB DB_DATA 1
RANGE $21CB-$21CC DB_DATA 1
RANGE $21CC-$21CD DB_DATA 1
RANGE $21CD-$21CE DB_DATA 1
RANGE $21CE-$21CF DB_DATA 1
RANGE $21CF-$21D0 DB_DATA 1
RANGE $21D0-$21D1 DB_DATA 1
RANGE $21D1-$21D2 DB_DATA 1
RANGE $21D2-$21D3 DB_DATA 1
RANGE $21D3-$21D4 DB_DATA 1
RANGE $21D4-$21D5 DB_DATA 1
RANGE $21D5-$21D6 DB_DATA 1
RANGE $21D6-$21D7 DB_DATA 1
RANGE $21D7-$21D8 DB_DATA 1
RANGE $21D8-$21D9 DB_DATA 1
RANGE $21D9-$21DA DB_DATA 1
RANGE $21DA-$21DB DB_DATA 1
RANGE $21DB-$21DC DB_DATA 1
RANGE $21DC-$21DD DB_DATA 1
RANGE $21DD-$21DE DB_DATA 1
RANGE $21DE-$21DF DB_DATA 1
RANGE $21DF-$21E0 DB_DATA 1
RANGE $21E0-$21E1 DB_DATA 1
RANGE $21E1-$21E2 DB_DATA 1
RANGE $21E2-$21E3 DB_DATA 1
RANGE $21E3-$21E4 DB_DATA 1
RANGE $21E4-$21E5 DB_DATA 1
RANGE $21E5-$21E6 DB_DATA 1
RANGE $21E6-$21E7 DB_DATA 1
RANGE $21E7-$21E8 DB_DATA 1
RANGE $21E8-$21E9 DB_DATA 1
RANGE $21E9-$21EA DB_DATA 1
RANGE $21EA-$21EB DB_DATA 1
RANGE $21EB-$21EC DB_DATA 1
RANGE $21EC-$21ED DB_DATA 1
RANGE $21ED-$21EE DB_DATA 1
RANGE $21EE-$21EF DB_DATA 1
RANGE $21EF-$21F0 DB_DATA 1
RANGE $21F0-$21F1 DB_DATA 1
RANGE $21F1-$21F2 DB_DATA 1
RANGE $21F2-$21F3 DB_DATA 1
RANGE $21F3-$21F4 DB_DATA 1
RANGE $21F4-$21F5 DB_DATA 1
RANGE $21F5-$21F6 DB_DATA 1
RANGE $21F6-$21F7 DB_DATA 1
RANGE $21F7-$21F8 DB_DATA 1
RANGE $21F8-$21F9 DB_DATA 1
RANGE $21F9-$21FA DB_DATA 1
RANGE $21FA-$21FB DB_DATA 1
RANGE $21FB-$21FC DB_DATA 1
RANGE $21FC-$21FD DB_DATA 1
RANGE $21FD-$21FE DB_DATA 1
RANGE $21FE-$21FF DB_DATA 1
RANGE $21FF-$2200 DB_DATA 1
RANGE $2200-$2201 DB_DATA 1
RANGE $2201-$2202 DB_DATA 1
RANGE $2202-$2203 DB_DATA 1
RANGE $2203-$2204 DB_DATA 1
RANGE $2204-$2205 DB_DATA 1
RANGE $2205-$2206 DB_DATA 1
RANGE $2206-$2207 DB_DATA 1
RANGE $2207-$2208 DB_DATA 1
RANGE $2208-$2209 DB_DATA 1
RANGE $2209-$220A DB_DATA 1
RANGE $220A-$220B DB_DATA 1
RANGE $220B-$220C DB_DATA 1
RANGE $220C-$220D DB_DATA 1
RANGE $220D-$220E DB_DATA 1
RANGE $220E-$220F DB_DATA 1
RANGE $220F-$2210 DB_DATA 1
RANGE $2210-$2211 DB_DATA 1
RANGE $2211-$2212 DB_DATA 1
RANGE $2212-$2213 DB_DATA 1
RANGE $2213-$2214 DB_DATA 1
RANGE $2214-$2215 DB_DATA 1
RANGE $2215-$2216 DB_DATA 1
RANGE $2216-$2217 DB_DATA 1
RANGE $2217-$2218 DB_DATA 1
RANGE $2218-$2219 DB_DATA 1
RANGE $2219-$221A DB_DATA 1
RANGE $221A-$221B DB_DATA 1
RANGE $221B-$221C DB_DATA 1
RANGE $221C-$221D DB_DATA 1
RANGE $221D-$221E DB_DATA 1
RANGE $221E-$221F DB_DATA 1
RANGE $221F-$2220 DB_DATA 1
RANGE $2220-$2221 DB_DATA 1
RANGE $2221-$2222 DB_DATA 1
RANGE $2222-$2223 DB_DATA 1
RANGE $2223-$2224 DB_DATA 1
RANGE $2224-$2225 DB_DATA 1
RANGE $2225-$2226 DB_DATA 1
RANGE $2226-$2227 DB_DATA 1
RANGE $2227-$2228 DB_DATA 1
RANGE $2228-$2229 DB_DATA 1
RANGE $2229-$222A DB_DATA 1
RANGE $222A-$222B DB_DATA 1
RANGE $222B-$222C DB_DATA 1
RANGE $222C-$222D DB_DATA 1
RANGE $222D-$222E DB_DATA 1
RANGE $222E-$222F DB_DATA 1
RANGE $222F-$2230 DB_DATA 1
RANGE $2230-$2231 DB_DATA 1
RANGE $2231-$2232 DB_DATA 1
RANGE $2232-$2233 DB_DATA 1
RANGE $2233-$2234 DB_DATA 1
RANGE $2234-$2235 DB_DATA 1
RANGE $2235-$2236 DB_DATA 1
RANGE $2236-$2237 DB_DATA 1
RANGE $2237-$2238 DB_DATA 1
RANGE $2238-$2239 DB_DATA 1
RANGE $2239-$223A DB_DATA 1
RANGE $223A-$223B DB_DATA 1
RANGE $223B-$223C DB_DATA 1
RANGE $223C-$223D DB_DATA 1
RANGE $223D-$223E DB_DATA 1
RANGE $223E-$223F DB_DATA 1
RANGE $223F-$2240 DB_DATA 1
RANGE $2240-$2241 DB_DATA 1
RANGE $2241-$2242 DB_DATA 1
RANGE $2242-$2243 DB_DATA 1
RANGE $2243-$2244 DB_DATA 1
RANGE $2244-$2245 DB_DATA 1
RANGE $2245-$2246 DB_DATA 1
RANGE $2246-$2247 DB_DATA 1
RANGE $2247-$2248 DB_DATA 1
RANGE $2248-$2249 DB_DATA 1
RANGE $2249-$224A DB_DATA 1
RANGE $224A-$224B DB_DATA 1
RANGE $224B-$224C DB_DATA 1
RANGE $224C-$224D DB_DATA 1
RANGE $224D-$224E DB_DATA 1
RANGE $224E-$224F DB_DATA 1
RANGE $224F-$2250 DB_DATA 1
RANGE $2250-$2251 DB_DATA 1
RANGE $2251-$2252 DB_DATA 1
RANGE $2252-$2253 DB_DATA 1
RANGE $2253-$2254 DB_DATA 1
RANGE $2254-$2255 DB_DATA 1
RANGE $2255-$2256 DB_DATA 1
RANGE $2256-$2257 DB_DATA 1
RANGE $2257-$2258 DB_DATA 1
RANGE $2258-$2259 DB_DATA 1
RANGE $2259-$225A DB_DATA 1
RANGE $225A-$225B DB_DATA 1
RANGE $225B-$225C DB_DATA 1
RANGE $225C-$225D DB_DATA 1
RANGE $225D-$225E DB_DATA 1
RANGE $225E-$225F DB_DATA 1
RANGE $225F-$2260 DB_DATA 1
RANGE $2260-$2261 DB_DATA 1
RANGE $2261-$2262 DB_DATA 1
RANGE $2262-$2263 DB_DATA 1
RANGE $2263-$2264 DB_DATA 1
RANGE $2264-$2265 DB_DATA 1
RANGE $2265-$2266 DB_DATA 1
RANGE $2266-$2267 DB_DATA 1
RANGE $2267-$2268 DB_DATA 1
RANGE $2268-$2269 DB_DATA 1
RANGE $2269-$226A DB_DATA 1
RANGE $226A-$226B DB_DATA 1
RANGE $226B-$226C DB_DATA 1
RANGE $226C-$226D DB_DATA 1
RANGE $226D-$226E DB_DATA 1
RANGE $226E-$226F DB_DATA 1
RANGE $226F-$2270 DB_DATA 1
RANGE $2270-$2271 DB_DATA 1
RANGE $2271-$2272 DB_DATA 1
RANGE $2272-$2273 DB_DATA 1
RANGE $2273-$2274 DB_DATA 1
RANGE $2274-$2275 DB_DATA 1
RANGE $2275-$2276 DB_DATA 1
RANGE $2276-$2277 DB_DATA 1
RANGE $2277-$2278 DB_DATA 1
RANGE $2278-$2279 DB_DATA 1
RANGE $2279-$227A DB_DATA 1
RANGE $227A-$227B DB_DATA 1
RANGE $227B-$227C DB_DATA 1
RANGE $227C-$227D DB_DATA 1
RANGE $227D-$227E DB_DATA 1
RANGE $227E-$227F DB_DATA 1
RANGE $227F-$2280 DB_DATA 1
RANGE $2280-$2281 DB_DATA 1
RANGE $2281-$2282 DB_DATA 1
RANGE $2282-$2283 DB_DATA 1
RANGE $2283-$2284 DB_DATA 1
RANGE $2284-$2285 DB_DATA 1
RANGE $2285-$2286 DB_DATA 1
RANGE $2286-$2287 DB_DATA 1
RANGE $2287-$2288 DB_DATA 1
RANGE $2288-$2289 DB_DATA 1
RANGE $2289-$228A DB_DATA 1
RANGE $228A-$228B DB_DATA 1
RANGE $228B-$228C DB_DATA 1
RANGE $228C-$228D DB_DATA 1
RANGE $228D-$228E DB_DATA 1
RANGE $228E-$228F DB_DATA 1
RANGE $228F-$2290 DB_DATA 1
RANGE $2290-$2291 DB_DATA 1
RANGE $2291-$2292 DB_DATA 1
RANGE $2292-$2293 DB_DATA 1
RANGE $2293-$2294 DB_DATA 1
RANGE $2294-$2295 DB_DATA 1
RANGE $2295-$2296 DB_DATA 1
RANGE $2296-$2297 DB_DATA 1
RANGE $2297-$2298 DB_DATA 1
RANGE $2298-$2299 DB_DATA 1
RANGE $2299-$229A DB_DATA 1
RANGE $229A-$229B DB_DATA 1
RANGE $229B-$229C DB_DATA 1
RANGE $229C-$229D DB_DATA 1
RANGE $229D-$229E DB_DATA 1
RANGE $229E-$229F DB_DATA 1
RANGE $229F-$22A0 DB_DATA 1
RANGE $22A0-$22A1 DB_DATA 1
RANGE $22A1-$22A2 DB_DATA 1
RANGE $22A2-$22A3 DB_DATA 1
RANGE $22A3-$22A4 DB_DATA 1
RANGE $22A4-$22A5 DB_DATA 1
RANGE $22A5-$22A6 DB_DATA 1
RANGE $22A6-$22A7 DB_DATA 1
RANGE $22A7-$22A8 DB_DATA 1
RANGE $22A8-$22A9 DB_DATA 1
RANGE $22A9-$22AA DB_DATA 1
RANGE $22AA-$22AB DB_DATA 1
RANGE $22AB-$22AC DB_DATA 1
RANGE $22AC-$22AD DB_DATA 1
RANGE $22AD-$22AE DB_DATA 1
RANGE $22AE-$22AF DB_DATA 1
RANGE $22AF-$22B0 DB_DATA 1
RANGE $22B0-$22B1 DB_DATA 1
RANGE $22B1-$22B2 DB_DATA 1
RANGE $22B2-$22B3 DB_DATA 1
RANGE $22B3-$22B4 DB_DATA 1
RANGE $22B4-$22B5 DB_DATA 1
RANGE $22B5-$22B6 DB_DATA 1
RANGE $22B6-$22B7 DB_DATA 1
RANGE $22B7-$22B8 DB_DATA 1
RANGE $22B8-$22B9 DB_DATA 1
RANGE $22B9-$22BA DB_DATA 1
RANGE $22BA-$22BB DB_DATA 1
RANGE $22BB-$22BC DB_DATA 1
RANGE $22BC-$22BD DB_DATA 1
RANGE $22BD-$22BE DB_DATA 1
RANGE $22BE-$22BF DB_DATA 1
RANGE $22BF-$22C0 DB_DATA 1
RANGE $22C0-$22C1 DB_DATA 1
RANGE $22C1-$22C2 DB_DATA 1
RANGE $22C2-$22C3 DB_DATA 1
RANGE $22C3-$22C4 DB_DATA 1
RANGE $22C4-$22C5 DB_DATA 1
RANGE $22C5-$22C9 DB_DATA 4
RANGE $22C9-$22CD DB_DATA 4
RANGE $22CD-$22D1 DB_DATA 4
RANGE $22D1-$22D5 DB_DATA 4
RANGE $22D5-$22D9 DB_DATA 4
RANGE $22D9-$22DD DB_DATA 4
RANGE $22DD-$22E1 DB_DATA 4
RANGE $22E1-$22E5 DB_DATA 4
RANGE $22E5-$22E9 DB_DATA 4
RANGE $22E9-$22ED DB_DATA 4
RANGE $22ED-$22F1 DB_DATA 4
RANGE $22F1-$22F5 DB_DATA 4
RANGE $22F5-$22F9 DB_DATA 4
RANGE $22F9-$22FD DB_DATA 4
RANGE $22FD-$2301 DB_DATA 4
RANGE $2301-$2305 DB_DATA 4
RANGE $2305-$2309 DB_DATA 4
RANGE $2309-$230D DB_DATA 4
RANGE $230D-$2311 DB_DATA 4
RANGE $2311-$2315 DB_DATA 4
RANGE $2315-$2319 DB_DATA 4
RANGE $2319-$231D DB_DATA 4
RANGE $231D-$2321 DB_DATA 4
RANGE $2321-$2325 DB_DATA 4
RANGE $2325-$2329 DB_DATA 4
RANGE $2329-$232D DB_DATA 4
RANGE $232D-$2331 DB_DATA 4
RANGE $2331-$2335 DB_DATA 4
RANGE $2335-$2339 DB_DATA 4
RANGE $2339-$233D DB_DATA 4
RANGE $233D-$2341 DB_DATA 4
RANGE $2341-$2345 DB_DATA 4
RANGE $2345-$2349 DB_DATA 4
RANGE $2349-$234D DB_DATA 4
RANGE $234D-$2351 DB_DATA 4
RANGE $2351-$2355 DB_DATA 4
RANGE $2355-$2359 DB_DATA 4
RANGE $2359-$235D DB_DATA 4
RANGE $235D-$2361 DB_DATA 4
RANGE $2361-$2365 DB_DATA 4
RANGE $2365-$2369 DB_DATA 4
RANGE $2369-$236D DB_DATA 4
RANGE $236D-$2371 DB_DATA 4
RANGE $2371-$2375 DB_DATA 4
RANGE $2375-$2379 DB_DATA 4
RANGE $2379-$237D DB_DATA 4
RANGE $237D-$2381 DB_DATA 4
RANGE $2381-$2385 DB_DATA 4
RANGE $2385-$2389 DB_DATA 4
RANGE $2389-$238D DB_DATA 4
RANGE $238D-$2391 DB_DATA 4
RANGE $2391-$2395 DB_DATA 4
RANGE $2395-$2399 DB_DATA 4
RANGE $2399-$239D DB_DATA 4
RANGE $239D-$23A1 DB_DATA 4
RANGE $23A1-$23A5 DB_DATA 4
RANGE $23A5-$23A9 DB_DATA 4
RANGE $23A9-$23AD DB_DATA 4
RANGE $23AD-$23B1 DB_DATA 4
RANGE $23B1-$23B5 DB_DATA 4
RANGE $23B5-$23B9 DB_DATA 4
RANGE $23B9-$23BD DB_DATA 4
RANGE $23BD-$23C1 DB_DATA 4
RANGE $23C1-$23C5 DB_DATA 4
RANGE $23C5-$23C7 DB_DATA 2
RANGE $23C7-$23C9 DB_DATA 2
RANGE $23C9-$23CB DB_DATA 2
RANGE $23CB-$23CD DB_DATA 2
RANGE $23CD-$23CF DB_DATA 2
RANGE $23CF-$23D1 DB_DATA 2
RANGE $23D1-$23D3 DB_DATA 2
RANGE $23D3-$23D5 DB_DATA 2
RANGE $23D5-$23D7 DB_DATA 2
RANGE $23D7-$23D9 DB_DATA 2
RANGE $23D9-$23DB DB_DATA 2
RANGE $23DB-$23DD DB_DATA 2
RANGE $23DD-$23DF DB_DATA 2
RANGE $23DF-$23E1 DB_DATA 2
RANGE $23E1-$23E3 DB_DATA 2
RANGE $23E3-$23E5 DB_DATA 2
RANGE $23E5-$23E7 DB_DATA 2
RANGE $23E7-$23E9 DB_DATA 2
RANGE $23E9-$23EB DB_DATA 2
RANGE $23EB-$23ED DB_DATA 2
RANGE $23ED-$23EF DB_DATA 2
RANGE $23EF-$23F1 DB_DATA 2
RANGE $23F1-$23F3 DB_DATA 2
RANGE $23F3-$23F5 DB_DATA 2
RANGE $23F5-$23F7 DB_DATA 2
RANGE $23F7-$23F9 DB_DATA 2
RANGE $23F9-$23FB DB_DATA 2
RANGE $23FB-$23FD DB_DATA 2
RANGE $23FD-$23FF DB_DATA 2
RANGE $23FF-$2401 DB_DATA 2
RANGE $2401-$2403 DB_DATA 2
RANGE $2403-$2405 DB_DATA 2
RANGE $2405-$2407 DB_DATA 2
RANGE $2407-$2409 DB_DATA 2
RANGE $2409-$240B DB_DATA 2
RANGE $240B-$240D DB_DATA 2
RANGE $240D-$240F DB_DATA 2
RANGE $240F-$2411 DB_DATA 2
RANGE $2411-$2413 DB_DATA 2
RANGE $2413-$2415 DB_DATA 2
RANGE $2415-$2417 DB_DATA 2
RANGE $2417-$2419 DB_DATA 2
RANGE $2419-$241B DB_DATA 2
RANGE $241B-$241D DB_DATA 2
RANGE $241D-$241F DB_DATA 2
RANGE $241F-$2421 DB_DATA 2
RANGE $2421-$2423 DB_DATA 2
RANGE $2423-$2425 DB_DATA 2
RANGE $2425-$2427 DB_DATA 2
RANGE $2427-$2429 DB_DATA 2
RANGE $2429-$242B DB_DATA 2
RANGE $242B-$242D DB_DATA 2
RANGE $242D-$242F DB_DATA 2
RANGE $242F-$2431 DB_DATA 2
RANGE $2431-$2433 DB_DATA 2
RANGE $2433-$2435 DB_DATA 2
RANGE $2435-$2437 DB_DATA 2
RANGE $2437-$2439 DB_DATA 2
RANGE $2439-$243B DB_DATA 2
RANGE $243B-$243D DB_DATA 2
RANGE $243D-$243F DB_DATA 2
RANGE $243F-$2441 DB_DATA 2
RANGE $2441-$2443 DB_DATA 2
RANGE $2443-$2445 DB_DATA 2
RANGE $2445-$2447 DB_DATA 2
RANGE $2447-$2448 DB_DATA 1
RANGE $2448-$2449 DB_DATA 1
RANGE $2449-$244A DB_DATA 1
RANGE $244A-$244B DB_DATA 1
RANGE $244B-$244C DB_DATA 1
RANGE $244C-$244D DB_DATA 1
RANGE $244D-$244E DB_DATA 1
RANGE $244E-$244F DB_DATA 1
RANGE $244F-$2450 DB_DATA 1
RANGE $2450-$2451 DB_DATA 1
RANGE $2451-$2452 DB_DATA 1
RANGE $2452-$2453 DB_DATA 1
RANGE $2453-$2454 DB_DATA 1
RANGE $2454-$2455 DB_DATA 1
RANGE $2455-$2456 DB_DATA 1
RANGE $2456-$2457 DB_DATA 1
RANGE $2457-$2458 DB_DATA 1
RANGE $2458-$2459 DB_DATA 1
RANGE $2459-$245A DB_DATA 1
RANGE $245A-$245B DB_DATA 1
RANGE $245B-$245C DB_DATA 1
RANGE $245C-$245D DB_DATA 1
RANGE $245D-$245E DB_DATA 1
RANGE $245E-$245F DB_DATA 1
RANGE $245F-$2460 DB_DATA 1
RANGE $2460-$2461 DB_DATA 1
RANGE $2461-$2462 DB_DATA 1
RANGE $2462-$2463 DB_DATA 1
RANGE $2463-$2464 DB_DATA 1
RANGE $2464-$2465 DB_DATA 1
RANGE $2465-$2466 DB_DATA 1
RANGE $2466-$2467 DB_DATA 1
RANGE $2467-$2482 CODE
RANGE $2482-$2483 DB_DATA 1
RANGE $2483-$2484 DB_DATA 1
RANGE $2484-$2485 DB_DATA 1
RANGE $2485-$2486 DB_DATA 1
RANGE $2486-$2487 DB_DATA 1
RANGE $2487-$2488 DB_DATA 1
RANGE $2488-$2489 DB_DATA 1
RANGE $2489-$248A DB_DATA 1
RANGE $248A-$248B DB_DATA 1
RANGE $248B-$248C DB_DATA 1
RANGE $248C-$248D DB_DATA 1
RANGE $248D-$248E DB_DATA 1
RANGE $248E-$248F DB_DATA 1
RANGE $248F-$2490 DB_DATA 1
RANGE $2490-$2491 DB_DATA 1
RANGE $2491-$2492 DB_DATA 1

