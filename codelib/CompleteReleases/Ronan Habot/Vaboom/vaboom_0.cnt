BANK 0
EQU $00 
LABEL $F192 Wait_Recal
LABEL $D004 VIA_t1_cnt_lo
LABEL $C856 Vec_Music_Flag
LABEL $C867 Vec_Expl_Flag
LABEL $C829 Vec_line_pat
LABEL $C823 Vec_Misc_Count
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F312 Moveto_d
LABEL $F30C Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F434 Draw_Pat_VL_a
LABEL $F3CE Draw_VLc
LABEL $F410 Draw_VLp
LABEL $F56D Delay_3
LABEL $F57A Delay_b
LABEL $F1BA Read_Btns
LABEL $F378 Print_Str_xy
LABEL $F37A Print_Str_d
LABEL $F3BE Mov_Draw_VL_d
LABEL $F3DF Draw_line_d
LABEL $F34A Reset0Ref_D0
LABEL $F354 Reset0Ref
LABEL $F2D5 Dot_list
LABEL $F2C5 Dot_here
LABEL $F511 random
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_D8
LABEL $F8FF Obj_Hit
LABEL $C82A Vec_Text_HW
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $C81F JOYENS
COMMENT_LABEL $C81F JOYSTICK ENABLES (4 BYTES)
LABEL $F1F8 Joy_Digital
LABEL $F1F5 Joy_Analog
LABEL $C81A Vec_Joy_Resltn
LABEL $C81B Vec_Joy_1_X
LABEL $C81C Vec_Joy_1_Y
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $CBEB Vec_High_Score
LABEL $F393 Print_Ships
LABEL $F06C Warm_Start
LABEL $F000 Cold_Start
LABEL $FD0D Music1
LABEL $FD1D Music2
LABEL $FD81 Music3
LABEL $FDD3 Music4
LABEL $FE38 Music5
LABEL $FE76 Music6
LABEL $FEC6 Music7
LABEL $FEF8 Music8
LABEL $FF26 Music9
LABEL $FF44 Musica
LABEL $FF62 Musicb
LABEL $FF7A Musicc
LABEL $FF8F Musicd
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte2
LABEL $F27D copy_bytes_2_sound_chip
LABEL $F548 Clear_x_d
LABEL $F289 Do_Sound
LABEL $F687 Init_Music_chk
LABEL $F53F Clear_x_b
LABEL $F92E Explod
LABEL $C880 ManYpos
LABEL $C881 ManXpos
LABEL $C882 ManMovDir
LABEL $C883 CurBombsNum
LABEL $C884 BombLoopCntr
LABEL $C885 cheatOnFlag
LABEL $C886 JoyType
LABEL $C887 LastAnalogVal
LABEL $C888 DivResult
LABEL $C889 DivRemain
LABEL $C890 Pile1Type
LABEL $C891 Pile1Ypos
LABEL $C892 Pile1Xpos
LABEL $C893 Pile2Type
LABEL $C894 Pile2Ypos
LABEL $C895 Pile2Xpos
LABEL $C896 Pile3Type
LABEL $C897 Pile3Ypos
LABEL $C898 Pile3Xpos
LABEL $C899 PileMoveDir
LABEL $C89A BombsInPile
COMMENT_LABEL $C89A C99A
LABEL $C89B BricksCnt
LABEL $C9C0 menu_ram_str
LABEL $CA00 bomb_pos_tbl
LABEL $CB00 bomb_param_tbl
LABEL $C950 Score_tbl
LABEL $C958 dbg1_tbl
LABEL $C960 dbg2_tbl
COMMENT_LABEL $C960 RealTime clock table
LABEL $C970 CurLvl
LABEL $C971 BombsToDraw
LABEL $C974 PilesToDraw
LABEL $C975 CurLvlBombs
LABEL $C976 CurLvlManSpeed
LABEL $C977 CurLvlBombSpeed
LABEL $C978 CurLvlBombBounce
LABEL $C979 CurLvlDropRate
LABEL $C97A HeartYpos
LABEL $C97B HeartXpos
LABEL $C97C HeartOnFlag
LABEL $C97D TotalBombs
LABEL $C97E ChkHeartFlag
LABEL $C97F MidLeftRtrn
LABEL $C980 explsn_num
LABEL $C981 explsn_scale
LABEL $C982 ExplsnFlag
LABEL $C987 TmpScale
LABEL $C988 TmpYpos
LABEL $C989 TmpXpos
LABEL $C98B LtrParamSet
LABEL $C98C CurLtr
LABEL $C98D ManHit
LABEL $C98E NoMoreHitFlag
LABEL $C98F BonusRndFlag
LABEL $C990 PrintMenuFlag
LABEL $C991 ExOnFlag
LABEL $C992 ExYpos
LABEL $C993 ExXpos
LABEL $C994 ChkExFlag
LABEL $C995 gameOverFlag
LABEL $C996 hitSndFlag
LABEL $C997 catchSndFlag
LABEL $C998 goodSndFlag
LABEL $C999 fallSndFlag
LABEL $C99A badSndFlag
LABEL $C99B diamondOnFlag
LABEL $C99C diamondYpos
LABEL $C99D diamondXpos
LABEL $C99E ChkDiamondFlag
LABEL $C8A0 current_register
LABEL $C8A1 temp
LABEL $C8A2 temp2
LABEL $C8A3 temp3
LABEL $C8A4 calc_coder
LABEL $C8A5 calc_bits
LABEL $C8A6 ym_data_len
LABEL $C8A8 ym_data_current
LABEL $C8AA ym_name
LABEL $C8AC Vec_Text_Width_neg
LABEL $C8AD dropManFlag
LABEL $C8AE BarYpos
EQU $0A MAN_HITS_TO_BONUS
COMMENT_LABEL $0A Hits amount for bonus round
LABEL $0087 MAX_LEFT_MOV
COMMENT_LABEL $0087 Most left  = 0x80 (-127)
EQU $57 MAX_RIGHT_MOV
COMMENT_LABEL $57 Most right = 0x7f (+127)
LABEL $5030 HSCORE_POS
LABEL $50A0 SCORE_POS
EQU $50 BOMB_Y_START
EQU $60 MAN_Y_POS
EQU $05 LEVELS_PER_PARAM
EQU $05 PARAM_TBL_SIZE
EQU $07 MOVE_PILE_SPEED
EQU $0A BOMB_SCORE
EQU $69 MAX_BOMBS
COMMENT_LABEL $69 maximum bombs number
LABEL $00F7 CENTER_PILE
LABEL $0000 SET_TO_0
EQU $01 SET_TO_1
EQU $00 INFO_START
EQU $00 BYTE_POSITION
EQU $02 BIT_POSITION
EQU $03 CURRENT_BYTE
EQU $04 CURRENT_UNPACKED_BYTE
EQU $05 CURRENT_RLE_COUNTER
EQU $07 CURRENT_RLE_MAPPER
EQU $09 CURRENT_IS_PHRASE
EQU $0B CURRENT_PHRASE_BYTE
EQU $0C CURRENT_PHRASE_START
EQU $0E INFO_END
EQU $0E STRUCTURE_LENGTH
LABEL $C8AF ym_data_start
EQU $1A entry_point
LABEL $05B8 start
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
EQU $1D _my_Char_Tableb1
EQU $6D _my_Char_Tableb2
LABEL $00BD _my_Char_Tableb3
LABEL $F9D4 Char_Tablef1
LABEL $FA74 Char_Tablef2
LABEL $FB14 Char_Tablef3
LABEL $FBB4 Char_Tablef4
EQU -$03 Char_Tableb1
EQU $4D Char_Tableb2
LABEL $009D Char_Tableb3
LABEL $010D my_Print_Str_hwyx
LABEL $012C LF33D2
LABEL $013B LF4A53
LABEL $0158 LF4C7_14
LABEL $018A LF4C7_26
LABEL $01BC LF4C7_18
LABEL $01EE LF4C7_210
LABEL $0220 LF4C7_112
LABEL $0252 LF4C7_214
LABEL $0284 LF4C7_116
LABEL $028E LF50A3
LABEL $0299 my_Print_Str
LABEL $02A2 LF4A518
LABEL $02BF LF4C7_119
LABEL $02F1 LF4C7_221
LABEL $0323 LF4C7_123
LABEL $0355 LF4C7_225
LABEL $0387 LF4C7_127
LABEL $03B9 LF4C7_229
LABEL $03EB LF4C7_131
LABEL $03F5 LF50A18
LABEL $0400 my_Print_List
LABEL $0400 Print_List133
LABEL $041A LF33D35
LABEL $0429 LF4A536
LABEL $0446 LF4C7_137
LABEL $0478 LF4C7_239
LABEL $04AA LF4C7_141
LABEL $04DC LF4C7_243
LABEL $050E LF4C7_145
LABEL $0540 LF4C7_247
LABEL $0572 LF4C7_149
LABEL $057C LF50A36
LABEL $058E my_Print_Ships
LABEL $05A4 LF3A3_
LABEL $0B1D init
LABEL $05EF opening
LABEL $05BE main
LABEL $0AF2 refresh_scrn
LABEL $170D check_status
LABEL $13C1 draw_background
LABEL $195D checkjoystick
LABEL $1005 draw_man
LABEL $10D1 draw_piles
LABEL $0D2E draw_bombs
LABEL $11F5 draw_heart
LABEL $128C draw_diamond
LABEL $1323 draw_ex
LABEL $15B2 check_snd
LABEL $1562 print_info
LABEL $05E4 stop_music
LABEL $2A20 SONG_DATA
LABEL $2305 init_ym_sound
LABEL $05FD opening_loop
LABEL $1D97 print_vaboom
LABEL $1BF6 open1_string
LABEL $062C LF33D53
LABEL $063B LF4A554
LABEL $0658 LF4C7_155
LABEL $068A LF4C7_257
LABEL $06BC LF4C7_159
LABEL $06EE LF4C7_261
LABEL $0720 LF4C7_163
LABEL $0752 LF4C7_265
LABEL $0784 LF4C7_167
LABEL $078E LF50A54
LABEL $1C10 open2_string
LABEL $07BA LF33D71
LABEL $07C9 LF4A572
LABEL $07E6 LF4C7_173
LABEL $0818 LF4C7_275
LABEL $084A LF4C7_177
LABEL $087C LF4C7_279
LABEL $08AE LF4C7_181
LABEL $08E0 LF4C7_283
LABEL $0912 LF4C7_185
LABEL $091C LF50A72
LABEL $1C3F open3_string
LABEL $0948 LF33D89
LABEL $0957 LF4A590
LABEL $0974 LF4C7_191
LABEL $09A6 LF4C7_293
LABEL $09D8 LF4C7_195
LABEL $0A0A LF4C7_297
LABEL $0A3C LF4C7_199
LABEL $0A6E LF4C7_2101
LABEL $0AA0 LF4C7_1103
LABEL $0AAA LF50A90
LABEL $0AB4 start_music
LABEL $21CE do_ym_sound
LABEL $0ABE wait_btn
LABEL $0AC7 normal_play
LABEL $0AD2 chk_btn1_4
LABEL $0B12 recal
LABEL $0B15 no_recal
LABEL $194E setjoystick
LABEL $1A33 menu_rom_str
LABEL $0B8E keep_copy
COMMENT_LABEL $0B8E Copy the menu string from the ROM to
LABEL $0BB0 level_init
LABEL $0BAF init_done
LABEL $0BFE set_new_level
LABEL $0D29 param_bonus
LABEL $0C7E not_new_level
LABEL $0FF4 divide_x
LABEL $0CC5 param_table
LABEL $1A70 mark_str
LABEL $0C36 copy_remark
COMMENT_LABEL $0C36 Copy the remark from the ROM to the RAM
LABEL $0C49 dont_change_param
LABEL $19CA game_over
LABEL $0C55 keep_chk_lvl
COMMENT_LABEL $0C55 Check id Level #1, if so, the remark
LABEL $0C68 chk_lvl2
LABEL $1A63 welcome_str
LABEL $0C61 copy_welcome
LABEL $0C77 copy_rem1
LABEL $0CA8 adj_man_x
LABEL $191A d_to_bcd
LABEL $18F5 a_to_hex
LABEL $0CBA adjust_Xpos
LABEL $0D78 no_new_bomb
LABEL $0D46 drop_new_bomb
LABEL $0D76 store_new_xy
LABEL $0E99 draw_bombs_end
LABEL $0D88 draw_the_bombs
LABEL $0D94 dont_draw
LABEL $0F86 draw_a_bomb
LABEL $0D98 mov_bombs_in_table
COMMENT_LABEL $0D98 now, no more drawing, prepare for next
LABEL $0DA1 mov_bomb_loop
LABEL $0DAA keep_moving
LABEL $0E90 update_index
LABEL $0E3C move_down
LABEL $0DB4 move_up
LABEL $0DCB move_diagonal
LABEL $0E4D turn_bomb_off
LABEL $0E08 no_hit_chance
LABEL $0E06 no_man_hit
LABEL $153A bricks_loc
LABEL $1575 do_explosion
LABEL $0E26 move_left
LABEL $0E10 move_right
LABEL $0E22 store_right
LABEL $0E38 store_left
LABEL $0E84 catch_check
LABEL $0E7E only_off
LABEL $0E6F end_of_cheat
LABEL $0E7B set_game_over
COMMENT_LABEL $0E7B otherwise, adjust the numbe to be 1
LABEL $0E9E catch_chk
LABEL $0E92 not_at_bottom
LABEL $0EB8 no_3_piles
LABEL $0ECC tst_hit
LABEL $0EC5 no_2_piles
LABEL $0F83 no_hit
LABEL $0ED3 proceed_hit
LABEL $0F62 diamond_catch
LABEL $0F4E ex_catch
LABEL $0F32 heart_catch
LABEL $0F2C regular_bomb
LABEL $0F0F chk_if2
LABEL $0F1B set_y_done
LABEL $0F18 chk_if1
LABEL $0F72 score_hit
LABEL $0F44 score_heart
COMMENT_LABEL $0F44 HEART score = 50 points
LABEL $0F7D one_bomb_score
LABEL $0F83 catch_chk_end
LABEL $0FF1 end_of_draw
LABEL $0FA1 LF33D105
LABEL $1CD7 bomb
LABEL $0FB2 _DRAW_VLA106
LABEL $0FD0 _DRAW_END106
LABEL $0FC7 LF_1106
LABEL $0FD2 LF_2106
LABEL $0FE7 LF_3106
LABEL $0FF8 repeat_div
LABEL $1002 a_smaller_then_b
LABEL $1018 keep_man_moving
LABEL $1069 x_man_rdy
LABEL $101F mov_man
LABEL $1054 mov_right
LABEL $1024 mov_left
LABEL $1042 chng_to_right
LABEL $1037 no_lft_mid_rtrn
LABEL $103D store_x0
LABEL $104C set_midrtrn
LABEL $104F set_man_dir_flag
LABEL $1066 chng_to_left
LABEL $1061 store_x1
LABEL $107B man_at_top
LABEL $1080 man_to_xy
LABEL $1CA6 man
LABEL $1093 _DRAW_VLA107
LABEL $10B1 _DRAW_END107
LABEL $10A8 LF_1107
LABEL $10B3 LF_2107
LABEL $10C8 LF_3107
LABEL $1137 two_piles
LABEL $1D33 pile
LABEL $10FA _DRAW_VLA108
LABEL $1118 _DRAW_END108
LABEL $110F LF_1108
LABEL $111A LF_2108
LABEL $112F LF_3108
LABEL $113E byps_chk
LABEL $1196 one_pile
LABEL $115B _DRAW_VLA109
LABEL $1179 _DRAW_END109
LABEL $1170 LF_1109
LABEL $117B LF_2109
LABEL $1190 LF_3109
LABEL $11B3 _DRAW_VLA110
LABEL $11D1 _DRAW_END110
LABEL $11C8 LF_1110
LABEL $11D3 LF_2110
LABEL $11E8 LF_3110
LABEL $121A move_heart
LABEL $1208 check_heart_flag
LABEL $120F drop_heart
LABEL $1289 dont_drop_heart
LABEL $1234 update_heart_loc
LABEL $1228 catch_heart_check
LABEL $1CF0 heart
LABEL $124E _DRAW_VLA111
LABEL $126C _DRAW_END111
LABEL $1263 LF_1111
LABEL $126E LF_2111
LABEL $1283 LF_3111
LABEL $12B1 move_diamond
LABEL $129F check_diamond_flag
LABEL $12A6 drop_diamond
LABEL $1320 dont_drop_diamond
LABEL $12CB update_diamond_loc
LABEL $12BF catch_diamond_check
LABEL $1D05 diamond
LABEL $12E5 _DRAW_VLA112
LABEL $1303 _DRAW_END112
LABEL $12FA LF_1112
LABEL $1305 LF_2112
LABEL $131A LF_3112
LABEL $134A move_ex
LABEL $1336 check_ex_flag
LABEL $133F drop_ex
LABEL $13BE dont_drop_ex
LABEL $1369 update_ex_loc
LABEL $1358 catch_ex_check
LABEL $1D1A ex
LABEL $1383 _DRAW_VLA113
LABEL $13A1 _DRAW_END113
LABEL $1398 LF_1113
LABEL $13A3 LF_2113
LABEL $13B8 LF_3113
LABEL $13E9 stay_at_top
LABEL $13EF move_to_xy
LABEL $1D4C bckgnd
LABEL $13FB _DRAW_VLA114
LABEL $1419 _DRAW_END114
LABEL $1410 LF_1114
LABEL $141B LF_2114
LABEL $1430 LF_3114
LABEL $143C draw_supports
LABEL $144A put_more_bricks
LABEL $1539 bonus_round
LABEL $1473 LF33D118
LABEL $1D5D single_brick
LABEL $1484 _DRAW_VLA119
LABEL $14A2 _DRAW_END119
LABEL $1499 LF_1119
LABEL $14A4 LF_2119
LABEL $14B9 LF_3119
LABEL $14E3 LF33D123
LABEL $14F4 _DRAW_VLA124
LABEL $1512 _DRAW_END124
LABEL $1509 LF_1124
LABEL $1514 LF_2124
LABEL $1529 LF_3124
LABEL $156B print_values
LABEL $157A explsn_loop
LABEL $1D66 explsn_vec_list
LABEL $15A2 delay_loop
LABEL $15AB cont_to_draw_rest
LABEL $15B4 is_hit
LABEL $15BB hit_snd
LABEL $15EA is_catch
LABEL $15CC do_hit_snd
LABEL $15C0 stop_hit_snd
LABEL $16E6 explsn_vol
LABEL $15F1 catch_snd
LABEL $1629 is_good
COMMENT_LABEL $1629 using channel 3
LABEL $1602 do_catch_snd
LABEL $16F1 catch_tones
LABEL $1630 good_snd
LABEL $1668 is_man_fall
LABEL $1641 do_good_snd
LABEL $16F6 good_tones
LABEL $166F fall_snd
LABEL $16A4 is_bad
LABEL $1680 do_fall_snd
LABEL $16AB bad_snd
LABEL $16E3 noSnd
LABEL $16BC do_bad_snd
LABEL $1702 bad_vol
LABEL $1731 chck_drop_bar
LABEL $1742 goto_level_init
LABEL $1737 no_bonus_now
LABEL $1752 prnt_menu
LABEL $1756 do_menu
LABEL $175C prepare_menu
LABEL $176B prnt_reg_menu
LABEL $1764 prnt_bonus_menu
LABEL $1B74 bonus_str
LABEL $1788 LF33D129
LABEL $1797 LF4A5130
LABEL $17B4 LF4C7_1131
LABEL $17E6 LF4C7_2133
LABEL $1818 LF4C7_1135
LABEL $184A LF4C7_2137
LABEL $187C LF4C7_1139
LABEL $18AE LF4C7_2141
LABEL $18E0 LF4C7_1143
LABEL $18EA LF50A130
LABEL $1903 addm_0x30
LABEL $1912 addl_0x30
LABEL $191D check_1000
LABEL $192C check_100
LABEL $193B check_10
LABEL $1949 complete_bcd
LABEL $1971 analog_stick
LABEL $1962 digital_stick
LABEL $19AB x_done
LABEL $199F left_move
LABEL $1991 right_move
LABEL $19B4 chk_btns
LABEL $1989 rot_left
LABEL $1984 rot_right
LABEL $198C analog_done
LABEL $19B8 check_btns
LABEL $19C9 return_back
LABEL $19BF check_btn1_1and4
LABEL $19D6 closing_loop
LABEL $19E0 no_flag_set
LABEL $1A0C no_hi_score
LABEL $1C67 score_string
LABEL $1C6F hscore_string
LABEL $1C7A close0_string
LABEL $1C87 close1_string
LABEL $1B97 bonus_clr
LABEL $1BBA menu_rom_clr_str
LABEL $1BE8 open0_string
LABEL $1CA6 car1_vector_list
LABEL $1DA8 print_a
LABEL $1D9E print_v
LABEL $2127 V_Vl
LABEL $2077 move_ltr
LABEL $1E24 draw_v
LABEL $1DBC print_b
LABEL $20FF A_Vl
LABEL $1E79 draw_a
LABEL $1DD0 print_o1
LABEL $2140 B_Vl
LABEL $1ECE draw_b
LABEL $1DE4 print_o2
LABEL $2171 O_Vl
LABEL $1F23 draw_o1
LABEL $1DF8 print_m
LABEL $1F78 draw_o2
LABEL $1E0C print_i
LABEL $218D M_Vl
LABEL $1FCD draw_m
LABEL $1E20 vaboom_printed
LABEL $21B2 i_Vl
LABEL $2022 draw_i
LABEL $1E46 LF33D146
LABEL $1E4E dvlp1147
LABEL $1E6F dvlpEnd147
LABEL $1E67 dvlp2147
LABEL $1E72 dvlp3147
LABEL $1E78 end_DRAW_VLP147
LABEL $1E9B LF33D149
LABEL $1EA3 dvlp1150
LABEL $1EC4 dvlpEnd150
LABEL $1EBC dvlp2150
LABEL $1EC7 dvlp3150
LABEL $1ECD end_DRAW_VLP150
LABEL $1EF0 LF33D152
LABEL $1EF8 dvlp1153
LABEL $1F19 dvlpEnd153
LABEL $1F11 dvlp2153
LABEL $1F1C dvlp3153
LABEL $1F22 end_DRAW_VLP153
LABEL $1F45 LF33D155
LABEL $1F4D dvlp1156
LABEL $1F6E dvlpEnd156
LABEL $1F66 dvlp2156
LABEL $1F71 dvlp3156
LABEL $1F77 end_DRAW_VLP156
LABEL $1F9A LF33D158
LABEL $1FA2 dvlp1159
LABEL $1FC3 dvlpEnd159
LABEL $1FBB dvlp2159
LABEL $1FC6 dvlp3159
LABEL $1FCC end_DRAW_VLP159
LABEL $1FEF LF33D161
LABEL $1FF7 dvlp1162
LABEL $2018 dvlpEnd162
LABEL $2010 dvlp2162
LABEL $201B dvlp3162
LABEL $2021 end_DRAW_VLP162
LABEL $2044 LF33D164
LABEL $204C dvlp1165
LABEL $206D dvlpEnd165
LABEL $2065 dvlp2165
LABEL $2070 dvlp3165
LABEL $2076 end_DRAW_VLP165
LABEL $2077 prepare_param
LABEL $208A process_ltr
LABEL $20AD LF33D169
LABEL $20B6 dvlp1170
LABEL $20D7 dvlpEnd170
LABEL $20CF dvlp2170
LABEL $20DA dvlp3170
LABEL $20E0 end_DRAW_VLP170
LABEL $20EE update_ltr_prm
LABEL $21F5 do_ym_sound_done
LABEL $21E0 next_reg
LABEL $226B get_current_byte
LABEL $21F6 no_valid_byte
LABEL $2206 byte_ready_1
LABEL $228D no_single_byte
LABEL $220E single_byte
LABEL $2210 dechifer
LABEL $2216 try_next_bit
LABEL $222C byte_ready
LABEL $2235 no_add
LABEL $2237 search_again
LABEL $2265 no_phrase_d
LABEL $225F phrase_found
LABEL $2258 next_phrase
LABEL $226B out
LABEL $2285 no_phrase
LABEL $228A counter_not_minus_one
LABEL $2292 more_bits
LABEL $22A5 byte_ready_2
LABEL $22B2 go_on
LABEL $22C2 byte_ready_3
LABEL $22CA end_here_3
LABEL $22CC go_on_2
LABEL $22DC byte_ready_4
LABEL $22E4 end_here_4
LABEL $22E5 shifting_not_yet_done
LABEL $22EB no_carry
LABEL $22F0 shifting_done
LABEL $231B next_reg_init
LABEL $2336 MLOVER_start
LABEL $2338 MLOVER_reg_0
LABEL $2371 MLOVER_pd_0
LABEL $2382 MLOVER_reg_0_data
LABEL $241E MLOVER_reg_1
LABEL $243C MLOVER_pd_1
LABEL $245B MLOVER_reg_1_data
LABEL $24DD MLOVER_reg_2
LABEL $255B MLOVER_pd_2
LABEL $25A4 MLOVER_reg_2_data
LABEL $266E MLOVER_reg_3
LABEL $2677 MLOVER_pd_3
LABEL $267E MLOVER_reg_3_data
LABEL $2684 MLOVER_reg_4
LABEL $270B MLOVER_pd_4
LABEL $274A MLOVER_reg_4_data
LABEL $27D1 MLOVER_reg_5
LABEL $27E0 MLOVER_pd_5
LABEL $27E7 MLOVER_reg_5_data
LABEL $27FE MLOVER_reg_6
LABEL $2801 MLOVER_pd_6
LABEL $2801 MLOVER_reg_6_data
LABEL $2804 MLOVER_reg_7
LABEL $2816 MLOVER_pd_7
LABEL $2816 MLOVER_reg_7_data
LABEL $2898 MLOVER_reg_8
LABEL $28B0 MLOVER_pd_8
LABEL $28D1 MLOVER_reg_8_data
LABEL $290C MLOVER_reg_9
LABEL $2936 MLOVER_pd_9
LABEL $2957 MLOVER_reg_9_data
LABEL $2990 MLOVER_reg_10
LABEL $29C0 MLOVER_pd_10
LABEL $29EC MLOVER_reg_10_data
LABEL $2A20 MLOVER_data
LABEL $2A64 MLOVER_name
LABEL $2A81 *
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   VABOOM.ASM                                                        |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 |   Copyright 2000, Ronen Habot                                       |
COMMENT_LINE $0000 |                                                                     |
COMMENT_LINE $0000 +=====================================================================+
COMMENT_LINE $0000 file created 01-Jan-99
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 Strint to be displayed between levels 0x32 bytes long!
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 Bomb variables table declaration:
COMMENT_LINE $0000 @ 2n   : BombYpos
COMMENT_LINE $0000 @ 2n+1 : BombXpos
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 Bomb parameters table declaration:
COMMENT_LINE $0000 @ 2n   : MoveUP(0) / MoveDN(1)
COMMENT_LINE $0000 @ 2n+1 : MoveLT(0) / MoveRT(1) in case of moving up...
COMMENT_LINE $0000 ******************************************************************************
COMMENT_LINE $0000 Global variables
COMMENT_LINE $0000 *** YM music related RAM variables ***
COMMENT $0000 C991
COMMENT $C8AC variable used in own printing routines
COMMENT_LINE $C8AF *** YM Sound related constants ***
COMMENT_LINE $0000 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0000 Begining of the main program
COMMENT_LINE $0000 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $0000 magic init block
FORCE_SYMBOL $001A start
COMMENT $001D replecement for bios print func
COMMENT_LINE $001D VIA_t1_cnt_lo   EQU     $D004   ;VIA timer 1 count register lo (scale factor)
COMMENT_LINE $001D **************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 expects
COMMENT_LINE $0000 b = speed
COMMENT_LINE $0000 first char
COMMENT_LINE $0000 u pointer to string
COMMENT_LINE $0000 X pointer to character display table
COMMENT_LINE $0000 Y speed = to zero
COMMENT_LINE $0000 ...
COMMENT $0000 Send it to the D/A
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT $0000 Send it to the D/A
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 expects
COMMENT_LINE $0000 b = speed
COMMENT_LINE $0000 first char
COMMENT_LINE $0000 u pointer to string
COMMENT_LINE $0000 X pointer to inverted character display table
COMMENT_LINE $0000 Y speed = to zero
COMMENT_LINE $0000 ...
COMMENT $0000 negative x speed
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 delay needed for drawing
COMMENT $0000 Get bitmap from chargen table
COMMENT $0000 Save in shift register
COMMENT $0000 Get next character
COMMENT $0000 Go back if not terminator
COMMENT_LINE $0000 A=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 now move down
COMMENT $0000 store 'height' to dac (y)
COMMENT $0000 disable RAMP, enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 zero dac
COMMENT_LINE $0000 now only y set, x to zero
COMMENT $0000 enable RAMP, disable mux
COMMENT_LINE $0000 here we move down
COMMENT $0000 enable RAMP, enable mux
COMMENT_LINE $0000 tricky, cutting y off while
COMMENT_LINE $0000 integrating, saves one switch of mux
COMMENT_LINE $0000 still b=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 now finnished moving down
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 now move down
COMMENT $0000 store 'height' to dac (y)
COMMENT $0000 disable RAMP, enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 zero dac
COMMENT_LINE $0000 now only y set, x to zero
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 Get first character
COMMENT $0000 enable RAMP, enable mux
COMMENT_LINE $0000 tricky, cutting y off while
COMMENT_LINE $0000 integrating, saves one switch of mux
COMMENT_LINE $0000 still B=$81
COMMENT $0000 disable RAMP, disable mux
COMMENT_LINE $0000 now finnished moving down
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 U=String pointer to first $81
COMMENT $0000 Clear D/A output
COMMENT $0000 Shift reg mode = 110, T1 PB7 enabled
COMMENT $0000 enable mux, set y to 0 disable ramp
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text width
COMMENT $0000 T1->PB7 enabled
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 this is mainly taken from move to d makro...
COMMENT_LINE $0000 for a describtion look at that or the rom dissassembly...
COMMENT_LINE $0000 Moveto_d_7F start
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT $0000 text size
COMMENT $0000 position
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 special printstr routines
COMMENT_LINE $0000 expect
COMMENT_LINE $0000 strings termitated on both ends with $81
COMMENT_LINE $0000 ***************************************************************************
COMMENT $010D text size
FORCE_SYMBOL $010F Vec_Text_HW
COMMENT $0112 position
COMMENT_LINE $0114 Moveto_d_7F start
FORCE_SYMBOL $0114 VIA_port_a
FORCE_NO_SYMBOL $0116
FORCE_SYMBOL $0118 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $011A
FORCE_SYMBOL $011C VIA_cntl
FORCE_SYMBOL $011F VIA_port_b
FORCE_SYMBOL $0121 VIA_shift_reg
FORCE_SYMBOL $0123 VIA_port_b
FORCE_SYMBOL $0125 VIA_port_a
FORCE_SYMBOL $0127 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0129
FORCE_SYMBOL $012C VIA_int_flags
FORCE_SYMBOL $0130 VIA_port_a
COMMENT_LINE $0132 U=String pointer to first $81
FORCE_NO_SYMBOL $0132
COMMENT $0134 Clear D/A output
FORCE_SYMBOL $0134 VIA_port_a
COMMENT $0136 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0136 VIA_aux_cntl
FORCE_SYMBOL $0138 Char_Tablef1
FORCE_NO_SYMBOL $013B
COMMENT $013D enable mux, set y to 0 disable ramp
FORCE_SYMBOL $013D VIA_port_b
COMMENT $013F disable RAMP, disable mux
FORCE_SYMBOL $013F VIA_port_b
COMMENT $0143 Get text width
FORCE_SYMBOL $0143 Vec_Text_Width
FORCE_SYMBOL $0147 Vec_Text_Width_neg
COMMENT $014D Send it to the D/A
FORCE_SYMBOL $014D VIA_port_a
FORCE_NO_SYMBOL $014F
COMMENT $0151 enable RAMP, disable mux
FORCE_SYMBOL $0151 VIA_port_b
COMMENT $0153 delay needed for drawing
COMMENT $0158 Get bitmap from chargen table
COMMENT $015A Save in shift register
FORCE_SYMBOL $015A VIA_shift_reg
COMMENT $015C Get next character
COMMENT $015E Go back if not terminator
COMMENT_LINE $0160 A=$81
COMMENT $0160 disable RAMP, disable mux
FORCE_SYMBOL $0160 VIA_port_b
FORCE_SYMBOL $0162 Char_Tableb1
COMMENT $0165 Get text height
FORCE_SYMBOL $0165 Vec_Text_Height
COMMENT_LINE $0168 now move down
COMMENT $0168 store 'height' to dac (y)
FORCE_SYMBOL $0168 VIA_port_a
COMMENT $016A disable RAMP, enable mux
FORCE_SYMBOL $016A VIA_port_b
COMMENT $016C disable RAMP, disable mux
FORCE_SYMBOL $016C VIA_port_b
COMMENT $016E zero dac
FORCE_SYMBOL $016E VIA_port_a
COMMENT_LINE $0170 now only y set, x to zero
FORCE_NO_SYMBOL $0170
COMMENT $0172 enable RAMP, disable mux
FORCE_SYMBOL $0172 VIA_port_b
COMMENT $0176 Get first character
COMMENT $0178 enable RAMP, enable mux
FORCE_SYMBOL $0178 VIA_port_b
COMMENT_LINE $017A tricky, cutting y off while
COMMENT_LINE $017A integrating, saves one switch of mux
COMMENT_LINE $017A still B=$81
COMMENT $017A disable RAMP, disable mux
FORCE_SYMBOL $017A VIA_port_b
FORCE_SYMBOL $017C Vec_Text_Width_neg
COMMENT_LINE $017F now finnished moving down
COMMENT $017F negative x speed
FORCE_SYMBOL $017F VIA_port_a
FORCE_NO_SYMBOL $0181
COMMENT $0183 enable RAMP, disable mux
FORCE_SYMBOL $0183 VIA_port_b
COMMENT $0185 delay needed for drawing
COMMENT $018A Get bitmap from chargen table
COMMENT $018C Save in shift register
FORCE_SYMBOL $018C VIA_shift_reg
COMMENT $018E Get next character
COMMENT $0190 Go back if not terminator
COMMENT_LINE $0192 A=$81
COMMENT $0192 disable RAMP, disable mux
FORCE_SYMBOL $0192 VIA_port_b
FORCE_SYMBOL $0194 Char_Tablef2
COMMENT $0197 Get text height
FORCE_SYMBOL $0197 Vec_Text_Height
COMMENT_LINE $019A now move down
COMMENT $019A store 'height' to dac (y)
FORCE_SYMBOL $019A VIA_port_a
COMMENT $019C disable RAMP, enable mux
FORCE_SYMBOL $019C VIA_port_b
COMMENT $019E disable RAMP, disable mux
FORCE_SYMBOL $019E VIA_port_b
COMMENT $01A0 zero dac
FORCE_SYMBOL $01A0 VIA_port_a
COMMENT_LINE $01A2 now only y set, x to zero
FORCE_NO_SYMBOL $01A2
COMMENT $01A4 enable RAMP, disable mux
FORCE_SYMBOL $01A4 VIA_port_b
COMMENT_LINE $01A6 here we move down
COMMENT $01AA enable RAMP, enable mux
FORCE_SYMBOL $01AA VIA_port_b
COMMENT_LINE $01AC tricky, cutting y off while
COMMENT_LINE $01AC integrating, saves one switch of mux
COMMENT_LINE $01AC still b=$81
COMMENT $01AC disable RAMP, disable mux
FORCE_SYMBOL $01AC VIA_port_b
FORCE_SYMBOL $01AE Vec_Text_Width
COMMENT_LINE $01B1 now finnished moving down
COMMENT $01B1 Send it to the D/A
FORCE_SYMBOL $01B1 VIA_port_a
FORCE_NO_SYMBOL $01B3
COMMENT $01B5 enable RAMP, disable mux
FORCE_SYMBOL $01B5 VIA_port_b
COMMENT $01B7 delay needed for drawing
COMMENT $01BC Get bitmap from chargen table
COMMENT $01BE Save in shift register
FORCE_SYMBOL $01BE VIA_shift_reg
COMMENT $01C0 Get next character
COMMENT $01C2 Go back if not terminator
COMMENT_LINE $01C4 A=$81
COMMENT $01C4 disable RAMP, disable mux
FORCE_SYMBOL $01C4 VIA_port_b
FORCE_SYMBOL $01C6 Char_Tableb2
COMMENT $01C9 Get text height
FORCE_SYMBOL $01C9 Vec_Text_Height
COMMENT_LINE $01CC now move down
COMMENT $01CC store 'height' to dac (y)
FORCE_SYMBOL $01CC VIA_port_a
COMMENT $01CE disable RAMP, enable mux
FORCE_SYMBOL $01CE VIA_port_b
COMMENT $01D0 disable RAMP, disable mux
FORCE_SYMBOL $01D0 VIA_port_b
COMMENT $01D2 zero dac
FORCE_SYMBOL $01D2 VIA_port_a
COMMENT_LINE $01D4 now only y set, x to zero
FORCE_NO_SYMBOL $01D4
COMMENT $01D6 enable RAMP, disable mux
FORCE_SYMBOL $01D6 VIA_port_b
COMMENT $01DA Get first character
COMMENT $01DC enable RAMP, enable mux
FORCE_SYMBOL $01DC VIA_port_b
COMMENT_LINE $01DE tricky, cutting y off while
COMMENT_LINE $01DE integrating, saves one switch of mux
COMMENT_LINE $01DE still B=$81
COMMENT $01DE disable RAMP, disable mux
FORCE_SYMBOL $01DE VIA_port_b
FORCE_SYMBOL $01E0 Vec_Text_Width_neg
COMMENT_LINE $01E3 now finnished moving down
COMMENT $01E3 negative x speed
FORCE_SYMBOL $01E3 VIA_port_a
FORCE_NO_SYMBOL $01E5
COMMENT $01E7 enable RAMP, disable mux
FORCE_SYMBOL $01E7 VIA_port_b
COMMENT $01E9 delay needed for drawing
COMMENT $01EE Get bitmap from chargen table
COMMENT $01F0 Save in shift register
FORCE_SYMBOL $01F0 VIA_shift_reg
COMMENT $01F2 Get next character
COMMENT $01F4 Go back if not terminator
COMMENT_LINE $01F6 A=$81
COMMENT $01F6 disable RAMP, disable mux
FORCE_SYMBOL $01F6 VIA_port_b
FORCE_SYMBOL $01F8 Char_Tablef3
COMMENT $01FB Get text height
FORCE_SYMBOL $01FB Vec_Text_Height
COMMENT_LINE $01FE now move down
COMMENT $01FE store 'height' to dac (y)
FORCE_SYMBOL $01FE VIA_port_a
COMMENT $0200 disable RAMP, enable mux
FORCE_SYMBOL $0200 VIA_port_b
COMMENT $0202 disable RAMP, disable mux
FORCE_SYMBOL $0202 VIA_port_b
COMMENT $0204 zero dac
FORCE_SYMBOL $0204 VIA_port_a
COMMENT_LINE $0206 now only y set, x to zero
FORCE_NO_SYMBOL $0206
COMMENT $0208 enable RAMP, disable mux
FORCE_SYMBOL $0208 VIA_port_b
COMMENT_LINE $020A here we move down
COMMENT $020E enable RAMP, enable mux
FORCE_SYMBOL $020E VIA_port_b
COMMENT_LINE $0210 tricky, cutting y off while
COMMENT_LINE $0210 integrating, saves one switch of mux
COMMENT_LINE $0210 still b=$81
COMMENT $0210 disable RAMP, disable mux
FORCE_SYMBOL $0210 VIA_port_b
FORCE_SYMBOL $0212 Vec_Text_Width
COMMENT_LINE $0215 now finnished moving down
COMMENT $0215 Send it to the D/A
FORCE_SYMBOL $0215 VIA_port_a
FORCE_NO_SYMBOL $0217
COMMENT $0219 enable RAMP, disable mux
FORCE_SYMBOL $0219 VIA_port_b
COMMENT $021B delay needed for drawing
COMMENT $0220 Get bitmap from chargen table
COMMENT $0222 Save in shift register
FORCE_SYMBOL $0222 VIA_shift_reg
COMMENT $0224 Get next character
COMMENT $0226 Go back if not terminator
COMMENT_LINE $0228 A=$81
COMMENT $0228 disable RAMP, disable mux
FORCE_SYMBOL $0228 VIA_port_b
FORCE_SYMBOL $022A Char_Tableb3
COMMENT $022D Get text height
FORCE_SYMBOL $022D Vec_Text_Height
COMMENT_LINE $0230 now move down
COMMENT $0230 store 'height' to dac (y)
FORCE_SYMBOL $0230 VIA_port_a
COMMENT $0232 disable RAMP, enable mux
FORCE_SYMBOL $0232 VIA_port_b
COMMENT $0234 disable RAMP, disable mux
FORCE_SYMBOL $0234 VIA_port_b
COMMENT $0236 zero dac
FORCE_SYMBOL $0236 VIA_port_a
COMMENT_LINE $0238 now only y set, x to zero
FORCE_NO_SYMBOL $0238
COMMENT $023A enable RAMP, disable mux
FORCE_SYMBOL $023A VIA_port_b
COMMENT $023E Get first character
COMMENT $0240 enable RAMP, enable mux
FORCE_SYMBOL $0240 VIA_port_b
COMMENT_LINE $0242 tricky, cutting y off while
COMMENT_LINE $0242 integrating, saves one switch of mux
COMMENT_LINE $0242 still B=$81
COMMENT $0242 disable RAMP, disable mux
FORCE_SYMBOL $0242 VIA_port_b
FORCE_SYMBOL $0244 Vec_Text_Width_neg
COMMENT_LINE $0247 now finnished moving down
COMMENT $0247 negative x speed
FORCE_SYMBOL $0247 VIA_port_a
FORCE_NO_SYMBOL $0249
COMMENT $024B enable RAMP, disable mux
FORCE_SYMBOL $024B VIA_port_b
COMMENT $024D delay needed for drawing
COMMENT $0252 Get bitmap from chargen table
COMMENT $0254 Save in shift register
FORCE_SYMBOL $0254 VIA_shift_reg
COMMENT $0256 Get next character
COMMENT $0258 Go back if not terminator
COMMENT_LINE $025A A=$81
COMMENT $025A disable RAMP, disable mux
FORCE_SYMBOL $025A VIA_port_b
FORCE_SYMBOL $025C Char_Tablef4
COMMENT $025F Get text height
FORCE_SYMBOL $025F Vec_Text_Height
COMMENT_LINE $0262 now move down
COMMENT $0262 store 'height' to dac (y)
FORCE_SYMBOL $0262 VIA_port_a
COMMENT $0264 disable RAMP, enable mux
FORCE_SYMBOL $0264 VIA_port_b
COMMENT $0266 disable RAMP, disable mux
FORCE_SYMBOL $0266 VIA_port_b
COMMENT $0268 zero dac
FORCE_SYMBOL $0268 VIA_port_a
COMMENT_LINE $026A now only y set, x to zero
FORCE_NO_SYMBOL $026A
COMMENT $026C enable RAMP, disable mux
FORCE_SYMBOL $026C VIA_port_b
COMMENT_LINE $026E here we move down
COMMENT $0272 enable RAMP, enable mux
FORCE_SYMBOL $0272 VIA_port_b
COMMENT_LINE $0274 tricky, cutting y off while
COMMENT_LINE $0274 integrating, saves one switch of mux
COMMENT_LINE $0274 still b=$81
COMMENT $0274 disable RAMP, disable mux
FORCE_SYMBOL $0274 VIA_port_b
FORCE_SYMBOL $0276 Vec_Text_Width
COMMENT_LINE $0279 now finnished moving down
COMMENT $0279 Send it to the D/A
FORCE_SYMBOL $0279 VIA_port_a
FORCE_NO_SYMBOL $027B
COMMENT $027D enable RAMP, disable mux
FORCE_SYMBOL $027D VIA_port_b
COMMENT $027F delay needed for drawing
COMMENT $0284 Get bitmap from chargen table
COMMENT $0286 Save in shift register
FORCE_SYMBOL $0286 VIA_shift_reg
COMMENT $0288 Get next character
COMMENT $028A Go back if not terminator
COMMENT_LINE $028C A=$81
COMMENT $028C disable RAMP, disable mux
FORCE_SYMBOL $028C VIA_port_b
FORCE_NO_SYMBOL $028E
COMMENT $0290 T1->PB7 enabled
FORCE_SYMBOL $0290 VIA_aux_cntl
FORCE_SYMBOL $0292 VIA_shift_reg
FORCE_NO_SYMBOL $0294
COMMENT $0296 /BLANK low and /ZERO low
FORCE_SYMBOL $0296 VIA_cntl
COMMENT_LINE $0299 ***************************************************************************
COMMENT_LINE $0299 my_print_str_d
COMMENT_LINE $0299 PRINT_STR_D
COMMENT_LINE $0299 RTS
COMMENT_LINE $0299 ***************************************************************************
COMMENT_LINE $0299 U=String pointer to first $81
FORCE_NO_SYMBOL $0299
COMMENT $029B Clear D/A output
FORCE_SYMBOL $029B VIA_port_a
COMMENT $029D Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $029D VIA_aux_cntl
FORCE_SYMBOL $029F Char_Tablef1
FORCE_NO_SYMBOL $02A2
COMMENT $02A4 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $02A4 VIA_port_b
COMMENT $02A6 disable RAMP, disable mux
FORCE_SYMBOL $02A6 VIA_port_b
COMMENT $02AA Get text width
FORCE_SYMBOL $02AA Vec_Text_Width
FORCE_SYMBOL $02AE Vec_Text_Width_neg
COMMENT $02B4 Send it to the D/A
FORCE_SYMBOL $02B4 VIA_port_a
FORCE_NO_SYMBOL $02B6
COMMENT $02B8 enable RAMP, disable mux
FORCE_SYMBOL $02B8 VIA_port_b
COMMENT $02BA delay needed for drawing
COMMENT $02BF Get bitmap from chargen table
COMMENT $02C1 Save in shift register
FORCE_SYMBOL $02C1 VIA_shift_reg
COMMENT $02C3 Get next character
COMMENT $02C5 Go back if not terminator
COMMENT_LINE $02C7 A=$81
COMMENT $02C7 disable RAMP, disable mux
FORCE_SYMBOL $02C7 VIA_port_b
FORCE_SYMBOL $02C9 Char_Tableb1
COMMENT $02CC Get text height
FORCE_SYMBOL $02CC Vec_Text_Height
COMMENT_LINE $02CF now move down
COMMENT $02CF store 'height' to dac (y)
FORCE_SYMBOL $02CF VIA_port_a
COMMENT $02D1 disable RAMP, enable mux
FORCE_SYMBOL $02D1 VIA_port_b
COMMENT $02D3 disable RAMP, disable mux
FORCE_SYMBOL $02D3 VIA_port_b
COMMENT $02D5 zero dac
FORCE_SYMBOL $02D5 VIA_port_a
COMMENT_LINE $02D7 now only y set, x to zero
FORCE_NO_SYMBOL $02D7
COMMENT $02D9 enable RAMP, disable mux
FORCE_SYMBOL $02D9 VIA_port_b
COMMENT $02DD Get first character
COMMENT $02DF enable RAMP, enable mux
FORCE_SYMBOL $02DF VIA_port_b
COMMENT_LINE $02E1 tricky, cutting y off while
COMMENT_LINE $02E1 integrating, saves one switch of mux
COMMENT_LINE $02E1 still B=$81
COMMENT $02E1 disable RAMP, disable mux
FORCE_SYMBOL $02E1 VIA_port_b
FORCE_SYMBOL $02E3 Vec_Text_Width_neg
COMMENT_LINE $02E6 now finnished moving down
COMMENT $02E6 negative x speed
FORCE_SYMBOL $02E6 VIA_port_a
FORCE_NO_SYMBOL $02E8
COMMENT $02EA enable RAMP, disable mux
FORCE_SYMBOL $02EA VIA_port_b
COMMENT $02EC delay needed for drawing
COMMENT $02F1 Get bitmap from chargen table
COMMENT $02F3 Save in shift register
FORCE_SYMBOL $02F3 VIA_shift_reg
COMMENT $02F5 Get next character
COMMENT $02F7 Go back if not terminator
COMMENT_LINE $02F9 A=$81
COMMENT $02F9 disable RAMP, disable mux
FORCE_SYMBOL $02F9 VIA_port_b
FORCE_SYMBOL $02FB Char_Tablef2
COMMENT $02FE Get text height
FORCE_SYMBOL $02FE Vec_Text_Height
COMMENT_LINE $0301 now move down
COMMENT $0301 store 'height' to dac (y)
FORCE_SYMBOL $0301 VIA_port_a
COMMENT $0303 disable RAMP, enable mux
FORCE_SYMBOL $0303 VIA_port_b
COMMENT $0305 disable RAMP, disable mux
FORCE_SYMBOL $0305 VIA_port_b
COMMENT $0307 zero dac
FORCE_SYMBOL $0307 VIA_port_a
COMMENT_LINE $0309 now only y set, x to zero
FORCE_NO_SYMBOL $0309
COMMENT $030B enable RAMP, disable mux
FORCE_SYMBOL $030B VIA_port_b
COMMENT_LINE $030D here we move down
COMMENT $0311 enable RAMP, enable mux
FORCE_SYMBOL $0311 VIA_port_b
COMMENT_LINE $0313 tricky, cutting y off while
COMMENT_LINE $0313 integrating, saves one switch of mux
COMMENT_LINE $0313 still b=$81
COMMENT $0313 disable RAMP, disable mux
FORCE_SYMBOL $0313 VIA_port_b
FORCE_SYMBOL $0315 Vec_Text_Width
COMMENT_LINE $0318 now finnished moving down
COMMENT $0318 Send it to the D/A
FORCE_SYMBOL $0318 VIA_port_a
FORCE_NO_SYMBOL $031A
COMMENT $031C enable RAMP, disable mux
FORCE_SYMBOL $031C VIA_port_b
COMMENT $031E delay needed for drawing
COMMENT $0323 Get bitmap from chargen table
COMMENT $0325 Save in shift register
FORCE_SYMBOL $0325 VIA_shift_reg
COMMENT $0327 Get next character
COMMENT $0329 Go back if not terminator
COMMENT_LINE $032B A=$81
COMMENT $032B disable RAMP, disable mux
FORCE_SYMBOL $032B VIA_port_b
FORCE_SYMBOL $032D Char_Tableb2
COMMENT $0330 Get text height
FORCE_SYMBOL $0330 Vec_Text_Height
COMMENT_LINE $0333 now move down
COMMENT $0333 store 'height' to dac (y)
FORCE_SYMBOL $0333 VIA_port_a
COMMENT $0335 disable RAMP, enable mux
FORCE_SYMBOL $0335 VIA_port_b
COMMENT $0337 disable RAMP, disable mux
FORCE_SYMBOL $0337 VIA_port_b
COMMENT $0339 zero dac
FORCE_SYMBOL $0339 VIA_port_a
COMMENT_LINE $033B now only y set, x to zero
FORCE_NO_SYMBOL $033B
COMMENT $033D enable RAMP, disable mux
FORCE_SYMBOL $033D VIA_port_b
COMMENT $0341 Get first character
COMMENT $0343 enable RAMP, enable mux
FORCE_SYMBOL $0343 VIA_port_b
COMMENT_LINE $0345 tricky, cutting y off while
COMMENT_LINE $0345 integrating, saves one switch of mux
COMMENT_LINE $0345 still B=$81
COMMENT $0345 disable RAMP, disable mux
FORCE_SYMBOL $0345 VIA_port_b
FORCE_SYMBOL $0347 Vec_Text_Width_neg
COMMENT_LINE $034A now finnished moving down
COMMENT $034A negative x speed
FORCE_SYMBOL $034A VIA_port_a
FORCE_NO_SYMBOL $034C
COMMENT $034E enable RAMP, disable mux
FORCE_SYMBOL $034E VIA_port_b
COMMENT $0350 delay needed for drawing
COMMENT $0355 Get bitmap from chargen table
COMMENT $0357 Save in shift register
FORCE_SYMBOL $0357 VIA_shift_reg
COMMENT $0359 Get next character
COMMENT $035B Go back if not terminator
COMMENT_LINE $035D A=$81
COMMENT $035D disable RAMP, disable mux
FORCE_SYMBOL $035D VIA_port_b
FORCE_SYMBOL $035F Char_Tablef3
COMMENT $0362 Get text height
FORCE_SYMBOL $0362 Vec_Text_Height
COMMENT_LINE $0365 now move down
COMMENT $0365 store 'height' to dac (y)
FORCE_SYMBOL $0365 VIA_port_a
COMMENT $0367 disable RAMP, enable mux
FORCE_SYMBOL $0367 VIA_port_b
COMMENT $0369 disable RAMP, disable mux
FORCE_SYMBOL $0369 VIA_port_b
COMMENT $036B zero dac
FORCE_SYMBOL $036B VIA_port_a
COMMENT_LINE $036D now only y set, x to zero
FORCE_NO_SYMBOL $036D
COMMENT $036F enable RAMP, disable mux
FORCE_SYMBOL $036F VIA_port_b
COMMENT_LINE $0371 here we move down
COMMENT $0375 enable RAMP, enable mux
FORCE_SYMBOL $0375 VIA_port_b
COMMENT_LINE $0377 tricky, cutting y off while
COMMENT_LINE $0377 integrating, saves one switch of mux
COMMENT_LINE $0377 still b=$81
COMMENT $0377 disable RAMP, disable mux
FORCE_SYMBOL $0377 VIA_port_b
FORCE_SYMBOL $0379 Vec_Text_Width
COMMENT_LINE $037C now finnished moving down
COMMENT $037C Send it to the D/A
FORCE_SYMBOL $037C VIA_port_a
FORCE_NO_SYMBOL $037E
COMMENT $0380 enable RAMP, disable mux
FORCE_SYMBOL $0380 VIA_port_b
COMMENT $0382 delay needed for drawing
COMMENT $0387 Get bitmap from chargen table
COMMENT $0389 Save in shift register
FORCE_SYMBOL $0389 VIA_shift_reg
COMMENT $038B Get next character
COMMENT $038D Go back if not terminator
COMMENT_LINE $038F A=$81
COMMENT $038F disable RAMP, disable mux
FORCE_SYMBOL $038F VIA_port_b
FORCE_SYMBOL $0391 Char_Tableb3
COMMENT $0394 Get text height
FORCE_SYMBOL $0394 Vec_Text_Height
COMMENT_LINE $0397 now move down
COMMENT $0397 store 'height' to dac (y)
FORCE_SYMBOL $0397 VIA_port_a
COMMENT $0399 disable RAMP, enable mux
FORCE_SYMBOL $0399 VIA_port_b
COMMENT $039B disable RAMP, disable mux
FORCE_SYMBOL $039B VIA_port_b
COMMENT $039D zero dac
FORCE_SYMBOL $039D VIA_port_a
COMMENT_LINE $039F now only y set, x to zero
FORCE_NO_SYMBOL $039F
COMMENT $03A1 enable RAMP, disable mux
FORCE_SYMBOL $03A1 VIA_port_b
COMMENT $03A5 Get first character
COMMENT $03A7 enable RAMP, enable mux
FORCE_SYMBOL $03A7 VIA_port_b
COMMENT_LINE $03A9 tricky, cutting y off while
COMMENT_LINE $03A9 integrating, saves one switch of mux
COMMENT_LINE $03A9 still B=$81
COMMENT $03A9 disable RAMP, disable mux
FORCE_SYMBOL $03A9 VIA_port_b
FORCE_SYMBOL $03AB Vec_Text_Width_neg
COMMENT_LINE $03AE now finnished moving down
COMMENT $03AE negative x speed
FORCE_SYMBOL $03AE VIA_port_a
FORCE_NO_SYMBOL $03B0
COMMENT $03B2 enable RAMP, disable mux
FORCE_SYMBOL $03B2 VIA_port_b
COMMENT $03B4 delay needed for drawing
COMMENT $03B9 Get bitmap from chargen table
COMMENT $03BB Save in shift register
FORCE_SYMBOL $03BB VIA_shift_reg
COMMENT $03BD Get next character
COMMENT $03BF Go back if not terminator
COMMENT_LINE $03C1 A=$81
COMMENT $03C1 disable RAMP, disable mux
FORCE_SYMBOL $03C1 VIA_port_b
FORCE_SYMBOL $03C3 Char_Tablef4
COMMENT $03C6 Get text height
FORCE_SYMBOL $03C6 Vec_Text_Height
COMMENT_LINE $03C9 now move down
COMMENT $03C9 store 'height' to dac (y)
FORCE_SYMBOL $03C9 VIA_port_a
COMMENT $03CB disable RAMP, enable mux
FORCE_SYMBOL $03CB VIA_port_b
COMMENT $03CD disable RAMP, disable mux
FORCE_SYMBOL $03CD VIA_port_b
COMMENT $03CF zero dac
FORCE_SYMBOL $03CF VIA_port_a
COMMENT_LINE $03D1 now only y set, x to zero
FORCE_NO_SYMBOL $03D1
COMMENT $03D3 enable RAMP, disable mux
FORCE_SYMBOL $03D3 VIA_port_b
COMMENT_LINE $03D5 here we move down
COMMENT $03D9 enable RAMP, enable mux
FORCE_SYMBOL $03D9 VIA_port_b
COMMENT_LINE $03DB tricky, cutting y off while
COMMENT_LINE $03DB integrating, saves one switch of mux
COMMENT_LINE $03DB still b=$81
COMMENT $03DB disable RAMP, disable mux
FORCE_SYMBOL $03DB VIA_port_b
FORCE_SYMBOL $03DD Vec_Text_Width
COMMENT_LINE $03E0 now finnished moving down
COMMENT $03E0 Send it to the D/A
FORCE_SYMBOL $03E0 VIA_port_a
FORCE_NO_SYMBOL $03E2
COMMENT $03E4 enable RAMP, disable mux
FORCE_SYMBOL $03E4 VIA_port_b
COMMENT $03E6 delay needed for drawing
COMMENT $03EB Get bitmap from chargen table
COMMENT $03ED Save in shift register
FORCE_SYMBOL $03ED VIA_shift_reg
COMMENT $03EF Get next character
COMMENT $03F1 Go back if not terminator
COMMENT_LINE $03F3 A=$81
COMMENT $03F3 disable RAMP, disable mux
FORCE_SYMBOL $03F3 VIA_port_b
FORCE_NO_SYMBOL $03F5
COMMENT $03F7 T1->PB7 enabled
FORCE_SYMBOL $03F7 VIA_aux_cntl
FORCE_SYMBOL $03F9 VIA_shift_reg
FORCE_NO_SYMBOL $03FB
COMMENT $03FD /BLANK low and /ZERO low
FORCE_SYMBOL $03FD VIA_cntl
COMMENT_LINE $0400 ***************************************************************************
COMMENT_LINE $0402 Moveto_d_7F start
FORCE_SYMBOL $0402 VIA_port_a
FORCE_NO_SYMBOL $0404
FORCE_SYMBOL $0406 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0408
FORCE_SYMBOL $040A VIA_cntl
FORCE_SYMBOL $040D VIA_port_b
FORCE_SYMBOL $040F VIA_shift_reg
FORCE_SYMBOL $0411 VIA_port_b
FORCE_SYMBOL $0413 VIA_port_a
FORCE_SYMBOL $0415 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0417
FORCE_SYMBOL $041A VIA_int_flags
FORCE_SYMBOL $041E VIA_port_a
COMMENT_LINE $0420 U=String pointer to first $81
FORCE_NO_SYMBOL $0420
COMMENT $0422 Clear D/A output
FORCE_SYMBOL $0422 VIA_port_a
COMMENT $0424 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0424 VIA_aux_cntl
FORCE_SYMBOL $0426 Char_Tablef1
FORCE_NO_SYMBOL $0429
COMMENT $042B enable mux, set y to 0 disable ramp
FORCE_SYMBOL $042B VIA_port_b
COMMENT $042D disable RAMP, disable mux
FORCE_SYMBOL $042D VIA_port_b
COMMENT $0431 Get text width
FORCE_SYMBOL $0431 Vec_Text_Width
FORCE_SYMBOL $0435 Vec_Text_Width_neg
COMMENT $043B Send it to the D/A
FORCE_SYMBOL $043B VIA_port_a
FORCE_NO_SYMBOL $043D
COMMENT $043F enable RAMP, disable mux
FORCE_SYMBOL $043F VIA_port_b
COMMENT $0441 delay needed for drawing
COMMENT $0446 Get bitmap from chargen table
COMMENT $0448 Save in shift register
FORCE_SYMBOL $0448 VIA_shift_reg
COMMENT $044A Get next character
COMMENT $044C Go back if not terminator
COMMENT_LINE $044E A=$81
COMMENT $044E disable RAMP, disable mux
FORCE_SYMBOL $044E VIA_port_b
FORCE_SYMBOL $0450 Char_Tableb1
COMMENT $0453 Get text height
FORCE_SYMBOL $0453 Vec_Text_Height
COMMENT_LINE $0456 now move down
COMMENT $0456 store 'height' to dac (y)
FORCE_SYMBOL $0456 VIA_port_a
COMMENT $0458 disable RAMP, enable mux
FORCE_SYMBOL $0458 VIA_port_b
COMMENT $045A disable RAMP, disable mux
FORCE_SYMBOL $045A VIA_port_b
COMMENT $045C zero dac
FORCE_SYMBOL $045C VIA_port_a
COMMENT_LINE $045E now only y set, x to zero
FORCE_NO_SYMBOL $045E
COMMENT $0460 enable RAMP, disable mux
FORCE_SYMBOL $0460 VIA_port_b
COMMENT $0464 Get first character
COMMENT $0466 enable RAMP, enable mux
FORCE_SYMBOL $0466 VIA_port_b
COMMENT_LINE $0468 tricky, cutting y off while
COMMENT_LINE $0468 integrating, saves one switch of mux
COMMENT_LINE $0468 still B=$81
COMMENT $0468 disable RAMP, disable mux
FORCE_SYMBOL $0468 VIA_port_b
FORCE_SYMBOL $046A Vec_Text_Width_neg
COMMENT_LINE $046D now finnished moving down
COMMENT $046D negative x speed
FORCE_SYMBOL $046D VIA_port_a
FORCE_NO_SYMBOL $046F
COMMENT $0471 enable RAMP, disable mux
FORCE_SYMBOL $0471 VIA_port_b
COMMENT $0473 delay needed for drawing
COMMENT $0478 Get bitmap from chargen table
COMMENT $047A Save in shift register
FORCE_SYMBOL $047A VIA_shift_reg
COMMENT $047C Get next character
COMMENT $047E Go back if not terminator
COMMENT_LINE $0480 A=$81
COMMENT $0480 disable RAMP, disable mux
FORCE_SYMBOL $0480 VIA_port_b
FORCE_SYMBOL $0482 Char_Tablef2
COMMENT $0485 Get text height
FORCE_SYMBOL $0485 Vec_Text_Height
COMMENT_LINE $0488 now move down
COMMENT $0488 store 'height' to dac (y)
FORCE_SYMBOL $0488 VIA_port_a
COMMENT $048A disable RAMP, enable mux
FORCE_SYMBOL $048A VIA_port_b
COMMENT $048C disable RAMP, disable mux
FORCE_SYMBOL $048C VIA_port_b
COMMENT $048E zero dac
FORCE_SYMBOL $048E VIA_port_a
COMMENT_LINE $0490 now only y set, x to zero
FORCE_NO_SYMBOL $0490
COMMENT $0492 enable RAMP, disable mux
FORCE_SYMBOL $0492 VIA_port_b
COMMENT_LINE $0494 here we move down
COMMENT $0498 enable RAMP, enable mux
FORCE_SYMBOL $0498 VIA_port_b
COMMENT_LINE $049A tricky, cutting y off while
COMMENT_LINE $049A integrating, saves one switch of mux
COMMENT_LINE $049A still b=$81
COMMENT $049A disable RAMP, disable mux
FORCE_SYMBOL $049A VIA_port_b
FORCE_SYMBOL $049C Vec_Text_Width
COMMENT_LINE $049F now finnished moving down
COMMENT $049F Send it to the D/A
FORCE_SYMBOL $049F VIA_port_a
FORCE_NO_SYMBOL $04A1
COMMENT $04A3 enable RAMP, disable mux
FORCE_SYMBOL $04A3 VIA_port_b
COMMENT $04A5 delay needed for drawing
COMMENT $04AA Get bitmap from chargen table
COMMENT $04AC Save in shift register
FORCE_SYMBOL $04AC VIA_shift_reg
COMMENT $04AE Get next character
COMMENT $04B0 Go back if not terminator
COMMENT_LINE $04B2 A=$81
COMMENT $04B2 disable RAMP, disable mux
FORCE_SYMBOL $04B2 VIA_port_b
FORCE_SYMBOL $04B4 Char_Tableb2
COMMENT $04B7 Get text height
FORCE_SYMBOL $04B7 Vec_Text_Height
COMMENT_LINE $04BA now move down
COMMENT $04BA store 'height' to dac (y)
FORCE_SYMBOL $04BA VIA_port_a
COMMENT $04BC disable RAMP, enable mux
FORCE_SYMBOL $04BC VIA_port_b
COMMENT $04BE disable RAMP, disable mux
FORCE_SYMBOL $04BE VIA_port_b
COMMENT $04C0 zero dac
FORCE_SYMBOL $04C0 VIA_port_a
COMMENT_LINE $04C2 now only y set, x to zero
FORCE_NO_SYMBOL $04C2
COMMENT $04C4 enable RAMP, disable mux
FORCE_SYMBOL $04C4 VIA_port_b
COMMENT $04C8 Get first character
COMMENT $04CA enable RAMP, enable mux
FORCE_SYMBOL $04CA VIA_port_b
COMMENT_LINE $04CC tricky, cutting y off while
COMMENT_LINE $04CC integrating, saves one switch of mux
COMMENT_LINE $04CC still B=$81
COMMENT $04CC disable RAMP, disable mux
FORCE_SYMBOL $04CC VIA_port_b
FORCE_SYMBOL $04CE Vec_Text_Width_neg
COMMENT_LINE $04D1 now finnished moving down
COMMENT $04D1 negative x speed
FORCE_SYMBOL $04D1 VIA_port_a
FORCE_NO_SYMBOL $04D3
COMMENT $04D5 enable RAMP, disable mux
FORCE_SYMBOL $04D5 VIA_port_b
COMMENT $04D7 delay needed for drawing
COMMENT $04DC Get bitmap from chargen table
COMMENT $04DE Save in shift register
FORCE_SYMBOL $04DE VIA_shift_reg
COMMENT $04E0 Get next character
COMMENT $04E2 Go back if not terminator
COMMENT_LINE $04E4 A=$81
COMMENT $04E4 disable RAMP, disable mux
FORCE_SYMBOL $04E4 VIA_port_b
FORCE_SYMBOL $04E6 Char_Tablef3
COMMENT $04E9 Get text height
FORCE_SYMBOL $04E9 Vec_Text_Height
COMMENT_LINE $04EC now move down
COMMENT $04EC store 'height' to dac (y)
FORCE_SYMBOL $04EC VIA_port_a
COMMENT $04EE disable RAMP, enable mux
FORCE_SYMBOL $04EE VIA_port_b
COMMENT $04F0 disable RAMP, disable mux
FORCE_SYMBOL $04F0 VIA_port_b
COMMENT $04F2 zero dac
FORCE_SYMBOL $04F2 VIA_port_a
COMMENT_LINE $04F4 now only y set, x to zero
FORCE_NO_SYMBOL $04F4
COMMENT $04F6 enable RAMP, disable mux
FORCE_SYMBOL $04F6 VIA_port_b
COMMENT_LINE $04F8 here we move down
COMMENT $04FC enable RAMP, enable mux
FORCE_SYMBOL $04FC VIA_port_b
COMMENT_LINE $04FE tricky, cutting y off while
COMMENT_LINE $04FE integrating, saves one switch of mux
COMMENT_LINE $04FE still b=$81
COMMENT $04FE disable RAMP, disable mux
FORCE_SYMBOL $04FE VIA_port_b
FORCE_SYMBOL $0500 Vec_Text_Width
COMMENT_LINE $0503 now finnished moving down
COMMENT $0503 Send it to the D/A
FORCE_SYMBOL $0503 VIA_port_a
FORCE_NO_SYMBOL $0505
COMMENT $0507 enable RAMP, disable mux
FORCE_SYMBOL $0507 VIA_port_b
COMMENT $0509 delay needed for drawing
COMMENT $050E Get bitmap from chargen table
COMMENT $0510 Save in shift register
FORCE_SYMBOL $0510 VIA_shift_reg
COMMENT $0512 Get next character
COMMENT $0514 Go back if not terminator
COMMENT_LINE $0516 A=$81
COMMENT $0516 disable RAMP, disable mux
FORCE_SYMBOL $0516 VIA_port_b
FORCE_SYMBOL $0518 Char_Tableb3
COMMENT $051B Get text height
FORCE_SYMBOL $051B Vec_Text_Height
COMMENT_LINE $051E now move down
COMMENT $051E store 'height' to dac (y)
FORCE_SYMBOL $051E VIA_port_a
COMMENT $0520 disable RAMP, enable mux
FORCE_SYMBOL $0520 VIA_port_b
COMMENT $0522 disable RAMP, disable mux
FORCE_SYMBOL $0522 VIA_port_b
COMMENT $0524 zero dac
FORCE_SYMBOL $0524 VIA_port_a
COMMENT_LINE $0526 now only y set, x to zero
FORCE_NO_SYMBOL $0526
COMMENT $0528 enable RAMP, disable mux
FORCE_SYMBOL $0528 VIA_port_b
COMMENT $052C Get first character
COMMENT $052E enable RAMP, enable mux
FORCE_SYMBOL $052E VIA_port_b
COMMENT_LINE $0530 tricky, cutting y off while
COMMENT_LINE $0530 integrating, saves one switch of mux
COMMENT_LINE $0530 still B=$81
COMMENT $0530 disable RAMP, disable mux
FORCE_SYMBOL $0530 VIA_port_b
FORCE_SYMBOL $0532 Vec_Text_Width_neg
COMMENT_LINE $0535 now finnished moving down
COMMENT $0535 negative x speed
FORCE_SYMBOL $0535 VIA_port_a
FORCE_NO_SYMBOL $0537
COMMENT $0539 enable RAMP, disable mux
FORCE_SYMBOL $0539 VIA_port_b
COMMENT $053B delay needed for drawing
COMMENT $0540 Get bitmap from chargen table
COMMENT $0542 Save in shift register
FORCE_SYMBOL $0542 VIA_shift_reg
COMMENT $0544 Get next character
COMMENT $0546 Go back if not terminator
COMMENT_LINE $0548 A=$81
COMMENT $0548 disable RAMP, disable mux
FORCE_SYMBOL $0548 VIA_port_b
FORCE_SYMBOL $054A Char_Tablef4
COMMENT $054D Get text height
FORCE_SYMBOL $054D Vec_Text_Height
COMMENT_LINE $0550 now move down
COMMENT $0550 store 'height' to dac (y)
FORCE_SYMBOL $0550 VIA_port_a
COMMENT $0552 disable RAMP, enable mux
FORCE_SYMBOL $0552 VIA_port_b
COMMENT $0554 disable RAMP, disable mux
FORCE_SYMBOL $0554 VIA_port_b
COMMENT $0556 zero dac
FORCE_SYMBOL $0556 VIA_port_a
COMMENT_LINE $0558 now only y set, x to zero
FORCE_NO_SYMBOL $0558
COMMENT $055A enable RAMP, disable mux
FORCE_SYMBOL $055A VIA_port_b
COMMENT_LINE $055C here we move down
COMMENT $0560 enable RAMP, enable mux
FORCE_SYMBOL $0560 VIA_port_b
COMMENT_LINE $0562 tricky, cutting y off while
COMMENT_LINE $0562 integrating, saves one switch of mux
COMMENT_LINE $0562 still b=$81
COMMENT $0562 disable RAMP, disable mux
FORCE_SYMBOL $0562 VIA_port_b
FORCE_SYMBOL $0564 Vec_Text_Width
COMMENT_LINE $0567 now finnished moving down
COMMENT $0567 Send it to the D/A
FORCE_SYMBOL $0567 VIA_port_a
FORCE_NO_SYMBOL $0569
COMMENT $056B enable RAMP, disable mux
FORCE_SYMBOL $056B VIA_port_b
COMMENT $056D delay needed for drawing
COMMENT $0572 Get bitmap from chargen table
COMMENT $0574 Save in shift register
FORCE_SYMBOL $0574 VIA_shift_reg
COMMENT $0576 Get next character
COMMENT $0578 Go back if not terminator
COMMENT_LINE $057A A=$81
COMMENT $057A disable RAMP, disable mux
FORCE_SYMBOL $057A VIA_port_b
FORCE_NO_SYMBOL $057C
COMMENT $057E T1->PB7 enabled
FORCE_SYMBOL $057E VIA_aux_cntl
FORCE_SYMBOL $0580 VIA_shift_reg
FORCE_NO_SYMBOL $0582
COMMENT $0584 /BLANK low and /ZERO low
FORCE_SYMBOL $0584 VIA_cntl
FORCE_NO_SYMBOL $0586
COMMENT_LINE $058E ***************************************************************************
COMMENT $058E Save B-reg
COMMENT $0590 build print struct... with $81 header ... on the stack
FORCE_NO_SYMBOL $0590
COMMENT $0592 Point U into the stack
COMMENT $0594 push $81
COMMENT $0596 load  space
FORCE_NO_SYMBOL $0596
COMMENT $0598 push space
COMMENT $059A Save A-reg = ship symbol
COMMENT $059C Get back B-reg (no of ships)
COMMENT $059E If B-reg >9 then
FORCE_NO_SYMBOL $059E
COMMENT $05A2 load $6C = infinty symbol
COMMENT $05A4 otherwise make an ascii number
FORCE_NO_SYMBOL $05A4
COMMENT $05A6 load minus
COMMENT $05A8 Push digit and minus sign
COMMENT $05AA end of string...
FORCE_NO_SYMBOL $05AA
COMMENT $05AC push end of string
COMMENT $05AE Push (y,x) coordinates
COMMENT $05B0 move to position
COMMENT $05B2 and print it (u points to constructed string structure)
FORCE_SYMBOL $05B2 Moveto_d_7F
COMMENT $05B5 print it
FORCE_SYMBOL $05B5 my_Print_Str
COMMENT_LINE $05B8 ***************************************************************************
COMMENT $05B8 replecement for bios print func
COMMENT_LINE $05B8 make sure there is enough time from calling this
COMMENT_LINE $05B8 to do the next move/draw
COMMENT $0000 Replacing Reset0Ref subroutine
COMMENT_LINE $0000 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $0000 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $0000 LDD   #0x0302;
COMMENT_LINE $0000 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $0000 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 LDB   #0x01;
COMMENT_LINE $0000 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0000 LDB    #0x00CC;
COMMENT $0000 0x0C;
COMMENT $0000 end of macro
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $0000 STA     <VIA_port_b
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 3
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT_LINE $0000 one more round
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 Replacing Draw_VLc subrutine
COMMENT $0000 0x01
COMMENT $0000 0x00
COMMENT $0000 0x00
COMMENT $0000 0x01
COMMENT $0000 0x0a
COMMENT $0000 0x05
COMMENT $0000 0x0D
COMMENT $0000 0x0a
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $05B8 general initialization
FORCE_SYMBOL $05B8 init
COMMENT $05BB Opening music and graphics
FORCE_SYMBOL $05BB opening
FORCE_SYMBOL $05BE refresh_scrn
COMMENT $05C1 Check next level/game over
FORCE_SYMBOL $05C1 check_status
COMMENT $05C4 Refresh background
FORCE_SYMBOL $05C4 draw_background
COMMENT $05C7 Check controller movement
FORCE_SYMBOL $05C7 checkjoystick
COMMENT $05CA Draw the man at the top
FORCE_SYMBOL $05CA draw_man
COMMENT $05CD Draw the paddles at the bottom
FORCE_SYMBOL $05CD draw_piles
COMMENT $05D0 Draw the falling bombs
FORCE_SYMBOL $05D0 draw_bombs
COMMENT $05D3 Draw the falling heart
FORCE_SYMBOL $05D3 draw_heart
COMMENT $05D6 Draw the falling diamond
FORCE_SYMBOL $05D6 draw_diamond
COMMENT $05D9 Draw the falling X
FORCE_SYMBOL $05D9 draw_ex
COMMENT $05DC Play sounds when needed
FORCE_SYMBOL $05DC check_snd
COMMENT $05DF Print the score
FORCE_SYMBOL $05DF print_info
COMMENT $05E2 Return to main loop
COMMENT_LINE $05E4 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $05E4 Stop any played music - turn off all channels of the sound chip
COMMENT_LINE $05E4 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $05E4 a <- $07, channel on/off bitmap
FORCE_NO_SYMBOL $05E4
COMMENT $05E6 b <- old value of reg. $07
FORCE_NO_SYMBOL $05E6
COMMENT $05E9 Force all bits to be set
FORCE_NO_SYMBOL $05E9
COMMENT $05EB Send the value to the sound chip
FORCE_SYMBOL $05EB Sound_Byte
COMMENT $05EE Return
COMMENT_LINE $05EF >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $05EF opeining - This procedure call the YM music routines, displays the opening
COMMENT_LINE $05EF letters and, waits for a button to be pressed to start the game.
COMMENT_LINE $05EF This is a program by itself...
COMMENT_LINE $05EF <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $05EF U <- ptr to the YM sound
FORCE_SYMBOL $05EF SONG_DATA
COMMENT $05F2 Initialize the YM sound
FORCE_SYMBOL $05F2 init_ym_sound
COMMENT $05F7 Set the Text size
FORCE_NO_SYMBOL $05F7
FORCE_SYMBOL $05FA Vec_Text_HW
COMMENT $05FD reset the crt
FORCE_SYMBOL $05FD Wait_Recal
COMMENT $0600 Set the intensity to $7F
FORCE_SYMBOL $0600 Intensity_7F
FORCE_NO_SYMBOL $0603
COMMENT $0605 Set scaling factor to be 7f
FORCE_SYMBOL $0605 VIA_t1_cnt_lo
COMMENT $0607 Print the VABOOM! on the screen
FORCE_SYMBOL $0607 print_vaboom
COMMENT_LINE $060A my tip, just leave that one alone!
COMMENT_LINE $060A no welcome to, otherwise screen wobbles on real vec
COMMENT_LINE $060A LDU   #open0_string
COMMENT_LINE $060A PRINT_STR_YX                    ;Call enhenced print routine
COMMENT $060A _D0                  ;Call Reset0Ref macro
FORCE_NO_SYMBOL $060A
COMMENT_LINE $060D STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $060D STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $060D LDD   #0x0302;
COMMENT_LINE $060D CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $060D STA   <VIA_port_b       ;0x00;
COMMENT_LINE $060D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $060D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $060D LDB   #0x01;
COMMENT_LINE $060D STB   <VIA_port_b       ;0x00;
COMMENT_LINE $060D LDB    #0x00CC;
COMMENT $060D 0x0C;
FORCE_SYMBOL $060D VIA_cntl
FORCE_SYMBOL $060F open1_string
COMMENT $0612 Call enhenced print routine
COMMENT_LINE $0614 Moveto_d_7F start
FORCE_SYMBOL $0614 VIA_port_a
FORCE_NO_SYMBOL $0616
FORCE_SYMBOL $0618 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $061A
FORCE_SYMBOL $061C VIA_cntl
FORCE_SYMBOL $061F VIA_port_b
FORCE_SYMBOL $0621 VIA_shift_reg
FORCE_SYMBOL $0623 VIA_port_b
FORCE_SYMBOL $0625 VIA_port_a
FORCE_SYMBOL $0627 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0629
FORCE_SYMBOL $062C VIA_int_flags
FORCE_SYMBOL $0630 VIA_port_a
COMMENT_LINE $0632 U=String pointer to first $81
FORCE_NO_SYMBOL $0632
COMMENT $0634 Clear D/A output
FORCE_SYMBOL $0634 VIA_port_a
COMMENT $0636 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0636 VIA_aux_cntl
FORCE_SYMBOL $0638 Char_Tablef1
FORCE_NO_SYMBOL $063B
COMMENT $063D enable mux, set y to 0 disable ramp
FORCE_SYMBOL $063D VIA_port_b
COMMENT $063F disable RAMP, disable mux
FORCE_SYMBOL $063F VIA_port_b
COMMENT $0643 Get text width
FORCE_SYMBOL $0643 Vec_Text_Width
FORCE_SYMBOL $0647 Vec_Text_Width_neg
COMMENT $064D Send it to the D/A
FORCE_SYMBOL $064D VIA_port_a
FORCE_NO_SYMBOL $064F
COMMENT $0651 enable RAMP, disable mux
FORCE_SYMBOL $0651 VIA_port_b
COMMENT $0653 delay needed for drawing
COMMENT $0658 Get bitmap from chargen table
COMMENT $065A Save in shift register
FORCE_SYMBOL $065A VIA_shift_reg
COMMENT $065C Get next character
COMMENT $065E Go back if not terminator
COMMENT_LINE $0660 A=$81
COMMENT $0660 disable RAMP, disable mux
FORCE_SYMBOL $0660 VIA_port_b
FORCE_SYMBOL $0662 Char_Tableb1
COMMENT $0665 Get text height
FORCE_SYMBOL $0665 Vec_Text_Height
COMMENT_LINE $0668 now move down
COMMENT $0668 store 'height' to dac (y)
FORCE_SYMBOL $0668 VIA_port_a
COMMENT $066A disable RAMP, enable mux
FORCE_SYMBOL $066A VIA_port_b
COMMENT $066C disable RAMP, disable mux
FORCE_SYMBOL $066C VIA_port_b
COMMENT $066E zero dac
FORCE_SYMBOL $066E VIA_port_a
COMMENT_LINE $0670 now only y set, x to zero
FORCE_NO_SYMBOL $0670
COMMENT $0672 enable RAMP, disable mux
FORCE_SYMBOL $0672 VIA_port_b
COMMENT $0676 Get first character
COMMENT $0678 enable RAMP, enable mux
FORCE_SYMBOL $0678 VIA_port_b
COMMENT_LINE $067A tricky, cutting y off while
COMMENT_LINE $067A integrating, saves one switch of mux
COMMENT_LINE $067A still B=$81
COMMENT $067A disable RAMP, disable mux
FORCE_SYMBOL $067A VIA_port_b
FORCE_SYMBOL $067C Vec_Text_Width_neg
COMMENT_LINE $067F now finnished moving down
COMMENT $067F negative x speed
FORCE_SYMBOL $067F VIA_port_a
FORCE_NO_SYMBOL $0681
COMMENT $0683 enable RAMP, disable mux
FORCE_SYMBOL $0683 VIA_port_b
COMMENT $0685 delay needed for drawing
COMMENT $068A Get bitmap from chargen table
COMMENT $068C Save in shift register
FORCE_SYMBOL $068C VIA_shift_reg
COMMENT $068E Get next character
COMMENT $0690 Go back if not terminator
COMMENT_LINE $0692 A=$81
COMMENT $0692 disable RAMP, disable mux
FORCE_SYMBOL $0692 VIA_port_b
FORCE_SYMBOL $0694 Char_Tablef2
COMMENT $0697 Get text height
FORCE_SYMBOL $0697 Vec_Text_Height
COMMENT_LINE $069A now move down
COMMENT $069A store 'height' to dac (y)
FORCE_SYMBOL $069A VIA_port_a
COMMENT $069C disable RAMP, enable mux
FORCE_SYMBOL $069C VIA_port_b
COMMENT $069E disable RAMP, disable mux
FORCE_SYMBOL $069E VIA_port_b
COMMENT $06A0 zero dac
FORCE_SYMBOL $06A0 VIA_port_a
COMMENT_LINE $06A2 now only y set, x to zero
FORCE_NO_SYMBOL $06A2
COMMENT $06A4 enable RAMP, disable mux
FORCE_SYMBOL $06A4 VIA_port_b
COMMENT_LINE $06A6 here we move down
COMMENT $06AA enable RAMP, enable mux
FORCE_SYMBOL $06AA VIA_port_b
COMMENT_LINE $06AC tricky, cutting y off while
COMMENT_LINE $06AC integrating, saves one switch of mux
COMMENT_LINE $06AC still b=$81
COMMENT $06AC disable RAMP, disable mux
FORCE_SYMBOL $06AC VIA_port_b
FORCE_SYMBOL $06AE Vec_Text_Width
COMMENT_LINE $06B1 now finnished moving down
COMMENT $06B1 Send it to the D/A
FORCE_SYMBOL $06B1 VIA_port_a
FORCE_NO_SYMBOL $06B3
COMMENT $06B5 enable RAMP, disable mux
FORCE_SYMBOL $06B5 VIA_port_b
COMMENT $06B7 delay needed for drawing
COMMENT $06BC Get bitmap from chargen table
COMMENT $06BE Save in shift register
FORCE_SYMBOL $06BE VIA_shift_reg
COMMENT $06C0 Get next character
COMMENT $06C2 Go back if not terminator
COMMENT_LINE $06C4 A=$81
COMMENT $06C4 disable RAMP, disable mux
FORCE_SYMBOL $06C4 VIA_port_b
FORCE_SYMBOL $06C6 Char_Tableb2
COMMENT $06C9 Get text height
FORCE_SYMBOL $06C9 Vec_Text_Height
COMMENT_LINE $06CC now move down
COMMENT $06CC store 'height' to dac (y)
FORCE_SYMBOL $06CC VIA_port_a
COMMENT $06CE disable RAMP, enable mux
FORCE_SYMBOL $06CE VIA_port_b
COMMENT $06D0 disable RAMP, disable mux
FORCE_SYMBOL $06D0 VIA_port_b
COMMENT $06D2 zero dac
FORCE_SYMBOL $06D2 VIA_port_a
COMMENT_LINE $06D4 now only y set, x to zero
FORCE_NO_SYMBOL $06D4
COMMENT $06D6 enable RAMP, disable mux
FORCE_SYMBOL $06D6 VIA_port_b
COMMENT $06DA Get first character
COMMENT $06DC enable RAMP, enable mux
FORCE_SYMBOL $06DC VIA_port_b
COMMENT_LINE $06DE tricky, cutting y off while
COMMENT_LINE $06DE integrating, saves one switch of mux
COMMENT_LINE $06DE still B=$81
COMMENT $06DE disable RAMP, disable mux
FORCE_SYMBOL $06DE VIA_port_b
FORCE_SYMBOL $06E0 Vec_Text_Width_neg
COMMENT_LINE $06E3 now finnished moving down
COMMENT $06E3 negative x speed
FORCE_SYMBOL $06E3 VIA_port_a
FORCE_NO_SYMBOL $06E5
COMMENT $06E7 enable RAMP, disable mux
FORCE_SYMBOL $06E7 VIA_port_b
COMMENT $06E9 delay needed for drawing
COMMENT $06EE Get bitmap from chargen table
COMMENT $06F0 Save in shift register
FORCE_SYMBOL $06F0 VIA_shift_reg
COMMENT $06F2 Get next character
COMMENT $06F4 Go back if not terminator
COMMENT_LINE $06F6 A=$81
COMMENT $06F6 disable RAMP, disable mux
FORCE_SYMBOL $06F6 VIA_port_b
FORCE_SYMBOL $06F8 Char_Tablef3
COMMENT $06FB Get text height
FORCE_SYMBOL $06FB Vec_Text_Height
COMMENT_LINE $06FE now move down
COMMENT $06FE store 'height' to dac (y)
FORCE_SYMBOL $06FE VIA_port_a
COMMENT $0700 disable RAMP, enable mux
FORCE_SYMBOL $0700 VIA_port_b
COMMENT $0702 disable RAMP, disable mux
FORCE_SYMBOL $0702 VIA_port_b
COMMENT $0704 zero dac
FORCE_SYMBOL $0704 VIA_port_a
COMMENT_LINE $0706 now only y set, x to zero
FORCE_NO_SYMBOL $0706
COMMENT $0708 enable RAMP, disable mux
FORCE_SYMBOL $0708 VIA_port_b
COMMENT_LINE $070A here we move down
COMMENT $070E enable RAMP, enable mux
FORCE_SYMBOL $070E VIA_port_b
COMMENT_LINE $0710 tricky, cutting y off while
COMMENT_LINE $0710 integrating, saves one switch of mux
COMMENT_LINE $0710 still b=$81
COMMENT $0710 disable RAMP, disable mux
FORCE_SYMBOL $0710 VIA_port_b
FORCE_SYMBOL $0712 Vec_Text_Width
COMMENT_LINE $0715 now finnished moving down
COMMENT $0715 Send it to the D/A
FORCE_SYMBOL $0715 VIA_port_a
FORCE_NO_SYMBOL $0717
COMMENT $0719 enable RAMP, disable mux
FORCE_SYMBOL $0719 VIA_port_b
COMMENT $071B delay needed for drawing
COMMENT $0720 Get bitmap from chargen table
COMMENT $0722 Save in shift register
FORCE_SYMBOL $0722 VIA_shift_reg
COMMENT $0724 Get next character
COMMENT $0726 Go back if not terminator
COMMENT_LINE $0728 A=$81
COMMENT $0728 disable RAMP, disable mux
FORCE_SYMBOL $0728 VIA_port_b
FORCE_SYMBOL $072A Char_Tableb3
COMMENT $072D Get text height
FORCE_SYMBOL $072D Vec_Text_Height
COMMENT_LINE $0730 now move down
COMMENT $0730 store 'height' to dac (y)
FORCE_SYMBOL $0730 VIA_port_a
COMMENT $0732 disable RAMP, enable mux
FORCE_SYMBOL $0732 VIA_port_b
COMMENT $0734 disable RAMP, disable mux
FORCE_SYMBOL $0734 VIA_port_b
COMMENT $0736 zero dac
FORCE_SYMBOL $0736 VIA_port_a
COMMENT_LINE $0738 now only y set, x to zero
FORCE_NO_SYMBOL $0738
COMMENT $073A enable RAMP, disable mux
FORCE_SYMBOL $073A VIA_port_b
COMMENT $073E Get first character
COMMENT $0740 enable RAMP, enable mux
FORCE_SYMBOL $0740 VIA_port_b
COMMENT_LINE $0742 tricky, cutting y off while
COMMENT_LINE $0742 integrating, saves one switch of mux
COMMENT_LINE $0742 still B=$81
COMMENT $0742 disable RAMP, disable mux
FORCE_SYMBOL $0742 VIA_port_b
FORCE_SYMBOL $0744 Vec_Text_Width_neg
COMMENT_LINE $0747 now finnished moving down
COMMENT $0747 negative x speed
FORCE_SYMBOL $0747 VIA_port_a
FORCE_NO_SYMBOL $0749
COMMENT $074B enable RAMP, disable mux
FORCE_SYMBOL $074B VIA_port_b
COMMENT $074D delay needed for drawing
COMMENT $0752 Get bitmap from chargen table
COMMENT $0754 Save in shift register
FORCE_SYMBOL $0754 VIA_shift_reg
COMMENT $0756 Get next character
COMMENT $0758 Go back if not terminator
COMMENT_LINE $075A A=$81
COMMENT $075A disable RAMP, disable mux
FORCE_SYMBOL $075A VIA_port_b
FORCE_SYMBOL $075C Char_Tablef4
COMMENT $075F Get text height
FORCE_SYMBOL $075F Vec_Text_Height
COMMENT_LINE $0762 now move down
COMMENT $0762 store 'height' to dac (y)
FORCE_SYMBOL $0762 VIA_port_a
COMMENT $0764 disable RAMP, enable mux
FORCE_SYMBOL $0764 VIA_port_b
COMMENT $0766 disable RAMP, disable mux
FORCE_SYMBOL $0766 VIA_port_b
COMMENT $0768 zero dac
FORCE_SYMBOL $0768 VIA_port_a
COMMENT_LINE $076A now only y set, x to zero
FORCE_NO_SYMBOL $076A
COMMENT $076C enable RAMP, disable mux
FORCE_SYMBOL $076C VIA_port_b
COMMENT_LINE $076E here we move down
COMMENT $0772 enable RAMP, enable mux
FORCE_SYMBOL $0772 VIA_port_b
COMMENT_LINE $0774 tricky, cutting y off while
COMMENT_LINE $0774 integrating, saves one switch of mux
COMMENT_LINE $0774 still b=$81
COMMENT $0774 disable RAMP, disable mux
FORCE_SYMBOL $0774 VIA_port_b
FORCE_SYMBOL $0776 Vec_Text_Width
COMMENT_LINE $0779 now finnished moving down
COMMENT $0779 Send it to the D/A
FORCE_SYMBOL $0779 VIA_port_a
FORCE_NO_SYMBOL $077B
COMMENT $077D enable RAMP, disable mux
FORCE_SYMBOL $077D VIA_port_b
COMMENT $077F delay needed for drawing
COMMENT $0784 Get bitmap from chargen table
COMMENT $0786 Save in shift register
FORCE_SYMBOL $0786 VIA_shift_reg
COMMENT $0788 Get next character
COMMENT $078A Go back if not terminator
COMMENT_LINE $078C A=$81
COMMENT $078C disable RAMP, disable mux
FORCE_SYMBOL $078C VIA_port_b
FORCE_NO_SYMBOL $078E
COMMENT $0790 T1->PB7 enabled
FORCE_SYMBOL $0790 VIA_aux_cntl
FORCE_SYMBOL $0792 VIA_shift_reg
FORCE_NO_SYMBOL $0794
COMMENT $0796 /BLANK low and /ZERO low
FORCE_SYMBOL $0796 VIA_cntl
COMMENT $0798 _D0                  ;Call Reset0Ref macro
FORCE_NO_SYMBOL $0798
COMMENT_LINE $079B STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $079B STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $079B LDD   #0x0302;
COMMENT_LINE $079B CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $079B STA   <VIA_port_b       ;0x00;
COMMENT_LINE $079B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $079B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $079B LDB   #0x01;
COMMENT_LINE $079B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $079B LDB    #0x00CC;
COMMENT $079B 0x0C;
FORCE_SYMBOL $079B VIA_cntl
FORCE_SYMBOL $079D open2_string
COMMENT $07A0 Call enhenced print routine
COMMENT_LINE $07A2 Moveto_d_7F start
FORCE_SYMBOL $07A2 VIA_port_a
FORCE_NO_SYMBOL $07A4
FORCE_SYMBOL $07A6 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $07A8
FORCE_SYMBOL $07AA VIA_cntl
FORCE_SYMBOL $07AD VIA_port_b
FORCE_SYMBOL $07AF VIA_shift_reg
FORCE_SYMBOL $07B1 VIA_port_b
FORCE_SYMBOL $07B3 VIA_port_a
FORCE_SYMBOL $07B5 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $07B7
FORCE_SYMBOL $07BA VIA_int_flags
FORCE_SYMBOL $07BE VIA_port_a
COMMENT_LINE $07C0 U=String pointer to first $81
FORCE_NO_SYMBOL $07C0
COMMENT $07C2 Clear D/A output
FORCE_SYMBOL $07C2 VIA_port_a
COMMENT $07C4 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $07C4 VIA_aux_cntl
FORCE_SYMBOL $07C6 Char_Tablef1
FORCE_NO_SYMBOL $07C9
COMMENT $07CB enable mux, set y to 0 disable ramp
FORCE_SYMBOL $07CB VIA_port_b
COMMENT $07CD disable RAMP, disable mux
FORCE_SYMBOL $07CD VIA_port_b
COMMENT $07D1 Get text width
FORCE_SYMBOL $07D1 Vec_Text_Width
FORCE_SYMBOL $07D5 Vec_Text_Width_neg
COMMENT $07DB Send it to the D/A
FORCE_SYMBOL $07DB VIA_port_a
FORCE_NO_SYMBOL $07DD
COMMENT $07DF enable RAMP, disable mux
FORCE_SYMBOL $07DF VIA_port_b
COMMENT $07E1 delay needed for drawing
COMMENT $07E6 Get bitmap from chargen table
COMMENT $07E8 Save in shift register
FORCE_SYMBOL $07E8 VIA_shift_reg
COMMENT $07EA Get next character
COMMENT $07EC Go back if not terminator
COMMENT_LINE $07EE A=$81
COMMENT $07EE disable RAMP, disable mux
FORCE_SYMBOL $07EE VIA_port_b
FORCE_SYMBOL $07F0 Char_Tableb1
COMMENT $07F3 Get text height
FORCE_SYMBOL $07F3 Vec_Text_Height
COMMENT_LINE $07F6 now move down
COMMENT $07F6 store 'height' to dac (y)
FORCE_SYMBOL $07F6 VIA_port_a
COMMENT $07F8 disable RAMP, enable mux
FORCE_SYMBOL $07F8 VIA_port_b
COMMENT $07FA disable RAMP, disable mux
FORCE_SYMBOL $07FA VIA_port_b
COMMENT $07FC zero dac
FORCE_SYMBOL $07FC VIA_port_a
COMMENT_LINE $07FE now only y set, x to zero
FORCE_NO_SYMBOL $07FE
COMMENT $0800 enable RAMP, disable mux
FORCE_SYMBOL $0800 VIA_port_b
COMMENT $0804 Get first character
COMMENT $0806 enable RAMP, enable mux
FORCE_SYMBOL $0806 VIA_port_b
COMMENT_LINE $0808 tricky, cutting y off while
COMMENT_LINE $0808 integrating, saves one switch of mux
COMMENT_LINE $0808 still B=$81
COMMENT $0808 disable RAMP, disable mux
FORCE_SYMBOL $0808 VIA_port_b
FORCE_SYMBOL $080A Vec_Text_Width_neg
COMMENT_LINE $080D now finnished moving down
COMMENT $080D negative x speed
FORCE_SYMBOL $080D VIA_port_a
FORCE_NO_SYMBOL $080F
COMMENT $0811 enable RAMP, disable mux
FORCE_SYMBOL $0811 VIA_port_b
COMMENT $0813 delay needed for drawing
COMMENT $0818 Get bitmap from chargen table
COMMENT $081A Save in shift register
FORCE_SYMBOL $081A VIA_shift_reg
COMMENT $081C Get next character
COMMENT $081E Go back if not terminator
COMMENT_LINE $0820 A=$81
COMMENT $0820 disable RAMP, disable mux
FORCE_SYMBOL $0820 VIA_port_b
FORCE_SYMBOL $0822 Char_Tablef2
COMMENT $0825 Get text height
FORCE_SYMBOL $0825 Vec_Text_Height
COMMENT_LINE $0828 now move down
COMMENT $0828 store 'height' to dac (y)
FORCE_SYMBOL $0828 VIA_port_a
COMMENT $082A disable RAMP, enable mux
FORCE_SYMBOL $082A VIA_port_b
COMMENT $082C disable RAMP, disable mux
FORCE_SYMBOL $082C VIA_port_b
COMMENT $082E zero dac
FORCE_SYMBOL $082E VIA_port_a
COMMENT_LINE $0830 now only y set, x to zero
FORCE_NO_SYMBOL $0830
COMMENT $0832 enable RAMP, disable mux
FORCE_SYMBOL $0832 VIA_port_b
COMMENT_LINE $0834 here we move down
COMMENT $0838 enable RAMP, enable mux
FORCE_SYMBOL $0838 VIA_port_b
COMMENT_LINE $083A tricky, cutting y off while
COMMENT_LINE $083A integrating, saves one switch of mux
COMMENT_LINE $083A still b=$81
COMMENT $083A disable RAMP, disable mux
FORCE_SYMBOL $083A VIA_port_b
FORCE_SYMBOL $083C Vec_Text_Width
COMMENT_LINE $083F now finnished moving down
COMMENT $083F Send it to the D/A
FORCE_SYMBOL $083F VIA_port_a
FORCE_NO_SYMBOL $0841
COMMENT $0843 enable RAMP, disable mux
FORCE_SYMBOL $0843 VIA_port_b
COMMENT $0845 delay needed for drawing
COMMENT $084A Get bitmap from chargen table
COMMENT $084C Save in shift register
FORCE_SYMBOL $084C VIA_shift_reg
COMMENT $084E Get next character
COMMENT $0850 Go back if not terminator
COMMENT_LINE $0852 A=$81
COMMENT $0852 disable RAMP, disable mux
FORCE_SYMBOL $0852 VIA_port_b
FORCE_SYMBOL $0854 Char_Tableb2
COMMENT $0857 Get text height
FORCE_SYMBOL $0857 Vec_Text_Height
COMMENT_LINE $085A now move down
COMMENT $085A store 'height' to dac (y)
FORCE_SYMBOL $085A VIA_port_a
COMMENT $085C disable RAMP, enable mux
FORCE_SYMBOL $085C VIA_port_b
COMMENT $085E disable RAMP, disable mux
FORCE_SYMBOL $085E VIA_port_b
COMMENT $0860 zero dac
FORCE_SYMBOL $0860 VIA_port_a
COMMENT_LINE $0862 now only y set, x to zero
FORCE_NO_SYMBOL $0862
COMMENT $0864 enable RAMP, disable mux
FORCE_SYMBOL $0864 VIA_port_b
COMMENT $0868 Get first character
COMMENT $086A enable RAMP, enable mux
FORCE_SYMBOL $086A VIA_port_b
COMMENT_LINE $086C tricky, cutting y off while
COMMENT_LINE $086C integrating, saves one switch of mux
COMMENT_LINE $086C still B=$81
COMMENT $086C disable RAMP, disable mux
FORCE_SYMBOL $086C VIA_port_b
FORCE_SYMBOL $086E Vec_Text_Width_neg
COMMENT_LINE $0871 now finnished moving down
COMMENT $0871 negative x speed
FORCE_SYMBOL $0871 VIA_port_a
FORCE_NO_SYMBOL $0873
COMMENT $0875 enable RAMP, disable mux
FORCE_SYMBOL $0875 VIA_port_b
COMMENT $0877 delay needed for drawing
COMMENT $087C Get bitmap from chargen table
COMMENT $087E Save in shift register
FORCE_SYMBOL $087E VIA_shift_reg
COMMENT $0880 Get next character
COMMENT $0882 Go back if not terminator
COMMENT_LINE $0884 A=$81
COMMENT $0884 disable RAMP, disable mux
FORCE_SYMBOL $0884 VIA_port_b
FORCE_SYMBOL $0886 Char_Tablef3
COMMENT $0889 Get text height
FORCE_SYMBOL $0889 Vec_Text_Height
COMMENT_LINE $088C now move down
COMMENT $088C store 'height' to dac (y)
FORCE_SYMBOL $088C VIA_port_a
COMMENT $088E disable RAMP, enable mux
FORCE_SYMBOL $088E VIA_port_b
COMMENT $0890 disable RAMP, disable mux
FORCE_SYMBOL $0890 VIA_port_b
COMMENT $0892 zero dac
FORCE_SYMBOL $0892 VIA_port_a
COMMENT_LINE $0894 now only y set, x to zero
FORCE_NO_SYMBOL $0894
COMMENT $0896 enable RAMP, disable mux
FORCE_SYMBOL $0896 VIA_port_b
COMMENT_LINE $0898 here we move down
COMMENT $089C enable RAMP, enable mux
FORCE_SYMBOL $089C VIA_port_b
COMMENT_LINE $089E tricky, cutting y off while
COMMENT_LINE $089E integrating, saves one switch of mux
COMMENT_LINE $089E still b=$81
COMMENT $089E disable RAMP, disable mux
FORCE_SYMBOL $089E VIA_port_b
FORCE_SYMBOL $08A0 Vec_Text_Width
COMMENT_LINE $08A3 now finnished moving down
COMMENT $08A3 Send it to the D/A
FORCE_SYMBOL $08A3 VIA_port_a
FORCE_NO_SYMBOL $08A5
COMMENT $08A7 enable RAMP, disable mux
FORCE_SYMBOL $08A7 VIA_port_b
COMMENT $08A9 delay needed for drawing
COMMENT $08AE Get bitmap from chargen table
COMMENT $08B0 Save in shift register
FORCE_SYMBOL $08B0 VIA_shift_reg
COMMENT $08B2 Get next character
COMMENT $08B4 Go back if not terminator
COMMENT_LINE $08B6 A=$81
COMMENT $08B6 disable RAMP, disable mux
FORCE_SYMBOL $08B6 VIA_port_b
FORCE_SYMBOL $08B8 Char_Tableb3
COMMENT $08BB Get text height
FORCE_SYMBOL $08BB Vec_Text_Height
COMMENT_LINE $08BE now move down
COMMENT $08BE store 'height' to dac (y)
FORCE_SYMBOL $08BE VIA_port_a
COMMENT $08C0 disable RAMP, enable mux
FORCE_SYMBOL $08C0 VIA_port_b
COMMENT $08C2 disable RAMP, disable mux
FORCE_SYMBOL $08C2 VIA_port_b
COMMENT $08C4 zero dac
FORCE_SYMBOL $08C4 VIA_port_a
COMMENT_LINE $08C6 now only y set, x to zero
FORCE_NO_SYMBOL $08C6
COMMENT $08C8 enable RAMP, disable mux
FORCE_SYMBOL $08C8 VIA_port_b
COMMENT $08CC Get first character
COMMENT $08CE enable RAMP, enable mux
FORCE_SYMBOL $08CE VIA_port_b
COMMENT_LINE $08D0 tricky, cutting y off while
COMMENT_LINE $08D0 integrating, saves one switch of mux
COMMENT_LINE $08D0 still B=$81
COMMENT $08D0 disable RAMP, disable mux
FORCE_SYMBOL $08D0 VIA_port_b
FORCE_SYMBOL $08D2 Vec_Text_Width_neg
COMMENT_LINE $08D5 now finnished moving down
COMMENT $08D5 negative x speed
FORCE_SYMBOL $08D5 VIA_port_a
FORCE_NO_SYMBOL $08D7
COMMENT $08D9 enable RAMP, disable mux
FORCE_SYMBOL $08D9 VIA_port_b
COMMENT $08DB delay needed for drawing
COMMENT $08E0 Get bitmap from chargen table
COMMENT $08E2 Save in shift register
FORCE_SYMBOL $08E2 VIA_shift_reg
COMMENT $08E4 Get next character
COMMENT $08E6 Go back if not terminator
COMMENT_LINE $08E8 A=$81
COMMENT $08E8 disable RAMP, disable mux
FORCE_SYMBOL $08E8 VIA_port_b
FORCE_SYMBOL $08EA Char_Tablef4
COMMENT $08ED Get text height
FORCE_SYMBOL $08ED Vec_Text_Height
COMMENT_LINE $08F0 now move down
COMMENT $08F0 store 'height' to dac (y)
FORCE_SYMBOL $08F0 VIA_port_a
COMMENT $08F2 disable RAMP, enable mux
FORCE_SYMBOL $08F2 VIA_port_b
COMMENT $08F4 disable RAMP, disable mux
FORCE_SYMBOL $08F4 VIA_port_b
COMMENT $08F6 zero dac
FORCE_SYMBOL $08F6 VIA_port_a
COMMENT_LINE $08F8 now only y set, x to zero
FORCE_NO_SYMBOL $08F8
COMMENT $08FA enable RAMP, disable mux
FORCE_SYMBOL $08FA VIA_port_b
COMMENT_LINE $08FC here we move down
COMMENT $0900 enable RAMP, enable mux
FORCE_SYMBOL $0900 VIA_port_b
COMMENT_LINE $0902 tricky, cutting y off while
COMMENT_LINE $0902 integrating, saves one switch of mux
COMMENT_LINE $0902 still b=$81
COMMENT $0902 disable RAMP, disable mux
FORCE_SYMBOL $0902 VIA_port_b
FORCE_SYMBOL $0904 Vec_Text_Width
COMMENT_LINE $0907 now finnished moving down
COMMENT $0907 Send it to the D/A
FORCE_SYMBOL $0907 VIA_port_a
FORCE_NO_SYMBOL $0909
COMMENT $090B enable RAMP, disable mux
FORCE_SYMBOL $090B VIA_port_b
COMMENT $090D delay needed for drawing
COMMENT $0912 Get bitmap from chargen table
COMMENT $0914 Save in shift register
FORCE_SYMBOL $0914 VIA_shift_reg
COMMENT $0916 Get next character
COMMENT $0918 Go back if not terminator
COMMENT_LINE $091A A=$81
COMMENT $091A disable RAMP, disable mux
FORCE_SYMBOL $091A VIA_port_b
FORCE_NO_SYMBOL $091C
COMMENT $091E T1->PB7 enabled
FORCE_SYMBOL $091E VIA_aux_cntl
FORCE_SYMBOL $0920 VIA_shift_reg
FORCE_NO_SYMBOL $0922
COMMENT $0924 /BLANK low and /ZERO low
FORCE_SYMBOL $0924 VIA_cntl
COMMENT $0926 _D0                  ;Call Reset0Ref macro
FORCE_NO_SYMBOL $0926
COMMENT_LINE $0929 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $0929 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $0929 LDD   #0x0302;
COMMENT_LINE $0929 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $0929 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $0929 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0929 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0929 LDB   #0x01;
COMMENT_LINE $0929 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $0929 LDB    #0x00CC;
COMMENT $0929 0x0C;
FORCE_SYMBOL $0929 VIA_cntl
FORCE_SYMBOL $092B open3_string
COMMENT $092E Call enhenced print routine
COMMENT_LINE $0930 Moveto_d_7F start
FORCE_SYMBOL $0930 VIA_port_a
FORCE_NO_SYMBOL $0932
FORCE_SYMBOL $0934 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0936
FORCE_SYMBOL $0938 VIA_cntl
FORCE_SYMBOL $093B VIA_port_b
FORCE_SYMBOL $093D VIA_shift_reg
FORCE_SYMBOL $093F VIA_port_b
FORCE_SYMBOL $0941 VIA_port_a
FORCE_SYMBOL $0943 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0945
FORCE_SYMBOL $0948 VIA_int_flags
FORCE_SYMBOL $094C VIA_port_a
COMMENT_LINE $094E U=String pointer to first $81
FORCE_NO_SYMBOL $094E
COMMENT $0950 Clear D/A output
FORCE_SYMBOL $0950 VIA_port_a
COMMENT $0952 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $0952 VIA_aux_cntl
FORCE_SYMBOL $0954 Char_Tablef1
FORCE_NO_SYMBOL $0957
COMMENT $0959 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $0959 VIA_port_b
COMMENT $095B disable RAMP, disable mux
FORCE_SYMBOL $095B VIA_port_b
COMMENT $095F Get text width
FORCE_SYMBOL $095F Vec_Text_Width
FORCE_SYMBOL $0963 Vec_Text_Width_neg
COMMENT $0969 Send it to the D/A
FORCE_SYMBOL $0969 VIA_port_a
FORCE_NO_SYMBOL $096B
COMMENT $096D enable RAMP, disable mux
FORCE_SYMBOL $096D VIA_port_b
COMMENT $096F delay needed for drawing
COMMENT $0974 Get bitmap from chargen table
COMMENT $0976 Save in shift register
FORCE_SYMBOL $0976 VIA_shift_reg
COMMENT $0978 Get next character
COMMENT $097A Go back if not terminator
COMMENT_LINE $097C A=$81
COMMENT $097C disable RAMP, disable mux
FORCE_SYMBOL $097C VIA_port_b
FORCE_SYMBOL $097E Char_Tableb1
COMMENT $0981 Get text height
FORCE_SYMBOL $0981 Vec_Text_Height
COMMENT_LINE $0984 now move down
COMMENT $0984 store 'height' to dac (y)
FORCE_SYMBOL $0984 VIA_port_a
COMMENT $0986 disable RAMP, enable mux
FORCE_SYMBOL $0986 VIA_port_b
COMMENT $0988 disable RAMP, disable mux
FORCE_SYMBOL $0988 VIA_port_b
COMMENT $098A zero dac
FORCE_SYMBOL $098A VIA_port_a
COMMENT_LINE $098C now only y set, x to zero
FORCE_NO_SYMBOL $098C
COMMENT $098E enable RAMP, disable mux
FORCE_SYMBOL $098E VIA_port_b
COMMENT $0992 Get first character
COMMENT $0994 enable RAMP, enable mux
FORCE_SYMBOL $0994 VIA_port_b
COMMENT_LINE $0996 tricky, cutting y off while
COMMENT_LINE $0996 integrating, saves one switch of mux
COMMENT_LINE $0996 still B=$81
COMMENT $0996 disable RAMP, disable mux
FORCE_SYMBOL $0996 VIA_port_b
FORCE_SYMBOL $0998 Vec_Text_Width_neg
COMMENT_LINE $099B now finnished moving down
COMMENT $099B negative x speed
FORCE_SYMBOL $099B VIA_port_a
FORCE_NO_SYMBOL $099D
COMMENT $099F enable RAMP, disable mux
FORCE_SYMBOL $099F VIA_port_b
COMMENT $09A1 delay needed for drawing
COMMENT $09A6 Get bitmap from chargen table
COMMENT $09A8 Save in shift register
FORCE_SYMBOL $09A8 VIA_shift_reg
COMMENT $09AA Get next character
COMMENT $09AC Go back if not terminator
COMMENT_LINE $09AE A=$81
COMMENT $09AE disable RAMP, disable mux
FORCE_SYMBOL $09AE VIA_port_b
FORCE_SYMBOL $09B0 Char_Tablef2
COMMENT $09B3 Get text height
FORCE_SYMBOL $09B3 Vec_Text_Height
COMMENT_LINE $09B6 now move down
COMMENT $09B6 store 'height' to dac (y)
FORCE_SYMBOL $09B6 VIA_port_a
COMMENT $09B8 disable RAMP, enable mux
FORCE_SYMBOL $09B8 VIA_port_b
COMMENT $09BA disable RAMP, disable mux
FORCE_SYMBOL $09BA VIA_port_b
COMMENT $09BC zero dac
FORCE_SYMBOL $09BC VIA_port_a
COMMENT_LINE $09BE now only y set, x to zero
FORCE_NO_SYMBOL $09BE
COMMENT $09C0 enable RAMP, disable mux
FORCE_SYMBOL $09C0 VIA_port_b
COMMENT_LINE $09C2 here we move down
COMMENT $09C6 enable RAMP, enable mux
FORCE_SYMBOL $09C6 VIA_port_b
COMMENT_LINE $09C8 tricky, cutting y off while
COMMENT_LINE $09C8 integrating, saves one switch of mux
COMMENT_LINE $09C8 still b=$81
COMMENT $09C8 disable RAMP, disable mux
FORCE_SYMBOL $09C8 VIA_port_b
FORCE_SYMBOL $09CA Vec_Text_Width
COMMENT_LINE $09CD now finnished moving down
COMMENT $09CD Send it to the D/A
FORCE_SYMBOL $09CD VIA_port_a
FORCE_NO_SYMBOL $09CF
COMMENT $09D1 enable RAMP, disable mux
FORCE_SYMBOL $09D1 VIA_port_b
COMMENT $09D3 delay needed for drawing
COMMENT $09D8 Get bitmap from chargen table
COMMENT $09DA Save in shift register
FORCE_SYMBOL $09DA VIA_shift_reg
COMMENT $09DC Get next character
COMMENT $09DE Go back if not terminator
COMMENT_LINE $09E0 A=$81
COMMENT $09E0 disable RAMP, disable mux
FORCE_SYMBOL $09E0 VIA_port_b
FORCE_SYMBOL $09E2 Char_Tableb2
COMMENT $09E5 Get text height
FORCE_SYMBOL $09E5 Vec_Text_Height
COMMENT_LINE $09E8 now move down
COMMENT $09E8 store 'height' to dac (y)
FORCE_SYMBOL $09E8 VIA_port_a
COMMENT $09EA disable RAMP, enable mux
FORCE_SYMBOL $09EA VIA_port_b
COMMENT $09EC disable RAMP, disable mux
FORCE_SYMBOL $09EC VIA_port_b
COMMENT $09EE zero dac
FORCE_SYMBOL $09EE VIA_port_a
COMMENT_LINE $09F0 now only y set, x to zero
FORCE_NO_SYMBOL $09F0
COMMENT $09F2 enable RAMP, disable mux
FORCE_SYMBOL $09F2 VIA_port_b
COMMENT $09F6 Get first character
COMMENT $09F8 enable RAMP, enable mux
FORCE_SYMBOL $09F8 VIA_port_b
COMMENT_LINE $09FA tricky, cutting y off while
COMMENT_LINE $09FA integrating, saves one switch of mux
COMMENT_LINE $09FA still B=$81
COMMENT $09FA disable RAMP, disable mux
FORCE_SYMBOL $09FA VIA_port_b
FORCE_SYMBOL $09FC Vec_Text_Width_neg
COMMENT_LINE $09FF now finnished moving down
COMMENT $09FF negative x speed
FORCE_SYMBOL $09FF VIA_port_a
FORCE_NO_SYMBOL $0A01
COMMENT $0A03 enable RAMP, disable mux
FORCE_SYMBOL $0A03 VIA_port_b
COMMENT $0A05 delay needed for drawing
COMMENT $0A0A Get bitmap from chargen table
COMMENT $0A0C Save in shift register
FORCE_SYMBOL $0A0C VIA_shift_reg
COMMENT $0A0E Get next character
COMMENT $0A10 Go back if not terminator
COMMENT_LINE $0A12 A=$81
COMMENT $0A12 disable RAMP, disable mux
FORCE_SYMBOL $0A12 VIA_port_b
FORCE_SYMBOL $0A14 Char_Tablef3
COMMENT $0A17 Get text height
FORCE_SYMBOL $0A17 Vec_Text_Height
COMMENT_LINE $0A1A now move down
COMMENT $0A1A store 'height' to dac (y)
FORCE_SYMBOL $0A1A VIA_port_a
COMMENT $0A1C disable RAMP, enable mux
FORCE_SYMBOL $0A1C VIA_port_b
COMMENT $0A1E disable RAMP, disable mux
FORCE_SYMBOL $0A1E VIA_port_b
COMMENT $0A20 zero dac
FORCE_SYMBOL $0A20 VIA_port_a
COMMENT_LINE $0A22 now only y set, x to zero
FORCE_NO_SYMBOL $0A22
COMMENT $0A24 enable RAMP, disable mux
FORCE_SYMBOL $0A24 VIA_port_b
COMMENT_LINE $0A26 here we move down
COMMENT $0A2A enable RAMP, enable mux
FORCE_SYMBOL $0A2A VIA_port_b
COMMENT_LINE $0A2C tricky, cutting y off while
COMMENT_LINE $0A2C integrating, saves one switch of mux
COMMENT_LINE $0A2C still b=$81
COMMENT $0A2C disable RAMP, disable mux
FORCE_SYMBOL $0A2C VIA_port_b
FORCE_SYMBOL $0A2E Vec_Text_Width
COMMENT_LINE $0A31 now finnished moving down
COMMENT $0A31 Send it to the D/A
FORCE_SYMBOL $0A31 VIA_port_a
FORCE_NO_SYMBOL $0A33
COMMENT $0A35 enable RAMP, disable mux
FORCE_SYMBOL $0A35 VIA_port_b
COMMENT $0A37 delay needed for drawing
COMMENT $0A3C Get bitmap from chargen table
COMMENT $0A3E Save in shift register
FORCE_SYMBOL $0A3E VIA_shift_reg
COMMENT $0A40 Get next character
COMMENT $0A42 Go back if not terminator
COMMENT_LINE $0A44 A=$81
COMMENT $0A44 disable RAMP, disable mux
FORCE_SYMBOL $0A44 VIA_port_b
FORCE_SYMBOL $0A46 Char_Tableb3
COMMENT $0A49 Get text height
FORCE_SYMBOL $0A49 Vec_Text_Height
COMMENT_LINE $0A4C now move down
COMMENT $0A4C store 'height' to dac (y)
FORCE_SYMBOL $0A4C VIA_port_a
COMMENT $0A4E disable RAMP, enable mux
FORCE_SYMBOL $0A4E VIA_port_b
COMMENT $0A50 disable RAMP, disable mux
FORCE_SYMBOL $0A50 VIA_port_b
COMMENT $0A52 zero dac
FORCE_SYMBOL $0A52 VIA_port_a
COMMENT_LINE $0A54 now only y set, x to zero
FORCE_NO_SYMBOL $0A54
COMMENT $0A56 enable RAMP, disable mux
FORCE_SYMBOL $0A56 VIA_port_b
COMMENT $0A5A Get first character
COMMENT $0A5C enable RAMP, enable mux
FORCE_SYMBOL $0A5C VIA_port_b
COMMENT_LINE $0A5E tricky, cutting y off while
COMMENT_LINE $0A5E integrating, saves one switch of mux
COMMENT_LINE $0A5E still B=$81
COMMENT $0A5E disable RAMP, disable mux
FORCE_SYMBOL $0A5E VIA_port_b
FORCE_SYMBOL $0A60 Vec_Text_Width_neg
COMMENT_LINE $0A63 now finnished moving down
COMMENT $0A63 negative x speed
FORCE_SYMBOL $0A63 VIA_port_a
FORCE_NO_SYMBOL $0A65
COMMENT $0A67 enable RAMP, disable mux
FORCE_SYMBOL $0A67 VIA_port_b
COMMENT $0A69 delay needed for drawing
COMMENT $0A6E Get bitmap from chargen table
COMMENT $0A70 Save in shift register
FORCE_SYMBOL $0A70 VIA_shift_reg
COMMENT $0A72 Get next character
COMMENT $0A74 Go back if not terminator
COMMENT_LINE $0A76 A=$81
COMMENT $0A76 disable RAMP, disable mux
FORCE_SYMBOL $0A76 VIA_port_b
FORCE_SYMBOL $0A78 Char_Tablef4
COMMENT $0A7B Get text height
FORCE_SYMBOL $0A7B Vec_Text_Height
COMMENT_LINE $0A7E now move down
COMMENT $0A7E store 'height' to dac (y)
FORCE_SYMBOL $0A7E VIA_port_a
COMMENT $0A80 disable RAMP, enable mux
FORCE_SYMBOL $0A80 VIA_port_b
COMMENT $0A82 disable RAMP, disable mux
FORCE_SYMBOL $0A82 VIA_port_b
COMMENT $0A84 zero dac
FORCE_SYMBOL $0A84 VIA_port_a
COMMENT_LINE $0A86 now only y set, x to zero
FORCE_NO_SYMBOL $0A86
COMMENT $0A88 enable RAMP, disable mux
FORCE_SYMBOL $0A88 VIA_port_b
COMMENT_LINE $0A8A here we move down
COMMENT $0A8E enable RAMP, enable mux
FORCE_SYMBOL $0A8E VIA_port_b
COMMENT_LINE $0A90 tricky, cutting y off while
COMMENT_LINE $0A90 integrating, saves one switch of mux
COMMENT_LINE $0A90 still b=$81
COMMENT $0A90 disable RAMP, disable mux
FORCE_SYMBOL $0A90 VIA_port_b
FORCE_SYMBOL $0A92 Vec_Text_Width
COMMENT_LINE $0A95 now finnished moving down
COMMENT $0A95 Send it to the D/A
FORCE_SYMBOL $0A95 VIA_port_a
FORCE_NO_SYMBOL $0A97
COMMENT $0A99 enable RAMP, disable mux
FORCE_SYMBOL $0A99 VIA_port_b
COMMENT $0A9B delay needed for drawing
COMMENT $0AA0 Get bitmap from chargen table
COMMENT $0AA2 Save in shift register
FORCE_SYMBOL $0AA2 VIA_shift_reg
COMMENT $0AA4 Get next character
COMMENT $0AA6 Go back if not terminator
COMMENT_LINE $0AA8 A=$81
COMMENT $0AA8 disable RAMP, disable mux
FORCE_SYMBOL $0AA8 VIA_port_b
FORCE_NO_SYMBOL $0AAA
COMMENT $0AAC T1->PB7 enabled
FORCE_SYMBOL $0AAC VIA_aux_cntl
FORCE_SYMBOL $0AAE VIA_shift_reg
FORCE_NO_SYMBOL $0AB0
COMMENT $0AB2 /BLANK low and /ZERO low
FORCE_SYMBOL $0AB2 VIA_cntl
COMMENT $0AB4 Play the YM sound
FORCE_SYMBOL $0AB4 do_ym_sound
COMMENT $0AB7 Check if music reached to its end
FORCE_SYMBOL $0AB7 ym_data_current
COMMENT $0ABA if yes, restart...
COMMENT $0ABE Get Buttons status
FORCE_SYMBOL $0ABE Read_Btns
COMMENT $0AC1 If no button pressed,
FORCE_NO_SYMBOL $0AC1
COMMENT $0AC3 goto opening_loop...
FORCE_NO_SYMBOL $0AC7
COMMENT $0ACB ORIGINAL CONTROLLER selected...
FORCE_SYMBOL $0ACB JoyType
COMMENT $0ACE Turn intro music off...
FORCE_SYMBOL $0ACE stop_music
FORCE_NO_SYMBOL $0AD2
COMMENT $0AD8 ATARI 2600 PADDLE selected...
FORCE_SYMBOL $0AD8 Joy_Analog
COMMENT $0ADB A <- Xpos of joystick 1
FORCE_SYMBOL $0ADB Vec_Joy_1_X
FORCE_SYMBOL $0ADE LastAnalogVal
FORCE_NO_SYMBOL $0AE1
FORCE_SYMBOL $0AE3 JoyType
COMMENT $0AE6 prepare the digit 4 for the menu
FORCE_NO_SYMBOL $0AE6
FORCE_SYMBOL $0AE8 menu_ram_str
COMMENT $0AEB store the digit 4 in the menu line
FORCE_NO_SYMBOL $0AEB
COMMENT $0AEE Turn intro music off...
FORCE_SYMBOL $0AEE stop_music
COMMENT $0AF1 Return to main program
COMMENT_LINE $0AF2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0AF2 refresh_scrn - Responsible for the reset of the crt, settings of the scale
COMMENT_LINE $0AF2 factor and the real-time clock.
COMMENT_LINE $0AF2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $0AF2 PrintMenuFlag
FORCE_SYMBOL $0AF7 BonusRndFlag
FORCE_SYMBOL $0AFC dropManFlag
COMMENT $0B01 DP to RAM
FORCE_SYMBOL $0B01 DP_to_D8
FORCE_SYMBOL $0B04 Music4
COMMENT $0B07 Check sound parameters
FORCE_SYMBOL $0B07 Init_Music_chk
COMMENT $0B0A reset the crt
FORCE_SYMBOL $0B0A Wait_Recal
COMMENT $0B0D Play the sounds
FORCE_SYMBOL $0B0D Do_Sound
COMMENT $0B12 Refresh the CRT
FORCE_SYMBOL $0B12 Wait_Recal
COMMENT $0B15 Delay 30 cycles...
FORCE_SYMBOL $0B15 Delay_3
FORCE_NO_SYMBOL $0B18
COMMENT $0B1A Set scaling factor to 7f
FORCE_SYMBOL $0B1A VIA_t1_cnt_lo
COMMENT $0B1C Return to the caller
COMMENT_LINE $0B1D >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0B1D INIT - Initialize all variables and data structures.
COMMENT_LINE $0B1D <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $0B1D Reste all flags and parameters...
FORCE_SYMBOL $0B1D cheatOnFlag
FORCE_SYMBOL $0B20 gameOverFlag
FORCE_SYMBOL $0B23 dropManFlag
FORCE_SYMBOL $0B26 HeartOnFlag
FORCE_SYMBOL $0B29 ExOnFlag
FORCE_SYMBOL $0B2C diamondOnFlag
FORCE_SYMBOL $0B2F LtrParamSet
FORCE_NO_SYMBOL $0B32
FORCE_SYMBOL $0B34 CurLtr
FORCE_SYMBOL $0B37 TotalBombs
COMMENT $0B3A Reset the Bonus round flag
FORCE_SYMBOL $0B3A BonusRndFlag
FORCE_NO_SYMBOL $0B3D
COMMENT $0B3F Store resolution for analog joystick
FORCE_SYMBOL $0B3F Vec_Joy_Resltn
COMMENT $0B42 Reset Man Hits counter
FORCE_SYMBOL $0B42 ManHit
COMMENT $0B45 Init the Joysticks
FORCE_SYMBOL $0B45 setjoystick
COMMENT $0B48 Get 1st value for reference
FORCE_SYMBOL $0B48 Read_Btns
COMMENT $0B4B This remain constant throught the
FORCE_SYMBOL $0B4B MAN_Y_POS
COMMENT $0B4D whole game...
FORCE_SYMBOL $0B4D ManYpos
COMMENT $0B50 This is essentially lives...
FORCE_NO_SYMBOL $0B50
FORCE_SYMBOL $0B52 PilesToDraw
COMMENT $0B55 Set piles X pos (all the same...)
FORCE_SYMBOL $0B55 CENTER_PILE
FORCE_SYMBOL $0B57 Pile1Xpos
FORCE_SYMBOL $0B5A Pile2Xpos
FORCE_SYMBOL $0B5D Pile3Xpos
COMMENT $0B60 Set Pile1 Ypos
FORCE_NO_SYMBOL $0B60
FORCE_SYMBOL $0B62 Pile1Ypos
COMMENT $0B65 Set Pile2 Ypos
FORCE_NO_SYMBOL $0B65
FORCE_SYMBOL $0B67 Pile2Ypos
COMMENT $0B6A Set Pile3 Ypos
FORCE_NO_SYMBOL $0B6A
FORCE_SYMBOL $0B6C Pile3Ypos
COMMENT $0B6F Set the Man X position to the center
FORCE_NO_SYMBOL $0B6F
FORCE_SYMBOL $0B71 ManXpos
FORCE_SYMBOL $0B74 SET_TO_0
COMMENT $0B77 Man will move right
FORCE_SYMBOL $0B77 ManMovDir
COMMENT $0B7A Reset the explosion flag
FORCE_SYMBOL $0B7A ExplsnFlag
COMMENT $0B7D Set init explosion scale
FORCE_NO_SYMBOL $0B7D
FORCE_SYMBOL $0B7F explsn_scale
COMMENT_LINE $0B82 Clear score at start
FORCE_SYMBOL $0B82 Score_tbl
FORCE_SYMBOL $0B85 Clear_Score
COMMENT_LINE $0B88 Menu related setting
FORCE_SYMBOL $0B88 menu_rom_str
FORCE_SYMBOL $0B8B menu_ram_str
COMMENT $0B8E the RAM till the $80 is found
FORCE_NO_SYMBOL $0B92
COMMENT_LINE $0B96 Level related settings
COMMENT $0B96 CurLvl = 0
FORCE_SYMBOL $0B96 CurLvl
COMMENT $0B99 Set menu's text Height & Width
FORCE_NO_SYMBOL $0B99
FORCE_SYMBOL $0B9C Vec_Text_HW
FORCE_NO_SYMBOL $0B9F
COMMENT $0BA1 indication flag: 1=print, 0=no print
FORCE_SYMBOL $0BA1 PrintMenuFlag
COMMENT $0BA4 Update Bombs number for current level
FORCE_NO_SYMBOL $0BA4
FORCE_SYMBOL $0BA6 CurLvlBombs
COMMENT $0BA9 Reset man falling sound flag
FORCE_SYMBOL $0BA9 fallSndFlag
COMMENT $0BAC Jump to level init procedure
FORCE_SYMBOL $0BAC level_init
COMMENT $0BAF Return to the caller
COMMENT_LINE $0BB0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0BB0 level_init - Responsible for the level initialization process. It can be
COMMENT_LINE $0BB0 called either at init or after a level has ended.
COMMENT_LINE $0BB0 Basically, it makes sire that the next session won't start in
COMMENT_LINE $0BB0 an impossible way...
COMMENT_LINE $0BB0 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0BB0 Reset heart catch sound flag
FORCE_SYMBOL $0BB0 goodSndFlag
COMMENT $0BB3 Reset X catch sound flag
FORCE_SYMBOL $0BB3 badSndFlag
COMMENT $0BB6 Reset catch sound flag
FORCE_SYMBOL $0BB6 catchSndFlag
COMMENT $0BB9 Reset Hit sound flag
FORCE_SYMBOL $0BB9 hitSndFlag
COMMENT $0BBC Turn any music off
FORCE_SYMBOL $0BBC stop_music
FORCE_SYMBOL $0BBF bomb_param_tbl
FORCE_NO_SYMBOL $0BC2
COMMENT $0BC4 Clear table parameters
FORCE_SYMBOL $0BC4 Clear_x_b
FORCE_SYMBOL $0BC7 CurBombsNum
FORCE_SYMBOL $0BCA BombsInPile
COMMENT $0BCD Clear the flag to allow Hit check
FORCE_SYMBOL $0BCD NoMoreHitFlag
FORCE_NO_SYMBOL $0BD0
COMMENT $0BD2 Set explosion loop max value
FORCE_SYMBOL $0BD2 explsn_num
COMMENT $0BD5 Check if Bonus round to be played
FORCE_SYMBOL $0BD5 BonusRndFlag
COMMENT $0BD8 if not, check if to prepare a new level
COMMENT_LINE $0BDA otherwise, prepare bonus parameters
FORCE_SYMBOL $0BDA param_bonus
COMMENT $0BDF Update Man's Speed for bonus round
FORCE_SYMBOL $0BDF CurLvlManSpeed
COMMENT $0BE4 Update Bomb's Speed for bonus round
FORCE_SYMBOL $0BE4 CurLvlBombSpeed
COMMENT $0BE9 Update the dropping rate
FORCE_SYMBOL $0BE9 CurLvlDropRate
COMMENT $0BEE Update the bouncing rate
FORCE_SYMBOL $0BEE CurLvlBombBounce
COMMENT $0BF1 Reset explosion flag
FORCE_SYMBOL $0BF1 ExplsnFlag
COMMENT_LINE $0BF7 Adjust level's parameters
COMMENT $0BF7 Check Explosion Flag, needed???
FORCE_SYMBOL $0BF7 ExplsnFlag
COMMENT $0BFA If set, jump without new level settings
FORCE_SYMBOL $0BFE CurLvl
FORCE_SYMBOL $0C01 LEVELS_PER_PARAM
FORCE_SYMBOL $0C03 DivResult
FORCE_SYMBOL $0C06 divide_x
FORCE_SYMBOL $0C09 DivResult
FORCE_SYMBOL $0C0C PARAM_TBL_SIZE
FORCE_SYMBOL $0C0F param_table
COMMENT $0C15 Update Man's Speed for current level
FORCE_SYMBOL $0C15 CurLvlManSpeed
COMMENT $0C1A Update Bomb's Speed for current level
FORCE_SYMBOL $0C1A CurLvlBombSpeed
COMMENT $0C1F Update the dropping rate
FORCE_SYMBOL $0C1F CurLvlDropRate
COMMENT $0C24 Update the bouncing rate
FORCE_SYMBOL $0C24 CurLvlBombBounce
FORCE_SYMBOL $0C27 DivResult
FORCE_NO_SYMBOL $0C2A
FORCE_SYMBOL $0C2D menu_ram_str
COMMENT $0C30 X points to remark text
FORCE_SYMBOL $0C30 mark_str
COMMENT $0C33 X=X+B to point to current remark
COMMENT $0C34 A=Length of remark
FORCE_NO_SYMBOL $0C34
COMMENT $0C3D Update Bombs number for current level
FORCE_SYMBOL $0C3D CurLvlBombs
FORCE_NO_SYMBOL $0C40
COMMENT $0C42 if more than 250,
FORCE_SYMBOL $0C42 MAX_BOMBS
COMMENT $0C44 don't update the number
COMMENT $0C46 otherwise, store the new number
FORCE_SYMBOL $0C46 CurLvlBombs
COMMENT $0C49 Update current level variable
FORCE_SYMBOL $0C49 CurLvl
COMMENT $0C4C Check current level,
FORCE_SYMBOL $0C4C CurLvl
COMMENT $0C4F if = 100, game is over, the player is
FORCE_NO_SYMBOL $0C4F
COMMENT $0C51 toooo goooooooood.......
COMMENT $0C55 has to be welcome!
FORCE_NO_SYMBOL $0C55
COMMENT $0C57 otherwise, continue...
COMMENT $0C59 u points to menu line in RAM
FORCE_SYMBOL $0C59 menu_ram_str
COMMENT $0C5C X points to welcome! text
FORCE_SYMBOL $0C5C welcome_str
COMMENT $0C5F A=Length of remark
FORCE_NO_SYMBOL $0C5F
COMMENT $0C68 Check id Level #2, if so, the remark
FORCE_SYMBOL $0C68 CurLvl
COMMENT $0C6B has to be not_bad...
FORCE_NO_SYMBOL $0C6B
COMMENT $0C6D otherwise, continue...
COMMENT $0C6F u points to menu line in RAM
FORCE_SYMBOL $0C6F menu_ram_str
COMMENT $0C72 X points to not_bad... text
FORCE_SYMBOL $0C72 mark_str
COMMENT $0C75 A=Length of remark
FORCE_NO_SYMBOL $0C75
COMMENT $0C7E Assume last move was to right
FORCE_SYMBOL $0C7E PileMoveDir
COMMENT $0C81 Reset explosion flag
FORCE_SYMBOL $0C81 ExplsnFlag
FORCE_SYMBOL $0C84 ManMovDir
COMMENT $0C87 Man will move right
FORCE_SYMBOL $0C87 ManMovDir
FORCE_SYMBOL $0C8A MidLeftRtrn
FORCE_SYMBOL $0C8D MidLeftRtrn
COMMENT $0C90 ReSet the Man X position
FORCE_NO_SYMBOL $0C90
FORCE_SYMBOL $0C92 ManXpos
COMMENT $0C95 Ensure that the Xpos is such that this
FORCE_SYMBOL $0C95 adj_man_x
COMMENT_LINE $0C98 levle movement will divide properly
COMMENT_LINE $0C98 for bombs dropping
COMMENT_LINE $0C98 prepare the lelvel digits within the menu string
COMMENT $0C98 clear MSB
COMMENT $0C99 LSB=Current level
FORCE_SYMBOL $0C99 CurLvl
COMMENT $0C9C Convert the level number to BCD
FORCE_SYMBOL $0C9C d_to_bcd
COMMENT $0CA1 U points to the menu in the ram
FORCE_SYMBOL $0CA1 menu_ram_str
COMMENT $0CA4 Update the menu in the ram
FORCE_SYMBOL $0CA4 a_to_hex
COMMENT $0CA7 Return to the caller
COMMENT_LINE $0CA8 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0CA8 ajd_man_x - check if the remain is such that the bombs will fall, if not,
COMMENT_LINE $0CA8 "adjust" the ManXpos variable accordingly.
COMMENT_LINE $0CA8 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0CA8 x=pointer to division's results
FORCE_SYMBOL $0CA8 DivResult
FORCE_SYMBOL $0CAB ManXpos
FORCE_SYMBOL $0CAE CurLvlDropRate
FORCE_SYMBOL $0CB1 divide_x
COMMENT $0CB4 Check reminder,
FORCE_SYMBOL $0CB4 DivRemain
COMMENT $0CB7 if not zero, return with no adjustment
COMMENT $0CB9 Return with no change
FORCE_SYMBOL $0CBA CurLvlDropRate
COMMENT $0CBD Multiply A times B
FORCE_SYMBOL $0CBE CurLvlManSpeed
COMMENT $0CC1 Store correct Xpos
FORCE_SYMBOL $0CC1 ManXpos
COMMENT $0CC4 Return to the caller
COMMENT_LINE $0CC5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0CC5 param_table - a definition of the different parameters for each level
COMMENT_LINE $0CC5 [param_table+0] => ManSpeed
COMMENT_LINE $0CC5 [param_table+1] => BombSpeed
COMMENT_LINE $0CC5 [param_table+2] => DropSpeed
COMMENT_LINE $0CC5 [param_table+3] => BounceRate
COMMENT_LINE $0CC5 [param_table+4] => Spare
COMMENT_LINE $0CC5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0CC5 Levels 01-05 parameters
COMMENT $0CCA Levels 06-10 parameters
COMMENT $0CCF Levels 11-15 parameters
COMMENT $0CD4 Levels 16-20 parameters
COMMENT $0CD9 Levels 21-25 parameters
COMMENT $0CDE Levels 26-30 parameters
COMMENT $0CE3 Levels 31-35 parameters
COMMENT $0CE8 Levels 36-40 parameters
COMMENT $0CED Levels 41-45 parameters
COMMENT $0CF2 Levels 46-50 parameters
COMMENT $0CF7 Levels 51-55 parameters
COMMENT $0CFC Levels 56-60 parameters
COMMENT $0D01 Levels 61-65 parameters
COMMENT $0D06 Levels 66-70 parameters
COMMENT $0D0B Levels 71-75 parameters
COMMENT $0D10 Levels 76-80 parameters
COMMENT $0D15 Levels 81-85 parameters
COMMENT $0D1A Levels 86-90 parameters
COMMENT $0D1F Levels 91-95 parameters
COMMENT $0D24 Levels 96-100 parameters
COMMENT $0D29 Bonus parameters
COMMENT_LINE $0D2E >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0D2E draw_bombs - responsible for displaying and moving the bombs on the screen
COMMENT_LINE $0D2E based on predefined amount, speed, Man's X position and level.
COMMENT_LINE $0D2E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0D2E store u,x in the stack
COMMENT $0D32 Set bombs intensity
FORCE_SYMBOL $0D32 Intensity_7F
COMMENT_LINE $0D35 Manipulate ManXpos to see if a bomb has to be dropped
COMMENT $0D35 A <- Current X pos of Man
FORCE_SYMBOL $0D35 ManXpos
COMMENT $0D38 b=divider
FORCE_SYMBOL $0D38 CurLvlDropRate
COMMENT $0D3B x=pointer to division's results
FORCE_SYMBOL $0D3B DivResult
COMMENT $0D3E call dividing procedure
FORCE_SYMBOL $0D3E divide_x
COMMENT $0D41 b=remain of the division
FORCE_SYMBOL $0D41 DivRemain
COMMENT $0D44 if b=0, draw a bomb, otherwise wait
FORCE_SYMBOL $0D46 TotalBombs
COMMENT $0D49 a=this level's bomb amount
FORCE_SYMBOL $0D49 CurLvlBombs
COMMENT $0D4C if no. of dropped bombs =a, no need for
FORCE_SYMBOL $0D4C CurBombsNum
COMMENT $0D4F new bombs.
COMMENT $0D51 update variable of bombs number
FORCE_SYMBOL $0D51 CurBombsNum
COMMENT $0D54 a=current bombs amount
FORCE_SYMBOL $0D54 CurBombsNum
COMMENT_LINE $0D57 Chris
COMMENT_LINE $0D57 why not load with -2?
COMMENT $0D57 this part computes the index:
FORCE_NO_SYMBOL $0D57
COMMENT $0D5A d=(CurBombsNum-1)*2 =
COMMENT $0D5C d=CurBombsNum + CurBombsNum - 2 !
COMMENT $0D5E this is done due to the signed arith.
COMMENT $0D60 which is no good for this matter!!!
COMMENT $0D62 y=ptr to bombs table
FORCE_SYMBOL $0D62 bomb_pos_tbl
COMMENT $0D66 y=y+a
COMMENT $0D68 a=CONST
FORCE_SYMBOL $0D68 BOMB_Y_START
COMMENT $0D6A b=current man's x pos
FORCE_SYMBOL $0D6A ManXpos
COMMENT $0D6D Check if current bomb is not on the
COMMENT $0D6F same Xpos as the previous.
COMMENT $0D71 Compenstae for the previous INC
FORCE_SYMBOL $0D71 CurBombsNum
COMMENT $0D74 Don't store the Y,X, proceed to draw
COMMENT $0D76 Store new bomb's Y,X @ address y
FORCE_NO_SYMBOL $0D76
COMMENT $0D78 If no bombs to draw, skip the whole
FORCE_SYMBOL $0D78 CurBombsNum
COMMENT $0D7B subrutine...
COMMENT $0D7F y=0x0000
FORCE_NO_SYMBOL $0D7F
COMMENT $0D83 y=Current Bombs number
COMMENT $0D85 u=Begining of bombs table
FORCE_SYMBOL $0D85 bomb_pos_tbl
COMMENT $0D88 Center the beam, MUST!
FORCE_SYMBOL $0D88 Reset0Ref_D0
COMMENT $0D8B d=[u], u=u+2
COMMENT $0D8D check if Ypos=0, if so, dont_draw
FORCE_NO_SYMBOL $0D8D
COMMENT $0D91 call the procedure to draw a bomb at d
FORCE_SYMBOL $0D91 draw_a_bomb
COMMENT $0D94 decrement the bomb index,
COMMENT $0D96 if not 0, more bombs to draw...
COMMENT $0D98 x=pointer to the bomb position table
FORCE_SYMBOL $0D98 bomb_pos_tbl
COMMENT $0D9B a=amount of bombs to (virtually) move
FORCE_SYMBOL $0D9B CurBombsNum
FORCE_SYMBOL $0D9E BombLoopCntr
COMMENT $0DA1 Check if Y=7F, if so, don't move this
FORCE_NO_SYMBOL $0DA1
COMMENT $0DA3 bomb and proceed with the rest of the
FORCE_NO_SYMBOL $0DA3
COMMENT $0DA5 table and proceed to move it
COMMENT $0DAA b=[x] <- Ypos of current bomb
FORCE_NO_SYMBOL $0DAA
COMMENT $0DAC a=[256+x] <- Moving Y dir of cur. bomb
FORCE_NO_SYMBOL $0DAC
COMMENT $0DB0 if = 0, the bomb moves down!
COMMENT $0DB4 b=b+dropping speed
FORCE_SYMBOL $0DB4 CurLvlBombSpeed
COMMENT $0DB7 [x]=b
FORCE_NO_SYMBOL $0DB7
COMMENT $0DB9 check if below center of the screen
FORCE_NO_SYMBOL $0DB9
COMMENT $0DBB if so, goto update the index
FORCE_NO_SYMBOL $0DBB
COMMENT $0DBF check if near top of the screen,
FORCE_NO_SYMBOL $0DBF
COMMENT $0DC1 if so, goto update the index.
FORCE_NO_SYMBOL $0DC1
COMMENT $0DC3 otherwise, the bomb is at the bottom
COMMENT_LINE $0DC5 of the screen and shouldn't be
COMMENT_LINE $0DC5 displayed anymore.
COMMENT $0DC5 Clear the flag to allow Hit check for
FORCE_SYMBOL $0DC5 NoMoreHitFlag
COMMENT $0DC8 next up-going bomb
FORCE_SYMBOL $0DCB NoMoreHitFlag
COMMENT $0DD0 b=Ypos to check is man is hit
FORCE_NO_SYMBOL $0DD0
COMMENT $0DD2 check if Ypos of the bomb is closer to
FORCE_NO_SYMBOL $0DD2
COMMENT $0DD4 upper line, if not, no chance for hit
COMMENT $0DD6 u = *ptr to bomb location
COMMENT $0DDA d = current bomb location
FORCE_NO_SYMBOL $0DDA
FORCE_NO_SYMBOL $0DDC
FORCE_NO_SYMBOL $0DDE
COMMENT $0DE0 X-> position of the bomb
FORCE_SYMBOL $0DE2 ManYpos
COMMENT $0DE6 Dimentions Man...
FORCE_NO_SYMBOL $0DE6
COMMENT $0DE9 Check if there is a hit...
FORCE_SYMBOL $0DE9 Obj_Hit
COMMENT $0DEC If carry is cleared -> goto no_hit!
COMMENT_LINE $0DEE Prepare to do explosion of supporting
COMMENT $0DEE bricks
FORCE_SYMBOL $0DEE bricks_loc
FORCE_SYMBOL $0DF1 ManHit
COMMENT $0DF6 X <- *ptr to brick_loc table
COMMENT $0DF8 @ Left brick
FORCE_SYMBOL $0DF8 do_explosion
COMMENT $0DFB X <- *ptr to brick_loc table
FORCE_NO_SYMBOL $0DFB
COMMENT $0DFD @ right brick
FORCE_SYMBOL $0DFD do_explosion
COMMENT $0E00 Update Hit counter
FORCE_SYMBOL $0E00 ManHit
COMMENT $0E03 Prevent Hit counter from inc...
FORCE_SYMBOL $0E03 NoMoreHitFlag
COMMENT $0E08 b=[1+x] <- Xpos of current bomb
FORCE_NO_SYMBOL $0E08
COMMENT $0E0A a=[257+x] <- Xdir of bomb...
FORCE_NO_SYMBOL $0E0A
COMMENT $0E10 b=b-dropping speed
FORCE_SYMBOL $0E10 CurLvlBombSpeed
COMMENT_LINE $0E14 to check boundaries...
FORCE_NO_SYMBOL $0E14
FORCE_NO_SYMBOL $0E18
FORCE_NO_SYMBOL $0E1C
FORCE_NO_SYMBOL $0E22
FORCE_SYMBOL $0E26 CurLvlBombSpeed
COMMENT $0E2A check if hit the left boundary,
FORCE_NO_SYMBOL $0E2A
COMMENT $0E2C if not, store the new position
COMMENT $0E2E check if over the left bounday(@hi spd)
FORCE_NO_SYMBOL $0E2E
COMMENT $0E30 if not, store the new position
COMMENT $0E32 Set the bomb_param_tbl to move right
FORCE_NO_SYMBOL $0E32
COMMENT_LINE $0E36 since it hit the left wall...
COMMENT $0E38 store the Xpos of current bomb
FORCE_NO_SYMBOL $0E38
FORCE_SYMBOL $0E3C CurLvlBombSpeed
COMMENT $0E3F [x]=b
FORCE_NO_SYMBOL $0E3F
COMMENT $0E41 check if below center of the screen
FORCE_NO_SYMBOL $0E41
COMMENT $0E43 if so, goto update the index
FORCE_NO_SYMBOL $0E43
COMMENT $0E47 check if above bottom of the screen,
FORCE_NO_SYMBOL $0E47
COMMENT $0E49 if so, goto update the index.
FORCE_NO_SYMBOL $0E49
COMMENT $0E4B otherwise, the bomb is at the bottom
COMMENT_LINE $0E4D of the screen and shouldn't be
COMMENT_LINE $0E4D displayed anymore.
COMMENT $0E4D Do the following only if the bomb
FORCE_NO_SYMBOL $0E4D
COMMENT $0E51 is falling down...
COMMENT $0E53 add 1 to current bombs "not on Man"
FORCE_SYMBOL $0E53 BombsInPile
FORCE_SYMBOL $0E56 do_explosion
COMMENT $0E59 Check if bonus round flag is set
FORCE_SYMBOL $0E59 BonusRndFlag
COMMENT $0E5C if set, just remove the bomb from the
COMMENT_LINE $0E5E screen, otherwise, proceed as usual...
COMMENT_LINE $0E5E ***************************************************************
COMMENT_LINE $0E5E ***                          CHEAT                          ***
COMMENT_LINE $0E5E ***    If you read so far, you deserve to know about it ;-) ***
COMMENT_LINE $0E5E ***************************************************************
FORCE_SYMBOL $0E5E TotalBombs
FORCE_NO_SYMBOL $0E61
COMMENT $0E65 check previous buttons
FORCE_NO_SYMBOL $0E65
FORCE_NO_SYMBOL $0E68
COMMENT $0E6C if missed 1st bomb and btn4 is pressed
FORCE_SYMBOL $0E6C cheatOnFlag
FORCE_SYMBOL $0E6F cheatOnFlag
COMMENT_LINE $0E74 ***************************************************************
COMMENT_LINE $0E74 ***                     END OF CHEAT                        ***
COMMENT_LINE $0E74 ***************************************************************
COMMENT $0E74 One less Pile to play with
FORCE_SYMBOL $0E74 PilesToDraw
COMMENT $0E77 Check if crossed the zero,
COMMENT $0E79 if not proceed normaly,
FORCE_SYMBOL $0E7B gameOverFlag
COMMENT $0E7E set Ypos to 0x7F to indicate: no_draw!
FORCE_NO_SYMBOL $0E7E
COMMENT $0E80 set Ypos of the bomb that got to
FORCE_NO_SYMBOL $0E80
COMMENT_LINE $0E82 the bottom. This means not to draw
COMMENT_LINE $0E82 any more.
COMMENT_LINE $0E84 at this point check if to change
COMMENT_LINE $0E84 direction of the bomb from DN 2 UP...
COMMENT $0E84 indicate that not heart catch check
FORCE_SYMBOL $0E84 ChkHeartFlag
COMMENT $0E87 indicate that not Ex catch check
FORCE_SYMBOL $0E87 ChkExFlag
COMMENT $0E8A indicate that not Diamond catch check
FORCE_SYMBOL $0E8A ChkDiamondFlag
COMMENT $0E8D check if the bomb hit the piles
FORCE_SYMBOL $0E8D catch_chk
COMMENT $0E90 Set the pointer to next bomb in the
FORCE_NO_SYMBOL $0E90
COMMENT $0E92 are there any more bombs to draw?
FORCE_SYMBOL $0E92 BombLoopCntr
COMMENT $0E95 if not, continue the bomb loop.
COMMENT $0E99 restore values from the stack
COMMENT $0E9B Restore the x register from the stack
COMMENT $0E9D return to caller
COMMENT_LINE $0E9E >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0E9E catch_chk - Checks whether the paddle are catching either the bombs,heart,
COMMENT_LINE $0E9E diamond or, ex.
COMMENT_LINE $0E9E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0EA0 Very important - KEEP the pointer!!!
COMMENT $0EA2 Player's car current position
FORCE_SYMBOL $0EA2 Pile2Ypos
FORCE_NO_SYMBOL $0EA6
FORCE_NO_SYMBOL $0EA8
FORCE_SYMBOL $0EAC PilesToDraw
FORCE_NO_SYMBOL $0EAF
COMMENT $0EB3 Dimentions of 3 piles
FORCE_NO_SYMBOL $0EB3
FORCE_SYMBOL $0EB8 Pile1Ypos
FORCE_NO_SYMBOL $0EBC
COMMENT $0EC0 Dimentions of 2 piles
FORCE_NO_SYMBOL $0EC0
COMMENT $0EC5 Player's car current position
FORCE_SYMBOL $0EC5 Pile1Ypos
COMMENT $0EC9 Dimentions of 1 piles
FORCE_NO_SYMBOL $0EC9
COMMENT $0ECC Check if there is a hit...
FORCE_SYMBOL $0ECC Obj_Hit
COMMENT $0ECF If carry is cleared -> goto no_hit!
COMMENT $0ED3 Check if diamond is falling
FORCE_SYMBOL $0ED3 ChkDiamondFlag
COMMENT $0EDA Check if Ex is falling,
FORCE_SYMBOL $0EDA ChkExFlag
COMMENT $0EDD if so, check if that on hit
COMMENT $0EDF otherwise, check if Heart is falling,
FORCE_SYMBOL $0EDF ChkHeartFlag
COMMENT $0EE2 if so, check this hit...
COMMENT $0EE4 A<- 0x05
FORCE_NO_SYMBOL $0EE4
COMMENT $0EE6 Set Sound flag for check_snd proc...
FORCE_SYMBOL $0EE6 catchSndFlag
COMMENT $0EE9 add 1 to current bombs in pile
FORCE_SYMBOL $0EE9 BombsInPile
COMMENT_LINE $0EEC at this point check if to change
COMMENT_LINE $0EEC direction of the bomb from DN 2 UP...
COMMENT $0EEC IMPORTANT: change direction once -
FORCE_NO_SYMBOL $0EEC
COMMENT $0EF0 only if bobm is falling, else don't!
FORCE_SYMBOL $0EF2 BombsInPile
COMMENT $0EF5 b=divider
FORCE_SYMBOL $0EF5 CurLvlBombBounce
COMMENT $0EF8 x=pointer to division's results
FORCE_SYMBOL $0EF8 DivResult
COMMENT $0EFB call dividing procedure
FORCE_SYMBOL $0EFB divide_x
COMMENT $0EFE b=remain of the division
FORCE_SYMBOL $0EFE DivRemain
FORCE_SYMBOL $0F03 PilesToDraw
FORCE_NO_SYMBOL $0F06
FORCE_SYMBOL $0F0A Pile3Ypos
FORCE_NO_SYMBOL $0F0F
FORCE_SYMBOL $0F13 Pile2Ypos
COMMENT $0F18 b=begining of the Ypos of the bomb
FORCE_SYMBOL $0F18 Pile1Ypos
COMMENT $0F1B when it has to go up!
FORCE_NO_SYMBOL $0F1B
COMMENT $0F1D a=1 (move bomb up)
FORCE_NO_SYMBOL $0F1D
COMMENT $0F1F store a in the bomb_para_table
FORCE_NO_SYMBOL $0F1F
COMMENT $0F23 decide to which side to move up (in
FORCE_SYMBOL $0F23 PileMoveDir
COMMENT $0F26 diagonal) according to the pile move
FORCE_NO_SYMBOL $0F26
COMMENT $0F2A done!
COMMENT $0F2C a=$7F -> indicates not to draw bomb
FORCE_NO_SYMBOL $0F2C
COMMENT $0F2E store a in Ypos of current bomb
FORCE_NO_SYMBOL $0F2E
FORCE_NO_SYMBOL $0F32
COMMENT $0F34 Set Sound flag for check_snd proc...
FORCE_SYMBOL $0F34 goodSndFlag
COMMENT $0F37 Turn off the heart drawing...
FORCE_SYMBOL $0F37 HeartOnFlag
FORCE_SYMBOL $0F3A PilesToDraw
COMMENT $0F3D check number of piles,
FORCE_NO_SYMBOL $0F3D
COMMENT $0F3F if = 3 than don't add one more
COMMENT $0F41 as a bonus, add one more pile
FORCE_SYMBOL $0F41 PilesToDraw
COMMENT $0F44 Update score string
COMMENT $0F46 x -> score_table address
FORCE_SYMBOL $0F46 Score_tbl
COMMENT $0F49 update the score table
FORCE_SYMBOL $0F49 Add_Score_a
FORCE_NO_SYMBOL $0F4E
COMMENT $0F50 Set Sound flag for check_snd proc...
FORCE_SYMBOL $0F50 badSndFlag
COMMENT $0F53 Turn off the Ex drawing...
FORCE_SYMBOL $0F53 ExOnFlag
FORCE_SYMBOL $0F56 PilesToDraw
FORCE_SYMBOL $0F59 PilesToDraw
FORCE_NO_SYMBOL $0F62
COMMENT $0F64 Set Sound flag for check_snd proc...
FORCE_SYMBOL $0F64 goodSndFlag
COMMENT $0F67 Turn off the heart drawing...
FORCE_SYMBOL $0F67 diamondOnFlag
COMMENT $0F6A Update score string
COMMENT $0F6C x -> score_table address
FORCE_SYMBOL $0F6C Score_tbl
COMMENT $0F6F update the score table
FORCE_SYMBOL $0F6F Add_Score_a
COMMENT $0F72 Update score string
FORCE_SYMBOL $0F72 BOMB_SCORE
FORCE_SYMBOL $0F74 BonusRndFlag
COMMENT $0F79 @ Bonus round, have extra scores when
FORCE_SYMBOL $0F79 BOMB_SCORE
COMMENT $0F7B player catches a bomb
FORCE_SYMBOL $0F7B BOMB_SCORE
COMMENT $0F7D Point to the score string
FORCE_SYMBOL $0F7D Score_tbl
COMMENT $0F80 Update the score string
FORCE_SYMBOL $0F80 Add_Score_a
COMMENT $0F83 Restore the pointers back
COMMENT $0F85 Return to the caller
COMMENT_LINE $0F86 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $0F86 draw_a_bomb - This procedure draws a bomb at the location specified by D reg.
COMMENT_LINE $0F86 Assumes D=(Y,X) to position the sprite...
COMMENT_LINE $0F86 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0F86 store x in the stack
COMMENT $0F88 Don't draw if Y=$7F...
FORCE_NO_SYMBOL $0F88
COMMENT $0F8E Store Y in D/A register
FORCE_SYMBOL $0F8E VIA_port_a
COMMENT $0F90 Blank low, zero high?
FORCE_NO_SYMBOL $0F90
FORCE_SYMBOL $0F92 VIA_cntl
COMMENT $0F95 Enable mux
FORCE_SYMBOL $0F95 VIA_port_b
COMMENT $0F97 Clear shift regigster
FORCE_SYMBOL $0F97 VIA_shift_reg
COMMENT $0F99 Disable mux
FORCE_SYMBOL $0F99 VIA_port_b
COMMENT $0F9B Store X in D/A register
FORCE_SYMBOL $0F9B VIA_port_a
COMMENT $0F9D enable timer
FORCE_SYMBOL $0F9D VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0F9F
FORCE_SYMBOL $0FA1 VIA_int_flags
COMMENT_LINE $0FA5 LDA   #$7F                      ;Set the scaling factor to 7f
COMMENT $0FA5 Set the scaling factor to 7f
FORCE_NO_SYMBOL $0FA5
FORCE_SYMBOL $0FA7 VIA_t1_cnt_lo
COMMENT $0FA9 X<-Address[CarVectorList]
FORCE_SYMBOL $0FA9 bomb
FORCE_NO_SYMBOL $0FAE
COMMENT_LINE $0FB2 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $0FB2 STA     <VIA_port_b
FORCE_SYMBOL $0FB2 VIA_port_b
COMMENT $0FB6 Disable mux
FORCE_SYMBOL $0FB6 VIA_port_b
COMMENT $0FB8 Send X to A/D
FORCE_SYMBOL $0FB8 VIA_port_a
COMMENT $0FBA Put pattern in shift register
FORCE_SYMBOL $0FBA VIA_shift_reg
COMMENT $0FBC enable timer 1
FORCE_SYMBOL $0FBC VIA_t1_cnt_hi
COMMENT $0FBE 6
COMMENT $0FC0 7
FORCE_NO_SYMBOL $0FC0
COMMENT $0FC3 3 Go back for more points
COMMENT $0FC5 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0FC5
COMMENT $0FC7 Wait for T1 to time out
FORCE_SYMBOL $0FC7 VIA_int_flags
COMMENT $0FCB Wait a moment more
COMMENT $0FCC Clear shift register (blank output)
FORCE_SYMBOL $0FCC VIA_shift_reg
COMMENT $0FCE 3
COMMENT $0FD0 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0FD0
COMMENT $0FD2 Wait for T1 to time out
FORCE_SYMBOL $0FD2 VIA_int_flags
COMMENT $0FD6 Wait a moment more
FORCE_SYMBOL $0FD7 VIA_shift_reg
COMMENT_LINE $0FD9 one more round
FORCE_SYMBOL $0FD9 VIA_port_b
COMMENT $0FDD Disable mux
FORCE_SYMBOL $0FDD VIA_port_b
COMMENT $0FDF Send X to A/D
FORCE_SYMBOL $0FDF VIA_port_a
COMMENT $0FE1 Put pattern in shift register
FORCE_SYMBOL $0FE1 VIA_shift_reg
COMMENT $0FE3 enable timer 1
FORCE_SYMBOL $0FE3 VIA_t1_cnt_hi
COMMENT $0FE5 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0FE5
COMMENT $0FE7 Wait for T1 to time out
FORCE_SYMBOL $0FE7 VIA_int_flags
COMMENT $0FEB Clear shift register (blank output)
FORCE_SYMBOL $0FEB VIA_shift_reg
COMMENT_LINE $0FED compensate above wrongdoing!
COMMENT $0FED Set the scaling factor to 7f
FORCE_NO_SYMBOL $0FED
FORCE_SYMBOL $0FEF VIA_t1_cnt_lo
COMMENT $0FF1 restore x from the stack
COMMENT $0FF3 return to caller
COMMENT_LINE $0FF4 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $0FF4 divide_x: Divides two numbers:
COMMENT_LINE $0FF4 *x = a div b, *x+ = reminder, @ exit, b=remian, a=0
COMMENT_LINE $0FF4 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $0FF4 clear the result field
FORCE_NO_SYMBOL $0FF4
COMMENT $0FF6 *x+ <- b
FORCE_NO_SYMBOL $0FF6
COMMENT $0FF8 check if b>a, if so, that's the end
FORCE_NO_SYMBOL $0FF8
COMMENT $0FFC a = a-b
FORCE_NO_SYMBOL $0FFC
COMMENT $0FFE result <- result + 1
FORCE_NO_SYMBOL $0FFE
FORCE_NO_SYMBOL $1002
COMMENT $1004 Return to the caller
COMMENT_LINE $1005 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1005 draw_man - Draws the moving man at the top...
COMMENT_LINE $1005 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $1005 Store the register in the stack
COMMENT $1007 While the positioning is in respect
FORCE_NO_SYMBOL $1007
COMMENT $1009 with $7F, the car drawing is with $50
FORCE_SYMBOL $1009 VIA_t1_cnt_lo
FORCE_SYMBOL $100B Reset0Ref_D0
COMMENT $100E Set player's car intensity
FORCE_SYMBOL $100E Intensity_7F
FORCE_SYMBOL $1011 dropManFlag
COMMENT $1018 Check if menu is on,
FORCE_SYMBOL $1018 PrintMenuFlag
COMMENT $101B if not, move the man, otherwise,
COMMENT $101D draw the man with no move
FORCE_SYMBOL $101F ManMovDir
COMMENT $1024 b=left screen border location
FORCE_NO_SYMBOL $1024
COMMENT $1026 check if the man is next to the border
FORCE_SYMBOL $1026 ManXpos
COMMENT $1029 if yes, goto change direction to move R
FORCE_SYMBOL $102B MidLeftRtrn
FORCE_NO_SYMBOL $1030
FORCE_SYMBOL $1032 ManXpos
COMMENT $1037 b=current X position
FORCE_SYMBOL $1037 ManXpos
COMMENT $103A b=b-man's speed -> move left
FORCE_SYMBOL $103A CurLvlManSpeed
COMMENT $103D store the new Xpos
FORCE_SYMBOL $103D ManXpos
COMMENT $1040 goto draw the man
FORCE_SYMBOL $1042 MidLeftRtrn
FORCE_SYMBOL $1047 MidLeftRtrn
FORCE_SYMBOL $104C MidLeftRtrn
COMMENT $104F Set to 1 -> from now, move right...
FORCE_SYMBOL $104F ManMovDir
COMMENT $1052 goto draw the man
COMMENT $1054 b=right screen border location
FORCE_NO_SYMBOL $1054
COMMENT $1056 check if the man is next to the border
FORCE_SYMBOL $1056 ManXpos
FORCE_SYMBOL $105B ManXpos
FORCE_SYMBOL $105E CurLvlManSpeed
FORCE_SYMBOL $1061 ManXpos
FORCE_SYMBOL $1066 ManMovDir
FORCE_SYMBOL $1069 ManXpos
FORCE_SYMBOL $106C dropManFlag
FORCE_SYMBOL $1071 ManYpos
FORCE_NO_SYMBOL $1074
FORCE_SYMBOL $1076 ManYpos
COMMENT $1079 goto update xy location
FORCE_SYMBOL $107B MAN_Y_POS
FORCE_SYMBOL $107D ManYpos
COMMENT $1080 Set Ypos
FORCE_SYMBOL $1080 ManYpos
COMMENT $1083 Move beam to pos(X,Y)
FORCE_SYMBOL $1083 Moveto_d
COMMENT_LINE $1086 LDA   #$50                      ;While the positioning is in respect
COMMENT $1086 While the positioning is in respect
FORCE_NO_SYMBOL $1086
COMMENT $1088 with $7F, the car drawing is with $50
FORCE_SYMBOL $1088 VIA_t1_cnt_lo
FORCE_SYMBOL $108A man
FORCE_NO_SYMBOL $108F
COMMENT_LINE $1093 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $1093 STA     <VIA_port_b
FORCE_SYMBOL $1093 VIA_port_b
COMMENT $1097 Disable mux
FORCE_SYMBOL $1097 VIA_port_b
COMMENT $1099 Send X to A/D
FORCE_SYMBOL $1099 VIA_port_a
COMMENT $109B Put pattern in shift register
FORCE_SYMBOL $109B VIA_shift_reg
COMMENT $109D enable timer 1
FORCE_SYMBOL $109D VIA_t1_cnt_hi
COMMENT $109F 6
COMMENT $10A1 7
FORCE_NO_SYMBOL $10A1
COMMENT $10A4 3 Go back for more points
COMMENT $10A6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $10A6
COMMENT $10A8 Wait for T1 to time out
FORCE_SYMBOL $10A8 VIA_int_flags
COMMENT $10AC Wait a moment more
COMMENT $10AD Clear shift register (blank output)
FORCE_SYMBOL $10AD VIA_shift_reg
COMMENT $10AF 3
COMMENT $10B1 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $10B1
COMMENT $10B3 Wait for T1 to time out
FORCE_SYMBOL $10B3 VIA_int_flags
COMMENT $10B7 Wait a moment more
FORCE_SYMBOL $10B8 VIA_shift_reg
COMMENT_LINE $10BA one more round
FORCE_SYMBOL $10BA VIA_port_b
COMMENT $10BE Disable mux
FORCE_SYMBOL $10BE VIA_port_b
COMMENT $10C0 Send X to A/D
FORCE_SYMBOL $10C0 VIA_port_a
COMMENT $10C2 Put pattern in shift register
FORCE_SYMBOL $10C2 VIA_shift_reg
COMMENT $10C4 enable timer 1
FORCE_SYMBOL $10C4 VIA_t1_cnt_hi
COMMENT $10C6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $10C6
COMMENT $10C8 Wait for T1 to time out
FORCE_SYMBOL $10C8 VIA_int_flags
COMMENT $10CC Clear shift register (blank output)
FORCE_SYMBOL $10CC VIA_shift_reg
COMMENT_LINE $10CE RH_DRAW_VLP
COMMENT $10CE Restore the register from the stack
COMMENT $10D0 Return to the caller
COMMENT_LINE $10D1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $10D1 draw_piles - Draws the paddles that catch the falling bombs. The X position
COMMENT_LINE $10D1 is defined by the check joystick procedure and stored in the
COMMENT_LINE $10D1 Xpos and Ypos RAM locations.
COMMENT_LINE $10D1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $10D1 Store the register in the stack
COMMENT $10D3 Set paddles intensity
FORCE_SYMBOL $10D3 Intensity_5F
COMMENT $10D6 Check how many paddles to draw
FORCE_SYMBOL $10D6 PilesToDraw
FORCE_NO_SYMBOL $10D9
COMMENT $10DD Move the beam to (0,0)
FORCE_SYMBOL $10DD Reset0Ref_D0
COMMENT $10E0 Set scaling factor to 7f
FORCE_NO_SYMBOL $10E0
FORCE_SYMBOL $10E2 VIA_t1_cnt_lo
COMMENT $10E4 Set Ypos based on Joystick pos
FORCE_SYMBOL $10E4 Pile3Ypos
COMMENT $10E7 Set Xpos based on Joystick pos
FORCE_SYMBOL $10E7 Pile3Xpos
COMMENT $10EA Move beam to pos(X,Y)
FORCE_SYMBOL $10EA Moveto_d
FORCE_SYMBOL $10ED pile
COMMENT $10F0 Set scaling factor to 7f
FORCE_SYMBOL $10F2 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $10F6
COMMENT_LINE $10FA STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $10FA STA     <VIA_port_b
FORCE_SYMBOL $10FA VIA_port_b
COMMENT $10FE Disable mux
FORCE_SYMBOL $10FE VIA_port_b
COMMENT $1100 Send X to A/D
FORCE_SYMBOL $1100 VIA_port_a
COMMENT $1102 Put pattern in shift register
FORCE_SYMBOL $1102 VIA_shift_reg
COMMENT $1104 enable timer 1
FORCE_SYMBOL $1104 VIA_t1_cnt_hi
COMMENT $1106 6
COMMENT $1108 7
FORCE_NO_SYMBOL $1108
COMMENT $110B 3 Go back for more points
COMMENT $110D B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $110D
COMMENT $110F Wait for T1 to time out
FORCE_SYMBOL $110F VIA_int_flags
COMMENT $1113 Wait a moment more
COMMENT $1114 Clear shift register (blank output)
FORCE_SYMBOL $1114 VIA_shift_reg
COMMENT $1116 3
COMMENT $1118 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1118
COMMENT $111A Wait for T1 to time out
FORCE_SYMBOL $111A VIA_int_flags
COMMENT $111E Wait a moment more
FORCE_SYMBOL $111F VIA_shift_reg
COMMENT_LINE $1121 one more round
FORCE_SYMBOL $1121 VIA_port_b
COMMENT $1125 Disable mux
FORCE_SYMBOL $1125 VIA_port_b
COMMENT $1127 Send X to A/D
FORCE_SYMBOL $1127 VIA_port_a
COMMENT $1129 Put pattern in shift register
FORCE_SYMBOL $1129 VIA_shift_reg
COMMENT $112B enable timer 1
FORCE_SYMBOL $112B VIA_t1_cnt_hi
COMMENT $112D B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $112D
COMMENT $112F Wait for T1 to time out
FORCE_SYMBOL $112F VIA_int_flags
COMMENT $1133 Clear shift register (blank output)
FORCE_SYMBOL $1133 VIA_shift_reg
FORCE_SYMBOL $1137 PilesToDraw
FORCE_NO_SYMBOL $113A
COMMENT $113E Move the beam to (0,0)
FORCE_SYMBOL $113E Reset0Ref_D0
COMMENT $1141 Set scaling factor to 7f
FORCE_NO_SYMBOL $1141
FORCE_SYMBOL $1143 VIA_t1_cnt_lo
COMMENT $1145 Set Ypos based on Joystick pos
FORCE_SYMBOL $1145 Pile2Ypos
COMMENT $1148 Set Xpos based on Joystick pos
FORCE_SYMBOL $1148 Pile2Xpos
COMMENT $114B Move beam to pos(X,Y)
FORCE_SYMBOL $114B Moveto_d
FORCE_SYMBOL $114E pile
COMMENT $1151 Set scaling factor to 7f
FORCE_SYMBOL $1153 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1157
COMMENT_LINE $115B STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $115B STA     <VIA_port_b
FORCE_SYMBOL $115B VIA_port_b
COMMENT $115F Disable mux
FORCE_SYMBOL $115F VIA_port_b
COMMENT $1161 Send X to A/D
FORCE_SYMBOL $1161 VIA_port_a
COMMENT $1163 Put pattern in shift register
FORCE_SYMBOL $1163 VIA_shift_reg
COMMENT $1165 enable timer 1
FORCE_SYMBOL $1165 VIA_t1_cnt_hi
COMMENT $1167 6
COMMENT $1169 7
FORCE_NO_SYMBOL $1169
COMMENT $116C 3 Go back for more points
COMMENT $116E B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $116E
COMMENT $1170 Wait for T1 to time out
FORCE_SYMBOL $1170 VIA_int_flags
COMMENT $1174 Wait a moment more
COMMENT $1175 Clear shift register (blank output)
FORCE_SYMBOL $1175 VIA_shift_reg
COMMENT $1177 3
COMMENT $1179 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1179
COMMENT $117B Wait for T1 to time out
FORCE_SYMBOL $117B VIA_int_flags
COMMENT $117F Wait a moment more
FORCE_SYMBOL $1180 VIA_shift_reg
COMMENT_LINE $1182 one more round
FORCE_SYMBOL $1182 VIA_port_b
COMMENT $1186 Disable mux
FORCE_SYMBOL $1186 VIA_port_b
COMMENT $1188 Send X to A/D
FORCE_SYMBOL $1188 VIA_port_a
COMMENT $118A Put pattern in shift register
FORCE_SYMBOL $118A VIA_shift_reg
COMMENT $118C enable timer 1
FORCE_SYMBOL $118C VIA_t1_cnt_hi
COMMENT $118E B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $118E
COMMENT $1190 Wait for T1 to time out
FORCE_SYMBOL $1190 VIA_int_flags
COMMENT $1194 Clear shift register (blank output)
FORCE_SYMBOL $1194 VIA_shift_reg
COMMENT $1196 Move the beam to (0,0)
FORCE_SYMBOL $1196 Reset0Ref
COMMENT $1199 Set scaling factor to 7f
FORCE_NO_SYMBOL $1199
FORCE_SYMBOL $119B VIA_t1_cnt_lo
COMMENT $119D Set Ypos based on Joystick pos
FORCE_SYMBOL $119D Pile1Ypos
COMMENT $11A0 Set Xpos based on Joystick pos
FORCE_SYMBOL $11A0 Pile1Xpos
COMMENT $11A3 Move beam to pos(X,Y)
FORCE_SYMBOL $11A3 Moveto_d
COMMENT $11A6 Set scaling factor to 7f
FORCE_SYMBOL $11A8 VIA_t1_cnt_lo
FORCE_SYMBOL $11AA pile
FORCE_NO_SYMBOL $11AF
COMMENT_LINE $11B3 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $11B3 STA     <VIA_port_b
FORCE_SYMBOL $11B3 VIA_port_b
COMMENT $11B7 Disable mux
FORCE_SYMBOL $11B7 VIA_port_b
COMMENT $11B9 Send X to A/D
FORCE_SYMBOL $11B9 VIA_port_a
COMMENT $11BB Put pattern in shift register
FORCE_SYMBOL $11BB VIA_shift_reg
COMMENT $11BD enable timer 1
FORCE_SYMBOL $11BD VIA_t1_cnt_hi
COMMENT $11BF 6
COMMENT $11C1 7
FORCE_NO_SYMBOL $11C1
COMMENT $11C4 3 Go back for more points
COMMENT $11C6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $11C6
COMMENT $11C8 Wait for T1 to time out
FORCE_SYMBOL $11C8 VIA_int_flags
COMMENT $11CC Wait a moment more
COMMENT $11CD Clear shift register (blank output)
FORCE_SYMBOL $11CD VIA_shift_reg
COMMENT $11CF 3
COMMENT $11D1 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $11D1
COMMENT $11D3 Wait for T1 to time out
FORCE_SYMBOL $11D3 VIA_int_flags
COMMENT $11D7 Wait a moment more
FORCE_SYMBOL $11D8 VIA_shift_reg
COMMENT_LINE $11DA one more round
FORCE_SYMBOL $11DA VIA_port_b
COMMENT $11DE Disable mux
FORCE_SYMBOL $11DE VIA_port_b
COMMENT $11E0 Send X to A/D
FORCE_SYMBOL $11E0 VIA_port_a
COMMENT $11E2 Put pattern in shift register
FORCE_SYMBOL $11E2 VIA_shift_reg
COMMENT $11E4 enable timer 1
FORCE_SYMBOL $11E4 VIA_t1_cnt_hi
COMMENT $11E6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $11E6
COMMENT $11E8 Wait for T1 to time out
FORCE_SYMBOL $11E8 VIA_int_flags
COMMENT $11EC Clear shift register (blank output)
FORCE_SYMBOL $11EC VIA_shift_reg
COMMENT $11EE Set scaling factor to 7f
FORCE_NO_SYMBOL $11EE
FORCE_SYMBOL $11F0 VIA_t1_cnt_lo
COMMENT $11F2 Restore the register from the stack
COMMENT $11F4 REturn to the caller
COMMENT_LINE $11F5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $11F5 draw_heart - Draws the falling heart when needed.
COMMENT_LINE $11F5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $11F5 Store the registers in the stack
FORCE_SYMBOL $11F7 HeartOnFlag
COMMENT $11FC A <- Total bombs
FORCE_SYMBOL $11FC TotalBombs
FORCE_NO_SYMBOL $11FF
COMMENT $1201 If A=0 , drop a heat
FORCE_SYMBOL $1203 HeartOnFlag
COMMENT $1208 A <- Heart was dropped flag
FORCE_SYMBOL $1208 HeartOnFlag
COMMENT $120B if cleared, don't proceed
COMMENT $120D otherwise, move the heart on screen
FORCE_SYMBOL $120F BOMB_Y_START
FORCE_SYMBOL $1211 HeartYpos
FORCE_SYMBOL $1214 ManXpos
FORCE_SYMBOL $1217 HeartXpos
FORCE_SYMBOL $121A HeartYpos
COMMENT $121D if so, goto update the index
FORCE_NO_SYMBOL $121D
COMMENT $1221 if so, goto update the index.
FORCE_NO_SYMBOL $1221
COMMENT $1223 otherwise, the bomb is at the bottom
COMMENT_LINE $1225 of the screen and shouldn't be
COMMENT $1225 displayed
FORCE_SYMBOL $1225 HeartOnFlag
FORCE_SYMBOL $1228 HeartYpos
FORCE_SYMBOL $122B ChkHeartFlag
COMMENT $122E check if the bomb hit the piles
FORCE_SYMBOL $122E catch_chk
FORCE_SYMBOL $1231 ChkHeartFlag
FORCE_SYMBOL $1234 HeartYpos
FORCE_NO_SYMBOL $1237
FORCE_SYMBOL $1239 HeartYpos
FORCE_SYMBOL $123C Reset0Ref_D0
FORCE_SYMBOL $123F HeartYpos
COMMENT $1242 Move beam to pos(X,Y)
FORCE_SYMBOL $1242 Moveto_d
COMMENT $1245 X<-Address[HeartVectorList]
FORCE_SYMBOL $1245 heart
FORCE_NO_SYMBOL $124A
COMMENT_LINE $124E STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $124E STA     <VIA_port_b
FORCE_SYMBOL $124E VIA_port_b
COMMENT $1252 Disable mux
FORCE_SYMBOL $1252 VIA_port_b
COMMENT $1254 Send X to A/D
FORCE_SYMBOL $1254 VIA_port_a
COMMENT $1256 Put pattern in shift register
FORCE_SYMBOL $1256 VIA_shift_reg
COMMENT $1258 enable timer 1
FORCE_SYMBOL $1258 VIA_t1_cnt_hi
COMMENT $125A 6
COMMENT $125C 7
FORCE_NO_SYMBOL $125C
COMMENT $125F 3 Go back for more points
COMMENT $1261 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1261
COMMENT $1263 Wait for T1 to time out
FORCE_SYMBOL $1263 VIA_int_flags
COMMENT $1267 Wait a moment more
COMMENT $1268 Clear shift register (blank output)
FORCE_SYMBOL $1268 VIA_shift_reg
COMMENT $126A 3
COMMENT $126C B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $126C
COMMENT $126E Wait for T1 to time out
FORCE_SYMBOL $126E VIA_int_flags
COMMENT $1272 Wait a moment more
FORCE_SYMBOL $1273 VIA_shift_reg
COMMENT_LINE $1275 one more round
FORCE_SYMBOL $1275 VIA_port_b
COMMENT $1279 Disable mux
FORCE_SYMBOL $1279 VIA_port_b
COMMENT $127B Send X to A/D
FORCE_SYMBOL $127B VIA_port_a
COMMENT $127D Put pattern in shift register
FORCE_SYMBOL $127D VIA_shift_reg
COMMENT $127F enable timer 1
FORCE_SYMBOL $127F VIA_t1_cnt_hi
COMMENT $1281 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1281
COMMENT $1283 Wait for T1 to time out
FORCE_SYMBOL $1283 VIA_int_flags
COMMENT $1287 Clear shift register (blank output)
FORCE_SYMBOL $1287 VIA_shift_reg
COMMENT $1289 Restore the registers from the stack
COMMENT $128B Return to the caller
COMMENT_LINE $128C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $128C draw_diamond - Draws the falling diamond when needed.
COMMENT_LINE $128C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $128C Store the registers in the stack
FORCE_SYMBOL $128E diamondOnFlag
COMMENT $1293 A <- Total bombs
FORCE_SYMBOL $1293 TotalBombs
FORCE_NO_SYMBOL $1296
COMMENT $1298 If A=0 , drop a heat
FORCE_SYMBOL $129A diamondOnFlag
COMMENT $129F A <- Heart was dropped flag
FORCE_SYMBOL $129F diamondOnFlag
COMMENT $12A2 if cleared, don't proceed
COMMENT $12A4 otherwise, move the heart on screen
FORCE_SYMBOL $12A6 BOMB_Y_START
FORCE_SYMBOL $12A8 diamondYpos
FORCE_SYMBOL $12AB ManXpos
FORCE_SYMBOL $12AE diamondXpos
FORCE_SYMBOL $12B1 diamondYpos
COMMENT $12B4 if so, goto update the index
FORCE_NO_SYMBOL $12B4
COMMENT $12B8 85                   ;if so, goto update the index.
FORCE_NO_SYMBOL $12B8
COMMENT $12BA otherwise, the bomb is at the bottom
COMMENT_LINE $12BC of the screen and shouldn't be
COMMENT $12BC displayed
FORCE_SYMBOL $12BC diamondOnFlag
FORCE_SYMBOL $12BF diamondYpos
FORCE_SYMBOL $12C2 ChkDiamondFlag
COMMENT $12C5 check if the bomb hit the piles
FORCE_SYMBOL $12C5 catch_chk
FORCE_SYMBOL $12C8 ChkDiamondFlag
FORCE_SYMBOL $12CB diamondYpos
FORCE_NO_SYMBOL $12CE
FORCE_SYMBOL $12D0 diamondYpos
FORCE_SYMBOL $12D3 Reset0Ref_D0
FORCE_SYMBOL $12D6 diamondYpos
COMMENT $12D9 Move beam to pos(X,Y)
FORCE_SYMBOL $12D9 Moveto_d
COMMENT $12DC X<-Address[HeartVectorList]
FORCE_SYMBOL $12DC diamond
FORCE_NO_SYMBOL $12E1
COMMENT_LINE $12E5 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $12E5 STA     <VIA_port_b
FORCE_SYMBOL $12E5 VIA_port_b
COMMENT $12E9 Disable mux
FORCE_SYMBOL $12E9 VIA_port_b
COMMENT $12EB Send X to A/D
FORCE_SYMBOL $12EB VIA_port_a
COMMENT $12ED Put pattern in shift register
FORCE_SYMBOL $12ED VIA_shift_reg
COMMENT $12EF enable timer 1
FORCE_SYMBOL $12EF VIA_t1_cnt_hi
COMMENT $12F1 6
COMMENT $12F3 7
FORCE_NO_SYMBOL $12F3
COMMENT $12F6 3 Go back for more points
COMMENT $12F8 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $12F8
COMMENT $12FA Wait for T1 to time out
FORCE_SYMBOL $12FA VIA_int_flags
COMMENT $12FE Wait a moment more
COMMENT $12FF Clear shift register (blank output)
FORCE_SYMBOL $12FF VIA_shift_reg
COMMENT $1301 3
COMMENT $1303 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1303
COMMENT $1305 Wait for T1 to time out
FORCE_SYMBOL $1305 VIA_int_flags
COMMENT $1309 Wait a moment more
FORCE_SYMBOL $130A VIA_shift_reg
COMMENT_LINE $130C one more round
FORCE_SYMBOL $130C VIA_port_b
COMMENT $1310 Disable mux
FORCE_SYMBOL $1310 VIA_port_b
COMMENT $1312 Send X to A/D
FORCE_SYMBOL $1312 VIA_port_a
COMMENT $1314 Put pattern in shift register
FORCE_SYMBOL $1314 VIA_shift_reg
COMMENT $1316 enable timer 1
FORCE_SYMBOL $1316 VIA_t1_cnt_hi
COMMENT $1318 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1318
COMMENT $131A Wait for T1 to time out
FORCE_SYMBOL $131A VIA_int_flags
COMMENT $131E Clear shift register (blank output)
FORCE_SYMBOL $131E VIA_shift_reg
COMMENT $1320 Restore the registers from the stack
COMMENT $1322 Return to the caller
COMMENT_LINE $1323 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1323 draw_ex - Draws the falling X when needed.
COMMENT_LINE $1323 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1325 ExOnFlag
COMMENT $132A A <- Total bombs
FORCE_SYMBOL $132A TotalBombs
FORCE_NO_SYMBOL $132D
COMMENT $132F If A=0 , drop a heat
FORCE_SYMBOL $1331 ExOnFlag
COMMENT $1336 A <- Heart was dropped flag
FORCE_SYMBOL $1336 ExOnFlag
COMMENT $1339 if cleared, don't proceed
COMMENT $133D otherwise, move the heart on screen
FORCE_SYMBOL $133F BOMB_Y_START
FORCE_SYMBOL $1341 ExYpos
FORCE_SYMBOL $1344 ManXpos
FORCE_SYMBOL $1347 ExXpos
FORCE_SYMBOL $134A ExYpos
COMMENT $134D if so, goto update the index
FORCE_NO_SYMBOL $134D
COMMENT $1351 80                   ;if so, goto update the index.
FORCE_NO_SYMBOL $1351
COMMENT $1353 otherwise, the bomb is at the bottom
COMMENT_LINE $1355 of the screen and shouldn't be
COMMENT $1355 displayed
FORCE_SYMBOL $1355 ExOnFlag
FORCE_SYMBOL $1358 BonusRndFlag
COMMENT $135B skip catch check of Ex if bonus round
FORCE_SYMBOL $135D ExYpos
FORCE_SYMBOL $1360 ChkExFlag
COMMENT $1363 check if the Ex hit the piles
FORCE_SYMBOL $1363 catch_chk
FORCE_SYMBOL $1366 ChkExFlag
FORCE_SYMBOL $1369 ExYpos
FORCE_NO_SYMBOL $136C
FORCE_SYMBOL $136E ExYpos
FORCE_SYMBOL $1371 Reset0Ref_D0
FORCE_SYMBOL $1374 ExYpos
COMMENT $1377 Move beam to pos(X,Y)
FORCE_SYMBOL $1377 Moveto_d
COMMENT $137A X<-Address[HeartVectorList]
FORCE_SYMBOL $137A ex
FORCE_NO_SYMBOL $137F
COMMENT_LINE $1383 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $1383 STA     <VIA_port_b
FORCE_SYMBOL $1383 VIA_port_b
COMMENT $1387 Disable mux
FORCE_SYMBOL $1387 VIA_port_b
COMMENT $1389 Send X to A/D
FORCE_SYMBOL $1389 VIA_port_a
COMMENT $138B Put pattern in shift register
FORCE_SYMBOL $138B VIA_shift_reg
COMMENT $138D enable timer 1
FORCE_SYMBOL $138D VIA_t1_cnt_hi
COMMENT $138F 6
COMMENT $1391 7
FORCE_NO_SYMBOL $1391
COMMENT $1394 3 Go back for more points
COMMENT $1396 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1396
COMMENT $1398 Wait for T1 to time out
FORCE_SYMBOL $1398 VIA_int_flags
COMMENT $139C Wait a moment more
COMMENT $139D Clear shift register (blank output)
FORCE_SYMBOL $139D VIA_shift_reg
COMMENT $139F 3
COMMENT $13A1 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $13A1
COMMENT $13A3 Wait for T1 to time out
FORCE_SYMBOL $13A3 VIA_int_flags
COMMENT $13A7 Wait a moment more
FORCE_SYMBOL $13A8 VIA_shift_reg
COMMENT_LINE $13AA one more round
FORCE_SYMBOL $13AA VIA_port_b
COMMENT $13AE Disable mux
FORCE_SYMBOL $13AE VIA_port_b
COMMENT $13B0 Send X to A/D
FORCE_SYMBOL $13B0 VIA_port_a
COMMENT $13B2 Put pattern in shift register
FORCE_SYMBOL $13B2 VIA_shift_reg
COMMENT $13B4 enable timer 1
FORCE_SYMBOL $13B4 VIA_t1_cnt_hi
COMMENT $13B6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $13B6
COMMENT $13B8 Wait for T1 to time out
FORCE_SYMBOL $13B8 VIA_int_flags
COMMENT $13BC Clear shift register (blank output)
FORCE_SYMBOL $13BC VIA_shift_reg
COMMENT $13BE Restore the register from the stack
COMMENT $13C0 Return to the caller
COMMENT_LINE $13C1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $13C1 draw_background - This procedure draws the screen background based on a
COMMENT_LINE $13C1 vector table defined at #bckgnd. This procedure is called
COMMENT_LINE $13C1 every refresh cycle in order to keep the background always
COMMENT_LINE $13C1 visible. The scaling factor here is = to $7F.
COMMENT_LINE $13C1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $13C1 Store registers in the stack
COMMENT $13C3 A <- $7F scaling factor
FORCE_NO_SYMBOL $13C3
COMMENT $13C5 Store the scaling factor in the VIA
FORCE_SYMBOL $13C5 VIA_t1_cnt_lo
COMMENT $13C7 Set the intensity to $5F
FORCE_SYMBOL $13C7 Intensity_5F
FORCE_SYMBOL $13CA Reset0Ref_D0
COMMENT $13CD Check if begining of bonus round,
FORCE_SYMBOL $13CD dropManFlag
COMMENT $13D0 if not, stay at top
FORCE_NO_SYMBOL $13D2
FORCE_SYMBOL $13D4 BarYpos
COMMENT $13D7 adjust Ypos for the down movement
FORCE_NO_SYMBOL $13D7
FORCE_SYMBOL $13D9 BarYpos
COMMENT $13DC check if in upper part of screen,
FORCE_NO_SYMBOL $13DC
COMMENT $13DE if so, just keep moving...
COMMENT $13E0 check if above bottom part,
FORCE_NO_SYMBOL $13E0
COMMENT $13E2 if so, keep moving,
COMMENT $13E4 otherwise, clear the dropping flag
FORCE_SYMBOL $13E4 dropManFlag
COMMENT $13E7 goto update xy location
COMMENT $13E9 (Y,X)=Begining of the left line
FORCE_NO_SYMBOL $13E9
FORCE_SYMBOL $13EC BarYpos
COMMENT $13EF Send the beam to (X,Y)pos
FORCE_SYMBOL $13EF Moveto_d
COMMENT $13F2 X <- #bckgnd table
FORCE_SYMBOL $13F2 bckgnd
FORCE_NO_SYMBOL $13F7
COMMENT_LINE $13FB STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $13FB STA     <VIA_port_b
FORCE_SYMBOL $13FB VIA_port_b
COMMENT $13FF Disable mux
FORCE_SYMBOL $13FF VIA_port_b
COMMENT $1401 Send X to A/D
FORCE_SYMBOL $1401 VIA_port_a
COMMENT $1403 Put pattern in shift register
FORCE_SYMBOL $1403 VIA_shift_reg
COMMENT $1405 enable timer 1
FORCE_SYMBOL $1405 VIA_t1_cnt_hi
COMMENT $1407 6
COMMENT $1409 7
FORCE_NO_SYMBOL $1409
COMMENT $140C 3 Go back for more points
COMMENT $140E B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $140E
COMMENT $1410 Wait for T1 to time out
FORCE_SYMBOL $1410 VIA_int_flags
COMMENT $1414 Wait a moment more
COMMENT $1415 Clear shift register (blank output)
FORCE_SYMBOL $1415 VIA_shift_reg
COMMENT $1417 3
COMMENT $1419 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1419
COMMENT $141B Wait for T1 to time out
FORCE_SYMBOL $141B VIA_int_flags
COMMENT $141F Wait a moment more
FORCE_SYMBOL $1420 VIA_shift_reg
COMMENT_LINE $1422 one more round
FORCE_SYMBOL $1422 VIA_port_b
COMMENT $1426 Disable mux
FORCE_SYMBOL $1426 VIA_port_b
COMMENT $1428 Send X to A/D
FORCE_SYMBOL $1428 VIA_port_a
COMMENT $142A Put pattern in shift register
FORCE_SYMBOL $142A VIA_shift_reg
COMMENT $142C enable timer 1
FORCE_SYMBOL $142C VIA_t1_cnt_hi
COMMENT $142E B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $142E
COMMENT $1430 Wait for T1 to time out
FORCE_SYMBOL $1430 VIA_int_flags
COMMENT $1434 Clear shift register (blank output)
FORCE_SYMBOL $1434 VIA_shift_reg
COMMENT $1436 Draw the supprting bricks...
FORCE_SYMBOL $1436 draw_supports
COMMENT $1439 Restore registers from the stack
COMMENT $143B Return to caller
COMMENT_LINE $143C >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $143C draw_supports: Draw the supporting bricks under the horizontal bar.
COMMENT_LINE $143C <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $143C bricks_loc
COMMENT $1440 A <- Number of support bricks to draw
FORCE_SYMBOL $1440 ManHit
FORCE_SYMBOL $1443 BricksCnt
COMMENT $1447 A <- A*4
FORCE_NO_SYMBOL $144A
COMMENT $144E pretty for optimizing to use a makro :-)
FORCE_NO_SYMBOL $144E
COMMENT_LINE $1451 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1451 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1451 LDD   #0x0302;
COMMENT_LINE $1451 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1451 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1451 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1451 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1451 LDB   #0x01;
COMMENT_LINE $1451 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1451 LDB    #0x00CC;
COMMENT $1451 0x0C;
FORCE_SYMBOL $1451 VIA_cntl
COMMENT $1453 A <- Number of support bricks to draw
FORCE_SYMBOL $1453 BricksCnt
FORCE_SYMBOL $1456 MAN_HITS_TO_BONUS
COMMENT $145C A <- Ypos of brick to be drawn
COMMENT $145E B <- Xpos of brick to draw (left)
COMMENT $1460 Store Y in D/A register
FORCE_SYMBOL $1460 VIA_port_a
COMMENT $1462 Blank low, zero high?
FORCE_NO_SYMBOL $1462
FORCE_SYMBOL $1464 VIA_cntl
COMMENT $1467 Enable mux
FORCE_SYMBOL $1467 VIA_port_b
COMMENT $1469 Clear shift regigster
FORCE_SYMBOL $1469 VIA_shift_reg
COMMENT $146B Disable mux
FORCE_SYMBOL $146B VIA_port_b
COMMENT $146D Store X in D/A register
FORCE_SYMBOL $146D VIA_port_a
COMMENT $146F enable timer
FORCE_SYMBOL $146F VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1471
FORCE_SYMBOL $1473 VIA_int_flags
COMMENT $1477 X<-Address[Brick]
FORCE_SYMBOL $1477 single_brick
COMMENT $147A A <- $7F scaling factor
COMMENT $147C Store the scaling factor in the VIA
FORCE_SYMBOL $147C VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1480
COMMENT_LINE $1484 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $1484 STA     <VIA_port_b
FORCE_SYMBOL $1484 VIA_port_b
COMMENT $1488 Disable mux
FORCE_SYMBOL $1488 VIA_port_b
COMMENT $148A Send X to A/D
FORCE_SYMBOL $148A VIA_port_a
COMMENT $148C Put pattern in shift register
FORCE_SYMBOL $148C VIA_shift_reg
COMMENT $148E enable timer 1
FORCE_SYMBOL $148E VIA_t1_cnt_hi
COMMENT $1490 6
COMMENT $1492 7
FORCE_NO_SYMBOL $1492
COMMENT $1495 3 Go back for more points
COMMENT $1497 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1497
COMMENT $1499 Wait for T1 to time out
FORCE_SYMBOL $1499 VIA_int_flags
COMMENT $149D Wait a moment more
COMMENT $149E Clear shift register (blank output)
FORCE_SYMBOL $149E VIA_shift_reg
COMMENT $14A0 3
COMMENT $14A2 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $14A2
COMMENT $14A4 Wait for T1 to time out
FORCE_SYMBOL $14A4 VIA_int_flags
COMMENT $14A8 Wait a moment more
FORCE_SYMBOL $14A9 VIA_shift_reg
COMMENT_LINE $14AB one more round
FORCE_SYMBOL $14AB VIA_port_b
COMMENT $14AF Disable mux
FORCE_SYMBOL $14AF VIA_port_b
COMMENT $14B1 Send X to A/D
FORCE_SYMBOL $14B1 VIA_port_a
COMMENT $14B3 Put pattern in shift register
FORCE_SYMBOL $14B3 VIA_shift_reg
COMMENT $14B5 enable timer 1
FORCE_SYMBOL $14B5 VIA_t1_cnt_hi
COMMENT $14B7 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $14B7
COMMENT $14B9 Wait for T1 to time out
FORCE_SYMBOL $14B9 VIA_int_flags
COMMENT $14BD Clear shift register (blank output)
FORCE_SYMBOL $14BD VIA_shift_reg
FORCE_NO_SYMBOL $14BF
COMMENT $14C3 pretty for optimizing to use a makro :-)
FORCE_NO_SYMBOL $14C3
COMMENT_LINE $14C6 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $14C6 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $14C6 LDD   #0x0302;
COMMENT_LINE $14C6 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $14C6 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $14C6 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $14C6 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $14C6 LDB   #0x01;
COMMENT_LINE $14C6 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $14C6 LDB    #0x00CC;
COMMENT $14C6 0x0C;
FORCE_SYMBOL $14C6 VIA_cntl
COMMENT $14C8 A <- $7F scaling factor
FORCE_NO_SYMBOL $14C8
COMMENT $14CA Store the scaling factor in the VIA
FORCE_SYMBOL $14CA VIA_t1_cnt_lo
COMMENT $14CC A <- Ypos of brick to be drawn
COMMENT $14CE B <- Xpos of brick to draw (right)
COMMENT $14D0 Store Y in D/A register
FORCE_SYMBOL $14D0 VIA_port_a
COMMENT $14D2 Blank low, zero high?
FORCE_NO_SYMBOL $14D2
FORCE_SYMBOL $14D4 VIA_cntl
COMMENT $14D7 Enable mux
FORCE_SYMBOL $14D7 VIA_port_b
COMMENT $14D9 Clear shift regigster
FORCE_SYMBOL $14D9 VIA_shift_reg
COMMENT $14DB Disable mux
FORCE_SYMBOL $14DB VIA_port_b
COMMENT $14DD Store X in D/A register
FORCE_SYMBOL $14DD VIA_port_a
COMMENT $14DF enable timer
FORCE_SYMBOL $14DF VIA_t1_cnt_hi
FORCE_NO_SYMBOL $14E1
FORCE_SYMBOL $14E3 VIA_int_flags
COMMENT $14E7 X<-Address[Brick]
FORCE_SYMBOL $14E7 single_brick
COMMENT $14EA A <- $7F scaling factor
COMMENT $14EC Store the scaling factor in the VIA
FORCE_SYMBOL $14EC VIA_t1_cnt_lo
FORCE_NO_SYMBOL $14F0
COMMENT_LINE $14F4 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $14F4 STA     <VIA_port_b
FORCE_SYMBOL $14F4 VIA_port_b
COMMENT $14F8 Disable mux
FORCE_SYMBOL $14F8 VIA_port_b
COMMENT $14FA Send X to A/D
FORCE_SYMBOL $14FA VIA_port_a
COMMENT $14FC Put pattern in shift register
FORCE_SYMBOL $14FC VIA_shift_reg
COMMENT $14FE enable timer 1
FORCE_SYMBOL $14FE VIA_t1_cnt_hi
COMMENT $1500 6
COMMENT $1502 7
FORCE_NO_SYMBOL $1502
COMMENT $1505 3 Go back for more points
COMMENT $1507 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1507
COMMENT $1509 Wait for T1 to time out
FORCE_SYMBOL $1509 VIA_int_flags
COMMENT $150D Wait a moment more
COMMENT $150E Clear shift register (blank output)
FORCE_SYMBOL $150E VIA_shift_reg
COMMENT $1510 3
COMMENT $1512 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1512
COMMENT $1514 Wait for T1 to time out
FORCE_SYMBOL $1514 VIA_int_flags
COMMENT $1518 Wait a moment more
FORCE_SYMBOL $1519 VIA_shift_reg
COMMENT_LINE $151B one more round
FORCE_SYMBOL $151B VIA_port_b
COMMENT $151F Disable mux
FORCE_SYMBOL $151F VIA_port_b
COMMENT $1521 Send X to A/D
FORCE_SYMBOL $1521 VIA_port_a
COMMENT $1523 Put pattern in shift register
FORCE_SYMBOL $1523 VIA_shift_reg
COMMENT $1525 enable timer 1
FORCE_SYMBOL $1525 VIA_t1_cnt_hi
COMMENT $1527 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1527
COMMENT $1529 Wait for T1 to time out
FORCE_SYMBOL $1529 VIA_int_flags
COMMENT $152D Clear shift register (blank output)
FORCE_SYMBOL $152D VIA_shift_reg
COMMENT $152F A <- $7F scaling factor
FORCE_NO_SYMBOL $152F
COMMENT $1531 Store the scaling factor in the VIA
FORCE_SYMBOL $1531 VIA_t1_cnt_lo
FORCE_SYMBOL $1533 BricksCnt
COMMENT $1539 Return to the caller
COMMENT_LINE $153A >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $153A bricks_loc - predefined location for the support bricks (located under the
COMMENT_LINE $153A horizontal bar)
COMMENT_LINE $153A <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $153A Brick #0 locations
COMMENT $153E Brick #1 locations
COMMENT $1542 Brick #2 locations
COMMENT $1546 Brick #3 locations
COMMENT $154A Brick #4 locations
COMMENT $154E Brick #5 locations
COMMENT $1552 Brick #6 locations
COMMENT $1556 Brick #7 locations
COMMENT $155A Brick #8 locations
COMMENT $155E Brick #9 locations
COMMENT_LINE $1562 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1562 print_info: This procedure is responsible for prinitng game info such as:
COMMENT_LINE $1562 Score, High score, car speed, cars left etc.
COMMENT_LINE $1562 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FORCE_NO_SYMBOL $1562
COMMENT $1566 pretty for optimizing to use a makro :-)
FORCE_NO_SYMBOL $1566
COMMENT_LINE $1569 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1569 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1569 LDD   #0x0302;
COMMENT_LINE $1569 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1569 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1569 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1569 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1569 LDB   #0x01;
COMMENT_LINE $1569 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1569 LDB    #0x00CC;
COMMENT $1569 0x0C;
FORCE_SYMBOL $1569 VIA_cntl
COMMENT $156B YX position of the score
FORCE_NO_SYMBOL $156B
COMMENT $156E u points to the score string
FORCE_SYMBOL $156E Score_tbl
COMMENT $1571 Print the score!
FORCE_SYMBOL $1571 Print_Str_d
COMMENT_LINE $1574 ;      *** DEBUG ***
COMMENT_LINE $1574 ;      LDX   #dbg1_tbl
COMMENT_LINE $1574 ;      JSR   Clear_Score
COMMENT_LINE $1574 ;      LDA   CurBombsNum;  BombsInPile
COMMENT_LINE $1574 ;      LDX   #dbg1_tbl
COMMENT_LINE $1574 ;      JSR   Add_Score_a
COMMENT_LINE $1574 ;      LDD   #$8000
COMMENT_LINE $1574 ;      LDU   #dbg1_tbl
COMMENT_LINE $1574 ;      JSR   Print_Str_d
COMMENT_LINE $1574 ;      LDX   #dbg2_tbl
COMMENT_LINE $1574 ;      JSR   Clear_Score
COMMENT_LINE $1574 ;      LDA   CurLvlBombs
COMMENT_LINE $1574 ;      LDX   #dbg2_tbl
COMMENT_LINE $1574 ;      JSR   Add_Score_a
COMMENT_LINE $1574 ;
COMMENT_LINE $1574 ;      LDD   #$8050
COMMENT_LINE $1574 ;      LDU   #dbg2_tbl
COMMENT_LINE $1574 ;      JSR   Print_Str_d
COMMENT_LINE $1574 ;      *** DEBUG END ***
COMMENT_LINE $1574 ;
COMMENT $1574 Return to caller
COMMENT_LINE $1575 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1575 do_explosion - Is called when the player misses a bomb and it hits the bottom
COMMENT_LINE $1575 of the screen...
COMMENT_LINE $1575 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT $1577 Bright explosion...
FORCE_SYMBOL $1577 Intensity_7F
COMMENT_LINE $157A Do some graphics...
COMMENT $157A Move the beam to (0,0)
FORCE_SYMBOL $157A Reset0Ref_D0
COMMENT $157D A <- Explostion Scale
FORCE_NO_SYMBOL $157D
COMMENT $157F Set the VIA t1 to the new scale
FORCE_SYMBOL $157F VIA_t1_cnt_lo
COMMENT $1581 A <- Ypos of the current bomb
FORCE_NO_SYMBOL $1581
FORCE_NO_SYMBOL $1583
COMMENT $1585 B <- Xpos of the current bomb
FORCE_NO_SYMBOL $1585
FORCE_NO_SYMBOL $1587
COMMENT $1589 Move beam to the explosion location
FORCE_SYMBOL $1589 Moveto_d
COMMENT $158C X <- Address[ExplosionVectorList]
FORCE_SYMBOL $158C explsn_vec_list
COMMENT $158F A <- Explostion Scale
FORCE_SYMBOL $158F explsn_scale
COMMENT $1592 Set the VIA t1 to the new scale
FORCE_SYMBOL $1592 VIA_t1_cnt_lo
COMMENT $1594 Draw the EXPLOSIN*!@#$
FORCE_SYMBOL $1594 Draw_VLc
COMMENT_LINE $1597 Do some sounds...
COMMENT_LINE $1597 LDU   #explosion_sound
COMMENT_LINE $1597 JSR   make_the_sound
FORCE_NO_SYMBOL $1597
FORCE_SYMBOL $1599 hitSndFlag
COMMENT_LINE $159C Do some delay...
FORCE_NO_SYMBOL $159C
FORCE_NO_SYMBOL $159F
FORCE_NO_SYMBOL $15A2
FORCE_SYMBOL $15A4 Delay_b
COMMENT $15AB A <- Explostion Scale
FORCE_NO_SYMBOL $15AB
COMMENT $15AD Set the VIA t1 to the normal scale
FORCE_SYMBOL $15AD VIA_t1_cnt_lo
COMMENT_LINE $15B2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $15B2 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $15B2 *****************************************************************************
FORCE_SYMBOL $15B4 hitSndFlag
FORCE_SYMBOL $15BB hitSndFlag
COMMENT $15C0 B=current channel activity
FORCE_NO_SYMBOL $15C0
COMMENT $15C3 Deactivate Tone+Noise1 (set)
FORCE_NO_SYMBOL $15C3
COMMENT $15C5 Sound reg. 0x07
FORCE_NO_SYMBOL $15C5
FORCE_SYMBOL $15C7 Sound_Byte
COMMENT $15CC Noise value
FORCE_NO_SYMBOL $15CC
COMMENT $15CE Sound reg, 0x06
FORCE_NO_SYMBOL $15CE
FORCE_SYMBOL $15D0 Sound_Byte
COMMENT $15D3 A<- current index to volume
FORCE_SYMBOL $15D3 hitSndFlag
COMMENT $15D6 X<- *ptr to explosion volume
FORCE_SYMBOL $15D6 explsn_vol
COMMENT $15D9 B<- current explosion volume
COMMENT $15DB Sound reg. Volume 1
FORCE_NO_SYMBOL $15DB
FORCE_SYMBOL $15DD Sound_Byte
COMMENT $15E0 B=current channel activity
FORCE_NO_SYMBOL $15E0
COMMENT $15E3 Activate Noise1 (reset)
FORCE_NO_SYMBOL $15E3
COMMENT $15E5 Sound reg. 0x07
FORCE_NO_SYMBOL $15E5
FORCE_SYMBOL $15E7 Sound_Byte
FORCE_SYMBOL $15EA catchSndFlag
FORCE_SYMBOL $15F1 catchSndFlag
COMMENT $15F6 B=current channel activity
FORCE_NO_SYMBOL $15F6
COMMENT $15F9 Deactivate Tone+Noise2 (set)
FORCE_NO_SYMBOL $15F9
COMMENT $15FB Sound reg. 0x07
FORCE_NO_SYMBOL $15FB
FORCE_SYMBOL $15FD Sound_Byte
FORCE_SYMBOL $1602 catch_tones
FORCE_SYMBOL $1605 catchSndFlag
COMMENT $1608 Tone 2 LSB value
COMMENT $160A Sound reg, 0x00
FORCE_NO_SYMBOL $160A
FORCE_SYMBOL $160C Sound_Byte
COMMENT $160F Tone 2 MSB value
FORCE_NO_SYMBOL $160F
COMMENT $1611 Sound reg. 0x01
FORCE_NO_SYMBOL $1611
FORCE_SYMBOL $1613 Sound_Byte
COMMENT $1616 Channel 2 Max. volume
FORCE_NO_SYMBOL $1616
COMMENT $1618 Sound reg. Volume 2
FORCE_NO_SYMBOL $1618
FORCE_SYMBOL $161A Sound_Byte
COMMENT $161D B=current channel activity
FORCE_NO_SYMBOL $161D
COMMENT $1620 Activate Tone2 (reset)
FORCE_NO_SYMBOL $1620
COMMENT $1622 Deactivate Noise2 (set)
FORCE_NO_SYMBOL $1622
COMMENT $1624 Sound reg. 0x07
FORCE_NO_SYMBOL $1624
FORCE_SYMBOL $1626 Sound_Byte
FORCE_SYMBOL $1629 goodSndFlag
FORCE_SYMBOL $1630 goodSndFlag
COMMENT $1635 B=current channel activity
FORCE_NO_SYMBOL $1635
COMMENT $1638 Deactivate Tone+Noise3 (set)
FORCE_NO_SYMBOL $1638
COMMENT $163A Sound reg. 0x07
FORCE_NO_SYMBOL $163A
FORCE_SYMBOL $163C Sound_Byte
FORCE_SYMBOL $1641 good_tones
FORCE_SYMBOL $1644 goodSndFlag
COMMENT $1647 Tone 3 LSB value
COMMENT $1649 Sound reg, 0x00
FORCE_NO_SYMBOL $1649
FORCE_SYMBOL $164B Sound_Byte
COMMENT $164E Tone 3 MSB value
FORCE_NO_SYMBOL $164E
COMMENT $1650 Sound reg. 0x01
FORCE_NO_SYMBOL $1650
FORCE_SYMBOL $1652 Sound_Byte
COMMENT $1655 Channel 3 Max. volume
FORCE_NO_SYMBOL $1655
COMMENT $1657 Sound reg. Volume 3
FORCE_NO_SYMBOL $1657
FORCE_SYMBOL $1659 Sound_Byte
COMMENT $165C B=current channel activity
FORCE_NO_SYMBOL $165C
COMMENT $165F Activate Tone3 (reset)
FORCE_NO_SYMBOL $165F
COMMENT $1661 Deactivate Noise3 (set)
FORCE_NO_SYMBOL $1661
COMMENT $1663 Sound reg. 0x07
FORCE_NO_SYMBOL $1663
FORCE_SYMBOL $1665 Sound_Byte
FORCE_SYMBOL $1668 fallSndFlag
FORCE_SYMBOL $166F fallSndFlag
COMMENT $1674 B=current channel activity
FORCE_NO_SYMBOL $1674
COMMENT $1677 Deactivate Tone+Noise3 (set)
FORCE_NO_SYMBOL $1677
COMMENT $1679 Sound reg. 0x07
FORCE_NO_SYMBOL $1679
FORCE_SYMBOL $167B Sound_Byte
FORCE_SYMBOL $1680 fallSndFlag
FORCE_NO_SYMBOL $1683
COMMENT $1685 Sound reg, 0x00
FORCE_NO_SYMBOL $1685
FORCE_SYMBOL $1687 Sound_Byte
COMMENT $168A Tone 3 MSB value
FORCE_NO_SYMBOL $168A
COMMENT $168C Sound reg. 0x01
FORCE_NO_SYMBOL $168C
FORCE_SYMBOL $168E Sound_Byte
COMMENT $1691 Channel 3 Max. volume
FORCE_NO_SYMBOL $1691
COMMENT $1693 Sound reg. Volume 3
FORCE_NO_SYMBOL $1693
FORCE_SYMBOL $1695 Sound_Byte
COMMENT $1698 B=current channel activity
FORCE_NO_SYMBOL $1698
COMMENT $169B Activate Tone3 (reset)
FORCE_NO_SYMBOL $169B
COMMENT $169D Deactivate Noise3 (set)
FORCE_NO_SYMBOL $169D
COMMENT $169F Sound reg. 0x07
FORCE_NO_SYMBOL $169F
FORCE_SYMBOL $16A1 Sound_Byte
FORCE_SYMBOL $16A4 badSndFlag
FORCE_SYMBOL $16AB badSndFlag
COMMENT $16B0 B=current channel activity
FORCE_NO_SYMBOL $16B0
COMMENT $16B3 Deactivate Tone+Noise3 (set)
FORCE_NO_SYMBOL $16B3
COMMENT $16B5 Sound reg. 0x07
FORCE_NO_SYMBOL $16B5
FORCE_SYMBOL $16B7 Sound_Byte
COMMENT $16BC Channel 3 constant tone
FORCE_NO_SYMBOL $16BC
COMMENT $16BE Sound reg, 0x00
FORCE_NO_SYMBOL $16BE
FORCE_SYMBOL $16C0 Sound_Byte
COMMENT $16C3 Tone 3 MSB value
FORCE_NO_SYMBOL $16C3
COMMENT $16C5 Sound reg. 0x01
FORCE_NO_SYMBOL $16C5
FORCE_SYMBOL $16C7 Sound_Byte
FORCE_SYMBOL $16CA badSndFlag
FORCE_SYMBOL $16CD bad_vol
COMMENT $16D0 Tone 3 LSB value
COMMENT $16D2 Sound reg. Volume 3
FORCE_NO_SYMBOL $16D2
FORCE_SYMBOL $16D4 Sound_Byte
COMMENT $16D7 B=current channel activity
FORCE_NO_SYMBOL $16D7
COMMENT $16DA Activate Tone3 (reset)
FORCE_NO_SYMBOL $16DA
COMMENT $16DC Deactivate Noise3 (set)
FORCE_NO_SYMBOL $16DC
COMMENT $16DE Sound reg. 0x07
FORCE_NO_SYMBOL $16DE
FORCE_SYMBOL $16E0 Sound_Byte
COMMENT_LINE $16E6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $16E6 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $170D >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $170D <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $170D *****************************************************************************
FORCE_SYMBOL $170D gameOverFlag
COMMENT $1714 Check if the man was hit more than
FORCE_SYMBOL $1714 ManHit
COMMENT $1717 the min. for bonus round
FORCE_SYMBOL $1717 MAN_HITS_TO_BONUS
COMMENT $1719 if not, proceed to level init
COMMENT $171B clear current counter
FORCE_SYMBOL $171B ManHit
COMMENT $171E Set the Bonus round flag
FORCE_SYMBOL $171E BonusRndFlag
FORCE_SYMBOL $1721 dropManFlag
FORCE_NO_SYMBOL $1724
FORCE_SYMBOL $1726 fallSndFlag
COMMENT $1729 In case of bonus, terminate current
FORCE_SYMBOL $1729 CurLvlBombs
COMMENT $172C level by "faking"...
FORCE_SYMBOL $172C BombsInPile
FORCE_SYMBOL $1731 dropManFlag
COMMENT $1737 a=amount of bombs in pile
FORCE_SYMBOL $1737 BombsInPile
COMMENT $173A check if levle done...
FORCE_SYMBOL $173A CurLvlBombs
COMMENT $173D if not, do nothing here and continue
FORCE_SYMBOL $173F BonusRndFlag
COMMENT $1742 Prepare variables for next level
FORCE_SYMBOL $1742 level_init
COMMENT $1745 Indicate that the menu has to be shown
FORCE_SYMBOL $1745 PrintMenuFlag
FORCE_SYMBOL $1748 BonusRndFlag
COMMENT $174D Set flag for bonus round music
FORCE_NO_SYMBOL $174D
FORCE_SYMBOL $174F Vec_Music_Flag
FORCE_SYMBOL $1752 do_menu
COMMENT_LINE $1756 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1756 do_menu: This procedure is responsible to write the menus of the game. It
COMMENT_LINE $1756 displays different lines based on the game's mode. At the end, it
COMMENT_LINE $1756 deletes all the menu lines...
COMMENT_LINE $1756 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $1756 indication flag: 1=print, 0=no print
FORCE_SYMBOL $1756 PrintMenuFlag
COMMENT $1759 If "print" menu, goto wait for inputs
COMMENT $175B Otherwise, return to main loop.
FORCE_SYMBOL $175C Intensity_7F
COMMENT $175F Check bonus round flag,
FORCE_SYMBOL $175F BonusRndFlag
COMMENT $1762 if cleared, regular menu to be printed
COMMENT $1764 otherwise, bonus menu to be printed
FORCE_SYMBOL $1764 bonus_str
FORCE_SYMBOL $1767 Print_Str_xy
COMMENT $176A return to caller
COMMENT $176B print the regular menu line
FORCE_SYMBOL $176B menu_ram_str
COMMENT $176E Call enhenced print routine
COMMENT_LINE $1770 Moveto_d_7F start
FORCE_SYMBOL $1770 VIA_port_a
FORCE_NO_SYMBOL $1772
FORCE_SYMBOL $1774 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1776
FORCE_SYMBOL $1778 VIA_cntl
FORCE_SYMBOL $177B VIA_port_b
FORCE_SYMBOL $177D VIA_shift_reg
FORCE_SYMBOL $177F VIA_port_b
FORCE_SYMBOL $1781 VIA_port_a
FORCE_SYMBOL $1783 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1785
FORCE_SYMBOL $1788 VIA_int_flags
FORCE_SYMBOL $178C VIA_port_a
COMMENT_LINE $178E U=String pointer to first $81
FORCE_NO_SYMBOL $178E
COMMENT $1790 Clear D/A output
FORCE_SYMBOL $1790 VIA_port_a
COMMENT $1792 Shift reg mode = 110, T1 PB7 enabled
FORCE_SYMBOL $1792 VIA_aux_cntl
FORCE_SYMBOL $1794 Char_Tablef1
FORCE_NO_SYMBOL $1797
COMMENT $1799 enable mux, set y to 0 disable ramp
FORCE_SYMBOL $1799 VIA_port_b
COMMENT $179B disable RAMP, disable mux
FORCE_SYMBOL $179B VIA_port_b
COMMENT $179F Get text width
FORCE_SYMBOL $179F Vec_Text_Width
FORCE_SYMBOL $17A3 Vec_Text_Width_neg
COMMENT $17A9 Send it to the D/A
FORCE_SYMBOL $17A9 VIA_port_a
FORCE_NO_SYMBOL $17AB
COMMENT $17AD enable RAMP, disable mux
FORCE_SYMBOL $17AD VIA_port_b
COMMENT $17AF delay needed for drawing
COMMENT $17B4 Get bitmap from chargen table
COMMENT $17B6 Save in shift register
FORCE_SYMBOL $17B6 VIA_shift_reg
COMMENT $17B8 Get next character
COMMENT $17BA Go back if not terminator
COMMENT_LINE $17BC A=$81
COMMENT $17BC disable RAMP, disable mux
FORCE_SYMBOL $17BC VIA_port_b
FORCE_SYMBOL $17BE Char_Tableb1
COMMENT $17C1 Get text height
FORCE_SYMBOL $17C1 Vec_Text_Height
COMMENT_LINE $17C4 now move down
COMMENT $17C4 store 'height' to dac (y)
FORCE_SYMBOL $17C4 VIA_port_a
COMMENT $17C6 disable RAMP, enable mux
FORCE_SYMBOL $17C6 VIA_port_b
COMMENT $17C8 disable RAMP, disable mux
FORCE_SYMBOL $17C8 VIA_port_b
COMMENT $17CA zero dac
FORCE_SYMBOL $17CA VIA_port_a
COMMENT_LINE $17CC now only y set, x to zero
FORCE_NO_SYMBOL $17CC
COMMENT $17CE enable RAMP, disable mux
FORCE_SYMBOL $17CE VIA_port_b
COMMENT $17D2 Get first character
COMMENT $17D4 enable RAMP, enable mux
FORCE_SYMBOL $17D4 VIA_port_b
COMMENT_LINE $17D6 tricky, cutting y off while
COMMENT_LINE $17D6 integrating, saves one switch of mux
COMMENT_LINE $17D6 still B=$81
COMMENT $17D6 disable RAMP, disable mux
FORCE_SYMBOL $17D6 VIA_port_b
FORCE_SYMBOL $17D8 Vec_Text_Width_neg
COMMENT_LINE $17DB now finnished moving down
COMMENT $17DB negative x speed
FORCE_SYMBOL $17DB VIA_port_a
FORCE_NO_SYMBOL $17DD
COMMENT $17DF enable RAMP, disable mux
FORCE_SYMBOL $17DF VIA_port_b
COMMENT $17E1 delay needed for drawing
COMMENT $17E6 Get bitmap from chargen table
COMMENT $17E8 Save in shift register
FORCE_SYMBOL $17E8 VIA_shift_reg
COMMENT $17EA Get next character
COMMENT $17EC Go back if not terminator
COMMENT_LINE $17EE A=$81
COMMENT $17EE disable RAMP, disable mux
FORCE_SYMBOL $17EE VIA_port_b
FORCE_SYMBOL $17F0 Char_Tablef2
COMMENT $17F3 Get text height
FORCE_SYMBOL $17F3 Vec_Text_Height
COMMENT_LINE $17F6 now move down
COMMENT $17F6 store 'height' to dac (y)
FORCE_SYMBOL $17F6 VIA_port_a
COMMENT $17F8 disable RAMP, enable mux
FORCE_SYMBOL $17F8 VIA_port_b
COMMENT $17FA disable RAMP, disable mux
FORCE_SYMBOL $17FA VIA_port_b
COMMENT $17FC zero dac
FORCE_SYMBOL $17FC VIA_port_a
COMMENT_LINE $17FE now only y set, x to zero
FORCE_NO_SYMBOL $17FE
COMMENT $1800 enable RAMP, disable mux
FORCE_SYMBOL $1800 VIA_port_b
COMMENT_LINE $1802 here we move down
COMMENT $1806 enable RAMP, enable mux
FORCE_SYMBOL $1806 VIA_port_b
COMMENT_LINE $1808 tricky, cutting y off while
COMMENT_LINE $1808 integrating, saves one switch of mux
COMMENT_LINE $1808 still b=$81
COMMENT $1808 disable RAMP, disable mux
FORCE_SYMBOL $1808 VIA_port_b
FORCE_SYMBOL $180A Vec_Text_Width
COMMENT_LINE $180D now finnished moving down
COMMENT $180D Send it to the D/A
FORCE_SYMBOL $180D VIA_port_a
FORCE_NO_SYMBOL $180F
COMMENT $1811 enable RAMP, disable mux
FORCE_SYMBOL $1811 VIA_port_b
COMMENT $1813 delay needed for drawing
COMMENT $1818 Get bitmap from chargen table
COMMENT $181A Save in shift register
FORCE_SYMBOL $181A VIA_shift_reg
COMMENT $181C Get next character
COMMENT $181E Go back if not terminator
COMMENT_LINE $1820 A=$81
COMMENT $1820 disable RAMP, disable mux
FORCE_SYMBOL $1820 VIA_port_b
FORCE_SYMBOL $1822 Char_Tableb2
COMMENT $1825 Get text height
FORCE_SYMBOL $1825 Vec_Text_Height
COMMENT_LINE $1828 now move down
COMMENT $1828 store 'height' to dac (y)
FORCE_SYMBOL $1828 VIA_port_a
COMMENT $182A disable RAMP, enable mux
FORCE_SYMBOL $182A VIA_port_b
COMMENT $182C disable RAMP, disable mux
FORCE_SYMBOL $182C VIA_port_b
COMMENT $182E zero dac
FORCE_SYMBOL $182E VIA_port_a
COMMENT_LINE $1830 now only y set, x to zero
FORCE_NO_SYMBOL $1830
COMMENT $1832 enable RAMP, disable mux
FORCE_SYMBOL $1832 VIA_port_b
COMMENT $1836 Get first character
COMMENT $1838 enable RAMP, enable mux
FORCE_SYMBOL $1838 VIA_port_b
COMMENT_LINE $183A tricky, cutting y off while
COMMENT_LINE $183A integrating, saves one switch of mux
COMMENT_LINE $183A still B=$81
COMMENT $183A disable RAMP, disable mux
FORCE_SYMBOL $183A VIA_port_b
FORCE_SYMBOL $183C Vec_Text_Width_neg
COMMENT_LINE $183F now finnished moving down
COMMENT $183F negative x speed
FORCE_SYMBOL $183F VIA_port_a
FORCE_NO_SYMBOL $1841
COMMENT $1843 enable RAMP, disable mux
FORCE_SYMBOL $1843 VIA_port_b
COMMENT $1845 delay needed for drawing
COMMENT $184A Get bitmap from chargen table
COMMENT $184C Save in shift register
FORCE_SYMBOL $184C VIA_shift_reg
COMMENT $184E Get next character
COMMENT $1850 Go back if not terminator
COMMENT_LINE $1852 A=$81
COMMENT $1852 disable RAMP, disable mux
FORCE_SYMBOL $1852 VIA_port_b
FORCE_SYMBOL $1854 Char_Tablef3
COMMENT $1857 Get text height
FORCE_SYMBOL $1857 Vec_Text_Height
COMMENT_LINE $185A now move down
COMMENT $185A store 'height' to dac (y)
FORCE_SYMBOL $185A VIA_port_a
COMMENT $185C disable RAMP, enable mux
FORCE_SYMBOL $185C VIA_port_b
COMMENT $185E disable RAMP, disable mux
FORCE_SYMBOL $185E VIA_port_b
COMMENT $1860 zero dac
FORCE_SYMBOL $1860 VIA_port_a
COMMENT_LINE $1862 now only y set, x to zero
FORCE_NO_SYMBOL $1862
COMMENT $1864 enable RAMP, disable mux
FORCE_SYMBOL $1864 VIA_port_b
COMMENT_LINE $1866 here we move down
COMMENT $186A enable RAMP, enable mux
FORCE_SYMBOL $186A VIA_port_b
COMMENT_LINE $186C tricky, cutting y off while
COMMENT_LINE $186C integrating, saves one switch of mux
COMMENT_LINE $186C still b=$81
COMMENT $186C disable RAMP, disable mux
FORCE_SYMBOL $186C VIA_port_b
FORCE_SYMBOL $186E Vec_Text_Width
COMMENT_LINE $1871 now finnished moving down
COMMENT $1871 Send it to the D/A
FORCE_SYMBOL $1871 VIA_port_a
FORCE_NO_SYMBOL $1873
COMMENT $1875 enable RAMP, disable mux
FORCE_SYMBOL $1875 VIA_port_b
COMMENT $1877 delay needed for drawing
COMMENT $187C Get bitmap from chargen table
COMMENT $187E Save in shift register
FORCE_SYMBOL $187E VIA_shift_reg
COMMENT $1880 Get next character
COMMENT $1882 Go back if not terminator
COMMENT_LINE $1884 A=$81
COMMENT $1884 disable RAMP, disable mux
FORCE_SYMBOL $1884 VIA_port_b
FORCE_SYMBOL $1886 Char_Tableb3
COMMENT $1889 Get text height
FORCE_SYMBOL $1889 Vec_Text_Height
COMMENT_LINE $188C now move down
COMMENT $188C store 'height' to dac (y)
FORCE_SYMBOL $188C VIA_port_a
COMMENT $188E disable RAMP, enable mux
FORCE_SYMBOL $188E VIA_port_b
COMMENT $1890 disable RAMP, disable mux
FORCE_SYMBOL $1890 VIA_port_b
COMMENT $1892 zero dac
FORCE_SYMBOL $1892 VIA_port_a
COMMENT_LINE $1894 now only y set, x to zero
FORCE_NO_SYMBOL $1894
COMMENT $1896 enable RAMP, disable mux
FORCE_SYMBOL $1896 VIA_port_b
COMMENT $189A Get first character
COMMENT $189C enable RAMP, enable mux
FORCE_SYMBOL $189C VIA_port_b
COMMENT_LINE $189E tricky, cutting y off while
COMMENT_LINE $189E integrating, saves one switch of mux
COMMENT_LINE $189E still B=$81
COMMENT $189E disable RAMP, disable mux
FORCE_SYMBOL $189E VIA_port_b
FORCE_SYMBOL $18A0 Vec_Text_Width_neg
COMMENT_LINE $18A3 now finnished moving down
COMMENT $18A3 negative x speed
FORCE_SYMBOL $18A3 VIA_port_a
FORCE_NO_SYMBOL $18A5
COMMENT $18A7 enable RAMP, disable mux
FORCE_SYMBOL $18A7 VIA_port_b
COMMENT $18A9 delay needed for drawing
COMMENT $18AE Get bitmap from chargen table
COMMENT $18B0 Save in shift register
FORCE_SYMBOL $18B0 VIA_shift_reg
COMMENT $18B2 Get next character
COMMENT $18B4 Go back if not terminator
COMMENT_LINE $18B6 A=$81
COMMENT $18B6 disable RAMP, disable mux
FORCE_SYMBOL $18B6 VIA_port_b
FORCE_SYMBOL $18B8 Char_Tablef4
COMMENT $18BB Get text height
FORCE_SYMBOL $18BB Vec_Text_Height
COMMENT_LINE $18BE now move down
COMMENT $18BE store 'height' to dac (y)
FORCE_SYMBOL $18BE VIA_port_a
COMMENT $18C0 disable RAMP, enable mux
FORCE_SYMBOL $18C0 VIA_port_b
COMMENT $18C2 disable RAMP, disable mux
FORCE_SYMBOL $18C2 VIA_port_b
COMMENT $18C4 zero dac
FORCE_SYMBOL $18C4 VIA_port_a
COMMENT_LINE $18C6 now only y set, x to zero
FORCE_NO_SYMBOL $18C6
COMMENT $18C8 enable RAMP, disable mux
FORCE_SYMBOL $18C8 VIA_port_b
COMMENT_LINE $18CA here we move down
COMMENT $18CE enable RAMP, enable mux
FORCE_SYMBOL $18CE VIA_port_b
COMMENT_LINE $18D0 tricky, cutting y off while
COMMENT_LINE $18D0 integrating, saves one switch of mux
COMMENT_LINE $18D0 still b=$81
COMMENT $18D0 disable RAMP, disable mux
FORCE_SYMBOL $18D0 VIA_port_b
FORCE_SYMBOL $18D2 Vec_Text_Width
COMMENT_LINE $18D5 now finnished moving down
COMMENT $18D5 Send it to the D/A
FORCE_SYMBOL $18D5 VIA_port_a
FORCE_NO_SYMBOL $18D7
COMMENT $18D9 enable RAMP, disable mux
FORCE_SYMBOL $18D9 VIA_port_b
COMMENT $18DB delay needed for drawing
COMMENT $18E0 Get bitmap from chargen table
COMMENT $18E2 Save in shift register
FORCE_SYMBOL $18E2 VIA_shift_reg
COMMENT $18E4 Get next character
COMMENT $18E6 Go back if not terminator
COMMENT_LINE $18E8 A=$81
COMMENT $18E8 disable RAMP, disable mux
FORCE_SYMBOL $18E8 VIA_port_b
FORCE_NO_SYMBOL $18EA
COMMENT $18EC T1->PB7 enabled
FORCE_SYMBOL $18EC VIA_aux_cntl
FORCE_SYMBOL $18EE VIA_shift_reg
FORCE_NO_SYMBOL $18F0
COMMENT $18F2 /BLANK low and /ZERO low
FORCE_SYMBOL $18F2 VIA_cntl
COMMENT $18F4 return to caller
COMMENT_LINE $18F5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $18F5 prnt_lvl_menu - Responsible to print the level menus
COMMENT_LINE $18F5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $18F5 prnt_lvl_menu:
COMMENT_LINE $18F5 LDA   CurrentLvl
COMMENT_LINE $18F5 CMPA  #LVL1                     ;Check if CurrentLvl == LVL1,
COMMENT_LINE $18F5 BNE   chk_lvl2                  ;If not, check if LVL2...
COMMENT_LINE $18F5 LDU   #menu_lvl1_line1_str      ;U <- Point to menu_lvl1_line1_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #lvl1_str
COMMENT_LINE $18F5 BRA   print_lvl                 ;Proceed to end of the procedure
COMMENT_LINE $18F5 chk_lvl2:
COMMENT_LINE $18F5 CMPA  #LVL2                     ;Check if CurrentLvl == LVL2,
COMMENT_LINE $18F5 BNE   chk_lvl3                  ;If not, check if LVL3...
COMMENT_LINE $18F5 LDU   #menu_lvl2_line1_str      ;U <- Point to menu_lvl2_line1_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #lvl2_str
COMMENT_LINE $18F5 BRA   print_lvl                 ;Proceed to end of the procedure
COMMENT_LINE $18F5 chk_lvl3:
COMMENT_LINE $18F5 LDU   #menu_lvl3_line1_str      ;U <- Point to menu_lvl3_line1_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #lvl3_str
COMMENT_LINE $18F5 print_lvl:
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #menu_line2_str           ;Always print menu_line2_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 RTS
COMMENT_LINE $18F5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $18F5 prnt_explsn_menu - Responsible to print the menus after an explosion occured
COMMENT_LINE $18F5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $18F5 prnt_explsn_menu:
COMMENT_LINE $18F5 LDU   #menu_explsn_line1_str    ;U <- Point to menu_explsn_line1_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #menu_explsn_line2_str    ;U <- Point to menu_explsn_line1_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 LDU   #menu_line2_str           ;U <- Point to menu_line2_str
COMMENT_LINE $18F5 JSR   Print_Str_xy              ;Print the string pointed by U
COMMENT_LINE $18F5 RTS                                             ;Return to the caller
COMMENT_LINE $18F5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $18F5 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $18F5 ******************************************************************************
COMMENT_LINE $18F5 convert a to ASCII, assumes u -> *start of string, 42,u: MSB, 43,u: LSB
COMMENT_LINE $18F5 ******************************************************************************
COMMENT_LINE $18F9 Calculate ASCII for MSB
FORCE_NO_SYMBOL $18FD
FORCE_NO_SYMBOL $1901
FORCE_NO_SYMBOL $1903
COMMENT_LINE $1905 STA  42,u                      ;Store the MS nibble in location8 of the                                        ;current line
COMMENT $1905 Store the MS nibble in location8 of the                                        ;current line
FORCE_NO_SYMBOL $1905
COMMENT $1908 Calculate ASCII for LSB
FORCE_NO_SYMBOL $190A
FORCE_NO_SYMBOL $190C
FORCE_NO_SYMBOL $1910
FORCE_NO_SYMBOL $1912
COMMENT_LINE $1914 STA   43,u                     ;Store the LS nibble in location9 of the
COMMENT $1914 Store the LS nibble in location9 of the
FORCE_NO_SYMBOL $1914
COMMENT_LINE $1917 current line
COMMENT $1919 Return to the caller
COMMENT_LINE $191A >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $191A <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $191A *****************************************************************************
FORCE_NO_SYMBOL $191A
COMMENT $191D More than 1,000?
FORCE_NO_SYMBOL $191D
COMMENT $1923 Sub 1,000 from D,
FORCE_NO_SYMBOL $1923
COMMENT $1926 Add 1,000 to u
FORCE_NO_SYMBOL $1926
COMMENT $192A Proceed, till D < 1000
COMMENT $192C More than 100?
FORCE_NO_SYMBOL $192C
COMMENT $1932 Sub 100 from D,
FORCE_NO_SYMBOL $1932
COMMENT $1935 Add 100 to u
FORCE_NO_SYMBOL $1935
COMMENT $1939 Proceed, till d < 100
COMMENT $193B More than 9?
FORCE_NO_SYMBOL $193B
COMMENT $1941 Sub 10 from d,
FORCE_NO_SYMBOL $1941
COMMENT $1944 Add 10 to u
FORCE_NO_SYMBOL $1944
COMMENT $1947 Proceed, till d < 10
COMMENT $1949 Add the remain to u
COMMENT $194D Return to the caller
COMMENT_LINE $194E >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $194E setjoystick - Enables the Joysticks controllers. In this case, Joystick #2
COMMENT_LINE $194E is disabled.
COMMENT_LINE $194E <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $194E JOYENS
COMMENT $1951 Enable Joystick1 X doamin1
FORCE_NO_SYMBOL $1951
COMMENT $1956 Disable Joystick1 Y domain
COMMENT $1958 Disable Joystick2 X domain
COMMENT $195A Disable Joystick2 Y doamin
COMMENT $195C Return to the caller
COMMENT_LINE $195D >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $195D checkjoystick - Monitors Joystic1 movement and = the player's car postion
COMMENT_LINE $195D and speed accordingly.
COMMENT_LINE $195D <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $195D CLR   Vec_Misc_Count
FORCE_SYMBOL $195D JoyType
COMMENT $1962 Read joystick position
FORCE_SYMBOL $1962 Joy_Digital
FORCE_SYMBOL $1965 Pile1Xpos
COMMENT $1968 A <- Xpos of joystick 1
FORCE_SYMBOL $1968 Vec_Joy_1_X
FORCE_SYMBOL $1971 Joy_Analog
FORCE_SYMBOL $1974 Vec_Joy_1_X
FORCE_SYMBOL $1977 MAX_RIGHT_MOV
COMMENT $1979 IF (lower or same) goto x_done
FORCE_SYMBOL $197B MAX_LEFT_MOV
COMMENT $197D IF (lower or same) goto x_done
FORCE_SYMBOL $197F LastAnalogVal
COMMENT_LINE $1984 LDA   #MAX_RIGHT_MOV
COMMENT_LINE $1984 CMPA  Vec_Joy_1_X               ;Check if got to right limit
COMMENT_LINE $1984 BLE   chk_btns                  ;IF (lower or same) goto x_done
COMMENT_LINE $1984 LDA   #MAX_LEFT_MOV
COMMENT_LINE $1984 CMPA  Vec_Joy_1_X               ;Check if got to left limit
COMMENT_LINE $1984 BGE   chk_btns                  ;IF (lower or same) goto x_done
COMMENT_LINE $1984 LDB   Vec_Joy_1_X               ;B <- Xpos of joystick 1
COMMENT_LINE $1984 CMPB  LastAnalogVal
COMMENT_LINE $1984 BLT   rot_left
FORCE_SYMBOL $1984 PileMoveDir
FORCE_SYMBOL $1989 PileMoveDir
FORCE_SYMBOL $198C LastAnalogVal
FORCE_SYMBOL $1991 MAX_RIGHT_MOV
COMMENT $1993 Check if got to right limit
FORCE_SYMBOL $1993 Pile1Xpos
COMMENT $1996 IF (lower or same) goto x_done
FORCE_SYMBOL $1998 MOVE_PILE_SPEED
FORCE_SYMBOL $199A PileMoveDir
FORCE_SYMBOL $199F MAX_LEFT_MOV
COMMENT $19A1 Check if got to left limit
FORCE_SYMBOL $19A1 Pile1Xpos
COMMENT $19A4 IF (lower or same) goto x_done
FORCE_SYMBOL $19A6 MOVE_PILE_SPEED
FORCE_SYMBOL $19A8 PileMoveDir
FORCE_SYMBOL $19AB Pile1Xpos
FORCE_SYMBOL $19AE Pile2Xpos
FORCE_SYMBOL $19B1 Pile3Xpos
FORCE_SYMBOL $19B4 check_btns
COMMENT $19B7 Return to the caller
COMMENT_LINE $19B8 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $19B8 check_btns: Responsible for checking if a button was pressed. If so, checks
COMMENT_LINE $19B8 which button. Since only one button is used in the game and only
COMMENT_LINE $19B8 to exit a displayed menu, once button1 is pressed, the flag
COMMENT_LINE $19B8 (indicating end of the menu) is cleared.
COMMENT_LINE $19B8 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $19B8 Get Buttons status
FORCE_SYMBOL $19B8 Read_Btns
FORCE_NO_SYMBOL $19BB
FORCE_NO_SYMBOL $19BF
COMMENT $19C3 Clear menu flag
FORCE_SYMBOL $19C3 PrintMenuFlag
FORCE_SYMBOL $19C6 stop_music
COMMENT $19C9 Return to the caller
COMMENT_LINE $19CA >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $19CA game_over - End of game screen, displays the score, hiscore and a comment to
COMMENT_LINE $19CA press any key to continue...
COMMENT_LINE $19CA <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT $19CA As first step...
FORCE_SYMBOL $19CA stop_music
COMMENT $19CD X points to current score table
FORCE_SYMBOL $19CD Score_tbl
COMMENT $19D0 U points to Vectrex HiScore table
FORCE_SYMBOL $19D0 Vec_High_Score
COMMENT $19D3 Compare and update HiScore table
FORCE_SYMBOL $19D3 New_High_Score
COMMENT $19D6 Check sound flag
FORCE_SYMBOL $19D6 Vec_Music_Flag
COMMENT $19D9 if not cleared -> keep playing
COMMENT $19DB if cleared -> set it for more music
FORCE_NO_SYMBOL $19DB
COMMENT $19DD Constant playing of sound...
FORCE_SYMBOL $19DD Vec_Music_Flag
COMMENT $19E0 DP to RAM
FORCE_SYMBOL $19E0 DP_to_D8
FORCE_SYMBOL $19E3 Music3
COMMENT $19E6 Check sound parameters
FORCE_SYMBOL $19E6 Init_Music_chk
COMMENT $19E9 Screen refresh
FORCE_SYMBOL $19E9 Wait_Recal
COMMENT $19EC Play the sounds
FORCE_SYMBOL $19EC Do_Sound
COMMENT $19EF Set the intensity to $7F
FORCE_SYMBOL $19EF Intensity_7F
FORCE_SYMBOL $19F2 Reset0Ref_D0
COMMENT $19F5 Set D to the (Y,X) of the HiScore
FORCE_SYMBOL $19F5 SCORE_POS
COMMENT $19F8 U Points to the Score table
FORCE_SYMBOL $19F8 Score_tbl
COMMENT $19FB Print the HighScore on the screen
FORCE_SYMBOL $19FB Print_Str_d
FORCE_SYMBOL $19FE cheatOnFlag
COMMENT $1A03 Set D to the (Y,X) of the HiScore
FORCE_SYMBOL $1A03 HSCORE_POS
COMMENT $1A06 U Points to the HiScore table
FORCE_SYMBOL $1A06 Vec_High_Score
COMMENT $1A09 Print the HighScore on the screen
FORCE_SYMBOL $1A09 Print_Str_d
FORCE_SYMBOL $1A0C score_string
FORCE_SYMBOL $1A0F Print_Str_xy
FORCE_SYMBOL $1A12 hscore_string
FORCE_SYMBOL $1A15 Print_Str_xy
FORCE_SYMBOL $1A18 close0_string
FORCE_SYMBOL $1A1B Print_Str_xy
FORCE_SYMBOL $1A1E close1_string
FORCE_SYMBOL $1A21 Print_Str_xy
COMMENT_LINE $1A24 Check btn1
COMMENT $1A24 Get Buttons status
FORCE_SYMBOL $1A24 Read_Btns
FORCE_NO_SYMBOL $1A27
COMMENT $1A29 wait_btn
FORCE_NO_SYMBOL $1A2B
COMMENT $1A2D wait_btn
COMMENT_LINE $1A2F @ this point btn1_1 was pressed...
COMMENT $1A2F SoftReset to the system
FORCE_SYMBOL $1A2F Cold_Start
COMMENT $1A32 Return to caller
COMMENT_LINE $1A33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1A33 The following are tables of text to be displayed while the game is ongoing
COMMENT_LINE $1A33 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1CA6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1CA6 The following are Vector List table for the different sprites/letters/whatever
COMMENT_LINE $1CA6 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1CA6 no need for patterns!!!
COMMENT_LINE $1CF0 FCB 2*18,-2*18
COMMENT_LINE $1CF0 FCB 7*18,0*18
COMMENT_LINE $1CF0 FCB 2*18,2*18
COMMENT_LINE $1CF0 FCB 0*18,2*18
COMMENT_LINE $1CF0 FCB 2*18,0*18
COMMENT_LINE $1CF0 FCB 0*18,2*18
COMMENT_LINE $1CF0 FCB -2*18,0*18
COMMENT_LINE $1CF0 FCB 0*18,2*18
COMMENT_LINE $1CF0 FCB -2*18,2*18
COMMENT_LINE $1CF0 FCB -7*18,0*18
COMMENT_LINE $1CF0 FCB -2*18,-2*18
COMMENT_LINE $1CF0 FCB 0*18,-7*18
COMMENT $1D3C -10,10
COMMENT $1D3E 0,50
COMMENT $1D40 10,10
COMMENT $1D46 -19*2
COMMENT $1D4A 19*2
COMMENT_LINE $1D97 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1D97 print_vaboom -
COMMENT_LINE $1D97 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $1D97 CurLtr
FORCE_NO_SYMBOL $1D9A
COMMENT $1D9E Point to Left side of the screen
FORCE_NO_SYMBOL $1D9E
FORCE_SYMBOL $1DA1 V_Vl
FORCE_SYMBOL $1DA4 move_ltr
FORCE_SYMBOL $1DA8 draw_v
FORCE_SYMBOL $1DAB CurLtr
FORCE_NO_SYMBOL $1DAE
COMMENT $1DB2 Point to Left side of the screen
FORCE_NO_SYMBOL $1DB2
FORCE_SYMBOL $1DB5 A_Vl
FORCE_SYMBOL $1DB8 move_ltr
COMMENT_LINE $1DBC LDA   #$7F
COMMENT_LINE $1DBC STA   VIA_t1_cnt_lo
FORCE_SYMBOL $1DBC draw_a
FORCE_SYMBOL $1DBF CurLtr
FORCE_NO_SYMBOL $1DC2
COMMENT $1DC6 Point to Left side of the screen
FORCE_NO_SYMBOL $1DC6
FORCE_SYMBOL $1DC9 B_Vl
FORCE_SYMBOL $1DCC move_ltr
COMMENT_LINE $1DD0 LDA   #$7F
COMMENT_LINE $1DD0 STA   VIA_t1_cnt_lo
FORCE_SYMBOL $1DD0 draw_b
FORCE_SYMBOL $1DD3 CurLtr
FORCE_NO_SYMBOL $1DD6
COMMENT $1DDA Point to Left side of the screen
FORCE_NO_SYMBOL $1DDA
FORCE_SYMBOL $1DDD O_Vl
FORCE_SYMBOL $1DE0 move_ltr
COMMENT_LINE $1DE4 LDA   #$7F
COMMENT_LINE $1DE4 STA   VIA_t1_cnt_lo
FORCE_SYMBOL $1DE4 draw_o1
FORCE_SYMBOL $1DE7 CurLtr
FORCE_NO_SYMBOL $1DEA
COMMENT $1DEE Point to Left side of the screen
FORCE_NO_SYMBOL $1DEE
FORCE_SYMBOL $1DF1 O_Vl
FORCE_SYMBOL $1DF4 move_ltr
COMMENT_LINE $1DF8 LDA   #$7F
COMMENT_LINE $1DF8 STA   VIA_t1_cnt_lo
FORCE_SYMBOL $1DF8 draw_o2
FORCE_SYMBOL $1DFB CurLtr
FORCE_NO_SYMBOL $1DFE
COMMENT $1E02 Point to Left side of the screen
FORCE_NO_SYMBOL $1E02
FORCE_SYMBOL $1E05 M_Vl
FORCE_SYMBOL $1E08 move_ltr
COMMENT_LINE $1E0C LDA   #$7F
COMMENT_LINE $1E0C STA   VIA_t1_cnt_lo
FORCE_SYMBOL $1E0C draw_m
FORCE_SYMBOL $1E0F CurLtr
FORCE_NO_SYMBOL $1E12
COMMENT $1E16 Point to Left side of the screen
FORCE_NO_SYMBOL $1E16
FORCE_SYMBOL $1E19 i_Vl
FORCE_SYMBOL $1E1C move_ltr
FORCE_SYMBOL $1E20 draw_i
COMMENT_LINE $1E24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $1E24 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $1E24 ;;JSR   Reset0Ref_D0
COMMENT $1E24 _D0
FORCE_NO_SYMBOL $1E24
COMMENT_LINE $1E27 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1E27 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1E27 LDD   #0x0302;
COMMENT_LINE $1E27 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1E27 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1E27 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E27 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E27 LDB   #0x01;
COMMENT_LINE $1E27 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E27 LDB    #0x00CC;
COMMENT $1E27 0x0C;
FORCE_SYMBOL $1E27 VIA_cntl
FORCE_SYMBOL $1E29 V_Vl
FORCE_NO_SYMBOL $1E2C
FORCE_SYMBOL $1E2E VIA_t1_cnt_lo
COMMENT $1E30 Point to Left side of the screen
FORCE_NO_SYMBOL $1E30
COMMENT_LINE $1E33 ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1E33 Store Y in D/A register
FORCE_SYMBOL $1E33 VIA_port_a
COMMENT $1E35 Blank low, zero high?
FORCE_NO_SYMBOL $1E35
FORCE_SYMBOL $1E37 VIA_cntl
COMMENT $1E3A Enable mux
FORCE_SYMBOL $1E3A VIA_port_b
COMMENT $1E3C Clear shift regigster
FORCE_SYMBOL $1E3C VIA_shift_reg
COMMENT $1E3E Disable mux
FORCE_SYMBOL $1E3E VIA_port_b
COMMENT $1E40 Store X in D/A register
FORCE_SYMBOL $1E40 VIA_port_a
COMMENT $1E42 enable timer
FORCE_SYMBOL $1E42 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1E44
FORCE_SYMBOL $1E46 VIA_int_flags
FORCE_NO_SYMBOL $1E4A
FORCE_SYMBOL $1E4C VIA_t1_cnt_lo
COMMENT_LINE $1E4E ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1E4E
FORCE_SYMBOL $1E50 VIA_port_a
FORCE_SYMBOL $1E52 VIA_port_b
FORCE_NO_SYMBOL $1E54
FORCE_SYMBOL $1E56 VIA_port_b
FORCE_SYMBOL $1E58 VIA_port_a
FORCE_SYMBOL $1E5A VIA_shift_reg
FORCE_SYMBOL $1E5C VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1E5E
FORCE_NO_SYMBOL $1E60
FORCE_NO_SYMBOL $1E64
FORCE_SYMBOL $1E67 VIA_int_flags
FORCE_SYMBOL $1E6B VIA_shift_reg
FORCE_NO_SYMBOL $1E6F
FORCE_SYMBOL $1E72 VIA_int_flags
FORCE_SYMBOL $1E76 VIA_shift_reg
COMMENT_LINE $1E79 ;;;JSR   Reset0Ref_D0
COMMENT $1E79 _D0
FORCE_NO_SYMBOL $1E79
COMMENT_LINE $1E7C STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1E7C STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1E7C LDD   #0x0302;
COMMENT_LINE $1E7C CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1E7C STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1E7C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E7C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E7C LDB   #0x01;
COMMENT_LINE $1E7C STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1E7C LDB    #0x00CC;
COMMENT $1E7C 0x0C;
FORCE_SYMBOL $1E7C VIA_cntl
FORCE_SYMBOL $1E7E A_Vl
FORCE_NO_SYMBOL $1E81
FORCE_SYMBOL $1E83 VIA_t1_cnt_lo
COMMENT $1E85 Point to Left side of the screen
FORCE_NO_SYMBOL $1E85
COMMENT_LINE $1E88 ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1E88 Store Y in D/A register
FORCE_SYMBOL $1E88 VIA_port_a
COMMENT $1E8A Blank low, zero high?
FORCE_NO_SYMBOL $1E8A
FORCE_SYMBOL $1E8C VIA_cntl
COMMENT $1E8F Enable mux
FORCE_SYMBOL $1E8F VIA_port_b
COMMENT $1E91 Clear shift regigster
FORCE_SYMBOL $1E91 VIA_shift_reg
COMMENT $1E93 Disable mux
FORCE_SYMBOL $1E93 VIA_port_b
COMMENT $1E95 Store X in D/A register
FORCE_SYMBOL $1E95 VIA_port_a
COMMENT $1E97 enable timer
FORCE_SYMBOL $1E97 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1E99
FORCE_SYMBOL $1E9B VIA_int_flags
COMMENT_LINE $1E9F ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1E9F
FORCE_SYMBOL $1EA1 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1EA3
FORCE_SYMBOL $1EA5 VIA_port_a
FORCE_SYMBOL $1EA7 VIA_port_b
FORCE_NO_SYMBOL $1EA9
FORCE_SYMBOL $1EAB VIA_port_b
FORCE_SYMBOL $1EAD VIA_port_a
FORCE_SYMBOL $1EAF VIA_shift_reg
FORCE_SYMBOL $1EB1 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1EB3
FORCE_NO_SYMBOL $1EB5
FORCE_NO_SYMBOL $1EB9
FORCE_SYMBOL $1EBC VIA_int_flags
FORCE_SYMBOL $1EC0 VIA_shift_reg
FORCE_NO_SYMBOL $1EC4
FORCE_SYMBOL $1EC7 VIA_int_flags
FORCE_SYMBOL $1ECB VIA_shift_reg
COMMENT $1ECE _D0
FORCE_NO_SYMBOL $1ECE
COMMENT_LINE $1ED1 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1ED1 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1ED1 LDD   #0x0302;
COMMENT_LINE $1ED1 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1ED1 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1ED1 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1ED1 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1ED1 LDB   #0x01;
COMMENT_LINE $1ED1 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1ED1 LDB    #0x00CC;
COMMENT $1ED1 0x0C;
FORCE_SYMBOL $1ED1 VIA_cntl
FORCE_SYMBOL $1ED3 B_Vl
COMMENT_LINE $1ED6 ;;;JSR   Reset0Ref_D0
COMMENT_LINE $1ED6 LDA   #$7f
FORCE_NO_SYMBOL $1ED6
FORCE_SYMBOL $1ED8 VIA_t1_cnt_lo
COMMENT_LINE $1EDA LDD   #$00C0                    ;Point to Left side of the screen
COMMENT $1EDA Point to Left side of the screen
FORCE_NO_SYMBOL $1EDA
COMMENT_LINE $1EDD ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1EDD Store Y in D/A register
FORCE_SYMBOL $1EDD VIA_port_a
COMMENT $1EDF Blank low, zero high?
FORCE_NO_SYMBOL $1EDF
FORCE_SYMBOL $1EE1 VIA_cntl
COMMENT $1EE4 Enable mux
FORCE_SYMBOL $1EE4 VIA_port_b
COMMENT $1EE6 Clear shift regigster
FORCE_SYMBOL $1EE6 VIA_shift_reg
COMMENT $1EE8 Disable mux
FORCE_SYMBOL $1EE8 VIA_port_b
COMMENT $1EEA Store X in D/A register
FORCE_SYMBOL $1EEA VIA_port_a
COMMENT $1EEC enable timer
FORCE_SYMBOL $1EEC VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1EEE
FORCE_SYMBOL $1EF0 VIA_int_flags
COMMENT_LINE $1EF4 ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1EF4
FORCE_SYMBOL $1EF6 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1EF8
FORCE_SYMBOL $1EFA VIA_port_a
FORCE_SYMBOL $1EFC VIA_port_b
FORCE_NO_SYMBOL $1EFE
FORCE_SYMBOL $1F00 VIA_port_b
FORCE_SYMBOL $1F02 VIA_port_a
FORCE_SYMBOL $1F04 VIA_shift_reg
FORCE_SYMBOL $1F06 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1F08
FORCE_NO_SYMBOL $1F0A
FORCE_NO_SYMBOL $1F0E
FORCE_SYMBOL $1F11 VIA_int_flags
FORCE_SYMBOL $1F15 VIA_shift_reg
FORCE_NO_SYMBOL $1F19
FORCE_SYMBOL $1F1C VIA_int_flags
FORCE_SYMBOL $1F20 VIA_shift_reg
COMMENT $1F23 _D0
FORCE_NO_SYMBOL $1F23
COMMENT_LINE $1F26 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1F26 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1F26 LDD   #0x0302;
COMMENT_LINE $1F26 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1F26 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1F26 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F26 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F26 LDB   #0x01;
COMMENT_LINE $1F26 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F26 LDB    #0x00CC;
COMMENT $1F26 0x0C;
FORCE_SYMBOL $1F26 VIA_cntl
FORCE_SYMBOL $1F28 O_Vl
COMMENT_LINE $1F2B ;;;JSR   Reset0Ref_D0
COMMENT_LINE $1F2B LDA   #$7f
FORCE_NO_SYMBOL $1F2B
FORCE_SYMBOL $1F2D VIA_t1_cnt_lo
COMMENT_LINE $1F2F LDD   #$00EA                    ;Point to Left side of the screen
COMMENT $1F2F Point to Left side of the screen
FORCE_NO_SYMBOL $1F2F
COMMENT_LINE $1F32 ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1F32 Store Y in D/A register
FORCE_SYMBOL $1F32 VIA_port_a
COMMENT $1F34 Blank low, zero high?
FORCE_NO_SYMBOL $1F34
FORCE_SYMBOL $1F36 VIA_cntl
COMMENT $1F39 Enable mux
FORCE_SYMBOL $1F39 VIA_port_b
COMMENT $1F3B Clear shift regigster
FORCE_SYMBOL $1F3B VIA_shift_reg
COMMENT $1F3D Disable mux
FORCE_SYMBOL $1F3D VIA_port_b
COMMENT $1F3F Store X in D/A register
FORCE_SYMBOL $1F3F VIA_port_a
COMMENT $1F41 enable timer
FORCE_SYMBOL $1F41 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1F43
FORCE_SYMBOL $1F45 VIA_int_flags
COMMENT_LINE $1F49 ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1F49
FORCE_SYMBOL $1F4B VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1F4D
FORCE_SYMBOL $1F4F VIA_port_a
FORCE_SYMBOL $1F51 VIA_port_b
FORCE_NO_SYMBOL $1F53
FORCE_SYMBOL $1F55 VIA_port_b
FORCE_SYMBOL $1F57 VIA_port_a
FORCE_SYMBOL $1F59 VIA_shift_reg
FORCE_SYMBOL $1F5B VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1F5D
FORCE_NO_SYMBOL $1F5F
FORCE_NO_SYMBOL $1F63
FORCE_SYMBOL $1F66 VIA_int_flags
FORCE_SYMBOL $1F6A VIA_shift_reg
FORCE_NO_SYMBOL $1F6E
FORCE_SYMBOL $1F71 VIA_int_flags
FORCE_SYMBOL $1F75 VIA_shift_reg
COMMENT $1F78 _D0
FORCE_NO_SYMBOL $1F78
COMMENT_LINE $1F7B STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1F7B STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1F7B LDD   #0x0302;
COMMENT_LINE $1F7B CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1F7B STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1F7B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F7B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F7B LDB   #0x01;
COMMENT_LINE $1F7B STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1F7B LDB    #0x00CC;
COMMENT $1F7B 0x0C;
FORCE_SYMBOL $1F7B VIA_cntl
FORCE_SYMBOL $1F7D O_Vl
COMMENT_LINE $1F80 ;;;JSR   Reset0Ref_D0
COMMENT_LINE $1F80 LDA   #$7f
FORCE_NO_SYMBOL $1F80
FORCE_SYMBOL $1F82 VIA_t1_cnt_lo
COMMENT_LINE $1F84 LDD   #$000A                    ;Point to Left side of the screen
COMMENT $1F84 Point to Left side of the screen
FORCE_NO_SYMBOL $1F84
COMMENT_LINE $1F87 ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1F87 Store Y in D/A register
FORCE_SYMBOL $1F87 VIA_port_a
COMMENT $1F89 Blank low, zero high?
FORCE_NO_SYMBOL $1F89
FORCE_SYMBOL $1F8B VIA_cntl
COMMENT $1F8E Enable mux
FORCE_SYMBOL $1F8E VIA_port_b
COMMENT $1F90 Clear shift regigster
FORCE_SYMBOL $1F90 VIA_shift_reg
COMMENT $1F92 Disable mux
FORCE_SYMBOL $1F92 VIA_port_b
COMMENT $1F94 Store X in D/A register
FORCE_SYMBOL $1F94 VIA_port_a
COMMENT $1F96 enable timer
FORCE_SYMBOL $1F96 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1F98
FORCE_SYMBOL $1F9A VIA_int_flags
COMMENT_LINE $1F9E ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1F9E
FORCE_SYMBOL $1FA0 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1FA2
FORCE_SYMBOL $1FA4 VIA_port_a
FORCE_SYMBOL $1FA6 VIA_port_b
FORCE_NO_SYMBOL $1FA8
FORCE_SYMBOL $1FAA VIA_port_b
FORCE_SYMBOL $1FAC VIA_port_a
FORCE_SYMBOL $1FAE VIA_shift_reg
FORCE_SYMBOL $1FB0 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1FB2
FORCE_NO_SYMBOL $1FB4
FORCE_NO_SYMBOL $1FB8
FORCE_SYMBOL $1FBB VIA_int_flags
FORCE_SYMBOL $1FBF VIA_shift_reg
FORCE_NO_SYMBOL $1FC3
FORCE_SYMBOL $1FC6 VIA_int_flags
FORCE_SYMBOL $1FCA VIA_shift_reg
COMMENT $1FCD _D0
FORCE_NO_SYMBOL $1FCD
COMMENT_LINE $1FD0 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $1FD0 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $1FD0 LDD   #0x0302;
COMMENT_LINE $1FD0 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $1FD0 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $1FD0 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1FD0 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1FD0 LDB   #0x01;
COMMENT_LINE $1FD0 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $1FD0 LDB    #0x00CC;
COMMENT $1FD0 0x0C;
FORCE_SYMBOL $1FD0 VIA_cntl
COMMENT_LINE $1FD2 ;;;JSR   Reset0Ref_D0
FORCE_SYMBOL $1FD2 M_Vl
COMMENT_LINE $1FD5 LDA   #$7f
FORCE_NO_SYMBOL $1FD5
FORCE_SYMBOL $1FD7 VIA_t1_cnt_lo
COMMENT_LINE $1FD9 LDD   #$002A                    ;Point to Left side of the screen
COMMENT $1FD9 Point to Left side of the screen
FORCE_NO_SYMBOL $1FD9
COMMENT_LINE $1FDC ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $1FDC Store Y in D/A register
FORCE_SYMBOL $1FDC VIA_port_a
COMMENT $1FDE Blank low, zero high?
FORCE_NO_SYMBOL $1FDE
FORCE_SYMBOL $1FE0 VIA_cntl
COMMENT $1FE3 Enable mux
FORCE_SYMBOL $1FE3 VIA_port_b
COMMENT $1FE5 Clear shift regigster
FORCE_SYMBOL $1FE5 VIA_shift_reg
COMMENT $1FE7 Disable mux
FORCE_SYMBOL $1FE7 VIA_port_b
COMMENT $1FE9 Store X in D/A register
FORCE_SYMBOL $1FE9 VIA_port_a
COMMENT $1FEB enable timer
FORCE_SYMBOL $1FEB VIA_t1_cnt_hi
FORCE_NO_SYMBOL $1FED
FORCE_SYMBOL $1FEF VIA_int_flags
COMMENT_LINE $1FF3 ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $1FF3
FORCE_SYMBOL $1FF5 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $1FF7
FORCE_SYMBOL $1FF9 VIA_port_a
FORCE_SYMBOL $1FFB VIA_port_b
FORCE_NO_SYMBOL $1FFD
FORCE_SYMBOL $1FFF VIA_port_b
FORCE_SYMBOL $2001 VIA_port_a
FORCE_SYMBOL $2003 VIA_shift_reg
FORCE_SYMBOL $2005 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $2007
FORCE_NO_SYMBOL $2009
FORCE_NO_SYMBOL $200D
FORCE_SYMBOL $2010 VIA_int_flags
FORCE_SYMBOL $2014 VIA_shift_reg
FORCE_NO_SYMBOL $2018
FORCE_SYMBOL $201B VIA_int_flags
FORCE_SYMBOL $201F VIA_shift_reg
COMMENT $2022 _D0
FORCE_NO_SYMBOL $2022
COMMENT_LINE $2025 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $2025 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $2025 LDD   #0x0302;
COMMENT_LINE $2025 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $2025 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $2025 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2025 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2025 LDB   #0x01;
COMMENT_LINE $2025 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2025 LDB    #0x00CC;
COMMENT $2025 0x0C;
FORCE_SYMBOL $2025 VIA_cntl
FORCE_SYMBOL $2027 i_Vl
COMMENT_LINE $202A ;;JSR   Reset0Ref_D0
COMMENT_LINE $202A LDA   #$7f
FORCE_NO_SYMBOL $202A
FORCE_SYMBOL $202C VIA_t1_cnt_lo
COMMENT_LINE $202E LDD   #$004A                    ;Point to Left side of the screen
COMMENT $202E Point to Left side of the screen
FORCE_NO_SYMBOL $202E
COMMENT_LINE $2031 ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $2031 Store Y in D/A register
FORCE_SYMBOL $2031 VIA_port_a
COMMENT $2033 Blank low, zero high?
FORCE_NO_SYMBOL $2033
FORCE_SYMBOL $2035 VIA_cntl
COMMENT $2038 Enable mux
FORCE_SYMBOL $2038 VIA_port_b
COMMENT $203A Clear shift regigster
FORCE_SYMBOL $203A VIA_shift_reg
COMMENT $203C Disable mux
FORCE_SYMBOL $203C VIA_port_b
COMMENT $203E Store X in D/A register
FORCE_SYMBOL $203E VIA_port_a
COMMENT $2040 enable timer
FORCE_SYMBOL $2040 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $2042
FORCE_SYMBOL $2044 VIA_int_flags
COMMENT_LINE $2048 JSR   Draw_VLp                 ;Actually draw the letter
FORCE_NO_SYMBOL $2048
FORCE_SYMBOL $204A VIA_t1_cnt_lo
FORCE_NO_SYMBOL $204C
FORCE_SYMBOL $204E VIA_port_a
FORCE_SYMBOL $2050 VIA_port_b
FORCE_NO_SYMBOL $2052
FORCE_SYMBOL $2054 VIA_port_b
FORCE_SYMBOL $2056 VIA_port_a
FORCE_SYMBOL $2058 VIA_shift_reg
FORCE_SYMBOL $205A VIA_t1_cnt_hi
FORCE_NO_SYMBOL $205C
FORCE_NO_SYMBOL $205E
FORCE_NO_SYMBOL $2062
FORCE_SYMBOL $2065 VIA_int_flags
FORCE_SYMBOL $2069 VIA_shift_reg
FORCE_NO_SYMBOL $206D
FORCE_SYMBOL $2070 VIA_int_flags
FORCE_SYMBOL $2074 VIA_shift_reg
COMMENT_LINE $2077 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $2077 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $2077 A -> final Ypos
COMMENT_LINE $2077 B -> final Xpos
COMMENT_LINE $2077 X -> ptr to letter vector list
FORCE_SYMBOL $2077 LtrParamSet
FORCE_NO_SYMBOL $207C
FORCE_SYMBOL $207E TmpYpos
FORCE_SYMBOL $2081 TmpXpos
FORCE_SYMBOL $2084 TmpScale
FORCE_SYMBOL $2087 LtrParamSet
COMMENT_LINE $208A ;;JSR   Reset0Ref_D0
FORCE_NO_SYMBOL $208A
COMMENT $208E pretty for optimizing to use a makro :-)
FORCE_NO_SYMBOL $208E
COMMENT_LINE $2091 STB   <VIA_cntl         ;0x0C;
COMMENT_LINE $2091 STA   <VIA_shift_reg    ;0x0A;
COMMENT_LINE $2091 LDD   #0x0302;
COMMENT_LINE $2091 CLR   <VIA_port_a       ;0x01;
COMMENT_LINE $2091 STA   <VIA_port_b       ;0x00;
COMMENT_LINE $2091 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2091 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2091 LDB   #0x01;
COMMENT_LINE $2091 STB   <VIA_port_b       ;0x00;
COMMENT_LINE $2091 LDB    #0x00CC;
COMMENT $2091 0x0C;
FORCE_SYMBOL $2091 VIA_cntl
FORCE_NO_SYMBOL $2093
FORCE_SYMBOL $2095 VIA_t1_cnt_lo
FORCE_SYMBOL $2097 TmpYpos
COMMENT_LINE $209A ;;JSR   Moveto_d                       ;Send the beam to (X,Y)pos
COMMENT $209A Store Y in D/A register
FORCE_SYMBOL $209A VIA_port_a
COMMENT $209C Blank low, zero high?
FORCE_NO_SYMBOL $209C
FORCE_SYMBOL $209E VIA_cntl
COMMENT $20A1 Enable mux
FORCE_SYMBOL $20A1 VIA_port_b
COMMENT $20A3 Clear shift regigster
FORCE_SYMBOL $20A3 VIA_shift_reg
COMMENT $20A5 Disable mux
FORCE_SYMBOL $20A5 VIA_port_b
COMMENT $20A7 Store X in D/A register
FORCE_SYMBOL $20A7 VIA_port_a
COMMENT $20A9 enable timer
FORCE_SYMBOL $20A9 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $20AB
FORCE_SYMBOL $20AD VIA_int_flags
FORCE_SYMBOL $20B1 TmpScale
FORCE_SYMBOL $20B4 VIA_t1_cnt_lo
COMMENT_LINE $20B6 ;;JSR   Draw_VLp                       ;Actually draw the letter
FORCE_NO_SYMBOL $20B6
FORCE_SYMBOL $20B8 VIA_port_a
FORCE_SYMBOL $20BA VIA_port_b
FORCE_NO_SYMBOL $20BC
FORCE_SYMBOL $20BE VIA_port_b
FORCE_SYMBOL $20C0 VIA_port_a
FORCE_SYMBOL $20C2 VIA_shift_reg
FORCE_SYMBOL $20C4 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $20C6
FORCE_NO_SYMBOL $20C8
FORCE_NO_SYMBOL $20CC
FORCE_SYMBOL $20CF VIA_int_flags
FORCE_SYMBOL $20D3 VIA_shift_reg
FORCE_NO_SYMBOL $20D7
FORCE_SYMBOL $20DA VIA_int_flags
FORCE_SYMBOL $20DE VIA_shift_reg
FORCE_SYMBOL $20E0 TmpYpos
FORCE_NO_SYMBOL $20E3
COMMENT $20E7 point to next letter
FORCE_SYMBOL $20E7 CurLtr
FORCE_SYMBOL $20EA LtrParamSet
FORCE_SYMBOL $20EE TmpYpos
FORCE_NO_SYMBOL $20F1
FORCE_SYMBOL $20F3 TmpYpos
FORCE_SYMBOL $20F6 TmpScale
FORCE_NO_SYMBOL $20F9
FORCE_SYMBOL $20FB TmpScale
COMMENT_LINE $20FF >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $20FF <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
COMMENT_LINE $21CE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COMMENT_LINE $21CE YM MUSIC related routines/data.
COMMENT_LINE $21CE This section is simply copy/paste from Chris Salomon's YM sound program that
COMMENT_LINE $21CE converts YM sounds to vectrex.
COMMENT_LINE $21CE The music original name is MLOVER
COMMENT_LINE $21CE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FORCE_SYMBOL $21CE ym_data_current
FORCE_NO_SYMBOL $21D3
FORCE_SYMBOL $21D6 ym_data_current
FORCE_SYMBOL $21DA current_register
FORCE_SYMBOL $21DD ym_data_start
FORCE_SYMBOL $21E0 get_current_byte
FORCE_SYMBOL $21E3 current_register
COMMENT_LINE $21E6 A PSG reg
COMMENT_LINE $21E6 B data
FORCE_SYMBOL $21E6 Sound_Byte
FORCE_SYMBOL $21E9 STRUCTURE_LENGTH
FORCE_SYMBOL $21EB current_register
FORCE_SYMBOL $21EE current_register
FORCE_NO_SYMBOL $21F1
COMMENT_LINE $21F6 no we must look at the bits
COMMENT_LINE $21F6 a will be our bit register
COMMENT_LINE $21F6 ;;;;;;;;;;;;;;;;;; GET_BIT START
FORCE_SYMBOL $21F6 BIT_POSITION
COMMENT_LINE $21FA load a new byte
FORCE_SYMBOL $21FA BYTE_POSITION
FORCE_SYMBOL $21FE CURRENT_BYTE
FORCE_SYMBOL $2200 BYTE_POSITION
FORCE_NO_SYMBOL $2202
FORCE_SYMBOL $2204 BIT_POSITION
COMMENT_LINE $2206 bit position correct here
COMMENT_LINE $2206 remember we use one bit now!
FORCE_SYMBOL $2206 BIT_POSITION
COMMENT_LINE $2208 is the bit at the current position set?
FORCE_SYMBOL $2208 CURRENT_BYTE
COMMENT_LINE $220A ;;;;;;;;;;;;;;;;;; GET_BIT END
COMMENT_LINE $220A zero flag show bit
COMMENT_LINE $220A A is 1 or zero
COMMENT_LINE $220E must be zero
COMMENT_LINE $220E 1 is allways only 8 bit...
FORCE_SYMBOL $2210 calc_bits
FORCE_SYMBOL $2213 calc_coder
FORCE_SYMBOL $2216 calc_coder
COMMENT $2219 increase used bits
FORCE_SYMBOL $2219 calc_bits
COMMENT_LINE $221C ;;;;;;;;;;; GET_BIT_START
FORCE_SYMBOL $221C BIT_POSITION
COMMENT_LINE $2220 load a new byte
FORCE_SYMBOL $2220 BYTE_POSITION
FORCE_SYMBOL $2224 CURRENT_BYTE
FORCE_SYMBOL $2226 BYTE_POSITION
FORCE_NO_SYMBOL $2228
FORCE_SYMBOL $222A BIT_POSITION
COMMENT_LINE $222C bit position correct here
COMMENT_LINE $222C remember we use one bit now!
FORCE_SYMBOL $222C BIT_POSITION
COMMENT_LINE $222E is the bit at the current position set?
FORCE_SYMBOL $222E CURRENT_BYTE
COMMENT $2230 and if non zero
FORCE_SYMBOL $2232 calc_coder
COMMENT_LINE $2235 ;;;;;;;;;;; GET_BIT_END
COMMENT_LINE $2235 we load one complete = of mapper index, bits, coder, map-value
FORCE_SYMBOL $2235 CURRENT_RLE_MAPPER
FORCE_NO_SYMBOL $2237
COMMENT $2239 load bits from map
FORCE_NO_SYMBOL $2239
COMMENT $223B map out phrases
FORCE_NO_SYMBOL $223B
COMMENT $223D neu
FORCE_SYMBOL $223D calc_bits
COMMENT $2240 neu
COMMENT $2244 load coder-byte
FORCE_NO_SYMBOL $2244
FORCE_SYMBOL $2246 calc_coder
COMMENT $224B load current mapped byte!
FORCE_NO_SYMBOL $224B
COMMENT_LINE $224D in b is the byte value we sought
COMMENT_LINE $224D test for phrase
COMMENT $224D load bits from map
FORCE_NO_SYMBOL $224D
COMMENT $224F map in phrases only
FORCE_NO_SYMBOL $224F
COMMENT_LINE $2253 if phrase, than in b the count of the phrase used
FORCE_SYMBOL $2253 CURRENT_PHRASE_START
FORCE_SYMBOL $225F CURRENT_IS_PHRASE
FORCE_SYMBOL $2261 CURRENT_PHRASE_BYTE
FORCE_SYMBOL $2265 CURRENT_IS_PHRASE
FORCE_SYMBOL $2269 CURRENT_UNPACKED_BYTE
COMMENT_LINE $226B U pointer to data structure
COMMENT_LINE $226B A number of register
COMMENT_LINE $226B do we have a byte that is valid?
FORCE_SYMBOL $226B CURRENT_RLE_COUNTER
COMMENT_LINE $226F yep... use current byte
FORCE_SYMBOL $226F CURRENT_IS_PHRASE
COMMENT $2273 length of phrase
FORCE_SYMBOL $2275 CURRENT_PHRASE_BYTE
COMMENT $2277 this is the current byte
FORCE_SYMBOL $2279 CURRENT_UNPACKED_BYTE
FORCE_SYMBOL $227B CURRENT_PHRASE_BYTE
FORCE_SYMBOL $227D CURRENT_PHRASE_BYTE
FORCE_SYMBOL $2281 CURRENT_PHRASE_BYTE
FORCE_SYMBOL $2283 CURRENT_RLE_COUNTER
FORCE_NO_SYMBOL $2285
FORCE_SYMBOL $2288 CURRENT_RLE_COUNTER
FORCE_SYMBOL $228A CURRENT_UNPACKED_BYTE
COMMENT_LINE $228D non single byte here... must decode
COMMENT_LINE $228D first we look for how many bits the RLE counter spreads
COMMENT_LINE $228D we already encountered a 1
COMMENT_LINE $228D and we allways use + 2
FORCE_NO_SYMBOL $228D
FORCE_SYMBOL $228F temp
FORCE_SYMBOL $2292 temp
COMMENT_LINE $2295 ;;;;;;;;;;;;;;;;;; GET_BIT START
FORCE_SYMBOL $2295 BIT_POSITION
COMMENT_LINE $2299 load a new byte
FORCE_SYMBOL $2299 BYTE_POSITION
FORCE_SYMBOL $229D CURRENT_BYTE
FORCE_SYMBOL $229F BYTE_POSITION
FORCE_NO_SYMBOL $22A1
FORCE_SYMBOL $22A3 BIT_POSITION
COMMENT_LINE $22A5 bit position correct here
COMMENT_LINE $22A5 remember we use one bit now!
FORCE_SYMBOL $22A5 BIT_POSITION
COMMENT_LINE $22A7 is the bit at the current position set?
FORCE_SYMBOL $22A7 CURRENT_BYTE
COMMENT_LINE $22A9 ;;;;;;;;;;;;;;;;;; GET_BIT END
COMMENT_LINE $22AB in temp is the # of bits for the counter
COMMENT_LINE $22AB the following '#temp' bits represent the RLE count
COMMENT_LINE $22AB lsb first
COMMENT $22AB we start at 1, since zero is an
COMMENT_LINE $22AC 'own' 'subroutine',
COMMENT_LINE $22AC which doesn't manipulate the temps
COMMENT $22AC bit counter for shifting
FORCE_SYMBOL $22AC temp2
COMMENT $22AF bit counter for shifting
FORCE_SYMBOL $22AF temp3
COMMENT_LINE $22B2 ;;;;;;;;;;;;;;;;;; GET_BIT START
FORCE_SYMBOL $22B2 BIT_POSITION
COMMENT_LINE $22B6 load a new byte
FORCE_SYMBOL $22B6 BYTE_POSITION
FORCE_SYMBOL $22BA CURRENT_BYTE
FORCE_SYMBOL $22BC BYTE_POSITION
FORCE_NO_SYMBOL $22BE
FORCE_SYMBOL $22C0 BIT_POSITION
COMMENT_LINE $22C2 bit position correct here
COMMENT_LINE $22C2 remember we use one bit now!
FORCE_SYMBOL $22C2 BIT_POSITION
COMMENT_LINE $22C4 is the bit at the current position set?
FORCE_SYMBOL $22C4 CURRENT_BYTE
COMMENT_LINE $22C8 return 1
FORCE_NO_SYMBOL $22C8
COMMENT_LINE $22CA ;;;;;;;;;;;;;;;;;; GET_BIT END
COMMENT_LINE $22CA in D now one bit at the right position for the RLE counter
COMMENT_LINE $22CC the first 3 (here only the first one) rounds
COMMENT_LINE $22CC we need not check for temp, since it is at least 3...
COMMENT_LINE $22CC ;;;;;;;;;;;;;;;;;; GET_BIT START
FORCE_SYMBOL $22CC BIT_POSITION
COMMENT_LINE $22D0 load a new byte
FORCE_SYMBOL $22D0 BYTE_POSITION
FORCE_SYMBOL $22D4 CURRENT_BYTE
FORCE_SYMBOL $22D6 BYTE_POSITION
FORCE_NO_SYMBOL $22D8
FORCE_SYMBOL $22DA BIT_POSITION
COMMENT_LINE $22DC bit position correct here
COMMENT_LINE $22DC remember we use one bit now!
FORCE_SYMBOL $22DC BIT_POSITION
COMMENT_LINE $22DE is the bit at the current position set?
FORCE_SYMBOL $22DE CURRENT_BYTE
COMMENT_LINE $22E2 return 1
FORCE_NO_SYMBOL $22E2
COMMENT $22E5 LSR A
COMMENT $22E6 LSR B
COMMENT $22E7 if no carry, than exit
COMMENT $22E9 otherwise underflow from A to 7bit of B
FORCE_NO_SYMBOL $22E9
FORCE_SYMBOL $22EB temp3
COMMENT_LINE $22F0 in D now one bit at the right position for the RLE counter
FORCE_SYMBOL $22F0 CURRENT_RLE_COUNTER
FORCE_SYMBOL $22F2 CURRENT_RLE_COUNTER
FORCE_SYMBOL $22F4 temp2
FORCE_SYMBOL $22F7 temp2
FORCE_SYMBOL $22FA temp3
FORCE_SYMBOL $22FD temp
COMMENT_LINE $2302 now the current counter should be set
COMMENT_LINE $2302 we still need to dechifer the following byte...
FORCE_SYMBOL $2305 ym_data_start
FORCE_SYMBOL $230B Clear_x_d
FORCE_NO_SYMBOL $2311
FORCE_SYMBOL $2313 ym_data_len
FORCE_SYMBOL $2316 ym_data_current
FORCE_NO_SYMBOL $2319
FORCE_SYMBOL $231E CURRENT_RLE_MAPPER
FORCE_SYMBOL $2324 CURRENT_PHRASE_START
FORCE_SYMBOL $232A BYTE_POSITION
FORCE_SYMBOL $232D STRUCTURE_LENGTH
FORCE_SYMBOL $2332 ym_name
COMMENT_LINE $2336 ***************************************************************************
COMMENT_LINE $2336 END entry_point
COMMENT_LINE $2336 ***************************************************************************
COMMENT $2336 vbl_len
COMMENT_LINE $2338 translation data
COMMENT_LINE $2338 DB $13; bytes follow
COMMENT_LINE $2338 bits used, code, real 'byte'
COMMENT $2338 400
COMMENT $233B 450
COMMENT $233E 200
COMMENT $2341 200
COMMENT $2344 95
COMMENT $2347 100
COMMENT $234A 150
COMMENT $234D 6
COMMENT $2350 2
COMMENT $2353 2
COMMENT $2356 1
COMMENT $2359 1
COMMENT $235C 1
COMMENT $235F 1
COMMENT $2362 1
COMMENT $2365 1
COMMENT $2368 1
COMMENT $236B 1
COMMENT $236E 1
COMMENT_LINE $2371 phrases follow
COMMENT $2371 450
COMMENT $237C 95
COMMENT_LINE $2382 data follows
COMMENT $2418 flushed
COMMENT_LINE $241E translation data
COMMENT_LINE $241E DB $0A; bytes follow
COMMENT_LINE $241E bits used, code, real 'byte'
COMMENT $241E 450
COMMENT $2421 543
COMMENT $2424 150
COMMENT $2427 260
COMMENT $242A 95
COMMENT $242D 100
COMMENT $2430 6
COMMENT $2433 9
COMMENT $2436 10
COMMENT $2439 4
COMMENT_LINE $243C phrases follow
COMMENT $243C 450
COMMENT $2447 95
COMMENT $244D 260
COMMENT_LINE $245B data follows
COMMENT_LINE $24DD flushed
COMMENT_LINE $24DD translation data
COMMENT_LINE $24DD DB $2A; bytes follow
COMMENT_LINE $24DD bits used, code, real 'byte'
COMMENT $24DD 138
COMMENT $24E0 144
COMMENT $24E3 288
COMMENT $24E6 312
COMMENT $24E9 80
COMMENT $24EC 80
COMMENT $24EF 81
COMMENT $24F2 40
COMMENT $24F5 40
COMMENT $24F8 54
COMMENT $24FB 58
COMMENT $24FE 90
COMMENT $2501 96
COMMENT $2504 9
COMMENT $2507 13
COMMENT $250A 28
COMMENT $250D 32
COMMENT $2510 5
COMMENT $2513 8
COMMENT $2516 3
COMMENT $2519 4
COMMENT $251C 6
COMMENT $251F 6
COMMENT $2522 8
COMMENT $2525 9
COMMENT $2528 2
COMMENT $252B 2
COMMENT $252E 2
COMMENT $2531 2
COMMENT $2534 2
COMMENT $2537 4
COMMENT $253A 5
COMMENT $253D 1
COMMENT $2540 1
COMMENT $2543 1
COMMENT $2546 1
COMMENT $2549 1
COMMENT $254C 1
COMMENT $254F 1
COMMENT $2552 2
COMMENT $2555 2
COMMENT $2558 1
COMMENT_LINE $255B phrases follow
COMMENT $255B 312
COMMENT $2562 288
COMMENT $2569 144
COMMENT $2570 80
COMMENT $2575 96
COMMENT $257C 90
COMMENT $2583 80
COMMENT $258E 40
COMMENT $2599 40
COMMENT_LINE $25A4 data follows
COMMENT $266C flushed
COMMENT_LINE $266E translation data
COMMENT_LINE $266E DB $03; bytes follow
COMMENT_LINE $266E bits used, code, real 'byte'
COMMENT $266E 1291
COMMENT $2671 312
COMMENT $2674 2
COMMENT_LINE $2677 phrases follow
COMMENT $2677 312
COMMENT_LINE $267E data follows
COMMENT $267E flushed
COMMENT_LINE $2684 translation data
COMMENT_LINE $2684 DB $2D; bytes follow
COMMENT_LINE $2684 bits used, code, real 'byte'
COMMENT $2684 924
COMMENT $2687 48
COMMENT $268A 78
COMMENT $268D 140
COMMENT $2690 24
COMMENT $2693 42
COMMENT $2696 45
COMMENT $2699 48
COMMENT $269C 70
COMMENT $269F 16
COMMENT $26A2 16
COMMENT $26A5 16
COMMENT $26A8 24
COMMENT $26AB 40
COMMENT $26AE 5
COMMENT $26B1 8
COMMENT $26B4 16
COMMENT $26B7 24
COMMENT $26BA 3
COMMENT $26BD 6
COMMENT $26C0 6
COMMENT $26C3 8
COMMENT $26C6 8
COMMENT $26C9 2
COMMENT $26CC 2
COMMENT $26CF 2
COMMENT $26D2 2
COMMENT $26D5 2
COMMENT $26D8 2
COMMENT $26DB 3
COMMENT $26DE 3
COMMENT $26E1 4
COMMENT $26E4 1
COMMENT $26E7 1
COMMENT $26EA 1
COMMENT $26ED 2
COMMENT $26F0 2
COMMENT $26F3 2
COMMENT $26F6 2
COMMENT $26F9 1
COMMENT $26FC 1
COMMENT $26FF 1
COMMENT $2702 1
COMMENT $2705 1
COMMENT $2708 1
COMMENT_LINE $270B phrases follow
COMMENT $270B 924
COMMENT $2712 70
COMMENT $271A 78
COMMENT $2721 48
COMMENT $272A 40
COMMENT $2735 24
COMMENT $273C 24
COMMENT $2743 24
COMMENT_LINE $274A data follows
COMMENT $27CC flushed
COMMENT_LINE $27D1 translation data
COMMENT_LINE $27D1 DB $05; bytes follow
COMMENT_LINE $27D1 bits used, code, real 'byte'
COMMENT $27D1 918
COMMENT $27D4 349
COMMENT $27D7 260
COMMENT $27DA 76
COMMENT $27DD 2
COMMENT_LINE $27E0 phrases follow
COMMENT $27E0 918
COMMENT_LINE $27E7 data follows
COMMENT $27FB flushed
COMMENT_LINE $27FE translation data
COMMENT_LINE $27FE DB $01; bytes follow
COMMENT_LINE $27FE bits used, code, real 'byte'
COMMENT $27FE 1599
COMMENT_LINE $2801 phrases follow
COMMENT_LINE $2801 data follows
COMMENT $2801 flushed
COMMENT_LINE $2804 translation data
COMMENT_LINE $2804 DB $06; bytes follow
COMMENT_LINE $2804 bits used, code, real 'byte'
COMMENT $2804 410
COMMENT $2807 430
COMMENT $280A 200
COMMENT $280D 210
COMMENT $2810 239
COMMENT $2813 110
COMMENT_LINE $2816 phrases follow
COMMENT_LINE $2816 data follows
COMMENT_LINE $2898 flushed
COMMENT_LINE $2898 translation data
COMMENT_LINE $2898 DB $08; bytes follow
COMMENT_LINE $2898 bits used, code, real 'byte'
COMMENT $2898 1185
COMMENT $289B 350
COMMENT $289E 50
COMMENT $28A1 8
COMMENT $28A4 14
COMMENT $28A7 14
COMMENT $28AA 4
COMMENT $28AD 4
COMMENT_LINE $28B0 phrases follow
COMMENT $28B0 1185
COMMENT $28C0 350
COMMENT $28C6 50
COMMENT_LINE $28D1 data follows
COMMENT $2903 flushed
COMMENT_LINE $290C translation data
COMMENT_LINE $290C DB $0E; bytes follow
COMMENT_LINE $290C bits used, code, real 'byte'
COMMENT $290C 320
COMMENT $290F 400
COMMENT $2912 720
COMMENT $2915 150
COMMENT $2918 3
COMMENT $291B 4
COMMENT $291E 5
COMMENT $2921 6
COMMENT $2924 6
COMMENT $2927 3
COMMENT $292A 3
COMMENT $292D 3
COMMENT $2930 3
COMMENT $2933 3
COMMENT_LINE $2936 phrases follow
COMMENT $2936 720
COMMENT $2941 400
COMMENT $294C 150
COMMENT_LINE $2957 data follows
COMMENT $2989 flushed
COMMENT_LINE $2990 translation data
COMMENT_LINE $2990 DB $10; bytes follow
COMMENT_LINE $2990 bits used, code, real 'byte'
COMMENT $2990 959
COMMENT $2993 120
COMMENT $2996 330
COMMENT $2999 80
COMMENT $299C 24
COMMENT $299F 24
COMMENT $29A2 24
COMMENT $29A5 30
COMMENT $29A8 9
COMMENT $29AB 4
COMMENT $29AE 6
COMMENT $29B1 6
COMMENT $29B4 9
COMMENT $29B7 9
COMMENT $29BA 2
COMMENT $29BD 2
COMMENT_LINE $29C0 phrases follow
COMMENT $29C0 330
COMMENT $29D0 80
COMMENT $29D6 120
COMMENT $29E1 30
COMMENT $29E7 24
COMMENT_LINE $29EC data follows
COMMENT $2A1E flushed
COMMENT_LINE $2A20 This data does not appear in binary output!
RANGE $0000-$2A64 DP $D0
RANGE $0000-$0002 DB_DATA 2
RANGE $0002-$000A CHAR_DATA 8
RANGE $000A-$000B DB_DATA 1
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$000F DW_DATA 1
RANGE $000F-$0011 DW_DATA 1
RANGE $0011-$0018 CHAR_DATA 7
RANGE $0018-$001A DB_DATA 2
RANGE $001A-$001D CODE
RANGE $001D-$002D DB_DATA 16
RANGE $002D-$003D DB_DATA 16
RANGE $003D-$004D DB_DATA 16
RANGE $004D-$005D DB_DATA 16
RANGE $005D-$006D DB_DATA 16
RANGE $006D-$007D DB_DATA 16
RANGE $007D-$008D DB_DATA 16
RANGE $008D-$009D DB_DATA 16
RANGE $009D-$00AD DB_DATA 16
RANGE $00AD-$00BD DB_DATA 16
RANGE $00BD-$00CD DB_DATA 16
RANGE $00CD-$00DD DB_DATA 16
RANGE $00DD-$00ED DB_DATA 16
RANGE $00ED-$00FD DB_DATA 16
RANGE $00FD-$010D DB_DATA 16
RANGE $010D-$0CC5 CODE
RANGE $0CC5-$0CCA DB_DATA 5
RANGE $0CCA-$0CCF DB_DATA 5
RANGE $0CCF-$0CD4 DB_DATA 5
RANGE $0CD4-$0CD9 DB_DATA 5
RANGE $0CD9-$0CDE DB_DATA 5
RANGE $0CDE-$0CE3 DB_DATA 5
RANGE $0CE3-$0CE8 DB_DATA 5
RANGE $0CE8-$0CED DB_DATA 5
RANGE $0CED-$0CF2 DB_DATA 5
RANGE $0CF2-$0CF7 DB_DATA 5
RANGE $0CF7-$0CFC DB_DATA 5
RANGE $0CFC-$0D01 DB_DATA 5
RANGE $0D01-$0D06 DB_DATA 5
RANGE $0D06-$0D0B DB_DATA 5
RANGE $0D0B-$0D10 DB_DATA 5
RANGE $0D10-$0D15 DB_DATA 5
RANGE $0D15-$0D1A DB_DATA 5
RANGE $0D1A-$0D1F DB_DATA 5
RANGE $0D1F-$0D24 DB_DATA 5
RANGE $0D24-$0D29 DB_DATA 5
RANGE $0D29-$0D2E DB_DATA 5
RANGE $0D2E-$153A CODE
RANGE $153A-$153E DB_DATA 4
RANGE $153E-$1542 DB_DATA 4
RANGE $1542-$1546 DB_DATA 4
RANGE $1546-$154A DB_DATA 4
RANGE $154A-$154E DB_DATA 4
RANGE $154E-$1552 DB_DATA 4
RANGE $1552-$1556 DB_DATA 4
RANGE $1556-$155A DB_DATA 4
RANGE $155A-$155E DB_DATA 4
RANGE $155E-$1562 DB_DATA 4
RANGE $1562-$16E6 CODE
RANGE $16E6-$16E7 DB_DATA 1
RANGE $16E7-$16E8 DB_DATA 1
RANGE $16E8-$16E9 DB_DATA 1
RANGE $16E9-$16EA DB_DATA 1
RANGE $16EA-$16EB DB_DATA 1
RANGE $16EB-$16EC DB_DATA 1
RANGE $16EC-$16ED DB_DATA 1
RANGE $16ED-$16EE DB_DATA 1
RANGE $16EE-$16EF DB_DATA 1
RANGE $16EF-$16F0 DB_DATA 1
RANGE $16F0-$16F1 DB_DATA 1
RANGE $16F1-$16F2 DB_DATA 1
RANGE $16F2-$16F3 DB_DATA 1
RANGE $16F3-$16F4 DB_DATA 1
RANGE $16F4-$16F5 DB_DATA 1
RANGE $16F5-$16F6 DB_DATA 1
RANGE $16F6-$16F7 DB_DATA 1
RANGE $16F7-$16F8 DB_DATA 1
RANGE $16F8-$16F9 DB_DATA 1
RANGE $16F9-$16FA DB_DATA 1
RANGE $16FA-$16FB DB_DATA 1
RANGE $16FB-$16FC DB_DATA 1
RANGE $16FC-$16FD DB_DATA 1
RANGE $16FD-$16FE DB_DATA 1
RANGE $16FE-$16FF DB_DATA 1
RANGE $16FF-$1700 DB_DATA 1
RANGE $1700-$1701 DB_DATA 1
RANGE $1701-$1702 DB_DATA 1
RANGE $1702-$1703 DB_DATA 1
RANGE $1703-$1704 DB_DATA 1
RANGE $1704-$1705 DB_DATA 1
RANGE $1705-$1706 DB_DATA 1
RANGE $1706-$1707 DB_DATA 1
RANGE $1707-$1708 DB_DATA 1
RANGE $1708-$1709 DB_DATA 1
RANGE $1709-$170A DB_DATA 1
RANGE $170A-$170B DB_DATA 1
RANGE $170B-$170C DB_DATA 1
RANGE $170C-$170D DB_DATA 1
RANGE $170D-$1A33 CODE
RANGE $1A33-$1A63 DB_DATA 48
RANGE $1A63-$1A70 DB_DATA 13
RANGE $1A70-$1A7D DB_DATA 13
RANGE $1A7D-$1A8A DB_DATA 13
RANGE $1A8A-$1A97 DB_DATA 13
RANGE $1A97-$1AA4 DB_DATA 13
RANGE $1AA4-$1AB1 DB_DATA 13
RANGE $1AB1-$1ABE DB_DATA 13
RANGE $1ABE-$1ACB DB_DATA 13
RANGE $1ACB-$1AD8 DB_DATA 13
RANGE $1AD8-$1AE5 DB_DATA 13
RANGE $1AE5-$1AF2 DB_DATA 13
RANGE $1AF2-$1AFF DB_DATA 13
RANGE $1AFF-$1B0C DB_DATA 13
RANGE $1B0C-$1B19 DB_DATA 13
RANGE $1B19-$1B26 DB_DATA 13
RANGE $1B26-$1B33 DB_DATA 13
RANGE $1B33-$1B40 DB_DATA 13
RANGE $1B40-$1B4D DB_DATA 13
RANGE $1B4D-$1B5A DB_DATA 13
RANGE $1B5A-$1B67 DB_DATA 13
RANGE $1B67-$1B74 DB_DATA 13
RANGE $1B74-$1B97 DB_DATA 35
RANGE $1B97-$1BBA DB_DATA 35
RANGE $1BBA-$1BE8 DB_DATA 46
RANGE $1BE8-$1BF6 DB_DATA 14
RANGE $1BF6-$1C10 DB_DATA 26
RANGE $1C10-$1C3F DB_DATA 47
RANGE $1C3F-$1C67 DB_DATA 40
RANGE $1C67-$1C6F DB_DATA 8
RANGE $1C6F-$1C7A DB_DATA 11
RANGE $1C7A-$1C87 DB_DATA 13
RANGE $1C87-$1CA6 DB_DATA 31
RANGE $1CA6-$1CA7 DB_DATA 1
RANGE $1CA7-$1CA9 DB_DATA 2
RANGE $1CA9-$1CAB DB_DATA 2
RANGE $1CAB-$1CAD DB_DATA 2
RANGE $1CAD-$1CAF DB_DATA 2
RANGE $1CAF-$1CB1 DB_DATA 2
RANGE $1CB1-$1CB3 DB_DATA 2
RANGE $1CB3-$1CB5 DB_DATA 2
RANGE $1CB5-$1CB7 DB_DATA 2
RANGE $1CB7-$1CB9 DB_DATA 2
RANGE $1CB9-$1CBB DB_DATA 2
RANGE $1CBB-$1CBD DB_DATA 2
RANGE $1CBD-$1CBF DB_DATA 2
RANGE $1CBF-$1CC1 DB_DATA 2
RANGE $1CC1-$1CC3 DB_DATA 2
RANGE $1CC3-$1CC5 DB_DATA 2
RANGE $1CC5-$1CC7 DB_DATA 2
RANGE $1CC7-$1CC9 DB_DATA 2
RANGE $1CC9-$1CCB DB_DATA 2
RANGE $1CCB-$1CCD DB_DATA 2
RANGE $1CCD-$1CCF DB_DATA 2
RANGE $1CCF-$1CD1 DB_DATA 2
RANGE $1CD1-$1CD3 DB_DATA 2
RANGE $1CD3-$1CD5 DB_DATA 2
RANGE $1CD5-$1CD7 DB_DATA 2
RANGE $1CD7-$1CD8 DB_DATA 1
RANGE $1CD8-$1CDA DB_DATA 2
RANGE $1CDA-$1CDC DB_DATA 2
RANGE $1CDC-$1CDE DB_DATA 2
RANGE $1CDE-$1CE0 DB_DATA 2
RANGE $1CE0-$1CE2 DB_DATA 2
RANGE $1CE2-$1CE4 DB_DATA 2
RANGE $1CE4-$1CE6 DB_DATA 2
RANGE $1CE6-$1CE8 DB_DATA 2
RANGE $1CE8-$1CEA DB_DATA 2
RANGE $1CEA-$1CEC DB_DATA 2
RANGE $1CEC-$1CEE DB_DATA 2
RANGE $1CEE-$1CF0 DB_DATA 2
RANGE $1CF0-$1CF1 DB_DATA 1
RANGE $1CF1-$1CF3 DB_DATA 2
RANGE $1CF3-$1CF5 DB_DATA 2
RANGE $1CF5-$1CF7 DB_DATA 2
RANGE $1CF7-$1CF9 DB_DATA 2
RANGE $1CF9-$1CFB DB_DATA 2
RANGE $1CFB-$1CFD DB_DATA 2
RANGE $1CFD-$1CFF DB_DATA 2
RANGE $1CFF-$1D01 DB_DATA 2
RANGE $1D01-$1D03 DB_DATA 2
RANGE $1D03-$1D05 DB_DATA 2
RANGE $1D05-$1D06 DB_DATA 1
RANGE $1D06-$1D08 DB_DATA 2
RANGE $1D08-$1D0A DB_DATA 2
RANGE $1D0A-$1D0C DB_DATA 2
RANGE $1D0C-$1D0E DB_DATA 2
RANGE $1D0E-$1D10 DB_DATA 2
RANGE $1D10-$1D12 DB_DATA 2
RANGE $1D12-$1D14 DB_DATA 2
RANGE $1D14-$1D16 DB_DATA 2
RANGE $1D16-$1D18 DB_DATA 2
RANGE $1D18-$1D1A DB_DATA 2
RANGE $1D1A-$1D1B DB_DATA 1
RANGE $1D1B-$1D1D DB_DATA 2
RANGE $1D1D-$1D1F DB_DATA 2
RANGE $1D1F-$1D21 DB_DATA 2
RANGE $1D21-$1D23 DB_DATA 2
RANGE $1D23-$1D25 DB_DATA 2
RANGE $1D25-$1D27 DB_DATA 2
RANGE $1D27-$1D29 DB_DATA 2
RANGE $1D29-$1D2B DB_DATA 2
RANGE $1D2B-$1D2D DB_DATA 2
RANGE $1D2D-$1D2F DB_DATA 2
RANGE $1D2F-$1D31 DB_DATA 2
RANGE $1D31-$1D33 DB_DATA 2
RANGE $1D33-$1D34 DB_DATA 1
RANGE $1D34-$1D36 DB_DATA 2
RANGE $1D36-$1D38 DB_DATA 2
RANGE $1D38-$1D3A DB_DATA 2
RANGE $1D3A-$1D3C DB_DATA 2
RANGE $1D3C-$1D3E DB_DATA 2
RANGE $1D3E-$1D40 DB_DATA 2
RANGE $1D40-$1D42 DB_DATA 2
RANGE $1D42-$1D44 DB_DATA 2
RANGE $1D44-$1D46 DB_DATA 2
RANGE $1D46-$1D48 DB_DATA 2
RANGE $1D48-$1D4A DB_DATA 2
RANGE $1D4A-$1D4C DB_DATA 2
RANGE $1D4C-$1D4D DB_DATA 1
RANGE $1D4D-$1D4F DB_DATA 2
RANGE $1D4F-$1D51 DB_DATA 2
RANGE $1D51-$1D53 DB_DATA 2
RANGE $1D53-$1D55 DB_DATA 2
RANGE $1D55-$1D57 DB_DATA 2
RANGE $1D57-$1D59 DB_DATA 2
RANGE $1D59-$1D5B DB_DATA 2
RANGE $1D5B-$1D5D DB_DATA 2
RANGE $1D5D-$1D5E DB_DATA 1
RANGE $1D5E-$1D60 DB_DATA 2
RANGE $1D60-$1D62 DB_DATA 2
RANGE $1D62-$1D64 DB_DATA 2
RANGE $1D64-$1D66 DB_DATA 2
RANGE $1D66-$1D67 DB_DATA 1
RANGE $1D67-$1D69 DB_DATA 2
RANGE $1D69-$1D6B DB_DATA 2
RANGE $1D6B-$1D6D DB_DATA 2
RANGE $1D6D-$1D6F DB_DATA 2
RANGE $1D6F-$1D71 DB_DATA 2
RANGE $1D71-$1D73 DB_DATA 2
RANGE $1D73-$1D75 DB_DATA 2
RANGE $1D75-$1D77 DB_DATA 2
RANGE $1D77-$1D79 DB_DATA 2
RANGE $1D79-$1D7B DB_DATA 2
RANGE $1D7B-$1D7D DB_DATA 2
RANGE $1D7D-$1D7F DB_DATA 2
RANGE $1D7F-$1D81 DB_DATA 2
RANGE $1D81-$1D83 DB_DATA 2
RANGE $1D83-$1D85 DB_DATA 2
RANGE $1D85-$1D87 DB_DATA 2
RANGE $1D87-$1D89 DB_DATA 2
RANGE $1D89-$1D8B DB_DATA 2
RANGE $1D8B-$1D8D DB_DATA 2
RANGE $1D8D-$1D8F DB_DATA 2
RANGE $1D8F-$1D91 DB_DATA 2
RANGE $1D91-$1D93 DB_DATA 2
RANGE $1D93-$1D95 DB_DATA 2
RANGE $1D95-$1D97 DB_DATA 2
RANGE $1D97-$20FF CODE
RANGE $20FF-$2102 DB_DATA 3
RANGE $2102-$2105 DB_DATA 3
RANGE $2105-$2108 DB_DATA 3
RANGE $2108-$210B DB_DATA 3
RANGE $210B-$210E DB_DATA 3
RANGE $210E-$2111 DB_DATA 3
RANGE $2111-$2114 DB_DATA 3
RANGE $2114-$2117 DB_DATA 3
RANGE $2117-$211A DB_DATA 3
RANGE $211A-$211D DB_DATA 3
RANGE $211D-$2120 DB_DATA 3
RANGE $2120-$2123 DB_DATA 3
RANGE $2123-$2126 DB_DATA 3
RANGE $2126-$2127 DB_DATA 1
RANGE $2127-$212A DB_DATA 3
RANGE $212A-$212D DB_DATA 3
RANGE $212D-$2130 DB_DATA 3
RANGE $2130-$2133 DB_DATA 3
RANGE $2133-$2136 DB_DATA 3
RANGE $2136-$2139 DB_DATA 3
RANGE $2139-$213C DB_DATA 3
RANGE $213C-$213F DB_DATA 3
RANGE $213F-$2140 DB_DATA 1
RANGE $2140-$2143 DB_DATA 3
RANGE $2143-$2146 DB_DATA 3
RANGE $2146-$2149 DB_DATA 3
RANGE $2149-$214C DB_DATA 3
RANGE $214C-$214F DB_DATA 3
RANGE $214F-$2152 DB_DATA 3
RANGE $2152-$2155 DB_DATA 3
RANGE $2155-$2158 DB_DATA 3
RANGE $2158-$215B DB_DATA 3
RANGE $215B-$215E DB_DATA 3
RANGE $215E-$2161 DB_DATA 3
RANGE $2161-$2164 DB_DATA 3
RANGE $2164-$2167 DB_DATA 3
RANGE $2167-$216A DB_DATA 3
RANGE $216A-$216D DB_DATA 3
RANGE $216D-$2170 DB_DATA 3
RANGE $2170-$2171 DB_DATA 1
RANGE $2171-$2174 DB_DATA 3
RANGE $2174-$2177 DB_DATA 3
RANGE $2177-$217A DB_DATA 3
RANGE $217A-$217D DB_DATA 3
RANGE $217D-$2180 DB_DATA 3
RANGE $2180-$2183 DB_DATA 3
RANGE $2183-$2186 DB_DATA 3
RANGE $2186-$2189 DB_DATA 3
RANGE $2189-$218C DB_DATA 3
RANGE $218C-$218D DB_DATA 1
RANGE $218D-$2190 DB_DATA 3
RANGE $2190-$2193 DB_DATA 3
RANGE $2193-$2196 DB_DATA 3
RANGE $2196-$2199 DB_DATA 3
RANGE $2199-$219C DB_DATA 3
RANGE $219C-$219F DB_DATA 3
RANGE $219F-$21A2 DB_DATA 3
RANGE $21A2-$21A5 DB_DATA 3
RANGE $21A5-$21A8 DB_DATA 3
RANGE $21A8-$21AB DB_DATA 3
RANGE $21AB-$21AE DB_DATA 3
RANGE $21AE-$21B1 DB_DATA 3
RANGE $21B1-$21B2 DB_DATA 1
RANGE $21B2-$21B5 DB_DATA 3
RANGE $21B5-$21B8 DB_DATA 3
RANGE $21B8-$21BB DB_DATA 3
RANGE $21BB-$21BE DB_DATA 3
RANGE $21BE-$21C1 DB_DATA 3
RANGE $21C1-$21C4 DB_DATA 3
RANGE $21C4-$21C7 DB_DATA 3
RANGE $21C7-$21CA DB_DATA 3
RANGE $21CA-$21CD DB_DATA 3
RANGE $21CD-$21CE DB_DATA 1
RANGE $21CE-$2336 CODE
RANGE $2336-$2338 DW_DATA 1
RANGE $2338-$233B DB_DATA 3
RANGE $233B-$233E DB_DATA 3
RANGE $233E-$2341 DB_DATA 3
RANGE $2341-$2344 DB_DATA 3
RANGE $2344-$2347 DB_DATA 3
RANGE $2347-$234A DB_DATA 3
RANGE $234A-$234D DB_DATA 3
RANGE $234D-$2350 DB_DATA 3
RANGE $2350-$2353 DB_DATA 3
RANGE $2353-$2356 DB_DATA 3
RANGE $2356-$2359 DB_DATA 3
RANGE $2359-$235C DB_DATA 3
RANGE $235C-$235F DB_DATA 3
RANGE $235F-$2362 DB_DATA 3
RANGE $2362-$2365 DB_DATA 3
RANGE $2365-$2368 DB_DATA 3
RANGE $2368-$236B DB_DATA 3
RANGE $236B-$236E DB_DATA 3
RANGE $236E-$2371 DB_DATA 3
RANGE $2371-$237C DB_DATA 11
RANGE $237C-$2382 DB_DATA 6
RANGE $2382-$238C DB_DATA 10
RANGE $238C-$2396 DB_DATA 10
RANGE $2396-$23A0 DB_DATA 10
RANGE $23A0-$23AA DB_DATA 10
RANGE $23AA-$23B4 DB_DATA 10
RANGE $23B4-$23BE DB_DATA 10
RANGE $23BE-$23C8 DB_DATA 10
RANGE $23C8-$23D2 DB_DATA 10
RANGE $23D2-$23DC DB_DATA 10
RANGE $23DC-$23E6 DB_DATA 10
RANGE $23E6-$23F0 DB_DATA 10
RANGE $23F0-$23FA DB_DATA 10
RANGE $23FA-$2404 DB_DATA 10
RANGE $2404-$240E DB_DATA 10
RANGE $240E-$2418 DB_DATA 10
RANGE $2418-$241E DB_DATA 6
RANGE $241E-$2421 DB_DATA 3
RANGE $2421-$2424 DB_DATA 3
RANGE $2424-$2427 DB_DATA 3
RANGE $2427-$242A DB_DATA 3
RANGE $242A-$242D DB_DATA 3
RANGE $242D-$2430 DB_DATA 3
RANGE $2430-$2433 DB_DATA 3
RANGE $2433-$2436 DB_DATA 3
RANGE $2436-$2439 DB_DATA 3
RANGE $2439-$243C DB_DATA 3
RANGE $243C-$2447 DB_DATA 11
RANGE $2447-$244D DB_DATA 6
RANGE $244D-$245B DB_DATA 14
RANGE $245B-$2465 DB_DATA 10
RANGE $2465-$246F DB_DATA 10
RANGE $246F-$2479 DB_DATA 10
RANGE $2479-$2483 DB_DATA 10
RANGE $2483-$248D DB_DATA 10
RANGE $248D-$2497 DB_DATA 10
RANGE $2497-$24A1 DB_DATA 10
RANGE $24A1-$24AB DB_DATA 10
RANGE $24AB-$24B5 DB_DATA 10
RANGE $24B5-$24BF DB_DATA 10
RANGE $24BF-$24C9 DB_DATA 10
RANGE $24C9-$24D3 DB_DATA 10
RANGE $24D3-$24DD DB_DATA 10
RANGE $24DD-$24E0 DB_DATA 3
RANGE $24E0-$24E3 DB_DATA 3
RANGE $24E3-$24E6 DB_DATA 3
RANGE $24E6-$24E9 DB_DATA 3
RANGE $24E9-$24EC DB_DATA 3
RANGE $24EC-$24EF DB_DATA 3
RANGE $24EF-$24F2 DB_DATA 3
RANGE $24F2-$24F5 DB_DATA 3
RANGE $24F5-$24F8 DB_DATA 3
RANGE $24F8-$24FB DB_DATA 3
RANGE $24FB-$24FE DB_DATA 3
RANGE $24FE-$2501 DB_DATA 3
RANGE $2501-$2504 DB_DATA 3
RANGE $2504-$2507 DB_DATA 3
RANGE $2507-$250A DB_DATA 3
RANGE $250A-$250D DB_DATA 3
RANGE $250D-$2510 DB_DATA 3
RANGE $2510-$2513 DB_DATA 3
RANGE $2513-$2516 DB_DATA 3
RANGE $2516-$2519 DB_DATA 3
RANGE $2519-$251C DB_DATA 3
RANGE $251C-$251F DB_DATA 3
RANGE $251F-$2522 DB_DATA 3
RANGE $2522-$2525 DB_DATA 3
RANGE $2525-$2528 DB_DATA 3
RANGE $2528-$252B DB_DATA 3
RANGE $252B-$252E DB_DATA 3
RANGE $252E-$2531 DB_DATA 3
RANGE $2531-$2534 DB_DATA 3
RANGE $2534-$2537 DB_DATA 3
RANGE $2537-$253A DB_DATA 3
RANGE $253A-$253D DB_DATA 3
RANGE $253D-$2540 DB_DATA 3
RANGE $2540-$2543 DB_DATA 3
RANGE $2543-$2546 DB_DATA 3
RANGE $2546-$2549 DB_DATA 3
RANGE $2549-$254C DB_DATA 3
RANGE $254C-$254F DB_DATA 3
RANGE $254F-$2552 DB_DATA 3
RANGE $2552-$2555 DB_DATA 3
RANGE $2555-$2558 DB_DATA 3
RANGE $2558-$255B DB_DATA 3
RANGE $255B-$2562 DB_DATA 7
RANGE $2562-$2569 DB_DATA 7
RANGE $2569-$2570 DB_DATA 7
RANGE $2570-$2575 DB_DATA 5
RANGE $2575-$257C DB_DATA 7
RANGE $257C-$2583 DB_DATA 7
RANGE $2583-$258E DB_DATA 11
RANGE $258E-$2599 DB_DATA 11
RANGE $2599-$25A4 DB_DATA 11
RANGE $25A4-$25AE DB_DATA 10
RANGE $25AE-$25B8 DB_DATA 10
RANGE $25B8-$25C2 DB_DATA 10
RANGE $25C2-$25CC DB_DATA 10
RANGE $25CC-$25D6 DB_DATA 10
RANGE $25D6-$25E0 DB_DATA 10
RANGE $25E0-$25EA DB_DATA 10
RANGE $25EA-$25F4 DB_DATA 10
RANGE $25F4-$25FE DB_DATA 10
RANGE $25FE-$2608 DB_DATA 10
RANGE $2608-$2612 DB_DATA 10
RANGE $2612-$261C DB_DATA 10
RANGE $261C-$2626 DB_DATA 10
RANGE $2626-$2630 DB_DATA 10
RANGE $2630-$263A DB_DATA 10
RANGE $263A-$2644 DB_DATA 10
RANGE $2644-$264E DB_DATA 10
RANGE $264E-$2658 DB_DATA 10
RANGE $2658-$2662 DB_DATA 10
RANGE $2662-$266C DB_DATA 10
RANGE $266C-$266E DB_DATA 2
RANGE $266E-$2671 DB_DATA 3
RANGE $2671-$2674 DB_DATA 3
RANGE $2674-$2677 DB_DATA 3
RANGE $2677-$267E DB_DATA 7
RANGE $267E-$2684 DB_DATA 6
RANGE $2684-$2687 DB_DATA 3
RANGE $2687-$268A DB_DATA 3
RANGE $268A-$268D DB_DATA 3
RANGE $268D-$2690 DB_DATA 3
RANGE $2690-$2693 DB_DATA 3
RANGE $2693-$2696 DB_DATA 3
RANGE $2696-$2699 DB_DATA 3
RANGE $2699-$269C DB_DATA 3
RANGE $269C-$269F DB_DATA 3
RANGE $269F-$26A2 DB_DATA 3
RANGE $26A2-$26A5 DB_DATA 3
RANGE $26A5-$26A8 DB_DATA 3
RANGE $26A8-$26AB DB_DATA 3
RANGE $26AB-$26AE DB_DATA 3
RANGE $26AE-$26B1 DB_DATA 3
RANGE $26B1-$26B4 DB_DATA 3
RANGE $26B4-$26B7 DB_DATA 3
RANGE $26B7-$26BA DB_DATA 3
RANGE $26BA-$26BD DB_DATA 3
RANGE $26BD-$26C0 DB_DATA 3
RANGE $26C0-$26C3 DB_DATA 3
RANGE $26C3-$26C6 DB_DATA 3
RANGE $26C6-$26C9 DB_DATA 3
RANGE $26C9-$26CC DB_DATA 3
RANGE $26CC-$26CF DB_DATA 3
RANGE $26CF-$26D2 DB_DATA 3
RANGE $26D2-$26D5 DB_DATA 3
RANGE $26D5-$26D8 DB_DATA 3
RANGE $26D8-$26DB DB_DATA 3
RANGE $26DB-$26DE DB_DATA 3
RANGE $26DE-$26E1 DB_DATA 3
RANGE $26E1-$26E4 DB_DATA 3
RANGE $26E4-$26E7 DB_DATA 3
RANGE $26E7-$26EA DB_DATA 3
RANGE $26EA-$26ED DB_DATA 3
RANGE $26ED-$26F0 DB_DATA 3
RANGE $26F0-$26F3 DB_DATA 3
RANGE $26F3-$26F6 DB_DATA 3
RANGE $26F6-$26F9 DB_DATA 3
RANGE $26F9-$26FC DB_DATA 3
RANGE $26FC-$26FF DB_DATA 3
RANGE $26FF-$2702 DB_DATA 3
RANGE $2702-$2705 DB_DATA 3
RANGE $2705-$2708 DB_DATA 3
RANGE $2708-$270B DB_DATA 3
RANGE $270B-$2712 DB_DATA 7
RANGE $2712-$271A DB_DATA 8
RANGE $271A-$2721 DB_DATA 7
RANGE $2721-$272A DB_DATA 9
RANGE $272A-$2735 DB_DATA 11
RANGE $2735-$273C DB_DATA 7
RANGE $273C-$2743 DB_DATA 7
RANGE $2743-$274A DB_DATA 7
RANGE $274A-$2754 DB_DATA 10
RANGE $2754-$275E DB_DATA 10
RANGE $275E-$2768 DB_DATA 10
RANGE $2768-$2772 DB_DATA 10
RANGE $2772-$277C DB_DATA 10
RANGE $277C-$2786 DB_DATA 10
RANGE $2786-$2790 DB_DATA 10
RANGE $2790-$279A DB_DATA 10
RANGE $279A-$27A4 DB_DATA 10
RANGE $27A4-$27AE DB_DATA 10
RANGE $27AE-$27B8 DB_DATA 10
RANGE $27B8-$27C2 DB_DATA 10
RANGE $27C2-$27CC DB_DATA 10
RANGE $27CC-$27D1 DB_DATA 5
RANGE $27D1-$27D4 DB_DATA 3
RANGE $27D4-$27D7 DB_DATA 3
RANGE $27D7-$27DA DB_DATA 3
RANGE $27DA-$27DD DB_DATA 3
RANGE $27DD-$27E0 DB_DATA 3
RANGE $27E0-$27E7 DB_DATA 7
RANGE $27E7-$27F1 DB_DATA 10
RANGE $27F1-$27FB DB_DATA 10
RANGE $27FB-$27FE DB_DATA 3
RANGE $27FE-$2801 DB_DATA 3
RANGE $2801-$2804 DB_DATA 3
RANGE $2804-$2807 DB_DATA 3
RANGE $2807-$280A DB_DATA 3
RANGE $280A-$280D DB_DATA 3
RANGE $280D-$2810 DB_DATA 3
RANGE $2810-$2813 DB_DATA 3
RANGE $2813-$2816 DB_DATA 3
RANGE $2816-$2820 DB_DATA 10
RANGE $2820-$282A DB_DATA 10
RANGE $282A-$2834 DB_DATA 10
RANGE $2834-$283E DB_DATA 10
RANGE $283E-$2848 DB_DATA 10
RANGE $2848-$2852 DB_DATA 10
RANGE $2852-$285C DB_DATA 10
RANGE $285C-$2866 DB_DATA 10
RANGE $2866-$2870 DB_DATA 10
RANGE $2870-$287A DB_DATA 10
RANGE $287A-$2884 DB_DATA 10
RANGE $2884-$288E DB_DATA 10
RANGE $288E-$2898 DB_DATA 10
RANGE $2898-$289B DB_DATA 3
RANGE $289B-$289E DB_DATA 3
RANGE $289E-$28A1 DB_DATA 3
RANGE $28A1-$28A4 DB_DATA 3
RANGE $28A4-$28A7 DB_DATA 3
RANGE $28A7-$28AA DB_DATA 3
RANGE $28AA-$28AD DB_DATA 3
RANGE $28AD-$28B0 DB_DATA 3
RANGE $28B0-$28C0 DB_DATA 16
RANGE $28C0-$28C6 DB_DATA 6
RANGE $28C6-$28D1 DB_DATA 11
RANGE $28D1-$28DB DB_DATA 10
RANGE $28DB-$28E5 DB_DATA 10
RANGE $28E5-$28EF DB_DATA 10
RANGE $28EF-$28F9 DB_DATA 10
RANGE $28F9-$2903 DB_DATA 10
RANGE $2903-$290C DB_DATA 9
RANGE $290C-$290F DB_DATA 3
RANGE $290F-$2912 DB_DATA 3
RANGE $2912-$2915 DB_DATA 3
RANGE $2915-$2918 DB_DATA 3
RANGE $2918-$291B DB_DATA 3
RANGE $291B-$291E DB_DATA 3
RANGE $291E-$2921 DB_DATA 3
RANGE $2921-$2924 DB_DATA 3
RANGE $2924-$2927 DB_DATA 3
RANGE $2927-$292A DB_DATA 3
RANGE $292A-$292D DB_DATA 3
RANGE $292D-$2930 DB_DATA 3
RANGE $2930-$2933 DB_DATA 3
RANGE $2933-$2936 DB_DATA 3
RANGE $2936-$2941 DB_DATA 11
RANGE $2941-$294C DB_DATA 11
RANGE $294C-$2957 DB_DATA 11
RANGE $2957-$2961 DB_DATA 10
RANGE $2961-$296B DB_DATA 10
RANGE $296B-$2975 DB_DATA 10
RANGE $2975-$297F DB_DATA 10
RANGE $297F-$2989 DB_DATA 10
RANGE $2989-$2990 DB_DATA 7
RANGE $2990-$2993 DB_DATA 3
RANGE $2993-$2996 DB_DATA 3
RANGE $2996-$2999 DB_DATA 3
RANGE $2999-$299C DB_DATA 3
RANGE $299C-$299F DB_DATA 3
RANGE $299F-$29A2 DB_DATA 3
RANGE $29A2-$29A5 DB_DATA 3
RANGE $29A5-$29A8 DB_DATA 3
RANGE $29A8-$29AB DB_DATA 3
RANGE $29AB-$29AE DB_DATA 3
RANGE $29AE-$29B1 DB_DATA 3
RANGE $29B1-$29B4 DB_DATA 3
RANGE $29B4-$29B7 DB_DATA 3
RANGE $29B7-$29BA DB_DATA 3
RANGE $29BA-$29BD DB_DATA 3
RANGE $29BD-$29C0 DB_DATA 3
RANGE $29C0-$29D0 DB_DATA 16
RANGE $29D0-$29D6 DB_DATA 6
RANGE $29D6-$29E1 DB_DATA 11
RANGE $29E1-$29E7 DB_DATA 6
RANGE $29E7-$29EC DB_DATA 5
RANGE $29EC-$29F6 DB_DATA 10
RANGE $29F6-$2A00 DB_DATA 10
RANGE $2A00-$2A0A DB_DATA 10
RANGE $2A0A-$2A14 DB_DATA 10
RANGE $2A14-$2A1E DB_DATA 10
RANGE $2A1E-$2A20 DB_DATA 2
RANGE $2A20-$2A22 DW_DATA 1
RANGE $2A22-$2A28 DW_DATA 3
RANGE $2A28-$2A2E DW_DATA 3
RANGE $2A2E-$2A34 DW_DATA 3
RANGE $2A34-$2A3A DW_DATA 3
RANGE $2A3A-$2A40 DW_DATA 3
RANGE $2A40-$2A46 DW_DATA 3
RANGE $2A46-$2A4C DW_DATA 3
RANGE $2A4C-$2A52 DW_DATA 3
RANGE $2A52-$2A58 DW_DATA 3
RANGE $2A58-$2A5E DW_DATA 3
RANGE $2A5E-$2A64 DW_DATA 3
RANGE $2A64-$2A81 DB_DATA 29

