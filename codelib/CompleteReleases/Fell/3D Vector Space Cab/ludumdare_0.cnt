BANK 0
EQU $00 
EQU $64 VOICE_LENGTH
LABEL $C880 base
LABEL $C880 scratch
COMMENT_LABEL $C880 General purpose scratch
LABEL $C881 scratch2
COMMENT_LABEL $C881 General purpose scratch
LABEL $C882 scratch16
COMMENT_LABEL $C882 General purpose 16-bit scratch
LABEL $C884 state_frame
COMMENT_LABEL $C884 16 bit frame function for current state
LABEL $C886 joy_b
COMMENT_LABEL $C886 Controller button state
LABEL $C887 joy_lr
COMMENT_LABEL $C887 Joystick x state
LABEL $C888 sfx_pointer
COMMENT_LABEL $C888 16-bit pointer to SFX curr data byte
LABEL $C88A sfx_status
COMMENT_LABEL $C88A SFX play status
LABEL $C88B textpos
COMMENT_LABEL $C88B yx coords for text
LABEL $C88D textscale
LABEL $C88E textbright
LABEL $C88F state_base
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode_a
LABEL $F62B Rot_VL_Mode
LABEL $F637 Rot_VL_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $0E63 silence
EQU $26 main
LABEL $0033 warm_start
LABEL $C8A3 high_score
COMMENT_LABEL $C8A3 16 bit!! Track the high score (SLIGHT HACK WARNING -- placed high so it doesn't get overwritten by other states)
LABEL $2979 taxisample_data_start
LABEL $2977 taxisample_length
LABEL $0251 init_digit_sound
LABEL $C986 digit_looping
COMMENT_LABEL $C986 1
EQU $4F voice_hack
LABEL $0280 wait_recal_digitj
LABEL $040B intensity_a_digitj
LABEL $032F move_to_d_digitj
LABEL $0E6B ship
LABEL $037D draw_vlc_digitj
LABEL $293C title_text
LABEL $041E Print_Str_digit
LABEL $0535 SplashInit
LABEL $0549 SplashFrame
LABEL $00A7 ChangeState
LABEL $009E frame_loop
COMMENT_LABEL $009E Frame start
LABEL $00AE FixedRandom_3
LABEL $00B7 LF51A
LABEL $00B4 FixedRandom
LABEL $00BA LF51D
LABEL $00D0 sfx_init
LABEL $00DA sfx_playsound_if_clear
LABEL $00E7 sfx_already_playing
LABEL $00E8 sfx_playsound
LABEL $00F1 sfx_doframe
LABEL $00F7 sfx_stuff_to_play
LABEL $0106 sfx_checktonefreq
LABEL $0173 sfx_endofeffect
LABEL $011E sfx_checknoisefreq
LABEL $012D sfx_checkvolume
LABEL $0136 sfx_checktonedisable
LABEL $0148 sfx_enabletone
LABEL $013C sfx_disabletone
LABEL $0152 sfx_checknoisedisable
LABEL $0164 sfx_enablenoise
LABEL $0158 sfx_disablenoise
LABEL $016E sfx_nextframe
EQU $20 UTILS_BIN2ASCII_SPACE
LABEL $0184 bin2ascii
LABEL $01CD tab
LABEL $0192 mainbo
LABEL $01AB skip_calc
LABEL $019A addit
LABEL $01A4 no_overflow
LABEL $01B5 b2a_1
LABEL $01C0 b2a_2
LABEL $021D InitJoystick
LABEL $022E GetJoystick
LABEL $0250 x_done
LABEL $024B left_move
LABEL $1F40 SAMPLE_RATE
LABEL $C980 user_ram
COMMENT_LABEL $C980 well start of our ram space
LABEL $C980 user_ram_start
LABEL $C980 via_b_start
COMMENT_LABEL $C980 1
LABEL $C981 digit_sound_struct
LABEL $C981 digit_is_playing
COMMENT_LABEL $C981 1
LABEL $C982 digit_start_pos
COMMENT_LABEL $C982 1
LABEL $C984 digit_length
COMMENT_LABEL $C984 2
LABEL $C987 digit_current_pos
COMMENT_LABEL $C987 2
LABEL $C989 digit_end_pos
COMMENT_LABEL $C989 2
LABEL $C98B digit_recal_counter
COMMENT_LABEL $C98B 1
LABEL $C98D digit_sound_struct_end
LABEL $0096 CORRECTION
EQU $2B CYCLES_AFTER_T2_EXPIRES
COMMENT_LABEL $2B for the routines below, these values are correct!
EQU $17 CYCLES_BEFOR_T2_IS_SET
EQU $42 TIMER_T2_DELAY
EQU $79 UPDATE_TIMER
EQU $79 UPDATE_TIMER_LO
EQU $00 UPDATE_TIMER_HI
EQU $79 T2_TIMER_PEROID_REAL
EQU $79 T2_TIMER_PEROID_LO
EQU $00 T2_TIMER_PEROID_HI
LABEL $7900 T2_TIMER_PEROID_ENDIAN_REVERSE
EQU $6E RECAL_COUNTER_RESET
EQU $32 SCALE_FACTOR_DIGIT
LABEL $0280 wait_for_next_digit4
LABEL $02AD timer_restart_only5
LABEL $0288 wait_for_next_digit6
LABEL $02A2 sound_not_done5
LABEL $0294 sound_done5
LABEL $02AB sound_restart_timer5
LABEL $02B2 makro_rts5
LABEL $02BE recal_loop14
LABEL $02D1 recal_loop24
LABEL $0329 timer_restart_only10
LABEL $0304 wait_for_next_digit11
LABEL $031E sound_not_done10
LABEL $0310 sound_done10
LABEL $0327 sound_restart_timer10
LABEL $032E makro_rts10
LABEL $035E timer_restart_only15
LABEL $0339 wait_for_next_digit16
LABEL $0353 sound_not_done15
LABEL $0345 sound_done15
LABEL $035C sound_restart_timer15
LABEL $0363 makro_rts15
LABEL $0378 wait_for_t114
LABEL $03AA timer_restart_only20
LABEL $0385 wait_for_next_digit21
LABEL $039F sound_not_done20
LABEL $0391 sound_done20
LABEL $03A8 sound_restart_timer20
LABEL $03AF makro_rts20
LABEL $03B1 DRAW_VLA_DIGIT19
LABEL $03CB wait_for_t124
LABEL $03FF timer_restart_only25
LABEL $03DA wait_for_next_digit26
LABEL $03F4 sound_not_done25
LABEL $03E6 sound_done25
LABEL $03FD sound_restart_timer25
LABEL $0404 makro_rts25
LABEL $F9D4 Char_Table
LABEL $FBB4 Char_Table_End
LABEL $044E timer_restart_only30
LABEL $0429 wait_for_next_digit31
LABEL $0443 sound_not_done30
LABEL $0435 sound_done30
LABEL $044C sound_restart_timer30
LABEL $0453 makro_rts30
LABEL $0460 LF4A5
LABEL $0486 LF4CB
LABEL $0482 LF4C7
LABEL $04FC LF50A
LABEL $04A6 LF4EB
LABEL $04DB timer_restart_only34
LABEL $04B6 wait_for_next_digit35
LABEL $04D0 sound_not_done34
LABEL $04C2 sound_done34
LABEL $04D9 sound_restart_timer34
LABEL $04E0 makro_rts34
LABEL $052D timer_restart_only38
LABEL $0508 wait_for_next_digit39
LABEL $0522 sound_not_done38
LABEL $0514 sound_done38
LABEL $052B sound_restart_timer38
LABEL $0532 makro_rts38
EQU $03 SPLASH_ROT_DELAY
COMMENT_LABEL $03 Planet rotates every this many frames
EQU $14 LABEL_OFFSET
COMMENT_LABEL $14 x offset for landmark labels
LABEL $C88F planet_rot_splash
COMMENT_LABEL $C88F Planet rotation val
LABEL $C890 intens_splash
COMMENT_LABEL $C890 Screen intensity
LABEL $C891 rot_delay
COMMENT_LABEL $C891 Track frames left till rotation
LABEL $C892 framecount_splash
COMMENT_LABEL $C892 16 bit frame counter
LABEL $005F MAX_INTENSITY
COMMENT_LABEL $005F Max screen intensity
LABEL $0555 dont_step_intensity_splash
LABEL $0001 FADE_SPEED
COMMENT_LABEL $0001 How fast do we fade in?
LABEL $057E no_rot_step
LABEL $057B dont_reset_rot_intro
LABEL $002F NUM_FRAMES
LABEL $1067 theplanet_index
LABEL $0587 ap_next_contour_splash
COMMENT_LABEL $0587 For each contour
LABEL $0592 fm_wait43
LABEL $05C2 ap_draw_it_splash
LABEL $05AF ap_next_point_splash
LABEL $05C9 ap_w_t1_splash
LABEL $FF88 FRAME_DELIMITER
LABEL $07D7 dont_change_state_splash
LABEL $060C fade_text_out
LABEL $0619 fade_text_in
LABEL $061A now_set_intensity
LABEL $076B do_title_text
LABEL $008C LM_MOVE_SCALE
COMMENT_LABEL $008C Scale value to get correct moves from landmark coord table
LABEL $0EEF landmark1
LABEL $FF81 INVISIBLE
LABEL $068E skip_it_1
LABEL $2950 lm1_name
LABEL $0671 fm_wait47
LABEL $0F4D landmark2
LABEL $06D5 skip_it_2
LABEL $295B lm2_name
LABEL $06B8 fm_wait50
LABEL $0FAB landmark3
LABEL $071A skip_it_3
LABEL $2964 lm3_name
LABEL $06FD fm_wait53
LABEL $1009 landmark4
LABEL $075F skip_it_4
LABEL $296C lm4_name
LABEL $0742 fm_wait56
LABEL $07C5 do_input
LABEL $2928 welcome_text
LABEL $0788 fm_wait59
LABEL $07BE fm_wait62
LABEL $07D8 GameInit
COMMENT_LABEL $07D8 Gets called once when changing to this state
LABEL $0828 GameFrame
COMMENT_LABEL $0828 Gets called every frame
EQU $5A SHIP_MAX_Y
COMMENT_LABEL $5A Ship y pos bounds
EQU -$50 SHIP_MIN_Y
EQU $04 SHIP_MAX_YVEL
COMMENT_LABEL $04 Ship y velo bound
EQU -$02 SHIP_MIN_YVEL
EQU $50 MAX_SCALE
COMMENT_LABEL $50 Scale of the ship when at horizon
LABEL $00FF MAX_FUEL
COMMENT_LABEL $00FF Max fuel ship can carry
EQU -$01 GRAVITY
COMMENT_LABEL -$01 Gravity influence on y velo
EQU $03 THRUST
COMMENT_LABEL $03 Thruster influence on y velo
LABEL $0190 DROPOFF_REWARD
COMMENT_LABEL $0190 Amount of moolah for dropping someone off
EQU $03 CLOSENESS
COMMENT_LABEL $03 How close do they gotta be to hit the landmark?
EQU $02 FUEL_BURN_THR
COMMENT_LABEL $02 How fast fuel burns when thrusting
EQU $01 FUEL_BURN_SPIN
COMMENT_LABEL $01 How fast fuel burns when spinning
LABEL $0384 COMBO_BUMP
COMMENT_LABEL $0384 How much combo_bonus gets bumped by on dropoff
LABEL $C88F cash
COMMENT_LABEL $C88F 16-bit cash counter
LABEL $C891 cash_ascii
COMMENT_LABEL $C891 Ascii score (7 bytes -- 1 dollar sign, 5 digits, one string termie)
LABEL $C898 shipy
COMMENT_LABEL $C898 Ship y coordd
LABEL $C899 fuel
COMMENT_LABEL $C899 Ship fuel
LABEL $C89A shipyvel
COMMENT_LABEL $C89A Ship y velocity
LABEL $C89B odd_frame
COMMENT_LABEL $C89B Is it an odd frame?
LABEL $C89C planet_rot
COMMENT_LABEL $C89C Planet rotation val
LABEL $C89D current_fuel_lm
COMMENT_LABEL $C89D Which landmark's the fuel depot? (0-3)
LABEL $C89E current_pass_lm
COMMENT_LABEL $C89E Which landmark's the dropoff or pickup point? (0-3)
LABEL $C89F taxi_mode
COMMENT_LABEL $C89F -1=Pickup next; 1=Dropoff next
LABEL $C8A0 intens
COMMENT_LABEL $C8A0 Screen intensity
LABEL $C8A1 combo_bonus
COMMENT_LABEL $C8A1 16 bit!! Track the current combo bonus
LABEL $C8A5 high_score_asc
COMMENT_LABEL $C8A5 7 bytes for ASCII high score (1 dollar sign, 5 digits, one string termie)
LABEL $C8AC combo_level
COMMENT_LABEL $C8AC Track combo level (just for convenience... ideally we should calc combo_bonus from this but meh \o/)
LABEL $C8AD GAME_RAM_TOP
COMMENT_LABEL $C8AD End of our RAM (gameover state doesn't reuse the public state area cos it wants to access score)
LABEL $0800 re_roll
LABEL $083B dont_step_intensity
LABEL $085A dont_apply_gravity
LABEL $086E thrust_input_done
LABEL $086B fuel_level_ok
LABEL $0C79 game_over
LABEL $0874 min_yvel_ok
LABEL $087A max_yvel_ok
LABEL $0886 ymax_ok
LABEL $0899 ymin_ok
LABEL $0896 fuel_level_ok3
LABEL $08D4 input_done
LABEL $08B0 fuel_level_ok2
LABEL $08B9 go_left
COMMENT_LABEL $08B9 Rot left
LABEL $08C8 go_right
COMMENT_LABEL $08C8 Rot right
LABEL $08C3 dont_reset_rot2
LABEL $08D1 dont_reset_rot
LABEL $08DD ap_next_contour
COMMENT_LABEL $08DD For each contour
LABEL $08E5 fm_wait64
LABEL $0915 ap_draw_it
LABEL $0902 ap_next_point
LABEL $091C ap_w_t1
LABEL $0962 fm_wait67
LABEL $0995 fm_wait70
LABEL $09B5 fdld_wt171
LABEL $09EF fm_wait74
LABEL $09F9 shipy_abs_ok
LABEL $0A06 next_coord75
LABEL $0A20 t1wait75
LABEL $0EDF landmarks_index
LABEL $0A82 no_fueldepot
LABEL $0ED2 fueldepot
LABEL $0A77 fm_wait78
LABEL $0ADB no_passenger_pt
LABEL $0ACB show_dropoff
LABEL $0EB3 passenger
LABEL $0ACE now_draw_pass
LABEL $0EA9 dropoff
LABEL $0AD0 fm_wait81
LABEL $0B1E nobody_onboard
LABEL $0B13 fm_wait84
LABEL $0B8F no_combos_yo
LABEL $0B58 fm_wait87
LABEL $0B5E next_cl
LABEL $0E9C wee_flag
LABEL $0B63 next_coord88
LABEL $0B7D t1wait88
LABEL $0C05 no_fuel_hit
LABEL $0BB3 ship_below2
LABEL $0C75 no_pass_hit
LABEL $0BBC re_roll2
COMMENT_LABEL $0BBC If we got here, we hit the fuel depot!
LABEL $0BF4 cash_ok
LABEL $26B0 sfx_fuel
LABEL $0C27 ship_below
LABEL $0C2E re_roll3
COMMENT_LABEL $0C2E If we got here, we hit the pickup/dropoff point
LABEL $0C6F was_pickup
LABEL $265F sfx_dropoff
LABEL $2696 sfx_pickup
LABEL $0C84 GameOverInit
LABEL $0CD2 GameOverFrame
LABEL $03E8 TIMEOUT
COMMENT_LABEL $03E8 20 secs
LABEL $C8AD framecount
COMMENT_LABEL $C8AD 16 bit! How many frames have we been showing this screeen?
LABEL $C8AF is_high_score
COMMENT_LABEL $C8AF Did the player just get a high score?
LABEL $0C90 debug_me_bro
LABEL $0CA6 no_new_hs
LABEL $274D sfx_highscore
LABEL $0CA9 now_play
LABEL $26BC sfx_death
LABEL $0CC6 next_byte
LABEL $0CD1 mischief_managed
LABEL $0CE9 no_timeout
LABEL $0CF8 dont_step_intensity2
LABEL $2871 gameover_text
LABEL $0D27 fm_wait91
LABEL $0D5D fm_wait94
LABEL $0D98 no_new_hs2
LABEL $289C new_hs_label
LABEL $0D9B now_print
LABEL $288F hs_label
LABEL $0D9D fm_wait97
LABEL $0DD3 fm_wait100
LABEL $28A9 crashed_ufo_pic
LABEL $0E09 fm_wait103
LABEL $0E5F dont_change_state
LABEL $287B cta_text
LABEL $0E46 fm_wait106
LABEL $10C5 theplanet_frame_minus_1
LABEL $1135 theplanet_frame0
LABEL $11EF theplanet_frame1
LABEL $125B theplanet_frame2
LABEL $12FB theplanet_frame3
LABEL $137D theplanet_frame4
LABEL $1406 theplanet_frame5
LABEL $148F theplanet_frame6
LABEL $14FD theplanet_frame7
LABEL $157C theplanet_frame8
LABEL $15F8 theplanet_frame9
LABEL $1672 theplanet_frame10
LABEL $16EF theplanet_frame11
LABEL $1776 theplanet_frame12
LABEL $17E3 theplanet_frame13
LABEL $187A theplanet_frame14
LABEL $18FF theplanet_frame15
LABEL $196E theplanet_frame16
LABEL $19D8 theplanet_frame17
LABEL $1A3B theplanet_frame18
LABEL $1AAD theplanet_frame19
LABEL $1B29 theplanet_frame20
LABEL $1B9C theplanet_frame21
LABEL $1BFE theplanet_frame22
LABEL $1C69 theplanet_frame23
LABEL $1CD1 theplanet_frame24
LABEL $1D21 theplanet_frame25
LABEL $1D7C theplanet_frame26
LABEL $1DC7 theplanet_frame27
LABEL $1E21 theplanet_frame28
LABEL $1E9C theplanet_frame29
LABEL $1F2D theplanet_frame30
LABEL $1F8F theplanet_frame31
LABEL $1FF8 theplanet_frame32
LABEL $2056 theplanet_frame33
LABEL $20BB theplanet_frame34
LABEL $211E theplanet_frame35
LABEL $2187 theplanet_frame36
LABEL $21E6 theplanet_frame37
LABEL $2251 theplanet_frame38
LABEL $22B5 theplanet_frame39
LABEL $2344 theplanet_frame40
LABEL $23BE theplanet_frame41
LABEL $244C theplanet_frame42
LABEL $24D3 theplanet_frame43
LABEL $2557 theplanet_frame44
LABEL $25E9 theplanet_frame45
LABEL $1F40 TAXISAMPLE_SAMPLERATE
LABEL $2979 taxisample_data
LABEL $3E29 taxisample_data_end
LABEL $3E29 text
LABEL $3E31 *
COMMENT_LINE $0000 Main controller / game state manager
COMMENT_LINE $0000 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0000 ****** CONSTANTS & DEFINES ******
COMMENT $0000 Here be all ram location definitions
COMMENT_LINE $0000 Ye olde memory map
COMMENT_LINE $0000 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0000 State manager stuff
COMMENT_LINE $0000 Controller interface stuff
COMMENT_LINE $0000 SFX stuff
COMMENT_LINE $0000 Textwriter stuff
COMMENT_LINE $0000 Safe for gamestates to use
COMMENT $0000 Sys defines (thanks Malban!)
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Christopher Salomon
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Christopher Salomon ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 * $C839 ;Pointer to copyright string during startup
COMMENT_LINE $0000 * $C83B ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 * $C83C ;temp byte
COMMENT_LINE $0000 * $C843 ; register 9
COMMENT_LINE $0000 * $C844 ; register 8
COMMENT_LINE $0000 * $C848 ; register 4
COMMENT_LINE $0000 * $C849 ; register 3
COMMENT_LINE $0000 * $C84A ; register 2
COMMENT_LINE $0000 * $C84C ; register 0
COMMENT_LINE $0000 * $C85E ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 * $C868...$C876 ;Unused?
COMMENT_LINE $0000 * $C878 ;Unused?
COMMENT_LINE $0000 * $C880 - $CBEA is user RAM ;
COMMENT_LINE $0000 * 0 sample/hold (0=enable mux 1=disable mux)
COMMENT_LINE $0000 * 1 mux sel 0
COMMENT_LINE $0000 * 2 mux sel 1
COMMENT_LINE $0000 * 3 sound BC1
COMMENT_LINE $0000 * 4 sound BDIR
COMMENT_LINE $0000 * 5 comparator input
COMMENT_LINE $0000 * 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 * 7 /RAMP
COMMENT_LINE $0000 * 0 PA latch enable
COMMENT_LINE $0000 * 1 PB latch enable
COMMENT_LINE $0000 * 2 \ 110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 * 3 > shift register control (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 * 4 /
COMMENT_LINE $0000 * 5 0=t2 one shot 1=t2 free running
COMMENT_LINE $0000 * 6 0=t1 one shot 1=t1 free running
COMMENT_LINE $0000 * 7 0=t1 disable PB7 output 1=t1 enable PB7 output
COMMENT_LINE $0000 * 0 CA1 control CA1 -> SW7 0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 * 1 \
COMMENT_LINE $0000 * 2 > CA2 control CA2 -> /ZERO 110=low 111=high
COMMENT_LINE $0000 * 3 /
COMMENT_LINE $0000 * 4 CB1 control CB1 -> NC 0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 * 5 \
COMMENT_LINE $0000 * 6 > CB2 control CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 * 7 /
COMMENT_LINE $0000 * bit cleared by
COMMENT_LINE $0000 * 0 CA2 interrupt flag reading or writing port A I/O
COMMENT_LINE $0000 * 1 CA1 interrupt flag reading or writing port A I/O
COMMENT_LINE $0000 * 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 * 3 CB2 interrupt flag reading or writing port B I/O
COMMENT_LINE $0000 * 4 CB1 interrupt flag reading or writing port A I/O
COMMENT_LINE $0000 * 5 timer 2 interrupt flag read t2 low or write t2 high
COMMENT_LINE $0000 * 6 timer 1 interrupt flag read t1 count low or write t1 high
COMMENT_LINE $0000 * 7 IRQ status flag write logic 0 to IER or IFR bit
COMMENT_LINE $0000 * 0 CA2 interrupt enable
COMMENT_LINE $0000 * 1 CA1 interrupt enable
COMMENT_LINE $0000 * 2 shift register interrupt enable
COMMENT_LINE $0000 * 3 CB2 interrupt enable
COMMENT_LINE $0000 * 4 CB1 interrupt enable
COMMENT_LINE $0000 * 5 timer 2 interrupt enable
COMMENT_LINE $0000 * 6 timer 1 interrupt enable
COMMENT_LINE $0000 * 7 IER set/clear control
COMMENT_LINE $0000 endif
COMMENT $0000 Drawing-related macros
COMMENT_LINE $0000 Drawing Macros
COMMENT_LINE $0000 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0000 Draw a dot by pinging the shiftreg
COMMENT_LINE $0000 Draw a counted line list
COMMENT_LINE $0000 Expects: x=list address
COMMENT_LINE $0000 Draw a line rapidly
COMMENT_LINE $0000 Expects:
COMMENT_LINE $0000 (a,b) to be relative coords
COMMENT_LINE $0000 Trashes:
COMMENT_LINE $0000 d
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Ping T1H
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out (aw what a shame, this wait is wasted...)
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 WAIT! Pro tip: Don't wait, calculate :P
COMMENT_LINE $0000 Trashes b
COMMENT $0000 Wait for timer 1
COMMENT_LINE $0000 Hurry to a relative coord. DOES NOT WAIT!
COMMENT_LINE $0000 Expects:
COMMENT_LINE $0000 (a,b) = (y,x) coords
COMMENT_LINE $0000 Trashes:
COMMENT_LINE $0000 a
COMMENT $0000 Fast MoveTo_d macro
COMMENT $0000 Mark fm_wait label as local
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Blank low, zero high
COMMENT $0000 Clear shift register
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 timer 1 count high
COMMENT_LINE $0000 Set intensity
COMMENT_LINE $0000 Trashes:
COMMENT_LINE $0000 d
COMMENT $0000 Store intensity in D/A
COMMENT $0000 Save intensity in $C827
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because
COMMENT $0000 turn off mux
COMMENT_LINE $0000 Get back to the origin sharpish
COMMENT_LINE $0000 Trashes:
COMMENT_LINE $0000 d
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mux
COMMENT_LINE $0000 ****** CART HEADER ******
COMMENT $0000 Force to address 0
COMMENT $0000 1st 5 bytes = highly sensitive magic string!
COMMENT $000B Boot music address
COMMENT $000D height (neg bcos text), width, y, x
COMMENT $0011 Cart title
COMMENT $0025 End of header
COMMENT_LINE $0026 ****** ENTRYPOINT ******
COMMENT_LINE $0026 Init high score if cold boot, otherwise leave it be
COMMENT $0026 Grab first char of Vec_High_Score
FORCE_SYMBOL $0026 Vec_High_Score
COMMENT $0029 Already got an Imperial Standard Triangular Currency Unit?
FORCE_NO_SYMBOL $0029
COMMENT $002B Then it's a warm start, leave the score alone!
FORCE_NO_SYMBOL $002D
FORCE_SYMBOL $0030 high_score
COMMENT_LINE $0033 Just play the sample for the first VOICE_LENGTH frames
FORCE_NO_SYMBOL $0033
FORCE_SYMBOL $0036 scratch16
COMMENT $0039 position of sample
FORCE_SYMBOL $0039 taxisample_data_start
COMMENT $003C length of sample
FORCE_SYMBOL $003C taxisample_length
COMMENT $003F init it!
FORCE_SYMBOL $003F init_digit_sound
FORCE_SYMBOL $0043 digit_looping
FORCE_SYMBOL $0048 Vec_Text_Height
COMMENT $004B Set scale for everything
FORCE_NO_SYMBOL $004B
FORCE_SYMBOL $004D VIA_t1_cnt_lo
COMMENT $004F Wait for BIOS recal
FORCE_SYMBOL $004F wait_recal_digitj
COMMENT $0052 Set intensity
FORCE_NO_SYMBOL $0052
FORCE_SYMBOL $0054 intensity_a_digitj
COMMENT $0057 Move...
FORCE_NO_SYMBOL $0057
FORCE_SYMBOL $005B move_to_d_digitj
COMMENT $005E Draw the wee ship
FORCE_SYMBOL $005E ship
FORCE_SYMBOL $0061 draw_vlc_digitj
COMMENT $0064 Back to origin
FORCE_NO_SYMBOL $0064
COMMENT $0067 /BLANK low and /ZERO low
FORCE_SYMBOL $0067 VIA_cntl
COMMENT $0069 clear shift register
FORCE_SYMBOL $0069 VIA_shift_reg
FORCE_NO_SYMBOL $006B
COMMENT $006E clear D/A register
FORCE_SYMBOL $006E VIA_port_a
COMMENT $0070 mux=1, disable mux
FORCE_SYMBOL $0070 VIA_port_b
COMMENT $0072 mux=1, enable mux
FORCE_SYMBOL $0072 VIA_port_b
COMMENT $0074 do it again
FORCE_SYMBOL $0074 VIA_port_b
FORCE_NO_SYMBOL $0076
COMMENT $0078 disable mux
FORCE_SYMBOL $0078 VIA_port_b
COMMENT $007D Move to draw text
FORCE_SYMBOL $007D move_to_d_digitj
FORCE_SYMBOL $0080 title_text
COMMENT $0083 Draw it
FORCE_SYMBOL $0083 Print_Str_digit
COMMENT $0086 Tick the framecount and get outta here if it's time
FORCE_SYMBOL $0086 scratch16
FORCE_NO_SYMBOL $0089
FORCE_SYMBOL $008C scratch16
FORCE_SYMBOL $008F VOICE_LENGTH
COMMENT_LINE $0095 Set default gamestate
FORCE_SYMBOL $0095 SplashInit
FORCE_SYMBOL $0098 SplashFrame
COMMENT_LINE $009E Main frame loop
COMMENT $009E Wait for BIOS recal
COMMENT $00A1 Run the frame function for current state
FORCE_SYMBOL $00A1 state_frame
COMMENT $00A5 looop
COMMENT_LINE $00A7 ****** STATE MANAGER ******
COMMENT_LINE $00A7 Change state
COMMENT_LINE $00A7 Expects: x=state init function, y=state frame function
FORCE_SYMBOL $00A7 state_frame
FORCE_NO_SYMBOL $00AB
COMMENT_LINE $00AE ***** GLOBAL FUNCTIONS ******
COMMENT $00AE Some bugfixed / macro-fied BIOS routines
COMMENT_LINE $00AE Bugfixed BIOS routines
COMMENT_LINE $00AE Erm.. from a forum somewhere! Sorry..
COMMENT_LINE $00AE -----------------------------------------------------------------------;
COMMENT_LINE $00AE F511    Random_3                                                ;
COMMENT_LINE $00AE F517    Random                                                  ;
COMMENT_LINE $00AE ;
COMMENT_LINE $00AE This routine generates a random 1-byte number, and places it in the   ;
COMMENT_LINE $00AE A register.  Random_3 runs through the random number generator        ;
COMMENT_LINE $00AE algorithm three times.  The random number seed is stored in the       ;
COMMENT_LINE $00AE three bytes pointed to by $C87B.                                      ;
COMMENT_LINE $00AE ;
COMMENT_LINE $00AE EXIT: A-reg contains the generated random number                      ;
COMMENT_LINE $00AE ;
COMMENT_LINE $00AE All other registers are preserved.                              ;
COMMENT_LINE $00AE -----------------------------------------------------------------------;
FORCE_NO_SYMBOL $00B0
COMMENT $00B7 FIXED: Was ldx Vec_Seed_Ptr (see http://vectorgaming.proboards.com/thread/1329/random)
FORCE_SYMBOL $00B7 Vec_Seed_Ptr
FORCE_NO_SYMBOL $00BA
FORCE_NO_SYMBOL $00C0
FORCE_NO_SYMBOL $00C3
FORCE_NO_SYMBOL $00C5
FORCE_NO_SYMBOL $00C7
FORCE_NO_SYMBOL $00CC
COMMENT $00D0 AYFX player
COMMENT_LINE $00D0 Player for effects from AY Sound FX Editor v0.4
COMMENT_LINE $00D0 By vectrexrc, module'd up by Fell^DSS, 2016
COMMENT_LINE $00D0 **** INIT ****
COMMENT $00D0 init sfx vars
FORCE_NO_SYMBOL $00D0
FORCE_SYMBOL $00D3 sfx_pointer
FORCE_SYMBOL $00D6 sfx_status
COMMENT_LINE $00DA **** START AN EFFECT PLAYING IF NONE IS PLAYING! ****
COMMENT_LINE $00DA Expects: SFX address in x
FORCE_SYMBOL $00DA sfx_status
FORCE_SYMBOL $00DF sfx_pointer
FORCE_NO_SYMBOL $00E2
FORCE_SYMBOL $00E4 sfx_status
COMMENT_LINE $00E8 **** START AN EFFECT PLAYING ****
COMMENT_LINE $00E8 Expects: SFX address in x
FORCE_SYMBOL $00E8 sfx_pointer
FORCE_NO_SYMBOL $00EB
FORCE_SYMBOL $00ED sfx_status
COMMENT_LINE $00F1 **** PLAY FOR THIS FRAME ****
COMMENT $00F1 check if sfx to play
FORCE_SYMBOL $00F1 sfx_status
COMMENT $00F6 return if not
COMMENT $00F7 get current frame pointer
FORCE_SYMBOL $00F7 sfx_pointer
FORCE_NO_SYMBOL $00FA
COMMENT $00FC check first flag byte D0
FORCE_NO_SYMBOL $00FC
COMMENT $00FE no match - continue to process frame
FORCE_NO_SYMBOL $0100
COMMENT $0102 check second flag byte 20
FORCE_NO_SYMBOL $0102
COMMENT $0104 match - end of effect found so stop playing
COMMENT $0106 init Y as pointer to next data or flag byte
FORCE_NO_SYMBOL $0106
COMMENT $0108 check if need to set tone freq
FORCE_NO_SYMBOL $0108
COMMENT $010A if bit 5 of B is set
FORCE_NO_SYMBOL $010A
COMMENT $010C skip as no tone freq data
COMMENT $010E get next data byte and copy to tone freq reg4
FORCE_NO_SYMBOL $010E
FORCE_NO_SYMBOL $0110
COMMENT $0112 set tone freq
COMMENT $0115 get next data byte and copy to tone freq reg5
FORCE_NO_SYMBOL $0115
FORCE_NO_SYMBOL $0117
COMMENT $0119 set tone freq
COMMENT $011C increment pointer to next data/flag byte
FORCE_NO_SYMBOL $011C
COMMENT $011E check if need to set noise freq
FORCE_NO_SYMBOL $011E
COMMENT $0120 if bit 6 of B is only set
FORCE_NO_SYMBOL $0120
COMMENT $0122 skip as no noise freq data
COMMENT $0124 get next data byte and copy to noise freq reg
FORCE_NO_SYMBOL $0124
FORCE_NO_SYMBOL $0126
COMMENT $0128 set noise freq
COMMENT $012B increment pointer to next flag byte
FORCE_NO_SYMBOL $012B
COMMENT $012D set volume on channel 3
FORCE_NO_SYMBOL $012D
COMMENT $012F get volume from bits 0-3
FORCE_NO_SYMBOL $012F
COMMENT $0131 set reg10
FORCE_NO_SYMBOL $0131
COMMENT $0133 Set volume
COMMENT $0136 check disable tone channel 3
FORCE_NO_SYMBOL $0136
COMMENT $0138 if bit 4 of B is set disable the tone
FORCE_NO_SYMBOL $0138
COMMENT $013C set bit2 in reg7
FORCE_NO_SYMBOL $013C
FORCE_NO_SYMBOL $013F
FORCE_NO_SYMBOL $0141
COMMENT $0143 disable tone
COMMENT $0148 clear bit2 in reg7
FORCE_NO_SYMBOL $0148
FORCE_NO_SYMBOL $014B
FORCE_NO_SYMBOL $014D
COMMENT $014F enable tone
COMMENT $0152 check disable noise
FORCE_NO_SYMBOL $0152
COMMENT $0154 if bit7 of B is set disable noise
FORCE_NO_SYMBOL $0154
COMMENT $0158 set bit5 in reg7
FORCE_NO_SYMBOL $0158
FORCE_NO_SYMBOL $015B
FORCE_NO_SYMBOL $015D
COMMENT $015F disable noise
COMMENT $0164 clear bit5 in reg 7
FORCE_NO_SYMBOL $0164
FORCE_NO_SYMBOL $0167
FORCE_NO_SYMBOL $0169
COMMENT $016B enable noise
COMMENT $016E update frame pointer to next flag byte in Y
FORCE_SYMBOL $016E sfx_pointer
COMMENT $0173 set volume off channel 3
FORCE_NO_SYMBOL $0173
COMMENT $0175 set reg1sf0
FORCE_NO_SYMBOL $0175
COMMENT $0177 Set volume
COMMENT $017A reset sfx
FORCE_NO_SYMBOL $017A
FORCE_SYMBOL $017D sfx_pointer
FORCE_SYMBOL $0180 sfx_status
COMMENT $0184 Misc utes
COMMENT_LINE $0184 Misc useful shiznazz
COMMENT_LINE $0184 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0184 *** SOMEONE ELSE'S BIN-TO-ASCII FUNCTION ***
COMMENT_LINE $0184 in:
COMMENT_LINE $0184 D = binary value
COMMENT_LINE $0184 U = dest. number
COMMENT_LINE $0184 out:
COMMENT_LINE $0184 U = dest. number (kept)
COMMENT_LINE $0184 A,B destroyed
COMMENT_LINE $0184 X,Y kept
COMMENT_LINE $0184 store regs
COMMENT_LINE $0186 clear number
FORCE_NO_SYMBOL $0186
FORCE_NO_SYMBOL $0189
FORCE_NO_SYMBOL $018B
FORCE_NO_SYMBOL $018D
COMMENT_LINE $018F convert
FORCE_SYMBOL $018F tab
FORCE_NO_SYMBOL $0198
COMMENT_LINE $019A orcc c ; set carry - is set (see bcc above)
FORCE_NO_SYMBOL $019E
FORCE_NO_SYMBOL $01A2
FORCE_NO_SYMBOL $01AB
COMMENT_LINE $01AD cmpx # tab+16*5 -- run over all 16 bit
COMMENT $01AD (same as cmpd # $0000 but a dbe shorter and faster) -- run until no bits are left. i.e. 1-16 runs depending on the input
FORCE_NO_SYMBOL $01AD
COMMENT_LINE $01B2 replace leading zeroes with space
FORCE_SYMBOL $01B2 UTILS_BIN2ASCII_SPACE
FORCE_NO_SYMBOL $01BC
COMMENT_LINE $01C0 convert others to ascii
FORCE_NO_SYMBOL $01C7
COMMENT_LINE $01CB restore regs + do rts
COMMENT $021D Stick funcs
COMMENT_LINE $021D Joystick funcs
COMMENT_LINE $021D DSS, 2017
COMMENT_LINE $021D Init joystick-related bios vars
FORCE_NO_SYMBOL $021D
COMMENT $021F x axis only!
FORCE_SYMBOL $021F Vec_Joy_Mux_1_X
FORCE_NO_SYMBOL $0222
FORCE_SYMBOL $0224 Vec_Joy_Mux_1_Y
FORCE_SYMBOL $0227 Vec_Joy_Mux_2_X
FORCE_SYMBOL $022A Vec_Joy_Mux_2_Y
COMMENT_LINE $022E Read joystick
FORCE_SYMBOL $022E joy_lr
FORCE_SYMBOL $0231 Read_Btns
FORCE_SYMBOL $0234 Vec_Btn_State
FORCE_SYMBOL $0237 joy_b
FORCE_SYMBOL $023A Joy_Digital
FORCE_SYMBOL $023D Vec_Joy_1_X
FORCE_NO_SYMBOL $0244
FORCE_SYMBOL $0246 joy_lr
FORCE_SYMBOL $024D joy_lr
COMMENT $0251 Malban's sample player
COMMENT_LINE $0251 Complicated digital sample player
COMMENT_LINE $0251 By Malban
COMMENT_LINE $0251 Hacked with by Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0251 user variable definitions
COMMENT_LINE $0251 the following value will differ with each program you use your samples in
COMMENT_LINE $0251 the thing is samples are not ALLWAYS played in time, there are certain to be times
COMMENT_LINE $0251 when the timing will "miss" a few
COMMENT_LINE $0251 this is not really all that bad, you won't really hear it, untill you miss quite a lot
COMMENT_LINE $0251 but it DOES matter concerning the 50Hz display limit of 30000 Cycles
COMMENT_LINE $0251 therefor you should measure your routines using e.g. dissi and
COMMENT_LINE $0251 alter this "correction" value till you are pretty near 30000 cycles
COMMENT_LINE $0251 (use tracki addresses like in the example "NOP")
COMMENT_LINE $0251 a) we wait in a delay loop till T2 expires, but after expiring and a value is actualy send to the dac,
COMMENT_LINE $0251 there are quite a few cycles, this must be considered in calculating the Timer/sample rate
COMMENT_LINE $0251 b) after the sample is put to dac, there also is a delay till the new t2 timer is set, this
COMMENT_LINE $0251 also must be calculated into the sample rate timing!
COMMENT_LINE $0251 these values are the cycles of the instructions between these "events" you have to
COMMENT_LINE $0251 look at dissi to count those (count cycles of instructions)
COMMENT_LINE $0251 SAMPLE_RATE == xxxx, that means we must play xxxx samples per second
COMMENT_LINE $0251 vectrex CPU runs at 1/1500000s (1.5 Mhz)
COMMENT_LINE $0251 every "UPDATE_TIMER" cycles we must output one sample! (to keep up with samplerate)
COMMENT_LINE $0251 in order to be able to draw more vectors, the DRAW_VLC
COMMENT_LINE $0251 function must be changed, so that more than just one vector is
COMMENT_LINE $0251 drawn between two samples (can easily be done)
COMMENT_LINE $0251 we must use a fixed scale value, since  somehow we must
COMMENT_LINE $0251 calculate the wait_recal
COMMENT_LINE $0251 (actually we MUST asure, that we stay not for more time in the
COMMENT_LINE $0251 move_to_d or draw_vlc functions, this is sort of a delimiter)
COMMENT_LINE $0251 it should be ok, to use smaller values,
COMMENT_LINE $0251 this (50) value was ment for use with 8kHz samples,
COMMENT_LINE $0251 for 4kHz samples it could probably be doubled...
COMMENT_LINE $0251 (without changing anything else)
COMMENT_LINE $0251 this sets the timer to our restart value
COMMENT $0000 name of macro
COMMENT $0000 load the timer 2 value we calculated
COMMENT $0000 and set the timer
COMMENT $0000 end of macro
COMMENT_LINE $0000 this sets VIA B to our known sample state...
COMMENT $0000 name of macro
COMMENT $0000 load the calculated VIA B
COMMENT $0000 write back to reg B in 6522
COMMENT $0000 end of macro
COMMENT_LINE $0000 this calculates our sample state for VIA B
COMMENT $0000 name of macro
COMMENT $0000 data reg B from 6522
COMMENT $0000 save top 5 bits, mask off bottom 3
COMMENT $0000 set S/H, SEL 0, SEL 1
COMMENT $0000 and remember it
COMMENT $0000 end of macro
COMMENT_LINE $0000 this is a waiter, for our current sample-byte to finnish
COMMENT $0000 name of macro
COMMENT $0000 B-reg = T2 interrupt bit
COMMENT $0000 Wait for T2 to time out
COMMENT $0000 repeat
COMMENT $0000 end of macro
COMMENT_LINE $0000 well, not really a 'digit' function... but it does what it's called
COMMENT $0000 Save intensity in $C827
COMMENT $0000 Store intensity in D/A
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because ?
COMMENT $0000 turn off mux
COMMENT_LINE $0000 Kills D
COMMENT_LINE $0000 must ALLWAYS have Y, U, U contains the length of the sample, Y the position
COMMENT_LINE $0000 must ALLWAYS have Timer 2
COMMENT_LINE $0000 Kills and VIA port B and A
COMMENT_LINE $0000 cycles left = 130 (8Khz)
COMMENT_LINE $0000 cycles left = 300 (4Khz)
COMMENT_LINE $0000 uses 27+30 cycles when completely done, without restart
COMMENT_LINE $0000 uses 51+30 cycles when completely done, with restart
COMMENT_LINE $0000 uses 32+30 cycles when one digitized sound byte was played.
COMMENT_LINE $0000 + 9
COMMENT_LINE $0000 => Interrupts are not worth it...
COMMENT $0000 name of macro
COMMENT_LINE $0000 load current digit byte and increment counter
COMMENT $0000 decrement our counter, used for wait_recal
COMMENT $0000 is there a digital sample to be played?
COMMENT $0000 no, than jump out of here
COMMENT $0000 otherwise we wait till the last played
COMMENT_LINE $0000 sample-byte is finnished
COMMENT $0000 if it is zero, than we are finnished
COMMENT $0000 with this sample, otherwise we continue further below
COMMENT_LINE $0000 if we are done, should we restart?
COMMENT $0000 is this sample a looping one?
COMMENT $0000 store it to is_playing
COMMENT $0000 if none looping... we are done
COMMENT_LINE $0000 but we still must use the timer
COMMENT_LINE $0000 ok, for restart, we only change current position
COMMENT $0000 load the start position
COMMENT_LINE $0000 this is the end_position of the sample,
COMMENT_LINE $0000 since we go backwards
COMMENT $0000 and restart the timer, next byte
COMMENT_LINE $0000 is played next round...
COMMENT_LINE $0000 here our normal 'digit_byte_playing_section'
COMMENT $0000 load the next sample_byte to A
COMMENT_LINE $0000 and store it to the 6522 -> PSG
COMMENT $0000 store in reg A in 6522 (DAC)
COMMENT_LINE $0000 following must come after the above, or we
COMMENT_LINE $0000 put noise to the psg,
COMMENT_LINE $0000 likewise, before storing anything else to
COMMENT_LINE $0000 port A, we will disable the connection to PSG
COMMENT $0000 this sets the MUX of 6522 to PSG
COMMENT $0000 and disable the mux, so no junk will
COMMENT_LINE $0000 enter our PSG-DAC...
COMMENT $0000 restart timer...
COMMENT $0000 end of macro
COMMENT_LINE $0000 uses for a scalefactor of 50
COMMENT_LINE $0000 about 100+... cycles (could still be optimized further)
COMMENT $0000 save the position
COMMENT $0000 play one sample_byte
COMMENT $0000 restore position
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT_LINE $0000 PSHS D ; save the position
COMMENT_LINE $0000 NEXT_DIGIT_BYTE_FASTER_NO_I ; play one sample_byte
COMMENT_LINE $0000 PULS D ; restore position
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 t1 flag
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses for a scalefactor of 50
COMMENT_LINE $0000 exactly 51 cycles (could still be optimized further)
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux switched
COMMENT $0000 Point to next coordinate pair X=X+2
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor), enabling t1
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses 8 cycles
COMMENT_LINE $0000 (in relation to the last done digital output)
COMMENT_LINE $0000 only one vector drawn for now...
COMMENT_LINE $0000 could probably be doubled (2*51 < 130)
COMMENT $0000 play one sample-byte
COMMENT $0000 load # of lines in this list
COMMENT $0000 helper RAM, here we store the # of lines
COMMENT $0000 load y, x
COMMENT $0000 draw the line
COMMENT $0000 and play one sample-byte
COMMENT $0000 load line count
COMMENT $0000 decrement it
COMMENT $0000 go back for more points if not below 0
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 uses 0 cycles
COMMENT_LINE $0000 (in relation to the last done digital output)
COMMENT_LINE $0000 a wait_recal routine for the sample... output
COMMENT $0000 play one sample-byte
COMMENT $0000 load # of time_outs
COMMENT $0000 # should we recalibrate now?
COMMENT $0000 if not yet... loop till the time is right
COMMENT_LINE $0000 now we move out of bounds
COMMENT_LINE $0000 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0000 loop 5 times
COMMENT $0000 store that
COMMENT $0000 load the next pos, super long saturation
COMMENT $0000 move to d -> must be achieved
COMMENT $0000 done yet with out 5?
COMMENT $0000 not yet? than loop
COMMENT $0000 blank low and zero low
COMMENT_LINE $0000 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $0000 loop 5 times
COMMENT $0000 store that
COMMENT $0000 load the next pos, super long saturation
COMMENT $0000 move to d -> must be achieved
COMMENT $0000 done yet with out 5?
COMMENT $0000 not yet? than loop
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 mux=1, disable mux
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mux
COMMENT $0000 load our calculated reset value
COMMENT $0000 and store it to our timer counter...
COMMENT $0000 rethink our VIAB value
COMMENT $0000 and do one sample-byte
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 expects startposition in D
COMMENT_LINE $0000 expects length in X
COMMENT_LINE $0000 sets up Y register, should under no circumstances be destroyed
COMMENT $0251 store new start position
FORCE_SYMBOL $0251 digit_start_pos
COMMENT $0254 store the length
FORCE_SYMBOL $0254 digit_length
COMMENT $0257 move X to D
COMMENT $0259 calculate end position
FORCE_SYMBOL $0259 digit_start_pos
COMMENT $025C and store it
FORCE_SYMBOL $025C digit_end_pos
COMMENT $025F looping per default is OFF
FORCE_NO_SYMBOL $025F
COMMENT $0261 store it
FORCE_SYMBOL $0261 digit_looping
COMMENT $0264 sound is playing is ON
FORCE_NO_SYMBOL $0264
COMMENT $0266 sound is playing
FORCE_SYMBOL $0266 digit_is_playing
COMMENT $0269 calculate out first VIA B poke
COMMENT $0269 data reg B from 6522
FORCE_SYMBOL $0269 VIA_port_b
COMMENT $026B save top 5 bits, mask off bottom 3
FORCE_NO_SYMBOL $026B
COMMENT $026D set S/H, SEL 0, SEL 1
FORCE_NO_SYMBOL $026D
COMMENT $026F and remember it
FORCE_SYMBOL $026F via_b_start
COMMENT $0272 initialize Y to position in sample data
FORCE_SYMBOL $0272 digit_end_pos
COMMENT $0276 set the fixed scale factor we will use...
FORCE_SYMBOL $0276 SCALE_FACTOR_DIGIT
COMMENT $0278 move to time 1 lo, this means scaling
FORCE_SYMBOL $0278 VIA_t1_cnt_lo
COMMENT $027A set our timer 2 for the first time...
COMMENT $027A load the timer 2 value we calculated
FORCE_SYMBOL $027A T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $027D and set the timer
FORCE_SYMBOL $027D VIA_t2_lo
COMMENT $027F back
COMMENT_LINE $0280 ***************************************************************************
COMMENT_LINE $0280 now the makros from above as functions...
COMMENT_LINE $0280 shortens the source...
COMMENT_LINE $0280 ***************************************************************************
COMMENT $0280 play one sample-byte
COMMENT_LINE $0280 load current digit byte and increment counter
COMMENT $0280 decrement our counter, used for wait_recal
FORCE_SYMBOL $0280 digit_recal_counter
COMMENT $0283 is there a digital sample to be played?
FORCE_SYMBOL $0283 digit_is_playing
COMMENT $0286 no, than jump out of here
COMMENT $0288 otherwise we wait till the last played
COMMENT $0288 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0288
COMMENT $028A Wait for T2 to time out
FORCE_SYMBOL $028A VIA_int_flags
COMMENT $028C repeat
COMMENT_LINE $028E sample-byte is finnished
COMMENT $028E if it is zero, than we are finnished
FORCE_SYMBOL $028E digit_start_pos
COMMENT $0292 with this sample, otherwise we continue further below
COMMENT_LINE $0294 if we are done, should we restart?
COMMENT $0294 is this sample a looping one?
FORCE_SYMBOL $0294 digit_looping
COMMENT $0297 store it to is_playing
FORCE_SYMBOL $0297 digit_is_playing
COMMENT $029A if none looping... we are done
COMMENT_LINE $029C but we still must use the timer
COMMENT_LINE $029C ok, for restart, we only change current position
COMMENT $029C load the start position
FORCE_SYMBOL $029C digit_end_pos
COMMENT_LINE $02A0 this is the end_position of the sample,
COMMENT_LINE $02A0 since we go backwards
COMMENT $02A0 and restart the timer, next byte
COMMENT_LINE $02A2 is played next round...
COMMENT_LINE $02A2 here our normal 'digit_byte_playing_section'
COMMENT $02A2 load the next sample_byte to A
COMMENT_LINE $02A4 and store it to the 6522 -> PSG
COMMENT $02A4 store in reg A in 6522 (DAC)
FORCE_SYMBOL $02A4 VIA_port_a
COMMENT_LINE $02A6 following must come after the above, or we
COMMENT_LINE $02A6 put noise to the psg,
COMMENT_LINE $02A6 likewise, before storing anything else to
COMMENT_LINE $02A6 port A, we will disable the connection to PSG
COMMENT $02A6 this sets the MUX of 6522 to PSG
COMMENT $02A6 load the calculated VIA B
FORCE_SYMBOL $02A6 via_b_start
COMMENT $02A9 write back to reg B in 6522
FORCE_SYMBOL $02A9 VIA_port_b
COMMENT $02AB and disable the mux, so no junk will
FORCE_SYMBOL $02AB VIA_port_b
COMMENT_LINE $02AD enter our PSG-DAC...
COMMENT $02AD restart timer...
COMMENT $02AD load the timer 2 value we calculated
FORCE_SYMBOL $02AD T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $02B0 and set the timer
FORCE_SYMBOL $02B0 VIA_t2_lo
COMMENT $02B2 load # of time_outs
FORCE_SYMBOL $02B2 digit_recal_counter
COMMENT $02B5 # should we recalibrate now?
FORCE_SYMBOL $02B5 RECAL_COUNTER_RESET
COMMENT $02B7 if not yet... loop till the time is right
COMMENT_LINE $02B9 now we move out of bounds
COMMENT_LINE $02B9 five times the move should about be 255 (ff) scalefactor :-?
COMMENT $02B9 loop 5 times
FORCE_NO_SYMBOL $02B9
COMMENT $02BB store that
FORCE_NO_SYMBOL $02BB
COMMENT $02BE load the next pos, super long saturation
FORCE_NO_SYMBOL $02BE
COMMENT $02C1 move to d -> must be achieved
COMMENT $02C3 done yet with out 5?
FORCE_NO_SYMBOL $02C3
COMMENT $02C6 not yet? than loop
FORCE_NO_SYMBOL $02C8
COMMENT $02CA blank low and zero low
FORCE_SYMBOL $02CA VIA_cntl
COMMENT_LINE $02CC five times the move should about be 255 (ff) scalefactor :-?
COMMENT $02CC loop 5 times
FORCE_NO_SYMBOL $02CC
COMMENT $02CE store that
FORCE_NO_SYMBOL $02CE
COMMENT $02D1 load the next pos, super long saturation
FORCE_NO_SYMBOL $02D1
COMMENT $02D4 move to d -> must be achieved
COMMENT $02D6 done yet with out 5?
FORCE_NO_SYMBOL $02D6
COMMENT $02D9 not yet? than loop
FORCE_NO_SYMBOL $02DB
COMMENT $02DD /BLANK low and /ZERO low
FORCE_SYMBOL $02DD VIA_cntl
FORCE_NO_SYMBOL $02DF
COMMENT $02E2 mux=1, disable mux
FORCE_SYMBOL $02E2 VIA_port_b
COMMENT $02E4 clear D/A register
FORCE_SYMBOL $02E4 VIA_port_a
COMMENT $02E6 mux=1, enable mux
FORCE_SYMBOL $02E6 VIA_port_b
COMMENT $02E8 do it again
FORCE_SYMBOL $02E8 VIA_port_b
FORCE_NO_SYMBOL $02EA
COMMENT $02EC disable mux
FORCE_SYMBOL $02EC VIA_port_b
COMMENT $02EE load our calculated reset value
FORCE_SYMBOL $02EE RECAL_COUNTER_RESET
COMMENT $02F0 and store it to our timer counter...
FORCE_SYMBOL $02F0 digit_recal_counter
COMMENT $02F3 rethink our VIAB value
COMMENT $02F3 data reg B from 6522
FORCE_SYMBOL $02F3 VIA_port_b
COMMENT $02F5 save top 5 bits, mask off bottom 3
FORCE_NO_SYMBOL $02F5
COMMENT $02F7 set S/H, SEL 0, SEL 1
FORCE_NO_SYMBOL $02F7
COMMENT $02F9 and remember it
FORCE_SYMBOL $02F9 via_b_start
COMMENT $02FC and do one sample-byte
COMMENT_LINE $02FC load current digit byte and increment counter
COMMENT $02FC decrement our counter, used for wait_recal
FORCE_SYMBOL $02FC digit_recal_counter
COMMENT $02FF is there a digital sample to be played?
FORCE_SYMBOL $02FF digit_is_playing
COMMENT $0302 no, than jump out of here
COMMENT $0304 otherwise we wait till the last played
COMMENT $0304 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0304
COMMENT $0306 Wait for T2 to time out
FORCE_SYMBOL $0306 VIA_int_flags
COMMENT $0308 repeat
COMMENT_LINE $030A sample-byte is finnished
COMMENT $030A if it is zero, than we are finnished
FORCE_SYMBOL $030A digit_start_pos
COMMENT $030E with this sample, otherwise we continue further below
COMMENT_LINE $0310 if we are done, should we restart?
COMMENT $0310 is this sample a looping one?
FORCE_SYMBOL $0310 digit_looping
COMMENT $0313 store it to is_playing
FORCE_SYMBOL $0313 digit_is_playing
COMMENT $0316 if none looping... we are done
COMMENT_LINE $0318 but we still must use the timer
COMMENT_LINE $0318 ok, for restart, we only change current position
COMMENT $0318 load the start position
FORCE_SYMBOL $0318 digit_end_pos
COMMENT_LINE $031C this is the end_position of the sample,
COMMENT_LINE $031C since we go backwards
COMMENT $031C and restart the timer, next byte
COMMENT_LINE $031E is played next round...
COMMENT_LINE $031E here our normal 'digit_byte_playing_section'
COMMENT $031E load the next sample_byte to A
COMMENT_LINE $0320 and store it to the 6522 -> PSG
COMMENT $0320 store in reg A in 6522 (DAC)
FORCE_SYMBOL $0320 VIA_port_a
COMMENT_LINE $0322 following must come after the above, or we
COMMENT_LINE $0322 put noise to the psg,
COMMENT_LINE $0322 likewise, before storing anything else to
COMMENT_LINE $0322 port A, we will disable the connection to PSG
COMMENT $0322 this sets the MUX of 6522 to PSG
COMMENT $0322 load the calculated VIA B
FORCE_SYMBOL $0322 via_b_start
COMMENT $0325 write back to reg B in 6522
FORCE_SYMBOL $0325 VIA_port_b
COMMENT $0327 and disable the mux, so no junk will
FORCE_SYMBOL $0327 VIA_port_b
COMMENT_LINE $0329 enter our PSG-DAC...
COMMENT $0329 restart timer...
COMMENT $0329 load the timer 2 value we calculated
FORCE_SYMBOL $0329 T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $032C and set the timer
FORCE_SYMBOL $032C VIA_t2_lo
COMMENT_LINE $032F ***************************************************************************
COMMENT_LINE $032F position in D
COMMENT $032F save the position
COMMENT $0331 play one sample_byte
COMMENT_LINE $0331 load current digit byte and increment counter
COMMENT $0331 decrement our counter, used for wait_recal
FORCE_SYMBOL $0331 digit_recal_counter
COMMENT $0334 is there a digital sample to be played?
FORCE_SYMBOL $0334 digit_is_playing
COMMENT $0337 no, than jump out of here
COMMENT $0339 otherwise we wait till the last played
COMMENT $0339 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0339
COMMENT $033B Wait for T2 to time out
FORCE_SYMBOL $033B VIA_int_flags
COMMENT $033D repeat
COMMENT_LINE $033F sample-byte is finnished
COMMENT $033F if it is zero, than we are finnished
FORCE_SYMBOL $033F digit_start_pos
COMMENT $0343 with this sample, otherwise we continue further below
COMMENT_LINE $0345 if we are done, should we restart?
COMMENT $0345 is this sample a looping one?
FORCE_SYMBOL $0345 digit_looping
COMMENT $0348 store it to is_playing
FORCE_SYMBOL $0348 digit_is_playing
COMMENT $034B if none looping... we are done
COMMENT_LINE $034D but we still must use the timer
COMMENT_LINE $034D ok, for restart, we only change current position
COMMENT $034D load the start position
FORCE_SYMBOL $034D digit_end_pos
COMMENT_LINE $0351 this is the end_position of the sample,
COMMENT_LINE $0351 since we go backwards
COMMENT $0351 and restart the timer, next byte
COMMENT_LINE $0353 is played next round...
COMMENT_LINE $0353 here our normal 'digit_byte_playing_section'
COMMENT $0353 load the next sample_byte to A
COMMENT_LINE $0355 and store it to the 6522 -> PSG
COMMENT $0355 store in reg A in 6522 (DAC)
FORCE_SYMBOL $0355 VIA_port_a
COMMENT_LINE $0357 following must come after the above, or we
COMMENT_LINE $0357 put noise to the psg,
COMMENT_LINE $0357 likewise, before storing anything else to
COMMENT_LINE $0357 port A, we will disable the connection to PSG
COMMENT $0357 this sets the MUX of 6522 to PSG
COMMENT $0357 load the calculated VIA B
FORCE_SYMBOL $0357 via_b_start
COMMENT $035A write back to reg B in 6522
FORCE_SYMBOL $035A VIA_port_b
COMMENT $035C and disable the mux, so no junk will
FORCE_SYMBOL $035C VIA_port_b
COMMENT_LINE $035E enter our PSG-DAC...
COMMENT $035E restart timer...
COMMENT $035E load the timer 2 value we calculated
FORCE_SYMBOL $035E T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $0361 and set the timer
FORCE_SYMBOL $0361 VIA_t2_lo
COMMENT $0363 restore position
COMMENT $0365 Store Y in D/A register
FORCE_SYMBOL $0365 VIA_port_a
COMMENT $0367 Blank low, zero high?
FORCE_NO_SYMBOL $0367
FORCE_SYMBOL $0369 VIA_cntl
COMMENT $036C Enable mux
FORCE_SYMBOL $036C VIA_port_b
COMMENT $036E Clear shift regigster
FORCE_SYMBOL $036E VIA_shift_reg
COMMENT $0370 Disable mux
FORCE_SYMBOL $0370 VIA_port_b
COMMENT_LINE $0372 PSHS D ; save the position
COMMENT_LINE $0372 NEXT_DIGIT_BYTE_FASTER_NO_I ; play one sample_byte
COMMENT_LINE $0372 PULS D ; restore position
COMMENT $0372 Store X in D/A register
FORCE_SYMBOL $0372 VIA_port_a
COMMENT $0374 enable timer
FORCE_SYMBOL $0374 VIA_t1_cnt_hi
COMMENT $0376 t1 flag
FORCE_NO_SYMBOL $0376
FORCE_SYMBOL $0378 VIA_int_flags
COMMENT_LINE $037D ***************************************************************************
COMMENT_LINE $037D vector list in X
COMMENT $037D play one sample-byte
COMMENT_LINE $037D load current digit byte and increment counter
COMMENT $037D decrement our counter, used for wait_recal
FORCE_SYMBOL $037D digit_recal_counter
COMMENT $0380 is there a digital sample to be played?
FORCE_SYMBOL $0380 digit_is_playing
COMMENT $0383 no, than jump out of here
COMMENT $0385 otherwise we wait till the last played
COMMENT $0385 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0385
COMMENT $0387 Wait for T2 to time out
FORCE_SYMBOL $0387 VIA_int_flags
COMMENT $0389 repeat
COMMENT_LINE $038B sample-byte is finnished
COMMENT $038B if it is zero, than we are finnished
FORCE_SYMBOL $038B digit_start_pos
COMMENT $038F with this sample, otherwise we continue further below
COMMENT_LINE $0391 if we are done, should we restart?
COMMENT $0391 is this sample a looping one?
FORCE_SYMBOL $0391 digit_looping
COMMENT $0394 store it to is_playing
FORCE_SYMBOL $0394 digit_is_playing
COMMENT $0397 if none looping... we are done
COMMENT_LINE $0399 but we still must use the timer
COMMENT_LINE $0399 ok, for restart, we only change current position
COMMENT $0399 load the start position
FORCE_SYMBOL $0399 digit_end_pos
COMMENT_LINE $039D this is the end_position of the sample,
COMMENT_LINE $039D since we go backwards
COMMENT $039D and restart the timer, next byte
COMMENT_LINE $039F is played next round...
COMMENT_LINE $039F here our normal 'digit_byte_playing_section'
COMMENT $039F load the next sample_byte to A
COMMENT_LINE $03A1 and store it to the 6522 -> PSG
COMMENT $03A1 store in reg A in 6522 (DAC)
FORCE_SYMBOL $03A1 VIA_port_a
COMMENT_LINE $03A3 following must come after the above, or we
COMMENT_LINE $03A3 put noise to the psg,
COMMENT_LINE $03A3 likewise, before storing anything else to
COMMENT_LINE $03A3 port A, we will disable the connection to PSG
COMMENT $03A3 this sets the MUX of 6522 to PSG
COMMENT $03A3 load the calculated VIA B
FORCE_SYMBOL $03A3 via_b_start
COMMENT $03A6 write back to reg B in 6522
FORCE_SYMBOL $03A6 VIA_port_b
COMMENT $03A8 and disable the mux, so no junk will
FORCE_SYMBOL $03A8 VIA_port_b
COMMENT_LINE $03AA enter our PSG-DAC...
COMMENT $03AA restart timer...
COMMENT $03AA load the timer 2 value we calculated
FORCE_SYMBOL $03AA T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $03AD and set the timer
FORCE_SYMBOL $03AD VIA_t2_lo
COMMENT $03AF load # of lines in this list
COMMENT $03B1 helper RAM, here we store the # of lines
FORCE_NO_SYMBOL $03B1
COMMENT $03B4 load y, x
FORCE_NO_SYMBOL $03B4
COMMENT $03B6 draw the line
COMMENT $03B6 Send Y to A/D
FORCE_SYMBOL $03B6 VIA_port_a
COMMENT $03B8 Enable mux switched
FORCE_SYMBOL $03B8 VIA_port_b
COMMENT $03BA Point to next coordinate pair X=X+2
FORCE_NO_SYMBOL $03BA
COMMENT $03BC Wait a moment
COMMENT $03BD Disable mux
FORCE_SYMBOL $03BD VIA_port_b
COMMENT $03BF Send X to A/D
FORCE_SYMBOL $03BF VIA_port_a
COMMENT $03C1 Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $03C1
COMMENT $03C4 Put pattern in shift register
FORCE_SYMBOL $03C4 VIA_shift_reg
COMMENT $03C6 Set T1H (scale factor), enabling t1
FORCE_SYMBOL $03C6 VIA_t1_cnt_hi
COMMENT $03C8 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $03C8
FORCE_SYMBOL $03CB VIA_int_flags
COMMENT $03D0 Clear shift register (blank output)
FORCE_SYMBOL $03D0 VIA_shift_reg
COMMENT $03D2 and play one sample-byte
COMMENT_LINE $03D2 load current digit byte and increment counter
COMMENT $03D2 decrement our counter, used for wait_recal
FORCE_SYMBOL $03D2 digit_recal_counter
COMMENT $03D5 is there a digital sample to be played?
FORCE_SYMBOL $03D5 digit_is_playing
COMMENT $03D8 no, than jump out of here
COMMENT $03DA otherwise we wait till the last played
COMMENT $03DA B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $03DA
COMMENT $03DC Wait for T2 to time out
FORCE_SYMBOL $03DC VIA_int_flags
COMMENT $03DE repeat
COMMENT_LINE $03E0 sample-byte is finnished
COMMENT $03E0 if it is zero, than we are finnished
FORCE_SYMBOL $03E0 digit_start_pos
COMMENT $03E4 with this sample, otherwise we continue further below
COMMENT_LINE $03E6 if we are done, should we restart?
COMMENT $03E6 is this sample a looping one?
FORCE_SYMBOL $03E6 digit_looping
COMMENT $03E9 store it to is_playing
FORCE_SYMBOL $03E9 digit_is_playing
COMMENT $03EC if none looping... we are done
COMMENT_LINE $03EE but we still must use the timer
COMMENT_LINE $03EE ok, for restart, we only change current position
COMMENT $03EE load the start position
FORCE_SYMBOL $03EE digit_end_pos
COMMENT_LINE $03F2 this is the end_position of the sample,
COMMENT_LINE $03F2 since we go backwards
COMMENT $03F2 and restart the timer, next byte
COMMENT_LINE $03F4 is played next round...
COMMENT_LINE $03F4 here our normal 'digit_byte_playing_section'
COMMENT $03F4 load the next sample_byte to A
COMMENT_LINE $03F6 and store it to the 6522 -> PSG
COMMENT $03F6 store in reg A in 6522 (DAC)
FORCE_SYMBOL $03F6 VIA_port_a
COMMENT_LINE $03F8 following must come after the above, or we
COMMENT_LINE $03F8 put noise to the psg,
COMMENT_LINE $03F8 likewise, before storing anything else to
COMMENT_LINE $03F8 port A, we will disable the connection to PSG
COMMENT $03F8 this sets the MUX of 6522 to PSG
COMMENT $03F8 load the calculated VIA B
FORCE_SYMBOL $03F8 via_b_start
COMMENT $03FB write back to reg B in 6522
FORCE_SYMBOL $03FB VIA_port_b
COMMENT $03FD and disable the mux, so no junk will
FORCE_SYMBOL $03FD VIA_port_b
COMMENT_LINE $03FF enter our PSG-DAC...
COMMENT $03FF restart timer...
COMMENT $03FF load the timer 2 value we calculated
FORCE_SYMBOL $03FF T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $0402 and set the timer
FORCE_SYMBOL $0402 VIA_t2_lo
COMMENT $0404 load line count
FORCE_NO_SYMBOL $0404
COMMENT $0407 decrement it
COMMENT $0408 go back for more points if not below 0
COMMENT_LINE $040B ***************************************************************************
COMMENT_LINE $040B intensity in A
COMMENT $040B Save intensity in $C827
FORCE_SYMBOL $040B Vec_Brightness
COMMENT $040E Store intensity in D/A
FORCE_SYMBOL $040E VIA_port_a
COMMENT $0410 mux disabled channel 2
FORCE_NO_SYMBOL $0410
FORCE_SYMBOL $0413 VIA_port_b
COMMENT $0415 mux enabled channel 2
FORCE_SYMBOL $0415 VIA_port_b
COMMENT $0417 do it again just because ?
FORCE_SYMBOL $0417 VIA_port_b
FORCE_NO_SYMBOL $0419
COMMENT $041B turn off mux
FORCE_SYMBOL $041B VIA_port_b
COMMENT_LINE $041E ***************************************************************************
COMMENT_LINE $041E String pointer in D
COMMENT $041E Save string pointer
FORCE_SYMBOL $041E Vec_Str_Ptr
COMMENT_LINE $0421 load current digit byte and increment counter
COMMENT $0421 decrement our counter, used for wait_recal
FORCE_SYMBOL $0421 digit_recal_counter
COMMENT $0424 is there a digital sample to be played?
FORCE_SYMBOL $0424 digit_is_playing
COMMENT $0427 no, than jump out of here
COMMENT $0429 otherwise we wait till the last played
COMMENT $0429 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0429
COMMENT $042B Wait for T2 to time out
FORCE_SYMBOL $042B VIA_int_flags
COMMENT $042D repeat
COMMENT_LINE $042F sample-byte is finnished
COMMENT $042F if it is zero, than we are finnished
FORCE_SYMBOL $042F digit_start_pos
COMMENT $0433 with this sample, otherwise we continue further below
COMMENT_LINE $0435 if we are done, should we restart?
COMMENT $0435 is this sample a looping one?
FORCE_SYMBOL $0435 digit_looping
COMMENT $0438 store it to is_playing
FORCE_SYMBOL $0438 digit_is_playing
COMMENT $043B if none looping... we are done
COMMENT_LINE $043D but we still must use the timer
COMMENT_LINE $043D ok, for restart, we only change current position
COMMENT $043D load the start position
FORCE_SYMBOL $043D digit_end_pos
COMMENT_LINE $0441 this is the end_position of the sample,
COMMENT_LINE $0441 since we go backwards
COMMENT $0441 and restart the timer, next byte
COMMENT_LINE $0443 is played next round...
COMMENT_LINE $0443 here our normal 'digit_byte_playing_section'
COMMENT $0443 load the next sample_byte to A
COMMENT_LINE $0445 and store it to the 6522 -> PSG
COMMENT $0445 store in reg A in 6522 (DAC)
FORCE_SYMBOL $0445 VIA_port_a
COMMENT_LINE $0447 following must come after the above, or we
COMMENT_LINE $0447 put noise to the psg,
COMMENT_LINE $0447 likewise, before storing anything else to
COMMENT_LINE $0447 port A, we will disable the connection to PSG
COMMENT $0447 this sets the MUX of 6522 to PSG
COMMENT $0447 load the calculated VIA B
FORCE_SYMBOL $0447 via_b_start
COMMENT $044A write back to reg B in 6522
FORCE_SYMBOL $044A VIA_port_b
COMMENT $044C and disable the mux, so no junk will
FORCE_SYMBOL $044C VIA_port_b
COMMENT_LINE $044E enter our PSG-DAC...
COMMENT $044E restart timer...
COMMENT $044E load the timer 2 value we calculated
FORCE_SYMBOL $044E T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $0451 and set the timer
FORCE_SYMBOL $0451 VIA_t2_lo
COMMENT $0453 Point to start of chargen bitmaps
FORCE_SYMBOL $0453 Char_Table
COMMENT $0456 a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $0456
COMMENT $0459 Clear D/A output
FORCE_SYMBOL $0459 VIA_port_a
COMMENT $045B Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $045B VIA_aux_cntl
COMMENT $045D Point to start of chargen bitmaps
FORCE_SYMBOL $045D Char_Table
COMMENT_LINE $0460 first entry here, ramp is disabled
COMMENT_LINE $0460 if there was a jump from below
COMMENT_LINE $0460 ramp will be enabled by next line
COMMENT $0460 ramp off/on = mux to channel 1
FORCE_SYMBOL $0460 VIA_port_b
COMMENT $0462 Enable mux
FORCE_SYMBOL $0462 VIA_port_b
COMMENT $0464 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
FORCE_NO_SYMBOL $0464
COMMENT $0467 Wait a moment
COMMENT $0468 Disable mux
FORCE_SYMBOL $0468 VIA_port_b
COMMENT $046A Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $046A VIA_port_b
COMMENT $046C Enable mux
FORCE_SYMBOL $046C VIA_port_b
COMMENT $046E I think this is a delay only
FORCE_NO_SYMBOL $046E
COMMENT $0471 disable mux
FORCE_SYMBOL $0471 VIA_port_b
COMMENT $0473 Get text width
FORCE_SYMBOL $0473 Vec_Text_Width
COMMENT $0476 Send it to the D/A
FORCE_SYMBOL $0476 VIA_port_a
COMMENT $0478 both to ORB, both ENABLE RAMP, a:-> disable mux, b:-> enable mux
FORCE_NO_SYMBOL $0478
COMMENT $047B Point to start of text string
FORCE_SYMBOL $047B Vec_Str_Ptr
COMMENT $047E [4]enable RAMP, disable mux
FORCE_SYMBOL $047E VIA_port_b
COMMENT $0480 [3]
COMMENT_LINE $0482 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $0482 13 cycles overhead
COMMENT_LINE $0482 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $0482 [+5]Get bitmap from chargen table
COMMENT $0484 [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $0484 VIA_shift_reg
COMMENT $0486 [+6]Get next character
COMMENT $0488 [+3]Go back if not terminator
COMMENT $048A [2]disable mux, disable ramp
FORCE_NO_SYMBOL $048A
COMMENT $048C [4]disable RAMP, disable mux
FORCE_SYMBOL $048C VIA_port_b
COMMENT $048E Negate text width to D/A
FORCE_SYMBOL $048E VIA_port_a
COMMENT $0490 enable ramp, disable mux
FORCE_NO_SYMBOL $0490
COMMENT $0492 enable RAMP, disable mux
FORCE_SYMBOL $0492 VIA_port_b
COMMENT $0494 [4]Check for last row
FORCE_SYMBOL $0494 Char_Table_End
COMMENT $0497 [3]Branch if last row
COMMENT $0499 [3]Point to next chargen row
FORCE_NO_SYMBOL $0499
COMMENT $049C [6]Get string length
COMMENT $049E [7]
FORCE_SYMBOL $049E Vec_Str_Ptr
COMMENT $04A1 [2] -  2
FORCE_NO_SYMBOL $04A1
COMMENT $04A3 [2] *  2 calculate return "way"
COMMENT $04A4 [3]Delay a moment
COMMENT $04A6 [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $04A6
COMMENT $04A8 [2]
COMMENT $04A9 [2]
COMMENT $04AA Delay some more in a loop
COMMENT $04AC disable RAMP, disable mux
FORCE_SYMBOL $04AC VIA_port_b
COMMENT_LINE $04AE d can be destroyed here!
COMMENT_LINE $04AE load current digit byte and increment counter
COMMENT $04AE decrement our counter, used for wait_recal
FORCE_SYMBOL $04AE digit_recal_counter
COMMENT $04B1 is there a digital sample to be played?
FORCE_SYMBOL $04B1 digit_is_playing
COMMENT $04B4 no, than jump out of here
COMMENT $04B6 otherwise we wait till the last played
COMMENT $04B6 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $04B6
COMMENT $04B8 Wait for T2 to time out
FORCE_SYMBOL $04B8 VIA_int_flags
COMMENT $04BA repeat
COMMENT_LINE $04BC sample-byte is finnished
COMMENT $04BC if it is zero, than we are finnished
FORCE_SYMBOL $04BC digit_start_pos
COMMENT $04C0 with this sample, otherwise we continue further below
COMMENT_LINE $04C2 if we are done, should we restart?
COMMENT $04C2 is this sample a looping one?
FORCE_SYMBOL $04C2 digit_looping
COMMENT $04C5 store it to is_playing
FORCE_SYMBOL $04C5 digit_is_playing
COMMENT $04C8 if none looping... we are done
COMMENT_LINE $04CA but we still must use the timer
COMMENT_LINE $04CA ok, for restart, we only change current position
COMMENT $04CA load the start position
FORCE_SYMBOL $04CA digit_end_pos
COMMENT_LINE $04CE this is the end_position of the sample,
COMMENT_LINE $04CE since we go backwards
COMMENT $04CE and restart the timer, next byte
COMMENT_LINE $04D0 is played next round...
COMMENT_LINE $04D0 here our normal 'digit_byte_playing_section'
COMMENT $04D0 load the next sample_byte to A
COMMENT_LINE $04D2 and store it to the 6522 -> PSG
COMMENT $04D2 store in reg A in 6522 (DAC)
FORCE_SYMBOL $04D2 VIA_port_a
COMMENT_LINE $04D4 following must come after the above, or we
COMMENT_LINE $04D4 put noise to the psg,
COMMENT_LINE $04D4 likewise, before storing anything else to
COMMENT_LINE $04D4 port A, we will disable the connection to PSG
COMMENT $04D4 this sets the MUX of 6522 to PSG
COMMENT $04D4 load the calculated VIA B
FORCE_SYMBOL $04D4 via_b_start
COMMENT $04D7 write back to reg B in 6522
FORCE_SYMBOL $04D7 VIA_port_b
COMMENT $04D9 and disable the mux, so no junk will
FORCE_SYMBOL $04D9 VIA_port_b
COMMENT_LINE $04DB enter our PSG-DAC...
COMMENT $04DB restart timer...
COMMENT $04DB load the timer 2 value we calculated
FORCE_SYMBOL $04DB T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $04DE and set the timer
FORCE_SYMBOL $04DE VIA_t2_lo
COMMENT $04E0 [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $04E0
COMMENT $04E2 disable RAMP, disable mux
FORCE_SYMBOL $04E2 VIA_port_b
COMMENT $04E4 Get text height
FORCE_SYMBOL $04E4 Vec_Text_Height
COMMENT $04E7 Store text height in D/A [go down -> later]
FORCE_SYMBOL $04E7 VIA_port_a
COMMENT $04E9 Enable mux
FORCE_SYMBOL $04E9 VIA_port_b
FORCE_NO_SYMBOL $04EB
COMMENT $04EE Wait a moment
COMMENT $04EF disable RAMP, disable mux
FORCE_SYMBOL $04EF VIA_port_b
COMMENT $04F1 Clear D/A
FORCE_SYMBOL $04F1 VIA_port_a
COMMENT $04F3 enable RAMP, disable mux
FORCE_SYMBOL $04F3 VIA_port_b
COMMENT $04F5 disable RAMP, disable mux
FORCE_SYMBOL $04F5 VIA_port_b
COMMENT $04F7 $0x = ENABLE RAMP?
FORCE_NO_SYMBOL $04F7
COMMENT $04F9 Go back for next scan line
FORCE_NO_SYMBOL $04FC
COMMENT $04FE T1->PB7 enabled
FORCE_SYMBOL $04FE VIA_aux_cntl
COMMENT_LINE $0500 load current digit byte and increment counter
COMMENT $0500 decrement our counter, used for wait_recal
FORCE_SYMBOL $0500 digit_recal_counter
COMMENT $0503 is there a digital sample to be played?
FORCE_SYMBOL $0503 digit_is_playing
COMMENT $0506 no, than jump out of here
COMMENT $0508 otherwise we wait till the last played
COMMENT $0508 B-reg = T2 interrupt bit
FORCE_NO_SYMBOL $0508
COMMENT $050A Wait for T2 to time out
FORCE_SYMBOL $050A VIA_int_flags
COMMENT $050C repeat
COMMENT_LINE $050E sample-byte is finnished
COMMENT $050E if it is zero, than we are finnished
FORCE_SYMBOL $050E digit_start_pos
COMMENT $0512 with this sample, otherwise we continue further below
COMMENT_LINE $0514 if we are done, should we restart?
COMMENT $0514 is this sample a looping one?
FORCE_SYMBOL $0514 digit_looping
COMMENT $0517 store it to is_playing
FORCE_SYMBOL $0517 digit_is_playing
COMMENT $051A if none looping... we are done
COMMENT_LINE $051C but we still must use the timer
COMMENT_LINE $051C ok, for restart, we only change current position
COMMENT $051C load the start position
FORCE_SYMBOL $051C digit_end_pos
COMMENT_LINE $0520 this is the end_position of the sample,
COMMENT_LINE $0520 since we go backwards
COMMENT $0520 and restart the timer, next byte
COMMENT_LINE $0522 is played next round...
COMMENT_LINE $0522 here our normal 'digit_byte_playing_section'
COMMENT $0522 load the next sample_byte to A
COMMENT_LINE $0524 and store it to the 6522 -> PSG
COMMENT $0524 store in reg A in 6522 (DAC)
FORCE_SYMBOL $0524 VIA_port_a
COMMENT_LINE $0526 following must come after the above, or we
COMMENT_LINE $0526 put noise to the psg,
COMMENT_LINE $0526 likewise, before storing anything else to
COMMENT_LINE $0526 port A, we will disable the connection to PSG
COMMENT $0526 this sets the MUX of 6522 to PSG
COMMENT $0526 load the calculated VIA B
FORCE_SYMBOL $0526 via_b_start
COMMENT $0529 write back to reg B in 6522
FORCE_SYMBOL $0529 VIA_port_b
COMMENT $052B and disable the mux, so no junk will
FORCE_SYMBOL $052B VIA_port_b
COMMENT_LINE $052D enter our PSG-DAC...
COMMENT $052D restart timer...
COMMENT $052D load the timer 2 value we calculated
FORCE_SYMBOL $052D T2_TIMER_PEROID_ENDIAN_REVERSE
COMMENT $0530 and set the timer
FORCE_SYMBOL $0530 VIA_t2_lo
COMMENT $0532 Reset the zero reference
FORCE_SYMBOL $0532 Reset0Ref
COMMENT_LINE $0535 ***** GAME STATES ******
COMMENT $0535 Splash screen
COMMENT_LINE $0535 Splash screen state
COMMENT_LINE $0535 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0535 ***** CONSTANTS *****
COMMENT_LINE $0535 ***** MEMORY MAP *****
COMMENT_LINE $0535 ***** INIT *****
COMMENT $0535 Reset stuff
FORCE_SYMBOL $0536 planet_rot_splash
FORCE_SYMBOL $0539 intens_splash
FORCE_SYMBOL $053C rot_delay
FORCE_SYMBOL $0540 framecount_splash
FORCE_SYMBOL $0543 SPLASH_ROT_DELAY
FORCE_SYMBOL $0545 rot_delay
COMMENT_LINE $0549 ***** FRAME *****
COMMENT_LINE $0549 Fade in
FORCE_SYMBOL $0549 intens_splash
FORCE_SYMBOL $054C MAX_INTENSITY
FORCE_SYMBOL $0550 FADE_SPEED
FORCE_SYMBOL $0552 intens_splash
COMMENT $0555 Store intensity in D/A
FORCE_SYMBOL $0555 VIA_port_a
COMMENT $0557 Save intensity in $C827
FORCE_SYMBOL $0557 Vec_Brightness
COMMENT $055A mux disabled channel 2
FORCE_NO_SYMBOL $055A
FORCE_SYMBOL $055D VIA_port_b
COMMENT $055F mux enabled channel 2
FORCE_SYMBOL $055F VIA_port_b
COMMENT $0561 do it again just because
FORCE_SYMBOL $0561 VIA_port_b
FORCE_NO_SYMBOL $0563
COMMENT $0565 turn off mux
FORCE_SYMBOL $0565 VIA_port_b
COMMENT_LINE $0567 Tick rotation
FORCE_SYMBOL $0567 rot_delay
FORCE_SYMBOL $056C SPLASH_ROT_DELAY
FORCE_SYMBOL $056E rot_delay
FORCE_SYMBOL $0571 planet_rot_splash
COMMENT $0575 Loop if needed
FORCE_SYMBOL $057B planet_rot_splash
COMMENT_LINE $057E Draw planet
COMMENT $057E Grab planet rot
FORCE_SYMBOL $057E planet_rot_splash
COMMENT $0581 x2 to use as offset into frame index
COMMENT $0582 x points to the index of frames
FORCE_SYMBOL $0582 theplanet_index
COMMENT $0585 x points to the actual contours :)
COMMENT $0587 /BLANK low, /ZERO high
FORCE_NO_SYMBOL $0587
FORCE_SYMBOL $0589 VIA_cntl
COMMENT $058B Set scale for the draw
FORCE_SYMBOL $058B intens_splash
COMMENT $0590 Wait for move
FORCE_NO_SYMBOL $0590
COMMENT $0592 Wait for timer 1
FORCE_SYMBOL $0592 VIA_int_flags
COMMENT $0596 Set scale
FORCE_SYMBOL $0596 VIA_t1_cnt_lo
COMMENT $0598 Get num vectors in this contour
COMMENT $059A Write to vec count
FORCE_SYMBOL $059A Vec_Misc_Count
COMMENT $059D Get next coordinate pair -- this is the absolute start pos so we can add the offset here
FORCE_NO_SYMBOL $059D
COMMENT $059F Send Y to A/D
FORCE_SYMBOL $059F VIA_port_a
COMMENT $05A1 Enable mux
FORCE_SYMBOL $05A1 VIA_port_b
COMMENT $05A3 Point to next coordinate pair
FORCE_NO_SYMBOL $05A3
COMMENT $05A5 Wait a moment
COMMENT $05A6 Disable mux
FORCE_SYMBOL $05A6 VIA_port_b
COMMENT $05A8 Send X to A/D
FORCE_SYMBOL $05A8 VIA_port_a
COMMENT $05AA Shift reg=0 (no draw, move only), T1H=0
FORCE_NO_SYMBOL $05AA
COMMENT $05AD A->D00A, B->D005 -- DO THE MOVE
COMMENT $05AF Update count
FORCE_SYMBOL $05AF Vec_Misc_Count
COMMENT $05B2 Grab the coord pair
FORCE_NO_SYMBOL $05B2
COMMENT $05B4 Send Y to A/D
FORCE_SYMBOL $05B4 VIA_port_a
COMMENT $05B6 Enable mux
FORCE_SYMBOL $05B6 VIA_port_b
COMMENT $05B8 Point to next coordinate pair
FORCE_NO_SYMBOL $05B8
COMMENT $05BA Wait a moment
COMMENT $05BB Disable mux
FORCE_SYMBOL $05BB VIA_port_b
COMMENT $05BD Send X to A/D
FORCE_SYMBOL $05BD VIA_port_a
COMMENT $05BF Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $05BF
COMMENT $05C2 Put pattern in shift register
FORCE_SYMBOL $05C2 VIA_shift_reg
COMMENT $05C4 Set T1H to start the ramp
FORCE_SYMBOL $05C4 VIA_t1_cnt_hi
COMMENT $05C6 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $05C6
COMMENT $05C9 Wait for T1 to time out
FORCE_SYMBOL $05C9 VIA_int_flags
COMMENT $05CD Wait a moment more
COMMENT $05CE Clear shift register (blank output)
FORCE_SYMBOL $05CE VIA_shift_reg
COMMENT $05D0 Decrement line count
FORCE_SYMBOL $05D0 Vec_Misc_Count
COMMENT $05D4 Go back for more points
COMMENT $05D6 Return beam to origin
FORCE_NO_SYMBOL $05D6
COMMENT $05D9 /BLANK low and /ZERO low
FORCE_SYMBOL $05D9 VIA_cntl
COMMENT $05DB clear shift register
FORCE_SYMBOL $05DB VIA_shift_reg
FORCE_NO_SYMBOL $05DD
COMMENT $05E0 clear D/A register
FORCE_SYMBOL $05E0 VIA_port_a
COMMENT $05E2 mux=1, disable mux
FORCE_SYMBOL $05E2 VIA_port_b
COMMENT $05E4 mux=1, enable mux
FORCE_SYMBOL $05E4 VIA_port_b
COMMENT $05E6 do it again
FORCE_SYMBOL $05E6 VIA_port_b
FORCE_NO_SYMBOL $05E8
COMMENT $05EA disable mux
FORCE_SYMBOL $05EA VIA_port_b
COMMENT $05EC Check if x now points to a zero (end of frame)
FORCE_NO_SYMBOL $05EC
FORCE_SYMBOL $05EE FRAME_DELIMITER
COMMENT $05F0 Loop if not
COMMENT_LINE $05F2 Skip input / call to action text if not faded in yet
FORCE_SYMBOL $05F2 intens_splash
FORCE_SYMBOL $05F5 MAX_INTENSITY
COMMENT_LINE $05FB Set text intensity
FORCE_SYMBOL $05FB framecount_splash
FORCE_NO_SYMBOL $0600
FORCE_NO_SYMBOL $0604
FORCE_NO_SYMBOL $0608
COMMENT_LINE $060C sbca #192
FORCE_NO_SYMBOL $060C
FORCE_SYMBOL $060E scratch
FORCE_NO_SYMBOL $0611
FORCE_SYMBOL $0613 scratch
COMMENT $061A Store intensity in D/A
FORCE_SYMBOL $061A VIA_port_a
COMMENT $061C Save intensity in $C827
FORCE_SYMBOL $061C Vec_Brightness
COMMENT $061F mux disabled channel 2
FORCE_NO_SYMBOL $061F
FORCE_SYMBOL $0622 VIA_port_b
COMMENT $0624 mux enabled channel 2
FORCE_SYMBOL $0624 VIA_port_b
COMMENT $0626 do it again just because
FORCE_SYMBOL $0626 VIA_port_b
FORCE_NO_SYMBOL $0628
COMMENT $062A turn off mux
FORCE_SYMBOL $062A VIA_port_b
COMMENT_LINE $062C Choose whether to do landmarks or title/cta text
FORCE_SYMBOL $062C framecount_splash
FORCE_NO_SYMBOL $062F
FORCE_SYMBOL $0632 framecount_splash
FORCE_NO_SYMBOL $0635
COMMENT_LINE $063B Show landmark labels: UNROLL YOUR LOOPS FOR GREAT JUSTICE .......... and also laziness
FORCE_SYMBOL $063B LM_MOVE_SCALE
COMMENT $063D Set scale for the LM moves
FORCE_SYMBOL $063D VIA_t1_cnt_lo
COMMENT $063F Set text params for labels
FORCE_SYMBOL $0641 Vec_Text_Height
FORCE_NO_SYMBOL $0644
FORCE_SYMBOL $0646 Vec_Text_Width
COMMENT_LINE $0649 Unroll: 1
FORCE_SYMBOL $0649 landmark1
COMMENT $064C Grab curr rot
FORCE_SYMBOL $064C planet_rot_splash
COMMENT $064F x2 -- each coord pair's 2 bytes
COMMENT $0650 Step forward by a
FORCE_NO_SYMBOL $0652
FORCE_SYMBOL $0654 INVISIBLE
FORCE_SYMBOL $065A LABEL_OFFSET
COMMENT $065C Store Y in D/A register
FORCE_SYMBOL $065C VIA_port_a
COMMENT $065E Enable mux
FORCE_SYMBOL $065E VIA_port_b
COMMENT $0660 Blank low, zero high
FORCE_NO_SYMBOL $0660
FORCE_SYMBOL $0662 VIA_cntl
COMMENT $0664 Clear shift register
FORCE_SYMBOL $0664 VIA_shift_reg
COMMENT $0666 Disable mux
FORCE_SYMBOL $0666 VIA_port_b
COMMENT $0668 Store X in D/A register
FORCE_SYMBOL $0668 VIA_port_a
COMMENT $066A timer 1 count high
FORCE_SYMBOL $066A VIA_t1_cnt_hi
FORCE_SYMBOL $066C lm1_name
FORCE_NO_SYMBOL $066F
COMMENT $0671 Wait for timer 1
FORCE_SYMBOL $0671 VIA_int_flags
FORCE_NO_SYMBOL $0678
COMMENT $067B /BLANK low and /ZERO low
FORCE_SYMBOL $067B VIA_cntl
COMMENT $067D clear shift register
FORCE_SYMBOL $067D VIA_shift_reg
FORCE_NO_SYMBOL $067F
COMMENT $0682 clear D/A register
FORCE_SYMBOL $0682 VIA_port_a
COMMENT $0684 mux=1, disable mux
FORCE_SYMBOL $0684 VIA_port_b
COMMENT $0686 mux=1, enable mux
FORCE_SYMBOL $0686 VIA_port_b
COMMENT $0688 do it again
FORCE_SYMBOL $0688 VIA_port_b
FORCE_NO_SYMBOL $068A
COMMENT $068C disable mux
FORCE_SYMBOL $068C VIA_port_b
COMMENT_LINE $068E Unroll: 1
FORCE_SYMBOL $068E landmark2
COMMENT $0691 Grab curr rot
FORCE_SYMBOL $0691 planet_rot_splash
COMMENT $0694 x2 -- each coord pair's 2 bytes
COMMENT $0695 Step forward by a
FORCE_NO_SYMBOL $0697
FORCE_SYMBOL $0699 INVISIBLE
COMMENT $069F HACK: y axis hack for TRSiLand
FORCE_NO_SYMBOL $069F
FORCE_SYMBOL $06A1 LABEL_OFFSET
COMMENT $06A3 Store Y in D/A register
FORCE_SYMBOL $06A3 VIA_port_a
COMMENT $06A5 Enable mux
FORCE_SYMBOL $06A5 VIA_port_b
COMMENT $06A7 Blank low, zero high
FORCE_NO_SYMBOL $06A7
FORCE_SYMBOL $06A9 VIA_cntl
COMMENT $06AB Clear shift register
FORCE_SYMBOL $06AB VIA_shift_reg
COMMENT $06AD Disable mux
FORCE_SYMBOL $06AD VIA_port_b
COMMENT $06AF Store X in D/A register
FORCE_SYMBOL $06AF VIA_port_a
COMMENT $06B1 timer 1 count high
FORCE_SYMBOL $06B1 VIA_t1_cnt_hi
FORCE_SYMBOL $06B3 lm2_name
FORCE_NO_SYMBOL $06B6
COMMENT $06B8 Wait for timer 1
FORCE_SYMBOL $06B8 VIA_int_flags
FORCE_NO_SYMBOL $06BF
COMMENT $06C2 /BLANK low and /ZERO low
FORCE_SYMBOL $06C2 VIA_cntl
COMMENT $06C4 clear shift register
FORCE_SYMBOL $06C4 VIA_shift_reg
FORCE_NO_SYMBOL $06C6
COMMENT $06C9 clear D/A register
FORCE_SYMBOL $06C9 VIA_port_a
COMMENT $06CB mux=1, disable mux
FORCE_SYMBOL $06CB VIA_port_b
COMMENT $06CD mux=1, enable mux
FORCE_SYMBOL $06CD VIA_port_b
COMMENT $06CF do it again
FORCE_SYMBOL $06CF VIA_port_b
FORCE_NO_SYMBOL $06D1
COMMENT $06D3 disable mux
FORCE_SYMBOL $06D3 VIA_port_b
COMMENT_LINE $06D5 Unroll: 3
FORCE_SYMBOL $06D5 landmark3
COMMENT $06D8 Grab curr rot
FORCE_SYMBOL $06D8 planet_rot_splash
COMMENT $06DB x2 -- each coord pair's 2 bytes
COMMENT $06DC Step forward by a
FORCE_NO_SYMBOL $06DE
FORCE_SYMBOL $06E0 INVISIBLE
FORCE_SYMBOL $06E6 LABEL_OFFSET
COMMENT $06E8 Store Y in D/A register
FORCE_SYMBOL $06E8 VIA_port_a
COMMENT $06EA Enable mux
FORCE_SYMBOL $06EA VIA_port_b
COMMENT $06EC Blank low, zero high
FORCE_NO_SYMBOL $06EC
FORCE_SYMBOL $06EE VIA_cntl
COMMENT $06F0 Clear shift register
FORCE_SYMBOL $06F0 VIA_shift_reg
COMMENT $06F2 Disable mux
FORCE_SYMBOL $06F2 VIA_port_b
COMMENT $06F4 Store X in D/A register
FORCE_SYMBOL $06F4 VIA_port_a
COMMENT $06F6 timer 1 count high
FORCE_SYMBOL $06F6 VIA_t1_cnt_hi
FORCE_SYMBOL $06F8 lm3_name
FORCE_NO_SYMBOL $06FB
COMMENT $06FD Wait for timer 1
FORCE_SYMBOL $06FD VIA_int_flags
FORCE_NO_SYMBOL $0704
COMMENT $0707 /BLANK low and /ZERO low
FORCE_SYMBOL $0707 VIA_cntl
COMMENT $0709 clear shift register
FORCE_SYMBOL $0709 VIA_shift_reg
FORCE_NO_SYMBOL $070B
COMMENT $070E clear D/A register
FORCE_SYMBOL $070E VIA_port_a
COMMENT $0710 mux=1, disable mux
FORCE_SYMBOL $0710 VIA_port_b
COMMENT $0712 mux=1, enable mux
FORCE_SYMBOL $0712 VIA_port_b
COMMENT $0714 do it again
FORCE_SYMBOL $0714 VIA_port_b
FORCE_NO_SYMBOL $0716
COMMENT $0718 disable mux
FORCE_SYMBOL $0718 VIA_port_b
COMMENT_LINE $071A Unroll: 4
FORCE_SYMBOL $071A landmark4
COMMENT $071D Grab curr rot
FORCE_SYMBOL $071D planet_rot_splash
COMMENT $0720 x2 -- each coord pair's 2 bytes
COMMENT $0721 Step forward by a
FORCE_NO_SYMBOL $0723
FORCE_SYMBOL $0725 INVISIBLE
FORCE_SYMBOL $072B LABEL_OFFSET
COMMENT $072D Store Y in D/A register
FORCE_SYMBOL $072D VIA_port_a
COMMENT $072F Enable mux
FORCE_SYMBOL $072F VIA_port_b
COMMENT $0731 Blank low, zero high
FORCE_NO_SYMBOL $0731
FORCE_SYMBOL $0733 VIA_cntl
COMMENT $0735 Clear shift register
FORCE_SYMBOL $0735 VIA_shift_reg
COMMENT $0737 Disable mux
FORCE_SYMBOL $0737 VIA_port_b
COMMENT $0739 Store X in D/A register
FORCE_SYMBOL $0739 VIA_port_a
COMMENT $073B timer 1 count high
FORCE_SYMBOL $073B VIA_t1_cnt_hi
FORCE_SYMBOL $073D lm4_name
FORCE_NO_SYMBOL $0740
COMMENT $0742 Wait for timer 1
FORCE_SYMBOL $0742 VIA_int_flags
FORCE_NO_SYMBOL $0749
COMMENT $074C /BLANK low and /ZERO low
FORCE_SYMBOL $074C VIA_cntl
COMMENT $074E clear shift register
FORCE_SYMBOL $074E VIA_shift_reg
FORCE_NO_SYMBOL $0750
COMMENT $0753 clear D/A register
FORCE_SYMBOL $0753 VIA_port_a
COMMENT $0755 mux=1, disable mux
FORCE_SYMBOL $0755 VIA_port_b
COMMENT $0757 mux=1, enable mux
FORCE_SYMBOL $0757 VIA_port_b
COMMENT $0759 do it again
FORCE_SYMBOL $0759 VIA_port_b
FORCE_NO_SYMBOL $075B
COMMENT $075D disable mux
FORCE_SYMBOL $075D VIA_port_b
COMMENT $075F Reset default text size
FORCE_SYMBOL $0761 Vec_Text_Height
FORCE_NO_SYMBOL $0764
FORCE_SYMBOL $0766 Vec_Text_Width
COMMENT $0769 Skip the title/cta text
COMMENT_LINE $076B Draw the CTA text
FORCE_NO_SYMBOL $076B
COMMENT $076D Set scale for mooooove
FORCE_SYMBOL $076D VIA_t1_cnt_lo
COMMENT $0773 Store Y in D/A register
FORCE_SYMBOL $0773 VIA_port_a
COMMENT $0775 Enable mux
FORCE_SYMBOL $0775 VIA_port_b
COMMENT $0777 Blank low, zero high
FORCE_NO_SYMBOL $0777
FORCE_SYMBOL $0779 VIA_cntl
COMMENT $077B Clear shift register
FORCE_SYMBOL $077B VIA_shift_reg
COMMENT $077D Disable mux
FORCE_SYMBOL $077D VIA_port_b
COMMENT $077F Store X in D/A register
FORCE_SYMBOL $077F VIA_port_a
COMMENT $0781 timer 1 count high
FORCE_SYMBOL $0781 VIA_t1_cnt_hi
FORCE_SYMBOL $0783 welcome_text
COMMENT $0786 Wait for de beam
FORCE_NO_SYMBOL $0786
COMMENT $0788 Wait for timer 1
FORCE_SYMBOL $0788 VIA_int_flags
COMMENT $078C Print it
COMMENT_LINE $078F Draw title text
FORCE_NO_SYMBOL $078F
COMMENT $0792 /BLANK low and /ZERO low
FORCE_SYMBOL $0792 VIA_cntl
COMMENT $0794 clear shift register
FORCE_SYMBOL $0794 VIA_shift_reg
FORCE_NO_SYMBOL $0796
COMMENT $0799 clear D/A register
FORCE_SYMBOL $0799 VIA_port_a
COMMENT $079B mux=1, disable mux
FORCE_SYMBOL $079B VIA_port_b
COMMENT $079D mux=1, enable mux
FORCE_SYMBOL $079D VIA_port_b
COMMENT $079F do it again
FORCE_SYMBOL $079F VIA_port_b
FORCE_NO_SYMBOL $07A1
COMMENT $07A3 disable mux
FORCE_SYMBOL $07A3 VIA_port_b
FORCE_NO_SYMBOL $07A5
COMMENT $07A9 Store Y in D/A register
FORCE_SYMBOL $07A9 VIA_port_a
COMMENT $07AB Enable mux
FORCE_SYMBOL $07AB VIA_port_b
COMMENT $07AD Blank low, zero high
FORCE_NO_SYMBOL $07AD
FORCE_SYMBOL $07AF VIA_cntl
COMMENT $07B1 Clear shift register
FORCE_SYMBOL $07B1 VIA_shift_reg
COMMENT $07B3 Disable mux
FORCE_SYMBOL $07B3 VIA_port_b
COMMENT $07B5 Store X in D/A register
FORCE_SYMBOL $07B5 VIA_port_a
COMMENT $07B7 timer 1 count high
FORCE_SYMBOL $07B7 VIA_t1_cnt_hi
FORCE_SYMBOL $07B9 title_text
COMMENT $07BC Wait for de beam
FORCE_NO_SYMBOL $07BC
COMMENT $07BE Wait for timer 1
FORCE_SYMBOL $07BE VIA_int_flags
COMMENT $07C2 Print it
COMMENT_LINE $07C5 Change state if they hit a button
COMMENT $07C5 Read the joystick
FORCE_SYMBOL $07C5 GetJoystick
COMMENT $07C8 Check for a button press...
FORCE_SYMBOL $07C8 joy_b
COMMENT $07CD ...and request state change if they hit button 1
FORCE_SYMBOL $07CD GameInit
FORCE_SYMBOL $07D0 GameFrame
COMMENT $07D8 Main game state
COMMENT_LINE $07D8 Game state
COMMENT_LINE $07D8 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $07D8 ***** CONSTANTS *****
COMMENT_LINE $07D8 ***** MEMORY MAP *****
COMMENT_LINE $07D8 ***** INIT *****
FORCE_NO_SYMBOL $07D8
COMMENT $07DA Write the string termie for the score
COMMENT_LINE $07DD lda #116		; t - gives broken dollar symbol
COMMENT $07DD h - gives arrow thing
FORCE_NO_SYMBOL $07DD
COMMENT $07DF Write the dollar sign
FORCE_SYMBOL $07DF cash_ascii
COMMENT $07E2 Reset score
FORCE_NO_SYMBOL $07E2
COMMENT $07E5 Reset cash
FORCE_SYMBOL $07E5 cash
COMMENT $07E8 Reset c-c-combo bonus <3
FORCE_SYMBOL $07E8 combo_bonus
COMMENT $07EB Reset combo level
FORCE_SYMBOL $07EB combo_level
COMMENT $07EE Reset ship velo
FORCE_SYMBOL $07EE shipyvel
COMMENT $07F1 Reset planet rotation
FORCE_SYMBOL $07F1 planet_rot
COMMENT $07F4 Reset pickup (Always Emma first)
FORCE_SYMBOL $07F4 current_pass_lm
COMMENT $07F7 Reset intensity
FORCE_SYMBOL $07F7 intens
COMMENT $07FA Convert initial zero score to ASCII
COMMENT $0800 Roll a die
COMMENT $0803 Clamp 0-3
FORCE_NO_SYMBOL $0803
COMMENT $0805 Reroll if we just picked the pickup point!
FORCE_SYMBOL $0805 current_pass_lm
COMMENT $080A Set initial fuel depot
FORCE_SYMBOL $080A current_fuel_lm
COMMENT $080D Reset fuel
FORCE_SYMBOL $080D MAX_FUEL
FORCE_SYMBOL $080F fuel
FORCE_SYMBOL $0812 SHIP_MAX_Y
COMMENT $0814 Reset ship pos
FORCE_SYMBOL $0814 shipy
FORCE_NO_SYMBOL $0817
FORCE_SYMBOL $0819 odd_frame
COMMENT $081C Reset taxi mode to pickup
FORCE_SYMBOL $081E taxi_mode
COMMENT $0821 Init controller
COMMENT $0824 Init sfx sys
COMMENT_LINE $0828 ***** FRAME *****
COMMENT_LINE $0828 Tick stuff
COMMENT $0828 Toggle the odd-frame flag
FORCE_SYMBOL $0828 odd_frame
FORCE_SYMBOL $082C odd_frame
COMMENT $082F Fade in
FORCE_SYMBOL $082F intens
FORCE_SYMBOL $0832 MAX_INTENSITY
FORCE_SYMBOL $0836 FADE_SPEED
FORCE_SYMBOL $0838 intens
COMMENT $083B Store intensity in D/A
FORCE_SYMBOL $083B VIA_port_a
COMMENT $083D Save intensity in $C827
FORCE_SYMBOL $083D Vec_Brightness
COMMENT $0840 mux disabled channel 2
FORCE_NO_SYMBOL $0840
FORCE_SYMBOL $0843 VIA_port_b
COMMENT $0845 mux enabled channel 2
FORCE_SYMBOL $0845 VIA_port_b
COMMENT $0847 do it again just because
FORCE_SYMBOL $0847 VIA_port_b
FORCE_NO_SYMBOL $0849
COMMENT $084B turn off mux
FORCE_SYMBOL $084B VIA_port_b
COMMENT_LINE $084D Tick physics
COMMENT $084D Read the joystick
COMMENT $0850 First update velocity...
FORCE_SYMBOL $0850 shipyvel
COMMENT $0853 Skip gravity every other frame
FORCE_SYMBOL $0853 odd_frame
COMMENT $0858 Apply gravity
FORCE_SYMBOL $0858 GRAVITY
COMMENT $085A Are they pressing thrust?
FORCE_SYMBOL $085A joy_b
COMMENT $085F Yeah, apply some thrust to velocity
FORCE_SYMBOL $085F THRUST
COMMENT $0861 And dec fuel
FORCE_SYMBOL $0861 fuel
FORCE_SYMBOL $0864 FUEL_BURN_THR
COMMENT $0866 Check remaining fuel level
COMMENT $0868 Ees no goode! Keel them
FORCE_SYMBOL $0868 game_over
FORCE_SYMBOL $086B fuel
COMMENT $086E Clamp velo (note it's still in reg a)
FORCE_SYMBOL $086E SHIP_MIN_YVEL
FORCE_SYMBOL $0872 SHIP_MIN_YVEL
FORCE_SYMBOL $0874 SHIP_MAX_YVEL
FORCE_SYMBOL $0878 SHIP_MAX_YVEL
FORCE_SYMBOL $087A shipyvel
COMMENT $087D ...now update position
FORCE_SYMBOL $087D shipy
COMMENT $0880 Clamp pos
FORCE_SYMBOL $0880 SHIP_MAX_Y
FORCE_SYMBOL $0884 SHIP_MAX_Y
FORCE_SYMBOL $0886 SHIP_MIN_Y
COMMENT $088A They're at screen min!! Let's cost them some fuel
FORCE_SYMBOL $088A SHIP_MIN_Y
FORCE_SYMBOL $088C fuel
FORCE_SYMBOL $088F FUEL_BURN_THR
COMMENT $0891 Check remaining fuel level
COMMENT $0893 Ees no goode! Keel them
FORCE_SYMBOL $0893 game_over
FORCE_SYMBOL $0896 fuel
FORCE_SYMBOL $0899 shipy
COMMENT_LINE $089C Update planet rotation
COMMENT $089C Skip spin input every other frame
FORCE_SYMBOL $089C odd_frame
COMMENT $08A1 Check for input
FORCE_SYMBOL $08A1 joy_lr
COMMENT $08A6 OK, they're gonna spin one way or t'other, let's cost them some fuel
FORCE_SYMBOL $08A6 fuel
FORCE_SYMBOL $08A9 FUEL_BURN_SPIN
COMMENT $08AB Check remaining fuel level
COMMENT $08AD Ees no goode! Keel them
FORCE_SYMBOL $08AD game_over
FORCE_SYMBOL $08B0 fuel
COMMENT $08B3 (We killed the comp flags)
FORCE_NO_SYMBOL $08B3
FORCE_SYMBOL $08B9 planet_rot
COMMENT $08BD Loop if needed
FORCE_SYMBOL $08C3 planet_rot
FORCE_SYMBOL $08C8 planet_rot
COMMENT $08CC Loop if needed
FORCE_SYMBOL $08CC NUM_FRAMES
FORCE_SYMBOL $08D1 planet_rot
COMMENT_LINE $08D4 Draw planet
COMMENT $08D4 Grab planet rot
FORCE_SYMBOL $08D4 planet_rot
COMMENT $08D7 x2 to use as offset into frame index
COMMENT $08D8 x points to the index of frames
FORCE_SYMBOL $08D8 theplanet_index
COMMENT $08DB x points to the actual contours :)
COMMENT $08DD /BLANK low, /ZERO high
FORCE_NO_SYMBOL $08DD
FORCE_SYMBOL $08DF VIA_cntl
COMMENT $08E1 Set scale for the draw
FORCE_NO_SYMBOL $08E1
COMMENT $08E3 Wait for move
FORCE_NO_SYMBOL $08E3
COMMENT $08E5 Wait for timer 1
FORCE_SYMBOL $08E5 VIA_int_flags
COMMENT $08E9 Set scale
FORCE_SYMBOL $08E9 VIA_t1_cnt_lo
COMMENT $08EB Get num vectors in this contour
COMMENT $08ED Write to vec count
FORCE_SYMBOL $08ED Vec_Misc_Count
COMMENT $08F0 Get next coordinate pair -- this is the absolute start pos so we can add the offset here
FORCE_NO_SYMBOL $08F0
COMMENT $08F2 Send Y to A/D
FORCE_SYMBOL $08F2 VIA_port_a
COMMENT $08F4 Enable mux
FORCE_SYMBOL $08F4 VIA_port_b
COMMENT $08F6 Point to next coordinate pair
FORCE_NO_SYMBOL $08F6
COMMENT $08F8 Wait a moment
COMMENT $08F9 Disable mux
FORCE_SYMBOL $08F9 VIA_port_b
COMMENT $08FB Send X to A/D
FORCE_SYMBOL $08FB VIA_port_a
COMMENT $08FD Shift reg=0 (no draw, move only), T1H=0
FORCE_NO_SYMBOL $08FD
COMMENT $0900 A->D00A, B->D005 -- DO THE MOVE
COMMENT $0902 Update count
FORCE_SYMBOL $0902 Vec_Misc_Count
COMMENT $0905 Grab the coord pair
FORCE_NO_SYMBOL $0905
COMMENT $0907 Send Y to A/D
FORCE_SYMBOL $0907 VIA_port_a
COMMENT $0909 Enable mux
FORCE_SYMBOL $0909 VIA_port_b
COMMENT $090B Point to next coordinate pair
FORCE_NO_SYMBOL $090B
COMMENT $090D Wait a moment
COMMENT $090E Disable mux
FORCE_SYMBOL $090E VIA_port_b
COMMENT $0910 Send X to A/D
FORCE_SYMBOL $0910 VIA_port_a
COMMENT $0912 Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $0912
COMMENT $0915 Put pattern in shift register
FORCE_SYMBOL $0915 VIA_shift_reg
COMMENT $0917 Set T1H to start the ramp
FORCE_SYMBOL $0917 VIA_t1_cnt_hi
COMMENT $0919 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0919
COMMENT $091C Wait for T1 to time out
FORCE_SYMBOL $091C VIA_int_flags
COMMENT $0920 Wait a moment more
COMMENT $0921 Clear shift register (blank output)
FORCE_SYMBOL $0921 VIA_shift_reg
COMMENT $0923 Decrement line count
FORCE_SYMBOL $0923 Vec_Misc_Count
COMMENT $0927 Go back for more points
COMMENT $0929 Return beam to origin
FORCE_NO_SYMBOL $0929
COMMENT $092C /BLANK low and /ZERO low
FORCE_SYMBOL $092C VIA_cntl
COMMENT $092E clear shift register
FORCE_SYMBOL $092E VIA_shift_reg
FORCE_NO_SYMBOL $0930
COMMENT $0933 clear D/A register
FORCE_SYMBOL $0933 VIA_port_a
COMMENT $0935 mux=1, disable mux
FORCE_SYMBOL $0935 VIA_port_b
COMMENT $0937 mux=1, enable mux
FORCE_SYMBOL $0937 VIA_port_b
COMMENT $0939 do it again
FORCE_SYMBOL $0939 VIA_port_b
FORCE_NO_SYMBOL $093B
COMMENT $093D disable mux
FORCE_SYMBOL $093D VIA_port_b
COMMENT $093F Check if x now points to a zero (end of frame)
FORCE_NO_SYMBOL $093F
FORCE_SYMBOL $0941 FRAME_DELIMITER
COMMENT $0943 Loop if not
COMMENT_LINE $0945 Draw score (cash)
COMMENT_LINE $0945 FastZeroRef		; Back to origin
FORCE_NO_SYMBOL $0945
COMMENT $0947 Set scale for mooooove
FORCE_SYMBOL $0947 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0949
FORCE_NO_SYMBOL $094B
COMMENT $094D Store Y in D/A register
FORCE_SYMBOL $094D VIA_port_a
COMMENT $094F Enable mux
FORCE_SYMBOL $094F VIA_port_b
COMMENT $0951 Blank low, zero high
FORCE_NO_SYMBOL $0951
FORCE_SYMBOL $0953 VIA_cntl
COMMENT $0955 Clear shift register
FORCE_SYMBOL $0955 VIA_shift_reg
COMMENT $0957 Disable mux
FORCE_SYMBOL $0957 VIA_port_b
COMMENT $0959 Store X in D/A register
FORCE_SYMBOL $0959 VIA_port_a
COMMENT $095B timer 1 count high
FORCE_SYMBOL $095B VIA_t1_cnt_hi
COMMENT $095D u=pointer to ASCII cash
FORCE_SYMBOL $095D cash_ascii
COMMENT $0960 Wait for de beam
FORCE_NO_SYMBOL $0960
COMMENT $0962 Wait for timer 1
FORCE_SYMBOL $0962 VIA_int_flags
COMMENT $0966 Print the cash score
COMMENT_LINE $0969 Fuel gauge
COMMENT $0969 Origin
FORCE_NO_SYMBOL $0969
COMMENT $096C /BLANK low and /ZERO low
FORCE_SYMBOL $096C VIA_cntl
COMMENT $096E clear shift register
FORCE_SYMBOL $096E VIA_shift_reg
FORCE_NO_SYMBOL $0970
COMMENT $0973 clear D/A register
FORCE_SYMBOL $0973 VIA_port_a
COMMENT $0975 mux=1, disable mux
FORCE_SYMBOL $0975 VIA_port_b
COMMENT $0977 mux=1, enable mux
FORCE_SYMBOL $0977 VIA_port_b
COMMENT $0979 do it again
FORCE_SYMBOL $0979 VIA_port_b
FORCE_NO_SYMBOL $097B
COMMENT $097D disable mux
FORCE_SYMBOL $097D VIA_port_b
FORCE_NO_SYMBOL $097F
COMMENT $0983 Move to target pos
COMMENT $0983 Store Y in D/A register
FORCE_SYMBOL $0983 VIA_port_a
COMMENT $0985 Enable mux
FORCE_SYMBOL $0985 VIA_port_b
COMMENT $0987 Blank low, zero high
FORCE_NO_SYMBOL $0987
FORCE_SYMBOL $0989 VIA_cntl
COMMENT $098B Clear shift register
FORCE_SYMBOL $098B VIA_shift_reg
COMMENT $098D Disable mux
FORCE_SYMBOL $098D VIA_port_b
COMMENT $098F Store X in D/A register
FORCE_SYMBOL $098F VIA_port_a
COMMENT $0991 timer 1 count high
FORCE_SYMBOL $0991 VIA_t1_cnt_hi
COMMENT $0993 Wait (sigh)
FORCE_NO_SYMBOL $0993
COMMENT $0995 Wait for timer 1
FORCE_SYMBOL $0995 VIA_int_flags
COMMENT $0999 Use fuel val as scale
FORCE_SYMBOL $0999 fuel
FORCE_SYMBOL $099D VIA_t1_cnt_lo
FORCE_NO_SYMBOL $09A0
COMMENT $09A2 Draw line
COMMENT $09A2 Send Y to A/D
FORCE_SYMBOL $09A2 VIA_port_a
COMMENT $09A4 Enable mux
FORCE_SYMBOL $09A4 VIA_port_b
COMMENT $09A6 Wait a moment
COMMENT $09A7 Disable mux
FORCE_SYMBOL $09A7 VIA_port_b
COMMENT $09A9 Send X to A/D
FORCE_SYMBOL $09A9 VIA_port_a
COMMENT $09AB Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $09AB
COMMENT $09AE Put pattern in shift register
FORCE_SYMBOL $09AE VIA_shift_reg
COMMENT $09B0 Ping T1H
FORCE_SYMBOL $09B0 VIA_t1_cnt_hi
COMMENT $09B2 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $09B2
COMMENT $09B5 Wait for T1 to time out (aw what a shame, this wait is wasted...)
FORCE_SYMBOL $09B5 VIA_int_flags
COMMENT $09B9 Wait a moment more
COMMENT $09BA Clear shift register (blank output)
FORCE_SYMBOL $09BA VIA_shift_reg
COMMENT_LINE $09BC Draw ship
COMMENT $09BC Back to origin
FORCE_NO_SYMBOL $09BC
COMMENT $09BF /BLANK low and /ZERO low
FORCE_SYMBOL $09BF VIA_cntl
COMMENT $09C1 clear shift register
FORCE_SYMBOL $09C1 VIA_shift_reg
FORCE_NO_SYMBOL $09C3
COMMENT $09C6 clear D/A register
FORCE_SYMBOL $09C6 VIA_port_a
COMMENT $09C8 mux=1, disable mux
FORCE_SYMBOL $09C8 VIA_port_b
COMMENT $09CA mux=1, enable mux
FORCE_SYMBOL $09CA VIA_port_b
COMMENT $09CC do it again
FORCE_SYMBOL $09CC VIA_port_b
FORCE_NO_SYMBOL $09CE
COMMENT $09D0 disable mux
FORCE_SYMBOL $09D0 VIA_port_b
FORCE_NO_SYMBOL $09D2
COMMENT $09D4 Reset scale for mooooove
FORCE_SYMBOL $09D4 VIA_t1_cnt_lo
FORCE_SYMBOL $09D6 shipy
COMMENT $09DA Move to target pos
COMMENT $09DA Store Y in D/A register
FORCE_SYMBOL $09DA VIA_port_a
COMMENT $09DC Enable mux
FORCE_SYMBOL $09DC VIA_port_b
COMMENT $09DE Blank low, zero high
FORCE_NO_SYMBOL $09DE
FORCE_SYMBOL $09E0 VIA_cntl
COMMENT $09E2 Clear shift register
FORCE_SYMBOL $09E2 VIA_shift_reg
COMMENT $09E4 Disable mux
FORCE_SYMBOL $09E4 VIA_port_b
COMMENT $09E6 Store X in D/A register
FORCE_SYMBOL $09E6 VIA_port_a
COMMENT $09E8 timer 1 count high
FORCE_SYMBOL $09E8 VIA_t1_cnt_hi
COMMENT $09EA u=pointer to ASCII cash
FORCE_SYMBOL $09EA ship
COMMENT $09ED Wait for de beam
FORCE_NO_SYMBOL $09ED
COMMENT $09EF Wait for timer 1
FORCE_SYMBOL $09EF VIA_int_flags
COMMENT $09F3 Use y for scale!
FORCE_SYMBOL $09F3 shipy
COMMENT $09F6 y=abs(y)
FORCE_SYMBOL $09FA scratch
COMMENT $09FD scale=max-abs(y)
FORCE_SYMBOL $09FD MAX_SCALE
FORCE_SYMBOL $09FF scratch
COMMENT $0A02 Set scale for draw
FORCE_SYMBOL $0A02 VIA_t1_cnt_lo
FORCE_SYMBOL $0A06 Vec_Misc_Count
FORCE_NO_SYMBOL $0A09
FORCE_SYMBOL $0A0B VIA_port_a
FORCE_SYMBOL $0A0D VIA_port_b
FORCE_NO_SYMBOL $0A0F
FORCE_SYMBOL $0A12 VIA_port_b
FORCE_SYMBOL $0A14 VIA_port_a
FORCE_NO_SYMBOL $0A16
FORCE_SYMBOL $0A19 VIA_shift_reg
FORCE_SYMBOL $0A1B VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0A1D
FORCE_SYMBOL $0A20 VIA_int_flags
FORCE_SYMBOL $0A25 VIA_shift_reg
FORCE_SYMBOL $0A27 Vec_Misc_Count
COMMENT_LINE $0A2D Draw the fuel depot
COMMENT $0A2D Back to origin
FORCE_NO_SYMBOL $0A2D
COMMENT $0A30 /BLANK low and /ZERO low
FORCE_SYMBOL $0A30 VIA_cntl
COMMENT $0A32 clear shift register
FORCE_SYMBOL $0A32 VIA_shift_reg
FORCE_NO_SYMBOL $0A34
COMMENT $0A37 clear D/A register
FORCE_SYMBOL $0A37 VIA_port_a
COMMENT $0A39 mux=1, disable mux
FORCE_SYMBOL $0A39 VIA_port_b
COMMENT $0A3B mux=1, enable mux
FORCE_SYMBOL $0A3B VIA_port_b
COMMENT $0A3D do it again
FORCE_SYMBOL $0A3D VIA_port_b
FORCE_NO_SYMBOL $0A3F
COMMENT $0A41 disable mux
FORCE_SYMBOL $0A41 VIA_port_b
FORCE_SYMBOL $0A43 LM_MOVE_SCALE
COMMENT $0A45 Reset scale for mooooove
FORCE_SYMBOL $0A45 VIA_t1_cnt_lo
COMMENT $0A47 NOTE: y holds this for the rest of frame
FORCE_SYMBOL $0A47 landmarks_index
COMMENT $0A4B grab fuel depot's landmark id
FORCE_SYMBOL $0A4B current_fuel_lm
COMMENT $0A4E x4 (these records are 4 bytes)
COMMENT $0A50 x points to the start of the actual landmark path
COMMENT $0A52 Grab curr rot
FORCE_SYMBOL $0A52 planet_rot
COMMENT $0A55 x2 -- each coord pair's 2 bytes
COMMENT $0A56 Step forward by a
COMMENT $0A58 Grab the coord pair
FORCE_NO_SYMBOL $0A58
FORCE_SYMBOL $0A5A INVISIBLE
COMMENT $0A5E Skip draw if invisible for this rot val
COMMENT $0A60 HACK: Draw the f icon slightly to the right of where its coords are
FORCE_NO_SYMBOL $0A60
COMMENT $0A62 Otherwise move!
COMMENT $0A62 Store Y in D/A register
FORCE_SYMBOL $0A62 VIA_port_a
COMMENT $0A64 Enable mux
FORCE_SYMBOL $0A64 VIA_port_b
COMMENT $0A66 Blank low, zero high
FORCE_NO_SYMBOL $0A66
FORCE_SYMBOL $0A68 VIA_cntl
COMMENT $0A6A Clear shift register
FORCE_SYMBOL $0A6A VIA_shift_reg
COMMENT $0A6C Disable mux
FORCE_SYMBOL $0A6C VIA_port_b
COMMENT $0A6E Store X in D/A register
FORCE_SYMBOL $0A6E VIA_port_a
COMMENT $0A70 timer 1 count high
FORCE_SYMBOL $0A70 VIA_t1_cnt_hi
FORCE_SYMBOL $0A72 fueldepot
FORCE_NO_SYMBOL $0A75
COMMENT $0A77 Wait for timer 1
FORCE_SYMBOL $0A77 VIA_int_flags
FORCE_NO_SYMBOL $0A7B
COMMENT $0A7D Reset scale for draw
FORCE_SYMBOL $0A7D VIA_t1_cnt_lo
COMMENT $0A7F And draw
COMMENT_LINE $0A82 Draw the pickup / dropoff point
COMMENT $0A82 Back to origin
FORCE_NO_SYMBOL $0A82
COMMENT $0A85 /BLANK low and /ZERO low
FORCE_SYMBOL $0A85 VIA_cntl
COMMENT $0A87 clear shift register
FORCE_SYMBOL $0A87 VIA_shift_reg
FORCE_NO_SYMBOL $0A89
COMMENT $0A8C clear D/A register
FORCE_SYMBOL $0A8C VIA_port_a
COMMENT $0A8E mux=1, disable mux
FORCE_SYMBOL $0A8E VIA_port_b
COMMENT $0A90 mux=1, enable mux
FORCE_SYMBOL $0A90 VIA_port_b
COMMENT $0A92 do it again
FORCE_SYMBOL $0A92 VIA_port_b
FORCE_NO_SYMBOL $0A94
COMMENT $0A96 disable mux
FORCE_SYMBOL $0A96 VIA_port_b
FORCE_SYMBOL $0A98 LM_MOVE_SCALE
COMMENT $0A9A Reset scale for mooooove
FORCE_SYMBOL $0A9A VIA_t1_cnt_lo
COMMENT $0A9C grab pickup or dropoff point's landmark id
FORCE_SYMBOL $0A9C current_pass_lm
COMMENT $0A9F x4 (these records are 4 bytes)
COMMENT $0AA1 a points to the start of the actual landmark path
COMMENT $0AA3 Grab curr rot
FORCE_SYMBOL $0AA3 planet_rot
COMMENT $0AA6 x2 -- each coord pair's 2 bytes
COMMENT $0AA7 Step forward by a
COMMENT $0AA9 Grab the coord pair
FORCE_NO_SYMBOL $0AA9
FORCE_SYMBOL $0AAB INVISIBLE
COMMENT $0AAF Skip draw if invisible for this rot val
COMMENT $0AB1 Otherwise move!
COMMENT $0AB1 Store Y in D/A register
FORCE_SYMBOL $0AB1 VIA_port_a
COMMENT $0AB3 Enable mux
FORCE_SYMBOL $0AB3 VIA_port_b
COMMENT $0AB5 Blank low, zero high
FORCE_NO_SYMBOL $0AB5
FORCE_SYMBOL $0AB7 VIA_cntl
COMMENT $0AB9 Clear shift register
FORCE_SYMBOL $0AB9 VIA_shift_reg
COMMENT $0ABB Disable mux
FORCE_SYMBOL $0ABB VIA_port_b
COMMENT $0ABD Store X in D/A register
FORCE_SYMBOL $0ABD VIA_port_a
COMMENT $0ABF timer 1 count high
FORCE_SYMBOL $0ABF VIA_t1_cnt_hi
COMMENT $0AC1 Load x with either passenger or pickup icon depending on taxi_mode
FORCE_SYMBOL $0AC1 taxi_mode
FORCE_SYMBOL $0AC6 passenger
FORCE_SYMBOL $0ACB dropoff
COMMENT $0ACE Wait for that move we did aaaaaages ago! (NOTE: It's probably done and we can skip this...)
FORCE_NO_SYMBOL $0ACE
COMMENT $0AD0 Wait for timer 1
FORCE_SYMBOL $0AD0 VIA_int_flags
FORCE_NO_SYMBOL $0AD4
COMMENT $0AD6 Reset scale for draw
FORCE_SYMBOL $0AD6 VIA_t1_cnt_lo
COMMENT $0AD8 And draw
COMMENT_LINE $0ADB Draw passenger UI icon if we have someone onboard :)
FORCE_SYMBOL $0ADB taxi_mode
COMMENT $0AE0 Back to origin
FORCE_NO_SYMBOL $0AE0
COMMENT $0AE3 /BLANK low and /ZERO low
FORCE_SYMBOL $0AE3 VIA_cntl
COMMENT $0AE5 clear shift register
FORCE_SYMBOL $0AE5 VIA_shift_reg
FORCE_NO_SYMBOL $0AE7
COMMENT $0AEA clear D/A register
FORCE_SYMBOL $0AEA VIA_port_a
COMMENT $0AEC mux=1, disable mux
FORCE_SYMBOL $0AEC VIA_port_b
COMMENT $0AEE mux=1, enable mux
FORCE_SYMBOL $0AEE VIA_port_b
COMMENT $0AF0 do it again
FORCE_SYMBOL $0AF0 VIA_port_b
FORCE_NO_SYMBOL $0AF2
COMMENT $0AF4 disable mux
FORCE_SYMBOL $0AF4 VIA_port_b
FORCE_NO_SYMBOL $0AF6
COMMENT $0AF8 Reset scale for mooooove
FORCE_SYMBOL $0AF8 VIA_t1_cnt_lo
COMMENT_LINE $0AFA lda #100
COMMENT_LINE $0AFA ldb #-85
FORCE_NO_SYMBOL $0AFC
COMMENT $0AFE Move!
COMMENT $0AFE Store Y in D/A register
FORCE_SYMBOL $0AFE VIA_port_a
COMMENT $0B00 Enable mux
FORCE_SYMBOL $0B00 VIA_port_b
COMMENT $0B02 Blank low, zero high
FORCE_NO_SYMBOL $0B02
FORCE_SYMBOL $0B04 VIA_cntl
COMMENT $0B06 Clear shift register
FORCE_SYMBOL $0B06 VIA_shift_reg
COMMENT $0B08 Disable mux
FORCE_SYMBOL $0B08 VIA_port_b
COMMENT $0B0A Store X in D/A register
FORCE_SYMBOL $0B0A VIA_port_a
COMMENT $0B0C timer 1 count high
FORCE_SYMBOL $0B0C VIA_t1_cnt_hi
FORCE_SYMBOL $0B0E passenger
COMMENT $0B11 Wait for that move
FORCE_NO_SYMBOL $0B11
COMMENT $0B13 Wait for timer 1
FORCE_SYMBOL $0B13 VIA_int_flags
FORCE_NO_SYMBOL $0B17
COMMENT $0B19 Reset scale for draw
FORCE_SYMBOL $0B19 VIA_t1_cnt_lo
COMMENT $0B1B And draw
COMMENT_LINE $0B1E Draw combo level ticks
FORCE_SYMBOL $0B1E combo_level
FORCE_SYMBOL $0B23 scratch
FORCE_NO_SYMBOL $0B26
COMMENT $0B29 /BLANK low and /ZERO low
FORCE_SYMBOL $0B29 VIA_cntl
COMMENT $0B2B clear shift register
FORCE_SYMBOL $0B2B VIA_shift_reg
FORCE_NO_SYMBOL $0B2D
COMMENT $0B30 clear D/A register
FORCE_SYMBOL $0B30 VIA_port_a
COMMENT $0B32 mux=1, disable mux
FORCE_SYMBOL $0B32 VIA_port_b
COMMENT $0B34 mux=1, enable mux
FORCE_SYMBOL $0B34 VIA_port_b
COMMENT $0B36 do it again
FORCE_SYMBOL $0B36 VIA_port_b
FORCE_NO_SYMBOL $0B38
COMMENT $0B3A disable mux
FORCE_SYMBOL $0B3A VIA_port_b
FORCE_NO_SYMBOL $0B3C
COMMENT $0B3E Scale for move
FORCE_SYMBOL $0B3E VIA_t1_cnt_lo
COMMENT $0B44 Store Y in D/A register
FORCE_SYMBOL $0B44 VIA_port_a
COMMENT $0B46 Enable mux
FORCE_SYMBOL $0B46 VIA_port_b
COMMENT $0B48 Blank low, zero high
FORCE_NO_SYMBOL $0B48
FORCE_SYMBOL $0B4A VIA_cntl
COMMENT $0B4C Clear shift register
FORCE_SYMBOL $0B4C VIA_shift_reg
COMMENT $0B4E Disable mux
FORCE_SYMBOL $0B4E VIA_port_b
COMMENT $0B50 Store X in D/A register
FORCE_SYMBOL $0B50 VIA_port_a
COMMENT $0B52 timer 1 count high
FORCE_SYMBOL $0B52 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0B54
FORCE_NO_SYMBOL $0B56
COMMENT $0B58 Wait for timer 1
FORCE_SYMBOL $0B58 VIA_int_flags
COMMENT $0B5C Scale for draw
FORCE_SYMBOL $0B5C VIA_t1_cnt_lo
FORCE_SYMBOL $0B5E wee_flag
FORCE_SYMBOL $0B63 Vec_Misc_Count
FORCE_NO_SYMBOL $0B66
FORCE_SYMBOL $0B68 VIA_port_a
FORCE_SYMBOL $0B6A VIA_port_b
FORCE_NO_SYMBOL $0B6C
FORCE_SYMBOL $0B6F VIA_port_b
FORCE_SYMBOL $0B71 VIA_port_a
FORCE_NO_SYMBOL $0B73
FORCE_SYMBOL $0B76 VIA_shift_reg
FORCE_SYMBOL $0B78 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0B7A
FORCE_SYMBOL $0B7D VIA_int_flags
FORCE_SYMBOL $0B82 VIA_shift_reg
FORCE_SYMBOL $0B84 Vec_Misc_Count
FORCE_SYMBOL $0B8A scratch
COMMENT_LINE $0B8F Check if ship's over fuel depot
COMMENT $0B8F grab fuel depot's landmark id
FORCE_SYMBOL $0B8F current_fuel_lm
COMMENT $0B92 x4 (these records are 4 bytes)
COMMENT $0B94 Add another 2 to step over the coord pair!
FORCE_NO_SYMBOL $0B94
COMMENT $0B96 step x
COMMENT $0B98 a=ideal planet rot (and step x to shipy)
COMMENT $0B9A Rot OK?
FORCE_SYMBOL $0B9A planet_rot
COMMENT $0B9F a=landmark y
FORCE_NO_SYMBOL $0B9F
COMMENT $0BA1 compare to ship y
FORCE_SYMBOL $0BA1 shipy
COMMENT $0BA4 Check we're within #CLOSENESS of the actual landmark
FORCE_SYMBOL $0BA6 shipy
FORCE_NO_SYMBOL $0BA9
FORCE_SYMBOL $0BAB CLOSENESS
FORCE_SYMBOL $0BB3 shipy
FORCE_SYMBOL $0BB6 CLOSENESS
FORCE_NO_SYMBOL $0BBC
COMMENT $0BBF Kill combo bonus
FORCE_SYMBOL $0BBF combo_bonus
FORCE_SYMBOL $0BC2 combo_level
COMMENT $0BC5 Pick a new depot! Roll a die
COMMENT $0BC8 Clamp 0-3
FORCE_NO_SYMBOL $0BC8
COMMENT $0BCA Reroll if we just picked the pickup point!
FORCE_SYMBOL $0BCA current_pass_lm
COMMENT $0BCF Reroll if we just picked the point we're just over!
FORCE_SYMBOL $0BCF current_fuel_lm
COMMENT $0BD4 Write it
FORCE_SYMBOL $0BD4 current_fuel_lm
COMMENT $0BD7 Backup old fuel amount for a sec
FORCE_SYMBOL $0BD7 fuel
FORCE_SYMBOL $0BDA scratch
COMMENT $0BDD Refuel them
FORCE_SYMBOL $0BDD MAX_FUEL
FORCE_SYMBOL $0BDF fuel
COMMENT $0BE2 Amount to charge them!
FORCE_SYMBOL $0BE2 scratch
COMMENT $0BE5 Set the high byte of D to zero
FORCE_SYMBOL $0BE6 scratch16
COMMENT $0BE9 Charge them for the fuel :)
FORCE_SYMBOL $0BE9 cash
FORCE_SYMBOL $0BEC scratch16
COMMENT $0BEF Clamp to zero
FORCE_NO_SYMBOL $0BF1
FORCE_SYMBOL $0BF4 cash
COMMENT $0BF7 Convert updated score to ASCII
COMMENT $0BFD Play the sound effect
FORCE_SYMBOL $0BFD sfx_fuel
FORCE_SYMBOL $0C00 sfx_playsound
COMMENT $0C03 If we just fuelled, we can safely skip the pickup check
COMMENT_LINE $0C05 Check if ship's over pickup/dropoff point
FORCE_SYMBOL $0C05 current_pass_lm
FORCE_NO_SYMBOL $0C0A
COMMENT $0C10 Rot OK?
FORCE_SYMBOL $0C10 planet_rot
COMMENT $0C15 a=landmark y
FORCE_NO_SYMBOL $0C15
COMMENT $0C17 compare to ship y
FORCE_SYMBOL $0C17 shipy
COMMENT $0C1A Check we're within #CLOSENESS of the actual landmark
FORCE_SYMBOL $0C1C shipy
FORCE_NO_SYMBOL $0C1F
FORCE_SYMBOL $0C21 CLOSENESS
FORCE_SYMBOL $0C27 shipy
FORCE_SYMBOL $0C2A CLOSENESS
COMMENT $0C2E Roll a die
COMMENT $0C31 Clamp 0-3
FORCE_NO_SYMBOL $0C31
COMMENT $0C33 Reroll if we just picked the pickup point!
FORCE_SYMBOL $0C33 current_pass_lm
COMMENT $0C38 Reroll if we just picked the fuel point
FORCE_SYMBOL $0C38 current_fuel_lm
COMMENT $0C3D Write it
FORCE_SYMBOL $0C3D current_pass_lm
COMMENT $0C40 Toggle pickup/dropoff mode
FORCE_SYMBOL $0C40 taxi_mode
FORCE_SYMBOL $0C44 taxi_mode
COMMENT $0C47 No reward for pickups
COMMENT $0C49 Play the dropoff sound effect
FORCE_SYMBOL $0C49 sfx_dropoff
FORCE_SYMBOL $0C4C sfx_playsound
COMMENT $0C4F Pay them :)
FORCE_SYMBOL $0C4F cash
FORCE_SYMBOL $0C52 DROPOFF_REWARD
FORCE_SYMBOL $0C55 combo_bonus
FORCE_SYMBOL $0C58 cash
COMMENT $0C5B Convert updated score to ASCII
COMMENT $0C61 Now bump the combo bonus
FORCE_SYMBOL $0C61 combo_bonus
FORCE_SYMBOL $0C64 COMBO_BUMP
FORCE_SYMBOL $0C67 combo_bonus
COMMENT $0C6A And the convenience var
FORCE_SYMBOL $0C6A combo_level
COMMENT $0C6F Play the pickup sound effect
FORCE_SYMBOL $0C6F sfx_pickup
FORCE_SYMBOL $0C72 sfx_playsound
COMMENT $0C75 Process sfx
FORCE_SYMBOL $0C75 sfx_doframe
COMMENT_LINE $0C79 ***** Handle game over: Change state *****
COMMENT $0C79 Request state change
FORCE_SYMBOL $0C79 GameOverInit
FORCE_SYMBOL $0C7C GameOverFrame
COMMENT $0C84 Game over state
COMMENT_LINE $0C84 Game over state
COMMENT_LINE $0C84 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0C84 ***** CONSTANTS *****
COMMENT_LINE $0C84 ***** MEMORY MAP *****
COMMENT_LINE $0C84 ***** INIT *****
COMMENT $0C84 Note: reusing this var from gamestate! (also the score ofc)
FORCE_SYMBOL $0C84 intens
FORCE_SYMBOL $0C87 is_high_score
COMMENT $0C8A Reset framecount
FORCE_NO_SYMBOL $0C8A
FORCE_SYMBOL $0C8D framecount
COMMENT $0C90 Check for a new high score
FORCE_SYMBOL $0C90 cash
FORCE_SYMBOL $0C93 high_score
FORCE_SYMBOL $0C99 high_score
FORCE_NO_SYMBOL $0C9C
COMMENT $0C9E Set this 'ere flag if so
FORCE_SYMBOL $0C9E is_high_score
COMMENT $0CA1 Play the high score sound effect
FORCE_SYMBOL $0CA1 sfx_highscore
COMMENT $0CA6 Play the normal death sound effect
FORCE_SYMBOL $0CA6 sfx_death
COMMENT $0CAC Convert high score to ASCII
FORCE_SYMBOL $0CAC high_score
COMMENT $0CB5 Currency sign...
FORCE_NO_SYMBOL $0CB5
FORCE_SYMBOL $0CB7 high_score_asc
COMMENT $0CBA ... and termie
FORCE_NO_SYMBOL $0CBA
COMMENT $0CBF Copy our HS to machine HS
FORCE_SYMBOL $0CBF Vec_High_Score
FORCE_SYMBOL $0CC2 high_score_asc
FORCE_NO_SYMBOL $0CC8
COMMENT_LINE $0CD2 ***** FRAME *****
COMMENT $0CD2 Tick framecount
FORCE_SYMBOL $0CD2 framecount
FORCE_NO_SYMBOL $0CD5
COMMENT $0CD8 Reached timeout? Go to splash state if so
FORCE_SYMBOL $0CD8 TIMEOUT
FORCE_SYMBOL $0CDE SplashInit
FORCE_SYMBOL $0CE1 SplashFrame
FORCE_SYMBOL $0CE9 framecount
COMMENT $0CEC Set intensity
FORCE_SYMBOL $0CEC intens
FORCE_SYMBOL $0CEF MAX_INTENSITY
FORCE_SYMBOL $0CF3 FADE_SPEED
FORCE_SYMBOL $0CF5 intens
COMMENT $0CF8 Store intensity in D/A
FORCE_SYMBOL $0CF8 VIA_port_a
COMMENT $0CFA Save intensity in $C827
FORCE_SYMBOL $0CFA Vec_Brightness
COMMENT $0CFD mux disabled channel 2
FORCE_NO_SYMBOL $0CFD
FORCE_SYMBOL $0D00 VIA_port_b
COMMENT $0D02 mux enabled channel 2
FORCE_SYMBOL $0D02 VIA_port_b
COMMENT $0D04 do it again just because
FORCE_SYMBOL $0D04 VIA_port_b
FORCE_NO_SYMBOL $0D06
COMMENT $0D08 turn off mux
FORCE_SYMBOL $0D08 VIA_port_b
COMMENT $0D0A Set scale
FORCE_NO_SYMBOL $0D0A
FORCE_SYMBOL $0D0C VIA_t1_cnt_lo
COMMENT $0D0E Draw Game Over text
COMMENT $0D12 Store Y in D/A register
FORCE_SYMBOL $0D12 VIA_port_a
COMMENT $0D14 Enable mux
FORCE_SYMBOL $0D14 VIA_port_b
COMMENT $0D16 Blank low, zero high
FORCE_NO_SYMBOL $0D16
FORCE_SYMBOL $0D18 VIA_cntl
COMMENT $0D1A Clear shift register
FORCE_SYMBOL $0D1A VIA_shift_reg
COMMENT $0D1C Disable mux
FORCE_SYMBOL $0D1C VIA_port_b
COMMENT $0D1E Store X in D/A register
FORCE_SYMBOL $0D1E VIA_port_a
COMMENT $0D20 timer 1 count high
FORCE_SYMBOL $0D20 VIA_t1_cnt_hi
COMMENT $0D22 u=pointer to ASCII cash
FORCE_SYMBOL $0D22 gameover_text
COMMENT $0D25 Wait for de beam
FORCE_NO_SYMBOL $0D25
COMMENT $0D27 Wait for timer 1
FORCE_SYMBOL $0D27 VIA_int_flags
COMMENT $0D2B Print the cash score
COMMENT $0D2E Draw final score
FORCE_NO_SYMBOL $0D2E
COMMENT $0D31 /BLANK low and /ZERO low
FORCE_SYMBOL $0D31 VIA_cntl
COMMENT $0D33 clear shift register
FORCE_SYMBOL $0D33 VIA_shift_reg
FORCE_NO_SYMBOL $0D35
COMMENT $0D38 clear D/A register
FORCE_SYMBOL $0D38 VIA_port_a
COMMENT $0D3A mux=1, disable mux
FORCE_SYMBOL $0D3A VIA_port_b
COMMENT $0D3C mux=1, enable mux
FORCE_SYMBOL $0D3C VIA_port_b
COMMENT $0D3E do it again
FORCE_SYMBOL $0D3E VIA_port_b
FORCE_NO_SYMBOL $0D40
COMMENT $0D42 disable mux
FORCE_SYMBOL $0D42 VIA_port_b
COMMENT $0D48 Store Y in D/A register
FORCE_SYMBOL $0D48 VIA_port_a
COMMENT $0D4A Enable mux
FORCE_SYMBOL $0D4A VIA_port_b
COMMENT $0D4C Blank low, zero high
FORCE_NO_SYMBOL $0D4C
FORCE_SYMBOL $0D4E VIA_cntl
COMMENT $0D50 Clear shift register
FORCE_SYMBOL $0D50 VIA_shift_reg
COMMENT $0D52 Disable mux
FORCE_SYMBOL $0D52 VIA_port_b
COMMENT $0D54 Store X in D/A register
FORCE_SYMBOL $0D54 VIA_port_a
COMMENT $0D56 timer 1 count high
FORCE_SYMBOL $0D56 VIA_t1_cnt_hi
COMMENT $0D58 u=pointer to ASCII cash
FORCE_SYMBOL $0D58 cash_ascii
COMMENT $0D5B Wait for de beam
FORCE_NO_SYMBOL $0D5B
COMMENT $0D5D Wait for timer 1
FORCE_SYMBOL $0D5D VIA_int_flags
COMMENT $0D61 Print the cash score
COMMENT $0D64 Draw high score line
FORCE_NO_SYMBOL $0D64
COMMENT $0D67 /BLANK low and /ZERO low
FORCE_SYMBOL $0D67 VIA_cntl
COMMENT $0D69 clear shift register
FORCE_SYMBOL $0D69 VIA_shift_reg
FORCE_NO_SYMBOL $0D6B
COMMENT $0D6E clear D/A register
FORCE_SYMBOL $0D6E VIA_port_a
COMMENT $0D70 mux=1, disable mux
FORCE_SYMBOL $0D70 VIA_port_b
COMMENT $0D72 mux=1, enable mux
FORCE_SYMBOL $0D72 VIA_port_b
COMMENT $0D74 do it again
FORCE_SYMBOL $0D74 VIA_port_b
FORCE_NO_SYMBOL $0D76
COMMENT $0D78 disable mux
FORCE_SYMBOL $0D78 VIA_port_b
COMMENT $0D7A Print the label
COMMENT $0D7E Store Y in D/A register
FORCE_SYMBOL $0D7E VIA_port_a
COMMENT $0D80 Enable mux
FORCE_SYMBOL $0D80 VIA_port_b
COMMENT $0D82 Blank low, zero high
FORCE_NO_SYMBOL $0D82
FORCE_SYMBOL $0D84 VIA_cntl
COMMENT $0D86 Clear shift register
FORCE_SYMBOL $0D86 VIA_shift_reg
COMMENT $0D88 Disable mux
FORCE_SYMBOL $0D88 VIA_port_b
COMMENT $0D8A Store X in D/A register
FORCE_SYMBOL $0D8A VIA_port_a
COMMENT $0D8C timer 1 count high
FORCE_SYMBOL $0D8C VIA_t1_cnt_hi
FORCE_SYMBOL $0D8E is_high_score
FORCE_SYMBOL $0D93 new_hs_label
FORCE_SYMBOL $0D98 hs_label
FORCE_NO_SYMBOL $0D9B
COMMENT $0D9D Wait for timer 1
FORCE_SYMBOL $0D9D VIA_int_flags
COMMENT $0DA4 Print the high score
FORCE_NO_SYMBOL $0DA4
COMMENT $0DA7 /BLANK low and /ZERO low
FORCE_SYMBOL $0DA7 VIA_cntl
COMMENT $0DA9 clear shift register
FORCE_SYMBOL $0DA9 VIA_shift_reg
FORCE_NO_SYMBOL $0DAB
COMMENT $0DAE clear D/A register
FORCE_SYMBOL $0DAE VIA_port_a
COMMENT $0DB0 mux=1, disable mux
FORCE_SYMBOL $0DB0 VIA_port_b
COMMENT $0DB2 mux=1, enable mux
FORCE_SYMBOL $0DB2 VIA_port_b
COMMENT $0DB4 do it again
FORCE_SYMBOL $0DB4 VIA_port_b
FORCE_NO_SYMBOL $0DB6
COMMENT $0DB8 disable mux
FORCE_SYMBOL $0DB8 VIA_port_b
COMMENT $0DBE Store Y in D/A register
FORCE_SYMBOL $0DBE VIA_port_a
COMMENT $0DC0 Enable mux
FORCE_SYMBOL $0DC0 VIA_port_b
COMMENT $0DC2 Blank low, zero high
FORCE_NO_SYMBOL $0DC2
FORCE_SYMBOL $0DC4 VIA_cntl
COMMENT $0DC6 Clear shift register
FORCE_SYMBOL $0DC6 VIA_shift_reg
COMMENT $0DC8 Disable mux
FORCE_SYMBOL $0DC8 VIA_port_b
COMMENT $0DCA Store X in D/A register
FORCE_SYMBOL $0DCA VIA_port_a
COMMENT $0DCC timer 1 count high
FORCE_SYMBOL $0DCC VIA_t1_cnt_hi
FORCE_SYMBOL $0DCE high_score_asc
FORCE_NO_SYMBOL $0DD1
COMMENT $0DD3 Wait for timer 1
FORCE_SYMBOL $0DD3 VIA_int_flags
COMMENT $0DDA Draw the crashed UFO :)
FORCE_NO_SYMBOL $0DDA
COMMENT $0DDD /BLANK low and /ZERO low
FORCE_SYMBOL $0DDD VIA_cntl
COMMENT $0DDF clear shift register
FORCE_SYMBOL $0DDF VIA_shift_reg
FORCE_NO_SYMBOL $0DE1
COMMENT $0DE4 clear D/A register
FORCE_SYMBOL $0DE4 VIA_port_a
COMMENT $0DE6 mux=1, disable mux
FORCE_SYMBOL $0DE6 VIA_port_b
COMMENT $0DE8 mux=1, enable mux
FORCE_SYMBOL $0DE8 VIA_port_b
COMMENT $0DEA do it again
FORCE_SYMBOL $0DEA VIA_port_b
FORCE_NO_SYMBOL $0DEC
COMMENT $0DEE disable mux
FORCE_SYMBOL $0DEE VIA_port_b
FORCE_NO_SYMBOL $0DF0
COMMENT $0DF4 Store Y in D/A register
FORCE_SYMBOL $0DF4 VIA_port_a
COMMENT $0DF6 Enable mux
FORCE_SYMBOL $0DF6 VIA_port_b
COMMENT $0DF8 Blank low, zero high
FORCE_NO_SYMBOL $0DF8
FORCE_SYMBOL $0DFA VIA_cntl
COMMENT $0DFC Clear shift register
FORCE_SYMBOL $0DFC VIA_shift_reg
COMMENT $0DFE Disable mux
FORCE_SYMBOL $0DFE VIA_port_b
COMMENT $0E00 Store X in D/A register
FORCE_SYMBOL $0E00 VIA_port_a
COMMENT $0E02 timer 1 count high
FORCE_SYMBOL $0E02 VIA_t1_cnt_hi
FORCE_SYMBOL $0E04 crashed_ufo_pic
FORCE_NO_SYMBOL $0E07
COMMENT $0E09 Wait for timer 1
FORCE_SYMBOL $0E09 VIA_int_flags
COMMENT $0E10 Skip input / call to action text if not faded in yet
FORCE_SYMBOL $0E10 intens
FORCE_SYMBOL $0E13 MAX_INTENSITY
COMMENT $0E17 Draw "press any button"
FORCE_NO_SYMBOL $0E17
COMMENT $0E1A /BLANK low and /ZERO low
FORCE_SYMBOL $0E1A VIA_cntl
COMMENT $0E1C clear shift register
FORCE_SYMBOL $0E1C VIA_shift_reg
FORCE_NO_SYMBOL $0E1E
COMMENT $0E21 clear D/A register
FORCE_SYMBOL $0E21 VIA_port_a
COMMENT $0E23 mux=1, disable mux
FORCE_SYMBOL $0E23 VIA_port_b
COMMENT $0E25 mux=1, enable mux
FORCE_SYMBOL $0E25 VIA_port_b
COMMENT $0E27 do it again
FORCE_SYMBOL $0E27 VIA_port_b
FORCE_NO_SYMBOL $0E29
COMMENT $0E2B disable mux
FORCE_SYMBOL $0E2B VIA_port_b
COMMENT $0E31 Store Y in D/A register
FORCE_SYMBOL $0E31 VIA_port_a
COMMENT $0E33 Enable mux
FORCE_SYMBOL $0E33 VIA_port_b
COMMENT $0E35 Blank low, zero high
FORCE_NO_SYMBOL $0E35
FORCE_SYMBOL $0E37 VIA_cntl
COMMENT $0E39 Clear shift register
FORCE_SYMBOL $0E39 VIA_shift_reg
COMMENT $0E3B Disable mux
FORCE_SYMBOL $0E3B VIA_port_b
COMMENT $0E3D Store X in D/A register
FORCE_SYMBOL $0E3D VIA_port_a
COMMENT $0E3F timer 1 count high
FORCE_SYMBOL $0E3F VIA_t1_cnt_hi
COMMENT $0E41 u=pointer to ASCII cash
FORCE_SYMBOL $0E41 cta_text
COMMENT $0E44 Wait for de beam
FORCE_NO_SYMBOL $0E44
COMMENT $0E46 Wait for timer 1
FORCE_SYMBOL $0E46 VIA_int_flags
COMMENT $0E4A Print the cash score
COMMENT $0E4D Read the joystick
FORCE_SYMBOL $0E4D GetJoystick
COMMENT $0E50 Check for a button press...
FORCE_SYMBOL $0E50 joy_b
COMMENT $0E55 ...and request state change if they hit button 1
FORCE_SYMBOL $0E55 GameInit
FORCE_SYMBOL $0E58 GameFrame
COMMENT $0E5F Process sfx
FORCE_SYMBOL $0E5F sfx_doframe
COMMENT_LINE $0E63 ****** DATA ******
COMMENT $0E63 Silent music
COMMENT_LINE $0E63 Silence!
COMMENT_LINE $0E63 An amazing composition by DSS, 2016
COMMENT_LINE $0E63 Used here for Ludum Dare 38 \p/
COMMENT_LINE $0E63 ***** SILENT MUSIC *****
COMMENT $0E6B Ship, landmark icons, the lovely planet <3
COMMENT_LINE $0E6B Game state data
COMMENT_LINE $0E6B By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $0E6B ***** SHIP GRAPHIC *****
COMMENT_LINE $0E9C ***** WEE FLAG GRAPHIC *****
COMMENT_LINE $0EA9 ***** LANDMARK ICONS *****
COMMENT_LINE $0EA9 NOTE: These are all Draw_VL_mode format
COMMENT_LINE $0EDF ***** LANDMARK PATHS *****
COMMENT $0EDF *** Mount Emma (southern island) ***
COMMENT $0EE1 Ideal planet_rot for this landmark
COMMENT $0EE2 Ideal shipy for this landmark
COMMENT $0EE3 *** TRRRomaniaSi (R-shaped continent) ***
COMMENT $0EE7 *** MTRONIC ***
COMMENT $0EEB *** MISTERBONE (India shaped continent) ***
COMMENT_LINE $1067 ***** PLANET GRAPHIC *****
COMMENT_LINE $10C5 ***** Frame0 (3 contours) *****
COMMENT_LINE $10C5 Contour 0
COMMENT_LINE $10DA Contour 1
COMMENT_LINE $10F3 Contour 2
COMMENT_LINE $1134 ***** Frame1 (5 contours) *****
COMMENT_LINE $1135 Contour 0
COMMENT_LINE $113E Contour 1
COMMENT_LINE $1143 Contour 2
COMMENT_LINE $1158 Contour 3
COMMENT_LINE $1169 Contour 4
COMMENT_LINE $11EE ***** Frame2 (3 contours) *****
COMMENT_LINE $11EF Contour 0
COMMENT_LINE $120C Contour 1
COMMENT_LINE $1221 Contour 2
COMMENT_LINE $125A ***** Frame3 (1 contour) *****
COMMENT_LINE $125B Contour 0
COMMENT_LINE $12FA ***** Frame4 (3 contours) *****
COMMENT_LINE $12FB Contour 0
COMMENT_LINE $1314 Contour 1
COMMENT_LINE $131D Contour 2
COMMENT_LINE $137C ***** Frame5 (4 contours) *****
COMMENT_LINE $137D Contour 0
COMMENT_LINE $1382 Contour 1
COMMENT_LINE $1397 Contour 2
COMMENT_LINE $13A0 Contour 3
COMMENT_LINE $1405 ***** Frame6 (4 contours) *****
COMMENT_LINE $1406 Contour 0
COMMENT_LINE $140B Contour 1
COMMENT_LINE $1420 Contour 2
COMMENT_LINE $1429 Contour 3
COMMENT_LINE $148E ***** Frame7 (5 contours) *****
COMMENT_LINE $148F Contour 0
COMMENT_LINE $14A4 Contour 1
COMMENT_LINE $14B1 Contour 2
COMMENT_LINE $14BE Contour 3
COMMENT_LINE $14E1 Contour 4
COMMENT_LINE $14FC ***** Frame8 (4 contours) *****
COMMENT_LINE $14FD Contour 0
COMMENT_LINE $1512 Contour 1
COMMENT_LINE $151F Contour 2
COMMENT_LINE $1556 Contour 3
COMMENT_LINE $157B ***** Frame9 (3 contours) *****
COMMENT_LINE $157C Contour 0
COMMENT_LINE $158D Contour 1
COMMENT_LINE $1596 Contour 2
COMMENT_LINE $15F7 ***** Frame10 (3 contours) *****
COMMENT_LINE $15F8 Contour 0
COMMENT_LINE $1601 Contour 1
COMMENT_LINE $1654 Contour 2
COMMENT_LINE $1671 ***** Frame11 (2 contours) *****
COMMENT_LINE $1672 Contour 0
COMMENT_LINE $16CD Contour 1
COMMENT_LINE $16EE ***** Frame12 (2 contours) *****
COMMENT_LINE $16EF Contour 0
COMMENT_LINE $16F8 Contour 1
COMMENT_LINE $1775 ***** Frame13 (2 contours) *****
COMMENT_LINE $1776 Contour 0
COMMENT_LINE $1783 Contour 1
COMMENT_LINE $17E2 ***** Frame14 (2 contours) *****
COMMENT_LINE $17E3 Contour 0
COMMENT_LINE $1832 Contour 1
COMMENT_LINE $1879 ***** Frame15 (2 contours) *****
COMMENT_LINE $187A Contour 0
COMMENT_LINE $18DF Contour 1
COMMENT_LINE $18FE ***** Frame16 (2 contours) *****
COMMENT_LINE $18FF Contour 0
COMMENT_LINE $194A Contour 1
COMMENT_LINE $196D ***** Frame17 (3 contours) *****
COMMENT_LINE $196E Contour 0
COMMENT_LINE $1977 Contour 1
COMMENT_LINE $1990 Contour 2
COMMENT_LINE $19D7 ***** Frame18 (4 contours) *****
COMMENT_LINE $19D8 Contour 0
COMMENT_LINE $19E1 Contour 1
COMMENT_LINE $19EA Contour 2
COMMENT_LINE $19FF Contour 3
COMMENT_LINE $1A3A ***** Frame19 (3 contours) *****
COMMENT_LINE $1A3B Contour 0
COMMENT_LINE $1A40 Contour 1
COMMENT_LINE $1A55 Contour 2
COMMENT_LINE $1AAC ***** Frame20 (3 contours) *****
COMMENT_LINE $1AAD Contour 0
COMMENT_LINE $1AC2 Contour 1
COMMENT_LINE $1AD7 Contour 2
COMMENT_LINE $1B28 ***** Frame21 (2 contours) *****
COMMENT_LINE $1B29 Contour 0
COMMENT_LINE $1B42 Contour 1
COMMENT_LINE $1B9B ***** Frame22 (3 contours) *****
COMMENT_LINE $1B9C Contour 0
COMMENT_LINE $1BA5 Contour 1
COMMENT_LINE $1BC2 Contour 2
COMMENT_LINE $1BFD ***** Frame23 (2 contours) *****
COMMENT_LINE $1BFE Contour 0
COMMENT_LINE $1C23 Contour 1
COMMENT_LINE $1C68 ***** Frame24 (1 contour) *****
COMMENT_LINE $1C69 Contour 0
COMMENT_LINE $1CD0 ***** Frame25 (3 contours) *****
COMMENT_LINE $1CD1 Contour 0
COMMENT_LINE $1CDE Contour 1
COMMENT_LINE $1CF7 Contour 2
COMMENT_LINE $1D20 ***** Frame26 (2 contours) *****
COMMENT_LINE $1D21 Contour 0
COMMENT_LINE $1D3C Contour 1
COMMENT_LINE $1D7B ***** Frame27 (2 contours) *****
COMMENT_LINE $1D7C Contour 0
COMMENT_LINE $1D95 Contour 1
COMMENT_LINE $1DC6 ***** Frame28 (3 contours) *****
COMMENT_LINE $1DC7 Contour 0
COMMENT_LINE $1DEC Contour 1
COMMENT_LINE $1DF9 Contour 2
COMMENT_LINE $1E20 ***** Frame29 (2 contours) *****
COMMENT_LINE $1E21 Contour 0
COMMENT_LINE $1E36 Contour 1
COMMENT_LINE $1E9B ***** Frame30 (4 contours) *****
COMMENT_LINE $1E9C Contour 0
COMMENT_LINE $1EA1 Contour 1
COMMENT_LINE $1EC2 Contour 2
COMMENT_LINE $1ED3 Contour 3
COMMENT_LINE $1F2C ***** Frame31 (3 contours) *****
COMMENT_LINE $1F2D Contour 0
COMMENT_LINE $1F46 Contour 1
COMMENT_LINE $1F4B Contour 2
COMMENT_LINE $1F8E ***** Frame32 (4 contours) *****
COMMENT_LINE $1F8F Contour 0
COMMENT_LINE $1F98 Contour 1
COMMENT_LINE $1FAB Contour 2
COMMENT_LINE $1FC4 Contour 3
COMMENT_LINE $1FF7 ***** Frame33 (3 contours) *****
COMMENT_LINE $1FF8 Contour 0
COMMENT_LINE $200D Contour 1
COMMENT_LINE $2012 Contour 2
COMMENT_LINE $2055 ***** Frame34 (2 contours) *****
COMMENT_LINE $2056 Contour 0
COMMENT_LINE $2067 Contour 1
COMMENT_LINE $20BA ***** Frame35 (4 contours) *****
COMMENT_LINE $20BB Contour 0
COMMENT_LINE $20C0 Contour 1
COMMENT_LINE $20C5 Contour 2
COMMENT_LINE $20DE Contour 3
COMMENT_LINE $211D ***** Frame36 (4 contours) *****
COMMENT_LINE $211E Contour 0
COMMENT_LINE $212B Contour 1
COMMENT_LINE $2134 Contour 2
COMMENT_LINE $2167 Contour 3
COMMENT_LINE $2186 ***** Frame37 (2 contours) *****
COMMENT_LINE $2187 Contour 0
COMMENT_LINE $2194 Contour 1
COMMENT_LINE $21E5 ***** Frame38 (4 contours) *****
COMMENT_LINE $21E6 Contour 0
COMMENT_LINE $21F3 Contour 1
COMMENT_LINE $2200 Contour 2
COMMENT_LINE $220D Contour 3
COMMENT_LINE $2250 ***** Frame39 (3 contours) *****
COMMENT_LINE $2251 Contour 0
COMMENT_LINE $2266 Contour 1
COMMENT_LINE $226F Contour 2
COMMENT_LINE $22B4 ***** Frame40 (4 contours) *****
COMMENT_LINE $22B5 Contour 0
COMMENT_LINE $22CE Contour 1
COMMENT_LINE $22D7 Contour 2
COMMENT_LINE $22E4 Contour 3
COMMENT_LINE $2343 ***** Frame41 (3 contours) *****
COMMENT_LINE $2344 Contour 0
COMMENT_LINE $2351 Contour 1
COMMENT_LINE $235A Contour 2
COMMENT_LINE $23BD ***** Frame42 (5 contours) *****
COMMENT_LINE $23BE Contour 0
COMMENT_LINE $23CF Contour 1
COMMENT_LINE $23D8 Contour 2
COMMENT_LINE $23E5 Contour 3
COMMENT_LINE $2426 Contour 4
COMMENT_LINE $244B ***** Frame43 (4 contours) *****
COMMENT_LINE $244C Contour 0
COMMENT_LINE $246D Contour 1
COMMENT_LINE $2476 Contour 2
COMMENT_LINE $24B9 Contour 3
COMMENT_LINE $24D2 ***** Frame44 (3 contours) *****
COMMENT_LINE $24D3 Contour 0
COMMENT_LINE $24F0 Contour 1
COMMENT_LINE $24F9 Contour 2
COMMENT_LINE $2556 ***** Frame45 (3 contours) *****
COMMENT_LINE $2557 Contour 0
COMMENT_LINE $2578 Contour 1
COMMENT_LINE $2585 Contour 2
COMMENT_LINE $25E8 ***** Frame46 (3 contours) *****
COMMENT_LINE $25E9 Contour 0
COMMENT_LINE $25F2 Contour 1
COMMENT_LINE $2605 Contour 2
COMMENT $265F Sound effects
COMMENT_LINE $265F Sound FX
COMMENT_LINE $265F By Fell^DSS, Ludum Dare 38 \p/
COMMENT $2871 Game over state data
COMMENT_LINE $2871 Game over state data
COMMENT_LINE $2871 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $2871 ***** Game over text *****
COMMENT_LINE $28A9 ***** Crashed UFO pic *****
COMMENT $2928 Splash state data
COMMENT_LINE $2928 Splash state data
COMMENT_LINE $2928 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $2928 ***** Call to action text *****
COMMENT $2977 Taxi sample
COMMENT_LINE $2977 "Taxi!" sample
COMMENT_LINE $2977 By Fell^DSS, Ludum Dare 38 \p/
COMMENT_LINE $2977 following is sample data saved by Vide
COMMENT_LINE $2977 the data is in raw format: 8 bit, signed, 1 channel, samplerate: 8000
COMMENT_LINE $2977 since a frame is only one byte, endianess is meaningless
COMMENT_LINE $2977 one word with 'length', followed by length sample bytes
COMMENT_LINE $2977 The sample data below is stored in REVERSE order!
RANGE $0000-$3E31 DP $D0
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0025 CHAR_DATA 20
RANGE $0025-$0026 DB_DATA 1
RANGE $0026-$01CD CODE
RANGE $01CD-$01D2 DB_DATA 5
RANGE $01D2-$01D7 DB_DATA 5
RANGE $01D7-$01DC DB_DATA 5
RANGE $01DC-$01E1 DB_DATA 5
RANGE $01E1-$01E6 DB_DATA 5
RANGE $01E6-$01EB DB_DATA 5
RANGE $01EB-$01F0 DB_DATA 5
RANGE $01F0-$01F5 DB_DATA 5
RANGE $01F5-$01FA DB_DATA 5
RANGE $01FA-$01FF DB_DATA 5
RANGE $01FF-$0204 DB_DATA 5
RANGE $0204-$0209 DB_DATA 5
RANGE $0209-$020E DB_DATA 5
RANGE $020E-$0213 DB_DATA 5
RANGE $0213-$0218 DB_DATA 5
RANGE $0218-$021D DB_DATA 5
RANGE $021D-$0E63 CODE
RANGE $0E63-$0E65 DW_DATA 1
RANGE $0E65-$0E67 DW_DATA 1
RANGE $0E67-$0E69 DB_DATA 2
RANGE $0E69-$0E6B DB_DATA 2
RANGE $0E6B-$0E6C DB_DATA 1
RANGE $0E6C-$0E6E DB_DATA 2
RANGE $0E6E-$0E70 DB_DATA 2
RANGE $0E70-$0E72 DB_DATA 2
RANGE $0E72-$0E74 DB_DATA 2
RANGE $0E74-$0E76 DB_DATA 2
RANGE $0E76-$0E78 DB_DATA 2
RANGE $0E78-$0E7A DB_DATA 2
RANGE $0E7A-$0E7C DB_DATA 2
RANGE $0E7C-$0E7E DB_DATA 2
RANGE $0E7E-$0E80 DB_DATA 2
RANGE $0E80-$0E82 DB_DATA 2
RANGE $0E82-$0E84 DB_DATA 2
RANGE $0E84-$0E86 DB_DATA 2
RANGE $0E86-$0E88 DB_DATA 2
RANGE $0E88-$0E8A DB_DATA 2
RANGE $0E8A-$0E8C DB_DATA 2
RANGE $0E8C-$0E8E DB_DATA 2
RANGE $0E8E-$0E90 DB_DATA 2
RANGE $0E90-$0E92 DB_DATA 2
RANGE $0E92-$0E94 DB_DATA 2
RANGE $0E94-$0E96 DB_DATA 2
RANGE $0E96-$0E98 DB_DATA 2
RANGE $0E98-$0E9A DB_DATA 2
RANGE $0E9A-$0E9C DB_DATA 2
RANGE $0E9C-$0E9D DB_DATA 1
RANGE $0E9D-$0E9F DB_DATA 2
RANGE $0E9F-$0EA1 DB_DATA 2
RANGE $0EA1-$0EA3 DB_DATA 2
RANGE $0EA3-$0EA5 DB_DATA 2
RANGE $0EA5-$0EA7 DB_DATA 2
RANGE $0EA7-$0EA9 DB_DATA 2
RANGE $0EA9-$0EAC DB_DATA 3
RANGE $0EAC-$0EAF DB_DATA 3
RANGE $0EAF-$0EB2 DB_DATA 3
RANGE $0EB2-$0EB3 DB_DATA 1
RANGE $0EB3-$0EB6 DB_DATA 3
RANGE $0EB6-$0EB9 DB_DATA 3
RANGE $0EB9-$0EBC DB_DATA 3
RANGE $0EBC-$0EBF DB_DATA 3
RANGE $0EBF-$0EC2 DB_DATA 3
RANGE $0EC2-$0EC5 DB_DATA 3
RANGE $0EC5-$0EC8 DB_DATA 3
RANGE $0EC8-$0ECB DB_DATA 3
RANGE $0ECB-$0ECE DB_DATA 3
RANGE $0ECE-$0ED1 DB_DATA 3
RANGE $0ED1-$0ED2 DB_DATA 1
RANGE $0ED2-$0ED5 DB_DATA 3
RANGE $0ED5-$0ED8 DB_DATA 3
RANGE $0ED8-$0EDB DB_DATA 3
RANGE $0EDB-$0EDE DB_DATA 3
RANGE $0EDE-$0EDF DB_DATA 1
RANGE $0EDF-$0EE1 DW_DATA 1
RANGE $0EE1-$0EE2 DB_DATA 1
RANGE $0EE2-$0EE3 DB_DATA 1
RANGE $0EE3-$0EE5 DW_DATA 1
RANGE $0EE5-$0EE6 DB_DATA 1
RANGE $0EE6-$0EE7 DB_DATA 1
RANGE $0EE7-$0EE9 DW_DATA 1
RANGE $0EE9-$0EEA DB_DATA 1
RANGE $0EEA-$0EEB DB_DATA 1
RANGE $0EEB-$0EED DW_DATA 1
RANGE $0EED-$0EEE DB_DATA 1
RANGE $0EEE-$0EEF DB_DATA 1
RANGE $0EEF-$0EF1 DB_DATA 2
RANGE $0EF1-$0EF3 DB_DATA 2
RANGE $0EF3-$0EF5 DB_DATA 2
RANGE $0EF5-$0EF7 DB_DATA 2
RANGE $0EF7-$0EF9 DB_DATA 2
RANGE $0EF9-$0EFB DB_DATA 2
RANGE $0EFB-$0EFD DB_DATA 2
RANGE $0EFD-$0EFF DB_DATA 2
RANGE $0EFF-$0F01 DB_DATA 2
RANGE $0F01-$0F03 DB_DATA 2
RANGE $0F03-$0F05 DB_DATA 2
RANGE $0F05-$0F07 DW_DATA 1
RANGE $0F07-$0F09 DW_DATA 1
RANGE $0F09-$0F0B DW_DATA 1
RANGE $0F0B-$0F0D DW_DATA 1
RANGE $0F0D-$0F0F DW_DATA 1
RANGE $0F0F-$0F11 DW_DATA 1
RANGE $0F11-$0F13 DW_DATA 1
RANGE $0F13-$0F15 DW_DATA 1
RANGE $0F15-$0F17 DW_DATA 1
RANGE $0F17-$0F19 DW_DATA 1
RANGE $0F19-$0F1B DW_DATA 1
RANGE $0F1B-$0F1D DW_DATA 1
RANGE $0F1D-$0F1F DW_DATA 1
RANGE $0F1F-$0F21 DW_DATA 1
RANGE $0F21-$0F23 DW_DATA 1
RANGE $0F23-$0F25 DW_DATA 1
RANGE $0F25-$0F27 DW_DATA 1
RANGE $0F27-$0F29 DW_DATA 1
RANGE $0F29-$0F2B DW_DATA 1
RANGE $0F2B-$0F2D DW_DATA 1
RANGE $0F2D-$0F2F DW_DATA 1
RANGE $0F2F-$0F31 DW_DATA 1
RANGE $0F31-$0F33 DW_DATA 1
RANGE $0F33-$0F35 DW_DATA 1
RANGE $0F35-$0F37 DW_DATA 1
RANGE $0F37-$0F39 DW_DATA 1
RANGE $0F39-$0F3B DW_DATA 1
RANGE $0F3B-$0F3D DW_DATA 1
RANGE $0F3D-$0F3F DW_DATA 1
RANGE $0F3F-$0F41 DW_DATA 1
RANGE $0F41-$0F43 DB_DATA 2
RANGE $0F43-$0F45 DB_DATA 2
RANGE $0F45-$0F47 DB_DATA 2
RANGE $0F47-$0F49 DB_DATA 2
RANGE $0F49-$0F4B DB_DATA 2
RANGE $0F4B-$0F4D DB_DATA 2
RANGE $0F4D-$0F4F DW_DATA 1
RANGE $0F4F-$0F51 DW_DATA 1
RANGE $0F51-$0F53 DB_DATA 2
RANGE $0F53-$0F55 DB_DATA 2
RANGE $0F55-$0F57 DB_DATA 2
RANGE $0F57-$0F59 DB_DATA 2
RANGE $0F59-$0F5B DB_DATA 2
RANGE $0F5B-$0F5D DB_DATA 2
RANGE $0F5D-$0F5F DB_DATA 2
RANGE $0F5F-$0F61 DB_DATA 2
RANGE $0F61-$0F63 DB_DATA 2
RANGE $0F63-$0F65 DB_DATA 2
RANGE $0F65-$0F67 DB_DATA 2
RANGE $0F67-$0F69 DB_DATA 2
RANGE $0F69-$0F6B DB_DATA 2
RANGE $0F6B-$0F6D DB_DATA 2
RANGE $0F6D-$0F6F DW_DATA 1
RANGE $0F6F-$0F71 DW_DATA 1
RANGE $0F71-$0F73 DW_DATA 1
RANGE $0F73-$0F75 DW_DATA 1
RANGE $0F75-$0F77 DW_DATA 1
RANGE $0F77-$0F79 DW_DATA 1
RANGE $0F79-$0F7B DW_DATA 1
RANGE $0F7B-$0F7D DW_DATA 1
RANGE $0F7D-$0F7F DW_DATA 1
RANGE $0F7F-$0F81 DW_DATA 1
RANGE $0F81-$0F83 DW_DATA 1
RANGE $0F83-$0F85 DW_DATA 1
RANGE $0F85-$0F87 DW_DATA 1
RANGE $0F87-$0F89 DW_DATA 1
RANGE $0F89-$0F8B DW_DATA 1
RANGE $0F8B-$0F8D DW_DATA 1
RANGE $0F8D-$0F8F DW_DATA 1
RANGE $0F8F-$0F91 DW_DATA 1
RANGE $0F91-$0F93 DW_DATA 1
RANGE $0F93-$0F95 DW_DATA 1
RANGE $0F95-$0F97 DW_DATA 1
RANGE $0F97-$0F99 DW_DATA 1
RANGE $0F99-$0F9B DW_DATA 1
RANGE $0F9B-$0F9D DW_DATA 1
RANGE $0F9D-$0F9F DW_DATA 1
RANGE $0F9F-$0FA1 DW_DATA 1
RANGE $0FA1-$0FA3 DW_DATA 1
RANGE $0FA3-$0FA5 DW_DATA 1
RANGE $0FA5-$0FA7 DW_DATA 1
RANGE $0FA7-$0FA9 DW_DATA 1
RANGE $0FA9-$0FAB DW_DATA 1
RANGE $0FAB-$0FAD DW_DATA 1
RANGE $0FAD-$0FAF DW_DATA 1
RANGE $0FAF-$0FB1 DW_DATA 1
RANGE $0FB1-$0FB3 DW_DATA 1
RANGE $0FB3-$0FB5 DW_DATA 1
RANGE $0FB5-$0FB7 DW_DATA 1
RANGE $0FB7-$0FB9 DW_DATA 1
RANGE $0FB9-$0FBB DW_DATA 1
RANGE $0FBB-$0FBD DW_DATA 1
RANGE $0FBD-$0FBF DW_DATA 1
RANGE $0FBF-$0FC1 DW_DATA 1
RANGE $0FC1-$0FC3 DW_DATA 1
RANGE $0FC3-$0FC5 DW_DATA 1
RANGE $0FC5-$0FC7 DW_DATA 1
RANGE $0FC7-$0FC9 DW_DATA 1
RANGE $0FC9-$0FCB DW_DATA 1
RANGE $0FCB-$0FCD DB_DATA 2
RANGE $0FCD-$0FCF DB_DATA 2
RANGE $0FCF-$0FD1 DB_DATA 2
RANGE $0FD1-$0FD3 DB_DATA 2
RANGE $0FD3-$0FD5 DB_DATA 2
RANGE $0FD5-$0FD7 DB_DATA 2
RANGE $0FD7-$0FD9 DB_DATA 2
RANGE $0FD9-$0FDB DB_DATA 2
RANGE $0FDB-$0FDD DB_DATA 2
RANGE $0FDD-$0FDF DB_DATA 2
RANGE $0FDF-$0FE1 DB_DATA 2
RANGE $0FE1-$0FE3 DB_DATA 2
RANGE $0FE3-$0FE5 DB_DATA 2
RANGE $0FE5-$0FE7 DB_DATA 2
RANGE $0FE7-$0FE9 DB_DATA 2
RANGE $0FE9-$0FEB DW_DATA 1
RANGE $0FEB-$0FED DW_DATA 1
RANGE $0FED-$0FEF DW_DATA 1
RANGE $0FEF-$0FF1 DW_DATA 1
RANGE $0FF1-$0FF3 DW_DATA 1
RANGE $0FF3-$0FF5 DW_DATA 1
RANGE $0FF5-$0FF7 DW_DATA 1
RANGE $0FF7-$0FF9 DW_DATA 1
RANGE $0FF9-$0FFB DW_DATA 1
RANGE $0FFB-$0FFD DW_DATA 1
RANGE $0FFD-$0FFF DW_DATA 1
RANGE $0FFF-$1001 DW_DATA 1
RANGE $1001-$1003 DW_DATA 1
RANGE $1003-$1005 DW_DATA 1
RANGE $1005-$1007 DW_DATA 1
RANGE $1007-$1009 DW_DATA 1
RANGE $1009-$100B DB_DATA 2
RANGE $100B-$100D DB_DATA 2
RANGE $100D-$100F DB_DATA 2
RANGE $100F-$1011 DB_DATA 2
RANGE $1011-$1013 DB_DATA 2
RANGE $1013-$1015 DW_DATA 1
RANGE $1015-$1017 DW_DATA 1
RANGE $1017-$1019 DW_DATA 1
RANGE $1019-$101B DW_DATA 1
RANGE $101B-$101D DW_DATA 1
RANGE $101D-$101F DW_DATA 1
RANGE $101F-$1021 DW_DATA 1
RANGE $1021-$1023 DW_DATA 1
RANGE $1023-$1025 DW_DATA 1
RANGE $1025-$1027 DW_DATA 1
RANGE $1027-$1029 DW_DATA 1
RANGE $1029-$102B DW_DATA 1
RANGE $102B-$102D DW_DATA 1
RANGE $102D-$102F DW_DATA 1
RANGE $102F-$1031 DW_DATA 1
RANGE $1031-$1033 DW_DATA 1
RANGE $1033-$1035 DW_DATA 1
RANGE $1035-$1037 DW_DATA 1
RANGE $1037-$1039 DW_DATA 1
RANGE $1039-$103B DW_DATA 1
RANGE $103B-$103D DW_DATA 1
RANGE $103D-$103F DW_DATA 1
RANGE $103F-$1041 DW_DATA 1
RANGE $1041-$1043 DW_DATA 1
RANGE $1043-$1045 DW_DATA 1
RANGE $1045-$1047 DW_DATA 1
RANGE $1047-$1049 DW_DATA 1
RANGE $1049-$104B DB_DATA 2
RANGE $104B-$104D DB_DATA 2
RANGE $104D-$104F DB_DATA 2
RANGE $104F-$1051 DB_DATA 2
RANGE $1051-$1053 DB_DATA 2
RANGE $1053-$1055 DB_DATA 2
RANGE $1055-$1057 DB_DATA 2
RANGE $1057-$1059 DB_DATA 2
RANGE $1059-$105B DB_DATA 2
RANGE $105B-$105D DB_DATA 2
RANGE $105D-$105F DB_DATA 2
RANGE $105F-$1061 DB_DATA 2
RANGE $1061-$1063 DB_DATA 2
RANGE $1063-$1065 DB_DATA 2
RANGE $1065-$1067 DB_DATA 2
RANGE $1067-$1069 DW_DATA 1
RANGE $1069-$106B DW_DATA 1
RANGE $106B-$106D DW_DATA 1
RANGE $106D-$106F DW_DATA 1
RANGE $106F-$1071 DW_DATA 1
RANGE $1071-$1073 DW_DATA 1
RANGE $1073-$1075 DW_DATA 1
RANGE $1075-$1077 DW_DATA 1
RANGE $1077-$1079 DW_DATA 1
RANGE $1079-$107B DW_DATA 1
RANGE $107B-$107D DW_DATA 1
RANGE $107D-$107F DW_DATA 1
RANGE $107F-$1081 DW_DATA 1
RANGE $1081-$1083 DW_DATA 1
RANGE $1083-$1085 DW_DATA 1
RANGE $1085-$1087 DW_DATA 1
RANGE $1087-$1089 DW_DATA 1
RANGE $1089-$108B DW_DATA 1
RANGE $108B-$108D DW_DATA 1
RANGE $108D-$108F DW_DATA 1
RANGE $108F-$1091 DW_DATA 1
RANGE $1091-$1093 DW_DATA 1
RANGE $1093-$1095 DW_DATA 1
RANGE $1095-$1097 DW_DATA 1
RANGE $1097-$1099 DW_DATA 1
RANGE $1099-$109B DW_DATA 1
RANGE $109B-$109D DW_DATA 1
RANGE $109D-$109F DW_DATA 1
RANGE $109F-$10A1 DW_DATA 1
RANGE $10A1-$10A3 DW_DATA 1
RANGE $10A3-$10A5 DW_DATA 1
RANGE $10A5-$10A7 DW_DATA 1
RANGE $10A7-$10A9 DW_DATA 1
RANGE $10A9-$10AB DW_DATA 1
RANGE $10AB-$10AD DW_DATA 1
RANGE $10AD-$10AF DW_DATA 1
RANGE $10AF-$10B1 DW_DATA 1
RANGE $10B1-$10B3 DW_DATA 1
RANGE $10B3-$10B5 DW_DATA 1
RANGE $10B5-$10B7 DW_DATA 1
RANGE $10B7-$10B9 DW_DATA 1
RANGE $10B9-$10BB DW_DATA 1
RANGE $10BB-$10BD DW_DATA 1
RANGE $10BD-$10BF DW_DATA 1
RANGE $10BF-$10C1 DW_DATA 1
RANGE $10C1-$10C3 DW_DATA 1
RANGE $10C3-$10C5 DW_DATA 1
RANGE $10C5-$10DA DB_DATA 21
RANGE $10DA-$10F3 DB_DATA 25
RANGE $10F3-$1116 DB_DATA 35
RANGE $1116-$1134 DB_DATA 30
RANGE $1134-$1135 DB_DATA 1
RANGE $1135-$113E DB_DATA 9
RANGE $113E-$1143 DB_DATA 5
RANGE $1143-$1158 DB_DATA 21
RANGE $1158-$1169 DB_DATA 17
RANGE $1169-$118C DB_DATA 35
RANGE $118C-$11AC DB_DATA 32
RANGE $11AC-$11CC DB_DATA 32
RANGE $11CC-$11EC DB_DATA 32
RANGE $11EC-$11EE DB_DATA 2
RANGE $11EE-$11EF DB_DATA 1
RANGE $11EF-$120C DB_DATA 29
RANGE $120C-$1221 DB_DATA 21
RANGE $1221-$1244 DB_DATA 35
RANGE $1244-$125A DB_DATA 22
RANGE $125A-$125B DB_DATA 1
RANGE $125B-$127E DB_DATA 35
RANGE $127E-$129E DB_DATA 32
RANGE $129E-$12BE DB_DATA 32
RANGE $12BE-$12DE DB_DATA 32
RANGE $12DE-$12FA DB_DATA 28
RANGE $12FA-$12FB DB_DATA 1
RANGE $12FB-$1314 DB_DATA 25
RANGE $1314-$131D DB_DATA 9
RANGE $131D-$1340 DB_DATA 35
RANGE $1340-$1360 DB_DATA 32
RANGE $1360-$137C DB_DATA 28
RANGE $137C-$137D DB_DATA 1
RANGE $137D-$1382 DB_DATA 5
RANGE $1382-$1397 DB_DATA 21
RANGE $1397-$13A0 DB_DATA 9
RANGE $13A0-$13C3 DB_DATA 35
RANGE $13C3-$13E3 DB_DATA 32
RANGE $13E3-$1403 DB_DATA 32
RANGE $1403-$1405 DB_DATA 2
RANGE $1405-$1406 DB_DATA 1
RANGE $1406-$140B DB_DATA 5
RANGE $140B-$1420 DB_DATA 21
RANGE $1420-$1429 DB_DATA 9
RANGE $1429-$144C DB_DATA 35
RANGE $144C-$146C DB_DATA 32
RANGE $146C-$148C DB_DATA 32
RANGE $148C-$148E DB_DATA 2
RANGE $148E-$148F DB_DATA 1
RANGE $148F-$14A4 DB_DATA 21
RANGE $14A4-$14B1 DB_DATA 13
RANGE $14B1-$14BE DB_DATA 13
RANGE $14BE-$14E1 DB_DATA 35
RANGE $14E1-$14FC DB_DATA 27
RANGE $14FC-$14FD DB_DATA 1
RANGE $14FD-$1512 DB_DATA 21
RANGE $1512-$151F DB_DATA 13
RANGE $151F-$1542 DB_DATA 35
RANGE $1542-$1556 DB_DATA 20
RANGE $1556-$1579 DB_DATA 35
RANGE $1579-$157B DB_DATA 2
RANGE $157B-$157C DB_DATA 1
RANGE $157C-$158D DB_DATA 17
RANGE $158D-$1596 DB_DATA 9
RANGE $1596-$15B9 DB_DATA 35
RANGE $15B9-$15D9 DB_DATA 32
RANGE $15D9-$15F7 DB_DATA 30
RANGE $15F7-$15F8 DB_DATA 1
RANGE $15F8-$1601 DB_DATA 9
RANGE $1601-$1624 DB_DATA 35
RANGE $1624-$1644 DB_DATA 32
RANGE $1644-$1654 DB_DATA 16
RANGE $1654-$1671 DB_DATA 29
RANGE $1671-$1672 DB_DATA 1
RANGE $1672-$1695 DB_DATA 35
RANGE $1695-$16B5 DB_DATA 32
RANGE $16B5-$16CD DB_DATA 24
RANGE $16CD-$16EE DB_DATA 33
RANGE $16EE-$16EF DB_DATA 1
RANGE $16EF-$16F8 DB_DATA 9
RANGE $16F8-$171B DB_DATA 35
RANGE $171B-$173B DB_DATA 32
RANGE $173B-$175B DB_DATA 32
RANGE $175B-$1775 DB_DATA 26
RANGE $1775-$1776 DB_DATA 1
RANGE $1776-$1783 DB_DATA 13
RANGE $1783-$17A6 DB_DATA 35
RANGE $17A6-$17C6 DB_DATA 32
RANGE $17C6-$17E2 DB_DATA 28
RANGE $17E2-$17E3 DB_DATA 1
RANGE $17E3-$1806 DB_DATA 35
RANGE $1806-$1826 DB_DATA 32
RANGE $1826-$1832 DB_DATA 12
RANGE $1832-$1855 DB_DATA 35
RANGE $1855-$1875 DB_DATA 32
RANGE $1875-$1879 DB_DATA 4
RANGE $1879-$187A DB_DATA 1
RANGE $187A-$189D DB_DATA 35
RANGE $189D-$18BD DB_DATA 32
RANGE $18BD-$18DD DB_DATA 32
RANGE $18DD-$18DF DB_DATA 2
RANGE $18DF-$18FE DB_DATA 31
RANGE $18FE-$18FF DB_DATA 1
RANGE $18FF-$1922 DB_DATA 35
RANGE $1922-$1942 DB_DATA 32
RANGE $1942-$194A DB_DATA 8
RANGE $194A-$196D DB_DATA 35
RANGE $196D-$196E DB_DATA 1
RANGE $196E-$1977 DB_DATA 9
RANGE $1977-$1990 DB_DATA 25
RANGE $1990-$19B3 DB_DATA 35
RANGE $19B3-$19D3 DB_DATA 32
RANGE $19D3-$19D7 DB_DATA 4
RANGE $19D7-$19D8 DB_DATA 1
RANGE $19D8-$19E1 DB_DATA 9
RANGE $19E1-$19EA DB_DATA 9
RANGE $19EA-$19FF DB_DATA 21
RANGE $19FF-$1A22 DB_DATA 35
RANGE $1A22-$1A3A DB_DATA 24
RANGE $1A3A-$1A3B DB_DATA 1
RANGE $1A3B-$1A40 DB_DATA 5
RANGE $1A40-$1A55 DB_DATA 21
RANGE $1A55-$1A78 DB_DATA 35
RANGE $1A78-$1A98 DB_DATA 32
RANGE $1A98-$1AAC DB_DATA 20
RANGE $1AAC-$1AAD DB_DATA 1
RANGE $1AAD-$1AC2 DB_DATA 21
RANGE $1AC2-$1AD7 DB_DATA 21
RANGE $1AD7-$1AFA DB_DATA 35
RANGE $1AFA-$1B1A DB_DATA 32
RANGE $1B1A-$1B28 DB_DATA 14
RANGE $1B28-$1B29 DB_DATA 1
RANGE $1B29-$1B42 DB_DATA 25
RANGE $1B42-$1B65 DB_DATA 35
RANGE $1B65-$1B85 DB_DATA 32
RANGE $1B85-$1B9B DB_DATA 22
RANGE $1B9B-$1B9C DB_DATA 1
RANGE $1B9C-$1BA5 DB_DATA 9
RANGE $1BA5-$1BC2 DB_DATA 29
RANGE $1BC2-$1BE5 DB_DATA 35
RANGE $1BE5-$1BFD DB_DATA 24
RANGE $1BFD-$1BFE DB_DATA 1
RANGE $1BFE-$1C21 DB_DATA 35
RANGE $1C21-$1C23 DB_DATA 2
RANGE $1C23-$1C46 DB_DATA 35
RANGE $1C46-$1C66 DB_DATA 32
RANGE $1C66-$1C68 DB_DATA 2
RANGE $1C68-$1C69 DB_DATA 1
RANGE $1C69-$1C8C DB_DATA 35
RANGE $1C8C-$1CAC DB_DATA 32
RANGE $1CAC-$1CCC DB_DATA 32
RANGE $1CCC-$1CD0 DB_DATA 4
RANGE $1CD0-$1CD1 DB_DATA 1
RANGE $1CD1-$1CDE DB_DATA 13
RANGE $1CDE-$1CF7 DB_DATA 25
RANGE $1CF7-$1D1A DB_DATA 35
RANGE $1D1A-$1D20 DB_DATA 6
RANGE $1D20-$1D21 DB_DATA 1
RANGE $1D21-$1D3C DB_DATA 27
RANGE $1D3C-$1D5F DB_DATA 35
RANGE $1D5F-$1D7B DB_DATA 28
RANGE $1D7B-$1D7C DB_DATA 1
RANGE $1D7C-$1D95 DB_DATA 25
RANGE $1D95-$1DB8 DB_DATA 35
RANGE $1DB8-$1DC6 DB_DATA 14
RANGE $1DC6-$1DC7 DB_DATA 1
RANGE $1DC7-$1DEA DB_DATA 35
RANGE $1DEA-$1DEC DB_DATA 2
RANGE $1DEC-$1DF9 DB_DATA 13
RANGE $1DF9-$1E1C DB_DATA 35
RANGE $1E1C-$1E20 DB_DATA 4
RANGE $1E20-$1E21 DB_DATA 1
RANGE $1E21-$1E36 DB_DATA 21
RANGE $1E36-$1E59 DB_DATA 35
RANGE $1E59-$1E79 DB_DATA 32
RANGE $1E79-$1E99 DB_DATA 32
RANGE $1E99-$1E9B DB_DATA 2
RANGE $1E9B-$1E9C DB_DATA 1
RANGE $1E9C-$1EA1 DB_DATA 5
RANGE $1EA1-$1EC2 DB_DATA 33
RANGE $1EC2-$1ED3 DB_DATA 17
RANGE $1ED3-$1EF6 DB_DATA 35
RANGE $1EF6-$1F16 DB_DATA 32
RANGE $1F16-$1F2C DB_DATA 22
RANGE $1F2C-$1F2D DB_DATA 1
RANGE $1F2D-$1F46 DB_DATA 25
RANGE $1F46-$1F4B DB_DATA 5
RANGE $1F4B-$1F6E DB_DATA 35
RANGE $1F6E-$1F8E DB_DATA 32
RANGE $1F8E-$1F8F DB_DATA 1
RANGE $1F8F-$1F98 DB_DATA 9
RANGE $1F98-$1FAB DB_DATA 19
RANGE $1FAB-$1FC4 DB_DATA 25
RANGE $1FC4-$1FE7 DB_DATA 35
RANGE $1FE7-$1FF7 DB_DATA 16
RANGE $1FF7-$1FF8 DB_DATA 1
RANGE $1FF8-$200D DB_DATA 21
RANGE $200D-$2012 DB_DATA 5
RANGE $2012-$2035 DB_DATA 35
RANGE $2035-$2055 DB_DATA 32
RANGE $2055-$2056 DB_DATA 1
RANGE $2056-$2067 DB_DATA 17
RANGE $2067-$208A DB_DATA 35
RANGE $208A-$20AA DB_DATA 32
RANGE $20AA-$20BA DB_DATA 16
RANGE $20BA-$20BB DB_DATA 1
RANGE $20BB-$20C0 DB_DATA 5
RANGE $20C0-$20C5 DB_DATA 5
RANGE $20C5-$20DE DB_DATA 25
RANGE $20DE-$2101 DB_DATA 35
RANGE $2101-$211D DB_DATA 28
RANGE $211D-$211E DB_DATA 1
RANGE $211E-$212B DB_DATA 13
RANGE $212B-$2134 DB_DATA 9
RANGE $2134-$2157 DB_DATA 35
RANGE $2157-$2167 DB_DATA 16
RANGE $2167-$2186 DB_DATA 31
RANGE $2186-$2187 DB_DATA 1
RANGE $2187-$2194 DB_DATA 13
RANGE $2194-$21B7 DB_DATA 35
RANGE $21B7-$21D7 DB_DATA 32
RANGE $21D7-$21E5 DB_DATA 14
RANGE $21E5-$21E6 DB_DATA 1
RANGE $21E6-$21F3 DB_DATA 13
RANGE $21F3-$2200 DB_DATA 13
RANGE $2200-$220D DB_DATA 13
RANGE $220D-$2230 DB_DATA 35
RANGE $2230-$2250 DB_DATA 32
RANGE $2250-$2251 DB_DATA 1
RANGE $2251-$2266 DB_DATA 21
RANGE $2266-$226F DB_DATA 9
RANGE $226F-$2292 DB_DATA 35
RANGE $2292-$22B2 DB_DATA 32
RANGE $22B2-$22B4 DB_DATA 2
RANGE $22B4-$22B5 DB_DATA 1
RANGE $22B5-$22CE DB_DATA 25
RANGE $22CE-$22D7 DB_DATA 9
RANGE $22D7-$22E4 DB_DATA 13
RANGE $22E4-$2307 DB_DATA 35
RANGE $2307-$2327 DB_DATA 32
RANGE $2327-$2343 DB_DATA 28
RANGE $2343-$2344 DB_DATA 1
RANGE $2344-$2351 DB_DATA 13
RANGE $2351-$235A DB_DATA 9
RANGE $235A-$237D DB_DATA 35
RANGE $237D-$239D DB_DATA 32
RANGE $239D-$23BD DB_DATA 32
RANGE $23BD-$23BE DB_DATA 1
RANGE $23BE-$23CF DB_DATA 17
RANGE $23CF-$23D8 DB_DATA 9
RANGE $23D8-$23E5 DB_DATA 13
RANGE $23E5-$2408 DB_DATA 35
RANGE $2408-$2426 DB_DATA 30
RANGE $2426-$2449 DB_DATA 35
RANGE $2449-$244B DB_DATA 2
RANGE $244B-$244C DB_DATA 1
RANGE $244C-$246D DB_DATA 33
RANGE $246D-$2476 DB_DATA 9
RANGE $2476-$2499 DB_DATA 35
RANGE $2499-$24B9 DB_DATA 32
RANGE $24B9-$24D2 DB_DATA 25
RANGE $24D2-$24D3 DB_DATA 1
RANGE $24D3-$24F0 DB_DATA 29
RANGE $24F0-$24F9 DB_DATA 9
RANGE $24F9-$251C DB_DATA 35
RANGE $251C-$253C DB_DATA 32
RANGE $253C-$2556 DB_DATA 26
RANGE $2556-$2557 DB_DATA 1
RANGE $2557-$2578 DB_DATA 33
RANGE $2578-$2585 DB_DATA 13
RANGE $2585-$25A8 DB_DATA 35
RANGE $25A8-$25C8 DB_DATA 32
RANGE $25C8-$25E8 DB_DATA 32
RANGE $25E8-$25E9 DB_DATA 1
RANGE $25E9-$25F2 DB_DATA 9
RANGE $25F2-$2605 DB_DATA 19
RANGE $2605-$2628 DB_DATA 35
RANGE $2628-$2648 DB_DATA 32
RANGE $2648-$265E DB_DATA 22
RANGE $265E-$265F DB_DATA 1
RANGE $265F-$2669 DB_DATA 10
RANGE $2669-$2673 DB_DATA 10
RANGE $2673-$267D DB_DATA 10
RANGE $267D-$2687 DB_DATA 10
RANGE $2687-$2691 DB_DATA 10
RANGE $2691-$2696 DB_DATA 5
RANGE $2696-$26A0 DB_DATA 10
RANGE $26A0-$26AA DB_DATA 10
RANGE $26AA-$26B0 DB_DATA 6
RANGE $26B0-$26BA DB_DATA 10
RANGE $26BA-$26BC DB_DATA 2
RANGE $26BC-$26C6 DB_DATA 10
RANGE $26C6-$26D0 DB_DATA 10
RANGE $26D0-$26DA DB_DATA 10
RANGE $26DA-$26E4 DB_DATA 10
RANGE $26E4-$26EE DB_DATA 10
RANGE $26EE-$26F8 DB_DATA 10
RANGE $26F8-$2702 DB_DATA 10
RANGE $2702-$270C DB_DATA 10
RANGE $270C-$2716 DB_DATA 10
RANGE $2716-$2720 DB_DATA 10
RANGE $2720-$272A DB_DATA 10
RANGE $272A-$2734 DB_DATA 10
RANGE $2734-$273E DB_DATA 10
RANGE $273E-$2748 DB_DATA 10
RANGE $2748-$274D DB_DATA 5
RANGE $274D-$2757 DB_DATA 10
RANGE $2757-$2761 DB_DATA 10
RANGE $2761-$276B DB_DATA 10
RANGE $276B-$2775 DB_DATA 10
RANGE $2775-$277F DB_DATA 10
RANGE $277F-$2789 DB_DATA 10
RANGE $2789-$2793 DB_DATA 10
RANGE $2793-$279D DB_DATA 10
RANGE $279D-$27A7 DB_DATA 10
RANGE $27A7-$27B1 DB_DATA 10
RANGE $27B1-$27BB DB_DATA 10
RANGE $27BB-$27C5 DB_DATA 10
RANGE $27C5-$27CF DB_DATA 10
RANGE $27CF-$27D9 DB_DATA 10
RANGE $27D9-$27E3 DB_DATA 10
RANGE $27E3-$27ED DB_DATA 10
RANGE $27ED-$27F7 DB_DATA 10
RANGE $27F7-$2801 DB_DATA 10
RANGE $2801-$280B DB_DATA 10
RANGE $280B-$2815 DB_DATA 10
RANGE $2815-$281F DB_DATA 10
RANGE $281F-$2829 DB_DATA 10
RANGE $2829-$2833 DB_DATA 10
RANGE $2833-$283D DB_DATA 10
RANGE $283D-$2847 DB_DATA 10
RANGE $2847-$2851 DB_DATA 10
RANGE $2851-$285B DB_DATA 10
RANGE $285B-$2865 DB_DATA 10
RANGE $2865-$286F DB_DATA 10
RANGE $286F-$2871 DB_DATA 2
RANGE $2871-$287B DB_DATA 10
RANGE $287B-$288F DB_DATA 20
RANGE $288F-$289C DB_DATA 13
RANGE $289C-$28A9 DB_DATA 13
RANGE $28A9-$28AC DB_DATA 3
RANGE $28AC-$28AF DB_DATA 3
RANGE $28AF-$28B2 DB_DATA 3
RANGE $28B2-$28B5 DB_DATA 3
RANGE $28B5-$28B8 DB_DATA 3
RANGE $28B8-$28BB DB_DATA 3
RANGE $28BB-$28BE DB_DATA 3
RANGE $28BE-$28C1 DB_DATA 3
RANGE $28C1-$28C4 DB_DATA 3
RANGE $28C4-$28C7 DB_DATA 3
RANGE $28C7-$28CA DB_DATA 3
RANGE $28CA-$28CD DB_DATA 3
RANGE $28CD-$28D0 DB_DATA 3
RANGE $28D0-$28D3 DB_DATA 3
RANGE $28D3-$28D6 DB_DATA 3
RANGE $28D6-$28D9 DB_DATA 3
RANGE $28D9-$28DC DB_DATA 3
RANGE $28DC-$28DF DB_DATA 3
RANGE $28DF-$28E2 DB_DATA 3
RANGE $28E2-$28E5 DB_DATA 3
RANGE $28E5-$28E8 DB_DATA 3
RANGE $28E8-$28EB DB_DATA 3
RANGE $28EB-$28EE DB_DATA 3
RANGE $28EE-$28F1 DB_DATA 3
RANGE $28F1-$28F4 DB_DATA 3
RANGE $28F4-$28F7 DB_DATA 3
RANGE $28F7-$28FA DB_DATA 3
RANGE $28FA-$28FD DB_DATA 3
RANGE $28FD-$2900 DB_DATA 3
RANGE $2900-$2903 DB_DATA 3
RANGE $2903-$2906 DB_DATA 3
RANGE $2906-$2909 DB_DATA 3
RANGE $2909-$290C DB_DATA 3
RANGE $290C-$290F DB_DATA 3
RANGE $290F-$2912 DB_DATA 3
RANGE $2912-$2915 DB_DATA 3
RANGE $2915-$2918 DB_DATA 3
RANGE $2918-$291B DB_DATA 3
RANGE $291B-$291E DB_DATA 3
RANGE $291E-$2921 DB_DATA 3
RANGE $2921-$2924 DB_DATA 3
RANGE $2924-$2927 DB_DATA 3
RANGE $2927-$2928 DB_DATA 1
RANGE $2928-$293C DB_DATA 20
RANGE $293C-$2950 DB_DATA 20
RANGE $2950-$295B DB_DATA 11
RANGE $295B-$2964 DB_DATA 9
RANGE $2964-$296C DB_DATA 8
RANGE $296C-$2977 DB_DATA 11
RANGE $2977-$2979 DW_DATA 1
RANGE $2979-$2983 DB_DATA 10
RANGE $2983-$298D DB_DATA 10
RANGE $298D-$2997 DB_DATA 10
RANGE $2997-$29A1 DB_DATA 10
RANGE $29A1-$29AB DB_DATA 10
RANGE $29AB-$29B5 DB_DATA 10
RANGE $29B5-$29BF DB_DATA 10
RANGE $29BF-$29C9 DB_DATA 10
RANGE $29C9-$29D3 DB_DATA 10
RANGE $29D3-$29DD DB_DATA 10
RANGE $29DD-$29E7 DB_DATA 10
RANGE $29E7-$29F1 DB_DATA 10
RANGE $29F1-$29FB DB_DATA 10
RANGE $29FB-$2A05 DB_DATA 10
RANGE $2A05-$2A0F DB_DATA 10
RANGE $2A0F-$2A19 DB_DATA 10
RANGE $2A19-$2A23 DB_DATA 10
RANGE $2A23-$2A2D DB_DATA 10
RANGE $2A2D-$2A37 DB_DATA 10
RANGE $2A37-$2A41 DB_DATA 10
RANGE $2A41-$2A4B DB_DATA 10
RANGE $2A4B-$2A55 DB_DATA 10
RANGE $2A55-$2A5F DB_DATA 10
RANGE $2A5F-$2A69 DB_DATA 10
RANGE $2A69-$2A73 DB_DATA 10
RANGE $2A73-$2A7D DB_DATA 10
RANGE $2A7D-$2A87 DB_DATA 10
RANGE $2A87-$2A91 DB_DATA 10
RANGE $2A91-$2A9B DB_DATA 10
RANGE $2A9B-$2AA5 DB_DATA 10
RANGE $2AA5-$2AAF DB_DATA 10
RANGE $2AAF-$2AB9 DB_DATA 10
RANGE $2AB9-$2AC3 DB_DATA 10
RANGE $2AC3-$2ACD DB_DATA 10
RANGE $2ACD-$2AD7 DB_DATA 10
RANGE $2AD7-$2AE1 DB_DATA 10
RANGE $2AE1-$2AEB DB_DATA 10
RANGE $2AEB-$2AF5 DB_DATA 10
RANGE $2AF5-$2AFF DB_DATA 10
RANGE $2AFF-$2B09 DB_DATA 10
RANGE $2B09-$2B13 DB_DATA 10
RANGE $2B13-$2B1D DB_DATA 10
RANGE $2B1D-$2B27 DB_DATA 10
RANGE $2B27-$2B31 DB_DATA 10
RANGE $2B31-$2B3B DB_DATA 10
RANGE $2B3B-$2B45 DB_DATA 10
RANGE $2B45-$2B4F DB_DATA 10
RANGE $2B4F-$2B59 DB_DATA 10
RANGE $2B59-$2B63 DB_DATA 10
RANGE $2B63-$2B6D DB_DATA 10
RANGE $2B6D-$2B77 DB_DATA 10
RANGE $2B77-$2B81 DB_DATA 10
RANGE $2B81-$2B8B DB_DATA 10
RANGE $2B8B-$2B95 DB_DATA 10
RANGE $2B95-$2B9F DB_DATA 10
RANGE $2B9F-$2BA9 DB_DATA 10
RANGE $2BA9-$2BB3 DB_DATA 10
RANGE $2BB3-$2BBD DB_DATA 10
RANGE $2BBD-$2BC7 DB_DATA 10
RANGE $2BC7-$2BD1 DB_DATA 10
RANGE $2BD1-$2BDB DB_DATA 10
RANGE $2BDB-$2BE5 DB_DATA 10
RANGE $2BE5-$2BEF DB_DATA 10
RANGE $2BEF-$2BF9 DB_DATA 10
RANGE $2BF9-$2C03 DB_DATA 10
RANGE $2C03-$2C0D DB_DATA 10
RANGE $2C0D-$2C17 DB_DATA 10
RANGE $2C17-$2C21 DB_DATA 10
RANGE $2C21-$2C2B DB_DATA 10
RANGE $2C2B-$2C35 DB_DATA 10
RANGE $2C35-$2C3F DB_DATA 10
RANGE $2C3F-$2C49 DB_DATA 10
RANGE $2C49-$2C53 DB_DATA 10
RANGE $2C53-$2C5D DB_DATA 10
RANGE $2C5D-$2C67 DB_DATA 10
RANGE $2C67-$2C71 DB_DATA 10
RANGE $2C71-$2C7B DB_DATA 10
RANGE $2C7B-$2C85 DB_DATA 10
RANGE $2C85-$2C8F DB_DATA 10
RANGE $2C8F-$2C99 DB_DATA 10
RANGE $2C99-$2CA3 DB_DATA 10
RANGE $2CA3-$2CAD DB_DATA 10
RANGE $2CAD-$2CB7 DB_DATA 10
RANGE $2CB7-$2CC1 DB_DATA 10
RANGE $2CC1-$2CCB DB_DATA 10
RANGE $2CCB-$2CD5 DB_DATA 10
RANGE $2CD5-$2CDF DB_DATA 10
RANGE $2CDF-$2CE9 DB_DATA 10
RANGE $2CE9-$2CF3 DB_DATA 10
RANGE $2CF3-$2CFD DB_DATA 10
RANGE $2CFD-$2D07 DB_DATA 10
RANGE $2D07-$2D11 DB_DATA 10
RANGE $2D11-$2D1B DB_DATA 10
RANGE $2D1B-$2D25 DB_DATA 10
RANGE $2D25-$2D2F DB_DATA 10
RANGE $2D2F-$2D39 DB_DATA 10
RANGE $2D39-$2D43 DB_DATA 10
RANGE $2D43-$2D4D DB_DATA 10
RANGE $2D4D-$2D57 DB_DATA 10
RANGE $2D57-$2D61 DB_DATA 10
RANGE $2D61-$2D6B DB_DATA 10
RANGE $2D6B-$2D75 DB_DATA 10
RANGE $2D75-$2D7F DB_DATA 10
RANGE $2D7F-$2D89 DB_DATA 10
RANGE $2D89-$2D93 DB_DATA 10
RANGE $2D93-$2D9D DB_DATA 10
RANGE $2D9D-$2DA7 DB_DATA 10
RANGE $2DA7-$2DB1 DB_DATA 10
RANGE $2DB1-$2DBB DB_DATA 10
RANGE $2DBB-$2DC5 DB_DATA 10
RANGE $2DC5-$2DCF DB_DATA 10
RANGE $2DCF-$2DD9 DB_DATA 10
RANGE $2DD9-$2DE3 DB_DATA 10
RANGE $2DE3-$2DED DB_DATA 10
RANGE $2DED-$2DF7 DB_DATA 10
RANGE $2DF7-$2E01 DB_DATA 10
RANGE $2E01-$2E0B DB_DATA 10
RANGE $2E0B-$2E15 DB_DATA 10
RANGE $2E15-$2E1F DB_DATA 10
RANGE $2E1F-$2E29 DB_DATA 10
RANGE $2E29-$2E33 DB_DATA 10
RANGE $2E33-$2E3D DB_DATA 10
RANGE $2E3D-$2E47 DB_DATA 10
RANGE $2E47-$2E51 DB_DATA 10
RANGE $2E51-$2E5B DB_DATA 10
RANGE $2E5B-$2E65 DB_DATA 10
RANGE $2E65-$2E6F DB_DATA 10
RANGE $2E6F-$2E79 DB_DATA 10
RANGE $2E79-$2E83 DB_DATA 10
RANGE $2E83-$2E8D DB_DATA 10
RANGE $2E8D-$2E97 DB_DATA 10
RANGE $2E97-$2EA1 DB_DATA 10
RANGE $2EA1-$2EAB DB_DATA 10
RANGE $2EAB-$2EB5 DB_DATA 10
RANGE $2EB5-$2EBF DB_DATA 10
RANGE $2EBF-$2EC9 DB_DATA 10
RANGE $2EC9-$2ED3 DB_DATA 10
RANGE $2ED3-$2EDD DB_DATA 10
RANGE $2EDD-$2EE7 DB_DATA 10
RANGE $2EE7-$2EF1 DB_DATA 10
RANGE $2EF1-$2EFB DB_DATA 10
RANGE $2EFB-$2F05 DB_DATA 10
RANGE $2F05-$2F0F DB_DATA 10
RANGE $2F0F-$2F19 DB_DATA 10
RANGE $2F19-$2F23 DB_DATA 10
RANGE $2F23-$2F2D DB_DATA 10
RANGE $2F2D-$2F37 DB_DATA 10
RANGE $2F37-$2F41 DB_DATA 10
RANGE $2F41-$2F4B DB_DATA 10
RANGE $2F4B-$2F55 DB_DATA 10
RANGE $2F55-$2F5F DB_DATA 10
RANGE $2F5F-$2F69 DB_DATA 10
RANGE $2F69-$2F73 DB_DATA 10
RANGE $2F73-$2F7D DB_DATA 10
RANGE $2F7D-$2F87 DB_DATA 10
RANGE $2F87-$2F91 DB_DATA 10
RANGE $2F91-$2F9B DB_DATA 10
RANGE $2F9B-$2FA5 DB_DATA 10
RANGE $2FA5-$2FAF DB_DATA 10
RANGE $2FAF-$2FB9 DB_DATA 10
RANGE $2FB9-$2FC3 DB_DATA 10
RANGE $2FC3-$2FCD DB_DATA 10
RANGE $2FCD-$2FD7 DB_DATA 10
RANGE $2FD7-$2FE1 DB_DATA 10
RANGE $2FE1-$2FEB DB_DATA 10
RANGE $2FEB-$2FF5 DB_DATA 10
RANGE $2FF5-$2FFF DB_DATA 10
RANGE $2FFF-$3009 DB_DATA 10
RANGE $3009-$3013 DB_DATA 10
RANGE $3013-$301D DB_DATA 10
RANGE $301D-$3027 DB_DATA 10
RANGE $3027-$3031 DB_DATA 10
RANGE $3031-$303B DB_DATA 10
RANGE $303B-$3045 DB_DATA 10
RANGE $3045-$304F DB_DATA 10
RANGE $304F-$3059 DB_DATA 10
RANGE $3059-$3063 DB_DATA 10
RANGE $3063-$306D DB_DATA 10
RANGE $306D-$3077 DB_DATA 10
RANGE $3077-$3081 DB_DATA 10
RANGE $3081-$308B DB_DATA 10
RANGE $308B-$3095 DB_DATA 10
RANGE $3095-$309F DB_DATA 10
RANGE $309F-$30A9 DB_DATA 10
RANGE $30A9-$30B3 DB_DATA 10
RANGE $30B3-$30BD DB_DATA 10
RANGE $30BD-$30C7 DB_DATA 10
RANGE $30C7-$30D1 DB_DATA 10
RANGE $30D1-$30DB DB_DATA 10
RANGE $30DB-$30E5 DB_DATA 10
RANGE $30E5-$30EF DB_DATA 10
RANGE $30EF-$30F9 DB_DATA 10
RANGE $30F9-$3103 DB_DATA 10
RANGE $3103-$310D DB_DATA 10
RANGE $310D-$3117 DB_DATA 10
RANGE $3117-$3121 DB_DATA 10
RANGE $3121-$312B DB_DATA 10
RANGE $312B-$3135 DB_DATA 10
RANGE $3135-$313F DB_DATA 10
RANGE $313F-$3149 DB_DATA 10
RANGE $3149-$3153 DB_DATA 10
RANGE $3153-$315D DB_DATA 10
RANGE $315D-$3167 DB_DATA 10
RANGE $3167-$3171 DB_DATA 10
RANGE $3171-$317B DB_DATA 10
RANGE $317B-$3185 DB_DATA 10
RANGE $3185-$318F DB_DATA 10
RANGE $318F-$3199 DB_DATA 10
RANGE $3199-$31A3 DB_DATA 10
RANGE $31A3-$31AD DB_DATA 10
RANGE $31AD-$31B7 DB_DATA 10
RANGE $31B7-$31C1 DB_DATA 10
RANGE $31C1-$31CB DB_DATA 10
RANGE $31CB-$31D5 DB_DATA 10
RANGE $31D5-$31DF DB_DATA 10
RANGE $31DF-$31E9 DB_DATA 10
RANGE $31E9-$31F3 DB_DATA 10
RANGE $31F3-$31FD DB_DATA 10
RANGE $31FD-$3207 DB_DATA 10
RANGE $3207-$3211 DB_DATA 10
RANGE $3211-$321B DB_DATA 10
RANGE $321B-$3225 DB_DATA 10
RANGE $3225-$322F DB_DATA 10
RANGE $322F-$3239 DB_DATA 10
RANGE $3239-$3243 DB_DATA 10
RANGE $3243-$324D DB_DATA 10
RANGE $324D-$3257 DB_DATA 10
RANGE $3257-$3261 DB_DATA 10
RANGE $3261-$326B DB_DATA 10
RANGE $326B-$3275 DB_DATA 10
RANGE $3275-$327F DB_DATA 10
RANGE $327F-$3289 DB_DATA 10
RANGE $3289-$3293 DB_DATA 10
RANGE $3293-$329D DB_DATA 10
RANGE $329D-$32A7 DB_DATA 10
RANGE $32A7-$32B1 DB_DATA 10
RANGE $32B1-$32BB DB_DATA 10
RANGE $32BB-$32C5 DB_DATA 10
RANGE $32C5-$32CF DB_DATA 10
RANGE $32CF-$32D9 DB_DATA 10
RANGE $32D9-$32E3 DB_DATA 10
RANGE $32E3-$32ED DB_DATA 10
RANGE $32ED-$32F7 DB_DATA 10
RANGE $32F7-$3301 DB_DATA 10
RANGE $3301-$330B DB_DATA 10
RANGE $330B-$3315 DB_DATA 10
RANGE $3315-$331F DB_DATA 10
RANGE $331F-$3329 DB_DATA 10
RANGE $3329-$3333 DB_DATA 10
RANGE $3333-$333D DB_DATA 10
RANGE $333D-$3347 DB_DATA 10
RANGE $3347-$3351 DB_DATA 10
RANGE $3351-$335B DB_DATA 10
RANGE $335B-$3365 DB_DATA 10
RANGE $3365-$336F DB_DATA 10
RANGE $336F-$3379 DB_DATA 10
RANGE $3379-$3383 DB_DATA 10
RANGE $3383-$338D DB_DATA 10
RANGE $338D-$3397 DB_DATA 10
RANGE $3397-$33A1 DB_DATA 10
RANGE $33A1-$33AB DB_DATA 10
RANGE $33AB-$33B5 DB_DATA 10
RANGE $33B5-$33BF DB_DATA 10
RANGE $33BF-$33C9 DB_DATA 10
RANGE $33C9-$33D3 DB_DATA 10
RANGE $33D3-$33DD DB_DATA 10
RANGE $33DD-$33E7 DB_DATA 10
RANGE $33E7-$33F1 DB_DATA 10
RANGE $33F1-$33FB DB_DATA 10
RANGE $33FB-$3405 DB_DATA 10
RANGE $3405-$340F DB_DATA 10
RANGE $340F-$3419 DB_DATA 10
RANGE $3419-$3423 DB_DATA 10
RANGE $3423-$342D DB_DATA 10
RANGE $342D-$3437 DB_DATA 10
RANGE $3437-$3441 DB_DATA 10
RANGE $3441-$344B DB_DATA 10
RANGE $344B-$3455 DB_DATA 10
RANGE $3455-$345F DB_DATA 10
RANGE $345F-$3469 DB_DATA 10
RANGE $3469-$3473 DB_DATA 10
RANGE $3473-$347D DB_DATA 10
RANGE $347D-$3487 DB_DATA 10
RANGE $3487-$3491 DB_DATA 10
RANGE $3491-$349B DB_DATA 10
RANGE $349B-$34A5 DB_DATA 10
RANGE $34A5-$34AF DB_DATA 10
RANGE $34AF-$34B9 DB_DATA 10
RANGE $34B9-$34C3 DB_DATA 10
RANGE $34C3-$34CD DB_DATA 10
RANGE $34CD-$34D7 DB_DATA 10
RANGE $34D7-$34E1 DB_DATA 10
RANGE $34E1-$34EB DB_DATA 10
RANGE $34EB-$34F5 DB_DATA 10
RANGE $34F5-$34FF DB_DATA 10
RANGE $34FF-$3509 DB_DATA 10
RANGE $3509-$3513 DB_DATA 10
RANGE $3513-$351D DB_DATA 10
RANGE $351D-$3527 DB_DATA 10
RANGE $3527-$3531 DB_DATA 10
RANGE $3531-$353B DB_DATA 10
RANGE $353B-$3545 DB_DATA 10
RANGE $3545-$354F DB_DATA 10
RANGE $354F-$3559 DB_DATA 10
RANGE $3559-$3563 DB_DATA 10
RANGE $3563-$356D DB_DATA 10
RANGE $356D-$3577 DB_DATA 10
RANGE $3577-$3581 DB_DATA 10
RANGE $3581-$358B DB_DATA 10
RANGE $358B-$3595 DB_DATA 10
RANGE $3595-$359F DB_DATA 10
RANGE $359F-$35A9 DB_DATA 10
RANGE $35A9-$35B3 DB_DATA 10
RANGE $35B3-$35BD DB_DATA 10
RANGE $35BD-$35C7 DB_DATA 10
RANGE $35C7-$35D1 DB_DATA 10
RANGE $35D1-$35DB DB_DATA 10
RANGE $35DB-$35E5 DB_DATA 10
RANGE $35E5-$35EF DB_DATA 10
RANGE $35EF-$35F9 DB_DATA 10
RANGE $35F9-$3603 DB_DATA 10
RANGE $3603-$360D DB_DATA 10
RANGE $360D-$3617 DB_DATA 10
RANGE $3617-$3621 DB_DATA 10
RANGE $3621-$362B DB_DATA 10
RANGE $362B-$3635 DB_DATA 10
RANGE $3635-$363F DB_DATA 10
RANGE $363F-$3649 DB_DATA 10
RANGE $3649-$3653 DB_DATA 10
RANGE $3653-$365D DB_DATA 10
RANGE $365D-$3667 DB_DATA 10
RANGE $3667-$3671 DB_DATA 10
RANGE $3671-$367B DB_DATA 10
RANGE $367B-$3685 DB_DATA 10
RANGE $3685-$368F DB_DATA 10
RANGE $368F-$3699 DB_DATA 10
RANGE $3699-$36A3 DB_DATA 10
RANGE $36A3-$36AD DB_DATA 10
RANGE $36AD-$36B7 DB_DATA 10
RANGE $36B7-$36C1 DB_DATA 10
RANGE $36C1-$36CB DB_DATA 10
RANGE $36CB-$36D5 DB_DATA 10
RANGE $36D5-$36DF DB_DATA 10
RANGE $36DF-$36E9 DB_DATA 10
RANGE $36E9-$36F3 DB_DATA 10
RANGE $36F3-$36FD DB_DATA 10
RANGE $36FD-$3707 DB_DATA 10
RANGE $3707-$3711 DB_DATA 10
RANGE $3711-$371B DB_DATA 10
RANGE $371B-$3725 DB_DATA 10
RANGE $3725-$372F DB_DATA 10
RANGE $372F-$3739 DB_DATA 10
RANGE $3739-$3743 DB_DATA 10
RANGE $3743-$374D DB_DATA 10
RANGE $374D-$3757 DB_DATA 10
RANGE $3757-$3761 DB_DATA 10
RANGE $3761-$376B DB_DATA 10
RANGE $376B-$3775 DB_DATA 10
RANGE $3775-$377F DB_DATA 10
RANGE $377F-$3789 DB_DATA 10
RANGE $3789-$3793 DB_DATA 10
RANGE $3793-$379D DB_DATA 10
RANGE $379D-$37A7 DB_DATA 10
RANGE $37A7-$37B1 DB_DATA 10
RANGE $37B1-$37BB DB_DATA 10
RANGE $37BB-$37C5 DB_DATA 10
RANGE $37C5-$37CF DB_DATA 10
RANGE $37CF-$37D9 DB_DATA 10
RANGE $37D9-$37E3 DB_DATA 10
RANGE $37E3-$37ED DB_DATA 10
RANGE $37ED-$37F7 DB_DATA 10
RANGE $37F7-$3801 DB_DATA 10
RANGE $3801-$380B DB_DATA 10
RANGE $380B-$3815 DB_DATA 10
RANGE $3815-$381F DB_DATA 10
RANGE $381F-$3829 DB_DATA 10
RANGE $3829-$3833 DB_DATA 10
RANGE $3833-$383D DB_DATA 10
RANGE $383D-$3847 DB_DATA 10
RANGE $3847-$3851 DB_DATA 10
RANGE $3851-$385B DB_DATA 10
RANGE $385B-$3865 DB_DATA 10
RANGE $3865-$386F DB_DATA 10
RANGE $386F-$3879 DB_DATA 10
RANGE $3879-$3883 DB_DATA 10
RANGE $3883-$388D DB_DATA 10
RANGE $388D-$3897 DB_DATA 10
RANGE $3897-$38A1 DB_DATA 10
RANGE $38A1-$38AB DB_DATA 10
RANGE $38AB-$38B5 DB_DATA 10
RANGE $38B5-$38BF DB_DATA 10
RANGE $38BF-$38C9 DB_DATA 10
RANGE $38C9-$38D3 DB_DATA 10
RANGE $38D3-$38DD DB_DATA 10
RANGE $38DD-$38E7 DB_DATA 10
RANGE $38E7-$38F1 DB_DATA 10
RANGE $38F1-$38FB DB_DATA 10
RANGE $38FB-$3905 DB_DATA 10
RANGE $3905-$390F DB_DATA 10
RANGE $390F-$3919 DB_DATA 10
RANGE $3919-$3923 DB_DATA 10
RANGE $3923-$392D DB_DATA 10
RANGE $392D-$3937 DB_DATA 10
RANGE $3937-$3941 DB_DATA 10
RANGE $3941-$394B DB_DATA 10
RANGE $394B-$3955 DB_DATA 10
RANGE $3955-$395F DB_DATA 10
RANGE $395F-$3969 DB_DATA 10
RANGE $3969-$3973 DB_DATA 10
RANGE $3973-$397D DB_DATA 10
RANGE $397D-$3987 DB_DATA 10
RANGE $3987-$3991 DB_DATA 10
RANGE $3991-$399B DB_DATA 10
RANGE $399B-$39A5 DB_DATA 10
RANGE $39A5-$39AF DB_DATA 10
RANGE $39AF-$39B9 DB_DATA 10
RANGE $39B9-$39C3 DB_DATA 10
RANGE $39C3-$39CD DB_DATA 10
RANGE $39CD-$39D7 DB_DATA 10
RANGE $39D7-$39E1 DB_DATA 10
RANGE $39E1-$39EB DB_DATA 10
RANGE $39EB-$39F5 DB_DATA 10
RANGE $39F5-$39FF DB_DATA 10
RANGE $39FF-$3A09 DB_DATA 10
RANGE $3A09-$3A13 DB_DATA 10
RANGE $3A13-$3A1D DB_DATA 10
RANGE $3A1D-$3A27 DB_DATA 10
RANGE $3A27-$3A31 DB_DATA 10
RANGE $3A31-$3A3B DB_DATA 10
RANGE $3A3B-$3A45 DB_DATA 10
RANGE $3A45-$3A4F DB_DATA 10
RANGE $3A4F-$3A59 DB_DATA 10
RANGE $3A59-$3A63 DB_DATA 10
RANGE $3A63-$3A6D DB_DATA 10
RANGE $3A6D-$3A77 DB_DATA 10
RANGE $3A77-$3A81 DB_DATA 10
RANGE $3A81-$3A8B DB_DATA 10
RANGE $3A8B-$3A95 DB_DATA 10
RANGE $3A95-$3A9F DB_DATA 10
RANGE $3A9F-$3AA9 DB_DATA 10
RANGE $3AA9-$3AB3 DB_DATA 10
RANGE $3AB3-$3ABD DB_DATA 10
RANGE $3ABD-$3AC7 DB_DATA 10
RANGE $3AC7-$3AD1 DB_DATA 10
RANGE $3AD1-$3ADB DB_DATA 10
RANGE $3ADB-$3AE5 DB_DATA 10
RANGE $3AE5-$3AEF DB_DATA 10
RANGE $3AEF-$3AF9 DB_DATA 10
RANGE $3AF9-$3B03 DB_DATA 10
RANGE $3B03-$3B0D DB_DATA 10
RANGE $3B0D-$3B17 DB_DATA 10
RANGE $3B17-$3B21 DB_DATA 10
RANGE $3B21-$3B2B DB_DATA 10
RANGE $3B2B-$3B35 DB_DATA 10
RANGE $3B35-$3B3F DB_DATA 10
RANGE $3B3F-$3B49 DB_DATA 10
RANGE $3B49-$3B53 DB_DATA 10
RANGE $3B53-$3B5D DB_DATA 10
RANGE $3B5D-$3B67 DB_DATA 10
RANGE $3B67-$3B71 DB_DATA 10
RANGE $3B71-$3B7B DB_DATA 10
RANGE $3B7B-$3B85 DB_DATA 10
RANGE $3B85-$3B8F DB_DATA 10
RANGE $3B8F-$3B99 DB_DATA 10
RANGE $3B99-$3BA3 DB_DATA 10
RANGE $3BA3-$3BAD DB_DATA 10
RANGE $3BAD-$3BB7 DB_DATA 10
RANGE $3BB7-$3BC1 DB_DATA 10
RANGE $3BC1-$3BCB DB_DATA 10
RANGE $3BCB-$3BD5 DB_DATA 10
RANGE $3BD5-$3BDF DB_DATA 10
RANGE $3BDF-$3BE9 DB_DATA 10
RANGE $3BE9-$3BF3 DB_DATA 10
RANGE $3BF3-$3BFD DB_DATA 10
RANGE $3BFD-$3C07 DB_DATA 10
RANGE $3C07-$3C11 DB_DATA 10
RANGE $3C11-$3C1B DB_DATA 10
RANGE $3C1B-$3C25 DB_DATA 10
RANGE $3C25-$3C2F DB_DATA 10
RANGE $3C2F-$3C39 DB_DATA 10
RANGE $3C39-$3C43 DB_DATA 10
RANGE $3C43-$3C4D DB_DATA 10
RANGE $3C4D-$3C57 DB_DATA 10
RANGE $3C57-$3C61 DB_DATA 10
RANGE $3C61-$3C6B DB_DATA 10
RANGE $3C6B-$3C75 DB_DATA 10
RANGE $3C75-$3C7F DB_DATA 10
RANGE $3C7F-$3C89 DB_DATA 10
RANGE $3C89-$3C93 DB_DATA 10
RANGE $3C93-$3C9D DB_DATA 10
RANGE $3C9D-$3CA7 DB_DATA 10
RANGE $3CA7-$3CB1 DB_DATA 10
RANGE $3CB1-$3CBB DB_DATA 10
RANGE $3CBB-$3CC5 DB_DATA 10
RANGE $3CC5-$3CCF DB_DATA 10
RANGE $3CCF-$3CD9 DB_DATA 10
RANGE $3CD9-$3CE3 DB_DATA 10
RANGE $3CE3-$3CED DB_DATA 10
RANGE $3CED-$3CF7 DB_DATA 10
RANGE $3CF7-$3D01 DB_DATA 10
RANGE $3D01-$3D0B DB_DATA 10
RANGE $3D0B-$3D15 DB_DATA 10
RANGE $3D15-$3D1F DB_DATA 10
RANGE $3D1F-$3D29 DB_DATA 10
RANGE $3D29-$3D33 DB_DATA 10
RANGE $3D33-$3D3D DB_DATA 10
RANGE $3D3D-$3D47 DB_DATA 10
RANGE $3D47-$3D51 DB_DATA 10
RANGE $3D51-$3D5B DB_DATA 10
RANGE $3D5B-$3D65 DB_DATA 10
RANGE $3D65-$3D6F DB_DATA 10
RANGE $3D6F-$3D79 DB_DATA 10
RANGE $3D79-$3D83 DB_DATA 10
RANGE $3D83-$3D8D DB_DATA 10
RANGE $3D8D-$3D97 DB_DATA 10
RANGE $3D97-$3DA1 DB_DATA 10
RANGE $3DA1-$3DAB DB_DATA 10
RANGE $3DAB-$3DB5 DB_DATA 10
RANGE $3DB5-$3DBF DB_DATA 10
RANGE $3DBF-$3DC9 DB_DATA 10
RANGE $3DC9-$3DD3 DB_DATA 10
RANGE $3DD3-$3DDD DB_DATA 10
RANGE $3DDD-$3DE7 DB_DATA 10
RANGE $3DE7-$3DF1 DB_DATA 10
RANGE $3DF1-$3DFB DB_DATA 10
RANGE $3DFB-$3E05 DB_DATA 10
RANGE $3E05-$3E0F DB_DATA 10
RANGE $3E0F-$3E19 DB_DATA 10
RANGE $3E19-$3E23 DB_DATA 10
RANGE $3E23-$3E29 DB_DATA 6
RANGE $3E29-$3E31 CHAR_DATA 8

