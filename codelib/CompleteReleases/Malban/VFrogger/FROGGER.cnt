BANK 0
EQU $00 
EQU $01 USE_LOOP_UNROLING
COMMENT_LABEL $01 loop unrolling costs nearly 1KB
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
EQU $01 MACRO_I
LABEL $C880 user_ram
COMMENT_LABEL $C880 well start of our ram space
LABEL $C880 user_ram_start
LABEL $C880 music_active
COMMENT_LABEL $C880 pointer to music piece which is playing now
LABEL $C882 music_counter
COMMENT_LABEL $C882 pointer to weridos, used only in init screen
LABEL $C884 tmp1
COMMENT_LABEL $C884 two temporal storage variables
LABEL $C886 tmp2
COMMENT_LABEL $C886 ...
LABEL $C888 mul_tmp1
COMMENT_LABEL $C888 two variable used in MY_MUL only
LABEL $C88A mul_tmp2
LABEL $C88C current_brightness
COMMENT_LABEL $C88C currently = brightness (why didn't I use the vectrex's os variable???)
LABEL $C88D morph_status
COMMENT_LABEL $C88D status---
LABEL $C88E morph_tmp
COMMENT_LABEL $C88E saves a few cycles... for the step counter only in one_morph_step
LABEL $C88F morph_sign
COMMENT_LABEL $C88F number of steps between 'from' and 'to' variable
LABEL $C890 morph_counter
COMMENT_LABEL $C890 number of steps between 'from' and 'to' variable
LABEL $C891 morph_steps
COMMENT_LABEL $C891 number of steps between 'from' and 'to' constant
LABEL $C892 morph_delay
COMMENT_LABEL $C892 delay between one step and another (variable)
LABEL $C894 morph_structure
COMMENT_LABEL $C894 pointer to morphstructure of current morphing
LABEL $C896 morph_div_jsr
COMMENT_LABEL $C896 pointer to indirectly JSR to a divide routine (for optimization)
LABEL $C898 scroll_variables_start
COMMENT_LABEL $C898 from here reuse scroll variables...
LABEL $C898 kind_of_death
COMMENT_LABEL $C898 storage to text, what kind of death happened to frog
LABEL $C89A in_home_counter
COMMENT_LABEL $C89A number of free homes in the currently played level
LABEL $C89B game_level
COMMENT_LABEL $C89B what game level are we playing
LABEL $C89C current_frog_size_x
COMMENT_LABEL $C89C size of frog 'sprites' following (all the same for now)
LABEL $C89D current_frog_offset
COMMENT_LABEL $C89D offset to 'zero' of current frog sprite
LABEL $C89F current_frog_heading
COMMENT_LABEL $C89F what direction is frogger looking at
LABEL $C8A0 level_score
COMMENT_LABEL $C8A0 internel level score, score information is updated only
LABEL $C8A1 last_joy_x
COMMENT_LABEL $C8A1 last joystick position X,
LABEL $C8A2 last_joy_y
COMMENT_LABEL $C8A2 and Y,  for checking, we don't want an autorun feature...
LABEL $C8A3 current_frog_brightness
COMMENT_LABEL $C8A3 current brightness of frogger, not used anymore?
LABEL $C8A4 high_check
COMMENT_LABEL $C8A4 checker variable for new life (every 10000 points)
LABEL $C8A5 frog_pos
COMMENT_LABEL $C8A5 position 16bit y,x of frog
LABEL $C8A5 frog_y
COMMENT_LABEL $C8A5 y pos of frog
LABEL $C8A6 frog_x
COMMENT_LABEL $C8A6 and the x
LABEL $C8A7 frog_pos_band
COMMENT_LABEL $C8A7 band information (ranging from 0-11), y,x
LABEL $C8A7 frog_y_band
COMMENT_LABEL $C8A7 band y information
LABEL $C8A8 frog_x_band
COMMENT_LABEL $C8A8 band y information
LABEL $C8A9 frog_pic
COMMENT_LABEL $C8A9 now used frog 'picture'
LABEL $C8AB my_timer_start
COMMENT_LABEL $C8AB reset value of level timer
LABEL $C8AD y_timer
COMMENT_LABEL $C8AD y value of my timer vector line
LABEL $C8AE my_timer
COMMENT_LABEL $C8AE x value of vector line (8bit) AND the timer variable itself (16bit) variable
LABEL $C8B0 fly_timer
COMMENT_LABEL $C8B0 timer variable for fly
LABEL $C8B2 fly_timer_start
COMMENT_LABEL $C8B2 reset value of fly timer
LABEL $C8B4 fly_house
COMMENT_LABEL $C8B4 what house is the fly currently in
LABEL $C8B5 fly_status
COMMENT_LABEL $C8B5 what's the flys status?
LABEL $C8B6 croco_timer
COMMENT_LABEL $C8B6 croco (home) timer variable
LABEL $C8B8 croco_timer_start
COMMENT_LABEL $C8B8 croco timer reset
LABEL $C8BA croco_house
COMMENT_LABEL $C8BA what house is the croco currently 'visiting'
LABEL $C8BB croco_status
COMMENT_LABEL $C8BB what's the crocos status
LABEL $C8BC dive_timer
COMMENT_LABEL $C8BC (turtle) dive timer variable
LABEL $C8BE dive_timer_start
COMMENT_LABEL $C8BE reset value for the above
LABEL $C8BF frog_bonus
COMMENT_LABEL $C8BF what bonuses has frog collected? (girl, fly)
LABEL $C8C0 otter_status
COMMENT_LABEL $C8C0 what's the otters status
LABEL $C8C1 otter_timer_start
COMMENT_LABEL $C8C1 otter timer reset value
LABEL $C8C3 otter_timer
COMMENT_LABEL $C8C3 otter timer variable
LABEL $C8C5 otter_log_pre
COMMENT_LABEL $C8C5 the 'logs' address of the 'log' BEFOR the otter
LABEL $C8C7 otter_log_past
COMMENT_LABEL $C8C7 the 'logs' address of the 'log' BEHIND the otter
LABEL $C8C9 otter_object
COMMENT_LABEL $C8C9 the object information address of current otter
LABEL $C8CB otter_pos
COMMENT_LABEL $C8CB current position of otter
LABEL $C8CD otter_anim_counter
COMMENT_LABEL $C8CD animation counter of otter
LABEL $C8CE otter_speed
COMMENT_LABEL $C8CE current speed of otter
LABEL $C8CF otter_band
COMMENT_LABEL $C8CF what band is otter swimming in?
LABEL $C8D1 girl_status
COMMENT_LABEL $C8D1 what's the girls status?
LABEL $C8D2 girl_round_counter
COMMENT_LABEL $C8D2 counter, for what round girl will be next displayed
LABEL $C8D3 girl_round_counter_reset
COMMENT_LABEL $C8D3 counter reset value
LABEL $C8D4 girl_log_object
COMMENT_LABEL $C8D4 log, the girl is on, allways first log on second river band
LABEL $C8D6 girl_object
COMMENT_LABEL $C8D6 pointer to current girl object information
LABEL $C8D8 girl_pos
COMMENT_LABEL $C8D8 current position of girl
LABEL $C8DA girl_anim_counter
COMMENT_LABEL $C8DA animation counter of girl
LABEL $C8DB girl_zero
COMMENT_LABEL $C8DB allways a 16 bit zero, to jump out of the loop...
LABEL $C8DD girl_speed
COMMENT_LABEL $C8DD speed of girl
LABEL $C8DE snake_status
COMMENT_LABEL $C8DE snake's status (only one snake on logs possible for now)
LABEL $C8DF snake_round_counter
COMMENT_LABEL $C8DF counter, for what round snake will be next displayed (variable)
LABEL $C8E0 snake_round_counter_reset
COMMENT_LABEL $C8E0 reset value for above
LABEL $C8E1 snake_log_object
COMMENT_LABEL $C8E1 'log', the snake is on, allways first log on third river band!!!
LABEL $C8E3 snake_object
COMMENT_LABEL $C8E3 pointer to snake's object definition
LABEL $C8E5 snake_pos
COMMENT_LABEL $C8E5 position of snake (y,x)
LABEL $C8E7 snake_anim_counter
COMMENT_LABEL $C8E7 animation counter for snake
LABEL $C8E8 snake_gone
COMMENT_LABEL $C8E8 number of steps a snake can make before turing arround
LABEL $C8E9 snake_speed_start
COMMENT_LABEL $C8E9 startspeed of snake (determined by 'log's' speed)
LABEL $C8EA snake_speed
COMMENT_LABEL $C8EA speed of snake now
LABEL $C8EB i_jump
COMMENT_LABEL $C8EB indirect jump for vector list drawing unlooped
LABEL $C8ED user_ram_end
COMMENT_LABEL $C8ED end of user ram
LABEL $C884 loop1
COMMENT_LABEL $C884 loop1 counter in level setup
LABEL $C885 loop2
COMMENT_LABEL $C885 loop2 counter in level setup
LABEL $C888 divide_tmp
COMMENT_LABEL $C888 divide tmp variable, you don't divide while multiplying vice versa
LABEL $C888 tmp_band_offset
COMMENT_LABEL $C888 used in level setup and gameplay, but there is NO multiplication in game...
LABEL $C88A tmp_band_list
COMMENT_LABEL $C88A used in level setup
LABEL $C88A counter
COMMENT_LABEL $C88A counter used in intermissions
LABEL $C89C game_over_intensity
COMMENT_LABEL $C89C intensity of game over text
LABEL $C89F game_over_scaley
COMMENT_LABEL $C89F scale y of game over string
LABEL $C89D game_over_scalex
COMMENT_LABEL $C89D scale x of game over string
LABEL $C8A1 game_over_ypos
COMMENT_LABEL $C8A1 game over y position
LABEL $C8A2 game_over_xpos
COMMENT_LABEL $C8A2 game over x position
EQU $06 SCROLL_SCALE_FACTOR
COMMENT_LABEL $06 constant, no variable, a scale factor, the offsets are calculated for this!
EQU $08 NUMBER_OF_SCROLL_LETTERS
COMMENT_LABEL $08 constant, number of letters visible at a time in the scroll text
LABEL $C898 scroll_text_address_start
COMMENT_LABEL $C898 start address of scroll variables, start address of scroll text
LABEL $C89A scroll_text_address_current
COMMENT_LABEL $C89A current address of next scroll text letter
LABEL $C89C scroll_speed
COMMENT_LABEL $C89C speed of the scrolling
LABEL $C89D scroll_y
COMMENT_LABEL $C89D y position of the scroll text
LABEL $C89E scroll_left_boundary
COMMENT_LABEL $C89E left most position of scroll text
LABEL $C89F scroll_right_boundary
COMMENT_LABEL $C89F right most position of scroll text
LABEL $C8A0 scroll_step_width
COMMENT_LABEL $C8A0 how many 'pixels' the letters are appart
LABEL $C8A1 scroll_intensity
COMMENT_LABEL $C8A1 intensity of scroll text
LABEL $C8A2 scroll_objects
COMMENT_LABEL $C8A2 start address of ram scroll text object definitions
LABEL $C8CB scroll_objects_end
COMMENT_LABEL $C8CB space for number of letters for letter object definitions
LABEL $C8CB scroll_variables_end
COMMENT_LABEL $C8CB the end...
LABEL $C8CC init_screen_mode
LABEL $C8CD init_current_intensity
EQU $01 INIT_MODE_TEXT
COMMENT_LABEL $01 these two describe the mode
EQU $02 INIT_MODE_MORPH
COMMENT_LABEL $02 of the init screen
EQU $0A OTTER_X_LEN
COMMENT_LABEL $0A size of otter (x) for collision checking
EQU $37 SNAKE_GO_LIMIT
COMMENT_LABEL $37 number of 'pixels' a snake can go before turing arround
EQU $05 MAX_SPRITE_OFFSET
COMMENT_LABEL $05 supposed to maximal sprite offset
EQU $00 NOT_AVAILABLE
COMMENT_LABEL $00 not in this level at all (is not checked for, only via ZERO flag!!!)
EQU $01 IS_CARRIED
COMMENT_LABEL $01 the object (girl) is carried by frog
EQU $02 IS_DISPLAYED
COMMENT_LABEL $02 the object is currently visible
EQU $03 IS_WAITING
COMMENT_LABEL $03 the object is waiting to be displayed
EQU $00 NOT_DIVING
COMMENT_LABEL $00 turtle is not diving (under water) right now
EQU $01 IS_DIVING
COMMENT_LABEL $01 the turtle is under water (frog can drown)
EQU $01 FLY_BONUS
COMMENT_LABEL $01 if = a fly bonus is awarded
EQU $02 GIRL_BONUS
COMMENT_LABEL $02 if = a girl bonus is awarded
EQU $0A MORPHING_DONE
COMMENT_LABEL $0A this morphing structure finnished
EQU $0B MORPHING_WORKING
COMMENT_LABEL $0B is morphing
EQU $00 MORPHING_COMPLETE
COMMENT_LABEL $00 no more morphing
EQU $3F MAX_VECTOR_MORPH
COMMENT_LABEL $3F this uses 128*3 bytes of RAM, maximum number of vectors for a morph
EQU $50 MORPH_STARTUP_DELAY
COMMENT_LABEL $50 constants used in init morph
EQU $0F MORPH_STEPS_INTRO
EQU $02 MORPH_DELAY_INIT
EQU $0F MORPH_STEPS_Z
COMMENT_LABEL $0F below is history, morphing is
EQU $7F SCREEN_TOP
LABEL $0080 SCREEN_BOTTOM
LABEL $0080 SCREEN_LEFT
EQU $7F SCREEN_RIGHT
EQU $00 SCREEN_CENTER
LABEL $F160 NORMAL_TEXT_SIZE
COMMENT_LABEL $F160 big text that is
LABEL $FB30 LITTLE_TEXT_SIZE
COMMENT_LABEL $FB30 fairly small text
LABEL $F530 SCORE_TEXT_SIZE
COMMENT_LABEL $F530 'middle' big text :-)
LABEL $0081 SPECIAL_CROCO_FULL
LABEL $0082 SPECIAL_CROCO_HALF
LABEL $0083 SPECIAL_HOME_FLY
LABEL $0084 SPECIAL_RIGHT_CROCO
LABEL $0085 SPECIAL_LEFT_CROCO
LABEL $0086 SPECIAL_RIGHT_SNAKE
LABEL $0087 SPECIAL_LEFT_SNAKE
EQU $20 SPECIAL_GIRL
COMMENT_LABEL $20 note: the $20 in this and the next two
EQU $20 SPECIAL_GIRL_RIGHT
COMMENT_LABEL $20 is ANDed and compared to...
EQU $21 SPECIAL_GIRL_LEFT
EQU $40 SPECIAL_DIVE
COMMENT_LABEL $40 note: the $40 in this and the next two
EQU $40 SPECIAL_DIVE_UP
COMMENT_LABEL $40 is ANDed and compared to...
EQU $41 SPECIAL_DIVE_DOWN
LABEL $00EA SCALE_FACTOR_GRID
COMMENT_LABEL $00EA the virtual grid, which everything is = in
LABEL $0091 SCALE_FACTOR_GAME
COMMENT_LABEL $0091 every (nearly) positioning is made with
EQU $1C SCALE_FACTOR_HOME
COMMENT_LABEL $1C scale factor for drawing the homes
LABEL $0083 SCALE_IN_HOME
COMMENT_LABEL $0083 scale factor for objects within an home
EQU $06 SCALE_FACTOR_SPRITE
COMMENT_LABEL $06 all sprites are drawn using this scale factor
EQU $70 SCALE_FACTOR_VECTOR_MORPH
COMMENT_LABEL $70 scale factor for morphing objects...
EQU $64 BOUNDARY_HI
COMMENT_LABEL $64 right boundary of playfield
LABEL $0081 BOUNDARY_LO
COMMENT_LABEL $0081 left boundary of playfield
EQU $19 SPRITE_BLOW_UP
COMMENT_LABEL $19 thru this sprites get a possible max of 5 * 25 = 125 (pretty near 127...)
EQU $08 HOME_BLOW_UP
COMMENT_LABEL $08 ...
EQU $0C VEC_BLOWUP
COMMENT_LABEL $0C max vector 5 for now, double == 10 times 12 = 120, max would be 128...
EQU $10 GRID_SIZE_GAME
COMMENT_LABEL $10 (10*($ea/$91)), for SCALE_FACTOR_GRID
EQU $0A GRID_SIZE
COMMENT_LABEL $0A for scale factor $ff
LABEL $00B2 HOME1_POS_LEFT
LABEL $00C1 HOME1_POS_RIGHT
LABEL $00D2 HOME2_POS_LEFT
LABEL $00E1 HOME2_POS_RIGHT
LABEL $00F3 HOME3_POS_LEFT
EQU $02 HOME3_POS_RIGHT
EQU $14 HOME4_POS_LEFT
EQU $23 HOME4_POS_RIGHT
EQU $35 HOME5_POS_LEFT
EQU $44 HOME5_POS_RIGHT
EQU $01 HEADING_RIGHT
EQU $02 HEADING_LEFT
EQU $03 HEADING_DOWN
EQU $04 HEADING_UP
EQU $35 FROGS_PER_GAME
COMMENT_LABEL $35 number of frogs per game, note: this is
LABEL $00A0 FROG_INIT_YPOS
EQU $06 FROG_INIT_XPOS
LABEL $A006 FROG_INIT_POS
EQU $0C FROG_INIT_YPOS_BAND
COMMENT_LABEL $0C home band is twelf (in memory)
EQU $07 FROG_INIT_XPOS_BAND
COMMENT_LABEL $07 six is middle
LABEL $0C07 FROG_INIT_POS_BAND
EQU $10 FROG_X_JUMP
EQU $10 FROG_Y_JUMP
EQU $0A FROG_SIZEX_RIGHT
EQU $0A FROG_SIZEX_LEFT
EQU $0A FROG_SIZEX_DOWN
EQU $0A FROG_SIZEX_UP
EQU $5A FROG_RIGHT_OUT
LABEL $009F FROG_LEFT_OUT
EQU $77 SCORE_YPOS
LABEL $0088 SCORE_XPOS
EQU $77 LEVEL_YPOS
LABEL $00E2 LEVEL_XPOS
EQU $77 FROGS_YPOS
EQU $43 FROGS_XPOS
EQU $01 MY_MAKROS_I
EQU $17 MAX_LINE_NUM
EQU $10 ONE_LINE_LENGTH
EQU $0A LENGTH_OF_HEADER
EQU $11 game_name
EQU $2D entry_point
EQU $2D new_game
LABEL $10DD init_vars
LABEL $116A init_screen
LABEL $1245 setup_level
EQU $39 restart_game
EQU $3C main_loop
LABEL $003E LF19E2
LABEL $0061 LF33D3
LABEL $0081 LF33D4
LABEL $00A2 LF2915
LABEL $00C0 LF2995
LABEL $0127 move_frog
LABEL $047C draw_objects
LABEL $00CE main_loop_enter
COMMENT_LABEL $00CE enter from pause here
LABEL $010B pause_loop
LABEL $C8F3 no_score_string
LABEL $14E6 print_score
LABEL $1A43 pause_string
LABEL $01B1 no_new_xpos
LABEL $0177 pos_left
LABEL $013B pos_right
LABEL $3E36 frog_jump
LABEL $01B1 new_xpos_exit
LABEL $21A4 frogger_right_offset
LABEL $21EC frogger_right
LABEL $21A2 frogger_left_offset
LABEL $21C7 frogger_left
LABEL $0235 no_new_ypos
LABEL $01F9 pos_down
LABEL $01BB pos_up
LABEL $0235 new_ypos_exit
LABEL $21A0 frogger_up_offset
LABEL $21A6 frogger_up
LABEL $219E frogger_down_offset
LABEL $21A6 frogger_down
LABEL $023C do_collision_check
LABEL $037B home_jump_tried
LABEL $CAEB band_list
LABEL $0247 collision_loop
LABEL $0260 end_no_collision_detected
COMMENT_LABEL $0260 no collision detected, is that good?
LABEL $024B collision_loop1
LABEL $0267 frog_lower
COMMENT_LABEL $0267 frog is on the left
LABEL $0256 frog_higher
COMMENT_LABEL $0256 otherwise frog is on the right
LABEL $026D collision_detected
COMMENT_LABEL $026D ok, a collision happened, check if good or bad
LABEL $02B0 die_drown
LABEL $02BF transporting
COMMENT_LABEL $02BF no we are 'riding' some object
LABEL $028F no_special_test_c
LABEL $0285 no_right_snake
LABEL $02BA die_snake
LABEL $0026 DIE_CAR
LABEL $0291 die_set
LABEL $0293 die
COMMENT_LABEL $0293 the frog is lost
LABEL $C90D no_frogs
LABEL $1519 frog_dead
LABEL $02A5 not_lost_yet
LABEL $13BB game_lost
LABEL $113A init_new_frog_vars
LABEL $02AB die_out
LABEL $0039 DIE_OUT
LABEL $004D DIE_DROWN
LABEL $02B5 die_croco
LABEL $006E DIE_CROCO
LABEL $005E DIE_SNAKE
LABEL $02E3 no_special_test
LABEL $02D1 no_left_croco
LABEL $034E _no_snake_
LABEL $02DF no_right_croco
LABEL $02E3 no_dived_turtle
LABEL $0312 _no_girl_
LABEL $02F6 Abs_b13
LABEL $02FD leave_here13
LABEL $0301 girl_collision
LABEL $3D92 girl_got_sound
LABEL $0339 no_log_right_snake
LABEL $032C Abs_b15
LABEL $0333 leave_here15
LABEL $0341 Abs_b16
LABEL $0348 leave_here16
LABEL $0374 band_minus_one
LABEL $036D band_plus_one
LABEL $0012 DIE_WALL_JUMP
LABEL $0382 home1_test
LABEL $0396 home2_test
LABEL $C910 home_entry_1
LABEL $0413 no_object_in_home
LABEL $03E6 object_in_home
LABEL $03AA home3_test
LABEL $C915 home_entry_2
LABEL $03BE home4_test
LABEL $C91A home_entry_3
LABEL $03D2 home5_test
LABEL $C91F home_entry_4
LABEL $C924 home_entry_5
LABEL $03FA no_home_fly
LABEL $0413 init_with_bonus
LABEL $0406 no_half_croco
LABEL $040D no_full_croco
LABEL $0000 DIE_HOME_FULL
LABEL $2222 frog1a_in_home_object
LABEL $044A no_new_level
LABEL $C900 no_level_string
LABEL $15EF frog_in_home
LABEL $16EF level_complete
LABEL $3CB7 level_done_data
LABEL $3407 level1_data
LABEL $008B LEVEL_DATA_LENGTH
COMMENT_LABEL $008B length of one level in byte
LABEL $0441 no_roll_over
LABEL $1755 roll_over_intermission
LABEL $0450 timer_death
LABEL $0452 draw_frog_move_timer
LABEL $0090 DIE_TIME
LABEL $045A die_set_2
LABEL $046E not_lost_yet2
LABEL $050A no_fly_in_level
LABEL $050A finnished_fly_stuff2
LABEL $04F8 fly_is_being_displayed
LABEL $04C9 home_got
COMMENT_LABEL $04C9 now we have a random home...
LABEL $C910 home_objects
LABEL $04D1 test_next_house
LABEL $04E3 home_is_empty
COMMENT_LABEL $04E3 now we got a 'random' empty home address in B,U
LABEL $04DB not_last_home_yet
LABEL $0506 finnished_fly_stuff
LABEL $236A fly1a_object
LABEL $04F6 home_ffull
LABEL $0563 no_croco_in_level
LABEL $0563 finnished_croco_stuff2
LABEL $0551 croco_is_being_displayed
LABEL $0522 chome_got
COMMENT_LABEL $0522 now we have a random home...
LABEL $052A ctest_next_house
LABEL $053C chome_is_empty
COMMENT_LABEL $053C now we got a 'random' empty home address in B,U
LABEL $0534 cnot_last_home_yet
LABEL $055F finnished_croco_stuff
LABEL $3293 crocoh1a_object
LABEL $054F home_cfull
LABEL $0595 no_dive_change
LABEL $CBAB t_list
COMMENT_LABEL $CBAB start of dive object list
LABEL $056F next_dive_object
LABEL $0595 all_objects_done
LABEL $0595 diving_done
LABEL $0614 finnish_otter_timer_stuff
LABEL $05AD band_got
COMMENT_LABEL $05AD now we have a random river band...
LABEL $05BB object_random_select_init
LABEL $05BD object_random_select
LABEL $05C1 no_zero_object
LABEL $05C5 object_random_select_done
LABEL $05CF got_second_log
LABEL $337C otter1a_object
LABEL $060C destroy_timer_otter
LABEL $0601 Abs_b23
LABEL $0608 leave_here23
LABEL $0612 timer_otter_ok
LABEL $061E draw_frog_move
LABEL $0656 _DRAW_END26
LABEL $063F _DRAW_VLA26
LABEL $0656 entry_timer_count_down
LABEL $2173 homes
LABEL $06C7 no_timer_change
LABEL $06AE not_dive_timer_change
LABEL $06C7 otter_no_timer_change
LABEL $06CA home_draw_move
LABEL $06D6 _DRAW_VLA_home
LABEL $06F4 _DRAW_END_home
LABEL $06EB LF3F4_home1
LABEL $06F7 LF3F4_home2
LABEL $073E die_not_time
LABEL $072E go_on_timer1
LABEL $3E22 triller1
LABEL $3E2C triller2
LABEL $0741 pattern_line_move1
LABEL $0758 line_1_LF3F4
LABEL $0775 pattern_line_move2
LABEL $078C line_2_LF3F4
LABEL $07AF time_line_move
LABEL $07D0 line_3_LF3F4
LABEL $0843 no_object_in_1_house
LABEL $0804 no_new_animation_phase_home41
LABEL $07FA new_animation_phase_home41
LABEL $0809 home_object_move41
LABEL $0841 _DRAW_END44
LABEL $082A _DRAW_VLA44
LABEL $08B2 no_object_in_2_house
LABEL $0873 no_new_animation_phase_home45
LABEL $0869 new_animation_phase_home45
LABEL $0878 home_object_move45
LABEL $08B0 _DRAW_END48
LABEL $0899 _DRAW_VLA48
LABEL $0921 no_object_in_3_house
LABEL $08E2 no_new_animation_phase_home49
LABEL $08D8 new_animation_phase_home49
LABEL $08E7 home_object_move49
LABEL $091F _DRAW_END52
LABEL $0908 _DRAW_VLA52
LABEL $0990 no_object_in_4_house
LABEL $0951 no_new_animation_phase_home53
LABEL $0947 new_animation_phase_home53
LABEL $0956 home_object_move53
LABEL $098E _DRAW_END56
LABEL $0977 _DRAW_VLA56
LABEL $09FF no_object_in_5_house
LABEL $09C0 no_new_animation_phase_home57
LABEL $09B6 new_animation_phase_home57
LABEL $09C5 home_object_move57
LABEL $09FD _DRAW_END60
LABEL $09E6 _DRAW_VLA60
LABEL $09FF all_home_objects_done
LABEL $0B94 no_snake
LABEL $0A44 snot_lower_out_of_bounds
LABEL $0A38 snake_wait
LABEL $0A4B snake_done_no_snake_next_round
LABEL $0A48 snot_higher_out_of_bounds
LABEL $0AAE go_on_snake
LABEL $0A83 switch_to_left_snake
LABEL $0A58 switch_to_right_snake
LABEL $30B8 snake1a_object
LABEL $0ACC snake_all_done
LABEL $3158 snake3a_object
LABEL $0ADF unloop_start_address0
LABEL $0AD9 LF33D
LABEL $0AE9 JUMP_INTO_ALL65
LABEL $0AE9 JUMP_INTO_1165
LABEL $0AF9 JUMP_INTO_1065
LABEL $0B09 JUMP_INTO_0965
LABEL $0B19 JUMP_INTO_0865
LABEL $0B29 JUMP_INTO_0765
LABEL $0B39 JUMP_INTO_0665
LABEL $0B49 JUMP_INTO_0565
LABEL $0B59 JUMP_INTO_0465
LABEL $0B69 JUMP_INTO_0365
LABEL $0B79 JUMP_INTO_0265
LABEL $0B89 JUMP_INTO_0165
LABEL $0C76 no_otter_in_level
LABEL $0C76 finnished_otter_stuff
LABEL $0BA3 otter_is_being_displayed
LABEL $0BBF display_otter
LABEL $0BB3 destroy_otter
LABEL $0BE6 display_otter_1
LABEL $0081 DIE_MOLE
LABEL $0C0A onot_lower_out_of_bounds
LABEL $0C10 obound_test_done
LABEL $0C10 onot_higher_out_of_bounds
LABEL $0C37 no_anim_change_otter
LABEL $0C3C otter_move1
LABEL $0C74 _DRAW_END80
LABEL $0C5D _DRAW_VLA80
LABEL $0C76 otter_draw_done
LABEL $0C76 entry_level_done
LABEL $CA53 object_list
LABEL $0C7E next_object
LABEL $0CA4 not_lower_out_of_bounds
LABEL $0CAA now_check_for_girl
LABEL $0D14 not_higher_out_of_bounds
LABEL $0CDE no_girl_
LABEL $0CC9 girl_might_be_displayed
COMMENT_LABEL $0CC9 check if the girl will be displayed
LABEL $0CC3 is_currently_displayed
LABEL $2270 girl1a_object
LABEL $0D0E no_snake_
LABEL $0CDE now_check_for_snake
LABEL $0CF3 snake_might_be_displayed
COMMENT_LABEL $0CF3 check if the snake will be displayed
LABEL $0CED snake_is_currently_displayed
LABEL $0D14 bound_test_done
LABEL $0D34 no_animation_move
LABEL $0D1C new_animation_phase
LABEL $0EC4 anim_no_next
LABEL $0D4C unloop_start_address1
LABEL $0D43 objects_not_all_done_move
LABEL $0D46 move_sprite_1
LABEL $0D56 JUMP_INTO_ALL86
LABEL $0D56 JUMP_INTO_2386
LABEL $0D66 JUMP_INTO_2286
LABEL $0D76 JUMP_INTO_2186
LABEL $0D86 JUMP_INTO_2086
LABEL $0D96 JUMP_INTO_1986
LABEL $0DA6 JUMP_INTO_1886
LABEL $0DB6 JUMP_INTO_1786
LABEL $0DC6 JUMP_INTO_1686
LABEL $0DD6 JUMP_INTO_1586
LABEL $0DE6 JUMP_INTO_1486
LABEL $0DF6 JUMP_INTO_1386
LABEL $0E06 JUMP_INTO_1286
LABEL $0E16 JUMP_INTO_1186
LABEL $0E26 JUMP_INTO_1086
LABEL $0E36 JUMP_INTO_0986
LABEL $0E46 JUMP_INTO_0886
LABEL $0E56 JUMP_INTO_0786
LABEL $0E66 JUMP_INTO_0686
LABEL $0E76 JUMP_INTO_0586
LABEL $0E86 JUMP_INTO_0486
LABEL $0E96 JUMP_INTO_0386
LABEL $0EA6 JUMP_INTO_0286
LABEL $0EB6 JUMP_INTO_0186
LABEL $0ED5 unloop_start_address2
LABEL $0ECF move_sprite_3
LABEL $0EDF JUMP_INTO_ALL110
LABEL $0EDF JUMP_INTO_23110
LABEL $0EEF JUMP_INTO_22110
LABEL $0EFF JUMP_INTO_21110
LABEL $0F0F JUMP_INTO_20110
LABEL $0F1F JUMP_INTO_19110
LABEL $0F2F JUMP_INTO_18110
LABEL $0F3F JUMP_INTO_17110
LABEL $0F4F JUMP_INTO_16110
LABEL $0F5F JUMP_INTO_15110
LABEL $0F6F JUMP_INTO_14110
LABEL $0F7F JUMP_INTO_13110
LABEL $0F8F JUMP_INTO_12110
LABEL $0F9F JUMP_INTO_11110
LABEL $0FAF JUMP_INTO_10110
LABEL $0FBF JUMP_INTO_09110
LABEL $0FCF JUMP_INTO_08110
LABEL $0FDF JUMP_INTO_07110
LABEL $0FEF JUMP_INTO_06110
LABEL $0FFF JUMP_INTO_05110
LABEL $100F JUMP_INTO_04110
LABEL $101F JUMP_INTO_03110
LABEL $102F JUMP_INTO_02110
LABEL $103F JUMP_INTO_01110
LABEL $104A objects_all_done
LABEL $1054 do_girl_stuff
LABEL $1053 no_girl
LABEL $1053 girl_allready_done
LABEL $109F no_animation_moveg
LABEL $1087 new_animation_phaseg
LABEL $10A2 move_sprite_g
LABEL $10DA _DRAW_END137
LABEL $10C3 _DRAW_VLA137
LABEL $3D42 weirdos
LABEL $C928 copy_start4
LABEL $3EBB _copy_start4
LABEL $10F9 copy_loop1
LABEL $3E80 _copy_start1
LABEL $C8ED copy_start1
LABEL $3EBB _copy_end1
LABEL $CA53 copy_start2
LABEL $CAEB copy_end2
LABEL $CAEB copy_start3
LABEL $CBAB copy_end3
LABEL $112A continue_level
LABEL $1BBC scroll_text
LABEL $1912 set_up_scrolling
LABEL $119A init_screen_loop
LABEL $11CD no_new_music
LABEL $3D5A weirdos_end
LABEL $11AE no_last_weirdos
LABEL $C928 yankee
LABEL $1963 do_one_scroll_step
LABEL $120C no_text_display
LABEL $1201 no_init_change
LABEL $2110 morph_init1
LABEL $1805 set_up_morphing
LABEL $123B no_morph_display
LABEL $1877 do_one_morph_step_16
LABEL $122B morph_not_done_yet
LABEL $122B no_init_change2
LABEL $CAD2 current_morph_vectorlist
LABEL $1244 exit_init_screen
COMMENT_LABEL $1244 otherwise proceed
LABEL $1263 no_reinit_level
LABEL $125F reinit_level
LABEL $4013 _band_list_end
LABEL $3F53 _band_list_start
LABEL $3F51 _object_list_end
COMMENT_LABEL $3F51 30 sprites
LABEL $3EBB _object_list_start
LABEL $1296 _loop1
LABEL $129E _loop2
LABEL $12FC move_on
LABEL $33A9 object_table
LABEL $12D1 this_is_no_dive_object
LABEL $130B error_list_to_long
LABEL $1392 no_reinit_stuff
LABEL $1319 fly_available
LABEL $1325 fly_go_on
LABEL $132D croco_available
LABEL $1339 croco_go_on
LABEL $1360 snake_go_on
LABEL $1382 girl_go_on
LABEL $139A no_girl_on_this_level
LABEL $13A4 no_snake_on_this_level
LABEL $13AE no_otter_on_this_level
LABEL $13D4 no_new_high
LABEL $17CC new_high_score
LABEL $13EB game_over_loop1
LABEL $1A39 game_over_string
LABEL $1429 no_y_scale_now
LABEL $1434 use_y
LABEL $1442 use_x
LABEL $212B morph_countdown1
LABEL $1465 game_over_loop2
LABEL $C8ED score_only_string
LABEL $1A4F continue_string
LABEL $14E6 end_of_end_of_game
LABEL $C8ED score_string
LABEL $3D5A death_sound
LABEL $153B death_screen_loop1
LABEL $2286 frog_dead_pic
LABEL $2161 morph_death1
LABEL $159E death_screen_loop
LABEL $1AA1 died
LABEL $1AD1 cause_strings
LABEL $15E8 end_of_death_morph
LABEL $15CD go_on_anyway1
LABEL $15E2 exit_to_reinit
LABEL $1608 no_fly_bonus
LABEL $1616 no_girl_bonus
LABEL $1618 timer_bonus
LABEL $3D6C frog_home_sound
LABEL $216A morph_home1
LABEL $167B home_screen_loop
LABEL $1ABB reached_home
LABEL $16A3 no_fly_bonus2
LABEL $1A7A fly_bonus_text
LABEL $16B3 no_girl_bonus2
LABEL $1A68 girl_bonus_text
LABEL $16D6 end_of_home_morph
LABEL $16BF go_on_anyway2
LABEL $16DB end_of_home
LABEL $16EC no_new_life
LABEL $1793 new_life_intermission
LABEL $3DA4 level_done_sound
LABEL $171D level_loop
LABEL $1A8C level_complete_text
LABEL $173E level_loop_done
LABEL $1754 no_new_life1
LABEL $1763 roll_over_intermission_loop
LABEL $1B8C roll_over_string
LABEL $1792 roll_over_intermission_end
LABEL $178B roll_over_sound_is_playing
LABEL $3E44 ta_ta_ta1
LABEL $3E5E ta_ta_ta2
LABEL $17AD new_life_intermission_loop
LABEL $1B6F new_life_string
LABEL $17CB new_life_end
LABEL $17E6 new_high_score_loop
LABEL $1BA6 highscore_string
LABEL $1804 new_high_score_end
LABEL $CA53 current_morph_vectorlist_org
LABEL $1820 A_is_high_vector_counter
LABEL $CB51 current_morph_vector_diffs
LABEL $1868 set_up_morphing_loop2
LABEL $1893 morphing_now_16
LABEL $188D no_new_morph_structure
LABEL $1899 delay_done_16
LABEL $18FC no_morphing_is_last
LABEL $18F8 no_morphing_is_first
LABEL $18CB do_morph_loop2_16
COMMENT_LABEL $18CB loop through all vector coordinates of list
LABEL $18D3 no_minus_morph_16
LABEL $18EE no_minus_morph2_16
LABEL $193F divide_by_zero202
LABEL $1939 divide_next202
LABEL $192E divide_next1202
LABEL $1934 divide_by_zero1202
LABEL $1941 divide_end202
LABEL $194E scroll_setup_loop1
LABEL $196C next_scroll_object
LABEL $1A38 scroll_objects_all_done
LABEL $19E9 scroll_bound_test_done
LABEL $1998 scroll_text_not_over_yet
LABEL $19A4 no_scroll_space
LABEL $19C3 load_x_with_letter_address_done
LABEL $19AD no_scroll_fullstop
LABEL $1CB9 _fs
LABEL $19C1 load1_x_with_letter_address_don
LABEL $19B6 no_scroll_0
LABEL $1C86 _t_
LABEL $1E3F _abc
LABEL $19FE LF33D206
LABEL $1A33 no_space_draw
LABEL $1A0C _DRAW_VLA209
COMMENT_LABEL $1A0C the local directive doesn't work here ???
LABEL $1A26 LF3F4210
LABEL $1AB1 cause
LABEL $1AD1 home_full
LABEL $1AE3 wall_jump
LABEL $1AF7 car
LABEL $1B0A out
LABEL $1B1E drown
LABEL $1B2F snake
LABEL $1B3F croco
LABEL $1B52 mole
LABEL $1B61 time
LABEL $1CC4 _a
LABEL $1CD5 _b
LABEL $1CEA _c
LABEL $1CFD _d
LABEL $1D10 _e
LABEL $1D1F _f
LABEL $1D2C _g
LABEL $1D43 _h
LABEL $1D54 _i
LABEL $1D63 _j
LABEL $1D72 _k
LABEL $1D74 _l
LABEL $1D7D _m
LABEL $1D8C _n
LABEL $1D9B _o
LABEL $1DB2 _p
LABEL $1DC1 _q
LABEL $1DC3 _r
LABEL $1DD8 _s
LABEL $1DF1 _t
LABEL $1DFC _u
LABEL $1E0D _v
LABEL $1E18 _w
LABEL $1E27 _x
LABEL $1E36 _y
LABEL $1E3F _z
LABEL $1E73 _0
LABEL $1E8C _1
LABEL $1E9D _2
LABEL $1EB2 _3
LABEL $1EC7 _4
LABEL $1EDA _5
LABEL $1EEF _dot
LABEL $1EF2 _written
LABEL $1EF2 written
LABEL $1F47 _by
LABEL $1F80 _chris
LABEL $1FDF _frog1
LABEL $205E _rip
LABEL $20AF _home1
LABEL $2119 morph_init2
LABEL $2122 morph_init3
LABEL $2134 morph_countdown2
LABEL $213D morph_countdown3
LABEL $2146 morph_countdown4
LABEL $214F morph_countdown5
LABEL $2158 morph_countdown6
LABEL $2211 frog1a_in_home_sprite
LABEL $223E frog1b_in_home_object
LABEL $222D frog1b_in_home_sprite
LABEL $225A frog1c_in_home_object
LABEL $2249 frog1c_in_home_sprite
LABEL $2265 frog1d_in_home_object
LABEL $227B girl1b_object
LABEL $22BF _l_sprite
LABEL $22C7 _l_object
LABEL $22D0 _e_sprite
LABEL $22E0 _e_object
LABEL $22E9 _v_sprite
LABEL $22F3 _v_object
LABEL $22FC _d_sprite
LABEL $2312 _d_object
LABEL $231B _o_sprite
LABEL $2335 _o_object
LABEL $233E _n_sprite
LABEL $234C _n_object
LABEL $2355 fly1a_sprite
LABEL $238A fly1b_object
LABEL $2375 fly1b_sprite
LABEL $23AA fly1c_object
LABEL $2395 fly1c_sprite
LABEL $23B5 fly1d_object
LABEL $23C0 car1a_sprite
LABEL $23DC car1a_object
LABEL $2403 car1b_object
LABEL $23E7 car1b_sprite
LABEL $2428 car1c_object
LABEL $240E car1c_sprite
LABEL $2433 car1d_object
LABEL $243E car3a_sprite
LABEL $2458 car3a_object
LABEL $247D car3b_object
LABEL $2463 car3b_sprite
LABEL $2488 car4a_sprite
LABEL $24A2 car4a_object
LABEL $24C7 car4b_object
LABEL $24AD car4b_sprite
LABEL $24D2 car5a_sprite
LABEL $24EA car5a_object
LABEL $250D car5b_object
LABEL $24F5 car5b_sprite
LABEL $2530 car5c_object
LABEL $2518 car5c_sprite
LABEL $253B car5d_object
LABEL $2546 car6a_object
LABEL $2551 car6b_object
LABEL $255C car6c_object
LABEL $2567 car6d_object
LABEL $2572 car7a_sprite
LABEL $258A car7a_object
LABEL $25AD car7b_object
LABEL $2595 car7b_sprite
LABEL $25D0 car7c_object
LABEL $25B8 car7c_sprite
LABEL $25DB car7d_object
LABEL $25E6 car8a_object
LABEL $25F1 car8b_object
LABEL $25FC car8c_object
LABEL $2607 car8d_object
LABEL $2612 truck1a_sprite
LABEL $2638 truck1a_object
LABEL $2669 truck1b_object
LABEL $2643 truck1b_sprite
LABEL $269A truck1c_object
LABEL $2674 truck1c_sprite
LABEL $26A5 truck1d_object
LABEL $26B0 truck2a_object
LABEL $26BB truck2b_object
LABEL $26C6 truck2c_object
LABEL $26D1 truck2d_object
LABEL $26DC bike1a_sprite
LABEL $270C bike1a_object
LABEL $2747 bike1b_object
LABEL $2717 bike1b_sprite
LABEL $2782 bike1c_object
LABEL $2752 bike1c_sprite
LABEL $27BD bike1d_object
LABEL $278D bike1d_sprite
LABEL $27C8 moped1a_sprite
LABEL $27F2 moped1a_object
LABEL $2827 moped1b_object
LABEL $27FD moped1b_sprite
LABEL $285C moped1c_object
LABEL $2832 moped1c_sprite
LABEL $2867 moped1d_object
LABEL $2872 moped2a_object
LABEL $287D moped2b_object
LABEL $2888 moped2c_object
LABEL $2893 moped2d_object
LABEL $289E moped3a_object
LABEL $28A9 moped3b_object
LABEL $28B4 moped3c_object
LABEL $28BF moped3d_object
LABEL $28CA log1a_sprite
LABEL $28E4 log1a_object
LABEL $2909 log1b_object
LABEL $28EF log1b_sprite
LABEL $292E log1c_object
LABEL $2914 log1c_sprite
LABEL $2953 log1d_object
LABEL $2939 log1d_sprite
LABEL $295E log1e_object
LABEL $2969 log1f_object
LABEL $2974 log2a_object
LABEL $297F log2b_object
LABEL $298A log2c_object
LABEL $2995 log2d_object
LABEL $29A0 log2e_object
LABEL $29AB log2f_object
LABEL $29B6 log3a_sprite
LABEL $29CE log3a_object
LABEL $29F1 log3b_object
LABEL $29D9 log3b_sprite
LABEL $2A14 log3c_object
LABEL $29FC log3c_sprite
LABEL $2A37 log3d_object
LABEL $2A1F log3d_sprite
LABEL $2A42 log3e_object
LABEL $2A4D log3f_object
LABEL $2A58 log4a_sprite
LABEL $2A70 log4a_object
LABEL $2A93 log4b_object
LABEL $2A7B log4b_sprite
LABEL $2AB6 log4c_object
LABEL $2A9E log4c_sprite
LABEL $2AD9 log4d_object
LABEL $2AC1 log4d_sprite
LABEL $2AE4 log4e_object
LABEL $2AEF log4f_object
LABEL $2AFA log7a_object
LABEL $2B05 log7b_object
LABEL $2B10 log7c_object
LABEL $2B1B log7d_object
LABEL $2B26 log7e_object
LABEL $2B31 log7f_object
LABEL $2B3C log8a_object
LABEL $2B47 log8b_object
LABEL $2B52 log8c_object
LABEL $2B5D log8d_object
LABEL $2B68 log8e_object
LABEL $2B73 log8f_object
LABEL $2B7E log9a_object
LABEL $2B89 log9b_object
LABEL $2B94 log9c_object
LABEL $2B9F log9d_object
LABEL $2BAA log9e_object
LABEL $2BB5 log9f_object
LABEL $2BC0 log10a_object
LABEL $2BCB log10b_object
LABEL $2BD6 log10c_object
LABEL $2BE1 log10d_object
LABEL $2BEC log10e_object
LABEL $2BF7 log10f_object
LABEL $2C02 turtle1a_sprite
LABEL $2C1A turtle1a_object
LABEL $2C41 turtle1b_object
LABEL $2C25 turtle1b_sprite
LABEL $2C68 turtle1c_object
LABEL $2C4C turtle1c_sprite
LABEL $2C73 turtle2a_sprite
LABEL $2C8B turtle2a_object
LABEL $2CB2 turtle2b_object
LABEL $2C96 turtle2b_sprite
LABEL $2CD9 turtle2c_object
LABEL $2CBD turtle2c_sprite
LABEL $2CE4 turtle3a_object
LABEL $2CEF turtle3b_object
LABEL $2CFA turtle3c_object
LABEL $2D05 turtle4a_object
LABEL $2D10 turtle4b_object
LABEL $2D1B turtle4c_object
LABEL $2D26 turtled1a_object
LABEL $2D33 turtled1b_object
LABEL $2E34 turtlea1a_object
LABEL $2D40 turtled1c_object
LABEL $2D4D turtled2a_object
LABEL $2D5A turtled2b_object
LABEL $2F9C turtlea2a_object
LABEL $2D67 turtled2c_object
LABEL $2D74 turtled3a_object
LABEL $2D81 turtled3b_object
LABEL $2EB6 turtlea3a_object
LABEL $2D8E turtled3c_object
LABEL $2D9B turtled4a_object
LABEL $2DA8 turtled4b_object
LABEL $301E turtlea4a_object
LABEL $2DB5 turtled4c_object
LABEL $2DC2 turtlea1a_sprite
LABEL $2DD6 turtlea1b_sprite
LABEL $2DEA turtlea1c_sprite
LABEL $2DF8 turtlea1d_sprite
LABEL $2E16 turtlea1e_sprite
LABEL $2E2A turtlea1f_sprite
LABEL $2E41 turtlea1b_object
LABEL $2E8F turtleb1a_object
LABEL $2E4E turtlea1c_object
LABEL $2E5B turtlea1d_object
LABEL $2E68 turtlea1e_object
LABEL $2E75 turtlea1f_object
LABEL $2E82 turtlea1g_object
LABEL $2E9C turtleb1b_object
LABEL $2EA9 turtleb1c_object
LABEL $2EC3 turtlea3b_object
LABEL $2F11 turtleb3a_object
LABEL $2ED0 turtlea3c_object
LABEL $2EDD turtlea3d_object
LABEL $2EEA turtlea3e_object
LABEL $2EF7 turtlea3f_object
LABEL $2F04 turtlea3g_object
LABEL $2F1E turtleb3b_object
LABEL $2F2B turtleb3c_object
LABEL $2F38 turtlea2a_sprite
LABEL $2F4C turtlea2b_sprite
LABEL $2F60 turtlea2d_sprite
LABEL $2F7E turtlea2e_sprite
LABEL $2F92 turtlea2f_sprite
LABEL $2FA9 turtlea2b_object
LABEL $2FF7 turtleb2a_object
LABEL $2FB6 turtlea2c_object
LABEL $2FC3 turtlea2d_object
LABEL $2FD0 turtlea2e_object
LABEL $2FDD turtlea2f_object
LABEL $2FEA turtlea2g_object
LABEL $3004 turtleb2b_object
LABEL $3011 turtleb2c_object
LABEL $302B turtlea4b_object
LABEL $3079 turtleb4a_object
LABEL $3038 turtlea4c_object
LABEL $3045 turtlea4d_object
LABEL $3052 turtlea4e_object
LABEL $305F turtlea4f_object
LABEL $306C turtlea4g_object
LABEL $3086 turtleb4b_object
LABEL $3093 turtleb4c_object
LABEL $30A0 snake1a_sprite
LABEL $30DB snake1b_object
LABEL $30C3 snake1b_sprite
LABEL $30FE snake1c_object
LABEL $30E6 snake1c_sprite
LABEL $3109 snake1d_object
LABEL $3114 snake2a_object
LABEL $311F snake2b_object
LABEL $312A snake2c_object
LABEL $3135 snake2d_object
LABEL $3140 snake3a_sprite
LABEL $317B snake3b_object
LABEL $3163 snake3b_sprite
LABEL $319E snake3c_object
LABEL $3186 snake3c_sprite
LABEL $31A9 snake3d_object
LABEL $31B4 snake4a_object
LABEL $31BF snake4b_object
LABEL $31CA snake4c_object
LABEL $31D5 snake4d_object
LABEL $31E0 croco3a_sprite
LABEL $31FE croco3a_object
LABEL $3227 croco3b_object
LABEL $3209 croco3b_sprite
LABEL $324C croco3c_object
LABEL $3232 croco3c_sprite
LABEL $3257 croco4a_object
LABEL $3262 croco4b_object
LABEL $326D croco4c_object
LABEL $3278 crocoh1a_sprite
LABEL $32BF crocoh1b_object
LABEL $329E crocoh1b_sprite
LABEL $32EF crocoh1c_object
LABEL $32CA crocoh1c_sprite
LABEL $331F crocoh1d_object
LABEL $32FA crocoh1d_sprite
LABEL $334F crocoh1e_object
LABEL $332A crocoh1e_sprite
LABEL $335A crocoh1f_object
LABEL $3365 otter1a_sprite
LABEL $339E otter1b_object
LABEL $3387 otter1b_sprite
LABEL $3407 levels
LABEL $3492 level2_data
LABEL $351D level3_data
LABEL $35A8 level4_data
LABEL $3633 level5_data
LABEL $36BE level6_data
LABEL $3749 level7_data
LABEL $37D4 level8_data
COMMENT_LABEL $37D4 ;;;;;;;;;;;;;
LABEL $385F level9_data
LABEL $38EA level10_data
LABEL $3975 level11_data
LABEL $3A00 level12_data
LABEL $3A8B level13_data
LABEL $3B16 level14_data
LABEL $3BA1 level15_data
COMMENT_LABEL $3BA1 ;;;;;;;;;;;;
LABEL $3C2C level16_data
LABEL $3E80 _score_string
LABEL $3E80 _score_only_string
LABEL $3E86 _no_score_string
LABEL $3E8D _level_string
LABEL $3E93 _no_level_string
LABEL $3E9A _frogs_string
LABEL $3EA0 _no_frogs
LABEL $3EA2 _string_list_end
LABEL $3EA3 _home_objects_start
LABEL $3EA3 _home_objects
LABEL $3EA3 _home_entry_1
EQU $6A HOME_Y_POS
EQU -$50 HOME_X_POS
EQU $24 HOME_X_WIDTH
LABEL $3EA8 _home_entry_2
LABEL $3EAD _home_entry_3
LABEL $3EB2 _home_entry_4
LABEL $3EB7 _home_entry_5
LABEL $3EBB _home_end
LABEL $3EBB _home_objects_end
LABEL $3EBB _copy_start2
LABEL $3EBB _object_list
LABEL $3F53 _copy_end2
COMMENT_LABEL $3F53 + 2 that last object is allways zero
LABEL $3F53 _copy_start3
LABEL $3F53 _band_list
LABEL $4013 _copy_end3
LABEL $3EBB _yankee
LABEL $3FE6 _copy_end4
EQU $6E DIE_HOME_CROCO
LABEL $C8FA level_string
LABEL $C907 frogs_string
LABEL $C928 home_end
LABEL $CA53 copy_end4
LABEL $CAE9 object_list_end
LABEL $CBB9 t_list_end
COMMENT_LABEL $CBB9 note maximum of 6 dives per level
LABEL $CBCF end_of_my_ram
LABEL $3FE6 *
EQU $2D *xfer
COMMENT_LINE $0000 VECTREX FROGGER
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 comments and vectrex talk are welcome
COMMENT_LINE $0000 my email: malban@email.de
COMMENT_LINE $0000 following command line was used to assemble:
COMMENT_LINE $0000 C:>as09.exe -w200 -h0 -l -mcti frogger.asm >error
COMMENT_LINE $0000 I used the 6809 assembler:
COMMENT_LINE $0000 as09 [1.11].
COMMENT_LINE $0000 Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT_LINE $0000 Available at:
COMMENT_LINE $0000 http://www.falstaff.demon.co.uk/cross.html
COMMENT_LINE $0000 NOWN BUGS(!)
COMMENT_LINE $0000 * bug with diving turtle is still there (offsets of sprite higher 5)
COMMENT_LINE $0000 - rarely seen!
COMMENT_LINE $0000 * sound glitches, dunno, what causes that
COMMENT_LINE $0000 * some vector drawings are not 100% exact, due to optimizations used
COMMENT_LINE $0000 look for this define in the source
COMMENT_LINE $0000 to see all changes
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 I like these makro definitions, they are like inlining :-)
COMMENT $0000 vectrex functions as macros (some)
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains makro definitions of vectrex BIOS functions, these are ;
COMMENT_LINE $0000 exact clones of the BIOS functions                                        ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 most of these macros are taken from the ROM to avoid
COMMENT_LINE $0000 all those JSR / RTS, in order to save time (over space)
COMMENT_LINE $0000 some of these 'functions' look like they could be optimized
COMMENT_LINE $0000 I did however NOT optimze anything, since I'm not sure
COMMENT_LINE $0000 that it isn't used for any timing stuff...
COMMENT_LINE $0000 _ZERO_VECTOR_BEAM      macro
COMMENT_LINE $0000 _INTENSITY_A           macro
COMMENT_LINE $0000 _INTENSITY             macro value
COMMENT_LINE $0000 _SCALE_A               macro
COMMENT_LINE $0000 _SCALE_B               macro
COMMENT_LINE $0000 _SCALE                 macro value
COMMENT_LINE $0000 _DRAW_LINE_D           macro
COMMENT_LINE $0000 _DRAW_LINE             macro __x,__y
COMMENT_LINE $0000 _DRAW_REL_LINE_FROM    macro __x1,__y1,__x2,_y2
COMMENT_LINE $0000 _DRAW_ZERO_LINE_FROM   macro __x1,__y1,__x2,_y2
COMMENT_LINE $0000 _DRAW_LINE_PATTERN     macro __x,__y,__p
COMMENT_LINE $0000 _ABS_A_B               macro
COMMENT_LINE $0000 _ABS_B                 macro
COMMENT_LINE $0000 _MOVE_TO_D             macro
COMMENT_LINE $0000 _MOVE_TO               macro __x,__y
COMMENT_LINE $0000 _DRAW_VLC              macro
COMMENT_LINE $0000 _DRAW_DIRECT_VLC       macro list_address
COMMENT_LINE $0000 _DRAW_DIRECT_POS_VLC   macro __x, __y, list_address
COMMENT_LINE $0000 _DP_TO_C8              macro
COMMENT_LINE $0000 _DP_TO_D0              macro
COMMENT_LINE $0000 _DO_SOUND              macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store intensity in D/A
COMMENT $0000 Save intensity in $C827
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because ?
COMMENT $0000 turn off mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 scale for placing first point
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 defines 'LF3F4' as a local variable
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT_LINE $0000 the followin two instructions might be optimized
COMMENT_LINE $0000 but there is something about 18 cycles :-)
COMMENT $0000 Point to next coordinate pair
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor?)
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT $0000 Point to next coordinate pair (here a NOP)
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Get default pattern
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Clear T1H (scale factor?)
COMMENT $0000 Check if T1 timed out (note wasted byte)
COMMENT $0000 Update pattern if not
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 This code is for lines that are not really short lines
COMMENT $0000 Get default pattern
COMMENT $0000 Update pattern register
COMMENT $0000 Wait a moment
COMMENT $0000 Check if T1 timed out
COMMENT $0000 Update pattern again if not
COMMENT $0000 Get line counter (here also NOP)
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Save D-register on stack
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 timer 1 count high
COMMENT $0000 Get back D-reg
COMMENT $0000 Wait for timer 1
COMMENT $0000 Delay a moment
COMMENT $0000 Wait for timer 1
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 the local directive doesn't work here ???
COMMENT_LINE $0000 I think because it is a makro using makro...
COMMENT $0000 Decrement line count
COMMENT $0000 Go back for more points
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 address of home vector list
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 address of home vector list
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 point to shadow memory
COMMENT $0000 point to sound buffer
COMMENT $0000 init count for 14 registers
COMMENT $0000 get next register
COMMENT $0000 skip if unchanged
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 go back for next register
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 user variable definitions
COMMENT_LINE $0000 $c880
COMMENT_LINE $0000 following are some variable used only when something is 'morphing'
COMMENT_LINE $0000 following are 'in game' variables, out of the game these can be reused
COMMENT_LINE $0000 from here only variables in game!!!
COMMENT_LINE $0000 a short note on the sprite offsets: all sprites have 'naturally' a starting
COMMENT_LINE $0000 point the offset is the space between that starting point and a 'virtual'
COMMENT_LINE $0000 grid position. the value of these offsets heavily depend on which scaling is used,
COMMENT_LINE $0000 so if you use a different 'resolution' these offsets must be changed also...
COMMENT_LINE $0000 in between levels in the intermission sequences
COMMENT_LINE $0000 following is an exact list object structure... for girl
COMMENT_LINE $0000 following are some 'in' game variables which can be reused, they do not
COMMENT_LINE $0000 collide with the other side...
COMMENT_LINE $0000 variables that are only used on startup screen
COMMENT_LINE $0000 these use the same namespace as the above variables below
COMMENT_LINE $0000 scroll_variables_start
COMMENT_LINE $0000 for init screen
COMMENT_LINE $0000 see bottom of file for further addresses!
COMMENT_LINE $0000 following are a lot of constants which I declared for 'better'
COMMENT_LINE $0000 readability (and to keep things variable (constant<->variable!!!)) of the source...
COMMENT_LINE $0000 these are not really well sorted...
COMMENT_LINE $0000 this value is added to the repositioning of sprites
COMMENT_LINE $0000 if they move out of bounds and go to the other side
COMMENT_LINE $0000 to prevent going out of bounds right away again
COMMENT_LINE $0000 because of there offset
COMMENT_LINE $0000 I'm not sure all sprites keep this maximum
COMMENT_LINE $0000 this may 'cause random repositioning of sprites
COMMENT_LINE $0000 a known problem, but I didin't increase this, since the
COMMENT_LINE $0000 actual playing area is allready quite small as it is...
COMMENT_LINE $0000 following are some status constants used for turtle, snake, otter, fly, girl and croco
COMMENT_LINE $0000 bonus BIT MAPS, only two for now, these are AND or ORed
COMMENT_LINE $0000 morphing stati...
COMMENT_LINE $0000 and general morphing constants
COMMENT_LINE $0000 now fixed and allways done with
COMMENT_LINE $0000 16 steps!!!
COMMENT_LINE $0000 number of steps between first and second object
COMMENT_LINE $0000 this actually uses shift rights to implement 32 steps between vectors
COMMENT_LINE $0000 here allways the actual number of steps -1
COMMENT_LINE $0000 !!! all values supported, but only
COMMENT_LINE $0000 8, 16, 32, 64 are using shift as divs!!!
COMMENT_LINE $0000 other values will be SLOW
COMMENT_LINE $0000 (about 10000 cycles per round)
COMMENT_LINE $0000 they allways appear somewhere... truth values :-)
COMMENT_LINE $0000 vectrex coordinates use range from -128 to +127
COMMENT_LINE $0000 these top and bottom values are for scale factor $ff
COMMENT_LINE $0000 different sizes of texts, in format yx, note: different ranges for y and x!
COMMENT_LINE $0000 following are SPECIAL definitions for special objects
COMMENT_LINE $0000 these must be = in the object definition
COMMENT_LINE $0000 SPECIAL_MINUS_LENGTH            EQU -1       ; obsolete...
COMMENT_LINE $0000 scale factors used in the game (all different for optimization :-) :-( )
COMMENT_LINE $0000 following are some 'blowup' factors applied to various objects (for optimization)
COMMENT_LINE $0000 these factors must be = that the resulting coordinate is still below 127
COMMENT_LINE $0000 for optimization the resulting vectors should be pretty near 127
COMMENT_LINE $0000 and the scale factor be = that it is the smallest possible value!
COMMENT_LINE $0000 grid size of the virtal grid in different scale factors
COMMENT_LINE $0000 max 10, so that 12*GRID_SIZE still <= 127
COMMENT_LINE $0000 size can than be altered using scale factor
COMMENT_LINE $0000 I want to draw all lines in one
COMMENT_LINE $0000 go, so 10 is max here :-(
COMMENT_LINE $0000 otherwise I could scale the sprites
COMMENT_LINE $0000 with the same scaling value...
COMMENT_LINE $0000 frogger constants
COMMENT_LINE $0000 following are position information as to where the houses are located
COMMENT_LINE $0000 in SCALE_FACTOR_GAME
COMMENT_LINE $0000 following are for constants for checking which way frogger heads
COMMENT_LINE $0000 value of these is of no importance, just difference...
COMMENT_LINE $0000 an ASCII '5' since it is displayed also with
COMMENT_LINE $0000 this value
COMMENT_LINE $0000 start position of frog in GRID_SIZE GAME
COMMENT_LINE $0000 start band of frog in (0-12) in GRID POSITION
COMMENT_LINE $0000 number of 'pixels' one jump takes the frog...
COMMENT_LINE $0000 obviously in GRID_SIZE_GAME
COMMENT_LINE $0000 sizes of the different frog objects...
COMMENT_LINE $0000 since all the same, I don't use them anymore...
COMMENT_LINE $0000 positions of where frog will be considered to be out of bounds...
COMMENT_LINE $0000 in GAME position
COMMENT_LINE $0000 some positioning variables for the score information display...
COMMENT_LINE $0000 in screen coordinates
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 most of them have been splitted into the main source by now
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains private makros, some are taken from the BIOS of vectrex;
COMMENT_LINE $0000 and changed slightly to be more speedy, other were written alltogether by ;
COMMENT_LINE $0000 me, some of these are even obsolete... but all should be in a working     ;
COMMENT_LINE $0000 state                                                                     ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 some heavily optimized for speed :-(
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is supposed to 'reset' the sound hardware,
COMMENT_LINE $0000 it doesn't seem to work correctly though, frog jumps sometimes
COMMENT_LINE $0000 sound differently, what kind of 'bug' is that?
COMMENT $0000 no music is playing ->0
COMMENT $0000 shadow regs
COMMENT_LINE $0000 in the next do sound call
COMMENT_LINE $0000 all regs are cleared automatically
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro should be called every round a music is to be played
COMMENT_LINE $0000 this does not play the sound, it initializes it only, but also every round!
COMMENT_LINE $0000 leaves with DP = to C8
COMMENT_LINE $0000 expects music to be initialized
COMMENT_LINE $0000 and pointer in music_active
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro initializes a new piece of music
COMMENT_LINE $0000 the above 'function' must be called every round in order for the music
COMMENT_LINE $0000 actually to be played
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT_LINE $0000 the next instructions initialize a new sound
COMMENT_LINE $0000 load #1
COMMENT_LINE $0000 set this as marker for music start
COMMENT $0000 doesn'T destroy a register
COMMENT $0000 to do it that way
COMMENT $0000 load a music structure (piece_of_music)
COMMENT $0000 and store it to my own music active pointer
COMMENT_LINE $0000 next a do_my_sound and than do sound must be called
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is sort of the startup for every display round
COMMENT_LINE $0000 does all sound stuff and recalibration, leaves with
COMMENT_LINE $0000 DP = to D0
COMMENT_LINE $0000 destroyes pretty much every register...
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) see above
COMMENT $0000 sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT $0000 ROM function that does the sound playing
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT_LINE $0000 JSR     Wait_Recal         ; sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makros are for intensity setting
COMMENT_LINE $0000 to = a intensity the bios does use some (many) cycles, here a
COMMENT_LINE $0000 test really saves some cycles, if intensity is = many times per round
COMMENT_LINE $0000 (like differently shaded sprites)
COMMENT_LINE $0000 intensity = to value found in register A
COMMENT_LINE $0000 is compared/stored to 'current_brightness'
COMMENT_LINE $0000 if not equal the new brightness is set!
COMMENT $0000 name of macro, and variable name, can also be accessed with
COMMENT $0000 compare to last known value
COMMENT $0000 if the same, than jump
COMMENT $0000 otherwise store new value
COMMENT $0000 and than set the intensity
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, only the brightness is passed as makro parameter
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to register A
COMMENT $0000 'call' the other makro
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, but allways sets the new brightness
COMMENT_LINE $0000 good for startup of new round, since intensity MUST be = at that point
COMMENT_LINE $0000 or after other functions which destroy brighness (print_str...)
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to A
COMMENT $0000 store it
COMMENT $0000 and change the brightness
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makro ...
COMMENT_LINE $0000 they search for a better (faster) scale/DAC relation and use
COMMENT_LINE $0000 the scaling thus found, it should be somewhat faster that way...
COMMENT_LINE $0000 per round we save approxematly: ? cycles
COMMENT_LINE $0000 both destroy X and D
COMMENT_LINE $0000 SCALE factor is changed
COMMENT_LINE $0000 forget it !!!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0000 NOT DONE:
COMMENT_LINE $0000 what should be done:
COMMENT_LINE $0000 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0000 a = a * s
COMMENT_LINE $0000 b = b * s
COMMENT_LINE $0000 scaling = scaling / s
COMMENT_LINE $0000 that would give the most efficient positioning
COMMENT_LINE $0000 bother it takes more time to calculate the above,
COMMENT_LINE $0000 than it saves
COMMENT_LINE $0000 with every positioning via this routine now,
COMMENT_LINE $0000 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0000 to do one simple positioning!!!
COMMENT_LINE $0000 that is probably about 300 cycles per positioning
COMMENT_LINE $0000 this is done about 30-40 times per round
COMMENT_LINE $0000 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0000 and we haven't drawn a single line yet!!!
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 only positive for now
COMMENT_LINE $0000 multiply two 16 bit values to another 16 bit value
COMMENT_LINE $0000 multiplies D and tmp1 to D
COMMENT_LINE $0000 result should be also 16 bit able, otherwise high bit is lost
COMMENT_LINE $0000 ***ERROR*** It is not tested for signedness, should test
COMMENT_LINE $0000 at startup, if our counter us negative, like the last mul above
COMMENT_LINE $0000 but I don't need it now, it would be just a waste of time
COMMENT_LINE $0000 for my needs!!!
COMMENT $0000 remember D
COMMENT $0000 was it a mul zero? than go there
COMMENT $0000 get the other 16 bit value to D
COMMENT $0000 was that one a zero? than go there
COMMENT $0000 otherwise start multiplying
COMMENT $0000 here we loop after the first step
COMMENT $0000 load our last intermediate multiply value
COMMENT $0000 add tmp1 once
COMMENT $0000 here we go with our first mul step
COMMENT $0000 store the intermediate mul value to mul_tmp2
COMMENT $0000 load 'counter' (was D)
COMMENT $0000 decrement counter ***ERROR***,
COMMENT $0000 and store counter back
COMMENT $0000 if counter not zero, repeat multi...
COMMENT $0000 otherwise load the result to D register
COMMENT $0000 and goto end
COMMENT $0000 here we come if a zero mul was made
COMMENT $0000 result (D) is than zero
COMMENT $0000 and done...
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 there are many 16 bit operands missing, so is
COMMENT_LINE $0000 a LSRD
COMMENT_LINE $0000 this macro does a 16 bit LSR on register D
COMMENT $0000 LSR B
COMMENT $0000 LSR A
COMMENT $0000 if no carry, than exit
COMMENT $0000 otherwise underflow from A to 7bit of B
COMMENT $0000 done
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Sound chip register 0E to port A
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 pause
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 DDR A to input
COMMENT $0000 sound BDIR off, BC1 on, mux off
COMMENT $0000 pause
COMMENT $0000 Read buttons
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 DDR A to output
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT $0000 Set scale factor
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys Vec_Misc_Count ($C823)
COMMENT_LINE $0000 expects dp to d0
COMMENT_LINE $0000 only OK for small scales, cause not exact!
COMMENT_LINE $0000 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $0000 STA     <VIA_port_b
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 3
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 LDB     #$CC            ; prepare for zero below
COMMENT $0000 BLANK low and /ZERO low
COMMENT_LINE $0000 zero here for following homes
COMMENT_LINE $0000 LDA     #SCALE_IN_HOME
COMMENT $0000 for first house
COMMENT $0000 load object position
COMMENT $0000 korrect with sprite offset Y
COMMENT $0000 korrect with sprite offset X
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load new object definition
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT $0000 A= scale, B= Timer flag
COMMENT $0000 Wait for T1 to time out
COMMENT_LINE $0000 move to done
COMMENT $0000 do it
COMMENT_LINE $0000 in X vector list now!
COMMENT_LINE $0000 U still untouched, pointer to first home!
COMMENT_LINE $0000 display the vector list
COMMENT $0000 (MAKRO) and draw the vector list
COMMENT $0000 for first house
COMMENT $0000 load object position
COMMENT $0000 korrect with sprite offset Y
COMMENT $0000 korrect with sprite offset X
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load new object definition
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT $0000 A= scale, B= Timer flag
COMMENT $0000 Wait for T1 to time out
COMMENT_LINE $0000 move to done
COMMENT $0000 do it
COMMENT_LINE $0000 in X vector list now!
COMMENT_LINE $0000 U still untouched, pointer to first home!
COMMENT_LINE $0000 display the vector list
COMMENT $0000 (MAKRO) and draw the vector list
COMMENT $0000 makros for unlooping
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 SCALE_FACTOR_SPRITE 6
COMMENT_LINE $0000 destroys Vec_Misc_Count ($C823)
COMMENT_LINE $0000 optimized vector list draw makro
COMMENT_LINE $0000 for scale of 6 only!!!
COMMENT_LINE $0000 we even don't wait for the timer
COMMENT_LINE $0000 note: after completetion you must
COMMENT_LINE $0000 do a           STA     VIA_shift_reg
COMMENT_LINE $0000 after about 3 cycles!
COMMENT_LINE $0000 otherwise the beam is not switched off
COMMENT_LINE $0000 reg A contains 0
COMMENT_LINE $0000 saves 1 (STA VIA_shift_reg) over _S makro, with 30 sprites that are 120 cycles!
COMMENT_LINE $0000 idea, not imlemented, to save another 10 cycles per line!
COMMENT_LINE $0000 do the maximum of lines per vector list entries hardcoded
COMMENT_LINE $0000 than jump in the beginning to the required length of vectors to be drawn
COMMENT_LINE $0000 DEC     $C823           ; 7
COMMENT_LINE $0000 BMI     _DRAW_END\?     ; 3 Go back for more points
COMMENT_LINE $0000 these instructions will not be needed anymore!
COMMENT_LINE $0000 we can than go straight from one line to the next, doing that in the
COMMENT_LINE $0000 sprite routine will save nearly 10 cycles per vector per sprite!!!
COMMENT_LINE $0000 another 3000-4000 cycles!!!
COMMENT $0000 cycles
COMMENT $0000 [6] Disable mux
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [6] Put pattern in shift register
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT $0000 [4] enable mux, thus y integrators are set to Y
COMMENT $0000 [4] turn the lights off
COMMENT $0000 (2)
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 (4)
COMMENT $0000 [6] Disable mux
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [6] Put pattern in shift register
COMMENT $0000 [4] enable timer 1
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 (2)
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 (4)
COMMENT $0000 [6] Disable mux
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [6] Put pattern in shift register
COMMENT $0000 [4] enable timer 1
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT_LINE $0000 NOP                     ; 2
COMMENT_LINE $0000 STA     <VIA_shift_reg
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 note: after completetion you must
COMMENT_LINE $0000 do a           STA     VIA_shift_reg
COMMENT_LINE $0000 after about 3 cycles!
COMMENT_LINE $0000 otherwise the beam is not switched off
COMMENT_LINE $0000 reg A contains 0
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $0021 hight, width, rel y, rel x (from 0,0)
COMMENT $0025 some game information, ending with $80
COMMENT $002C end of game header
COMMENT_LINE $002D ***************************************************************************
COMMENT_LINE $002D here the cartridge program starts off
COMMENT $002D initialize game variables
FORCE_SYMBOL $002D init_vars
COMMENT $0030 startup screen
FORCE_SYMBOL $0030 init_screen
COMMENT_LINE $0033 init_screen messes up variables,
COMMENT_LINE $0033 so init them again :-)
COMMENT $0033 initialize game variables
FORCE_SYMBOL $0033 init_vars
COMMENT $0036 set up the first level
FORCE_SYMBOL $0036 setup_level
COMMENT $0039 round_startup_main expects dp set to d0
FORCE_SYMBOL $0039 DP_to_D0
COMMENT $003C well, this does the round initializing, main optimized special
COMMENT_LINE $003C JSR     Wait_Recal         ; sets dp to d0, and pos at 0, 0
COMMENT $003C just for assembler optimization...
FORCE_NO_SYMBOL $003C
COMMENT $003E Wait for timer t2
FORCE_SYMBOL $003E VIA_int_flags
COMMENT $0042 Store refresh value
FORCE_NO_SYMBOL $0042
COMMENT $0045 into timer t2
FORCE_SYMBOL $0045 VIA_t2_lo
FORCE_NO_SYMBOL $0047
COMMENT $0049 Set scale factor
FORCE_SYMBOL $0049 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $004B
COMMENT_LINE $004E optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $004E NOT DONE:
COMMENT_LINE $004E what should be done:
COMMENT_LINE $004E s = $ff / max(abs(a),abs(b))
COMMENT_LINE $004E a = a * s
COMMENT_LINE $004E b = b * s
COMMENT_LINE $004E scaling = scaling / s
COMMENT_LINE $004E that would give the most efficient positioning
COMMENT_LINE $004E bother it takes more time to calculate the above,
COMMENT_LINE $004E than it saves
COMMENT_LINE $004E with every positioning via this routine now,
COMMENT_LINE $004E it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $004E to do one simple positioning!!!
COMMENT_LINE $004E that is probably about 300 cycles per positioning
COMMENT_LINE $004E this is done about 30-40 times per round
COMMENT_LINE $004E alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $004E and we haven't drawn a single line yet!!!
COMMENT $004E Store Y in D/A register
FORCE_SYMBOL $004E VIA_port_a
COMMENT $0050 Blank low, zero high?
FORCE_NO_SYMBOL $0050
FORCE_SYMBOL $0052 VIA_cntl
COMMENT $0055 Enable mux
FORCE_SYMBOL $0055 VIA_port_b
COMMENT $0057 Clear shift regigster
FORCE_SYMBOL $0057 VIA_shift_reg
COMMENT $0059 Disable mux
FORCE_SYMBOL $0059 VIA_port_b
COMMENT $005B Store X in D/A register
FORCE_SYMBOL $005B VIA_port_a
COMMENT $005D enable timer
FORCE_SYMBOL $005D VIA_t1_cnt_hi
FORCE_NO_SYMBOL $005F
FORCE_SYMBOL $0061 VIA_int_flags
FORCE_NO_SYMBOL $0065
COMMENT $0067 blank low and zero low
FORCE_SYMBOL $0067 VIA_cntl
COMMENT $0069 clear shift register
FORCE_SYMBOL $0069 VIA_shift_reg
FORCE_NO_SYMBOL $006B
COMMENT_LINE $006E optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $006E NOT DONE:
COMMENT_LINE $006E what should be done:
COMMENT_LINE $006E s = $ff / max(abs(a),abs(b))
COMMENT_LINE $006E a = a * s
COMMENT_LINE $006E b = b * s
COMMENT_LINE $006E scaling = scaling / s
COMMENT_LINE $006E that would give the most efficient positioning
COMMENT_LINE $006E bother it takes more time to calculate the above,
COMMENT_LINE $006E than it saves
COMMENT_LINE $006E with every positioning via this routine now,
COMMENT_LINE $006E it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $006E to do one simple positioning!!!
COMMENT_LINE $006E that is probably about 300 cycles per positioning
COMMENT_LINE $006E this is done about 30-40 times per round
COMMENT_LINE $006E alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $006E and we haven't drawn a single line yet!!!
COMMENT $006E Store Y in D/A register
FORCE_SYMBOL $006E VIA_port_a
COMMENT $0070 Blank low, zero high?
FORCE_NO_SYMBOL $0070
FORCE_SYMBOL $0072 VIA_cntl
COMMENT $0075 Enable mux
FORCE_SYMBOL $0075 VIA_port_b
COMMENT $0077 Clear shift regigster
FORCE_SYMBOL $0077 VIA_shift_reg
COMMENT $0079 Disable mux
FORCE_SYMBOL $0079 VIA_port_b
COMMENT $007B Store X in D/A register
FORCE_SYMBOL $007B VIA_port_a
COMMENT $007D enable timer
FORCE_SYMBOL $007D VIA_t1_cnt_hi
FORCE_NO_SYMBOL $007F
FORCE_SYMBOL $0081 VIA_int_flags
FORCE_NO_SYMBOL $0085
COMMENT $0087 /BLANK low and /ZERO low
FORCE_SYMBOL $0087 VIA_cntl
COMMENT $0089 clear shift register
FORCE_SYMBOL $0089 VIA_shift_reg
FORCE_NO_SYMBOL $008B
COMMENT $008E clear D/A register
FORCE_SYMBOL $008E VIA_port_a
COMMENT $0090 mux=1, disable mux
FORCE_SYMBOL $0090 VIA_port_b
COMMENT $0092 mux=1, enable mux
FORCE_SYMBOL $0092 VIA_port_b
COMMENT $0094 do it again
FORCE_SYMBOL $0094 VIA_port_b
FORCE_NO_SYMBOL $0096
COMMENT $0098 disable mux
FORCE_SYMBOL $0098 VIA_port_b
COMMENT $009A point to shadow memory
FORCE_SYMBOL $009A Vec_Snd_Shadow
COMMENT $009D point to sound buffer
FORCE_SYMBOL $009D Vec_Music_Work
COMMENT $00A0 init count for 14 registers
FORCE_NO_SYMBOL $00A0
COMMENT $00A2 get next register
COMMENT $00A4 skip if unchanged
COMMENT $00AA store register select byte
FORCE_SYMBOL $00AA VIA_port_a
COMMENT $00AC sound BDIR on, BC1 on, mux off
FORCE_NO_SYMBOL $00AC
FORCE_SYMBOL $00AE VIA_port_b
COMMENT $00B0 sound BDIR off, BC1 off, mux off
FORCE_NO_SYMBOL $00B0
FORCE_SYMBOL $00B2 VIA_port_b
COMMENT $00B4 read sound chip status (?)
FORCE_SYMBOL $00B4 VIA_port_a
COMMENT $00B6 store data byte
FORCE_SYMBOL $00B6 VIA_port_a
COMMENT $00B8 sound BDIR on, BC1 off, mux off
FORCE_NO_SYMBOL $00B8
FORCE_SYMBOL $00BA VIA_port_b
COMMENT $00BC sound BDIR off, BC1 off, mux off
FORCE_NO_SYMBOL $00BC
FORCE_SYMBOL $00BE VIA_port_b
COMMENT $00C0 go back for next register
COMMENT $00C3 get joystick stuff, and move frog, collision detection...
FORCE_SYMBOL $00C3 move_frog
COMMENT $00C6 is usually in ROUND_START_UP, here the above is
COMMENT $00C6 get active music
FORCE_SYMBOL $00C6 music_active
COMMENT $00C8 and init new notes
FORCE_SYMBOL $00C8 Init_Music_chk
COMMENT_LINE $00CB splitted, saves one DP_TO_C8!
COMMENT $00CB draw all graphical elements
FORCE_SYMBOL $00CB draw_objects
COMMENT $00CE after draw objects, dp is set to d0
COMMENT_LINE $00CE perhaps jumps right back to pause!
COMMENT_LINE $00CE following used to be a call to
COMMENT_LINE $00CE the button function
COMMENT_LINE $00CE doing it this way saves
COMMENT_LINE $00CE a couple of hundred cycles!
COMMENT $00CE button status in A
COMMENT $00CE Sound chip register 0E to port A
FORCE_NO_SYMBOL $00CE
FORCE_SYMBOL $00D0 VIA_port_a
COMMENT $00D2 sound BDIR on, BC1 on, mux off
FORCE_NO_SYMBOL $00D2
FORCE_SYMBOL $00D5 VIA_port_b
COMMENT $00D7 pause
COMMENT $00D8 sound BDIR off, BC1 off, mux off
FORCE_SYMBOL $00D8 VIA_port_b
COMMENT $00DA DDR A to input
FORCE_SYMBOL $00DA VIA_DDR_a
COMMENT $00DC sound BDIR off, BC1 on, mux off
FORCE_NO_SYMBOL $00DC
FORCE_SYMBOL $00DF VIA_port_b
COMMENT $00E1 pause
COMMENT $00E2 Read buttons
FORCE_SYMBOL $00E2 VIA_port_a
COMMENT $00E4 sound BDIR off, BC1 off, mux off
FORCE_SYMBOL $00E4 VIA_port_b
FORCE_NO_SYMBOL $00E6
COMMENT $00E8 DDR A to output
FORCE_SYMBOL $00E8 VIA_DDR_a
COMMENT $00EA is button4 of joy 1 pressed?
FORCE_NO_SYMBOL $00EA
COMMENT_LINE $00EC note, can EASILY be changed to any
COMMENT_LINE $00EC other button, it's just the bit!
COMMENT $00EC if not, start another round
COMMENT_LINE $00F0 pause game here...
COMMENT_LINE $00F0 first calculated the score now
COMMENT $00F0 get button status
FORCE_SYMBOL $00F0 Read_Btns
COMMENT $00F3 jumps allready jumped in this level
FORCE_SYMBOL $00F3 level_score
COMMENT $00F6 minus scores not added
COMMENT $00F8 0 scores not added
COMMENT $00FA times 10
FORCE_NO_SYMBOL $00FA
COMMENT $00FD must be in A :-(
COMMENT $00FF load level address
FORCE_SYMBOL $00FF no_score_string
COMMENT $0102 must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $0102 Vec_Misc_Count
COMMENT $0105 add to score(level)
FORCE_SYMBOL $0105 Add_Score_a
COMMENT $0108 jumps allready jumped in this level
FORCE_SYMBOL $0108 level_score
COMMENT $010B the cycles waster :-)
FORCE_SYMBOL $010B print_score
COMMENT $010E load default text height & width
FORCE_SYMBOL $010E NORMAL_TEXT_SIZE
COMMENT $0111 poke it to ram location
FORCE_SYMBOL $0111 Vec_Text_HW
COMMENT $0114 get address of 'pause' string
FORCE_SYMBOL $0114 pause_string
COMMENT $0117 Text Y
FORCE_NO_SYMBOL $0117
COMMENT $0119 Text X
COMMENT $011B Print the string
FORCE_SYMBOL $011B Print_Str_d
COMMENT $011E get button status
FORCE_SYMBOL $011E Read_Btns
COMMENT $0121 is a button pressed?
FORCE_NO_SYMBOL $0121
COMMENT $0123 start another round
COMMENT $0125 go back to main loop
COMMENT_LINE $0127 ***************************************************************************
COMMENT_LINE $0127 this routine calculates the new positions
COMMENT_LINE $0127 expected:dp is allready pointing to d0
COMMENT_LINE $0127 nothing is returned
COMMENT_LINE $0127 leaves with dp pointing to c8
COMMENT_LINE $0127 move frog corresponding to joystick...
COMMENT $0127 must be zero for digital joystick, is set to $ff in private vector routine
FORCE_NO_SYMBOL $0127
COMMENT $012A read joystick positions (cycle waste)
FORCE_SYMBOL $012A Joy_Digital
COMMENT_LINE $012D first checking for changed x pos
FORCE_NO_SYMBOL $012D
COMMENT $0131 pretty for optimizing to use a makro :-)
COMMENT $0131 only jump if last joy pos was zero
FORCE_SYMBOL $0131 last_joy_x
COMMENT $0133 load joystick 1 position X to A
FORCE_SYMBOL $0133 Vec_Joy_1_X
COMMENT $0135 store this joystick position
FORCE_SYMBOL $0135 last_joy_x
COMMENT $0137 no joystick input available
COMMENT $0139 joystick moved to left
COMMENT $013B test the old joystick position
COMMENT $013C was center
COMMENT $013E load old pos to B
FORCE_SYMBOL $013E frog_x_band
COMMENT $0140 is it at maximum right position?
FORCE_NO_SYMBOL $0140
COMMENT $0142 if so, do nothing
COMMENT_LINE $0144 the next instructions initialize a new sound
COMMENT_LINE $0144 load #1
COMMENT_LINE $0144 set this as marker for music start
COMMENT $0144 doesn'T destroy a register
FORCE_SYMBOL $0144 Vec_Music_Flag
COMMENT $0146 to do it that way
FORCE_SYMBOL $0146 Vec_Music_Flag
COMMENT $0148 load a music structure (piece_of_music)
FORCE_SYMBOL $0148 frog_jump
COMMENT $014B and store it to my own music active pointer
FORCE_SYMBOL $014B music_active
COMMENT_LINE $014D next a do_my_sound and than do sound must be called
COMMENT $014D load old pos to B
FORCE_SYMBOL $014D frog_x
COMMENT $014F increase position with speed faktor
FORCE_SYMBOL $014F FROG_X_JUMP
COMMENT $0151 and store new position
FORCE_SYMBOL $0151 frog_x
COMMENT $0153 for internal checking
FORCE_SYMBOL $0153 frog_x_band
FORCE_SYMBOL $0155 HEADING_RIGHT
COMMENT $0157 new heading == old heading?
FORCE_SYMBOL $0157 current_frog_heading
COMMENT $0159 if yes -> we are done
COMMENT $015B store it
FORCE_SYMBOL $015B current_frog_heading
COMMENT $015D load old pos to D
FORCE_SYMBOL $015D frog_y
COMMENT $015F korrekt the old offset y
FORCE_SYMBOL $015F current_frog_offset
COMMENT $0161 korrekt the old offset x
COMMENT $0163 korrekt the new offset y
FORCE_SYMBOL $0163 frogger_right_offset
COMMENT $0166 korrekt the new offset x
COMMENT $0169 store it back
FORCE_SYMBOL $0169 frog_pos
COMMENT $016B load the current offset
FORCE_SYMBOL $016B frogger_right_offset
COMMENT $016E and remember it
FORCE_SYMBOL $016E current_frog_offset
COMMENT $0170 use the vector list for frog
FORCE_SYMBOL $0170 frogger_right
COMMENT $0173 right pointing frog store it
FORCE_SYMBOL $0173 frog_pic
COMMENT $0175 and exit joystick position routine
COMMENT $0177 test the old joystick position
COMMENT $0178 was center
COMMENT $017A load old pos to B
FORCE_SYMBOL $017A frog_x_band
COMMENT $017C is it at maximum left position?
FORCE_NO_SYMBOL $017C
COMMENT $017E if so, do nothing
COMMENT_LINE $0180 the next instructions initialize a new sound
COMMENT_LINE $0180 load #1
COMMENT_LINE $0180 set this as marker for music start
COMMENT $0180 doesn'T destroy a register
FORCE_SYMBOL $0180 Vec_Music_Flag
COMMENT $0182 to do it that way
FORCE_SYMBOL $0182 Vec_Music_Flag
COMMENT $0184 load a music structure (piece_of_music)
FORCE_SYMBOL $0184 frog_jump
COMMENT $0187 and store it to my own music active pointer
FORCE_SYMBOL $0187 music_active
COMMENT_LINE $0189 next a do_my_sound and than do sound must be called
COMMENT $0189 load old pos to B
FORCE_SYMBOL $0189 frog_x
COMMENT $018B decrease position with speed faktor
FORCE_SYMBOL $018B FROG_X_JUMP
COMMENT $018D and store new position
FORCE_SYMBOL $018D frog_x
COMMENT $018F for internal checking
FORCE_SYMBOL $018F frog_x_band
COMMENT $0191 than the last?
FORCE_SYMBOL $0191 HEADING_LEFT
FORCE_SYMBOL $0193 current_frog_heading
COMMENT $0195 if yes -> we are done
COMMENT $0197 and store it
FORCE_SYMBOL $0197 current_frog_heading
COMMENT $0199 load old pos to D
FORCE_SYMBOL $0199 frog_y
COMMENT $019B korrekt the old offset y
FORCE_SYMBOL $019B current_frog_offset
COMMENT $019D korrekt the old offset x
COMMENT $019F korrekt the new offset y
FORCE_SYMBOL $019F frogger_left_offset
COMMENT $01A2 korrekt the new offset x
COMMENT $01A5 store it back
FORCE_SYMBOL $01A5 frog_pos
COMMENT $01A7 load the current offset
FORCE_SYMBOL $01A7 frogger_left_offset
COMMENT $01AA and store it
FORCE_SYMBOL $01AA current_frog_offset
COMMENT $01AC use the vector list for
FORCE_SYMBOL $01AC frogger_left
COMMENT $01AF left pointing frog
FORCE_SYMBOL $01AF frog_pic
COMMENT_LINE $01B1 than checking for changed y pos
COMMENT $01B1 load joystick 1 position X to A
FORCE_SYMBOL $01B1 Vec_Joy_1_Y
COMMENT $01B3 only jump if last joy pos was zero
FORCE_SYMBOL $01B3 last_joy_y
COMMENT $01B5 store this joystick position
FORCE_SYMBOL $01B5 last_joy_y
COMMENT $01B7 no joystick input available
COMMENT $01B9 joystick moved to down
COMMENT $01BB test the old joystick position
COMMENT $01BC was center
COMMENT $01BE load old pos to B
FORCE_SYMBOL $01BE frog_y_band
COMMENT $01C0 is it at maximum upper position?
FORCE_NO_SYMBOL $01C0
COMMENT $01C2 if so, do nothing
COMMENT_LINE $01C4 the next instructions initialize a new sound
COMMENT_LINE $01C4 load #1
COMMENT_LINE $01C4 set this as marker for music start
COMMENT $01C4 doesn'T destroy a register
FORCE_SYMBOL $01C4 Vec_Music_Flag
COMMENT $01C6 to do it that way
FORCE_SYMBOL $01C6 Vec_Music_Flag
COMMENT $01C8 load a music structure (piece_of_music)
FORCE_SYMBOL $01C8 frog_jump
COMMENT $01CB and store it to my own music active pointer
FORCE_SYMBOL $01CB music_active
COMMENT_LINE $01CD next a do_my_sound and than do sound must be called
COMMENT $01CD load old pos to B
FORCE_SYMBOL $01CD frog_y
FORCE_SYMBOL $01CF level_score
COMMENT $01D1 increase position with speed faktor
FORCE_SYMBOL $01D1 FROG_Y_JUMP
COMMENT $01D3 and store new position
FORCE_SYMBOL $01D3 frog_y
COMMENT $01D5 for internal checking
FORCE_SYMBOL $01D5 frog_y_band
COMMENT $01D7 than the last?
FORCE_SYMBOL $01D7 HEADING_UP
COMMENT $01D9 is the heading now the same
FORCE_SYMBOL $01D9 current_frog_heading
COMMENT $01DB if yes -> we are done
COMMENT $01DD store new heading
FORCE_SYMBOL $01DD current_frog_heading
COMMENT $01DF load old pos to D
FORCE_SYMBOL $01DF frog_x
COMMENT $01E1 korrekt the old offset y
FORCE_SYMBOL $01E1 current_frog_offset
COMMENT $01E3 korrekt the old offset x
COMMENT $01E5 korrekt the new offset y
FORCE_SYMBOL $01E5 frogger_up_offset
COMMENT $01E8 korrekt the new offset x
COMMENT $01EB store it back
FORCE_SYMBOL $01EB frog_pos
COMMENT $01ED remember the current offset
FORCE_SYMBOL $01ED frogger_up_offset
FORCE_SYMBOL $01F0 current_frog_offset
COMMENT $01F2 use the vector list for
FORCE_SYMBOL $01F2 frogger_up
COMMENT $01F5 up pointing frog, store it
FORCE_SYMBOL $01F5 frog_pic
COMMENT $01F7 and exit joystick position routine
COMMENT $01F9 test the old joystick position
COMMENT $01FA was center
COMMENT $01FC load old pos to B
FORCE_SYMBOL $01FC frog_y_band
COMMENT $01FE is it at maximum down position?
FORCE_NO_SYMBOL $01FE
COMMENT $0200 if so, do nothing
COMMENT_LINE $0202 the next instructions initialize a new sound
COMMENT_LINE $0202 load #1
COMMENT_LINE $0202 set this as marker for music start
COMMENT $0202 doesn'T destroy a register
FORCE_SYMBOL $0202 Vec_Music_Flag
COMMENT $0204 to do it that way
FORCE_SYMBOL $0204 Vec_Music_Flag
COMMENT $0206 load a music structure (piece_of_music)
FORCE_SYMBOL $0206 frog_jump
COMMENT $0209 and store it to my own music active pointer
FORCE_SYMBOL $0209 music_active
COMMENT_LINE $020B next a do_my_sound and than do sound must be called
COMMENT $020B load old pos to B
FORCE_SYMBOL $020B frog_y
FORCE_SYMBOL $020D level_score
COMMENT $020F decrease position with speed faktor
FORCE_SYMBOL $020F FROG_Y_JUMP
COMMENT $0211 and store new position
FORCE_SYMBOL $0211 frog_y
COMMENT $0213 for internal checking
FORCE_SYMBOL $0213 frog_y_band
COMMENT $0215 than the last?
FORCE_SYMBOL $0215 HEADING_DOWN
COMMENT $0217 is the heading now the same
FORCE_SYMBOL $0217 current_frog_heading
COMMENT $0219 if yes -> we are done
COMMENT $021B store new heading
FORCE_SYMBOL $021B current_frog_heading
COMMENT $021D load old pos to D
FORCE_SYMBOL $021D frog_x
COMMENT $021F korrekt the old offset y
FORCE_SYMBOL $021F current_frog_offset
COMMENT $0221 korrekt the old offset x
COMMENT $0223 korrekt the new offset y
FORCE_SYMBOL $0223 frogger_down_offset
COMMENT $0226 korrekt the new offset x
COMMENT $0229 store it back
FORCE_SYMBOL $0229 frog_pos
COMMENT $022B remember the current offset
FORCE_SYMBOL $022B frogger_down_offset
FORCE_SYMBOL $022E current_frog_offset
COMMENT $0230 use the vector list for
FORCE_SYMBOL $0230 frogger_down
COMMENT $0233 down pointing frog
FORCE_SYMBOL $0233 frog_pic
COMMENT_LINE $0235 now lets see if we hit a baddy or goody :-)
COMMENT_LINE $0235 note this stuff could be done in some dispatcher version
COMMENT_LINE $0235 in the sprite positioning loop
COMMENT_LINE $0235 look at the sprite section for what I mean by that :-)
COMMENT_LINE $0235 possibly another few hundred cycles could be saved!
COMMENT $0235 load band information
FORCE_SYMBOL $0235 frog_y_band
COMMENT $0237 a short jump saves a few cycles
COMMENT $0239 do a far jump for the home stuff
FORCE_SYMBOL $0239 home_jump_tried
COMMENT_LINE $023C first we must get the position of this band in the band list
COMMENT $023C one less, since homes, don't have a band
COMMENT $023D fixed to 16 byte,
COMMENT $023E so we just use some LSL instead
COMMENT $023F of MUL...
COMMENT $0242 load bandlist
FORCE_SYMBOL $0242 band_list
COMMENT $0245 and go to current band in bandlist
COMMENT $0247 get pointer to next object_list element in this band
COMMENT $0249 if empty we are done
COMMENT_LINE $024B ok, here we have an object_list entry we must check...
FORCE_NO_SYMBOL $024B
COMMENT_LINE $024E U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $024E X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $024E Y pointer to object structure, points to speed of the current object
COMMENT_LINE $024E now it gets tricky, we have to compare the position information,
COMMENT_LINE $024E which is in SCALE_FACTOR_GAME
COMMENT_LINE $024E with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $024E we dismiss the difference here and just think that the
COMMENT_LINE $024E value we find in 'length' in the object definition is
COMMENT_LINE $024E also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT_LINE $024E note: this minus stuff below, I removed it for some reason,
COMMENT_LINE $024E but doing it would actually be a good idea
COMMENT_LINE $024E for now all sprites have the leftmost position as starting vector
COMMENT_LINE $024E the minus sprites used to have the rightmost point as the starting vector
COMMENT_LINE $024E if frog had the opposite side as starting point from all other
COMMENT_LINE $024E vectors, the collision
COMMENT_LINE $024E checking could be done with just 1 compare instead of the now
COMMENT_LINE $024E two compares... but actually I was to lazy to change the
COMMENT_LINE $024E sprites...
COMMENT_LINE $024E but on a busy lane one could save up to 100 cycles with this!!!
COMMENT_LINE $024E ;SPECIAL_MINUS_LENGTH
COMMENT_LINE $024E TST     10,Y              ; test if sprite starts at the right (MINUS)
COMMENT_LINE $024E BMI     negative_flag_set ; side ... than a different testing must be done
COMMENT_LINE $024E perhaps some day I will move the frog position information out
COMMENT_LINE $024E of the loop... should save a few cycles...
COMMENT $024E load frog position
FORCE_SYMBOL $024E frog_x
COMMENT $0250 so that detection is not all THAT sharp
COMMENT $0251 so that detection is not all THAT sharp
COMMENT $0252 compare it to x postion of object
FORCE_NO_SYMBOL $0252
COMMENT $0254 if frog further left, jump
COMMENT $0256 subtract length of object
FORCE_NO_SYMBOL $0256
COMMENT $0258 subtract X position of object
FORCE_NO_SYMBOL $0258
COMMENT $025A if we are now on 'the left' we hit it
COMMENT $025C get pointer to next object_list element in this band
COMMENT $025E if empty we are done
COMMENT $0260 load band, if in lower half
FORCE_SYMBOL $0260 frog_y_band
COMMENT $0262 not collision is good
FORCE_NO_SYMBOL $0262
COMMENT $0264 otherwise we die (drowning)
COMMENT $0266 nothing happened, phuu! (bye)
COMMENT $0267 add the size of the frog to A (position of frog)
FORCE_SYMBOL $0267 current_frog_size_x
COMMENT $0269 compare it to x postion of object
FORCE_NO_SYMBOL $0269
COMMENT $026B still lower, than no collision
COMMENT_LINE $026D negative_flag_set:
COMMENT_LINE $026D LDA     frog_x             ; load frog position
COMMENT_LINE $026D INCA                       ; so that detection is not all THAT sharp
COMMENT_LINE $026D INCA                       ; so that detection is not all THAT sharp
COMMENT_LINE $026D CMPA    1,U                ; compare it to x postion of object
COMMENT_LINE $026D BGT     collision_loop     ; if frog further right, than no collision at all
COMMENT_LINE $026D nfrog_higher:                              ; otherwise frog is on the right
COMMENT_LINE $026D ADDA    3,Y                ; add the size of the object (Y+3=pointer to 'length')
COMMENT_LINE $026D ADDA    current_frog_size_x; add the size of the frog to A (position of frog)
COMMENT_LINE $026D CMPA    1,U                ; compare it to x postion of object
COMMENT_LINE $026D BGT     collision_detected ; if we are now on 'the left' we hit it
COMMENT_LINE $026D BRA     collision_loop     ; otherwise check next object
COMMENT $026D load band information
FORCE_SYMBOL $026D frog_y_band
COMMENT $026F if in upper half, than it is good
FORCE_NO_SYMBOL $026F
COMMENT $0271 than we are being transported
COMMENT $0273 SPECIAL...
FORCE_NO_SYMBOL $0273
COMMENT $0275 middle band is treated as a street
COMMENT $0277 if a snake is encountered
FORCE_SYMBOL $0277 SPECIAL_RIGHT_SNAKE
COMMENT $0279 jump if not
COMMENT $027B load the frog postion
FORCE_SYMBOL $027B frog_x
COMMENT $027D minus X position of object
FORCE_NO_SYMBOL $027D
COMMENT $027F hardcoded length of snake :-(
FORCE_NO_SYMBOL $027F
COMMENT $0281 otherwise go on
COMMENT $0283 otherwise die a snake death
COMMENT_LINE $0285 must be left snake than (or something is wrong)
COMMENT_LINE $0285 there are no special cars!
COMMENT $0285 load the frog postion
FORCE_SYMBOL $0285 frog_x
COMMENT $0287 minus X position of object
FORCE_NO_SYMBOL $0287
COMMENT $0289 hardcoded length of snake :-(
FORCE_NO_SYMBOL $0289
COMMENT $028B otherwise go on
COMMENT $028D if lower than bitten by snake
COMMENT_LINE $028F NOTE: A should allways be zero here
COMMENT $028F otherwise we die a DIE_CAR
FORCE_SYMBOL $028F DIE_CAR
COMMENT $0291 type of death
FORCE_SYMBOL $0291 kind_of_death
COMMENT $0293 decrease number of available frogs
FORCE_SYMBOL $0293 no_frogs
COMMENT $0296 do a frog_dead intermission, kind of death
FORCE_SYMBOL $0296 frog_dead
COMMENT_LINE $0299 is correctly set in 'kind_of_death'
COMMENT $0299 compare to '0'
COMMENT $029B the number of available frogs
FORCE_SYMBOL $029B no_frogs
COMMENT $029E if not zero yet, go on
COMMENT $02A0 clean up stack so that we can do a jump
COMMENT $02A2 do a game_lost intermission and return there
FORCE_SYMBOL $02A2 game_lost
COMMENT $02A5 init_new_frog_vars expects dp at c8
FORCE_SYMBOL $02A5 DP_to_C8
COMMENT $02A8 clear the frog variables
FORCE_SYMBOL $02A8 init_new_frog_vars
COMMENT $02AB die a DIE_OUT kind of
FORCE_SYMBOL $02AB DIE_OUT
COMMENT $02AE jump to die
COMMENT $02B0 die a DIE_DROWN kind of
FORCE_SYMBOL $02B0 DIE_DROWN
COMMENT $02B3 jump to die
COMMENT $02B5 die a DIE_CROCO kind of
FORCE_SYMBOL $02B5 DIE_CROCO
COMMENT $02B8 jump to die
COMMENT $02BA die a DIE_SNAKE kind of
FORCE_SYMBOL $02BA DIE_SNAKE
COMMENT $02BD jump to die
COMMENT $02BF lets test the special flag...
FORCE_NO_SYMBOL $02BF
COMMENT $02C1 if no special go on
COMMENT $02C3 test for left crocodile
FORCE_SYMBOL $02C3 SPECIAL_LEFT_CROCO
COMMENT $02C5 if not, jump
COMMENT $02C7 load the frog postion
FORCE_SYMBOL $02C7 frog_x
COMMENT $02C9 subtract X position of object
FORCE_NO_SYMBOL $02C9
COMMENT $02CB hardcoded length of croco :-(
FORCE_NO_SYMBOL $02CB
COMMENT $02CD not eaten by croco, nothing else can be here
COMMENT $02CF if lower frogger was eaten by crocodile
COMMENT $02D1 are we sitting on a right croco?
FORCE_SYMBOL $02D1 SPECIAL_RIGHT_CROCO
COMMENT $02D3 no? than jump
COMMENT $02D5 load the frog postion
FORCE_SYMBOL $02D5 frog_x
COMMENT $02D7 subtract X position of object
FORCE_NO_SYMBOL $02D7
COMMENT $02D9 hardcoded length of croco :-(
FORCE_NO_SYMBOL $02D9
COMMENT $02DB not eaten by croco, nothing else can be here
COMMENT $02DD if higher frogger was eaten by crocodile
COMMENT $02DF look if this is a dived turtle
FORCE_SYMBOL $02DF SPECIAL_DIVE_DOWN
COMMENT $02E1 if yes... drown
COMMENT_LINE $02E3 check if we 'capture' a girl
COMMENT $02E3 what's the girls status?
FORCE_SYMBOL $02E3 girl_status
COMMENT $02E5 is it displayed
FORCE_SYMBOL $02E5 IS_DISPLAYED
COMMENT $02E7 no? than jump
COMMENT $02E9 load log object address
FORCE_SYMBOL $02E9 girl_log_object
COMMENT $02EB address + 3 is stored, correct it
FORCE_NO_SYMBOL $02EB
COMMENT $02EE subtract the current object information
COMMENT $02F0 if not the same, go to no_girl_
COMMENT_LINE $02F2 check for collision
COMMENT $02F2 load girl x pos
COMMENT $02F4 subtract frog_x pos
FORCE_SYMBOL $02F4 frog_x
COMMENT $02F6 absolute it
COMMENT $02FD if not in the range of 10
FORCE_NO_SYMBOL $02FD
COMMENT $02FF jump to no girl
COMMENT $0301 IS CARRIED
FORCE_SYMBOL $0301 girl_status
COMMENT $0303 load bonus state
FORCE_SYMBOL $0303 frog_bonus
COMMENT $0305 add a girl bonus
FORCE_SYMBOL $0305 GIRL_BONUS
COMMENT $0307 store it
FORCE_SYMBOL $0307 frog_bonus
COMMENT $0309 and play a girl tune
COMMENT_LINE $0309 the next instructions initialize a new sound
COMMENT_LINE $0309 load #1
COMMENT_LINE $0309 set this as marker for music start
COMMENT $0309 doesn'T destroy a register
FORCE_SYMBOL $0309 Vec_Music_Flag
COMMENT $030B to do it that way
FORCE_SYMBOL $030B Vec_Music_Flag
COMMENT $030D load a music structure (piece_of_music)
FORCE_SYMBOL $030D girl_got_sound
COMMENT $0310 and store it to my own music active pointer
FORCE_SYMBOL $0310 music_active
COMMENT_LINE $0312 next a do_my_sound and than do sound must be called
COMMENT_LINE $0312 check if we hit a 'log' snake
COMMENT $0312 what's the snake's status?
FORCE_SYMBOL $0312 snake_status
COMMENT $0314 is it displayed
FORCE_SYMBOL $0314 IS_DISPLAYED
COMMENT $0316 no? than jump
COMMENT $0318 what band are we on now ?
FORCE_SYMBOL $0318 frog_y_band
COMMENT $031A compare with 'snake band'
FORCE_NO_SYMBOL $031A
COMMENT $031C if not our band... go on
COMMENT $031E which contains the log a objectlist address
FORCE_SYMBOL $031E snake_object
COMMENT $0320 load special
FORCE_NO_SYMBOL $0320
COMMENT $0322 if a snake is encountered
FORCE_SYMBOL $0322 SPECIAL_RIGHT_SNAKE
COMMENT $0324 jump if not
COMMENT $0326 load the frog postion
FORCE_SYMBOL $0326 frog_x
COMMENT $0328 minus X position of object
COMMENT $032A real hardcoded length
FORCE_NO_SYMBOL $032A
COMMENT $032C absolut it
COMMENT $0333 somewhere arround the snakes head?
FORCE_NO_SYMBOL $0333
COMMENT $0335 if higher, than not hit
COMMENT $0337 otherwise than bitten by snake
COMMENT $0339 now we look for left snake
FORCE_SYMBOL $0339 SPECIAL_LEFT_SNAKE
COMMENT $033B no?, than jump
COMMENT $033D load the frog postion
FORCE_SYMBOL $033D frog_x
COMMENT $033F minus X position of object
COMMENT $0341 absolut it
COMMENT $0348 somewhere arround the snakes head?
FORCE_NO_SYMBOL $0348
COMMENT $034A if lower than bitten by snake
COMMENT $034E load the frog postion
FORCE_SYMBOL $034E frog_x
COMMENT $0350 add the speed of the object
FORCE_NO_SYMBOL $0350
COMMENT $0352 and store it
FORCE_SYMBOL $0352 frog_x
COMMENT $0354 are we out of bounds right?
FORCE_SYMBOL $0354 FROG_RIGHT_OUT
COMMENT $0356 than dead
COMMENT $035A are we out of bounds left?
FORCE_SYMBOL $035A FROG_LEFT_OUT
COMMENT $035C than dead
COMMENT $0360 ok, for checking of 'normal' bounds
FORCE_SYMBOL $0360 tmp_band_offset
COMMENT_LINE $0362 we need to calculate the band_x
COMMENT_LINE $0362 coordinates, 'tmp_band_offset' is now
COMMENT_LINE $0362 used as a helper
COMMENT_LINE $0362 it counts from 0 to 9
COMMENT_LINE $0362 if below 0 band_x is decremented
COMMENT_LINE $0362 if 10 or high it is incremented...
COMMENT $0362 add the speed of the object
FORCE_NO_SYMBOL $0362
COMMENT $0364 if below zero, dec band_x 1
COMMENT $0366 if higher GRID_SIZE...
FORCE_SYMBOL $0366 GRID_SIZE_GAME
COMMENT $0368 ... add one to band_x
COMMENT $036A otherwise just store it back
FORCE_SYMBOL $036A tmp_band_offset
COMMENT $036D for internal checking
FORCE_SYMBOL $036D frog_x_band
COMMENT $036F make it modulo 10
FORCE_SYMBOL $036F GRID_SIZE_GAME
COMMENT $0371 store it
FORCE_SYMBOL $0371 tmp_band_offset
COMMENT $0373 otherwise bye for good
COMMENT $0374 for internal checking
FORCE_SYMBOL $0374 frog_x_band
COMMENT $0376 make it modulo 10
FORCE_SYMBOL $0376 GRID_SIZE_GAME
COMMENT $0378 store it
FORCE_SYMBOL $0378 tmp_band_offset
COMMENT $037A otherwise bye for good
COMMENT_LINE $037B ; here check for homereach must be put and new frog started
COMMENT $037B default death for this
FORCE_SYMBOL $037B DIE_WALL_JUMP
COMMENT $037E band is DIE_WALL_JUMP
FORCE_SYMBOL $037E kind_of_death
COMMENT $0380 load frog position
FORCE_SYMBOL $0380 frog_x
COMMENT $0382 are we left of home
FORCE_SYMBOL $0382 HOME1_POS_LEFT
COMMENT $0384 yep, than die DIE_WALL_JUMP
COMMENT $0388 or are we right, than
FORCE_SYMBOL $0388 HOME1_POS_RIGHT
COMMENT $038A goto next test
COMMENT $038C load home address to X
FORCE_SYMBOL $038C home_entry_1
COMMENT $038F load home object to U
FORCE_SYMBOL $038F home_entry_1
COMMENT $0392 if none, than OK
COMMENT $0394 if there is something,... further checking
COMMENT $0396 are we left of home
FORCE_SYMBOL $0396 HOME2_POS_LEFT
COMMENT $0398 yep, than die DIE_WALL_JUMP
COMMENT $039C or are we right, than
FORCE_SYMBOL $039C HOME2_POS_RIGHT
COMMENT $039E goto next test
COMMENT $03A0 load home address to X
FORCE_SYMBOL $03A0 home_entry_2
COMMENT $03A3 load home object to U
FORCE_SYMBOL $03A3 home_entry_2
COMMENT $03A6 if none, than OK
COMMENT $03A8 if there is something,... further checking
COMMENT $03AA are we left of home
FORCE_SYMBOL $03AA HOME3_POS_LEFT
COMMENT $03AC yep, than die DIE_WALL_JUMP
COMMENT $03B0 or are we right, than
FORCE_SYMBOL $03B0 HOME3_POS_RIGHT
COMMENT $03B2 goto next test
COMMENT $03B4 load home address to X
FORCE_SYMBOL $03B4 home_entry_3
COMMENT $03B7 load home object to U
FORCE_SYMBOL $03B7 home_entry_3
COMMENT $03BA if none, than OK
COMMENT $03BC if there is something,... further checking
COMMENT $03BE are we left of home
FORCE_SYMBOL $03BE HOME4_POS_LEFT
COMMENT $03C0 yep, than die DIE_WALL_JUMP
COMMENT $03C4 or are we right, than
FORCE_SYMBOL $03C4 HOME4_POS_RIGHT
COMMENT $03C6 goto next test
COMMENT $03C8 load home address to X
FORCE_SYMBOL $03C8 home_entry_4
COMMENT $03CB load home object to U
FORCE_SYMBOL $03CB home_entry_4
COMMENT $03CE if none, than OK
COMMENT $03D0 if there is something,... further checking
COMMENT $03D2 are we left of home
FORCE_SYMBOL $03D2 HOME5_POS_LEFT
COMMENT $03D4 yep, than die DIE_WALL_JUMP
COMMENT $03D8 or are we right, than
FORCE_SYMBOL $03D8 HOME5_POS_RIGHT
COMMENT $03DA goto die DIE_WALL_JUMP
COMMENT $03DE load home address to X
FORCE_SYMBOL $03DE home_entry_5
COMMENT $03E1 load home object to U
FORCE_SYMBOL $03E1 home_entry_5
COMMENT $03E4 if none, than OK
COMMENT_LINE $03E6 X pointer to home object position
COMMENT_LINE $03E6 U pointer to home object
COMMENT_LINE $03E6 here test ob frog, croco or fly in home
COMMENT $03E6 load the object special to A
FORCE_NO_SYMBOL $03E6
COMMENT $03E8 check if fly...
FORCE_SYMBOL $03E8 SPECIAL_HOME_FLY
COMMENT $03EA no?. bother, than dead :-(
COMMENT_LINE $03EC yep, this is a fly object, reinitiate fly...
COMMENT $03EC reload the fly timer
FORCE_SYMBOL $03EC fly_timer_start
COMMENT $03EE and store it
FORCE_SYMBOL $03EE fly_timer
COMMENT $03F0 is WAITING
FORCE_SYMBOL $03F0 fly_status
COMMENT $03F2 load fly bonus for extro
FORCE_SYMBOL $03F2 FLY_BONUS
COMMENT $03F4 add old bonus to it
FORCE_SYMBOL $03F4 frog_bonus
COMMENT $03F6 and store it back...
FORCE_SYMBOL $03F6 frog_bonus
COMMENT $03F8 and do 'frog reached home'
COMMENT $03FA is only half a crocodile seen?
FORCE_SYMBOL $03FA SPECIAL_CROCO_HALF
COMMENT $03FC no, than jump
COMMENT $03FE reload the croco timer
FORCE_SYMBOL $03FE croco_timer_start
COMMENT $0400 and store it
FORCE_SYMBOL $0400 croco_timer
COMMENT $0402 is WAITING
FORCE_SYMBOL $0402 croco_status
COMMENT $0404 and do 'frog reached home', phhht
COMMENT $0406 if a full crocodile is in house
FORCE_SYMBOL $0406 SPECIAL_CROCO_FULL
COMMENT $0408 no?, than jump
COMMENT $040A otherwise frogger is dead
COMMENT $040D default death
FORCE_SYMBOL $040D DIE_HOME_FULL
COMMENT $0410 frogger jumped to occupied home
COMMENT_LINE $0413 X pointer to home object position
COMMENT_LINE $0413 0
COMMENT $0413 load object for frog is in home
FORCE_SYMBOL $0413 frog1a_in_home_object
COMMENT $0416 and set it as new home object
FORCE_NO_SYMBOL $0416
COMMENT $0418 load animation counter of object
COMMENT $041B and store it to object in RAM
FORCE_NO_SYMBOL $041B
COMMENT $041D decrease home counter
FORCE_SYMBOL $041D in_home_counter
COMMENT $041F if not zero, than not all homes are full
COMMENT $0421 1 level plus
FORCE_NO_SYMBOL $0421
COMMENT $0423 load level address
FORCE_SYMBOL $0423 no_level_string
COMMENT $0426 must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $0426 Vec_Misc_Count
COMMENT $0428 add to score (level)
FORCE_SYMBOL $0428 Add_Score_a
COMMENT $042B do a frog in home intermission
FORCE_SYMBOL $042B frog_in_home
COMMENT $042E do a level done intermission
FORCE_SYMBOL $042E level_complete
COMMENT $0431 increase level counter
FORCE_SYMBOL $0431 game_level
COMMENT $0434 load number of none level
COMMENT $0436 compare to game_level
FORCE_SYMBOL $0436 game_level
COMMENT $0439 if equal a roll_over has occured
COMMENT $043B clear level (start at 0 again)
FORCE_SYMBOL $043B game_level
COMMENT $043E and do a roll_over intermission
FORCE_SYMBOL $043E roll_over_intermission
COMMENT $0441 for set up level...
FORCE_SYMBOL $0441 DP_to_C8
COMMENT $0444 set up a new level
FORCE_SYMBOL $0444 setup_level
COMMENT $0447 clear the frog variables
FORCE_SYMBOL $0447 init_new_frog_vars
COMMENT $044A do a frog in home intermission
FORCE_SYMBOL $044A frog_in_home
COMMENT $044D clear the frog variables
FORCE_SYMBOL $044D init_new_frog_vars
COMMENT_LINE $0450 ***************************************************************************
COMMENT_LINE $0450 belongs to draw object below
COMMENT_LINE $0450 is here because of short branch...
COMMENT $0450 B timer 1 bit test
FORCE_NO_SYMBOL $0450
COMMENT $0452 done with move?
FORCE_SYMBOL $0452 VIA_int_flags
COMMENT $0455 no, than go on waiting
COMMENT $0457 die a DIE_TIME kind of
FORCE_SYMBOL $0457 DIE_TIME
COMMENT $045A type of death
FORCE_SYMBOL $045A kind_of_death
COMMENT $045C decrease number of available frogs
FORCE_SYMBOL $045C no_frogs
COMMENT $045F do a frog_dead intermission, kind of death
FORCE_SYMBOL $045F frog_dead
COMMENT_LINE $0462 is correctly set in 'kind_of_death'
COMMENT $0462 compare to '0'
FORCE_SYMBOL $0464 no_frogs
COMMENT $0467 if not zero yet, go on
COMMENT $0469 clean up stack so that we can do a jump
COMMENT $046B otherwise do a game_lost intermission
FORCE_SYMBOL $046B game_lost
FORCE_SYMBOL $046E DP_to_C8
FORCE_NO_SYMBOL $0471
COMMENT $0475 pretty for optimizing to use a makro :-)
COMMENT $0475 clear the frog variables
FORCE_SYMBOL $0475 init_new_frog_vars
FORCE_SYMBOL $0478 DP_to_D0
COMMENT_LINE $047C ***************************************************************************
COMMENT_LINE $047C exits with dp to d0
COMMENT_LINE $047C nothing is returned
FORCE_NO_SYMBOL $047C
COMMENT $0480 pretty for optimizing to use a makro :-)
COMMENT_LINE $0480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0480 independent code section
COMMENT_LINE $0480 draw frog
COMMENT $0480 frog is drawn in full intensity
FORCE_NO_SYMBOL $0480
COMMENT $0482 Store intensity in D/A
FORCE_SYMBOL $0482 VIA_port_a
COMMENT $0484 Save intensity in $C827
FORCE_SYMBOL $0484 Vec_Brightness
COMMENT $0487 mux disabled channel 2
FORCE_NO_SYMBOL $0487
FORCE_SYMBOL $048A VIA_port_b
COMMENT $048C mux enabled channel 2
FORCE_SYMBOL $048C VIA_port_b
COMMENT $048E do it again just because ?
FORCE_SYMBOL $048E VIA_port_b
FORCE_NO_SYMBOL $0490
COMMENT $0492 turn off mux
FORCE_SYMBOL $0492 VIA_port_b
COMMENT $0494 set game scaling
FORCE_SYMBOL $0494 SCALE_FACTOR_GAME
COMMENT $0496 move to time 1 lo, this means scaling
FORCE_SYMBOL $0496 VIA_t1_cnt_lo
COMMENT $0498 load current frog position to D
FORCE_SYMBOL $0498 frog_pos
COMMENT_LINE $049B following passage is a move_to_d derivat
COMMENT $049B Store Y in D/A register
FORCE_SYMBOL $049B VIA_port_a
COMMENT $049D Blank low, zero high?
FORCE_NO_SYMBOL $049D
FORCE_SYMBOL $049F VIA_cntl
COMMENT $04A2 Enable mux
FORCE_SYMBOL $04A2 VIA_port_b
COMMENT $04A4 Disable mux
FORCE_SYMBOL $04A4 VIA_port_b
COMMENT $04A6 Store X in D/A register
FORCE_SYMBOL $04A6 VIA_port_a
COMMENT $04A8 enable timer
FORCE_SYMBOL $04A8 VIA_t1_cnt_hi
COMMENT_LINE $04AA pause stuff start!
COMMENT_LINE $04AA this is stuff which takes time,
COMMENT_LINE $04AA but can be done anywhere, so we do it here
COMMENT_LINE $04AA in a 'pause', our pause lasts till GAME_SCALE ($91)
COMMENT_LINE $04AA timer is count down, that is our scale - timer...
COMMENT_LINE $04AA the below code looks like a bit
COMMENT_LINE $04AA overdone, but you might think about the possibilities,
COMMENT_LINE $04AA each of the about 20-30 sprite use the GAME_SCALE timer,
COMMENT_LINE $04AA if one wrote a dispatcher type for the time wasted in these sprite
COMMENT_LINE $04AA positioning, one could calculate whole 3d worlds!!!
COMMENT_LINE $04AA 20-30 * $91 timer cycles to waste!... (plus a bit of overhead)!!!
COMMENT_LINE $04AA furthermore, if we actually take longer than the $91 cycles
COMMENT_LINE $04AA it doesn't matter!
COMMENT_LINE $04AA since integration is halted by the timer countdown
COMMENT_LINE $04AA ( well after a few 1000 cycles it DOES matter)
COMMENT_LINE $04AA note:
COMMENT_LINE $04AA if levels are done well only a small fraction of this pause will be done
COMMENT_LINE $04AA each round
FORCE_SYMBOL $04AA DP_to_C8
COMMENT $04AD load new vector (length was cut by timer :-))
COMMENT $04AF if timer is zero, we are dead
COMMENT_LINE $04B1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $04B1 let us look if we need to initiate/destroy a home object
COMMENT_LINE $04B1 that is fly or crocodile
COMMENT_LINE $04B1 independent code section
COMMENT_LINE $04B1 do timer stuff for fly
COMMENT_LINE $04B1 insert/remove fly
COMMENT $04B1 is there any fly stuff at all?
FORCE_SYMBOL $04B1 fly_status
COMMENT $04B3 no?, than go on
COMMENT $04B5 is zero?
FORCE_SYMBOL $04B5 fly_timer
COMMENT $04B7 if not zero, do nothing
COMMENT $04B9 is there any fly stuff at all?
FORCE_SYMBOL $04B9 fly_status
COMMENT $04BB fly is waiting to be displayed
FORCE_SYMBOL $04BB IS_WAITING
COMMENT $04BD no?, than it is allready displayed
COMMENT_LINE $04BF if zero... initiate new fly
COMMENT $04BF get a random number
FORCE_SYMBOL $04BF Random
COMMENT $04C2 only the lower three bits
FORCE_NO_SYMBOL $04C2
COMMENT $04C4 not higher than 4
FORCE_NO_SYMBOL $04C4
COMMENT $04C6 if lower than ok
COMMENT $04C8 otherwise take only half of it
COMMENT $04C9 must multiply by 5, length of home object
FORCE_NO_SYMBOL $04C9
COMMENT $04CB times 5
COMMENT $04CC remember start address if all homes are occupied
FORCE_SYMBOL $04CC tmp1
COMMENT $04CE load the address to U, start of list of homes
FORCE_SYMBOL $04CE home_objects
COMMENT $04D1 is this home empty (only checking upper byte, should be ok)
COMMENT $04D3 if yes, than go on
COMMENT $04D5 otherwise, compare to 20 (right most home)
FORCE_NO_SYMBOL $04D5
COMMENT $04D7 not last home?, than go on
COMMENT $04D9 store -5, so that +5 is 0, leftmost home
COMMENT $04DB check next home (home object is 5 bytes long)
FORCE_NO_SYMBOL $04DB
COMMENT $04DD checked all homes yet
FORCE_SYMBOL $04DD tmp1
COMMENT $04DF yes, than no home is free
COMMENT $04E1 and check again if empty...
COMMENT $04E3 remember offset to home for removal
FORCE_SYMBOL $04E3 fly_house
COMMENT $04E5 get address of U and add the offset
FORCE_SYMBOL $04E5 home_objects
COMMENT $04E8 in U address of 'random' home
COMMENT $04EA load fly object
FORCE_SYMBOL $04EA fly1a_object
COMMENT $04ED store to the calculated home address
FORCE_NO_SYMBOL $04ED
COMMENT $04EF load animation counter of object
COMMENT $04F2 and store it to object in RAM
FORCE_NO_SYMBOL $04F2
COMMENT $04F4 IS DISPLAYED
FORCE_SYMBOL $04F4 fly_status
COMMENT $04F6 and finnished with fly stuff...
COMMENT_LINE $04F8 fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $04F8 now destroy fly
COMMENT $04F8 load current fly offset
FORCE_SYMBOL $04F8 fly_house
COMMENT $04FA get address of U and add the offset
FORCE_SYMBOL $04FA home_objects
COMMENT $04FD in U address of 'random' home
FORCE_NO_SYMBOL $04FF
FORCE_NO_SYMBOL $0502
COMMENT $0504 is WAITING
FORCE_SYMBOL $0504 fly_status
COMMENT $0506 reload the fly timer
FORCE_SYMBOL $0506 fly_timer_start
COMMENT $0508 and store it
FORCE_SYMBOL $0508 fly_timer
COMMENT_LINE $050A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $050A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $050A independent code section
COMMENT_LINE $050A do timer stuff for croco (home)
COMMENT_LINE $050A insert/remove croco
COMMENT $050A is there any croco stuff at all?
FORCE_SYMBOL $050A croco_status
COMMENT $050C no?, than go on
COMMENT $050E store it back
FORCE_SYMBOL $050E croco_timer
COMMENT $0510 if not zero, do nothing
COMMENT $0512 is there any croco stuff at all?
FORCE_SYMBOL $0512 croco_status
COMMENT $0514 croco is waiting to be displayed
FORCE_SYMBOL $0514 IS_WAITING
COMMENT $0516 no?, than it is allready displayed
COMMENT_LINE $0518 if zero... initiate new croco
COMMENT $0518 get a random number
FORCE_SYMBOL $0518 Random
COMMENT $051B only the lower three bits
FORCE_NO_SYMBOL $051B
COMMENT $051D not higher than 4
FORCE_NO_SYMBOL $051D
COMMENT $051F if lower than ok
COMMENT $0521 otherwise take only half of it
COMMENT $0522 must multiply by 5, length of home object
FORCE_NO_SYMBOL $0522
COMMENT $0524 times 5
COMMENT $0525 remember start address if all homes are occupied
FORCE_SYMBOL $0525 tmp1
COMMENT $0527 load the address to U, start of list of homes
FORCE_SYMBOL $0527 home_objects
COMMENT $052A is this home empty (only checking upper byte, should be ok)
COMMENT $052C if yes, than go on
COMMENT $052E otherwise, compate to 20 (right most home)
FORCE_NO_SYMBOL $052E
COMMENT $0530 not last home?, than go on
COMMENT $0532 store -5, so that +5 is 0, leftmost home
COMMENT $0534 check next home (home object is 5 bytes long)
FORCE_NO_SYMBOL $0534
COMMENT $0536 checked all homes yet
FORCE_SYMBOL $0536 tmp1
COMMENT $0538 yes, than no home is free
COMMENT $053A and check again if empty...
COMMENT $053C remember offset to home for removal
FORCE_SYMBOL $053C croco_house
COMMENT $053E get address of U and add the offset
FORCE_SYMBOL $053E home_objects
COMMENT $0541 in U address of 'random' home
COMMENT $0543 load croco object
FORCE_SYMBOL $0543 crocoh1a_object
COMMENT $0546 store to the calculated home address
FORCE_NO_SYMBOL $0546
COMMENT $0548 load animation counter of object
COMMENT $054B and store it to object in RAM
FORCE_NO_SYMBOL $054B
COMMENT $054D is DISPLAYED
FORCE_SYMBOL $054D croco_status
COMMENT $054F and finnished with croco stuff...
COMMENT_LINE $0551 croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $0551 now destroy croco
COMMENT $0551 load current croco offset
FORCE_SYMBOL $0551 croco_house
COMMENT $0553 get address of U and add the offset
FORCE_SYMBOL $0553 home_objects
COMMENT $0556 in U address of 'random' home
FORCE_NO_SYMBOL $0558
FORCE_NO_SYMBOL $055B
COMMENT $055D IS WAITING
FORCE_SYMBOL $055D croco_status
COMMENT $055F reload the croco timer
FORCE_SYMBOL $055F croco_timer_start
COMMENT $0561 and store it
FORCE_SYMBOL $0561 croco_timer
COMMENT_LINE $0563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0563 independent code section
COMMENT_LINE $0563 do timer stuff for diving turtles
COMMENT_LINE $0563 initiate alternate turtle sprites on
COMMENT_LINE $0563 timer...
COMMENT_LINE $0563 clean up stuff
COMMENT_LINE $0563 NOTE: turtles really suck
COMMENT_LINE $0563 sometimes turtles are torn appart due to
COMMENT_LINE $0563 huge sprite offsets
COMMENT_LINE $0563 higher than the (now used 5 maximum offset)
COMMENT $0563 should the turtles dive?
FORCE_SYMBOL $0563 dive_timer
COMMENT $0565 if not zero, don't do anything
COMMENT $0567 first let us restore the timer
FORCE_SYMBOL $0567 dive_timer_start
COMMENT $0569 store it HI
FORCE_SYMBOL $0569 dive_timer
COMMENT_LINE $056B go thru all sprites
COMMENT_LINE $056B see if diving special is there,
COMMENT_LINE $056B than change sprites to diving sprites
FORCE_SYMBOL $056B t_list
COMMENT $0573 load object address
FORCE_NO_SYMBOL $0573
COMMENT_LINE $0575 U pointer to object
COMMENT_LINE $0575 X pointer to this object list
COMMENT_LINE $0575 Y pointer to t_list
COMMENT_LINE $0575 from here we change the actual object in the object list
COMMENT_LINE $0575 these special objects (for now only turtles)
COMMENT_LINE $0575 have an extra entry in their object describtion
COMMENT_LINE $0575 this is the 'alternate' object describtion address
COMMENT_LINE $0575 this will be loaded and placed in the object list
COMMENT_LINE $0575 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0575 which allways switches back and forth between diving
COMMENT_LINE $0575 and non diving turtles (as we defined the object
COMMENT_LINE $0575 information as this)
COMMENT $0575 faster than a PSHS
FORCE_SYMBOL $0575 tmp1
COMMENT $0578 load alternate object to Y
FORCE_NO_SYMBOL $0578
COMMENT $057B load old sprite offsets
FORCE_NO_SYMBOL $057B
COMMENT $057D negate them (A)
COMMENT $057E negate them (B)
COMMENT $057F add y position to old sprite offset y
FORCE_NO_SYMBOL $057F
COMMENT $0581 add x position to old sprite offset x
FORCE_NO_SYMBOL $0581
COMMENT $0583 add new sprite offset y
FORCE_NO_SYMBOL $0583
COMMENT $0585 add new sprite offset x
FORCE_NO_SYMBOL $0585
COMMENT $0587 and store the corrected position
FORCE_NO_SYMBOL $0587
COMMENT $0589 load new animation counter start
FORCE_NO_SYMBOL $0589
COMMENT $058B and set it in object list
FORCE_NO_SYMBOL $058B
COMMENT $058D store new object definition to object list
FORCE_NO_SYMBOL $058D
COMMENT $0590 faster than a PULS
FORCE_SYMBOL $0590 tmp1
COMMENT $0593 and go on
COMMENT_LINE $0595 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0595 otter_status
FORCE_SYMBOL $0597 IS_WAITING
COMMENT $0599 if not zero, do nothing
FORCE_SYMBOL $059B otter_timer
COMMENT $059D if not zero, do nothing
COMMENT_LINE $059F if zero... initiate new otter
COMMENT $059F get a random number
FORCE_SYMBOL $059F Random
COMMENT $05A2 random in range of 0 - 15
FORCE_NO_SYMBOL $05A2
COMMENT $05A4 remember for lane offset
FORCE_SYMBOL $05A4 tmp1
COMMENT $05A6 only the lower three bits
FORCE_NO_SYMBOL $05A6
COMMENT $05A8 not higher than 5
FORCE_NO_SYMBOL $05A8
COMMENT $05AA if lower than ok
COMMENT $05AC otherwise take only half of it
COMMENT $05AD this is the band we are on now
FORCE_SYMBOL $05AD otter_band
COMMENT $05AF multiply by band structure width
COMMENT $05B0 which is 16 bytes
COMMENT $05B3 copy A to B
COMMENT $05B5 SEX B :-) but without sign
COMMENT $05B6 add address start of band list
FORCE_SYMBOL $05B6 band_list
COMMENT_LINE $05B9 now we try to get a pseudo random offset of objects within
COMMENT_LINE $05B9 this lane, we use the same random number as for lane determination
COMMENT_LINE $05B9 but this time ranging from 0 - 15, see above
COMMENT $05B9 at least 1 in tmp1 so we don't loop to 255
FORCE_SYMBOL $05B9 tmp1
COMMENT_LINE $05BB start address of this bandlist is in D (and remains there untouched...)
COMMENT $05BB copy start of lane list to X
COMMENT $05BD load object list address to U
COMMENT $05BF if zero than we have gone past the last object
COMMENT_LINE $05C1 and jump to reinit X
COMMENT $05C1 otherwise we decrement our random value by 1
FORCE_SYMBOL $05C1 tmp1
COMMENT $05C3 if not zero, get the next object list member
COMMENT $05C5 store list object address of
FORCE_SYMBOL $05C5 otter_log_pre
COMMENT_LINE $05C7 'log' pre otter
COMMENT $05C7 load next list position
FORCE_NO_SYMBOL $05C7
COMMENT $05C9 if not zero jump
COMMENT $05CB if zero we have to use the first object in this band
COMMENT $05CD even if it is the same... as the pre object
FORCE_NO_SYMBOL $05CD
COMMENT $05CF store list object address of
FORCE_SYMBOL $05CF otter_log_past
COMMENT_LINE $05D1 'log' past otter
COMMENT $05D1 load object address of first otter animation to X
FORCE_SYMBOL $05D1 otter1a_object
COMMENT $05D4 load pre otter object list address
FORCE_SYMBOL $05D4 otter_log_pre
COMMENT $05D6 position of pre list object
FORCE_NO_SYMBOL $05D6
COMMENT $05D8 pre object
FORCE_NO_SYMBOL $05D8
COMMENT $05DA modify for y offset of pre object
FORCE_NO_SYMBOL $05DA
COMMENT $05DC modify for x offset of pre object
FORCE_NO_SYMBOL $05DC
COMMENT $05DE add length of pre object
FORCE_NO_SYMBOL $05DE
COMMENT $05E0 modify y position with otter offset
FORCE_NO_SYMBOL $05E0
COMMENT $05E2 modify x position with otter offset
FORCE_NO_SYMBOL $05E2
COMMENT $05E4 add another 3 just for good measure...
FORCE_NO_SYMBOL $05E4
COMMENT $05E6 and store this as the new otter position
FORCE_SYMBOL $05E6 otter_pos
COMMENT $05E8 are we to far to the right?
FORCE_NO_SYMBOL $05E8
COMMENT $05EA if so, don't use this otter
COMMENT $05EC are we to far to the left?
COMMENT $05EE if so don't use this otter either
COMMENT_LINE $05F0 the above is sort of needed, since I don't want to check
COMMENT_LINE $05F0 all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $05F0 that otter is quasi outside of the main screen and the
COMMENT_LINE $05F0 log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $05F0 befor the otter has a chance to realize it is allready near
COMMENT_LINE $05F0 thus the otter might stay there forever...
COMMENT $05F0 load speed of pre object
FORCE_NO_SYMBOL $05F0
COMMENT $05F2 otter allways + 1
COMMENT_LINE $05F3 my otter allways moves from left to right
COMMENT_LINE $05F3 or standstill
COMMENT $05F3 store the new speed
FORCE_SYMBOL $05F3 otter_speed
COMMENT $05F5 store otter anim A 1 object as the relevant otter object
FORCE_SYMBOL $05F5 otter_object
COMMENT $05F7 reset animation counter for otter
FORCE_NO_SYMBOL $05F7
COMMENT $05F9 and store it
FORCE_SYMBOL $05F9 otter_anim_counter
COMMENT_LINE $05FB now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $05FB stupid 'log' object, like a midway turtle or a
COMMENT_LINE $05FB middle 'big' log...
COMMENT $05FB load object list address of object past otter
FORCE_SYMBOL $05FB otter_log_past
COMMENT $05FD and load the position of otter now
COMMENT $05FF subtract these two
FORCE_NO_SYMBOL $05FF
COMMENT $0601 absolute that
COMMENT $0608 look if they are really near each other
FORCE_NO_SYMBOL $0608
COMMENT_LINE $060A 15 'includes' length of otter, hardcoded :-(
COMMENT $060A if not near, go to end, otherwise destroy otter
COMMENT $060C reload the otter timer
FORCE_SYMBOL $060C otter_timer_start
COMMENT $060E and store it
FORCE_SYMBOL $060E otter_timer
COMMENT $0610 and go to done
COMMENT $0612 is displayed
FORCE_SYMBOL $0612 otter_status
COMMENT_LINE $0614 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0614
COMMENT $0618 pretty for optimizing to use a makro :-)
COMMENT_LINE $0618 finally, are done with our in 'pause' move stuff!
COMMENT $0618 load current frog sprite
FORCE_SYMBOL $0618 frog_pic
COMMENT $061B A scale factor, B timer 1 bit test
COMMENT $061E done with move?
FORCE_SYMBOL $061E VIA_int_flags
COMMENT $0620 no, than go on waiting
COMMENT_LINE $0622 done with move_to_d
COMMENT $0622 move to time 1 lo, this means scaling
FORCE_SYMBOL $0622 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0626
COMMENT $062A Send Y to A/D
FORCE_SYMBOL $062A VIA_port_a
FORCE_SYMBOL $062C VIA_port_b
COMMENT $0630 Disable mux
FORCE_SYMBOL $0630 VIA_port_b
COMMENT $0632 Send X to A/D
FORCE_SYMBOL $0632 VIA_port_a
COMMENT $0634 Put pattern in shift register
FORCE_SYMBOL $0634 VIA_shift_reg
COMMENT $0636 enable timer 1
FORCE_SYMBOL $0636 VIA_t1_cnt_hi
COMMENT $0638 6
COMMENT $063A 7
FORCE_NO_SYMBOL $063A
COMMENT $063D 3 Go back for more points
COMMENT $063F Send Y to A/D
FORCE_SYMBOL $063F VIA_port_a
FORCE_SYMBOL $0641 VIA_shift_reg
FORCE_SYMBOL $0643 VIA_port_b
COMMENT $0647 Disable mux
FORCE_SYMBOL $0647 VIA_port_b
COMMENT $0649 Send X to A/D
FORCE_SYMBOL $0649 VIA_port_a
COMMENT $064B Put pattern in shift register
FORCE_SYMBOL $064B VIA_shift_reg
COMMENT $064D enable timer 1
FORCE_SYMBOL $064D VIA_t1_cnt_hi
COMMENT $064F 6
COMMENT $0651 7
FORCE_NO_SYMBOL $0651
COMMENT $0654 3 Go back for more points
COMMENT_LINE $0656 NOP                     ; 2
COMMENT_LINE $0656 STA     <VIA_shift_reg
COMMENT_LINE $0656 the above makro leaves with A set to 0!
COMMENT_LINE $0656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0656 here is the entry point for the timer count down
COMMENT_LINE $0656 when frog reaches home...
COMMENT_LINE $0656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0656 independent code section
COMMENT_LINE $0656 draw home, middway and timer line
COMMENT $0656 this and the overnext instruction, zero the beam!
FORCE_NO_SYMBOL $0656
COMMENT $0658 from my sprite draw
FORCE_SYMBOL $0658 VIA_shift_reg
COMMENT $065A /BLANK low and /ZERO low
FORCE_SYMBOL $065A VIA_cntl
COMMENT $065C all following sprites have intensity of $60
FORCE_NO_SYMBOL $065C
COMMENT $065E Store intensity in D/A
FORCE_SYMBOL $065E VIA_port_a
COMMENT $0660 Save intensity in $C827
FORCE_SYMBOL $0660 Vec_Brightness
COMMENT $0663 mux disabled channel 2
FORCE_NO_SYMBOL $0663
FORCE_SYMBOL $0666 VIA_port_b
COMMENT $0668 mux enabled channel 2
FORCE_SYMBOL $0668 VIA_port_b
COMMENT $066A do it again just because ?
FORCE_SYMBOL $066A VIA_port_b
FORCE_NO_SYMBOL $066C
COMMENT $066E turn off mux
FORCE_SYMBOL $066E VIA_port_b
COMMENT_LINE $0670 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT $0670 clear A, and scale to B
COMMENT $0673 patched for speed... /2
COMMENT $0673 move to time 1 lo, this means scaling
FORCE_SYMBOL $0673 VIA_t1_cnt_lo
COMMENT_LINE $0675 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0675 still 0
COMMENT $0675 B=Y pos
COMMENT $0677 Store Y in D/A register
FORCE_SYMBOL $0677 VIA_port_a
COMMENT $0679 Enable mux
FORCE_SYMBOL $0679 VIA_port_b
COMMENT $067B Blank low, zero high?
FORCE_NO_SYMBOL $067B
FORCE_SYMBOL $067D VIA_cntl
COMMENT $067F Disable mux
FORCE_SYMBOL $067F VIA_port_b
COMMENT $0681 X pos relative to start
COMMENT $0683 Store X in D/A register
FORCE_SYMBOL $0683 VIA_port_a
COMMENT $0685 enable timer
FORCE_SYMBOL $0685 VIA_t1_cnt_hi
COMMENT $0687 address of home vector list
FORCE_SYMBOL $0687 homes
COMMENT_LINE $068A this is stuff which takes time,
COMMENT_LINE $068A but can be done anywhere, so we do it here
COMMENT_LINE $068A in a 'pause'
COMMENT $068A test if we are in death timer loop
COMMENT $068D frog is allready dead!
COMMENT $068F load fly timer
FORCE_SYMBOL $068F fly_timer
COMMENT $0692 decrease it
FORCE_NO_SYMBOL $0692
COMMENT $0695 store it back
FORCE_SYMBOL $0695 fly_timer
COMMENT $0698 load croco timer
FORCE_SYMBOL $0698 croco_timer
COMMENT $069B decrease it
FORCE_NO_SYMBOL $069B
COMMENT $069E store it back
FORCE_SYMBOL $069E croco_timer
COMMENT $06A1 load the timer value
FORCE_SYMBOL $06A1 dive_timer
COMMENT $06A4 if $ff, than no turtle
FORCE_NO_SYMBOL $06A4
COMMENT $06A6 overstep the next two
COMMENT $06A8 count it down by $20
FORCE_NO_SYMBOL $06A8
COMMENT $06AB store it
FORCE_SYMBOL $06AB dive_timer
COMMENT $06AE load the timer value
FORCE_SYMBOL $06AE my_timer
COMMENT $06B1 count it down by $20
FORCE_NO_SYMBOL $06B1
COMMENT $06B4 store it
FORCE_SYMBOL $06B4 my_timer
FORCE_SYMBOL $06B7 otter_status
COMMENT $06BA is displayed
FORCE_SYMBOL $06BA IS_WAITING
COMMENT $06BE load otter timer
FORCE_SYMBOL $06BE otter_timer
COMMENT $06C1 decrease it
FORCE_NO_SYMBOL $06C1
COMMENT $06C4 store it back
FORCE_SYMBOL $06C4 otter_timer
COMMENT_LINE $06C7 done with in 'pause' stuff
COMMENT $06C7 A = Scale factor, B Bit for timer test
COMMENT $06CA done with move?
FORCE_SYMBOL $06CA VIA_int_flags
COMMENT $06CC no, than go on waiting
COMMENT_LINE $06CE done with move
COMMENT_LINE $06CE own scale factor to homes, since they are drawn in an individually fitted scale
COMMENT $06CE move to time 1 lo, this means scaling
FORCE_SYMBOL $06CE VIA_t1_cnt_lo
COMMENT_LINE $06D0 now a MY_DRAW_VLC
COMMENT $06D0 A= how many vectors?, B = Y coordinate
COMMENT $06D2 remember in counter
FORCE_NO_SYMBOL $06D2
COMMENT $06D5 clear A
COMMENT_LINE $06D6 STB     VIA_port_a        ; Send Y to A/D
COMMENT_LINE $06D6 STA     VIA_port_b        ; enable MUX
FORCE_SYMBOL $06D6 VIA_port_b
COMMENT $06D8 load next coordinate (X)
COMMENT $06DA Disable mux
FORCE_SYMBOL $06DA VIA_port_b
COMMENT $06DC Send X to A/D
FORCE_SYMBOL $06DC VIA_port_a
COMMENT $06DE Put pattern in shift register ($ff)
FORCE_SYMBOL $06DE VIA_shift_reg
COMMENT $06E0 enable timer 1
FORCE_SYMBOL $06E0 VIA_t1_cnt_hi
COMMENT $06E2 next coordinate (Y)
COMMENT $06E4 more vectors?
FORCE_NO_SYMBOL $06E4
COMMENT $06E7 Go back for more points
COMMENT $06E9 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $06E9
COMMENT $06EB Wait for T1 to time out
FORCE_SYMBOL $06EB VIA_int_flags
COMMENT $06EF Wait a moment more
COMMENT $06F0 Clear shift register (blank output)
FORCE_SYMBOL $06F0 VIA_shift_reg
COMMENT $06F4 A-reg = T1 interrupt bit, B = zero vector byte
COMMENT $06F7 Wait for T1 to time out
FORCE_SYMBOL $06F7 VIA_int_flags
COMMENT $06FB Wait a moment more
FORCE_SYMBOL $06FC VIA_shift_reg
COMMENT_LINE $06FE DRAW THE THREE LINES IN BETWEEN
COMMENT $06FE /BLANK low and /ZERO low
FORCE_SYMBOL $06FE VIA_cntl
COMMENT $0700 patched for speed... /2
COMMENT $0700 scale for placing first point
COMMENT $0702 move to time 1 lo, this means scaling
FORCE_SYMBOL $0702 VIA_t1_cnt_lo
COMMENT $0704 Y pos, A=0
COMMENT_LINE $0707 move to D
COMMENT $0707 Store Y in D/A register
FORCE_SYMBOL $0707 VIA_port_a
COMMENT $0709 Enable mux
FORCE_SYMBOL $0709 VIA_port_b
COMMENT $070B Blank low, zero high?
FORCE_NO_SYMBOL $070B
COMMENT $070D Disable mux
FORCE_SYMBOL $070D VIA_port_b
COMMENT $070F zero high!
FORCE_SYMBOL $070F VIA_cntl
COMMENT $0711 X pos relative to start
COMMENT $0713 Store X in D/A register
FORCE_SYMBOL $0713 VIA_port_a
COMMENT $0715 enable timer
FORCE_SYMBOL $0715 VIA_t1_cnt_hi
COMMENT_LINE $0717 much cycles wasted in below wait for TI1
COMMENT_LINE $0717 we use the time and do some stuff in here...
COMMENT_LINE $0717 this is stuff which takes time,
COMMENT_LINE $0717 but can be done anywhere, so we do it here
COMMENT_LINE $0717 in a 'pause'
COMMENT_LINE $0717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0717 independent code section
COMMENT_LINE $0717 decrease and check level timer
COMMENT_LINE $0717 warn if low
COMMENT $0717 load new vector (length was cut by timer :-))
COMMENT $071A is it small yet?
FORCE_NO_SYMBOL $071A
COMMENT $071E no, than jump
COMMENT $0720 otherwise play triller1
COMMENT_LINE $0720 the next instructions initialize a new sound
COMMENT_LINE $0720 load #1
COMMENT_LINE $0720 set this as marker for music start
COMMENT $0720 doesn'T destroy a register
FORCE_SYMBOL $0720 Vec_Music_Flag
COMMENT $0723 to do it that way
FORCE_SYMBOL $0723 Vec_Music_Flag
COMMENT $0726 load a music structure (piece_of_music)
FORCE_SYMBOL $0726 triller1
COMMENT $0729 and store it to my own music active pointer
FORCE_SYMBOL $0729 music_active
COMMENT_LINE $072C next a do_my_sound and than do sound must be called
COMMENT $072E is it really really small?
FORCE_NO_SYMBOL $072E
COMMENT $0730 nah, not that small yet
COMMENT $0732 or play triller2
COMMENT_LINE $0732 the next instructions initialize a new sound
COMMENT_LINE $0732 load #1
COMMENT_LINE $0732 set this as marker for music start
COMMENT $0732 doesn'T destroy a register
FORCE_SYMBOL $0732 Vec_Music_Flag
COMMENT $0735 to do it that way
FORCE_SYMBOL $0735 Vec_Music_Flag
COMMENT $0738 load a music structure (piece_of_music)
FORCE_SYMBOL $0738 triller2
COMMENT $073B and store it to my own music active pointer
FORCE_SYMBOL $073B music_active
COMMENT_LINE $073E next a do_my_sound and than do sound must be called
COMMENT_LINE $073E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $073E done with in 'pause' stuff!
COMMENT $073E A is scale, B is bit test $40
COMMENT $0741 Wait for T1 to time out
FORCE_SYMBOL $0741 VIA_int_flags
COMMENT_LINE $0745 move to done
COMMENT $0745 move to time 1 lo, this means scaling
FORCE_SYMBOL $0745 VIA_t1_cnt_lo
COMMENT_LINE $0747 draw line...
COMMENT $0747 A=0, B=X
COMMENT $074A Send Y to A/D
FORCE_SYMBOL $074A VIA_port_a
COMMENT $074C Enable mux
FORCE_SYMBOL $074C VIA_port_b
COMMENT $074E Disable mux
FORCE_SYMBOL $074E VIA_port_b
COMMENT $0750 Send X to A/D
FORCE_SYMBOL $0750 VIA_port_a
FORCE_SYMBOL $0752 VIA_shift_reg
COMMENT $0754 enable T1H
FORCE_SYMBOL $0754 VIA_t1_cnt_hi
COMMENT $0756 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0756
COMMENT $0758 Wait for T1 to time out
FORCE_SYMBOL $0758 VIA_int_flags
COMMENT $075E Clear shift register (blank output)
FORCE_SYMBOL $075E VIA_shift_reg
COMMENT_LINE $0760 line draw done
COMMENT $0760 move to time 1 lo, this means scaling
FORCE_SYMBOL $0760 VIA_t1_cnt_lo
COMMENT_LINE $0762 move start
COMMENT $0762 a small Y offset down
COMMENT $0764 Store Y in D/A register
FORCE_SYMBOL $0764 VIA_port_a
COMMENT $0766 Enable mux
FORCE_SYMBOL $0766 VIA_port_b
COMMENT $0768 Blank low, zero high?
FORCE_NO_SYMBOL $0768
FORCE_SYMBOL $076A VIA_cntl
COMMENT $076C Disable mux
FORCE_SYMBOL $076C VIA_port_b
COMMENT $076E Store X in D/A register
FORCE_SYMBOL $076E VIA_port_a
COMMENT $0770 enable timer
FORCE_SYMBOL $0770 VIA_t1_cnt_hi
COMMENT $0772 A is scale, B is bit test $40
COMMENT $0775 Wait for T1 to time out
FORCE_SYMBOL $0775 VIA_int_flags
COMMENT_LINE $0779 move end
COMMENT $0779 move to time 1 lo, this means scaling
FORCE_SYMBOL $0779 VIA_t1_cnt_lo
COMMENT_LINE $077B draw start
COMMENT $077B A=0, B=X
COMMENT $077E Send Y to A/D
FORCE_SYMBOL $077E VIA_port_a
COMMENT $0780 Enable mux
FORCE_SYMBOL $0780 VIA_port_b
COMMENT $0782 Disable mux
FORCE_SYMBOL $0782 VIA_port_b
COMMENT $0784 Send X to A/D
FORCE_SYMBOL $0784 VIA_port_a
FORCE_SYMBOL $0786 VIA_shift_reg
COMMENT $0788 Set T1H (scale factor?)
FORCE_SYMBOL $0788 VIA_t1_cnt_hi
COMMENT $078A B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $078A
COMMENT $078C Wait for T1 to time out
FORCE_SYMBOL $078C VIA_int_flags
COMMENT $0792 Clear shift register (blank output)
FORCE_SYMBOL $0792 VIA_shift_reg
COMMENT_LINE $0794 draw end
COMMENT $0794 move to time 1 lo, this means scaling
FORCE_SYMBOL $0794 VIA_t1_cnt_lo
COMMENT_LINE $0796 notice!
COMMENT_LINE $0796 the timer line length could also be altered using the scale factor,
COMMENT_LINE $0796 in fact that would save some cycles, especially
COMMENT_LINE $0796 when time goes low...
COMMENT $0796 back to zero
FORCE_NO_SYMBOL $0796
COMMENT $0798 /BLANK low and /ZERO low
FORCE_SYMBOL $0798 VIA_cntl
COMMENT_LINE $079A A is still zero from above
COMMENT_LINE $079A move to
COMMENT $079A y offset
COMMENT $079C Store Y in D/A register
FORCE_SYMBOL $079C VIA_port_a
COMMENT $079E Enable mux
FORCE_SYMBOL $079E VIA_port_b
COMMENT $07A0 Blank low, zero high?
FORCE_NO_SYMBOL $07A0
COMMENT $07A2 Disable mux
FORCE_SYMBOL $07A2 VIA_port_b
COMMENT $07A4 zero high, this is really a few cycles to early!
FORCE_SYMBOL $07A4 VIA_cntl
COMMENT $07A6 X pos relative to start
COMMENT $07A8 Store X in D/A register
FORCE_SYMBOL $07A8 VIA_port_a
COMMENT $07AA enable timer
FORCE_SYMBOL $07AA VIA_t1_cnt_hi
COMMENT $07AC A= scale, B-reg = T1 interrupt bit
COMMENT $07AF Wait for T1 to time out
FORCE_SYMBOL $07AF VIA_int_flags
COMMENT_LINE $07B3 move done
COMMENT $07B3 move to time 1 lo, this means scaling
FORCE_SYMBOL $07B3 VIA_t1_cnt_lo
COMMENT $07B5 load new vector (length was cut by timer :-)), y is allways 0
COMMENT_LINE $07B8 draw line
COMMENT $07B9 Send Y to A/D
FORCE_SYMBOL $07B9 VIA_port_a
COMMENT $07BB Enable mux
FORCE_SYMBOL $07BB VIA_port_b
COMMENT $07BD Disable mux
FORCE_SYMBOL $07BD VIA_port_b
COMMENT $07BF Send X to A/D
FORCE_SYMBOL $07BF VIA_port_a
FORCE_SYMBOL $07C1 VIA_shift_reg
COMMENT $07C3 Set T1H (scale factor?)
FORCE_SYMBOL $07C3 VIA_t1_cnt_hi
COMMENT $07C5 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $07C5
COMMENT $07C7 clear temporal
FORCE_SYMBOL $07C7 tmp1
COMMENT $07CA storage for offset
COMMENT $07CD load the address to U, start of list of homes
FORCE_SYMBOL $07CD home_objects
COMMENT $07D0 Wait for T1 to time out
FORCE_SYMBOL $07D0 VIA_int_flags
COMMENT $07D4 prepare for zero below
FORCE_NO_SYMBOL $07D4
COMMENT $07D6 Clear shift register (blank output)
FORCE_SYMBOL $07D6 VIA_shift_reg
COMMENT_LINE $07D8 draw end
COMMENT_LINE $07D8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $07D8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $07D8 independent code section
COMMENT_LINE $07D8 draw all 'home' sprites
COMMENT $07D8 BLANK low and /ZERO low
FORCE_SYMBOL $07D8 VIA_cntl
COMMENT $07DA load object to X
FORCE_NO_SYMBOL $07DA
COMMENT $07DC if zero, than anothing to do
COMMENT_LINE $07DE do 1 house object here!
FORCE_SYMBOL $07DE SCALE_IN_HOME
COMMENT $07E0 for first house
COMMENT $07E0 move to time 1 lo, this means scaling
FORCE_SYMBOL $07E0 VIA_t1_cnt_lo
COMMENT $07E2 load object position
FORCE_NO_SYMBOL $07E2
COMMENT $07E4 korrect with sprite offset Y
FORCE_NO_SYMBOL $07E4
COMMENT $07E6 korrect with sprite offset X
FORCE_NO_SYMBOL $07E6
COMMENT_LINE $07E8 move to
COMMENT $07E8 Store Y in D/A register
FORCE_SYMBOL $07E8 VIA_port_a
COMMENT $07EA Enable mux
FORCE_SYMBOL $07EA VIA_port_b
COMMENT $07EC Blank low, zero high?
FORCE_NO_SYMBOL $07EC
FORCE_SYMBOL $07EE VIA_cntl
COMMENT $07F0 Disable mux
FORCE_SYMBOL $07F0 VIA_port_b
COMMENT $07F2 Store X in D/A register
FORCE_SYMBOL $07F2 VIA_port_a
COMMENT $07F4 enable timer
FORCE_SYMBOL $07F4 VIA_t1_cnt_hi
COMMENT $07F6 decrease animation counter
FORCE_NO_SYMBOL $07F6
COMMENT $07F8 if zero, we must initialize new animation phase
COMMENT $07FA load new object definition
FORCE_NO_SYMBOL $07FA
COMMENT $07FD store new object definition to object list
FORCE_NO_SYMBOL $07FD
COMMENT $0800 load new animation counter start
FORCE_NO_SYMBOL $0800
COMMENT $0802 and set it in object list
FORCE_NO_SYMBOL $0802
COMMENT $0804 load object vector list to X,
FORCE_NO_SYMBOL $0804
COMMENT $0806 A= scale, B= Timer flag
COMMENT $0809 Wait for T1 to time out
FORCE_SYMBOL $0809 VIA_int_flags
COMMENT_LINE $080D move to done
COMMENT $080D do it
COMMENT $080D move to time 1 lo, this means scaling
FORCE_SYMBOL $080D VIA_t1_cnt_lo
COMMENT_LINE $080F in X vector list now!
COMMENT_LINE $080F U still untouched, pointer to first home!
COMMENT_LINE $080F display the vector list
COMMENT $080F (MAKRO) and draw the vector list
FORCE_NO_SYMBOL $0811
COMMENT $0815 Send Y to A/D
FORCE_SYMBOL $0815 VIA_port_a
FORCE_SYMBOL $0817 VIA_port_b
COMMENT $081B Disable mux
FORCE_SYMBOL $081B VIA_port_b
COMMENT $081D Send X to A/D
FORCE_SYMBOL $081D VIA_port_a
COMMENT $081F Put pattern in shift register
FORCE_SYMBOL $081F VIA_shift_reg
COMMENT $0821 enable timer 1
FORCE_SYMBOL $0821 VIA_t1_cnt_hi
COMMENT $0823 6
COMMENT $0825 7
FORCE_NO_SYMBOL $0825
COMMENT $0828 3 Go back for more points
COMMENT $082A Send Y to A/D
FORCE_SYMBOL $082A VIA_port_a
FORCE_SYMBOL $082C VIA_shift_reg
FORCE_SYMBOL $082E VIA_port_b
COMMENT $0832 Disable mux
FORCE_SYMBOL $0832 VIA_port_b
COMMENT $0834 Send X to A/D
FORCE_SYMBOL $0834 VIA_port_a
COMMENT $0836 Put pattern in shift register
FORCE_SYMBOL $0836 VIA_shift_reg
COMMENT $0838 enable timer 1
FORCE_SYMBOL $0838 VIA_t1_cnt_hi
COMMENT $083A 6
COMMENT $083C 7
FORCE_NO_SYMBOL $083C
COMMENT $083F 3 Go back for more points
COMMENT_LINE $0841 NOP                     ; 2
COMMENT_LINE $0841 STA     <VIA_shift_reg
FORCE_SYMBOL $0841 VIA_shift_reg
COMMENT $0843 load the address to U, start of list of homes
FORCE_NO_SYMBOL $0846
COMMENT $0848 if zero, than anothing to do
COMMENT_LINE $084A do 2 house object here!
COMMENT_LINE $084D LDB     #$CC            ; prepare for zero below
COMMENT $084D BLANK low and /ZERO low
FORCE_SYMBOL $084D VIA_cntl
COMMENT_LINE $084F zero here for following homes
COMMENT_LINE $084F LDA     #SCALE_IN_HOME
COMMENT $084F for first house
COMMENT $084F move to time 1 lo, this means scaling
FORCE_SYMBOL $084F VIA_t1_cnt_lo
COMMENT $0851 load object position
FORCE_NO_SYMBOL $0851
COMMENT $0853 korrect with sprite offset Y
FORCE_NO_SYMBOL $0853
COMMENT $0855 korrect with sprite offset X
FORCE_NO_SYMBOL $0855
COMMENT_LINE $0857 move to
COMMENT $0857 Store Y in D/A register
FORCE_SYMBOL $0857 VIA_port_a
COMMENT $0859 Enable mux
FORCE_SYMBOL $0859 VIA_port_b
COMMENT $085B Blank low, zero high?
FORCE_NO_SYMBOL $085B
FORCE_SYMBOL $085D VIA_cntl
COMMENT $085F Disable mux
FORCE_SYMBOL $085F VIA_port_b
COMMENT $0861 Store X in D/A register
FORCE_SYMBOL $0861 VIA_port_a
COMMENT $0863 enable timer
FORCE_SYMBOL $0863 VIA_t1_cnt_hi
COMMENT $0865 decrease animation counter
FORCE_NO_SYMBOL $0865
COMMENT $0867 if zero, we must initialize new animation phase
COMMENT $0869 load new object definition
FORCE_NO_SYMBOL $0869
COMMENT $086C store new object definition to object list
FORCE_NO_SYMBOL $086C
COMMENT $086F load new animation counter start
FORCE_NO_SYMBOL $086F
COMMENT $0871 and set it in object list
FORCE_NO_SYMBOL $0871
COMMENT $0873 load object vector list to X,
FORCE_NO_SYMBOL $0873
COMMENT $0875 A= scale, B= Timer flag
COMMENT $0878 Wait for T1 to time out
FORCE_SYMBOL $0878 VIA_int_flags
COMMENT_LINE $087C move to done
COMMENT $087C do it
COMMENT $087C move to time 1 lo, this means scaling
FORCE_SYMBOL $087C VIA_t1_cnt_lo
COMMENT_LINE $087E in X vector list now!
COMMENT_LINE $087E U still untouched, pointer to first home!
COMMENT_LINE $087E display the vector list
COMMENT $087E (MAKRO) and draw the vector list
FORCE_NO_SYMBOL $0880
COMMENT $0884 Send Y to A/D
FORCE_SYMBOL $0884 VIA_port_a
FORCE_SYMBOL $0886 VIA_port_b
COMMENT $088A Disable mux
FORCE_SYMBOL $088A VIA_port_b
COMMENT $088C Send X to A/D
FORCE_SYMBOL $088C VIA_port_a
COMMENT $088E Put pattern in shift register
FORCE_SYMBOL $088E VIA_shift_reg
COMMENT $0890 enable timer 1
FORCE_SYMBOL $0890 VIA_t1_cnt_hi
COMMENT $0892 6
COMMENT $0894 7
FORCE_NO_SYMBOL $0894
COMMENT $0897 3 Go back for more points
COMMENT $0899 Send Y to A/D
FORCE_SYMBOL $0899 VIA_port_a
FORCE_SYMBOL $089B VIA_shift_reg
FORCE_SYMBOL $089D VIA_port_b
COMMENT $08A1 Disable mux
FORCE_SYMBOL $08A1 VIA_port_b
COMMENT $08A3 Send X to A/D
FORCE_SYMBOL $08A3 VIA_port_a
COMMENT $08A5 Put pattern in shift register
FORCE_SYMBOL $08A5 VIA_shift_reg
COMMENT $08A7 enable timer 1
FORCE_SYMBOL $08A7 VIA_t1_cnt_hi
COMMENT $08A9 6
COMMENT $08AB 7
FORCE_NO_SYMBOL $08AB
COMMENT $08AE 3 Go back for more points
COMMENT_LINE $08B0 NOP                     ; 2
COMMENT_LINE $08B0 STA     <VIA_shift_reg
FORCE_SYMBOL $08B0 VIA_shift_reg
COMMENT $08B2 load the address to U, start of list of homes
FORCE_NO_SYMBOL $08B5
COMMENT $08B7 if zero, than anothing to do
COMMENT_LINE $08B9 do 3 house object here!
COMMENT_LINE $08BC LDB     #$CC            ; prepare for zero below
COMMENT $08BC BLANK low and /ZERO low
FORCE_SYMBOL $08BC VIA_cntl
COMMENT_LINE $08BE zero here for following homes
COMMENT_LINE $08BE LDA     #SCALE_IN_HOME
COMMENT $08BE for first house
COMMENT $08BE move to time 1 lo, this means scaling
FORCE_SYMBOL $08BE VIA_t1_cnt_lo
COMMENT $08C0 load object position
FORCE_NO_SYMBOL $08C0
COMMENT $08C2 korrect with sprite offset Y
FORCE_NO_SYMBOL $08C2
COMMENT $08C4 korrect with sprite offset X
FORCE_NO_SYMBOL $08C4
COMMENT_LINE $08C6 move to
COMMENT $08C6 Store Y in D/A register
FORCE_SYMBOL $08C6 VIA_port_a
COMMENT $08C8 Enable mux
FORCE_SYMBOL $08C8 VIA_port_b
COMMENT $08CA Blank low, zero high?
FORCE_NO_SYMBOL $08CA
FORCE_SYMBOL $08CC VIA_cntl
COMMENT $08CE Disable mux
FORCE_SYMBOL $08CE VIA_port_b
COMMENT $08D0 Store X in D/A register
FORCE_SYMBOL $08D0 VIA_port_a
COMMENT $08D2 enable timer
FORCE_SYMBOL $08D2 VIA_t1_cnt_hi
COMMENT $08D4 decrease animation counter
FORCE_NO_SYMBOL $08D4
COMMENT $08D6 if zero, we must initialize new animation phase
COMMENT $08D8 load new object definition
FORCE_NO_SYMBOL $08D8
COMMENT $08DB store new object definition to object list
FORCE_NO_SYMBOL $08DB
COMMENT $08DE load new animation counter start
FORCE_NO_SYMBOL $08DE
COMMENT $08E0 and set it in object list
FORCE_NO_SYMBOL $08E0
COMMENT $08E2 load object vector list to X,
FORCE_NO_SYMBOL $08E2
COMMENT $08E4 A= scale, B= Timer flag
COMMENT $08E7 Wait for T1 to time out
FORCE_SYMBOL $08E7 VIA_int_flags
COMMENT_LINE $08EB move to done
COMMENT $08EB do it
COMMENT $08EB move to time 1 lo, this means scaling
FORCE_SYMBOL $08EB VIA_t1_cnt_lo
COMMENT_LINE $08ED in X vector list now!
COMMENT_LINE $08ED U still untouched, pointer to first home!
COMMENT_LINE $08ED display the vector list
COMMENT $08ED (MAKRO) and draw the vector list
FORCE_NO_SYMBOL $08EF
COMMENT $08F3 Send Y to A/D
FORCE_SYMBOL $08F3 VIA_port_a
FORCE_SYMBOL $08F5 VIA_port_b
COMMENT $08F9 Disable mux
FORCE_SYMBOL $08F9 VIA_port_b
COMMENT $08FB Send X to A/D
FORCE_SYMBOL $08FB VIA_port_a
COMMENT $08FD Put pattern in shift register
FORCE_SYMBOL $08FD VIA_shift_reg
COMMENT $08FF enable timer 1
FORCE_SYMBOL $08FF VIA_t1_cnt_hi
COMMENT $0901 6
COMMENT $0903 7
FORCE_NO_SYMBOL $0903
COMMENT $0906 3 Go back for more points
COMMENT $0908 Send Y to A/D
FORCE_SYMBOL $0908 VIA_port_a
FORCE_SYMBOL $090A VIA_shift_reg
FORCE_SYMBOL $090C VIA_port_b
COMMENT $0910 Disable mux
FORCE_SYMBOL $0910 VIA_port_b
COMMENT $0912 Send X to A/D
FORCE_SYMBOL $0912 VIA_port_a
COMMENT $0914 Put pattern in shift register
FORCE_SYMBOL $0914 VIA_shift_reg
COMMENT $0916 enable timer 1
FORCE_SYMBOL $0916 VIA_t1_cnt_hi
COMMENT $0918 6
COMMENT $091A 7
FORCE_NO_SYMBOL $091A
COMMENT $091D 3 Go back for more points
COMMENT_LINE $091F NOP                     ; 2
COMMENT_LINE $091F STA     <VIA_shift_reg
FORCE_SYMBOL $091F VIA_shift_reg
COMMENT $0921 load the address to U, start of list of homes
FORCE_NO_SYMBOL $0924
COMMENT $0926 if zero, than anothing to do
COMMENT_LINE $0928 do 4 house object here!
COMMENT_LINE $092B LDB     #$CC            ; prepare for zero below
COMMENT $092B BLANK low and /ZERO low
FORCE_SYMBOL $092B VIA_cntl
COMMENT_LINE $092D zero here for following homes
COMMENT_LINE $092D LDA     #SCALE_IN_HOME
COMMENT $092D for first house
COMMENT $092D move to time 1 lo, this means scaling
FORCE_SYMBOL $092D VIA_t1_cnt_lo
COMMENT $092F load object position
FORCE_NO_SYMBOL $092F
COMMENT $0931 korrect with sprite offset Y
FORCE_NO_SYMBOL $0931
COMMENT $0933 korrect with sprite offset X
FORCE_NO_SYMBOL $0933
COMMENT_LINE $0935 move to
COMMENT $0935 Store Y in D/A register
FORCE_SYMBOL $0935 VIA_port_a
COMMENT $0937 Enable mux
FORCE_SYMBOL $0937 VIA_port_b
COMMENT $0939 Blank low, zero high?
FORCE_NO_SYMBOL $0939
FORCE_SYMBOL $093B VIA_cntl
COMMENT $093D Disable mux
FORCE_SYMBOL $093D VIA_port_b
COMMENT $093F Store X in D/A register
FORCE_SYMBOL $093F VIA_port_a
COMMENT $0941 enable timer
FORCE_SYMBOL $0941 VIA_t1_cnt_hi
COMMENT $0943 decrease animation counter
FORCE_NO_SYMBOL $0943
COMMENT $0945 if zero, we must initialize new animation phase
COMMENT $0947 load new object definition
FORCE_NO_SYMBOL $0947
COMMENT $094A store new object definition to object list
FORCE_NO_SYMBOL $094A
COMMENT $094D load new animation counter start
FORCE_NO_SYMBOL $094D
COMMENT $094F and set it in object list
FORCE_NO_SYMBOL $094F
COMMENT $0951 load object vector list to X,
FORCE_NO_SYMBOL $0951
COMMENT $0953 A= scale, B= Timer flag
COMMENT $0956 Wait for T1 to time out
FORCE_SYMBOL $0956 VIA_int_flags
COMMENT_LINE $095A move to done
COMMENT $095A do it
COMMENT $095A move to time 1 lo, this means scaling
FORCE_SYMBOL $095A VIA_t1_cnt_lo
COMMENT_LINE $095C in X vector list now!
COMMENT_LINE $095C U still untouched, pointer to first home!
COMMENT_LINE $095C display the vector list
COMMENT $095C (MAKRO) and draw the vector list
FORCE_NO_SYMBOL $095E
COMMENT $0962 Send Y to A/D
FORCE_SYMBOL $0962 VIA_port_a
FORCE_SYMBOL $0964 VIA_port_b
COMMENT $0968 Disable mux
FORCE_SYMBOL $0968 VIA_port_b
COMMENT $096A Send X to A/D
FORCE_SYMBOL $096A VIA_port_a
COMMENT $096C Put pattern in shift register
FORCE_SYMBOL $096C VIA_shift_reg
COMMENT $096E enable timer 1
FORCE_SYMBOL $096E VIA_t1_cnt_hi
COMMENT $0970 6
COMMENT $0972 7
FORCE_NO_SYMBOL $0972
COMMENT $0975 3 Go back for more points
COMMENT $0977 Send Y to A/D
FORCE_SYMBOL $0977 VIA_port_a
FORCE_SYMBOL $0979 VIA_shift_reg
FORCE_SYMBOL $097B VIA_port_b
COMMENT $097F Disable mux
FORCE_SYMBOL $097F VIA_port_b
COMMENT $0981 Send X to A/D
FORCE_SYMBOL $0981 VIA_port_a
COMMENT $0983 Put pattern in shift register
FORCE_SYMBOL $0983 VIA_shift_reg
COMMENT $0985 enable timer 1
FORCE_SYMBOL $0985 VIA_t1_cnt_hi
COMMENT $0987 6
COMMENT $0989 7
FORCE_NO_SYMBOL $0989
COMMENT $098C 3 Go back for more points
COMMENT_LINE $098E NOP                     ; 2
COMMENT_LINE $098E STA     <VIA_shift_reg
FORCE_SYMBOL $098E VIA_shift_reg
COMMENT $0990 load the address to U, start of list of homes
FORCE_NO_SYMBOL $0993
COMMENT $0995 if zero, than anothing to do
COMMENT_LINE $0997 do 5 house object here!
COMMENT_LINE $099A LDB     #$CC            ; prepare for zero below
COMMENT $099A BLANK low and /ZERO low
FORCE_SYMBOL $099A VIA_cntl
COMMENT_LINE $099C zero here for following homes
COMMENT_LINE $099C LDA     #SCALE_IN_HOME
COMMENT $099C for first house
COMMENT $099C move to time 1 lo, this means scaling
FORCE_SYMBOL $099C VIA_t1_cnt_lo
COMMENT $099E load object position
FORCE_NO_SYMBOL $099E
COMMENT $09A0 korrect with sprite offset Y
FORCE_NO_SYMBOL $09A0
COMMENT $09A2 korrect with sprite offset X
FORCE_NO_SYMBOL $09A2
COMMENT_LINE $09A4 move to
COMMENT $09A4 Store Y in D/A register
FORCE_SYMBOL $09A4 VIA_port_a
COMMENT $09A6 Enable mux
FORCE_SYMBOL $09A6 VIA_port_b
COMMENT $09A8 Blank low, zero high?
FORCE_NO_SYMBOL $09A8
FORCE_SYMBOL $09AA VIA_cntl
COMMENT $09AC Disable mux
FORCE_SYMBOL $09AC VIA_port_b
COMMENT $09AE Store X in D/A register
FORCE_SYMBOL $09AE VIA_port_a
COMMENT $09B0 enable timer
FORCE_SYMBOL $09B0 VIA_t1_cnt_hi
COMMENT $09B2 decrease animation counter
FORCE_NO_SYMBOL $09B2
COMMENT $09B4 if zero, we must initialize new animation phase
COMMENT $09B6 load new object definition
FORCE_NO_SYMBOL $09B6
COMMENT $09B9 store new object definition to object list
FORCE_NO_SYMBOL $09B9
COMMENT $09BC load new animation counter start
FORCE_NO_SYMBOL $09BC
COMMENT $09BE and set it in object list
FORCE_NO_SYMBOL $09BE
COMMENT $09C0 load object vector list to X,
FORCE_NO_SYMBOL $09C0
COMMENT $09C2 A= scale, B= Timer flag
COMMENT $09C5 Wait for T1 to time out
FORCE_SYMBOL $09C5 VIA_int_flags
COMMENT_LINE $09C9 move to done
COMMENT $09C9 do it
COMMENT $09C9 move to time 1 lo, this means scaling
FORCE_SYMBOL $09C9 VIA_t1_cnt_lo
COMMENT_LINE $09CB in X vector list now!
COMMENT_LINE $09CB U still untouched, pointer to first home!
COMMENT_LINE $09CB display the vector list
COMMENT $09CB (MAKRO) and draw the vector list
FORCE_NO_SYMBOL $09CD
COMMENT $09D1 Send Y to A/D
FORCE_SYMBOL $09D1 VIA_port_a
FORCE_SYMBOL $09D3 VIA_port_b
COMMENT $09D7 Disable mux
FORCE_SYMBOL $09D7 VIA_port_b
COMMENT $09D9 Send X to A/D
FORCE_SYMBOL $09D9 VIA_port_a
COMMENT $09DB Put pattern in shift register
FORCE_SYMBOL $09DB VIA_shift_reg
COMMENT $09DD enable timer 1
FORCE_SYMBOL $09DD VIA_t1_cnt_hi
COMMENT $09DF 6
COMMENT $09E1 7
FORCE_NO_SYMBOL $09E1
COMMENT $09E4 3 Go back for more points
COMMENT $09E6 Send Y to A/D
FORCE_SYMBOL $09E6 VIA_port_a
FORCE_SYMBOL $09E8 VIA_shift_reg
FORCE_SYMBOL $09EA VIA_port_b
COMMENT $09EE Disable mux
FORCE_SYMBOL $09EE VIA_port_b
COMMENT $09F0 Send X to A/D
FORCE_SYMBOL $09F0 VIA_port_a
COMMENT $09F2 Put pattern in shift register
FORCE_SYMBOL $09F2 VIA_shift_reg
COMMENT $09F4 enable timer 1
FORCE_SYMBOL $09F4 VIA_t1_cnt_hi
COMMENT $09F6 6
COMMENT $09F8 7
FORCE_NO_SYMBOL $09F8
COMMENT $09FB 3 Go back for more points
COMMENT_LINE $09FD NOP                     ; 2
COMMENT_LINE $09FD STA     <VIA_shift_reg
FORCE_SYMBOL $09FD VIA_shift_reg
COMMENT_LINE $09FF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09FF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09FF now look if there is a snake on some log
COMMENT $09FF get the status
FORCE_SYMBOL $09FF snake_status
COMMENT $0A02 if zero, than no snake on level
COMMENT $0A06 if waiting
FORCE_SYMBOL $0A06 IS_DISPLAYED
COMMENT $0A08 go to no snake
COMMENT_LINE $0A0C now we set the new coordinates
COMMENT $0A0C go allways to zero, is sort of bad,
FORCE_NO_SYMBOL $0A0C
COMMENT $0A0E /BLANK low and /ZERO low
FORCE_SYMBOL $0A0E VIA_cntl
COMMENT $0A10 U to snake_anim_counter
FORCE_SYMBOL $0A10 snake_anim_counter
COMMENT $0A13 Y to snake object
FORCE_SYMBOL $0A13 snake_object
COMMENT $0A16 a different scale again... still very high :-(
FORCE_SYMBOL $0A16 SCALE_FACTOR_GAME
COMMENT $0A18 move to time 1 lo, this means scaling
FORCE_SYMBOL $0A18 VIA_t1_cnt_lo
COMMENT $0A1A do positioning, load pos here
FORCE_SYMBOL $0A1A snake_pos
COMMENT_LINE $0A1D move to start
COMMENT $0A1D Store Y in D/A register
FORCE_SYMBOL $0A1D VIA_port_a
COMMENT $0A1F Blank low, zero high?
FORCE_NO_SYMBOL $0A1F
FORCE_SYMBOL $0A21 VIA_cntl
COMMENT $0A24 Enable mux
FORCE_SYMBOL $0A24 VIA_port_b
COMMENT $0A26 Disable mux
FORCE_SYMBOL $0A26 VIA_port_b
COMMENT $0A28 Store X in D/A register
FORCE_SYMBOL $0A28 VIA_port_a
COMMENT $0A2A enable timer
FORCE_SYMBOL $0A2A VIA_t1_cnt_hi
COMMENT_LINE $0A2C here in move stuff!
COMMENT $0A2C + 1
FORCE_NO_SYMBOL $0A2C
COMMENT $0A2E do positioning, load pos here
FORCE_SYMBOL $0A2E snake_pos
COMMENT $0A31 add the speed, got from log information earlier
FORCE_SYMBOL $0A31 snake_speed
COMMENT $0A34 is on left side out of bounds?
FORCE_SYMBOL $0A34 BOUNDARY_LO
COMMENT $0A36 no, than no coordinate fiddling
COMMENT $0A38 is waiting
FORCE_SYMBOL $0A38 snake_status
COMMENT $0A3B initiate the round counter
FORCE_SYMBOL $0A3B snake_round_counter_reset
COMMENT $0A3E store it
FORCE_SYMBOL $0A3E snake_round_counter
COMMENT $0A44 check if we are out of bounds on the right
FORCE_SYMBOL $0A44 BOUNDARY_HI
COMMENT $0A48 and 're' store it
FORCE_SYMBOL $0A48 snake_pos
COMMENT $0A4B decrease the number of steps a snake does befor turing arround
FORCE_SYMBOL $0A4B snake_gone
COMMENT $0A4E if not turning... go on
COMMENT $0A50 save X
COMMENT $0A52 look at special in object definition for information...
FORCE_NO_SYMBOL $0A52
COMMENT $0A54 are we now left or right?
FORCE_SYMBOL $0A54 SPECIAL_RIGHT_SNAKE
COMMENT $0A56 if right... jump
COMMENT $0A58 load old sprite offsets
FORCE_NO_SYMBOL $0A58
COMMENT $0A5A negate them (A)
COMMENT $0A5B negate them (B)
COMMENT $0A5C add y position to old sprite offset y
FORCE_SYMBOL $0A5C snake_pos
COMMENT $0A5F add x position to old sprite offset x
COMMENT $0A62 load new object definition
FORCE_SYMBOL $0A62 snake1a_object
COMMENT $0A65 add new sprite offset y
FORCE_NO_SYMBOL $0A65
COMMENT $0A67 add new sprite offset x
FORCE_NO_SYMBOL $0A67
COMMENT $0A69 and store the corrected position
FORCE_SYMBOL $0A69 snake_pos
COMMENT $0A6C store new object definition
FORCE_SYMBOL $0A6C snake_object
COMMENT $0A6F load new animation counter start
FORCE_NO_SYMBOL $0A6F
COMMENT $0A71 and set it in object list
FORCE_SYMBOL $0A71 snake_anim_counter
COMMENT $0A74 now go to opposite direction +1 equal log speed
FORCE_SYMBOL $0A74 snake_speed
COMMENT $0A77 plus another to be 1 step faster
FORCE_SYMBOL $0A77 snake_speed
COMMENT $0A7A get the limit of snake movement before turing again
FORCE_SYMBOL $0A7A SNAKE_GO_LIMIT
COMMENT $0A7C and store it
FORCE_SYMBOL $0A7C snake_gone
COMMENT $0A7F restore X
COMMENT $0A81 done with snake
COMMENT $0A83 load old sprite offsets
FORCE_NO_SYMBOL $0A83
COMMENT $0A85 negate them (A)
COMMENT $0A86 negate them (B)
COMMENT $0A87 add y position to old sprite offset y
FORCE_SYMBOL $0A87 snake_pos
COMMENT $0A8A add x position to old sprite offset x
COMMENT $0A8D load new object definition
FORCE_SYMBOL $0A8D snake3a_object
COMMENT $0A90 add new sprite offset y
FORCE_NO_SYMBOL $0A90
COMMENT $0A92 add new sprite offset x
FORCE_NO_SYMBOL $0A92
COMMENT $0A94 and store the corrected position
FORCE_SYMBOL $0A94 snake_pos
COMMENT $0A97 store new object definition
FORCE_SYMBOL $0A97 snake_object
COMMENT $0A9A load new animation counter start
FORCE_NO_SYMBOL $0A9A
COMMENT $0A9C and set it in object list
FORCE_SYMBOL $0A9C snake_anim_counter
COMMENT $0A9F now go to opposite direction -1 equal log speed
FORCE_SYMBOL $0A9F snake_speed
COMMENT $0AA2 minus another to be 1 step faster
FORCE_SYMBOL $0AA2 snake_speed
COMMENT $0AA5 get the limit of snake movement before turing again
FORCE_SYMBOL $0AA5 SNAKE_GO_LIMIT
COMMENT $0AA7 and store it
FORCE_SYMBOL $0AA7 snake_gone
COMMENT $0AAA restore X
COMMENT $0AAC done with snake, on turn, no animation check is needed
COMMENT $0AAE decrease animation counter
COMMENT $0AB0 if zero, we must initialize new animation phase
COMMENT $0AB2 save X
COMMENT_LINE $0AB4 snake animation change
COMMENT $0AB4 load old sprite offsets
FORCE_NO_SYMBOL $0AB4
COMMENT $0AB6 negate them (A)
COMMENT $0AB7 negate them (B)
COMMENT $0AB8 add y position to old sprite offset y
COMMENT $0ABA add x position to old sprite offset x
COMMENT $0ABC load new object definition
FORCE_NO_SYMBOL $0ABC
COMMENT $0ABE add new sprite offset y
FORCE_NO_SYMBOL $0ABE
COMMENT $0AC0 add new sprite offset x
FORCE_NO_SYMBOL $0AC0
COMMENT $0AC2 and store the corrected position
COMMENT $0AC4 store new object definition to object list
COMMENT $0AC6 load new animation counter start
FORCE_NO_SYMBOL $0AC6
COMMENT $0AC8 and set it in object list
COMMENT $0ACA restore X
COMMENT_LINE $0ACC in move stuff end
COMMENT $0ACC load object vector list to X,
FORCE_NO_SYMBOL $0ACC
COMMENT $0ACE load offset of vector list draw
COMMENT $0AD0 4=JMP [], 2=LDD ,X++
FORCE_SYMBOL $0AD3 i_jump
COMMENT $0AD6 A bit for timer, B scale
COMMENT $0AD9 wait for timer to finnish move to
FORCE_SYMBOL $0AD9 VIA_int_flags
COMMENT_LINE $0ADD if not allready
COMMENT $0ADD scale for sprite
COMMENT $0ADD move to time 1 lo, this means scaling
FORCE_SYMBOL $0ADD VIA_t1_cnt_lo
COMMENT $0ADF (2)
COMMENT $0AE1 (2) [4] Send Y to A/D
FORCE_SYMBOL $0AE1 VIA_port_a
COMMENT $0AE3 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0AE3 VIA_port_b
COMMENT $0AE5 (4)
FORCE_SYMBOL $0AE5 i_jump
COMMENT $0AE9 [6] Disable mux
FORCE_SYMBOL $0AE9 VIA_port_b
COMMENT $0AEB [6] Send X to A/D
FORCE_SYMBOL $0AEB VIA_port_a
COMMENT $0AED [6] Put pattern in shift register
FORCE_SYMBOL $0AED VIA_shift_reg
COMMENT $0AEF [4] enable timer 1
FORCE_SYMBOL $0AEF VIA_t1_cnt_hi
COMMENT $0AF1 [8] load Y coordinate to A, X coordinate to B
COMMENT $0AF3 [4] Send Y to A/D
FORCE_SYMBOL $0AF3 VIA_port_a
COMMENT $0AF5 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0AF5 VIA_port_b
COMMENT $0AF7 [4] turn the lights off
FORCE_SYMBOL $0AF7 VIA_shift_reg
COMMENT $0AF9 [6] Disable mux
FORCE_SYMBOL $0AF9 VIA_port_b
COMMENT $0AFB [6] Send X to A/D
FORCE_SYMBOL $0AFB VIA_port_a
COMMENT $0AFD [6] Put pattern in shift register
FORCE_SYMBOL $0AFD VIA_shift_reg
COMMENT $0AFF [4] enable timer 1
FORCE_SYMBOL $0AFF VIA_t1_cnt_hi
COMMENT $0B01 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B03 [4] Send Y to A/D
FORCE_SYMBOL $0B03 VIA_port_a
COMMENT $0B05 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B05 VIA_port_b
COMMENT $0B07 [4] turn the lights off
FORCE_SYMBOL $0B07 VIA_shift_reg
COMMENT $0B09 [6] Disable mux
FORCE_SYMBOL $0B09 VIA_port_b
COMMENT $0B0B [6] Send X to A/D
FORCE_SYMBOL $0B0B VIA_port_a
COMMENT $0B0D [6] Put pattern in shift register
FORCE_SYMBOL $0B0D VIA_shift_reg
COMMENT $0B0F [4] enable timer 1
FORCE_SYMBOL $0B0F VIA_t1_cnt_hi
COMMENT $0B11 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B13 [4] Send Y to A/D
FORCE_SYMBOL $0B13 VIA_port_a
COMMENT $0B15 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B15 VIA_port_b
COMMENT $0B17 [4] turn the lights off
FORCE_SYMBOL $0B17 VIA_shift_reg
COMMENT $0B19 [6] Disable mux
FORCE_SYMBOL $0B19 VIA_port_b
COMMENT $0B1B [6] Send X to A/D
FORCE_SYMBOL $0B1B VIA_port_a
COMMENT $0B1D [6] Put pattern in shift register
FORCE_SYMBOL $0B1D VIA_shift_reg
COMMENT $0B1F [4] enable timer 1
FORCE_SYMBOL $0B1F VIA_t1_cnt_hi
COMMENT $0B21 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B23 [4] Send Y to A/D
FORCE_SYMBOL $0B23 VIA_port_a
COMMENT $0B25 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B25 VIA_port_b
COMMENT $0B27 [4] turn the lights off
FORCE_SYMBOL $0B27 VIA_shift_reg
COMMENT $0B29 [6] Disable mux
FORCE_SYMBOL $0B29 VIA_port_b
COMMENT $0B2B [6] Send X to A/D
FORCE_SYMBOL $0B2B VIA_port_a
COMMENT $0B2D [6] Put pattern in shift register
FORCE_SYMBOL $0B2D VIA_shift_reg
COMMENT $0B2F [4] enable timer 1
FORCE_SYMBOL $0B2F VIA_t1_cnt_hi
COMMENT $0B31 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B33 [4] Send Y to A/D
FORCE_SYMBOL $0B33 VIA_port_a
COMMENT $0B35 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B35 VIA_port_b
COMMENT $0B37 [4] turn the lights off
FORCE_SYMBOL $0B37 VIA_shift_reg
COMMENT $0B39 [6] Disable mux
FORCE_SYMBOL $0B39 VIA_port_b
COMMENT $0B3B [6] Send X to A/D
FORCE_SYMBOL $0B3B VIA_port_a
COMMENT $0B3D [6] Put pattern in shift register
FORCE_SYMBOL $0B3D VIA_shift_reg
COMMENT $0B3F [4] enable timer 1
FORCE_SYMBOL $0B3F VIA_t1_cnt_hi
COMMENT $0B41 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B43 [4] Send Y to A/D
FORCE_SYMBOL $0B43 VIA_port_a
COMMENT $0B45 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B45 VIA_port_b
COMMENT $0B47 [4] turn the lights off
FORCE_SYMBOL $0B47 VIA_shift_reg
COMMENT $0B49 [6] Disable mux
FORCE_SYMBOL $0B49 VIA_port_b
COMMENT $0B4B [6] Send X to A/D
FORCE_SYMBOL $0B4B VIA_port_a
COMMENT $0B4D [6] Put pattern in shift register
FORCE_SYMBOL $0B4D VIA_shift_reg
COMMENT $0B4F [4] enable timer 1
FORCE_SYMBOL $0B4F VIA_t1_cnt_hi
COMMENT $0B51 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B53 [4] Send Y to A/D
FORCE_SYMBOL $0B53 VIA_port_a
COMMENT $0B55 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B55 VIA_port_b
COMMENT $0B57 [4] turn the lights off
FORCE_SYMBOL $0B57 VIA_shift_reg
COMMENT $0B59 [6] Disable mux
FORCE_SYMBOL $0B59 VIA_port_b
COMMENT $0B5B [6] Send X to A/D
FORCE_SYMBOL $0B5B VIA_port_a
COMMENT $0B5D [6] Put pattern in shift register
FORCE_SYMBOL $0B5D VIA_shift_reg
COMMENT $0B5F [4] enable timer 1
FORCE_SYMBOL $0B5F VIA_t1_cnt_hi
COMMENT $0B61 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B63 [4] Send Y to A/D
FORCE_SYMBOL $0B63 VIA_port_a
COMMENT $0B65 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B65 VIA_port_b
COMMENT $0B67 [4] turn the lights off
FORCE_SYMBOL $0B67 VIA_shift_reg
COMMENT $0B69 [6] Disable mux
FORCE_SYMBOL $0B69 VIA_port_b
COMMENT $0B6B [6] Send X to A/D
FORCE_SYMBOL $0B6B VIA_port_a
COMMENT $0B6D [6] Put pattern in shift register
FORCE_SYMBOL $0B6D VIA_shift_reg
COMMENT $0B6F [4] enable timer 1
FORCE_SYMBOL $0B6F VIA_t1_cnt_hi
COMMENT $0B71 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B73 [4] Send Y to A/D
FORCE_SYMBOL $0B73 VIA_port_a
COMMENT $0B75 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B75 VIA_port_b
COMMENT $0B77 [4] turn the lights off
FORCE_SYMBOL $0B77 VIA_shift_reg
COMMENT $0B79 [6] Disable mux
FORCE_SYMBOL $0B79 VIA_port_b
COMMENT $0B7B [6] Send X to A/D
FORCE_SYMBOL $0B7B VIA_port_a
COMMENT $0B7D [6] Put pattern in shift register
FORCE_SYMBOL $0B7D VIA_shift_reg
COMMENT $0B7F [4] enable timer 1
FORCE_SYMBOL $0B7F VIA_t1_cnt_hi
COMMENT $0B81 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B83 [4] Send Y to A/D
FORCE_SYMBOL $0B83 VIA_port_a
COMMENT $0B85 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B85 VIA_port_b
COMMENT $0B87 [4] turn the lights off
FORCE_SYMBOL $0B87 VIA_shift_reg
COMMENT $0B89 [6] Disable mux
FORCE_SYMBOL $0B89 VIA_port_b
COMMENT $0B8B [6] Send X to A/D
FORCE_SYMBOL $0B8B VIA_port_a
COMMENT $0B8D [6] Put pattern in shift register
FORCE_SYMBOL $0B8D VIA_shift_reg
COMMENT $0B8F [4] enable timer 1
FORCE_SYMBOL $0B8F VIA_t1_cnt_hi
COMMENT_LINE $0B94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B94 independent code section
COMMENT_LINE $0B94 remove/display otter
COMMENT $0B94 is there any otter stuff at all?
FORCE_SYMBOL $0B94 otter_status
COMMENT $0B97 no?, than go on
COMMENT $0B9B [4] turn the lights off
FORCE_SYMBOL $0B9B VIA_shift_reg
COMMENT $0B9D croco is waiting to be displayed
FORCE_SYMBOL $0B9D IS_WAITING
COMMENT $0B9F if zero, do nothing
COMMENT_LINE $0BA3 otter is allready displayed, must check if we should destroy it...
COMMENT $0BA3 load object list address of object past otter
FORCE_SYMBOL $0BA3 otter_log_past
COMMENT $0BA6 and load the position of otter now
COMMENT $0BA9 compare to log pos
FORCE_NO_SYMBOL $0BA9
COMMENT $0BAB go to display if otter higher log
COMMENT_LINE $0BAD here when otter pos smaller log pos
COMMENT $0BAD now add the hardcoded length plus some (5) extra 'pixel'
COMMENT $0BAF compare to log pos
FORCE_NO_SYMBOL $0BAF
COMMENT $0BB1 if still lower, than display
COMMENT_LINE $0BB3 otherwise if now greater, than a 'collision' with log happened
COMMENT_LINE $0BB3 now destroy otter
COMMENT $0BB3 reload the otter timer
FORCE_SYMBOL $0BB3 otter_timer_start
COMMENT $0BB6 and store it
FORCE_SYMBOL $0BB6 otter_timer
COMMENT $0BB9 IS WAITING
FORCE_SYMBOL $0BB9 otter_status
COMMENT $0BBC and go to done
COMMENT_LINE $0BBF ok, otter is available and still displayed...
COMMENT_LINE $0BBF first let us look if there is afrog to be eaten... :-)
COMMENT $0BBF go to 0,0
FORCE_NO_SYMBOL $0BBF
COMMENT $0BC1 /BLANK low and /ZERO low
FORCE_SYMBOL $0BC1 VIA_cntl
COMMENT $0BC3 what band are we on now ?
FORCE_SYMBOL $0BC3 otter_band
COMMENT $0BC6 plus one to compare with frog band
COMMENT $0BC7 compare with frog band
FORCE_SYMBOL $0BC7 frog_y_band
COMMENT $0BCA if not equal... do a simple otter display
COMMENT $0BCC load otter position
COMMENT $0BCF subtract frog position
FORCE_SYMBOL $0BCF frog_x
COMMENT $0BD2 if positive no collision is possible -> jump to display
COMMENT $0BD4 near 20
COMMENT $0BD6 if lower, than everything OK
COMMENT $0BD8 test if we are in death timer loop
COMMENT $0BDB frog is allready dead!
FORCE_SYMBOL $0BDD DP_to_C8
COMMENT $0BE0 die a DIE_MOLE kind of
FORCE_SYMBOL $0BE0 DIE_MOLE
FORCE_SYMBOL $0BE3 die_set_2
COMMENT_LINE $0BE6 ............................................................................
COMMENT_LINE $0BE6 this is actually the same as the code used in the main sprite loop
COMMENT_LINE $0BE6 just fitted for otter only...
COMMENT $0BE6 scale for game positioning
FORCE_SYMBOL $0BE6 SCALE_FACTOR_GAME
COMMENT $0BE8 move to time 1 lo, this means scaling
FORCE_SYMBOL $0BE8 VIA_t1_cnt_lo
COMMENT $0BEA load otter position
FORCE_SYMBOL $0BEA otter_pos
COMMENT_LINE $0BED move to
COMMENT $0BED Store Y in D/A register
FORCE_SYMBOL $0BED VIA_port_a
COMMENT $0BEF Blank low, zero high?
FORCE_NO_SYMBOL $0BEF
FORCE_SYMBOL $0BF1 VIA_cntl
COMMENT $0BF4 Enable mux
FORCE_SYMBOL $0BF4 VIA_port_b
COMMENT $0BF6 Disable mux
FORCE_SYMBOL $0BF6 VIA_port_b
COMMENT $0BF8 Store X in D/A register
FORCE_SYMBOL $0BF8 VIA_port_a
COMMENT $0BFA enable timer
FORCE_SYMBOL $0BFA VIA_t1_cnt_hi
COMMENT_LINE $0BFC in move stuff start
COMMENT $0BFC load otter position
FORCE_SYMBOL $0BFC otter_pos
COMMENT $0BFF add the speed
FORCE_SYMBOL $0BFF otter_speed
COMMENT $0C02 is on left side out of bounds?
FORCE_SYMBOL $0C02 BOUNDARY_LO
COMMENT $0C04 no, than no coordinate fiddling
COMMENT $0C08 don't check for right out of bounds now
COMMENT $0C0A check if we are out of bounds on the right
FORCE_SYMBOL $0C0A BOUNDARY_HI
COMMENT $0C0C no? than go on
COMMENT $0C10 store the new x position
COMMENT $0C13 load the otter object to U
FORCE_SYMBOL $0C13 otter_object
COMMENT $0C16 decrease animation counter
FORCE_SYMBOL $0C16 otter_anim_counter
COMMENT $0C19 if zero, we must initialize new animation phase
COMMENT $0C1B load old sprite offsets
FORCE_NO_SYMBOL $0C1B
COMMENT $0C1D negate them (A)
COMMENT $0C1E negate them (B)
COMMENT $0C1F add y position to old sprite offset y
FORCE_SYMBOL $0C1F otter_pos
COMMENT $0C22 add x position to old sprite offset x
COMMENT $0C25 load new object definition
FORCE_NO_SYMBOL $0C25
COMMENT $0C27 add new sprite offset y
FORCE_NO_SYMBOL $0C27
COMMENT $0C29 add new sprite offset x
FORCE_NO_SYMBOL $0C29
COMMENT $0C2B and store the corrected position
FORCE_SYMBOL $0C2B otter_pos
COMMENT $0C2F store new object definition to object list
FORCE_SYMBOL $0C2F otter_object
COMMENT $0C32 load new animation counter start
FORCE_NO_SYMBOL $0C32
COMMENT $0C34 and set it in object list
FORCE_SYMBOL $0C34 otter_anim_counter
COMMENT $0C37 load object vector list to X,
FORCE_NO_SYMBOL $0C37
COMMENT_LINE $0C39 in move stuff end
COMMENT $0C39 A= scale, B = timer IRQ...
COMMENT $0C3C Wait for T1 to time out
FORCE_SYMBOL $0C3C VIA_int_flags
COMMENT_LINE $0C40 move done
COMMENT $0C40 scale for sprite
COMMENT $0C40 move to time 1 lo, this means scaling
FORCE_SYMBOL $0C40 VIA_t1_cnt_lo
COMMENT $0C42 draw sprite
FORCE_NO_SYMBOL $0C44
COMMENT $0C48 Send Y to A/D
FORCE_SYMBOL $0C48 VIA_port_a
FORCE_SYMBOL $0C4A VIA_port_b
COMMENT $0C4E Disable mux
FORCE_SYMBOL $0C4E VIA_port_b
COMMENT $0C50 Send X to A/D
FORCE_SYMBOL $0C50 VIA_port_a
COMMENT $0C52 Put pattern in shift register
FORCE_SYMBOL $0C52 VIA_shift_reg
COMMENT $0C54 enable timer 1
FORCE_SYMBOL $0C54 VIA_t1_cnt_hi
COMMENT $0C56 6
COMMENT $0C58 7
FORCE_NO_SYMBOL $0C58
COMMENT $0C5B 3 Go back for more points
COMMENT $0C5D Send Y to A/D
FORCE_SYMBOL $0C5D VIA_port_a
FORCE_SYMBOL $0C5F VIA_shift_reg
FORCE_SYMBOL $0C61 VIA_port_b
COMMENT $0C65 Disable mux
FORCE_SYMBOL $0C65 VIA_port_b
COMMENT $0C67 Send X to A/D
FORCE_SYMBOL $0C67 VIA_port_a
COMMENT $0C69 Put pattern in shift register
FORCE_SYMBOL $0C69 VIA_shift_reg
COMMENT $0C6B enable timer 1
FORCE_SYMBOL $0C6B VIA_t1_cnt_hi
COMMENT $0C6D 6
COMMENT $0C6F 7
FORCE_NO_SYMBOL $0C6F
COMMENT $0C72 3 Go back for more points
COMMENT_LINE $0C74 NOP                     ; 2
COMMENT_LINE $0C74 STA     <VIA_shift_reg
COMMENT $0C74 finnish otter
FORCE_SYMBOL $0C74 VIA_shift_reg
COMMENT_LINE $0C76 ............................................................................
COMMENT_LINE $0C76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0C76 entry for 'LEVEL DONE' display
COMMENT_LINE $0C76 only the 'sprites' are displayed (and moved) below...
COMMENT_LINE $0C76 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0C76 independent code section
COMMENT_LINE $0C77 DRAW ALL LEVEL SPRITES
COMMENT_LINE $0C77 now drawing all sprites (or object, whatever you call them)
COMMENT_LINE $0C77 isn't that a nice short routine, to draw all sprites,
COMMENT_LINE $0C77 move them, do an out of bounds checking,
COMMENT_LINE $0C77 intensity changing, and initializing
COMMENT_LINE $0C77 new animation sequences?
COMMENT_LINE $0C77 actually the animation initialization takes most of the code
COMMENT_LINE $0C77 well, split the makros... :-) and you'll see that it
COMMENT_LINE $0C77 is not that short afterall...
COMMENT $0C77 load the address to U, start of list of
COMMENT_LINE $0C7A all objects (sprites) for this level
COMMENT_LINE $0C7A and their position
COMMENT $0C7A load new list object
FORCE_SYMBOL $0C7A object_list
COMMENT_LINE $0C7E U pointing to Y coordinate now
COMMENT_LINE $0C7E Y pointing to object structure AND
COMMENT_LINE $0C7E Y pointing to x-speed in object structure
COMMENT $0000 a different scale again... still very high :-(
FORCE_SYMBOL $0C7E SCALE_FACTOR_GAME
COMMENT $0C80 move to time 1 lo, this means scaling
FORCE_SYMBOL $0C80 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $0C82
COMMENT $0C84 [4] turn the lights off
FORCE_SYMBOL $0C84 VIA_shift_reg
COMMENT $0C86 /BLANK low and /ZERO low
FORCE_SYMBOL $0C86 VIA_cntl
COMMENT_LINE $0C88 _ZERO_VECTOR_BEAM         ; go allways to zero, is sort of bad,
COMMENT_LINE $0C88 bad doing relativ offsets need some
COMMENT_LINE $0C88 calculating AND can be MUCH WORSE
COMMENT_LINE $0C88 at least I know excactly where I am...
COMMENT $0C88 load y, x coordinate from object_list to
FORCE_NO_SYMBOL $0C88
COMMENT_LINE $0C8A A,B=D,
COMMENT_LINE $0C8A intensities of all sprites are the same, so no
COMMENT_LINE $0C8A setting is really needed!
COMMENT_LINE $0C8A LDA     9,Y                ; load intensity of sprite
COMMENT_LINE $0C8A MY_INTENSITY_A             ; change to intensity in A
COMMENT_LINE $0C8A fuck, now it really gets tricky, this used to be a makro, but due to
COMMENT_LINE $0C8A optimization I split the makro
COMMENT_LINE $0C8A notice:
COMMENT_LINE $0C8A during a positioning of a vector, there is a loop, where the program just
COMMENT_LINE $0C8A waits for the beam to reach the required position
COMMENT_LINE $0C8A it waits for the SCALE.
COMMENT_LINE $0C8A here I tweaked the move_to_d function for my purposes
COMMENT_LINE $0C8A i use an optimized 'version' of move_to_D (without the delays, losing
COMMENT_LINE $0C8A a little bit of accuracy)
COMMENT_LINE $0C8A since game positioning is done with a 'huge' scale factor ($91) there
COMMENT_LINE $0C8A is a whole lot of empty space in here, and that at EACH sprite.
COMMENT_LINE $0C8A I don't know yet how to use the time wasted here efficiently,
COMMENT_LINE $0C8A I should build a task handler for things like this :-)
COMMENT_LINE $0C8A anyway, the only thing done yet in (befor!) that loop is the
COMMENT_LINE $0C8A checking whether an animation occurs or not.
COMMENT_LINE $0C8A and now if the sprite is out of bounds
COMMENT_LINE $0C8A and girl and snake checking!!!
COMMENT_LINE $0C8A not much yet, but another 1000 cycles saved.
COMMENT_LINE $0C8A note: there can probably MUCH more been done during that waiting!!!
COMMENT_LINE $0C8A ;;;;;;;;;;;; NOW MOVE_TO_D
COMMENT_LINE $0C8A note: there are 2 or 3 cycles more that could be saved here
COMMENT_LINE $0C8A by optimizing, but the vectrex zeroing is NOT
COMMENT_LINE $0C8A fast enough, vectors are not positioned correctly than!!!
COMMENT $0C8A Store Y in D/A register
FORCE_SYMBOL $0C8A VIA_port_a
COMMENT $0C8C Enable mux, this sets the Y integrator
FORCE_SYMBOL $0C8C VIA_port_b
COMMENT $0C8E Blank low, zero high?
FORCE_NO_SYMBOL $0C8E
COMMENT $0C90 Disable mux
FORCE_SYMBOL $0C90 VIA_port_b
COMMENT $0C92 Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $0C92 VIA_port_a
COMMENT $0C94 Now zero is of... we can integrate!
FORCE_SYMBOL $0C94 VIA_cntl
COMMENT $0C96 enable timer, by accessing it!
FORCE_SYMBOL $0C96 VIA_t1_cnt_hi
COMMENT_LINE $0C98 here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $0C98 in move action here!
COMMENT $0C98 Increment U by 1
FORCE_NO_SYMBOL $0C98
COMMENT $0C9A add to B (x coordinate that is)
COMMENT_LINE $0C9C the speed value (in the list object,
COMMENT_LINE $0C9C e.g. car_1), increment Y by 1
COMMENT $0C9C is on left side out of bounds?
FORCE_SYMBOL $0C9C BOUNDARY_LO
COMMENT $0C9E no, than no coordinate fiddling
COMMENT $0CA2 don't check for right out of bounds now
COMMENT $0CA4 check if we are out of bounds on the right
FORCE_SYMBOL $0CA4 BOUNDARY_HI
COMMENT $0CA6 no? than go on
COMMENT_LINE $0CAA on each out of bounds a girl check is made...
COMMENT $0CAA save coordinates
FORCE_NO_SYMBOL $0CAC
COMMENT $0CB0 pretty for optimizing to use a makro :-)
COMMENT $0CB0 what's the girls status?
FORCE_SYMBOL $0CB0 girl_status
COMMENT $0CB2 no girl at all? than jump
COMMENT_LINE $0CB4 TFR     U,D               ; transfer object list address to D
COMMENT_LINE $0CB4 CMPA    girl_log_object   ; so that we can conveniently compare
COMMENT_LINE $0CB4 BNE     no_girl_          ; it to girl_log_object
COMMENT_LINE $0CB4 CMPB    girl_log_object+1 ; which contains the log a objectlist address
FORCE_SYMBOL $0CB4 girl_log_object
COMMENT $0CB7 if not the same, go to no_girl_
COMMENT $0CB9 what's the girls status?
FORCE_SYMBOL $0CB9 girl_status
COMMENT $0CBB we are waiting to be displayed
FORCE_SYMBOL $0CBB IS_WAITING
COMMENT $0CBD than go to might be displayed routine
COMMENT $0CBF if frogger carries girl,
FORCE_SYMBOL $0CBF IS_CARRIED
COMMENT $0CC1 do nothing
COMMENT_LINE $0CC3 now IS_DISPLAYED, resetting counter and reset status
COMMENT $0CC3 IS WAITING
FORCE_SYMBOL $0CC3 girl_status
COMMENT $0CC5 initiate the round counter
FORCE_SYMBOL $0CC5 girl_round_counter_reset
COMMENT $0CC7 store it
FORCE_SYMBOL $0CC7 girl_round_counter
COMMENT $0CC9 count down the round counter
FORCE_SYMBOL $0CC9 girl_round_counter
COMMENT $0CCB if not zero, than no girl will be displayed
COMMENT $0CCD IS DISPLAYED
FORCE_SYMBOL $0CCD girl_status
COMMENT $0CCF load girl object address
FORCE_SYMBOL $0CCF girl1a_object
COMMENT $0CD2 store it as first object
FORCE_SYMBOL $0CD2 girl_object
COMMENT_LINE $0CD4 now do positioning...
COMMENT $0CD4 the position of the log is on the stack
FORCE_NO_SYMBOL $0CD4
COMMENT $0CD6 get and store the X position
COMMENT $0CD8 y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0CD8
COMMENT $0CDA store y position
FORCE_SYMBOL $0CDA girl_pos
COMMENT $0CDC if we did girl, than no snake here!
COMMENT $0CDE what's the snake's status?
FORCE_SYMBOL $0CDE snake_status
COMMENT $0CE0 no snake at all? than jump
COMMENT_LINE $0CE2 TFR     U,D               ; transfer object list address to D
COMMENT_LINE $0CE2 CMPA    snake_log_object  ; so that we can conveniently compare
COMMENT_LINE $0CE2 BNE     no_snake_         ; it to girl_log_object
COMMENT_LINE $0CE2 CMPB    snake_log_object+1; which contains the log a objectlist address
FORCE_SYMBOL $0CE2 snake_log_object
COMMENT $0CE5 if not the same, go to no_snake_
COMMENT $0CE7 what's the snake's status?
FORCE_SYMBOL $0CE7 snake_status
COMMENT $0CE9 we are waiting to be displayed
FORCE_SYMBOL $0CE9 IS_WAITING
COMMENT $0CEB than go to might be displayed routine
COMMENT $0CED IS WAITING
FORCE_SYMBOL $0CED snake_status
COMMENT $0CEF initiate the round counter
FORCE_SYMBOL $0CEF snake_round_counter_reset
COMMENT $0CF1 store it
FORCE_SYMBOL $0CF1 snake_round_counter
COMMENT $0CF3 count down the round counter
FORCE_SYMBOL $0CF3 snake_round_counter
COMMENT $0CF5 if not zero, than no snake will be displayed
COMMENT $0CF7 IS DISPLAYED
FORCE_SYMBOL $0CF7 snake_status
COMMENT $0CF9 load snake object address
FORCE_SYMBOL $0CF9 snake1a_object
COMMENT $0CFC store it as first object
FORCE_SYMBOL $0CFC snake_object
COMMENT_LINE $0CFE now do positioning...
COMMENT $0CFE the position of the log is on the stack
FORCE_NO_SYMBOL $0CFE
COMMENT $0D00 get and store the X position
COMMENT $0D02 y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0D02
COMMENT $0D04 store y position
FORCE_SYMBOL $0D04 snake_pos
COMMENT $0D06 get the speed of snake start
FORCE_SYMBOL $0D06 snake_speed_start
COMMENT $0D08 store it
FORCE_SYMBOL $0D08 snake_speed
COMMENT $0D0A get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0D0C and store it
FORCE_SYMBOL $0D0C snake_gone
FORCE_NO_SYMBOL $0D0E
COMMENT $0D12 pretty for optimizing to use a makro :-)
COMMENT $0D12 restore coordinates
COMMENT $0D14 store the new x position, and increment U
COMMENT_LINE $0D16 (U points to animation)
COMMENT_LINE $0D16 now we do that animation checking
COMMENT $0D16 load object vector list to X,
FORCE_NO_SYMBOL $0D16
COMMENT $0D18 decrease animation counter
COMMENT $0D1A if zero, we must initialize new animation phase
COMMENT $0D1C load old sprite offsets
FORCE_NO_SYMBOL $0D1C
COMMENT $0D1E negate them (A)
COMMENT $0D1F negate them (B)
COMMENT $0D20 add y position to old sprite offset y
COMMENT $0D22 add x position to old sprite offset x
COMMENT $0D24 load new object definition
FORCE_NO_SYMBOL $0D24
COMMENT $0D27 add new sprite offset y
FORCE_NO_SYMBOL $0D27
COMMENT $0D29 add new sprite offset x
FORCE_NO_SYMBOL $0D29
COMMENT $0D2B and store the corrected position
COMMENT $0D2D store new object definition to object list
COMMENT $0D30 load new animation counter start
FORCE_NO_SYMBOL $0D30
COMMENT $0D32 and set it in object list
COMMENT $0D34 load new list object, increment U by 2
COMMENT $0D37 and do the next object  (or jump away)
COMMENT $0D3B load offset of vector list draw
COMMENT $0D3D 4=JMP [], 2=LDD ,X++
FORCE_SYMBOL $0D40 i_jump
COMMENT_LINE $0D43 in move action done
COMMENT $0D43 A= SCALE, B = Timer IRQ check
COMMENT_LINE $0D46 the following is the position checking loop
COMMENT_LINE $0D46 waiting till an interrupt occurs
COMMENT $0D46 test the bit
FORCE_SYMBOL $0D46 VIA_int_flags
COMMENT $0D48 if not zero, than loop
COMMENT $0D4A scale for sprite
COMMENT $0D4A move to time 1 lo, this means scaling
FORCE_SYMBOL $0D4A VIA_t1_cnt_lo
COMMENT $0D4C (2)
COMMENT $0D4E (2) [4] Send Y to A/D
FORCE_SYMBOL $0D4E VIA_port_a
COMMENT $0D50 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0D50 VIA_port_b
COMMENT $0D52 (4)
FORCE_SYMBOL $0D52 i_jump
COMMENT $0D56 [6] Disable mux
FORCE_SYMBOL $0D56 VIA_port_b
COMMENT $0D58 [6] Send X to A/D
FORCE_SYMBOL $0D58 VIA_port_a
COMMENT $0D5A [6] Put pattern in shift register
FORCE_SYMBOL $0D5A VIA_shift_reg
COMMENT $0D5C [4] enable timer 1
FORCE_SYMBOL $0D5C VIA_t1_cnt_hi
COMMENT $0D5E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D60 [4] Send Y to A/D
FORCE_SYMBOL $0D60 VIA_port_a
COMMENT $0D62 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0D62 VIA_port_b
COMMENT $0D64 [4] turn the lights off
FORCE_SYMBOL $0D64 VIA_shift_reg
COMMENT $0D66 [6] Disable mux
FORCE_SYMBOL $0D66 VIA_port_b
COMMENT $0D68 [6] Send X to A/D
FORCE_SYMBOL $0D68 VIA_port_a
COMMENT $0D6A [6] Put pattern in shift register
FORCE_SYMBOL $0D6A VIA_shift_reg
COMMENT $0D6C [4] enable timer 1
FORCE_SYMBOL $0D6C VIA_t1_cnt_hi
COMMENT $0D6E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D70 [4] Send Y to A/D
FORCE_SYMBOL $0D70 VIA_port_a
COMMENT $0D72 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0D72 VIA_port_b
COMMENT $0D74 [4] turn the lights off
FORCE_SYMBOL $0D74 VIA_shift_reg
COMMENT $0D76 [6] Disable mux
FORCE_SYMBOL $0D76 VIA_port_b
COMMENT $0D78 [6] Send X to A/D
FORCE_SYMBOL $0D78 VIA_port_a
COMMENT $0D7A [6] Put pattern in shift register
FORCE_SYMBOL $0D7A VIA_shift_reg
COMMENT $0D7C [4] enable timer 1
FORCE_SYMBOL $0D7C VIA_t1_cnt_hi
COMMENT $0D7E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D80 [4] Send Y to A/D
FORCE_SYMBOL $0D80 VIA_port_a
COMMENT $0D82 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0D82 VIA_port_b
COMMENT $0D84 [4] turn the lights off
FORCE_SYMBOL $0D84 VIA_shift_reg
COMMENT $0D86 [6] Disable mux
FORCE_SYMBOL $0D86 VIA_port_b
COMMENT $0D88 [6] Send X to A/D
FORCE_SYMBOL $0D88 VIA_port_a
COMMENT $0D8A [6] Put pattern in shift register
FORCE_SYMBOL $0D8A VIA_shift_reg
COMMENT $0D8C [4] enable timer 1
FORCE_SYMBOL $0D8C VIA_t1_cnt_hi
COMMENT $0D8E [8] load Y coordinate to A, X coordinate to B
COMMENT $0D90 [4] Send Y to A/D
FORCE_SYMBOL $0D90 VIA_port_a
COMMENT $0D92 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0D92 VIA_port_b
COMMENT $0D94 [4] turn the lights off
FORCE_SYMBOL $0D94 VIA_shift_reg
COMMENT $0D96 [6] Disable mux
FORCE_SYMBOL $0D96 VIA_port_b
COMMENT $0D98 [6] Send X to A/D
FORCE_SYMBOL $0D98 VIA_port_a
COMMENT $0D9A [6] Put pattern in shift register
FORCE_SYMBOL $0D9A VIA_shift_reg
COMMENT $0D9C [4] enable timer 1
FORCE_SYMBOL $0D9C VIA_t1_cnt_hi
COMMENT $0D9E [8] load Y coordinate to A, X coordinate to B
COMMENT $0DA0 [4] Send Y to A/D
FORCE_SYMBOL $0DA0 VIA_port_a
COMMENT $0DA2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DA2 VIA_port_b
COMMENT $0DA4 [4] turn the lights off
FORCE_SYMBOL $0DA4 VIA_shift_reg
COMMENT $0DA6 [6] Disable mux
FORCE_SYMBOL $0DA6 VIA_port_b
COMMENT $0DA8 [6] Send X to A/D
FORCE_SYMBOL $0DA8 VIA_port_a
COMMENT $0DAA [6] Put pattern in shift register
FORCE_SYMBOL $0DAA VIA_shift_reg
COMMENT $0DAC [4] enable timer 1
FORCE_SYMBOL $0DAC VIA_t1_cnt_hi
COMMENT $0DAE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DB0 [4] Send Y to A/D
FORCE_SYMBOL $0DB0 VIA_port_a
COMMENT $0DB2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DB2 VIA_port_b
COMMENT $0DB4 [4] turn the lights off
FORCE_SYMBOL $0DB4 VIA_shift_reg
COMMENT $0DB6 [6] Disable mux
FORCE_SYMBOL $0DB6 VIA_port_b
COMMENT $0DB8 [6] Send X to A/D
FORCE_SYMBOL $0DB8 VIA_port_a
COMMENT $0DBA [6] Put pattern in shift register
FORCE_SYMBOL $0DBA VIA_shift_reg
COMMENT $0DBC [4] enable timer 1
FORCE_SYMBOL $0DBC VIA_t1_cnt_hi
COMMENT $0DBE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DC0 [4] Send Y to A/D
FORCE_SYMBOL $0DC0 VIA_port_a
COMMENT $0DC2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DC2 VIA_port_b
COMMENT $0DC4 [4] turn the lights off
FORCE_SYMBOL $0DC4 VIA_shift_reg
COMMENT $0DC6 [6] Disable mux
FORCE_SYMBOL $0DC6 VIA_port_b
COMMENT $0DC8 [6] Send X to A/D
FORCE_SYMBOL $0DC8 VIA_port_a
COMMENT $0DCA [6] Put pattern in shift register
FORCE_SYMBOL $0DCA VIA_shift_reg
COMMENT $0DCC [4] enable timer 1
FORCE_SYMBOL $0DCC VIA_t1_cnt_hi
COMMENT $0DCE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DD0 [4] Send Y to A/D
FORCE_SYMBOL $0DD0 VIA_port_a
COMMENT $0DD2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DD2 VIA_port_b
COMMENT $0DD4 [4] turn the lights off
FORCE_SYMBOL $0DD4 VIA_shift_reg
COMMENT $0DD6 [6] Disable mux
FORCE_SYMBOL $0DD6 VIA_port_b
COMMENT $0DD8 [6] Send X to A/D
FORCE_SYMBOL $0DD8 VIA_port_a
COMMENT $0DDA [6] Put pattern in shift register
FORCE_SYMBOL $0DDA VIA_shift_reg
COMMENT $0DDC [4] enable timer 1
FORCE_SYMBOL $0DDC VIA_t1_cnt_hi
COMMENT $0DDE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DE0 [4] Send Y to A/D
FORCE_SYMBOL $0DE0 VIA_port_a
COMMENT $0DE2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DE2 VIA_port_b
COMMENT $0DE4 [4] turn the lights off
FORCE_SYMBOL $0DE4 VIA_shift_reg
COMMENT $0DE6 [6] Disable mux
FORCE_SYMBOL $0DE6 VIA_port_b
COMMENT $0DE8 [6] Send X to A/D
FORCE_SYMBOL $0DE8 VIA_port_a
COMMENT $0DEA [6] Put pattern in shift register
FORCE_SYMBOL $0DEA VIA_shift_reg
COMMENT $0DEC [4] enable timer 1
FORCE_SYMBOL $0DEC VIA_t1_cnt_hi
COMMENT $0DEE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DF0 [4] Send Y to A/D
FORCE_SYMBOL $0DF0 VIA_port_a
COMMENT $0DF2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0DF2 VIA_port_b
COMMENT $0DF4 [4] turn the lights off
FORCE_SYMBOL $0DF4 VIA_shift_reg
COMMENT $0DF6 [6] Disable mux
FORCE_SYMBOL $0DF6 VIA_port_b
COMMENT $0DF8 [6] Send X to A/D
FORCE_SYMBOL $0DF8 VIA_port_a
COMMENT $0DFA [6] Put pattern in shift register
FORCE_SYMBOL $0DFA VIA_shift_reg
COMMENT $0DFC [4] enable timer 1
FORCE_SYMBOL $0DFC VIA_t1_cnt_hi
COMMENT $0DFE [8] load Y coordinate to A, X coordinate to B
COMMENT $0E00 [4] Send Y to A/D
FORCE_SYMBOL $0E00 VIA_port_a
COMMENT $0E02 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E02 VIA_port_b
COMMENT $0E04 [4] turn the lights off
FORCE_SYMBOL $0E04 VIA_shift_reg
COMMENT $0E06 [6] Disable mux
FORCE_SYMBOL $0E06 VIA_port_b
COMMENT $0E08 [6] Send X to A/D
FORCE_SYMBOL $0E08 VIA_port_a
COMMENT $0E0A [6] Put pattern in shift register
FORCE_SYMBOL $0E0A VIA_shift_reg
COMMENT $0E0C [4] enable timer 1
FORCE_SYMBOL $0E0C VIA_t1_cnt_hi
COMMENT $0E0E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E10 [4] Send Y to A/D
FORCE_SYMBOL $0E10 VIA_port_a
COMMENT $0E12 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E12 VIA_port_b
COMMENT $0E14 [4] turn the lights off
FORCE_SYMBOL $0E14 VIA_shift_reg
COMMENT $0E16 [6] Disable mux
FORCE_SYMBOL $0E16 VIA_port_b
COMMENT $0E18 [6] Send X to A/D
FORCE_SYMBOL $0E18 VIA_port_a
COMMENT $0E1A [6] Put pattern in shift register
FORCE_SYMBOL $0E1A VIA_shift_reg
COMMENT $0E1C [4] enable timer 1
FORCE_SYMBOL $0E1C VIA_t1_cnt_hi
COMMENT $0E1E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E20 [4] Send Y to A/D
FORCE_SYMBOL $0E20 VIA_port_a
COMMENT $0E22 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E22 VIA_port_b
COMMENT $0E24 [4] turn the lights off
FORCE_SYMBOL $0E24 VIA_shift_reg
COMMENT $0E26 [6] Disable mux
FORCE_SYMBOL $0E26 VIA_port_b
COMMENT $0E28 [6] Send X to A/D
FORCE_SYMBOL $0E28 VIA_port_a
COMMENT $0E2A [6] Put pattern in shift register
FORCE_SYMBOL $0E2A VIA_shift_reg
COMMENT $0E2C [4] enable timer 1
FORCE_SYMBOL $0E2C VIA_t1_cnt_hi
COMMENT $0E2E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E30 [4] Send Y to A/D
FORCE_SYMBOL $0E30 VIA_port_a
COMMENT $0E32 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E32 VIA_port_b
COMMENT $0E34 [4] turn the lights off
FORCE_SYMBOL $0E34 VIA_shift_reg
COMMENT $0E36 [6] Disable mux
FORCE_SYMBOL $0E36 VIA_port_b
COMMENT $0E38 [6] Send X to A/D
FORCE_SYMBOL $0E38 VIA_port_a
COMMENT $0E3A [6] Put pattern in shift register
FORCE_SYMBOL $0E3A VIA_shift_reg
COMMENT $0E3C [4] enable timer 1
FORCE_SYMBOL $0E3C VIA_t1_cnt_hi
COMMENT $0E3E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E40 [4] Send Y to A/D
FORCE_SYMBOL $0E40 VIA_port_a
COMMENT $0E42 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E42 VIA_port_b
COMMENT $0E44 [4] turn the lights off
FORCE_SYMBOL $0E44 VIA_shift_reg
COMMENT $0E46 [6] Disable mux
FORCE_SYMBOL $0E46 VIA_port_b
COMMENT $0E48 [6] Send X to A/D
FORCE_SYMBOL $0E48 VIA_port_a
COMMENT $0E4A [6] Put pattern in shift register
FORCE_SYMBOL $0E4A VIA_shift_reg
COMMENT $0E4C [4] enable timer 1
FORCE_SYMBOL $0E4C VIA_t1_cnt_hi
COMMENT $0E4E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E50 [4] Send Y to A/D
FORCE_SYMBOL $0E50 VIA_port_a
COMMENT $0E52 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E52 VIA_port_b
COMMENT $0E54 [4] turn the lights off
FORCE_SYMBOL $0E54 VIA_shift_reg
COMMENT $0E56 [6] Disable mux
FORCE_SYMBOL $0E56 VIA_port_b
COMMENT $0E58 [6] Send X to A/D
FORCE_SYMBOL $0E58 VIA_port_a
COMMENT $0E5A [6] Put pattern in shift register
FORCE_SYMBOL $0E5A VIA_shift_reg
COMMENT $0E5C [4] enable timer 1
FORCE_SYMBOL $0E5C VIA_t1_cnt_hi
COMMENT $0E5E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E60 [4] Send Y to A/D
FORCE_SYMBOL $0E60 VIA_port_a
COMMENT $0E62 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E62 VIA_port_b
COMMENT $0E64 [4] turn the lights off
FORCE_SYMBOL $0E64 VIA_shift_reg
COMMENT $0E66 [6] Disable mux
FORCE_SYMBOL $0E66 VIA_port_b
COMMENT $0E68 [6] Send X to A/D
FORCE_SYMBOL $0E68 VIA_port_a
COMMENT $0E6A [6] Put pattern in shift register
FORCE_SYMBOL $0E6A VIA_shift_reg
COMMENT $0E6C [4] enable timer 1
FORCE_SYMBOL $0E6C VIA_t1_cnt_hi
COMMENT $0E6E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E70 [4] Send Y to A/D
FORCE_SYMBOL $0E70 VIA_port_a
COMMENT $0E72 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E72 VIA_port_b
COMMENT $0E74 [4] turn the lights off
FORCE_SYMBOL $0E74 VIA_shift_reg
COMMENT $0E76 [6] Disable mux
FORCE_SYMBOL $0E76 VIA_port_b
COMMENT $0E78 [6] Send X to A/D
FORCE_SYMBOL $0E78 VIA_port_a
COMMENT $0E7A [6] Put pattern in shift register
FORCE_SYMBOL $0E7A VIA_shift_reg
COMMENT $0E7C [4] enable timer 1
FORCE_SYMBOL $0E7C VIA_t1_cnt_hi
COMMENT $0E7E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E80 [4] Send Y to A/D
FORCE_SYMBOL $0E80 VIA_port_a
COMMENT $0E82 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E82 VIA_port_b
COMMENT $0E84 [4] turn the lights off
FORCE_SYMBOL $0E84 VIA_shift_reg
COMMENT $0E86 [6] Disable mux
FORCE_SYMBOL $0E86 VIA_port_b
COMMENT $0E88 [6] Send X to A/D
FORCE_SYMBOL $0E88 VIA_port_a
COMMENT $0E8A [6] Put pattern in shift register
FORCE_SYMBOL $0E8A VIA_shift_reg
COMMENT $0E8C [4] enable timer 1
FORCE_SYMBOL $0E8C VIA_t1_cnt_hi
COMMENT $0E8E [8] load Y coordinate to A, X coordinate to B
COMMENT $0E90 [4] Send Y to A/D
FORCE_SYMBOL $0E90 VIA_port_a
COMMENT $0E92 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0E92 VIA_port_b
COMMENT $0E94 [4] turn the lights off
FORCE_SYMBOL $0E94 VIA_shift_reg
COMMENT $0E96 [6] Disable mux
FORCE_SYMBOL $0E96 VIA_port_b
COMMENT $0E98 [6] Send X to A/D
FORCE_SYMBOL $0E98 VIA_port_a
COMMENT $0E9A [6] Put pattern in shift register
FORCE_SYMBOL $0E9A VIA_shift_reg
COMMENT $0E9C [4] enable timer 1
FORCE_SYMBOL $0E9C VIA_t1_cnt_hi
COMMENT $0E9E [8] load Y coordinate to A, X coordinate to B
COMMENT $0EA0 [4] Send Y to A/D
FORCE_SYMBOL $0EA0 VIA_port_a
COMMENT $0EA2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0EA2 VIA_port_b
COMMENT $0EA4 [4] turn the lights off
FORCE_SYMBOL $0EA4 VIA_shift_reg
COMMENT $0EA6 [6] Disable mux
FORCE_SYMBOL $0EA6 VIA_port_b
COMMENT $0EA8 [6] Send X to A/D
FORCE_SYMBOL $0EA8 VIA_port_a
COMMENT $0EAA [6] Put pattern in shift register
FORCE_SYMBOL $0EAA VIA_shift_reg
COMMENT $0EAC [4] enable timer 1
FORCE_SYMBOL $0EAC VIA_t1_cnt_hi
COMMENT $0EAE [8] load Y coordinate to A, X coordinate to B
COMMENT $0EB0 [4] Send Y to A/D
FORCE_SYMBOL $0EB0 VIA_port_a
COMMENT $0EB2 [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0EB2 VIA_port_b
COMMENT $0EB4 [4] turn the lights off
FORCE_SYMBOL $0EB4 VIA_shift_reg
COMMENT $0EB6 [6] Disable mux
FORCE_SYMBOL $0EB6 VIA_port_b
COMMENT $0EB8 [6] Send X to A/D
FORCE_SYMBOL $0EB8 VIA_port_a
COMMENT $0EBA [6] Put pattern in shift register
FORCE_SYMBOL $0EBA VIA_shift_reg
COMMENT $0EBC [4] enable timer 1
FORCE_SYMBOL $0EBC VIA_t1_cnt_hi
COMMENT $0EC1 and do the next
COMMENT_LINE $0EC4 here if no new animation is to be done
COMMENT $0EC4 load offset of vector list draw
COMMENT $0EC6 4=JMP [], 2=LDD ,X++
FORCE_SYMBOL $0EC9 i_jump
COMMENT $0ECC A= SCALE, B = Timer IRQ check
COMMENT_LINE $0ECF the following is the position checking loop
COMMENT_LINE $0ECF waiting till an interrupt occurs
COMMENT $0ECF test the bit
FORCE_SYMBOL $0ECF VIA_int_flags
COMMENT $0ED1 if not zero, than loop
COMMENT $0ED3 scale for sprite
COMMENT $0ED3 move to time 1 lo, this means scaling
FORCE_SYMBOL $0ED3 VIA_t1_cnt_lo
COMMENT $0ED5 (2)
COMMENT $0ED7 (2) [4] Send Y to A/D
FORCE_SYMBOL $0ED7 VIA_port_a
COMMENT $0ED9 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0ED9 VIA_port_b
COMMENT $0EDB (4)
FORCE_SYMBOL $0EDB i_jump
COMMENT $0EDF [6] Disable mux
FORCE_SYMBOL $0EDF VIA_port_b
COMMENT $0EE1 [6] Send X to A/D
FORCE_SYMBOL $0EE1 VIA_port_a
COMMENT $0EE3 [6] Put pattern in shift register
FORCE_SYMBOL $0EE3 VIA_shift_reg
COMMENT $0EE5 [4] enable timer 1
FORCE_SYMBOL $0EE5 VIA_t1_cnt_hi
COMMENT $0EE7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0EE9 [4] Send Y to A/D
FORCE_SYMBOL $0EE9 VIA_port_a
COMMENT $0EEB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0EEB VIA_port_b
COMMENT $0EED [4] turn the lights off
FORCE_SYMBOL $0EED VIA_shift_reg
COMMENT $0EEF [6] Disable mux
FORCE_SYMBOL $0EEF VIA_port_b
COMMENT $0EF1 [6] Send X to A/D
FORCE_SYMBOL $0EF1 VIA_port_a
COMMENT $0EF3 [6] Put pattern in shift register
FORCE_SYMBOL $0EF3 VIA_shift_reg
COMMENT $0EF5 [4] enable timer 1
FORCE_SYMBOL $0EF5 VIA_t1_cnt_hi
COMMENT $0EF7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0EF9 [4] Send Y to A/D
FORCE_SYMBOL $0EF9 VIA_port_a
COMMENT $0EFB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0EFB VIA_port_b
COMMENT $0EFD [4] turn the lights off
FORCE_SYMBOL $0EFD VIA_shift_reg
COMMENT $0EFF [6] Disable mux
FORCE_SYMBOL $0EFF VIA_port_b
COMMENT $0F01 [6] Send X to A/D
FORCE_SYMBOL $0F01 VIA_port_a
COMMENT $0F03 [6] Put pattern in shift register
FORCE_SYMBOL $0F03 VIA_shift_reg
COMMENT $0F05 [4] enable timer 1
FORCE_SYMBOL $0F05 VIA_t1_cnt_hi
COMMENT $0F07 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F09 [4] Send Y to A/D
FORCE_SYMBOL $0F09 VIA_port_a
COMMENT $0F0B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F0B VIA_port_b
COMMENT $0F0D [4] turn the lights off
FORCE_SYMBOL $0F0D VIA_shift_reg
COMMENT $0F0F [6] Disable mux
FORCE_SYMBOL $0F0F VIA_port_b
COMMENT $0F11 [6] Send X to A/D
FORCE_SYMBOL $0F11 VIA_port_a
COMMENT $0F13 [6] Put pattern in shift register
FORCE_SYMBOL $0F13 VIA_shift_reg
COMMENT $0F15 [4] enable timer 1
FORCE_SYMBOL $0F15 VIA_t1_cnt_hi
COMMENT $0F17 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F19 [4] Send Y to A/D
FORCE_SYMBOL $0F19 VIA_port_a
COMMENT $0F1B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F1B VIA_port_b
COMMENT $0F1D [4] turn the lights off
FORCE_SYMBOL $0F1D VIA_shift_reg
COMMENT $0F1F [6] Disable mux
FORCE_SYMBOL $0F1F VIA_port_b
COMMENT $0F21 [6] Send X to A/D
FORCE_SYMBOL $0F21 VIA_port_a
COMMENT $0F23 [6] Put pattern in shift register
FORCE_SYMBOL $0F23 VIA_shift_reg
COMMENT $0F25 [4] enable timer 1
FORCE_SYMBOL $0F25 VIA_t1_cnt_hi
COMMENT $0F27 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F29 [4] Send Y to A/D
FORCE_SYMBOL $0F29 VIA_port_a
COMMENT $0F2B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F2B VIA_port_b
COMMENT $0F2D [4] turn the lights off
FORCE_SYMBOL $0F2D VIA_shift_reg
COMMENT $0F2F [6] Disable mux
FORCE_SYMBOL $0F2F VIA_port_b
COMMENT $0F31 [6] Send X to A/D
FORCE_SYMBOL $0F31 VIA_port_a
COMMENT $0F33 [6] Put pattern in shift register
FORCE_SYMBOL $0F33 VIA_shift_reg
COMMENT $0F35 [4] enable timer 1
FORCE_SYMBOL $0F35 VIA_t1_cnt_hi
COMMENT $0F37 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F39 [4] Send Y to A/D
FORCE_SYMBOL $0F39 VIA_port_a
COMMENT $0F3B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F3B VIA_port_b
COMMENT $0F3D [4] turn the lights off
FORCE_SYMBOL $0F3D VIA_shift_reg
COMMENT $0F3F [6] Disable mux
FORCE_SYMBOL $0F3F VIA_port_b
COMMENT $0F41 [6] Send X to A/D
FORCE_SYMBOL $0F41 VIA_port_a
COMMENT $0F43 [6] Put pattern in shift register
FORCE_SYMBOL $0F43 VIA_shift_reg
COMMENT $0F45 [4] enable timer 1
FORCE_SYMBOL $0F45 VIA_t1_cnt_hi
COMMENT $0F47 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F49 [4] Send Y to A/D
FORCE_SYMBOL $0F49 VIA_port_a
COMMENT $0F4B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F4B VIA_port_b
COMMENT $0F4D [4] turn the lights off
FORCE_SYMBOL $0F4D VIA_shift_reg
COMMENT $0F4F [6] Disable mux
FORCE_SYMBOL $0F4F VIA_port_b
COMMENT $0F51 [6] Send X to A/D
FORCE_SYMBOL $0F51 VIA_port_a
COMMENT $0F53 [6] Put pattern in shift register
FORCE_SYMBOL $0F53 VIA_shift_reg
COMMENT $0F55 [4] enable timer 1
FORCE_SYMBOL $0F55 VIA_t1_cnt_hi
COMMENT $0F57 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F59 [4] Send Y to A/D
FORCE_SYMBOL $0F59 VIA_port_a
COMMENT $0F5B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F5B VIA_port_b
COMMENT $0F5D [4] turn the lights off
FORCE_SYMBOL $0F5D VIA_shift_reg
COMMENT $0F5F [6] Disable mux
FORCE_SYMBOL $0F5F VIA_port_b
COMMENT $0F61 [6] Send X to A/D
FORCE_SYMBOL $0F61 VIA_port_a
COMMENT $0F63 [6] Put pattern in shift register
FORCE_SYMBOL $0F63 VIA_shift_reg
COMMENT $0F65 [4] enable timer 1
FORCE_SYMBOL $0F65 VIA_t1_cnt_hi
COMMENT $0F67 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F69 [4] Send Y to A/D
FORCE_SYMBOL $0F69 VIA_port_a
COMMENT $0F6B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F6B VIA_port_b
COMMENT $0F6D [4] turn the lights off
FORCE_SYMBOL $0F6D VIA_shift_reg
COMMENT $0F6F [6] Disable mux
FORCE_SYMBOL $0F6F VIA_port_b
COMMENT $0F71 [6] Send X to A/D
FORCE_SYMBOL $0F71 VIA_port_a
COMMENT $0F73 [6] Put pattern in shift register
FORCE_SYMBOL $0F73 VIA_shift_reg
COMMENT $0F75 [4] enable timer 1
FORCE_SYMBOL $0F75 VIA_t1_cnt_hi
COMMENT $0F77 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F79 [4] Send Y to A/D
FORCE_SYMBOL $0F79 VIA_port_a
COMMENT $0F7B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F7B VIA_port_b
COMMENT $0F7D [4] turn the lights off
FORCE_SYMBOL $0F7D VIA_shift_reg
COMMENT $0F7F [6] Disable mux
FORCE_SYMBOL $0F7F VIA_port_b
COMMENT $0F81 [6] Send X to A/D
FORCE_SYMBOL $0F81 VIA_port_a
COMMENT $0F83 [6] Put pattern in shift register
FORCE_SYMBOL $0F83 VIA_shift_reg
COMMENT $0F85 [4] enable timer 1
FORCE_SYMBOL $0F85 VIA_t1_cnt_hi
COMMENT $0F87 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F89 [4] Send Y to A/D
FORCE_SYMBOL $0F89 VIA_port_a
COMMENT $0F8B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F8B VIA_port_b
COMMENT $0F8D [4] turn the lights off
FORCE_SYMBOL $0F8D VIA_shift_reg
COMMENT $0F8F [6] Disable mux
FORCE_SYMBOL $0F8F VIA_port_b
COMMENT $0F91 [6] Send X to A/D
FORCE_SYMBOL $0F91 VIA_port_a
COMMENT $0F93 [6] Put pattern in shift register
FORCE_SYMBOL $0F93 VIA_shift_reg
COMMENT $0F95 [4] enable timer 1
FORCE_SYMBOL $0F95 VIA_t1_cnt_hi
COMMENT $0F97 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F99 [4] Send Y to A/D
FORCE_SYMBOL $0F99 VIA_port_a
COMMENT $0F9B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0F9B VIA_port_b
COMMENT $0F9D [4] turn the lights off
FORCE_SYMBOL $0F9D VIA_shift_reg
COMMENT $0F9F [6] Disable mux
FORCE_SYMBOL $0F9F VIA_port_b
COMMENT $0FA1 [6] Send X to A/D
FORCE_SYMBOL $0FA1 VIA_port_a
COMMENT $0FA3 [6] Put pattern in shift register
FORCE_SYMBOL $0FA3 VIA_shift_reg
COMMENT $0FA5 [4] enable timer 1
FORCE_SYMBOL $0FA5 VIA_t1_cnt_hi
COMMENT $0FA7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FA9 [4] Send Y to A/D
FORCE_SYMBOL $0FA9 VIA_port_a
COMMENT $0FAB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FAB VIA_port_b
COMMENT $0FAD [4] turn the lights off
FORCE_SYMBOL $0FAD VIA_shift_reg
COMMENT $0FAF [6] Disable mux
FORCE_SYMBOL $0FAF VIA_port_b
COMMENT $0FB1 [6] Send X to A/D
FORCE_SYMBOL $0FB1 VIA_port_a
COMMENT $0FB3 [6] Put pattern in shift register
FORCE_SYMBOL $0FB3 VIA_shift_reg
COMMENT $0FB5 [4] enable timer 1
FORCE_SYMBOL $0FB5 VIA_t1_cnt_hi
COMMENT $0FB7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FB9 [4] Send Y to A/D
FORCE_SYMBOL $0FB9 VIA_port_a
COMMENT $0FBB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FBB VIA_port_b
COMMENT $0FBD [4] turn the lights off
FORCE_SYMBOL $0FBD VIA_shift_reg
COMMENT $0FBF [6] Disable mux
FORCE_SYMBOL $0FBF VIA_port_b
COMMENT $0FC1 [6] Send X to A/D
FORCE_SYMBOL $0FC1 VIA_port_a
COMMENT $0FC3 [6] Put pattern in shift register
FORCE_SYMBOL $0FC3 VIA_shift_reg
COMMENT $0FC5 [4] enable timer 1
FORCE_SYMBOL $0FC5 VIA_t1_cnt_hi
COMMENT $0FC7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FC9 [4] Send Y to A/D
FORCE_SYMBOL $0FC9 VIA_port_a
COMMENT $0FCB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FCB VIA_port_b
COMMENT $0FCD [4] turn the lights off
FORCE_SYMBOL $0FCD VIA_shift_reg
COMMENT $0FCF [6] Disable mux
FORCE_SYMBOL $0FCF VIA_port_b
COMMENT $0FD1 [6] Send X to A/D
FORCE_SYMBOL $0FD1 VIA_port_a
COMMENT $0FD3 [6] Put pattern in shift register
FORCE_SYMBOL $0FD3 VIA_shift_reg
COMMENT $0FD5 [4] enable timer 1
FORCE_SYMBOL $0FD5 VIA_t1_cnt_hi
COMMENT $0FD7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FD9 [4] Send Y to A/D
FORCE_SYMBOL $0FD9 VIA_port_a
COMMENT $0FDB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FDB VIA_port_b
COMMENT $0FDD [4] turn the lights off
FORCE_SYMBOL $0FDD VIA_shift_reg
COMMENT $0FDF [6] Disable mux
FORCE_SYMBOL $0FDF VIA_port_b
COMMENT $0FE1 [6] Send X to A/D
FORCE_SYMBOL $0FE1 VIA_port_a
COMMENT $0FE3 [6] Put pattern in shift register
FORCE_SYMBOL $0FE3 VIA_shift_reg
COMMENT $0FE5 [4] enable timer 1
FORCE_SYMBOL $0FE5 VIA_t1_cnt_hi
COMMENT $0FE7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FE9 [4] Send Y to A/D
FORCE_SYMBOL $0FE9 VIA_port_a
COMMENT $0FEB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FEB VIA_port_b
COMMENT $0FED [4] turn the lights off
FORCE_SYMBOL $0FED VIA_shift_reg
COMMENT $0FEF [6] Disable mux
FORCE_SYMBOL $0FEF VIA_port_b
COMMENT $0FF1 [6] Send X to A/D
FORCE_SYMBOL $0FF1 VIA_port_a
COMMENT $0FF3 [6] Put pattern in shift register
FORCE_SYMBOL $0FF3 VIA_shift_reg
COMMENT $0FF5 [4] enable timer 1
FORCE_SYMBOL $0FF5 VIA_t1_cnt_hi
COMMENT $0FF7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FF9 [4] Send Y to A/D
FORCE_SYMBOL $0FF9 VIA_port_a
COMMENT $0FFB [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0FFB VIA_port_b
COMMENT $0FFD [4] turn the lights off
FORCE_SYMBOL $0FFD VIA_shift_reg
COMMENT $0FFF [6] Disable mux
FORCE_SYMBOL $0FFF VIA_port_b
COMMENT $1001 [6] Send X to A/D
FORCE_SYMBOL $1001 VIA_port_a
COMMENT $1003 [6] Put pattern in shift register
FORCE_SYMBOL $1003 VIA_shift_reg
COMMENT $1005 [4] enable timer 1
FORCE_SYMBOL $1005 VIA_t1_cnt_hi
COMMENT $1007 [8] load Y coordinate to A, X coordinate to B
COMMENT $1009 [4] Send Y to A/D
FORCE_SYMBOL $1009 VIA_port_a
COMMENT $100B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $100B VIA_port_b
COMMENT $100D [4] turn the lights off
FORCE_SYMBOL $100D VIA_shift_reg
COMMENT $100F [6] Disable mux
FORCE_SYMBOL $100F VIA_port_b
COMMENT $1011 [6] Send X to A/D
FORCE_SYMBOL $1011 VIA_port_a
COMMENT $1013 [6] Put pattern in shift register
FORCE_SYMBOL $1013 VIA_shift_reg
COMMENT $1015 [4] enable timer 1
FORCE_SYMBOL $1015 VIA_t1_cnt_hi
COMMENT $1017 [8] load Y coordinate to A, X coordinate to B
COMMENT $1019 [4] Send Y to A/D
FORCE_SYMBOL $1019 VIA_port_a
COMMENT $101B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $101B VIA_port_b
COMMENT $101D [4] turn the lights off
FORCE_SYMBOL $101D VIA_shift_reg
COMMENT $101F [6] Disable mux
FORCE_SYMBOL $101F VIA_port_b
COMMENT $1021 [6] Send X to A/D
FORCE_SYMBOL $1021 VIA_port_a
COMMENT $1023 [6] Put pattern in shift register
FORCE_SYMBOL $1023 VIA_shift_reg
COMMENT $1025 [4] enable timer 1
FORCE_SYMBOL $1025 VIA_t1_cnt_hi
COMMENT $1027 [8] load Y coordinate to A, X coordinate to B
COMMENT $1029 [4] Send Y to A/D
FORCE_SYMBOL $1029 VIA_port_a
COMMENT $102B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $102B VIA_port_b
COMMENT $102D [4] turn the lights off
FORCE_SYMBOL $102D VIA_shift_reg
COMMENT $102F [6] Disable mux
FORCE_SYMBOL $102F VIA_port_b
COMMENT $1031 [6] Send X to A/D
FORCE_SYMBOL $1031 VIA_port_a
COMMENT $1033 [6] Put pattern in shift register
FORCE_SYMBOL $1033 VIA_shift_reg
COMMENT $1035 [4] enable timer 1
FORCE_SYMBOL $1035 VIA_t1_cnt_hi
COMMENT $1037 [8] load Y coordinate to A, X coordinate to B
COMMENT $1039 [4] Send Y to A/D
FORCE_SYMBOL $1039 VIA_port_a
COMMENT $103B [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $103B VIA_port_b
COMMENT $103D [4] turn the lights off
FORCE_SYMBOL $103D VIA_shift_reg
COMMENT $103F [6] Disable mux
FORCE_SYMBOL $103F VIA_port_b
COMMENT $1041 [6] Send X to A/D
FORCE_SYMBOL $1041 VIA_port_a
COMMENT $1043 [6] Put pattern in shift register
FORCE_SYMBOL $1043 VIA_shift_reg
COMMENT $1045 [4] enable timer 1
FORCE_SYMBOL $1045 VIA_t1_cnt_hi
COMMENT_LINE $104A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $104A now look if there is a girl on some log
COMMENT $104A get the status
FORCE_SYMBOL $104A girl_status
COMMENT $104D if waiting
FORCE_SYMBOL $104D IS_DISPLAYED
COMMENT $104F go to girl stuff
COMMENT $1051 finnish last sprite draw
FORCE_SYMBOL $1051 VIA_shift_reg
COMMENT_LINE $1053 finnished drawing the whole level once!
COMMENT_LINE $1054 girl stuff below main function for short branches...
COMMENT_LINE $1054 now we set the new coordinates and jump into the object
COMMENT_LINE $1054 display loop again
COMMENT_LINE $1054 setup all registers for a jump into the object loop
COMMENT $1054 a different scale again... still very high :-(
FORCE_SYMBOL $1054 SCALE_FACTOR_GAME
COMMENT $1056 move to time 1 lo, this means scaling
FORCE_SYMBOL $1056 VIA_t1_cnt_lo
COMMENT $1058 finnish last sprite draw
FORCE_SYMBOL $1058 VIA_shift_reg
COMMENT $105A go allways to zero, is sort of bad,
FORCE_NO_SYMBOL $105A
COMMENT $105C /BLANK low and /ZERO low
FORCE_SYMBOL $105C VIA_cntl
COMMENT $105E do positioning, load pos here
FORCE_SYMBOL $105E girl_pos
COMMENT $1061 Store Y in D/A register
FORCE_SYMBOL $1061 VIA_port_a
COMMENT $1063 Enable mux, this sets the Y integrator
FORCE_SYMBOL $1063 VIA_port_b
COMMENT $1065 Disable mux
FORCE_SYMBOL $1065 VIA_port_b
COMMENT $1067 Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $1067 VIA_port_a
COMMENT $1069 Blank low, zero high?
FORCE_NO_SYMBOL $1069
COMMENT $106B Now zero is of... we can integrate!
FORCE_SYMBOL $106B VIA_cntl
COMMENT $106D enable timer, by accessing it!
FORCE_SYMBOL $106D VIA_t1_cnt_hi
COMMENT_LINE $106F here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $106F nothing is now done here!
COMMENT $106F U to girl_anim_counter
FORCE_SYMBOL $106F girl_anim_counter
COMMENT $1072 Y to girl object
FORCE_SYMBOL $1072 girl_object
COMMENT $1076 + 1
FORCE_NO_SYMBOL $1076
COMMENT $1078 do positioning, load pos here
FORCE_SYMBOL $1078 girl_pos
COMMENT $107B add the speed, got from log information earlier
FORCE_SYMBOL $107B girl_speed
COMMENT $107E and 're' store it
FORCE_SYMBOL $107E girl_pos
COMMENT_LINE $1081 now we do that animation checking
COMMENT $1081 load object vector list to X,
FORCE_NO_SYMBOL $1081
COMMENT $1083 decrease animation counter
COMMENT $1085 if zero, we must initialize new animation phase
COMMENT $1087 load old sprite offsets
FORCE_NO_SYMBOL $1087
COMMENT $1089 negate them (A)
COMMENT $108A negate them (B)
COMMENT $108B add y position to old sprite offset y
COMMENT $108D add x position to old sprite offset x
COMMENT $108F load new object definition
FORCE_NO_SYMBOL $108F
COMMENT $1092 add new sprite offset y
FORCE_NO_SYMBOL $1092
COMMENT $1094 add new sprite offset x
FORCE_NO_SYMBOL $1094
COMMENT $1096 and store the corrected position
COMMENT $1098 store new object definition to object list
COMMENT $109B load new animation counter start
FORCE_NO_SYMBOL $109B
COMMENT $109D and set it in object list
COMMENT $109F A= SCALE, B = Timer IRQ check
COMMENT_LINE $10A2 the following is the position checking loop
COMMENT_LINE $10A2 waiting till an interrupt occurs
COMMENT $10A2 test the bit
FORCE_SYMBOL $10A2 VIA_int_flags
COMMENT $10A4 if not zero, than loop
COMMENT $10A6 (SCALE_FACTOR_SPRITE)
COMMENT $10A6 move to time 1 lo, this means scaling
FORCE_SYMBOL $10A6 VIA_t1_cnt_lo
COMMENT $10A8 draw the sprite
FORCE_NO_SYMBOL $10AA
COMMENT $10AE Send Y to A/D
FORCE_SYMBOL $10AE VIA_port_a
FORCE_SYMBOL $10B0 VIA_port_b
COMMENT $10B4 Disable mux
FORCE_SYMBOL $10B4 VIA_port_b
COMMENT $10B6 Send X to A/D
FORCE_SYMBOL $10B6 VIA_port_a
COMMENT $10B8 Put pattern in shift register
FORCE_SYMBOL $10B8 VIA_shift_reg
COMMENT $10BA enable timer 1
FORCE_SYMBOL $10BA VIA_t1_cnt_hi
COMMENT $10BC 6
COMMENT $10BE 7
FORCE_NO_SYMBOL $10BE
COMMENT $10C1 3 Go back for more points
COMMENT $10C3 Send Y to A/D
FORCE_SYMBOL $10C3 VIA_port_a
FORCE_SYMBOL $10C5 VIA_shift_reg
FORCE_SYMBOL $10C7 VIA_port_b
COMMENT $10CB Disable mux
FORCE_SYMBOL $10CB VIA_port_b
COMMENT $10CD Send X to A/D
FORCE_SYMBOL $10CD VIA_port_a
COMMENT $10CF Put pattern in shift register
FORCE_SYMBOL $10CF VIA_shift_reg
COMMENT $10D1 enable timer 1
FORCE_SYMBOL $10D1 VIA_t1_cnt_hi
COMMENT $10D3 6
COMMENT $10D5 7
FORCE_NO_SYMBOL $10D5
COMMENT $10D8 3 Go back for more points
COMMENT_LINE $10DA NOP                     ; 2
COMMENT_LINE $10DA STA     <VIA_shift_reg
COMMENT $10DA this is about 3 cycles to early, :(
FORCE_SYMBOL $10DA VIA_shift_reg
COMMENT $10DC and finnished drawing even the girl
COMMENT_LINE $10DD ***************************************************************************
COMMENT_LINE $10DD this routine initializes the game variables
COMMENT_LINE $10DD nothing is expected and nothing is returned
COMMENT_LINE $10DD leaves DP to C8
FORCE_SYMBOL $10DD DP_to_C8
COMMENT $10E0 these set up the joystick
FORCE_NO_SYMBOL $10E0
COMMENT $10E2 enquiries
FORCE_SYMBOL $10E2 Vec_Joy_Mux_1_X
COMMENT $10E4 allowing only all directions for
FORCE_NO_SYMBOL $10E4
COMMENT $10E6 for joystick one
FORCE_SYMBOL $10E6 Vec_Joy_Mux_1_Y
COMMENT $10E8 this setting up saves a few hundred
FORCE_NO_SYMBOL $10E8
COMMENT $10EA cycles
FORCE_SYMBOL $10EA Vec_Joy_Mux_2_X
COMMENT $10EC don't miss it, if you don't need the
FORCE_SYMBOL $10EC Vec_Joy_Mux_2_Y
COMMENT_LINE $10EE second joystick!
COMMENT $10EE load weirdos address
FORCE_SYMBOL $10EE weirdos
COMMENT $10F1 and store it to music counter
FORCE_SYMBOL $10F1 music_counter
COMMENT_LINE $10F3 copy music structure to ram
COMMENT $10F3 start of ram copy 4 address
FORCE_SYMBOL $10F3 copy_start4
COMMENT $10F6 start of rom copy 4 address
FORCE_SYMBOL $10F6 _copy_start4
COMMENT $10F9 load byte from U to A and increment U
COMMENT $10FB store A byte to X and increment X
COMMENT $10FD was it last byte
FORCE_NO_SYMBOL $10FD
COMMENT $10FF no, than loop on...
COMMENT_LINE $1101 ram for score and 'small stuff'
COMMENT $1101 my 'ram' address (source)
FORCE_SYMBOL $1101 _copy_start1
COMMENT $1104 copy my 'ram' to vectrex ram (destination)
FORCE_SYMBOL $1104 copy_start1
COMMENT $1107 number of bytes to be copied, must be less than $81
COMMENT $1109 and copy...
FORCE_SYMBOL $1109 Move_Mem_a
COMMENT $110C address to clear
FORCE_SYMBOL $110C copy_start2
COMMENT $110F number of bytes - 1 to clear
COMMENT $1112 clear sub routine in ROM
FORCE_SYMBOL $1112 Clear_x_d
COMMENT $1115 address to clear
FORCE_SYMBOL $1115 copy_start3
COMMENT $1118 number of bytes - 1 to clear
COMMENT $111B clear sub routine in ROM
FORCE_SYMBOL $111B Clear_x_d
COMMENT $111E initial game level
FORCE_NO_SYMBOL $111E
COMMENT $1120 upon startup
FORCE_SYMBOL $1120 game_level
COMMENT $1122 get level string
FORCE_SYMBOL $1122 no_level_string
COMMENT $1125 clear level string
FORCE_SYMBOL $1125 Clear_Score
COMMENT $1128 no y change for timer line...
FORCE_SYMBOL $1128 y_timer
COMMENT_LINE $112A entry point for continue with current level
COMMENT $112A get the address of score string
FORCE_SYMBOL $112A no_score_string
COMMENT $112D clear score
FORCE_SYMBOL $112D Clear_Score
COMMENT $1130 balls 5
FORCE_SYMBOL $1130 FROGS_PER_GAME
COMMENT $1132 and store five balls
FORCE_SYMBOL $1132 no_frogs
COMMENT $1135 load the 5th digit
COMMENT $1138 and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $1138 high_check
COMMENT_LINE $113A entry point for each new frog
FORCE_SYMBOL $113A level_score
COMMENT $113C frogger faces up
FORCE_SYMBOL $113C frogger_up
COMMENT $113F upon startup
FORCE_SYMBOL $113F frog_pic
COMMENT $1141 adjust sizing information
FORCE_SYMBOL $1141 FROG_SIZEX_UP
COMMENT $1143 store it
FORCE_SYMBOL $1143 current_frog_size_x
COMMENT $1145 first frog is looking up
FORCE_SYMBOL $1145 HEADING_UP
COMMENT $1147 store that
FORCE_SYMBOL $1147 current_frog_heading
COMMENT $1149 load the offset of the currently used pic
FORCE_SYMBOL $1149 frogger_up_offset
COMMENT $114C and store it for later use
FORCE_SYMBOL $114C current_frog_offset
COMMENT $114E load init values
FORCE_SYMBOL $114E FROG_INIT_POS
COMMENT $1151 and evalute the new pos
FORCE_SYMBOL $1151 frogger_up_offset
COMMENT $1154 corresponding to the offset
COMMENT $1157 and store them...
FORCE_SYMBOL $1157 frog_pos
COMMENT $1159 load init values
FORCE_SYMBOL $1159 FROG_INIT_POS_BAND
COMMENT $115C and store them...
FORCE_SYMBOL $115C frog_pos_band
COMMENT $115E initialize timer
FORCE_SYMBOL $115E my_timer_start
COMMENT $1160 store it
FORCE_SYMBOL $1160 my_timer
COMMENT $1162 allways clear, for double death check
COMMENT $1164 be quiet
COMMENT $1164 no music is playing ->0
FORCE_SYMBOL $1164 Vec_Music_Flag
COMMENT $1166 shadow regs
FORCE_SYMBOL $1166 Init_Music_Buf
COMMENT_LINE $1169 in the next do sound call
COMMENT_LINE $1169 all regs are cleared automatically
COMMENT_LINE $116A ***************************************************************************
COMMENT_LINE $116A this routine draws the initial screen
COMMENT_LINE $116A with information about the game
COMMENT_LINE $116A nothing is expected and nothing is returned
COMMENT_LINE $116A leaves dp pointing d0 expected
FORCE_SYMBOL $116A DP_to_D0
COMMENT $116D get button status once, since only
FORCE_SYMBOL $116D Read_Btns
COMMENT_LINE $1170 differences are noticed
FORCE_SYMBOL $1170 DP_to_C8
COMMENT $1173 load default text height & width
FORCE_SYMBOL $1173 NORMAL_TEXT_SIZE
COMMENT $1176 poke it to ram location
FORCE_SYMBOL $1176 Vec_Text_HW
COMMENT_LINE $1178 just for show a little scroll text...
COMMENT_LINE $1178 scrolltext destroys a whole load of valuable
COMMENT_LINE $1178 ram space...
COMMENT_LINE $1178 had to use some ram twice...
COMMENT $1178 y position of scroller
COMMENT $117A store it
FORCE_SYMBOL $117A scroll_y
COMMENT $117C left boundary
COMMENT $117E store it
FORCE_SYMBOL $117E scroll_left_boundary
COMMENT $1180 right boundary
FORCE_NO_SYMBOL $1180
COMMENT $1182 store it
FORCE_SYMBOL $1182 scroll_right_boundary
COMMENT $1184 scroll speed (going from right to left)
COMMENT $1186 store it
FORCE_SYMBOL $1186 scroll_speed
COMMENT $1188 and intensity of scroll text
FORCE_NO_SYMBOL $1188
COMMENT $118A store it
FORCE_SYMBOL $118A scroll_intensity
COMMENT $118C address of the text
FORCE_SYMBOL $118C scroll_text
COMMENT $118F set it all up...
FORCE_SYMBOL $118F set_up_scrolling
COMMENT $1192 startup intensity
FORCE_NO_SYMBOL $1192
COMMENT $1194 store it to current intensity
FORCE_SYMBOL $1194 init_current_intensity
COMMENT $1196 first start up displaying the text
FORCE_SYMBOL $1196 INIT_MODE_TEXT
COMMENT $1198 store it in init screen mode
FORCE_SYMBOL $1198 init_screen_mode
COMMENT $119A is music still playing?
FORCE_SYMBOL $119A Vec_Music_Flag
COMMENT $119D than jump
COMMENT $119F load new table addresses
FORCE_SYMBOL $119F music_counter
COMMENT $11A2 are we at the end?
FORCE_SYMBOL $11A2 weirdos_end
COMMENT $11A6 no, than go on
COMMENT $11A8 load weirdos address
FORCE_SYMBOL $11A8 weirdos
COMMENT $11AB and store it to music counter
FORCE_SYMBOL $11AB music_counter
COMMENT_LINE $11AE in D now address of new weirdo
COMMENT $11AE transfer D to index register Y
COMMENT $11B0 now set the next weirdo address
FORCE_NO_SYMBOL $11B0
COMMENT $11B3 and store it to music counter
FORCE_SYMBOL $11B3 music_counter
COMMENT $11B6 load adddress of music structure
FORCE_SYMBOL $11B6 yankee
COMMENT $11B9 load
COMMENT $11BB and store new ADSR table
COMMENT $11BD load
COMMENT $11BF and store new twang table
COMMENT $11C1 and play the tune again...
COMMENT_LINE $11C1 the next instructions initialize a new sound
COMMENT_LINE $11C1 load #1
COMMENT_LINE $11C1 set this as marker for music start
COMMENT $11C1 doesn'T destroy a register
FORCE_SYMBOL $11C1 Vec_Music_Flag
COMMENT $11C4 to do it that way
FORCE_SYMBOL $11C4 Vec_Music_Flag
COMMENT $11C7 load a music structure (piece_of_music)
FORCE_SYMBOL $11C7 yankee
COMMENT $11CA and store it to my own music active pointer
FORCE_SYMBOL $11CA music_active
COMMENT_LINE $11CD next a do_my_sound and than do sound must be called
COMMENT $11CD well, the startup...
COMMENT $11CD (MAKRO) see above
COMMENT $11CD (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $11CD
COMMENT $11D1 pretty for optimizing to use a makro :-)
COMMENT $11D1 get active music
FORCE_SYMBOL $11D1 music_active
COMMENT $11D3 and init new notes
FORCE_SYMBOL $11D3 Init_Music_chk
COMMENT $11D6 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $11D6 Wait_Recal
COMMENT $11D9 just for assembler optimization...
COMMENT $11D9 ROM function that does the sound playing
FORCE_SYMBOL $11D9 Do_Sound
COMMENT $11DC this does the whole scroll text
FORCE_SYMBOL $11DC do_one_scroll_step
COMMENT_LINE $11DF thing...
COMMENT_LINE $11DF beware... it destroys quite a
COMMENT_LINE $11DF lot of variables
COMMENT $11DF load the current intro intensity
FORCE_SYMBOL $11DF init_current_intensity
COMMENT $11E2 set it
FORCE_SYMBOL $11E2 Intensity_a
COMMENT $11E5 load the current intro mode
FORCE_SYMBOL $11E5 init_screen_mode
COMMENT $11E8 test for text more
FORCE_SYMBOL $11E8 INIT_MODE_TEXT
COMMENT $11EA jump if not text mode
COMMENT $11EC decrement intensity
FORCE_SYMBOL $11EC init_current_intensity
COMMENT $11EF if not zero, than stay in same mode
COMMENT $11F1 otherwise switch to morph mode
FORCE_SYMBOL $11F1 INIT_MODE_MORPH
COMMENT $11F3 set it
FORCE_SYMBOL $11F3 init_screen_mode
COMMENT $11F6 load new intensity
FORCE_NO_SYMBOL $11F6
COMMENT $11F8 and store it
FORCE_SYMBOL $11F8 init_current_intensity
COMMENT $11FB set up morphing
FORCE_SYMBOL $11FB morph_init1
COMMENT $11FE in a routine
FORCE_SYMBOL $11FE set_up_morphing
COMMENT $1201 load text start to U
FORCE_SYMBOL $1201 game_name
COMMENT_LINE $1204 Get A=Y, B=X (D=AB) coordinate
COMMENT $1204 Y, X coordinates
COMMENT $1207 Print the string
FORCE_SYMBOL $1207 Print_Str_d
COMMENT_LINE $120A string printing "vectrex frogger" takes about 5000 cycles :-(
COMMENT $120C back to zero
FORCE_NO_SYMBOL $120C
COMMENT $120E /BLANK low and /ZERO low
FORCE_SYMBOL $120E VIA_cntl
COMMENT $1210 scale for placing first point
FORCE_SYMBOL $1210 SCALE_FACTOR_VECTOR_MORPH
COMMENT $1212 move to time 1 lo, this means scaling
FORCE_SYMBOL $1212 VIA_t1_cnt_lo
COMMENT $1214 does one morph step, changing of vectors
FORCE_SYMBOL $1214 do_one_morph_step_16
COMMENT $1217 load morph status
FORCE_SYMBOL $1217 morph_status
COMMENT $121A if not complete, jump
COMMENT $121C decrement intensity
FORCE_SYMBOL $121C init_current_intensity
COMMENT $121F if not zero, jump
COMMENT $1221 otherwise init text mode
FORCE_SYMBOL $1221 INIT_MODE_TEXT
COMMENT $1223 store it
FORCE_SYMBOL $1223 init_screen_mode
COMMENT $1226 reload intensity
FORCE_NO_SYMBOL $1226
COMMENT $1228 store it
FORCE_SYMBOL $1228 init_current_intensity
COMMENT $122B y, x position of morph object
COMMENT $122E must be after do_one_morph_step
FORCE_SYMBOL $122E Moveto_d
COMMENT_LINE $1231 otherwise integraters 'leak'
COMMENT $1231 and load the new vector list
FORCE_SYMBOL $1231 current_morph_vectorlist
COMMENT $1234 scale for placing first point
COMMENT $1236 move to time 1 lo, this means scaling
FORCE_SYMBOL $1236 VIA_t1_cnt_lo
COMMENT $1238 get it on the screen
FORCE_SYMBOL $1238 Draw_VLc
COMMENT $123B get button status
FORCE_SYMBOL $123B Read_Btns
COMMENT $123E is a button pressed?
FORCE_NO_SYMBOL $123E
COMMENT $1240 no, than stay in init_screen_loop
COMMENT_LINE $1245 ***************************************************************************
COMMENT_LINE $1245 expects DP to $C8
COMMENT_LINE $1245 mainly this routine sets up the sprite information which are
COMMENT_LINE $1245 stored in the simple level structure
COMMENT_LINE $1245 sprites are arranged in a fixed length list
COMMENT_LINE $1245 a maximum of currently 30 sprites (should be enough) can be
COMMENT_LINE $1245 stored in that list
COMMENT_LINE $1245 though it depends on the size and position of these sprites if
COMMENT_LINE $1245 vectrex is capable of drawing them in a way which doesn't hurt the eyes
COMMENT_LINE $1245 the 'playfield' is divided into a 12*12 grid
COMMENT_LINE $1245 the lowest position cannot contain any sprites, since
COMMENT_LINE $1245 that's where frogger starts of
COMMENT_LINE $1245 the level (see levels.i for an example) is constructed of a field of
COMMENT_LINE $1245 bytes. If a byte differs from 0 a sprite is assumed
COMMENT_LINE $1245 in that position
COMMENT_LINE $1245 the position in screen coordinates is calculated from the byte position
COMMENT_LINE $1245 in the field.
COMMENT_LINE $1245 the byte itself is used as information what kind of sprite is to be
COMMENT_LINE $1245 used
COMMENT_LINE $1245 the position and the address where the sprite data is stored is
COMMENT_LINE $1245 copied to an object_list in vectrex ram
COMMENT_LINE $1245 this list will be repainted every round
COMMENT_LINE $1245 for easier collision detection a second list is used
COMMENT_LINE $1245 one for each band, a maximum of 7 sprites per band is currently supported
COMMENT_LINE $1245 that way I don't have to check every single sprite, only those
COMMENT_LINE $1245 in the band which interests me (still a few sprites to check)
COMMENT_LINE $1245 the length of the sprite is stored in it's data structure, only the
COMMENT_LINE $1245 length is relevant for collision detection,
COMMENT_LINE $1245 since it is assumed that frogger allways hops over a whole band
COMMENT_LINE $1245 sprites are allways assumed to start at 0 and than have a width of
COMMENT_LINE $1245 'length'
COMMENT_LINE $1245 if frogger 'touches' such a length it dies (or swims)
COMMENT_LINE $1245 actually I think this is a very nasty collision detection
COMMENT_LINE $1245 for the road, since the mearest scratch kills frogger,
COMMENT_LINE $1245 on the other hand, he can get hold of only a 'pixel' of log
COMMENT_LINE $1245 and still hold on to it :-)
COMMENT $1245 five homes exist
FORCE_NO_SYMBOL $1245
COMMENT $1247 store it
FORCE_SYMBOL $1247 in_home_counter
COMMENT_LINE $1249 this means 5 empty homes
COMMENT $1249 clear all homes
FORCE_NO_SYMBOL $1249
COMMENT $124C first home
FORCE_SYMBOL $124C home_objects
COMMENT $1250 store the clear to home 1
FORCE_NO_SYMBOL $1250
COMMENT $1252 store the clear to home 2
FORCE_NO_SYMBOL $1252
COMMENT $1254 store the clear to home 3
FORCE_NO_SYMBOL $1254
COMMENT $1256 store the clear to home 4
FORCE_NO_SYMBOL $1256
COMMENT $1258 store the clear to home 5
FORCE_NO_SYMBOL $1258
COMMENT $125B this is a helper if we reinit the
FORCE_SYMBOL $125B tmp2
COMMENT $125D level or start a new one
COMMENT_LINE $125F this sets it to new level
COMMENT_LINE $125F entry point for level reinit
COMMENT_LINE $125F must allways be done after a morph, since a morph uses
COMMENT_LINE $125F the same ram as the level information
COMMENT_LINE $125F damn only 1 K (or less that is)
COMMENT $125F otherwise set tmp2
FORCE_SYMBOL $125F tmp2
COMMENT $1261 to 1, which means reinit
FORCE_SYMBOL $1261 tmp2
COMMENT $1265 clear all homes
FORCE_NO_SYMBOL $1265
COMMENT_LINE $1268 clear static dive turtle list
COMMENT $1268 load start address
FORCE_SYMBOL $1268 t_list
COMMENT $126B load length of structure
FORCE_NO_SYMBOL $126B
COMMENT $126E clear object structure
FORCE_SYMBOL $126E Clear_x_d
COMMENT_LINE $1271 first clear the current level
COMMENT_LINE $1271 this clears the last level band list
COMMENT $1271 load start address
FORCE_SYMBOL $1271 band_list
COMMENT $1274 savety copy to tmp_band_list
FORCE_SYMBOL $1274 tmp_band_list
COMMENT $1276 load length of structure
COMMENT $1279 clear band_list
FORCE_SYMBOL $1279 Clear_x_d
COMMENT_LINE $127C this clears the level object list
COMMENT $127C load start address
FORCE_SYMBOL $127C object_list
COMMENT $127F load length of structure
COMMENT $1282 clear object structure
FORCE_SYMBOL $1282 Clear_x_d
COMMENT $1285 load the address to U
FORCE_SYMBOL $1285 object_list
COMMENT_LINE $1288 than we go to current level
COMMENT $1288 load length of level
FORCE_SYMBOL $1288 LEVEL_DATA_LENGTH
COMMENT $128A load level number
FORCE_SYMBOL $128A game_level
COMMENT $128C multiply these two
COMMENT $128D and add to start address of level data
FORCE_SYMBOL $128D level1_data
COMMENT $1290 and in X register for easier access (indexed)
COMMENT_LINE $1292 now we will loop a while, first thru all bands (11)
COMMENT $1292 11 bands (10+ middle)
FORCE_NO_SYMBOL $1292
COMMENT $1294 initialize counter for loop1
FORCE_SYMBOL $1294 loop1
COMMENT_LINE $1296 and than the inner loop thru all band positions (12)
COMMENT $1296 band list (x) offset for each new
FORCE_SYMBOL $1296 tmp_band_offset
COMMENT $1298 band = 0
COMMENT $129A fixed GRID_WIDTH
FORCE_NO_SYMBOL $129A
COMMENT $129C initialize counter for loop2
FORCE_SYMBOL $129C loop2
COMMENT $129E load level information (one byte each pass), increment X by 1
COMMENT $12A0 than move on
COMMENT_LINE $12A2 if we encounter something different than 0
COMMENT_LINE $12A2 we have a sprite which we will place in the
COMMENT_LINE $12A2 object structure,
COMMENT_LINE $12A2 this object structur will be updated all thru the
COMMENT_LINE $12A2 game...
COMMENT $12A2 clear A
COMMENT $12A3 since it starts at 1 not 0
COMMENT $12A4 multiply B by 2
COMMENT $12A5 add object table address
FORCE_SYMBOL $12A5 object_table
COMMENT $12A8 move to index register Y
COMMENT $12AA and load the the sprite object structure to D
FORCE_NO_SYMBOL $12AA
COMMENT_LINE $12AC first lets save this object list position to the current band_list
COMMENT_LINE $12AC pointer
COMMENT_LINE $12AC in the band_list are all object_list positions stored, sorted
COMMENT_LINE $12AC by each band
COMMENT_LINE $12AC band list provides storage for a maximum of 7 sprites per band
COMMENT_LINE $12AC this is NOT checked, make the levels good!!!
COMMENT $12AC save X,D  register
COMMENT $12AE load current band list 'band' (y) position
FORCE_SYMBOL $12AE tmp_band_list
COMMENT $12B0 add the current (x) position (how many objects on this band)
FORCE_SYMBOL $12B0 tmp_band_offset
COMMENT $12B2 increment the offset
COMMENT $12B4 by two
COMMENT $12B6 store that in X index register
COMMENT $12B8 save the current object_list position to band_list
FORCE_NO_SYMBOL $12B8
COMMENT $12BA and restore the pointer to level information
COMMENT_LINE $12BC in D still the current object
COMMENT_LINE $12BC init dive turtle start
COMMENT_LINE $12BC a list with a max of 6, not checked!
COMMENT $12BC save D and X
COMMENT $12BE transfer D to index Y, get the object pointer to Y
COMMENT $12C0 load special to A
FORCE_NO_SYMBOL $12C0
COMMENT $12C2 look if it is a DIVE_SPECIAL
FORCE_SYMBOL $12C2 SPECIAL_DIVE
COMMENT $12C4 if not, go on
COMMENT $12C6 counter for number of divers
COMMENT $12C8 position to store divers
FORCE_SYMBOL $12C8 t_list
COMMENT $12CB store object_list position to t_list plus offset
COMMENT $12CD and increment list pointer by 2
COMMENT $12CF and store it back
COMMENT $12D1 restore D and X
COMMENT_LINE $12D3 init dive turtle end
COMMENT_LINE $12D3 now store the object definition address to the object_list
COMMENT_LINE $12D3 and initialize all variables...
COMMENT $12D3 and store it to object_list increment U by two
COMMENT $12D5 transfer D to index Y
COMMENT $12D7 load the offsets from Y pointer
FORCE_NO_SYMBOL $12D7
COMMENT $12D9 y offset (these are offset in the sprite)
FORCE_NO_SYMBOL $12D9
COMMENT $12DB x offset  itself, an offset to the starting vector
FORCE_NO_SYMBOL $12DB
COMMENT $12DD now get the y pos
FORCE_SYMBOL $12DD loop1
COMMENT $12DF make it signed
FORCE_NO_SYMBOL $12DF
COMMENT $12E1 in game pos relation
FORCE_SYMBOL $12E1 GRID_SIZE_GAME
COMMENT $12E3 should be a byte value
COMMENT $12E4 add to offset
FORCE_NO_SYMBOL $12E4
COMMENT $12E6 and store it to object... increment U by one
COMMENT $12E8 now get the x pos
FORCE_SYMBOL $12E8 loop2
COMMENT $12EA reverse the X coordinate
COMMENT $12EB make it signed
FORCE_NO_SYMBOL $12EB
COMMENT $12ED in game pos relation
FORCE_SYMBOL $12ED GRID_SIZE_GAME
COMMENT $12EF should be a byte value
COMMENT $12F0 add to offset
FORCE_NO_SYMBOL $12F0
COMMENT $12F2 and store it to object... increment U by one
COMMENT_LINE $12F4 LEAY    [-4,U]            ; load object again to Y
COMMENT_LINE $12F4 LDB     4,Y               ; load anim speed at offset 4
COMMENT $12F4 randomize the animation startup
FORCE_SYMBOL $12F4 Random
COMMENT_LINE $12F7 so that not all sprites are animated
COMMENT_LINE $12F7 in the same round...
COMMENT $12F7 maximum of 15
FORCE_NO_SYMBOL $12F7
COMMENT $12F9 at least one
COMMENT $12FA store it to anim counter
COMMENT $12FC dec loop2
FORCE_SYMBOL $12FC loop2
COMMENT $12FE end check if finnished
COMMENT $1300 fixed band list len
FORCE_NO_SYMBOL $1300
COMMENT $1303 go one band list element further
FORCE_SYMBOL $1303 tmp_band_list
COMMENT $1305 and store it
FORCE_SYMBOL $1305 tmp_band_list
COMMENT $1307 dec loop1
FORCE_SYMBOL $1307 loop1
COMMENT $1309 end check if finnished
COMMENT $130B we don't won't to reinit
FORCE_SYMBOL $130B tmp2
COMMENT $130D the next stuff
COMMENT $1311 fly
COMMENT $1313 if fly available , jump
COMMENT $1315 store to status, this means no fly on screen
FORCE_SYMBOL $1315 fly_status
COMMENT $1317 and go on
COMMENT $1319 otherwise use A as timer information HI
FORCE_SYMBOL $1319 fly_timer_start
COMMENT $131B clear LO
COMMENT $131D reload
FORCE_SYMBOL $131D fly_timer_start
COMMENT $131F and set the used timer to it
FORCE_SYMBOL $131F fly_timer
COMMENT $1321 fly is waiting to be displayed
FORCE_SYMBOL $1321 IS_WAITING
COMMENT $1323 store it
FORCE_SYMBOL $1323 fly_status
COMMENT $1325 crocodile
COMMENT $1327 if croco available , jump
COMMENT $1329 store to status, this means no croco on screen
FORCE_SYMBOL $1329 croco_status
COMMENT $132B and go on
COMMENT $132D otherwise use A as timer information HI
FORCE_SYMBOL $132D croco_timer_start
COMMENT $132F clear LO
COMMENT $1331 reload
FORCE_SYMBOL $1331 croco_timer_start
COMMENT $1333 and set the used timer to it
FORCE_SYMBOL $1333 croco_timer
COMMENT $1335 croco is waiting to be displayed
FORCE_SYMBOL $1335 IS_WAITING
COMMENT $1337 store it
FORCE_SYMBOL $1337 croco_status
COMMENT $1339 reset LO of otter timer allways
COMMENT $133B otter
COMMENT $133D store to status, this means no otter on screen if zero
FORCE_SYMBOL $133D otter_status
COMMENT $133F otherwise use A as timer information HI
FORCE_SYMBOL $133F otter_timer_start
COMMENT_LINE $1341 rest of otter is initialized below in the 'allways' section
COMMENT $1341 snake on log
COMMENT $1343 store to status, this means no snake on log
FORCE_SYMBOL $1343 snake_status
COMMENT $1345 if !=0 than it is the round_counter
FORCE_SYMBOL $1345 snake_round_counter_reset
COMMENT $1347 and go on
COMMENT_LINE $1349 x, y pos will be set in sprite draw loop
COMMENT_LINE $1349 speed will also be taken from host (log) object
COMMENT $1349 load animation counter
FORCE_NO_SYMBOL $1349
COMMENT $134B and store it to object
FORCE_SYMBOL $134B snake_anim_counter
COMMENT $134D align snake to first object in band 3
COMMENT $1351 remember the object list position of that object
FORCE_NO_SYMBOL $1351
COMMENT $1354 get the object address
FORCE_NO_SYMBOL $1354
COMMENT $1356 get the speed of the object
FORCE_NO_SYMBOL $1356
COMMENT $1358 allways go from left to right on startup...
COMMENT $1359 store it
FORCE_SYMBOL $1359 snake_speed_start
COMMENT $135B add three to object list position for easier checking in
FORCE_NO_SYMBOL $135B
COMMENT_LINE $135D draw object routine
COMMENT $135D save the objectlist address...
FORCE_SYMBOL $135D snake_log_object
COMMENT $1360 female
COMMENT $1362 store to status, this means no girl on screen
FORCE_SYMBOL $1362 girl_status
COMMENT $1364 if !=0 than it is the round_counter
FORCE_SYMBOL $1364 girl_round_counter_reset
COMMENT $1366 and go on
COMMENT_LINE $1368 x, y pos will be set in sprite draw loop
COMMENT_LINE $1368 speed will also be taken from host (log) object
COMMENT $1368 load animation counter
FORCE_NO_SYMBOL $1368
COMMENT $136A and store it to object
FORCE_SYMBOL $136A girl_anim_counter
COMMENT $136C clear the girl zero vector
FORCE_SYMBOL $136C girl_zero
COMMENT $136E so that we jump out of the display loop
COMMENT $1370 align girl to first object in band 4
COMMENT $1374 remember the object list position of that object
FORCE_NO_SYMBOL $1374
COMMENT $1377 get the object address
FORCE_NO_SYMBOL $1377
COMMENT $1379 get the speed of the object
FORCE_NO_SYMBOL $1379
COMMENT $137B store it
FORCE_SYMBOL $137B girl_speed
COMMENT $137D add three to object list position for easier checking in
FORCE_NO_SYMBOL $137D
COMMENT_LINE $137F draw object routine
COMMENT $137F save the objectlist address...
FORCE_SYMBOL $137F girl_log_object
COMMENT $1382 timer
COMMENT $1384 store time for level information
FORCE_SYMBOL $1384 my_timer_start
COMMENT $1386 and set low timer
FORCE_NO_SYMBOL $1386
COMMENT_LINE $1388 this now has the same length as the middway
COMMENT_LINE $1388 (if timer in level is set correctly that is)
COMMENT $1388 store it
COMMENT $138A turtle timer
COMMENT $138C load the diving counter
FORCE_SYMBOL $138C dive_timer_start
COMMENT $138E and set the timer for diving HI
FORCE_SYMBOL $138E dive_timer
COMMENT $1390 clear LO
COMMENT_LINE $1392 from here on again some 'allways init' stuff
COMMENT $1392 if !=0 than it is the round_counter
FORCE_SYMBOL $1392 girl_round_counter_reset
COMMENT $1394 if !=0 than it is the round_counter
FORCE_SYMBOL $1394 girl_round_counter
COMMENT $1398 girl is waiting to be displayed
FORCE_SYMBOL $1398 IS_WAITING
COMMENT $139A store it
FORCE_SYMBOL $139A girl_status
COMMENT $139C if !=0 than it is the round_counter
FORCE_SYMBOL $139C snake_round_counter_reset
COMMENT $139E if !=0 than it is the round_counter
FORCE_SYMBOL $139E snake_round_counter
COMMENT $13A2 snake is waiting to be displayed
FORCE_SYMBOL $13A2 IS_WAITING
COMMENT $13A4 store it
FORCE_SYMBOL $13A4 snake_status
COMMENT $13A6 reload the otter timer
FORCE_SYMBOL $13A6 otter_timer_start
COMMENT $13A8 and store it
FORCE_SYMBOL $13A8 otter_timer
COMMENT $13AC otter status now is 'is waiting'
FORCE_SYMBOL $13AC IS_WAITING
COMMENT $13AE store the status
FORCE_SYMBOL $13AE otter_status
COMMENT $13B0 no bonus collected for this frog
FORCE_SYMBOL $13B0 frog_bonus
COMMENT $13B2 reset timer
FORCE_SYMBOL $13B2 my_timer_start
COMMENT $13B4 store it
FORCE_SYMBOL $13B4 my_timer
COMMENT $13B6 needed for band information calculation
COMMENT $13B8 when frog 'rides' an object
FORCE_SYMBOL $13B8 tmp_band_offset
COMMENT_LINE $13BB ***************************************************************************
COMMENT $13BB 'OS' high score
FORCE_SYMBOL $13BB Vec_High_Score
COMMENT $13BE own last score
FORCE_SYMBOL $13BE no_score_string
COMMENT $13C1 jsr to compare the score now, to 'OS' high score
FORCE_SYMBOL $13C1 Compare_Score
COMMENT $13C4 if 1, than the new score is new highscore
FORCE_NO_SYMBOL $13C4
COMMENT $13C6 if not new high score, than jump
COMMENT $13C8 otherwise set this as new high
FORCE_SYMBOL $13C8 new_high_score
COMMENT $13CB 'OS' high score
FORCE_SYMBOL $13CB Vec_High_Score
COMMENT $13CE own last score
FORCE_SYMBOL $13CE no_score_string
COMMENT $13D1 if own was higher, set 'OS' == own
FORCE_SYMBOL $13D1 New_High_Score
COMMENT $13D4 not speed optimized, but space!
FORCE_SYMBOL $13D4 DP_to_C8
COMMENT_LINE $13D7 do some extro
COMMENT $13D7 clear A
COMMENT $13D8 and store in intensity
FORCE_SYMBOL $13D8 game_over_intensity
COMMENT $13DA scale x
FORCE_SYMBOL $13DA game_over_scalex
COMMENT $13DC scale y
FORCE_SYMBOL $13DC game_over_scaley
COMMENT $13DE pos y
FORCE_SYMBOL $13DE game_over_ypos
COMMENT $13E0 pos x of game over string
FORCE_SYMBOL $13E0 game_over_xpos
COMMENT_LINE $13E2 the next instructions initialize a new sound
COMMENT_LINE $13E2 load #1
COMMENT_LINE $13E2 set this as marker for music start
COMMENT $13E2 doesn'T destroy a register
FORCE_SYMBOL $13E2 Vec_Music_Flag
COMMENT $13E4 to do it that way
FORCE_SYMBOL $13E4 Vec_Music_Flag
COMMENT $13E6 load a music structure (piece_of_music)
FORCE_SYMBOL $13E6 musicb
COMMENT $13E9 and store it to my own music active pointer
FORCE_SYMBOL $13E9 music_active
COMMENT_LINE $13EB next a do_my_sound and than do sound must be called
COMMENT $13EB (MAKRO) see above
COMMENT $13EB (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $13EB
COMMENT $13EF pretty for optimizing to use a makro :-)
COMMENT $13EF get active music
FORCE_SYMBOL $13EF music_active
COMMENT $13F1 and init new notes
FORCE_SYMBOL $13F1 Init_Music_chk
COMMENT $13F4 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $13F4 Wait_Recal
COMMENT $13F7 just for assembler optimization...
COMMENT $13F7 ROM function that does the sound playing
FORCE_SYMBOL $13F7 Do_Sound
COMMENT_LINE $13FA now print something on screen
COMMENT $13FA prepare drawing of game over string
FORCE_SYMBOL $13FA game_over_scaley
COMMENT $13FD load scaling stuff
FORCE_SYMBOL $13FD game_over_scalex
COMMENT $1400 poke it to ram location
FORCE_SYMBOL $1400 Vec_Text_HW
COMMENT $1403 load intensity
FORCE_SYMBOL $1403 game_over_intensity
COMMENT $1406 set intensity
FORCE_SYMBOL $1406 Intensity_a
COMMENT $1409 load position
FORCE_SYMBOL $1409 game_over_ypos
COMMENT $140C to D (A,B) register
FORCE_SYMBOL $140C game_over_xpos
COMMENT $140F and the address of the string itself
FORCE_SYMBOL $140F game_over_string
COMMENT $1412 and draw it
FORCE_SYMBOL $1412 Print_Str_d
COMMENT_LINE $1415 calculate new appearence
COMMENT $1415 increase intensity
FORCE_SYMBOL $1415 game_over_intensity
COMMENT $1418 three per step
FORCE_NO_SYMBOL $1418
COMMENT $141A store it
FORCE_SYMBOL $141A game_over_intensity
COMMENT $141D every second step increase
FORCE_NO_SYMBOL $141D
COMMENT $141F y scale of string
COMMENT $1421 load it
FORCE_SYMBOL $1421 game_over_scaley
COMMENT $1424 increase it
FORCE_NO_SYMBOL $1424
COMMENT $1426 save it
FORCE_SYMBOL $1426 game_over_scaley
COMMENT $1429 now look at the position of the
FORCE_SYMBOL $1429 game_over_ypos
COMMENT $142C string, first y pos
FORCE_NO_SYMBOL $142C
COMMENT $142E increase it by two, but not to much
FORCE_NO_SYMBOL $142E
COMMENT $1432 maximum at $70
FORCE_NO_SYMBOL $1432
COMMENT $1434 store it
FORCE_SYMBOL $1434 game_over_ypos
COMMENT $1437 likewise treat x pos load it
FORCE_SYMBOL $1437 game_over_xpos
COMMENT $143A decrease it
FORCE_NO_SYMBOL $143A
COMMENT $143C till -$70
COMMENT $1440 or use minimum of -$70
COMMENT $1442 store it
FORCE_SYMBOL $1442 game_over_xpos
COMMENT $1445 now do the x scaling
FORCE_SYMBOL $1445 game_over_scalex
COMMENT $1448 every round add 3
FORCE_NO_SYMBOL $1448
COMMENT $144A and store it
FORCE_SYMBOL $144A game_over_scalex
COMMENT $144D do all this
FORCE_SYMBOL $144D game_over_intensity
COMMENT $1450 till intensity is full
FORCE_NO_SYMBOL $1450
COMMENT $1452 do the game loop
COMMENT $1454 get button status once, since only
FORCE_SYMBOL $1454 Read_Btns
COMMENT_LINE $1457 differences are noticed
COMMENT $1457 now correct x scaling
FORCE_SYMBOL $1457 game_over_scalex
COMMENT $145A since it just rolled over, sub 3
FORCE_NO_SYMBOL $145A
COMMENT $145C and store it
FORCE_SYMBOL $145C game_over_scalex
COMMENT $145F load address of morph structure
FORCE_SYMBOL $145F morph_countdown1
COMMENT $1462 and initialize a new morphing
FORCE_SYMBOL $1462 set_up_morphing
COMMENT $1465 do sound and integrator reset stuff
COMMENT $1465 (MAKRO) see above
COMMENT $1465 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1465
COMMENT $1469 pretty for optimizing to use a makro :-)
COMMENT $1469 get active music
FORCE_SYMBOL $1469 music_active
COMMENT $146B and init new notes
FORCE_SYMBOL $146B Init_Music_chk
COMMENT $146E sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $146E Wait_Recal
COMMENT $1471 just for assembler optimization...
COMMENT $1471 ROM function that does the sound playing
FORCE_SYMBOL $1471 Do_Sound
COMMENT $1474 and do it
FORCE_SYMBOL $1474 Intensity_5F
COMMENT $1477 load score text size
FORCE_SYMBOL $1477 LITTLE_TEXT_SIZE
COMMENT $147A poke it to ram location
FORCE_SYMBOL $147A Vec_Text_HW
COMMENT $147D Y=-$70, X=-$30
COMMENT $1480 get address of string
FORCE_SYMBOL $1480 score_only_string
COMMENT $1483 and draw it
FORCE_SYMBOL $1483 Print_Str_d
COMMENT $1486 prepare drawing of game over string
FORCE_SYMBOL $1486 game_over_scaley
COMMENT $1489 load scaling stuff
FORCE_SYMBOL $1489 game_over_scalex
COMMENT $148C poke it to ram location
FORCE_SYMBOL $148C Vec_Text_HW
COMMENT $148F load position
FORCE_SYMBOL $148F game_over_ypos
COMMENT $1492 to D (A,B) register
FORCE_SYMBOL $1492 game_over_xpos
COMMENT $1495 and the address of the string itself
FORCE_SYMBOL $1495 game_over_string
COMMENT $1498 and draw it
FORCE_SYMBOL $1498 Print_Str_d
COMMENT $149B and do it
FORCE_SYMBOL $149B Intensity_5F
COMMENT $149E back to zero
FORCE_NO_SYMBOL $149E
COMMENT $14A0 /BLANK low and /ZERO low
FORCE_SYMBOL $14A0 VIA_cntl
COMMENT $14A2 look of morphing is complete
FORCE_SYMBOL $14A2 morph_status
COMMENT $14A5 don't morph anymore
COMMENT $14A9 does one morph step, changing of vectors
FORCE_SYMBOL $14A9 do_one_morph_step_16
COMMENT $14AC scale for placing first point
COMMENT $14AE move to time 1 lo, this means scaling
FORCE_SYMBOL $14AE VIA_t1_cnt_lo
COMMENT $14B0 y=0, X = '5'
COMMENT $14B3 and move there
FORCE_SYMBOL $14B3 Moveto_d
COMMENT $14B6 load the morph vector list to X
FORCE_SYMBOL $14B6 current_morph_vectorlist
COMMENT $14B9 scale it correctly
COMMENT $14B9 scale for placing first point
FORCE_SYMBOL $14B9 SCALE_FACTOR_VECTOR_MORPH
COMMENT $14BB move to time 1 lo, this means scaling
FORCE_SYMBOL $14BB VIA_t1_cnt_lo
COMMENT $14BD and draw the vectorlist
FORCE_SYMBOL $14BD Draw_VLc
COMMENT $14C0 back to zero
FORCE_NO_SYMBOL $14C0
COMMENT $14C2 /BLANK low and /ZERO low
FORCE_SYMBOL $14C2 VIA_cntl
COMMENT $14C4 load score text size
FORCE_SYMBOL $14C4 LITTLE_TEXT_SIZE
COMMENT $14C7 poke it to ram location
FORCE_SYMBOL $14C7 Vec_Text_HW
COMMENT $14CA load position, to D (A,B) register
COMMENT $14CD get address of string
FORCE_SYMBOL $14CD continue_string
COMMENT $14D0 and draw it
FORCE_SYMBOL $14D0 Print_Str_d
COMMENT_LINE $14D3 morph_complete:
COMMENT $14D3 get button status
FORCE_SYMBOL $14D3 Read_Btns
COMMENT $14D6 is a button pressed?
FORCE_NO_SYMBOL $14D6
COMMENT $14D8 no, than stay in game_over_loop2
COMMENT_LINE $14DA here continue...
FORCE_SYMBOL $14DA DP_to_C8
FORCE_SYMBOL $14DD reinit_level
COMMENT $14E0 clear the frog variables
FORCE_SYMBOL $14E0 continue_level
COMMENT_LINE $14E6 BRA     new_game          ; start a new game
COMMENT_LINE $14E6 ***************************************************************************
COMMENT_LINE $14E6 subroutines for intermissions
COMMENT_LINE $14E6 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $14E6 in March-April 1998
COMMENT_LINE $14E6 all stuff contained here is public domain
COMMENT_LINE $14E6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $14E6 this file contains subroutines declared as 'intermissions', like          ;
COMMENT_LINE $14E6 game over, level done, new life...                                        ;
COMMENT_LINE $14E6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $14E6 ***************************************************************************
COMMENT_LINE $14E6 does ROUND_STARTUP
COMMENT_LINE $14E6 sets score text size
COMMENT_LINE $14E6 sets intensity to $60
COMMENT_LINE $14E6 prints score, level frogs
COMMENT_LINE $14E6 this routine takes about 10000 cycles...
COMMENT_LINE $14E6 damn the stupid text output!!!
COMMENT $14E6 load score text size
FORCE_SYMBOL $14E6 SCORE_TEXT_SIZE
COMMENT $14E9 poke it to ram location
FORCE_SYMBOL $14E9 Vec_Text_HW
COMMENT $14EC (MAKRO) see above
COMMENT $14EC (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $14EC
COMMENT $14F0 pretty for optimizing to use a makro :-)
COMMENT $14F0 get active music
FORCE_SYMBOL $14F0 music_active
COMMENT $14F2 and init new notes
FORCE_SYMBOL $14F2 Init_Music_chk
COMMENT $14F5 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $14F5 Wait_Recal
COMMENT $14F8 just for assembler optimization...
COMMENT $14F8 ROM function that does the sound playing
FORCE_SYMBOL $14F8 Do_Sound
FORCE_SYMBOL $14FB Intensity_5F
COMMENT $14FE load text start to U
FORCE_SYMBOL $14FE score_string
COMMENT $1501 for the $80
FORCE_NO_SYMBOL $1501
COMMENT $1503 we store temporarily Spaces
FORCE_NO_SYMBOL $1503
COMMENT $1505 ...
FORCE_NO_SYMBOL $1505
COMMENT $1508 load the position
COMMENT $150B and do a simple print_str_d
FORCE_SYMBOL $150B Print_Str_d
COMMENT $150E load text start to U
FORCE_SYMBOL $150E score_string
COMMENT $1511 now we restore the $80
FORCE_NO_SYMBOL $1511
COMMENT $1513 otherwise the scoring
FORCE_NO_SYMBOL $1513
COMMENT $1515 will be busted
FORCE_NO_SYMBOL $1515
COMMENT $1518 bye
COMMENT_LINE $1519 ***************************************************************************
COMMENT_LINE $1519 death intermission
FORCE_NO_SYMBOL $1519
FORCE_SYMBOL $151B counter
COMMENT $151D be quiet
COMMENT $151D no music is playing ->0
FORCE_SYMBOL $151D Vec_Music_Flag
COMMENT $151F shadow regs
FORCE_SYMBOL $151F Init_Music_Buf
COMMENT_LINE $1522 in the next do sound call
COMMENT_LINE $1522 all regs are cleared automatically
COMMENT_LINE $1522 fix the current frog position for 'dead frog'
COMMENT $1522 load old pos to B
FORCE_SYMBOL $1522 frog_pos
COMMENT $1524 korrekt the old offset y
FORCE_SYMBOL $1524 current_frog_offset
COMMENT $1526 korrekt the old offset x
COMMENT $1528 korrekt the new offset y
FORCE_SYMBOL $1528 frogger_up_offset
COMMENT $152B korrekt the new offset x
COMMENT $152E store it back
FORCE_SYMBOL $152E frog_pos
COMMENT $1530 well, have a guess
COMMENT_LINE $1530 the next instructions initialize a new sound
COMMENT_LINE $1530 load #1
COMMENT_LINE $1530 set this as marker for music start
COMMENT $1530 doesn'T destroy a register
FORCE_SYMBOL $1530 Vec_Music_Flag
COMMENT $1532 to do it that way
FORCE_SYMBOL $1532 Vec_Music_Flag
COMMENT $1534 load a music structure (piece_of_music)
FORCE_SYMBOL $1534 death_sound
COMMENT $1537 and store it to my own music active pointer
FORCE_SYMBOL $1537 music_active
COMMENT_LINE $1539 next a do_my_sound and than do sound must be called
COMMENT $1539 counter for in level death sequence
FORCE_NO_SYMBOL $1539
COMMENT $153B remember the counter
COMMENT $153D this is a new round...
COMMENT $153D (MAKRO) see above
COMMENT $153D (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $153D
COMMENT $1541 pretty for optimizing to use a makro :-)
COMMENT $1541 get active music
FORCE_SYMBOL $1541 music_active
COMMENT $1543 and init new notes
FORCE_SYMBOL $1543 Init_Music_chk
COMMENT $1546 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $1546 Wait_Recal
COMMENT $1549 just for assembler optimization...
COMMENT $1549 ROM function that does the sound playing
FORCE_SYMBOL $1549 Do_Sound
FORCE_SYMBOL $154C Intensity_7F
COMMENT $154F set the scale factor for positioning
FORCE_SYMBOL $154F SCALE_FACTOR_GAME
COMMENT $1551 move to time 1 lo, this means scaling
FORCE_SYMBOL $1551 VIA_t1_cnt_lo
COMMENT $1553 load current frog position to D
FORCE_SYMBOL $1553 frog_pos
COMMENT $1556 go to that position
FORCE_SYMBOL $1556 Moveto_d
COMMENT $1559 scale factor for frog
COMMENT $1559 scale for placing first point
FORCE_SYMBOL $1559 SCALE_FACTOR_SPRITE
COMMENT $155B move to time 1 lo, this means scaling
FORCE_SYMBOL $155B VIA_t1_cnt_lo
COMMENT $155D load current frog sprite, dead here...
FORCE_SYMBOL $155D frog_dead_pic
COMMENT $1560 and draw it
FORCE_SYMBOL $1560 Draw_VLc
COMMENT $1563 mystery, for draw VL makro :-)
COMMENT $1564 draw_objects, same as on timer countdown
FORCE_SYMBOL $1564 entry_timer_count_down
COMMENT $1567 get our round counter back...
COMMENT $1569 decrease it
COMMENT $156A and loop until when not zero yet
COMMENT $156C jumps allready jumped in this level
FORCE_SYMBOL $156C level_score
COMMENT $156F times 10
FORCE_NO_SYMBOL $156F
COMMENT $1572 must be in A :-(
COMMENT $1574 load level address
FORCE_SYMBOL $1574 no_score_string
COMMENT $1577 must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $1577 Vec_Misc_Count
COMMENT $157A add to score(level)
FORCE_SYMBOL $157A Add_Score_a
COMMENT $157D get button status once, since only
FORCE_SYMBOL $157D Read_Btns
COMMENT_LINE $1580 differences are noticed
COMMENT $1580 load score text size
FORCE_SYMBOL $1580 LITTLE_TEXT_SIZE
COMMENT $1583 poke it to ram location
FORCE_SYMBOL $1583 Vec_Text_HW
COMMENT $1586 be quiet
COMMENT $1586 no music is playing ->0
FORCE_SYMBOL $1586 Vec_Music_Flag
COMMENT $1589 shadow regs
FORCE_SYMBOL $1589 Init_Music_Buf
COMMENT_LINE $158C in the next do sound call
COMMENT_LINE $158C all regs are cleared automatically
COMMENT_LINE $158C the next instructions initialize a new sound
COMMENT_LINE $158C load #1
COMMENT_LINE $158C set this as marker for music start
COMMENT $158C doesn'T destroy a register
FORCE_SYMBOL $158C Vec_Music_Flag
COMMENT $158F to do it that way
FORCE_SYMBOL $158F Vec_Music_Flag
COMMENT $1592 load a music structure (piece_of_music)
FORCE_SYMBOL $1592 yankee
COMMENT $1595 and store it to my own music active pointer
FORCE_SYMBOL $1595 music_active
COMMENT_LINE $1598 next a do_my_sound and than do sound must be called
COMMENT $1598 load address of morph structure
FORCE_SYMBOL $1598 morph_death1
COMMENT $159B and initialize a new morphing
FORCE_SYMBOL $159B set_up_morphing
COMMENT $159E this is a new round...
COMMENT $159E (MAKRO) see above
COMMENT $159E (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $159E
COMMENT $15A2 pretty for optimizing to use a makro :-)
COMMENT $15A2 get active music
FORCE_SYMBOL $15A2 music_active
COMMENT $15A4 and init new notes
FORCE_SYMBOL $15A4 Init_Music_chk
COMMENT $15A7 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $15A7 Wait_Recal
COMMENT $15AA just for assembler optimization...
COMMENT $15AA ROM function that does the sound playing
FORCE_SYMBOL $15AA Do_Sound
COMMENT $15AD load text start to U
FORCE_SYMBOL $15AD died
FORCE_SYMBOL $15B0 Print_List
COMMENT $15B3 how did we die?
FORCE_SYMBOL $15B3 kind_of_death
COMMENT $15B6 load text start to U
FORCE_SYMBOL $15B6 cause_strings
COMMENT_LINE $15B9 Get A=Y, B=X (D=AB) coordinate
COMMENT $15B9 load text start to U
COMMENT $15BE Print the string
FORCE_SYMBOL $15BE Print_Str_d
COMMENT $15C1 back to zero
FORCE_NO_SYMBOL $15C1
COMMENT $15C3 /BLANK low and /ZERO low
FORCE_SYMBOL $15C3 VIA_cntl
COMMENT $15C5 look of morphing is complete
FORCE_SYMBOL $15C5 morph_status
COMMENT $15C8 don't morph anymore
COMMENT $15CA does one morph step, changing of vectors
FORCE_SYMBOL $15CA do_one_morph_step_16
COMMENT $15CD /Blank low, /ZERO high
FORCE_NO_SYMBOL $15CD
COMMENT $15CF needed, since print_str leaves ZERO low!
FORCE_SYMBOL $15CF VIA_cntl
COMMENT $15D1 load the morph vector list to X
FORCE_SYMBOL $15D1 current_morph_vectorlist
COMMENT $15D4 scale it correctly
COMMENT $15D4 scale for placing first point
FORCE_NO_SYMBOL $15D4
COMMENT $15D6 move to time 1 lo, this means scaling
FORCE_SYMBOL $15D6 VIA_t1_cnt_lo
COMMENT $15D8 and draw the vectorlist
FORCE_SYMBOL $15D8 Draw_VLc
COMMENT $15DB get button status
FORCE_SYMBOL $15DB Read_Btns
COMMENT $15DE is a button pressed?
FORCE_NO_SYMBOL $15DE
COMMENT $15E0 no, than stay in init_screen_loop
FORCE_SYMBOL $15E2 DP_to_C8
COMMENT $15E5 last JSR can allways be a jump
FORCE_SYMBOL $15E5 reinit_level
FORCE_SYMBOL $15E8 counter
COMMENT_LINE $15EF ***************************************************************************
COMMENT_LINE $15EF frog reached home intermission
COMMENT $15EF must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $15EF Vec_Misc_Count
FORCE_NO_SYMBOL $15F1
FORCE_SYMBOL $15F3 counter
COMMENT $15F5 be quiet
COMMENT $15F5 no music is playing ->0
FORCE_SYMBOL $15F5 Vec_Music_Flag
COMMENT $15F7 shadow regs
FORCE_SYMBOL $15F7 Init_Music_Buf
COMMENT_LINE $15FA in the next do sound call
COMMENT_LINE $15FA all regs are cleared automatically
COMMENT $15FA load bonus state
FORCE_SYMBOL $15FA frog_bonus
COMMENT $15FC is there a fly bonus
FORCE_SYMBOL $15FC FLY_BONUS
COMMENT $15FE if no jump
COMMENT $1600 otherwise load 200
FORCE_NO_SYMBOL $1600
COMMENT $1602 load score address
FORCE_SYMBOL $1602 no_score_string
COMMENT $1605 add to score
FORCE_SYMBOL $1605 Add_Score_a
COMMENT $1608 load bonus state
FORCE_SYMBOL $1608 frog_bonus
COMMENT $160A is there a girl bonus
FORCE_SYMBOL $160A GIRL_BONUS
COMMENT $160C if no jump
COMMENT $160E otherwise load 200
FORCE_NO_SYMBOL $160E
COMMENT $1610 load score address
FORCE_SYMBOL $1610 no_score_string
COMMENT $1613 add to score
FORCE_SYMBOL $1613 Add_Score_a
COMMENT $1616 load the timer value
FORCE_SYMBOL $1616 my_timer
COMMENT_LINE $1618 here starts the timer count down loop
COMMENT $1618 store the timer value
FORCE_SYMBOL $1618 my_timer
COMMENT $161B add 10 for each 2 timer ticks
FORCE_NO_SYMBOL $161B
COMMENT $161D load level address
FORCE_SYMBOL $161D no_score_string
COMMENT $1620 must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $1620 Vec_Misc_Count
COMMENT $1623 add to score(level)
FORCE_SYMBOL $1623 Add_Score_a
COMMENT $1626 (MAKRO) see above
COMMENT $1626 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1626
COMMENT $162A pretty for optimizing to use a makro :-)
COMMENT $162A get active music
FORCE_SYMBOL $162A music_active
COMMENT $162C and init new notes
FORCE_SYMBOL $162C Init_Music_chk
COMMENT $162F sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $162F Wait_Recal
COMMENT $1632 just for assembler optimization...
COMMENT $1632 ROM function that does the sound playing
FORCE_SYMBOL $1632 Do_Sound
FORCE_SYMBOL $1635 Intensity_7F
COMMENT $1638 mystery, for draw VL makro :-)
COMMENT $1639 draw_objects
FORCE_SYMBOL $1639 entry_timer_count_down
COMMENT $163C add some accoustic
COMMENT_LINE $163C the next instructions initialize a new sound
COMMENT_LINE $163C load #1
COMMENT_LINE $163C set this as marker for music start
COMMENT $163C doesn'T destroy a register
FORCE_SYMBOL $163C Vec_Music_Flag
COMMENT $163F to do it that way
FORCE_SYMBOL $163F Vec_Music_Flag
COMMENT $1642 load a music structure (piece_of_music)
FORCE_SYMBOL $1642 triller2
COMMENT $1645 and store it to my own music active pointer
FORCE_SYMBOL $1645 music_active
COMMENT_LINE $1648 next a do_my_sound and than do sound must be called
COMMENT $1648 load the timer value
FORCE_SYMBOL $1648 my_timer
COMMENT $164B count it down by $20
FORCE_NO_SYMBOL $164B
COMMENT $164D if not minus... go on
COMMENT $164F add jumps times 10 (forward)
FORCE_SYMBOL $164F level_score
COMMENT $1652 could be fixed,
FORCE_NO_SYMBOL $1652
COMMENT $1655 must be in A :-(
COMMENT $1657 load level address
FORCE_SYMBOL $1657 no_score_string
COMMENT $165A must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $165A Vec_Misc_Count
COMMENT $165D add to score(level)
FORCE_SYMBOL $165D Add_Score_a
COMMENT $1660 get button status once, since only
FORCE_SYMBOL $1660 Read_Btns
COMMENT_LINE $1663 differences are noticed
COMMENT $1663 load score text size
FORCE_SYMBOL $1663 LITTLE_TEXT_SIZE
COMMENT $1666 poke it to ram location
FORCE_SYMBOL $1666 Vec_Text_HW
COMMENT_LINE $1669 the next instructions initialize a new sound
COMMENT_LINE $1669 load #1
COMMENT_LINE $1669 set this as marker for music start
COMMENT $1669 doesn'T destroy a register
FORCE_SYMBOL $1669 Vec_Music_Flag
COMMENT $166C to do it that way
FORCE_SYMBOL $166C Vec_Music_Flag
COMMENT $166F load a music structure (piece_of_music)
FORCE_SYMBOL $166F frog_home_sound
COMMENT $1672 and store it to my own music active pointer
FORCE_SYMBOL $1672 music_active
COMMENT_LINE $1675 next a do_my_sound and than do sound must be called
COMMENT $1675 load address of morph structure
FORCE_SYMBOL $1675 morph_home1
COMMENT $1678 and initialize a new morphing
FORCE_SYMBOL $1678 set_up_morphing
COMMENT $167B (MAKRO) see above
COMMENT $167B (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $167B
COMMENT $167F pretty for optimizing to use a makro :-)
COMMENT $167F get active music
FORCE_SYMBOL $167F music_active
COMMENT $1681 and init new notes
FORCE_SYMBOL $1681 Init_Music_chk
COMMENT $1684 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $1684 Wait_Recal
COMMENT $1687 just for assembler optimization...
COMMENT $1687 ROM function that does the sound playing
FORCE_SYMBOL $1687 Do_Sound
COMMENT $168A load text start to U
FORCE_SYMBOL $168A reached_home
COMMENT_LINE $168D Get A=Y, B=X (D=AB) coordinate
COMMENT $1690 Print the string
FORCE_SYMBOL $1690 Print_Str_d
COMMENT $1693 was there a fly bonus?
FORCE_SYMBOL $1693 frog_bonus
FORCE_SYMBOL $1696 FLY_BONUS
COMMENT $1698 if not jump
COMMENT $169A load text start to U
FORCE_SYMBOL $169A fly_bonus_text
COMMENT_LINE $169D Get A=Y, B=X (D=AB) coordinate
COMMENT $16A0 Print the string
FORCE_SYMBOL $16A0 Print_Str_d
COMMENT $16A3 was there a girl bonus?
FORCE_SYMBOL $16A3 frog_bonus
COMMENT $16A6 if not jump
FORCE_SYMBOL $16A6 GIRL_BONUS
COMMENT $16AA load text start to U
FORCE_SYMBOL $16AA girl_bonus_text
COMMENT_LINE $16AD Get A=Y, B=X (D=AB) coordinate
COMMENT $16B0 Print the string
FORCE_SYMBOL $16B0 Print_Str_d
COMMENT $16B3 back to zero
FORCE_NO_SYMBOL $16B3
COMMENT $16B5 /BLANK low and /ZERO low
FORCE_SYMBOL $16B5 VIA_cntl
COMMENT $16B7 look of morphing is complete
FORCE_SYMBOL $16B7 morph_status
COMMENT $16BA don't morph anymore
COMMENT $16BC does one morph step, changing of vectors
FORCE_SYMBOL $16BC do_one_morph_step_16
COMMENT $16BF /Blank low, /ZERO high
FORCE_NO_SYMBOL $16BF
COMMENT $16C1 needed, since print_str leaves ZERO low!
FORCE_SYMBOL $16C1 VIA_cntl
COMMENT $16C3 load the morph vector list to X
FORCE_SYMBOL $16C3 current_morph_vectorlist
COMMENT $16C6 scale it correctly
COMMENT $16C6 scale for placing first point
FORCE_NO_SYMBOL $16C6
COMMENT $16C8 move to time 1 lo, this means scaling
FORCE_SYMBOL $16C8 VIA_t1_cnt_lo
COMMENT $16CA and draw the vectorlist
FORCE_SYMBOL $16CA Draw_VLc
COMMENT $16CD get button status
FORCE_SYMBOL $16CD Read_Btns
COMMENT $16D0 is a button pressed?
FORCE_NO_SYMBOL $16D0
COMMENT $16D2 no, than stay in init_screen_loop
FORCE_SYMBOL $16D6 counter
COMMENT $16DB load the 5th digit
COMMENT $16DE changed from last check?
FORCE_SYMBOL $16DE high_check
COMMENT $16E1 if not go on
COMMENT $16E3 otherwise stroe new value to check
FORCE_SYMBOL $16E3 high_check
COMMENT $16E6 incraese frog lifes
FORCE_SYMBOL $16E6 no_frogs
COMMENT $16E9 and do an intermission
FORCE_SYMBOL $16E9 new_life_intermission
COMMENT_LINE $16EF ***************************************************************************
COMMENT $16EF must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $16EF Vec_Misc_Count
COMMENT $16F1 be quiet
COMMENT $16F1 no music is playing ->0
FORCE_SYMBOL $16F1 Vec_Music_Flag
COMMENT $16F3 shadow regs
FORCE_SYMBOL $16F3 Init_Music_Buf
COMMENT_LINE $16F6 in the next do sound call
COMMENT_LINE $16F6 all regs are cleared automatically
FORCE_NO_SYMBOL $16F6
COMMENT $16F8 load level address
FORCE_SYMBOL $16F8 no_score_string
COMMENT $16FB add to score(level)
FORCE_SYMBOL $16FB Add_Score_a
FORCE_NO_SYMBOL $16FE
COMMENT $1700 load level address
FORCE_SYMBOL $1700 no_score_string
COMMENT $1703 add to score(level)
FORCE_SYMBOL $1703 Add_Score_a
COMMENT $1706 load this level to A
FORCE_SYMBOL $1706 game_level
COMMENT $1708 remember it...
COMMENT_LINE $170A load 'LEVEL DONE' level number
COMMENT $170C and store it to game level
FORCE_SYMBOL $170C game_level
COMMENT $170E set this level up
FORCE_SYMBOL $170E setup_level
COMMENT $1711 and init it
FORCE_SYMBOL $1711 init_new_frog_vars
COMMENT_LINE $1714 display till button pressed
COMMENT_LINE $1714 the next instructions initialize a new sound
COMMENT_LINE $1714 load #1
COMMENT_LINE $1714 set this as marker for music start
COMMENT $1714 doesn'T destroy a register
FORCE_SYMBOL $1714 Vec_Music_Flag
COMMENT $1716 to do it that way
FORCE_SYMBOL $1716 Vec_Music_Flag
COMMENT $1718 load a music structure (piece_of_music)
FORCE_SYMBOL $1718 level_done_sound
COMMENT $171B and store it to my own music active pointer
FORCE_SYMBOL $171B music_active
COMMENT_LINE $171D next a do_my_sound and than do sound must be called
FORCE_SYMBOL $171D print_score
COMMENT $1720 load score text size
FORCE_SYMBOL $1720 LITTLE_TEXT_SIZE
COMMENT $1723 poke it to ram location
FORCE_SYMBOL $1723 Vec_Text_HW
FORCE_SYMBOL $1726 level_complete_text
COMMENT $172C Print the string
FORCE_SYMBOL $172C Print_Str_d
COMMENT $172F draw this 'level'
FORCE_SYMBOL $172F entry_level_done
COMMENT $1732 test the music flag
FORCE_SYMBOL $1732 Vec_Music_Flag
COMMENT $1735 if music done, get out of loop
COMMENT $1737 get button status
FORCE_SYMBOL $1737 Read_Btns
COMMENT $173A is a button pressed?
FORCE_NO_SYMBOL $173A
COMMENT $173C no, than stay in init_screen_loop
COMMENT $173E restore old game level
COMMENT $1740 and set it
FORCE_SYMBOL $1740 game_level
COMMENT $1743 load the 5th digit
COMMENT $1746 changed from last check?
FORCE_SYMBOL $1746 high_check
COMMENT $1749 if not go on
COMMENT $174B otherwise stroe new value to check
FORCE_SYMBOL $174B high_check
COMMENT $174E incraese frog lifes
FORCE_SYMBOL $174E no_frogs
COMMENT $1751 and do an intermission
FORCE_SYMBOL $1751 new_life_intermission
COMMENT_LINE $1755 ***************************************************************************
COMMENT_LINE $1755 and some 'small' intermissions...
COMMENT_LINE $1755 just text, nothing fancy
COMMENT_LINE $1755 the following functions could as well be only one with a
COMMENT_LINE $1755 index pointer to the text to be displayed...
COMMENT_LINE $1755 well, we got space enough, haven't we?
COMMENT $1755 be quiet
COMMENT $1755 no music is playing ->0
FORCE_SYMBOL $1755 Vec_Music_Flag
COMMENT $1758 shadow regs
FORCE_SYMBOL $1758 Init_Music_Buf
COMMENT_LINE $175B in the next do sound call
COMMENT_LINE $175B all regs are cleared automatically
COMMENT $175B get button status
FORCE_SYMBOL $175B Read_Btns
COMMENT $175E load a timer, how long the following
FORCE_NO_SYMBOL $175E
COMMENT $1760 text will be displayed
FORCE_SYMBOL $1760 tmp1
FORCE_SYMBOL $1763 print_score
COMMENT $1766 load score text size
FORCE_SYMBOL $1766 LITTLE_TEXT_SIZE
COMMENT $1769 poke it to ram location
FORCE_SYMBOL $1769 Vec_Text_HW
COMMENT $176C string to be printed
FORCE_SYMBOL $176C roll_over_string
COMMENT $1772 Print the string
FORCE_SYMBOL $1772 Print_Str_d
COMMENT $1775 decreas timer,
FORCE_SYMBOL $1775 tmp1
COMMENT $1778 if zero, than we are done
COMMENT $177A test the music flag
FORCE_SYMBOL $177A Vec_Music_Flag
COMMENT $177D if music done, get out of loop
COMMENT_LINE $177F the next instructions initialize a new sound
COMMENT_LINE $177F load #1
COMMENT_LINE $177F set this as marker for music start
COMMENT $177F doesn'T destroy a register
FORCE_SYMBOL $177F Vec_Music_Flag
COMMENT $1782 to do it that way
FORCE_SYMBOL $1782 Vec_Music_Flag
COMMENT $1785 load a music structure (piece_of_music)
FORCE_SYMBOL $1785 ta_ta_ta1
COMMENT $1788 and store it to my own music active pointer
FORCE_SYMBOL $1788 music_active
COMMENT_LINE $178B next a do_my_sound and than do sound must be called
COMMENT $178B get button status
FORCE_SYMBOL $178B Read_Btns
COMMENT $178E is a button pressed?
FORCE_NO_SYMBOL $178E
COMMENT $1790 start another round
COMMENT_LINE $1793 ***************************************************************************
COMMENT $1793 be quiet
COMMENT $1793 no music is playing ->0
FORCE_SYMBOL $1793 Vec_Music_Flag
COMMENT $1796 shadow regs
FORCE_SYMBOL $1796 Init_Music_Buf
COMMENT_LINE $1799 in the next do sound call
COMMENT_LINE $1799 all regs are cleared automatically
COMMENT $1799 get button status
FORCE_SYMBOL $1799 Read_Btns
COMMENT $179C load a timer, how long the following
FORCE_NO_SYMBOL $179C
COMMENT $179E text will be displayed
FORCE_SYMBOL $179E tmp1
COMMENT_LINE $17A1 the next instructions initialize a new sound
COMMENT_LINE $17A1 load #1
COMMENT_LINE $17A1 set this as marker for music start
COMMENT $17A1 doesn'T destroy a register
FORCE_SYMBOL $17A1 Vec_Music_Flag
COMMENT $17A4 to do it that way
FORCE_SYMBOL $17A4 Vec_Music_Flag
COMMENT $17A7 load a music structure (piece_of_music)
FORCE_SYMBOL $17A7 ta_ta_ta2
COMMENT $17AA and store it to my own music active pointer
FORCE_SYMBOL $17AA music_active
COMMENT_LINE $17AD next a do_my_sound and than do sound must be called
FORCE_SYMBOL $17AD print_score
COMMENT $17B0 load score text size
FORCE_SYMBOL $17B0 LITTLE_TEXT_SIZE
COMMENT $17B3 poke it to ram location
FORCE_SYMBOL $17B3 Vec_Text_HW
COMMENT $17B6 string to be printed
FORCE_SYMBOL $17B6 new_life_string
COMMENT $17BC Print the string
FORCE_SYMBOL $17BC Print_Str_d
COMMENT $17BF decreas timer,
FORCE_SYMBOL $17BF tmp1
COMMENT $17C2 if zero, than we are done
COMMENT $17C4 get button status
FORCE_SYMBOL $17C4 Read_Btns
COMMENT $17C7 is a button pressed?
FORCE_NO_SYMBOL $17C7
COMMENT $17C9 start another round
COMMENT_LINE $17CC ***************************************************************************
COMMENT_LINE $17CC yepeay... a new high score
COMMENT $17CC be quiet
COMMENT $17CC no music is playing ->0
FORCE_SYMBOL $17CC Vec_Music_Flag
COMMENT $17CF shadow regs
FORCE_SYMBOL $17CF Init_Music_Buf
COMMENT_LINE $17D2 in the next do sound call
COMMENT_LINE $17D2 all regs are cleared automatically
COMMENT $17D2 get button status
FORCE_SYMBOL $17D2 Read_Btns
COMMENT $17D5 load a timer, how long the following
FORCE_NO_SYMBOL $17D5
COMMENT $17D7 text will be displayed
FORCE_SYMBOL $17D7 tmp1
COMMENT_LINE $17DA the next instructions initialize a new sound
COMMENT_LINE $17DA load #1
COMMENT_LINE $17DA set this as marker for music start
COMMENT $17DA doesn'T destroy a register
FORCE_SYMBOL $17DA Vec_Music_Flag
COMMENT $17DD to do it that way
FORCE_SYMBOL $17DD Vec_Music_Flag
COMMENT $17E0 load a music structure (piece_of_music)
FORCE_SYMBOL $17E0 ta_ta_ta1
COMMENT $17E3 and store it to my own music active pointer
FORCE_SYMBOL $17E3 music_active
COMMENT_LINE $17E6 next a do_my_sound and than do sound must be called
FORCE_SYMBOL $17E6 print_score
COMMENT $17E9 load score text size
FORCE_SYMBOL $17E9 LITTLE_TEXT_SIZE
COMMENT $17EC poke it to ram location
FORCE_SYMBOL $17EC Vec_Text_HW
COMMENT $17EF string to be printed
FORCE_SYMBOL $17EF highscore_string
COMMENT $17F5 Print the string
FORCE_SYMBOL $17F5 Print_Str_d
COMMENT $17F8 decreas timer,
FORCE_SYMBOL $17F8 tmp1
COMMENT $17FB if zero, than we are done
COMMENT $17FD get button status
FORCE_SYMBOL $17FD Read_Btns
COMMENT $1800 is a button pressed?
FORCE_NO_SYMBOL $1800
COMMENT $1802 start another round
COMMENT_LINE $1805 ***************************************************************************
COMMENT_LINE $1805 ***************************************************************************
COMMENT_LINE $1805 subroutines for morphing
COMMENT_LINE $1805 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1805 in March-April 1998
COMMENT_LINE $1805 all stuff contained here is public domain
COMMENT_LINE $1805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1805 morphing subroutines                                                      ;
COMMENT_LINE $1805 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1805 ***************************************************************************
COMMENT_LINE $1805 below are all subroutines for morphing
COMMENT_LINE $1805 (only two) set_up_morphing(), do_one_morph_step()
COMMENT_LINE $1805 ***************************************************************************
COMMENT_LINE $1805 this sets up a morph
COMMENT_LINE $1805 in U a pointer to a morph structure is expected,
COMMENT_LINE $1805 structure:
COMMENT_LINE $1805 DW               ; morph from vector list
COMMENT_LINE $1805 DW               ; morph to vector list
COMMENT_LINE $1805 DB               ; morph steps
COMMENT_LINE $1805 DB               ; delay between one morph step
COMMENT_LINE $1805 DW               ; optional (0 or structure)
COMMENT_LINE $1805 ; pointer to next morph structure
COMMENT_LINE $1805 DB               ; startup delay
COMMENT_LINE $1805 vector list must have (as usual with my routines) the following style
COMMENT_LINE $1805 count, rel y, rel x, rel y, rel x, ...
COMMENT_LINE $1805 maximal vectors for morphing is now 63 (127/2)
COMMENT_LINE $1805 if more are needed than something below cries for a 16 bit change...
COMMENT_LINE $1805 vector list don't need to have the same length anymore
COMMENT_LINE $1805 for optimal performance use a power of two step counter (-1)
COMMENT_LINE $1805 (8, 16, 32, 64 are supported with fast DIV routines)
COMMENT_LINE $1805 this routine sets up three vector lists (sort of) in RAM
COMMENT_LINE $1805 current_morph_vectorlist_org
COMMENT_LINE $1805 current_morph_vectorlist
COMMENT_LINE $1805 current_morph_vector_diffs
COMMENT_LINE $1805 current_morph_vectorlist_org
COMMENT_LINE $1805 is the original startlist, but possibly lengthened to the
COMMENT_LINE $1805 max vectorlist length of the two passed vectors (filled with 0,0 coordinates)
COMMENT_LINE $1805 current_morph_vectorlist
COMMENT_LINE $1805 is the storage area for the next to be drawn vectorlist
COMMENT_LINE $1805 is = to the original vector list (not max length)
COMMENT_LINE $1805 current_morph_vector_diffs
COMMENT_LINE $1805 not a real vector list, this contains the difference between the
COMMENT_LINE $1805 points of the two passed vector lists
COMMENT_LINE $1805 used in 'do_one_morph_step' to calculate the next vector
COMMENT_LINE $1805 further some variables are set, like delay, div routine, and morph_structure...
FORCE_SYMBOL $1805 DP_to_C8
COMMENT $1808 remember current morph structure
FORCE_SYMBOL $1808 morph_structure
COMMENT_LINE $180A first clear all current stuff, since we
COMMENT_LINE $180A don't know how long all vectors will be
COMMENT_LINE $180A could be optimized to a later fill
COMMENT_LINE $180A with only the fills we need,
COMMENT_LINE $180A but at this point vectrex should be fast enough
COMMENT_LINE $180A so it doesn't matter to waste a bit time here...
COMMENT_LINE $180A since current_morph_vectorlist_org, current_morph_vectorlist and current_morph_vector_diffs
COMMENT_LINE $180A are neighbours one Clear_x_d should be enough...
COMMENT $180A address to clear
FORCE_SYMBOL $180A current_morph_vectorlist_org
COMMENT $180D number of bytes - 1 to clear
COMMENT $1810 clear sub routine in ROM
FORCE_SYMBOL $1810 Clear_x_d
COMMENT $1813 X = pointer to 'from'
FORCE_NO_SYMBOL $1813
COMMENT $1815 Y = pointer to 'to'
FORCE_NO_SYMBOL $1815
COMMENT $1818 load number of vectors
FORCE_NO_SYMBOL $1818
COMMENT $181A compare number of vectors
FORCE_NO_SYMBOL $181A
COMMENT $181C which vector list is longer ?
COMMENT $181E load number of vectors 'to', the second...
FORCE_NO_SYMBOL $181E
COMMENT_LINE $1820 in A is the higher vector count
COMMENT $1820 set high value in vector lists
FORCE_SYMBOL $1820 current_morph_vectorlist_org
COMMENT $1823 add 1
COMMENT $1824 multiply by two, since every vector has two coordinates
COMMENT $1825 remember in tmp2
FORCE_SYMBOL $1825 tmp2
COMMENT_LINE $1827 copy 'from' to original
COMMENT $1827 destination pointer
COMMENT $182A source pointer
FORCE_NO_SYMBOL $182A
COMMENT $182C load length and step over length byte
COMMENT $182E increase 1, since one is missing
COMMENT $182F times two, since there are two coordinates
COMMENT $1830 and copy it
FORCE_SYMBOL $1830 Move_Mem_a
COMMENT $1833 load current morph structure
FORCE_SYMBOL $1833 morph_structure
COMMENT_LINE $1835 copy 'from' to current
COMMENT $1835 destination pointer
FORCE_SYMBOL $1835 current_morph_vectorlist
COMMENT $1838 source pointer
FORCE_NO_SYMBOL $1838
COMMENT $183A load length
FORCE_NO_SYMBOL $183A
COMMENT $183C increase 1, since one is missing
COMMENT $183D times two, since there are two coordinates
COMMENT $183E add 1 since counter is also copied
COMMENT $183F and copy it
FORCE_SYMBOL $183F Move_Mem_a
COMMENT $1842 load current morph structure
FORCE_SYMBOL $1842 morph_structure
COMMENT_LINE $1844 copy 'to' to 'buffer' (buffer is now 'current_morph_vector_diffs')
COMMENT_LINE $1844 destination pointer
COMMENT $1844 no +1 here, since in diffs only the offsets are relevant anyway
FORCE_SYMBOL $1844 current_morph_vector_diffs
COMMENT $1847 source pointer
FORCE_NO_SYMBOL $1847
COMMENT $1849 load length and step over length byte
COMMENT $184B increase 1, since one is missing
COMMENT $184C times two, since there are two coordinates
COMMENT $184D and copy it
FORCE_SYMBOL $184D Move_Mem_a
COMMENT $1850 load current morph structure
FORCE_SYMBOL $1850 morph_structure
COMMENT $1852 load morph steps to A
FORCE_NO_SYMBOL $1852
COMMENT $1854 plus one
COMMENT $1855 and save it this is variable
FORCE_SYMBOL $1855 morph_counter
COMMENT $1857 and again not variable
FORCE_SYMBOL $1857 morph_steps
COMMENT $1859 load morph delay A
FORCE_NO_SYMBOL $1859
COMMENT $185B and save it
FORCE_SYMBOL $185B morph_delay
COMMENT $185D and mark the whole thing as active
FORCE_SYMBOL $185D MORPHING_WORKING
COMMENT $185F and store it
FORCE_SYMBOL $185F morph_status
COMMENT_LINE $1861 now we must calculate the current_morph_vector_diffs
COMMENT_LINE $1861 we must determine the difference between the two sets of coordinates
COMMENT_LINE $1861 use tmp2 as loop counter
COMMENT_LINE $1861 number of vectors to process * 2
COMMENT $1864 Y = pointer to 'to' (buffer)
FORCE_SYMBOL $1864 current_morph_vector_diffs
COMMENT_LINE $1868 and Y = pointer to vector diffs
COMMENT $1868 load the second's vector coordinate
FORCE_NO_SYMBOL $1868
COMMENT $186A neg it, since we actually want a 'a=a-b' style
COMMENT_LINE $186B what we do is
COMMENT_LINE $186B invert b and do a b=-b+a
COMMENT $186B and add the source coordinate
COMMENT $186D store is (back) to vector diffs
COMMENT $186F decrease vector counter by 1
FORCE_SYMBOL $186F tmp2
COMMENT $1871 and continue with next vector if not done
FORCE_SYMBOL $1873 DP_to_D0
COMMENT $1876 all done now, return
COMMENT_LINE $1877 ***************************************************************************
COMMENT_LINE $1877 uses tmp1 and tmp2
COMMENT_LINE $1877 destroys everything
COMMENT_LINE $1877 what it does:
COMMENT_LINE $1877 current_morph_vectorlist is = to a (possibly) newly calculated vector
COMMENT_LINE $1877 but hardcoded
COMMENT_LINE $1877 16 steps,
COMMENT_LINE $1877 not using JSR for DIV
COMMENT_LINE $1877 saves 1000 cycles on intro screen!!!
COMMENT $1877 load the status
FORCE_SYMBOL $1877 morph_status
COMMENT $187A and look what there is to do
FORCE_SYMBOL $187A MORPHING_WORKING
COMMENT $187C morphing now?
COMMENT $187E or complete?
FORCE_SYMBOL $187E MORPHING_COMPLETE
COMMENT $1880 should a new morph be initialized?
COMMENT_LINE $1882 here we come with MORPHING_DONE
COMMENT $1882 load the current morph structure
FORCE_SYMBOL $1882 morph_structure
COMMENT $1885 look if there is a next structure
FORCE_NO_SYMBOL $1885
COMMENT $1887 no? than go out
COMMENT $1889 yes? than initialize it
FORCE_SYMBOL $1889 set_up_morphing
COMMENT $188C go back
COMMENT $188D load completeness flag to A
FORCE_SYMBOL $188D MORPHING_COMPLETE
COMMENT $188F and store it
FORCE_SYMBOL $188F morph_status
COMMENT $1892 go back
COMMENT $1893 decrease delay value
FORCE_SYMBOL $1893 morph_delay
COMMENT $1896 only morph when zero
COMMENT $1898 otherise go back
COMMENT $1899 in the current morph structure
FORCE_SYMBOL $1899 morph_structure
COMMENT $189C look for the next delay value
FORCE_NO_SYMBOL $189C
COMMENT $189E and set it
FORCE_SYMBOL $189E morph_delay
COMMENT $18A1 load counter of morph steps
FORCE_SYMBOL $18A1 morph_counter
COMMENT $18A4 are we done ?
COMMENT $18A6 no, than calculate offset to number of steps
FORCE_SYMBOL $18A6 morph_steps
COMMENT $18A9 is it the beginning?
COMMENT_LINE $18AB no, than we go on
COMMENT $18AB pointer to original vectorlist
FORCE_SYMBOL $18AB current_morph_vectorlist_org
COMMENT_LINE $18AE (RAM), but the (maybe) longer version
COMMENT $18AE load length of vectorlist and increment X
COMMENT $18B0 only needed the first time we are in here...
FORCE_SYMBOL $18B0 current_morph_vectorlist
COMMENT_LINE $18B3 A current number of vectors in (RAM) vectorlist
COMMENT $18B3 since it misses allways one, add one
COMMENT $18B4 multiply by two, since every vector has
COMMENT_LINE $18B5 start and end point
COMMENT $18B5 use tmp2 as loop counter see below
FORCE_SYMBOL $18B5 tmp2
COMMENT $18B8 U = pointer to vector diffs (RAM)
FORCE_SYMBOL $18B8 current_morph_vector_diffs
COMMENT $18BB target memory pointer (RAM)
COMMENT_LINE $18BF plus one, since we don't need the vector counter
COMMENT $18BF load number of steps to B
FORCE_SYMBOL $18BF morph_steps
COMMENT $18C2 invert the morph counter
FORCE_SYMBOL $18C2 morph_counter
COMMENT $18C5 store..., so we don't have to calculate in the loop
FORCE_SYMBOL $18C5 morph_tmp
COMMENT $18C8 clear signess... (that's positiv)
FORCE_SYMBOL $18C8 morph_sign
COMMENT $18CB load the difference between the 'to' coordinates to A
COMMENT $18CD check if negative sign
COMMENT $18CF mark as negative
FORCE_SYMBOL $18CF morph_sign
COMMENT $18D2 and make positiv
COMMENT $18D3 initiated above..., this is the
FORCE_SYMBOL $18D3 morph_tmp
COMMENT_LINE $18D6 'morph step' of number of morph_steps we are makeing
COMMENT $18D6 multiply, B should be smaller
COMMENT_LINE $18D7 than A (B is cycle relevant)
FORCE_SYMBOL $18DF divide_tmp
FORCE_SYMBOL $18E2 divide_tmp
COMMENT $18E5 is it signed?
FORCE_SYMBOL $18E5 morph_sign
COMMENT $18E8 no, than go on
COMMENT $18EA otherwise restore the 'minus'
COMMENT $18EB and reset sign memory
FORCE_SYMBOL $18EB morph_sign
COMMENT $18EE negate the div value
COMMENT_LINE $18EF this is again a formal a=a-b
COMMENT_LINE $18EF what we do is
COMMENT_LINE $18EF invert b and do a b=-b+a
COMMENT $18EF add the resulting difference to original coordinate
COMMENT $18F1 and store it to the current vectorlist
COMMENT $18F3 decrement the vectorlist loop counter by one
FORCE_SYMBOL $18F3 tmp2
COMMENT $18F6 and if not done,.. repeat
COMMENT_LINE $18F8 on first entry vectorlist is allready set
COMMENT $18F8 decrement morph step counter
FORCE_SYMBOL $18F8 morph_counter
COMMENT $18FB and go back
COMMENT $18FC load current morph structure
FORCE_SYMBOL $18FC morph_structure
COMMENT_LINE $18FF copy 'to' to current_morph_vectorlist
COMMENT $18FF destination pointer
FORCE_SYMBOL $18FF current_morph_vectorlist
COMMENT $1902 source pointer
FORCE_NO_SYMBOL $1902
COMMENT $1904 load length
FORCE_NO_SYMBOL $1904
COMMENT $1906 increase 1, since one is missing
COMMENT $1907 times two, since there are two coordinates
COMMENT $1908 increase 1, since now we also copy the counter
COMMENT $1909 and copy it
FORCE_SYMBOL $1909 Move_Mem_a
COMMENT $190C no we are done with morphing...
FORCE_SYMBOL $190C MORPHING_DONE
COMMENT $190E and store it
FORCE_SYMBOL $190E morph_status
COMMENT $1911 go back...
COMMENT_LINE $1912 ***************************************************************************
COMMENT_LINE $1912 end of morph routine section
COMMENT_LINE $1912 ***************************************************************************
COMMENT_LINE $1912 ***************************************************************************
COMMENT_LINE $1912 subroutines for scrolling
COMMENT_LINE $1912 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1912 in March-April 1998
COMMENT_LINE $1912 all stuff contained here is public domain
COMMENT_LINE $1912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1912 scroll subroutines used in the startup screen                             ;
COMMENT_LINE $1912 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1912 ***************************************************************************
COMMENT_LINE $1912 below are all subroutines for scroll text
COMMENT_LINE $1912 scrolling from right to left!
COMMENT_LINE $1912 (only two) set_up_scrolling(), do_one_scroll_step()
COMMENT_LINE $1912 scroll text ends with $80
COMMENT_LINE $1912 this restarts scrolling...
COMMENT_LINE $1912 ***************************************************************************
COMMENT_LINE $1912 expects text address in X register
COMMENT_LINE $1912 scroll_y:                  the y coordinate (signed byte value)
COMMENT_LINE $1912 scroll_left_boundary       (signed byte value)
COMMENT_LINE $1912 scroll_right_boundary      (signed byte value)
COMMENT_LINE $1912 scroll_speed               (signed byte value) must be negative
COMMENT_LINE $1912 scroll_intensity           (byte value)
COMMENT_LINE $1912 NUMBER_OF_SCROLL_LETTERS
COMMENT_LINE $1912 uses tmp1, tmp2
COMMENT $1912 remember address of first letter
FORCE_SYMBOL $1912 scroll_text_address_start
COMMENT $1914 and store it as current address
FORCE_SYMBOL $1914 scroll_text_address_current
COMMENT $1916 how many letters are at most to be displayed at once?
FORCE_SYMBOL $1916 NUMBER_OF_SCROLL_LETTERS
COMMENT $1919 remember that value in tmp1 (16 bit)
FORCE_SYMBOL $1919 tmp1
COMMENT_LINE $191B CLR     tmp1               ; make it 16 bit
COMMENT $191B load right boundary
FORCE_SYMBOL $191B scroll_right_boundary
COMMENT $191D subtract left boundary
FORCE_SYMBOL $191D scroll_left_boundary
COMMENT $191F SEX it, this is the 16 bit width 'in pixel'
COMMENT $1920 divide it by the number od letters to be displayed
FORCE_SYMBOL $1920 divide_tmp
FORCE_SYMBOL $1926 divide_tmp
FORCE_NO_SYMBOL $1928
FORCE_SYMBOL $192E divide_tmp
FORCE_SYMBOL $1930 tmp1
FORCE_SYMBOL $1934 divide_tmp
FORCE_SYMBOL $1939 divide_tmp
FORCE_SYMBOL $193B tmp1
FORCE_SYMBOL $193F divide_tmp
COMMENT $1941 remember that as the scroll step...
FORCE_SYMBOL $1941 scroll_step_width
COMMENT $1943 set loop counter for initializing the scroll objects
FORCE_SYMBOL $1943 NUMBER_OF_SCROLL_LETTERS
COMMENT $1945 remember that too in tmp1 (only 8 bit this time)
FORCE_SYMBOL $1945 tmp1
COMMENT $1947 get address of the first 'scroll object' (RAM address)
FORCE_SYMBOL $1947 scroll_objects
COMMENT $194A get the y position of the scroll text
FORCE_SYMBOL $194A scroll_y
COMMENT $194C and screen address where first letter will appear
FORCE_SYMBOL $194C scroll_right_boundary
COMMENT_LINE $194E now we loop 'NUMBER_OF_SCROLL_LETTERS' times to set up our object space
COMMENT $194E y coordinate, from above
COMMENT $1950 x coordinate, from above
COMMENT $1952 no object yet
COMMENT $1954 no object yet, these two are an address pointer,
COMMENT_LINE $1956 zero means a SPACE is printed...
COMMENT $1956 no x offset yet, here we will remember
COMMENT_LINE $1958 the x offset later on, must remember this,
COMMENT_LINE $1958 otherwise letters will overlap eventually...
COMMENT $1958 go one letter to the left (x coordinate that is)
FORCE_SYMBOL $1958 scroll_step_width
COMMENT $195A decrements our loop counter
FORCE_SYMBOL $195A tmp1
COMMENT $195C if not finnished ... loop again
COMMENT $195E otherwise store a 'ff' as an and marker
FORCE_NO_SYMBOL $195E
COMMENT $1960 y coordinate ff loop over
COMMENT $1962 bye bye...
COMMENT_LINE $1963 ***************************************************************************
COMMENT_LINE $1963 does one scroll step of text initialized with the above function
COMMENT_LINE $1963 does also all printing...
COMMENT_LINE $1963 expects dp = to d0
COMMENT_LINE $1963 sets intensity and trashs beam position (as well as everything else...)
COMMENT_LINE $1963 destroys tmp1
COMMENT $1963 load intensity
FORCE_SYMBOL $1963 scroll_intensity
FORCE_SYMBOL $1966 Intensity_a
COMMENT $1969 get address of our scroll objects
FORCE_SYMBOL $1969 scroll_objects
COMMENT_LINE $196C now loop thru all objects, till we find a $ff
COMMENT_LINE $196C than we are done...
COMMENT $196C first set our scaling (whatever we designed our
FORCE_SYMBOL $196C SCALE_FACTOR_GAME
COMMENT $196E move to time 1 lo, this means scaling
FORCE_SYMBOL $196E VIA_t1_cnt_lo
COMMENT_LINE $1970 object offsets for)
COMMENT $1970 than go to zero (pitty :-()
FORCE_NO_SYMBOL $1970
COMMENT $1972 /BLANK low and /ZERO low
FORCE_SYMBOL $1972 VIA_cntl
COMMENT_LINE $1974 but I guess we have to, otherwise
COMMENT_LINE $1974 the position will garble up I think
COMMENT $1974 load y, x coordinate
COMMENT_LINE $1976 A,B=D, increment U by 1, U pointing to X
COMMENT_LINE $1976 coordinate now
COMMENT $1976 are we done yet?
FORCE_NO_SYMBOL $1976
COMMENT $1978 if so, jump out of the loop
COMMENT $197C add to B (x coordinate that is)
FORCE_SYMBOL $197C scroll_speed
COMMENT_LINE $197F the speed value
COMMENT $197F is on left side out of bounds?
FORCE_SYMBOL $197F scroll_left_boundary
COMMENT $1982 if not go on...
COMMENT_LINE $1984 otherwise ...
COMMENT_LINE $1984 init new letter here
COMMENT $1984 get address of current letter
FORCE_SYMBOL $1984 scroll_text_address_current
COMMENT $1988 load the current letter to B
FORCE_NO_SYMBOL $1988
COMMENT $198A compare to $80, end marker
FORCE_NO_SYMBOL $198A
COMMENT $198C if not set, go on
COMMENT $198E otherwise load start address of text
FORCE_SYMBOL $198E scroll_text_address_start
COMMENT $1992 store it as current
FORCE_SYMBOL $1992 scroll_text_address_current
COMMENT $1996 and load the first letter of the text to B
FORCE_NO_SYMBOL $1996
COMMENT_LINE $1998 here we certainly have a correct 'letter'- value in B register
COMMENT $1998 really correct? isn't it a SPACE
COMMENT $199A no? than go on...
COMMENT $199C otherwise zero everything, pointer to vector list
FORCE_NO_SYMBOL $199C
COMMENT $199F and offsets
FORCE_NO_SYMBOL $199F
COMMENT $19A2 go on
COMMENT $19A4 is it even a 'fullstop'
COMMENT $19A6 if not... go on
COMMENT $19A8 if it is load vectorlist addres to X
FORCE_SYMBOL $19A8 _fs
COMMENT_LINE $19AB LDD     -2,X               ; and load the offsets to D
COMMENT_LINE $19AB BRA     load_x_with_letter_address_done ; and go on
COMMENT $19AB and go on
COMMENT $19AD is it even a 'turtle' :-)
COMMENT $19AF if not... go on
COMMENT $19B1 if it is load vectorlist addres to X
FORCE_SYMBOL $19B1 _t_
COMMENT_LINE $19B4 LDD     -2,X               ; and load the offsets to D
COMMENT_LINE $19B4 BRA     load_x_with_letter_address_done ; and go on
COMMENT $19B4 and go on
COMMENT_LINE $19B6 no it should be a 'real' letter (CAPITAL!!!)
COMMENT_LINE $19B6 lets calculate the abc-table offset...
COMMENT $19B6 subtract smallest letter, so A has 0 offset
COMMENT $19B8 multiply by two, since addresses are 16 bit
COMMENT $19B9 SEX it :-)
COMMENT $19BA and add the abc (table of vector list address of the alphabet's letters)
FORCE_SYMBOL $19BA _abc
COMMENT $19BD get that into an index register (X)
COMMENT $19BF load the letters address from the table
FORCE_NO_SYMBOL $19BF
COMMENT $19C1 and load the vector list offsets to D
COMMENT_LINE $19C3 now we correct everything ...
COMMENT $19C3 save vectorlist address to objectlist
FORCE_NO_SYMBOL $19C3
COMMENT $19C5 remember the offsets
FORCE_SYMBOL $19C5 tmp1
COMMENT_LINE $19C8 now a small intermezzo...
COMMENT_LINE $19C8 just increment the letter pointer in our
COMMENT_LINE $19C8 text by one... so that the next letter will be correctly
COMMENT_LINE $19C8 handled
COMMENT $19C8 load current text address to D
FORCE_SYMBOL $19C8 scroll_text_address_current
COMMENT $19CB increment one
FORCE_NO_SYMBOL $19CB
COMMENT $19CE and store it back
FORCE_SYMBOL $19CE scroll_text_address_current
COMMENT_LINE $19D1 ok, now back to that offset stuff from above
COMMENT_LINE $19D1 swap old and new offsets...
COMMENT $19D1 load x offset of old letter to A (from object list)
FORCE_NO_SYMBOL $19D1
COMMENT $19D3 load x offset of new letter to B (from remembering from above)
COMMENT $19D6 store the old offset to tmp1 + 1
COMMENT $19D9 and put the new offset into our object list
FORCE_NO_SYMBOL $19D9
COMMENT $19DB now add the right boundary address to B
FORCE_SYMBOL $19DB scroll_right_boundary
COMMENT $19DE and subtract the old offset from that, that
COMMENT_LINE $19E1 is our new start address (screen oriented)
COMMENT_LINE $19E1 (might even be further right than our
COMMENT_LINE $19E1 dedicated start address, but that can't be helped)
COMMENT $19E1 load y address
FORCE_SYMBOL $19E1 scroll_y
COMMENT $19E4 modify that with new y offset ONLY
FORCE_SYMBOL $19E4 tmp1
COMMENT $19E7 and store that to our object list
COMMENT $19E9 store the new x position, and increment U
COMMENT $19EB move to the required position
COMMENT_LINE $19EB optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $19EB NOT DONE:
COMMENT_LINE $19EB what should be done:
COMMENT_LINE $19EB s = $ff / max(abs(a),abs(b))
COMMENT_LINE $19EB a = a * s
COMMENT_LINE $19EB b = b * s
COMMENT_LINE $19EB scaling = scaling / s
COMMENT_LINE $19EB that would give the most efficient positioning
COMMENT_LINE $19EB bother it takes more time to calculate the above,
COMMENT_LINE $19EB than it saves
COMMENT_LINE $19EB with every positioning via this routine now,
COMMENT_LINE $19EB it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $19EB to do one simple positioning!!!
COMMENT_LINE $19EB that is probably about 300 cycles per positioning
COMMENT_LINE $19EB this is done about 30-40 times per round
COMMENT_LINE $19EB alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $19EB and we haven't drawn a single line yet!!!
COMMENT $19EB Store Y in D/A register
FORCE_SYMBOL $19EB VIA_port_a
COMMENT $19ED Blank low, zero high?
FORCE_NO_SYMBOL $19ED
FORCE_SYMBOL $19EF VIA_cntl
COMMENT $19F2 Enable mux
FORCE_SYMBOL $19F2 VIA_port_b
COMMENT $19F4 Clear shift regigster
FORCE_SYMBOL $19F4 VIA_shift_reg
COMMENT $19F6 Disable mux
FORCE_SYMBOL $19F6 VIA_port_b
COMMENT $19F8 Store X in D/A register
FORCE_SYMBOL $19F8 VIA_port_a
COMMENT $19FA enable timer
FORCE_SYMBOL $19FA VIA_t1_cnt_hi
FORCE_NO_SYMBOL $19FC
FORCE_SYMBOL $19FE VIA_int_flags
COMMENT $1A02 load object vector list to X,
COMMENT $1A04 don't draw if vector is not available (== 0 means SPACE)
COMMENT $1A06 pitty we have to do this!
COMMENT $1A06 scale for placing first point
FORCE_SYMBOL $1A06 SCROLL_SCALE_FACTOR
COMMENT $1A08 move to time 1 lo, this means scaling
FORCE_SYMBOL $1A08 VIA_t1_cnt_lo
COMMENT $1A0A (1MAKRO2) and draw the vector list
COMMENT_LINE $1A0C I think because it is a makro using makro...
FORCE_NO_SYMBOL $1A0C
FORCE_NO_SYMBOL $1A0F
COMMENT $1A11 Send Y to A/D
FORCE_SYMBOL $1A11 VIA_port_a
COMMENT $1A13 Enable mux
FORCE_SYMBOL $1A13 VIA_port_b
COMMENT_LINE $1A15 the followin two instructions might be optimized
COMMENT_LINE $1A15 but there is something about 18 cycles :-)
COMMENT $1A15 Point to next coordinate pair
FORCE_NO_SYMBOL $1A15
COMMENT $1A17 Wait a moment
COMMENT $1A18 Disable mux
FORCE_SYMBOL $1A18 VIA_port_b
COMMENT $1A1A Send X to A/D
FORCE_SYMBOL $1A1A VIA_port_a
COMMENT $1A1C Shift reg=$FF (solid line), T1H=0
FORCE_NO_SYMBOL $1A1C
COMMENT $1A1F Put pattern in shift register
FORCE_SYMBOL $1A1F VIA_shift_reg
COMMENT $1A21 Set T1H (scale factor?)
FORCE_SYMBOL $1A21 VIA_t1_cnt_hi
COMMENT $1A23 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $1A23
COMMENT $1A26 Wait for T1 to time out
FORCE_SYMBOL $1A26 VIA_int_flags
COMMENT $1A2A Wait a moment more
COMMENT $1A2B Clear shift register (blank output)
FORCE_SYMBOL $1A2B VIA_shift_reg
COMMENT $1A2D Decrement line count
FORCE_NO_SYMBOL $1A2D
COMMENT $1A31 Go back for more points
COMMENT $1A33 increment object list by one, since we are not
FORCE_NO_SYMBOL $1A33
COMMENT_LINE $1A35 really interested in the x offset at that point
COMMENT_LINE $1A35 anymore...
COMMENT $1A35 and go on with our next listobject...
COMMENT $1A38 ok, that was our scroll step :-)
COMMENT_LINE $1A39 ***************************************************************************
COMMENT_LINE $1A39 used variables and constants...
COMMENT_LINE $1A39 SCROLL_SCALE_FACTOR             EQU    $6
COMMENT_LINE $1A39 NUMBER_OF_SCROLL_LETTERS        EQU    10
COMMENT_LINE $1A39 scroll_text_address_start       EQU    scroll_variables_start
COMMENT_LINE $1A39 scroll_text_address_current     EQU    scroll_text_address_start + 2
COMMENT_LINE $1A39 scroll_speed                    EQU    scroll_text_address_current + 2
COMMENT_LINE $1A39 scroll_y                        EQU    scroll_speed + 1
COMMENT_LINE $1A39 scroll_left_boundary            EQU    scroll_y + 1
COMMENT_LINE $1A39 scroll_right_boundary           EQU    scroll_left_boundary + 1
COMMENT_LINE $1A39 scroll_step_width               EQU    scroll_right_boundary + 1
COMMENT_LINE $1A39 scroll_intensity                EQU    scroll_step_width + 1
COMMENT_LINE $1A39 scroll_objects                  EQU    scroll_intensity + 1
COMMENT_LINE $1A39 scroll_objects_end              EQU    (scroll_objects+(5*NUMBER_OF_SCROLL_LETTERS)+1)
COMMENT_LINE $1A39 scroll_variables_end            EQU    scroll_objects_end
COMMENT_LINE $1A39 ***************************************************************************
COMMENT_LINE $1A39 ***************************************************************************
COMMENT_LINE $1C84 ***************************************************************************
COMMENT_LINE $1C84 include vector sprite definitions
COMMENT_LINE $1C84 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1C84 in March-April 1998
COMMENT_LINE $1C84 all stuff contained here is public domain
COMMENT_LINE $1C84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1C84 this file contains 'sprite' definition data for all letters and a do, used;
COMMENT_LINE $1C84 in scroll text                                                            ;
COMMENT_LINE $1C84 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $1C84 y offset
COMMENT $1C85 x offset
COMMENT_LINE $1C86 sprite definition
COMMENT $1CB7 y offset
COMMENT $1CB8 x offset
COMMENT_LINE $1CB9 sprite definition
COMMENT $1CC2 y offset
COMMENT $1CC3 x offset
COMMENT_LINE $1CC4 sprite definition
COMMENT $1CD3 y offset
COMMENT $1CD4 x offset
COMMENT_LINE $1CD5 sprite definition
COMMENT $1CE8 y offset
COMMENT $1CE9 x offset
COMMENT_LINE $1CEA sprite definition
COMMENT $1CFB y offset
COMMENT $1CFC x offset
COMMENT_LINE $1CFD sprite definition
COMMENT $1D0E y offset
COMMENT $1D0F x offset
COMMENT_LINE $1D10 sprite definition
COMMENT $1D1D y offset
COMMENT $1D1E x offset
COMMENT_LINE $1D1F sprite definition
COMMENT $1D2A y offset
COMMENT $1D2B x offset
COMMENT_LINE $1D2C sprite definition
COMMENT $1D41 y offset
COMMENT $1D42 x offset
COMMENT_LINE $1D43 sprite definition
COMMENT $1D52 y offset
COMMENT $1D53 x offset
COMMENT_LINE $1D54 sprite definition
COMMENT $1D61 y offset
COMMENT $1D62 x offset
COMMENT_LINE $1D63 sprite definition
COMMENT_LINE $1D72 DB  6    ; y offset
COMMENT_LINE $1D72 DB  1    ; x offset
COMMENT_LINE $1D72 sprite definition
COMMENT_LINE $1D72 DB 5
COMMENT_LINE $1D72 DB -5*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1D72 DB  5*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $1D72 DB -5*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $1D72 DB -5*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $1D72 DB  5*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $1D72 DB -5*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT $1D72 y offset
COMMENT $1D73 x offset
COMMENT_LINE $1D74 sprite definition
COMMENT $1D7B y offset
COMMENT $1D7C x offset
COMMENT_LINE $1D7D sprite definition
COMMENT $1D8A y offset
COMMENT $1D8B x offset
COMMENT_LINE $1D8C sprite definition
COMMENT $1D99 y offset
COMMENT $1D9A x offset
COMMENT_LINE $1D9B sprite definition
COMMENT $1DB0 y offset
COMMENT $1DB1 x offset
COMMENT_LINE $1DB2 sprite definition
COMMENT_LINE $1DC1 DB -3    ; y offset
COMMENT_LINE $1DC1 DB  4    ; x offset
COMMENT_LINE $1DC1 sprite definition
COMMENT_LINE $1DC1 DB 10
COMMENT_LINE $1DC1 DB -3*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  1*SPRITE_BLOW_UP,  1*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  0*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB -4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB -4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB -1*SPRITE_BLOW_UP,  1*SPRITE_BLOW_UP
COMMENT_LINE $1DC1 DB  0*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT $1DC1 y offset
COMMENT $1DC2 x offset
COMMENT_LINE $1DC3 sprite definition
COMMENT $1DD6 y offset
COMMENT $1DD7 x offset
COMMENT_LINE $1DD8 sprite definition
COMMENT $1DEF y offset
COMMENT $1DF0 x offset
COMMENT_LINE $1DF1 sprite definition
COMMENT $1DFA y offset
COMMENT $1DFB x offset
COMMENT_LINE $1DFC sprite definition
COMMENT $1E0B y offset
COMMENT $1E0C x offset
COMMENT_LINE $1E0D sprite definition
COMMENT $1E16 y offset
COMMENT $1E17 x offset
COMMENT_LINE $1E18 sprite definition
COMMENT $1E25 y offset
COMMENT $1E26 x offset
COMMENT_LINE $1E27 sprite definition
COMMENT $1E34 y offset
COMMENT $1E35 x offset
COMMENT_LINE $1E36 sprite definition
COMMENT_LINE $1E3F DB  6    ; y offset
COMMENT_LINE $1E3F DB  1    ; x offset
COMMENT_LINE $1E3F sprite definition
COMMENT_LINE $1E3F DB 3
COMMENT_LINE $1E3F DB  0*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $1E3F DB -5*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $1E3F DB -5*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $1E3F DB  0*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $1E73 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1E73 in March-April 1998
COMMENT_LINE $1E73 all stuff contained here is public domain
COMMENT_LINE $1E73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1E73 this file contains all definitions for morphing objects used throughout   ;
COMMENT_LINE $1E73 vectrex frogger                                                           ;
COMMENT_LINE $1E73 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2110 morph from
COMMENT $2112 morph to
COMMENT $2114 morph steps
COMMENT $2115 delay between one morph step
COMMENT $2116 optional (0 or structure)
COMMENT_LINE $2118 pointer to next morph structure
COMMENT $2118 startup delay
COMMENT $2119 morph from
COMMENT $211B morph to
COMMENT $211D morph steps
COMMENT $211E delay between one morph step
COMMENT $211F optional (0 or structure)
COMMENT_LINE $2121 pointer to next morph structure
COMMENT $2121 startup delay
COMMENT $2122 morph from
COMMENT $2124 morph to
COMMENT $2126 morph steps
COMMENT $2127 delay between one morph step
COMMENT $2128 morph_init4          ; optional (0 or structure)
COMMENT_LINE $212A pointer to next morph structure
COMMENT $212A startup delay
COMMENT_LINE $212B only one morphing at a time supported for now!!!
COMMENT $212B morph from
COMMENT $212D morph to
COMMENT $212F morph steps
COMMENT $2130 delay between one morph step
COMMENT $2131 optional (0 or structure)
COMMENT_LINE $2133 pointer to next morph structure
COMMENT $2133 startup delay
COMMENT $2134 morph from
COMMENT $2136 morph to
COMMENT $2138 morph steps
COMMENT $2139 delay between one morph step
COMMENT $213A optional (0 or structure)
COMMENT_LINE $213C pointer to next morph structure
COMMENT $213C startup delay
COMMENT $213D morph from
COMMENT $213F morph to
COMMENT $2141 morph steps
COMMENT $2142 delay between one morph step
COMMENT $2143 optional (0 or structure)
COMMENT_LINE $2145 pointer to next morph structure
COMMENT $2145 startup delay
COMMENT $2146 morph from
COMMENT $2148 morph to
COMMENT $214A morph steps
COMMENT $214B delay between one morph step
COMMENT $214C optional (0 or structure)
COMMENT_LINE $214E pointer to next morph structure
COMMENT $214E startup delay
COMMENT $214F morph from
COMMENT $2151 morph to
COMMENT $2153 morph steps
COMMENT $2154 delay between one morph step
COMMENT $2155 optional (0 or structure)
COMMENT_LINE $2157 pointer to next morph structure
COMMENT $2157 startup delay
COMMENT $2158 morph from
COMMENT $215A morph to
COMMENT $215C morph steps
COMMENT $215D delay between one morph step
COMMENT $215E optional (0 or structure)
COMMENT_LINE $2160 pointer to next morph structure
COMMENT $2160 startup delay
COMMENT $2161 morph from
COMMENT $2163 morph to
COMMENT $2165 morph steps
COMMENT $2166 delay between one morph step
COMMENT $2167 optional (0 or structure)
COMMENT_LINE $2169 pointer to next morph structure
COMMENT $2169 startup delay
COMMENT $216A morph from
COMMENT $216C morph to
COMMENT $216E morph steps
COMMENT $216F delay between one morph step
COMMENT $2170 optional (0 or structure)
COMMENT_LINE $2172 pointer to next morph structure
COMMENT $2172 startup delay
COMMENT_LINE $2173 ***************************************************************************
COMMENT_LINE $2173 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2173 in March-April 1998
COMMENT_LINE $2173 all stuff contained here is public domain
COMMENT_LINE $2173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2173 this file contains the vector list for the home of frogger                ;
COMMENT_LINE $2173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2173 21 vectors are drawn
COMMENT $217E _   _   _   _   _
COMMENT $2180 __I I_I I_I I_I I_I I__
COMMENT_LINE $219E this file is part of vectrex frogger, written by Malban
COMMENT_LINE $219E in March-April 1998
COMMENT_LINE $219E all stuff contained here is public domain
COMMENT_LINE $219E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $219E this file contains 'sprite' definition data for all frogs (non morphing)  ;
COMMENT_LINE $219E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $219E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $219F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21A0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21A1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21A2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21A3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21A4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21A5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21A6 16 vectors are drawn
COMMENT $21AD -------
COMMENT $21AF /        \
COMMENT $21B1 \       /
COMMENT $21B3 /       \
COMMENT $21B5 */            \
COMMENT $21B7 \            /
COMMENT $21B9 \    /-\   /
COMMENT $21BB \  /  \  /
COMMENT $21BD /_/    \_\
COMMENT $2222 speed + direction
COMMENT $2223 graphic definition
COMMENT $2225 length in SCALE_FACTOR_GAME
COMMENT $2226 anim delay value
COMMENT $2227 pointer to next anim object
COMMENT $2229 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $222A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $222B brightness
COMMENT $222C special flag
COMMENT $223E speed + direction
COMMENT $223F graphic definition
COMMENT $2241 length in SCALE_FACTOR_GAME
COMMENT $2242 anim delay value
COMMENT $2243 pointer to next anim object
COMMENT $2245 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2246 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2247 brightness
COMMENT $2248 special flag
COMMENT $225A speed + direction
COMMENT $225B graphic definition
COMMENT $225D length in SCALE_FACTOR_GAME
COMMENT $225E anim delay value
COMMENT $225F pointer to next anim object
COMMENT $2261 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2262 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2263 brightness
COMMENT $2264 special flag
COMMENT $2265 speed + direction
COMMENT $2266 graphic definition
COMMENT $2268 length in SCALE_FACTOR_GAME
COMMENT $2269 anim delay value
COMMENT $226A pointer to next anim object
COMMENT $226C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $226D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $226E brightness
COMMENT $226F special flag
COMMENT $2270 speed + direction
COMMENT $2271 graphic definition
COMMENT $2273 length in SCALE_FACTOR_GAME
COMMENT $2274 anim delay value
COMMENT $2275 pointer to next anim object
COMMENT $2277 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2278 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2279 brightness
COMMENT $227A special flag
COMMENT $227B speed + direction
COMMENT $227C graphic definition
COMMENT $227E length in SCALE_FACTOR_GAME
COMMENT $227F anim delay value
COMMENT $2280 pointer to next anim object
COMMENT $2282 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2283 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2284 brightness
COMMENT $2285 special flag
COMMENT_LINE $22BF this file is part of vectrex frogger, written by Malban
COMMENT_LINE $22BF in March-April 1998
COMMENT_LINE $22BF all stuff contained here is public domain
COMMENT_LINE $22BF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $22BF this file contains 'sprite' definition data for letters (level done)      ;
COMMENT_LINE $22BF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $22C7 speed + direction
COMMENT $22C8 graphic definition
COMMENT $22CA length in SCALE_FACTOR_GAME
COMMENT $22CB anim delay value
COMMENT $22CC pointer to next anim object
COMMENT $22CE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $22CF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $22D0 DB $7f                  ; brightness
COMMENT_LINE $22D0 DB 0                    ; special flag
COMMENT $22E0 speed + direction
COMMENT $22E1 graphic definition
COMMENT $22E3 length in SCALE_FACTOR_GAME
COMMENT $22E4 anim delay value
COMMENT $22E5 pointer to next anim object
COMMENT $22E7 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $22E8 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $22E9 DB $7f                  ; brightness
COMMENT_LINE $22E9 DB 0                    ; special flag
COMMENT $22F3 speed + direction
COMMENT $22F4 graphic definition
COMMENT $22F6 length in SCALE_FACTOR_GAME
COMMENT $22F7 anim delay value
COMMENT $22F8 pointer to next anim object
COMMENT $22FA offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $22FB offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $22FC DB $7f                  ; brightness
COMMENT_LINE $22FC DB 0                    ; special flag
COMMENT $2312 speed + direction
COMMENT $2313 graphic definition
COMMENT $2315 length in SCALE_FACTOR_GAME
COMMENT $2316 anim delay value
COMMENT $2317 pointer to next anim object
COMMENT $2319 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $231A offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $231B DB $7f                  ; brightness
COMMENT_LINE $231B DB 0                    ; special flag
COMMENT $2335 speed + direction
COMMENT $2336 graphic definition
COMMENT $2338 length in SCALE_FACTOR_GAME
COMMENT $2339 anim delay value
COMMENT $233A pointer to next anim object
COMMENT $233C offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $233D offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $233E DB $7f                  ; brightness
COMMENT_LINE $233E DB 0                    ; special flag
COMMENT $234C speed + direction
COMMENT $234D graphic definition
COMMENT $234F length in SCALE_FACTOR_GAME
COMMENT $2350 anim delay value
COMMENT $2351 pointer to next anim object
COMMENT $2353 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2354 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $2355 DB $7f                  ; brightness
COMMENT_LINE $2355 DB 0                    ; special flag
COMMENT_LINE $2355 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2355 in March-April 1998
COMMENT_LINE $2355 all stuff contained here is public domain
COMMENT_LINE $2355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2355 this file contains contains includes for all graphic defenitions          ;
COMMENT_LINE $2355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2355 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2355 in March-April 1998
COMMENT_LINE $2355 all stuff contained here is public domain
COMMENT_LINE $2355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2355 this file contains 'sprite' definition data for the fly                   ;
COMMENT_LINE $2355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2355 fly1 is not moving
COMMENT $236A speed + direction
COMMENT $236B graphic definition
COMMENT $236D length in SCALE_FACTOR_GAME
COMMENT $236E anim delay value
COMMENT $236F pointer to next anim object
COMMENT $2371 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2372 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2373 brightness
COMMENT $2374 special flag
COMMENT $238A speed + direction
COMMENT $238B graphic definition
COMMENT $238D length in SCALE_FACTOR_GAME
COMMENT $238E anim delay value
COMMENT $238F pointer to next anim object
COMMENT $2391 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2392 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2393 brightness
COMMENT $2394 special flag
COMMENT $23AA speed + direction
COMMENT $23AB graphic definition
COMMENT $23AD length in SCALE_FACTOR_GAME
COMMENT $23AE anim delay value
COMMENT $23AF pointer to next anim object
COMMENT $23B1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $23B2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $23B3 brightness
COMMENT $23B4 special flag
COMMENT $23B5 speed + direction
COMMENT $23B6 graphic definition
COMMENT $23B8 length in SCALE_FACTOR_GAME
COMMENT $23B9 anim delay value
COMMENT $23BA pointer to next anim object
COMMENT $23BC offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $23BD offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $23BE brightness
COMMENT $23BF special flag
COMMENT_LINE $23C0 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $23C0 in March-April 1998
COMMENT_LINE $23C0 all stuff contained here is public domain
COMMENT_LINE $23C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $23C0 this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $23C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $23C0 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $23C0 car1 is moving left with a speed of -1
COMMENT_LINE $23C0 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $23C0 car3 is moving right with a speed of 1
COMMENT_LINE $23C0 sprite definition
COMMENT $23DC speed + direction
COMMENT $23DD graphic definition
COMMENT $23DF length in SCALE_FACTOR_GAME
COMMENT $23E0 anim delay value
COMMENT $23E1 pointer to next anim object
COMMENT $23E3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $23E4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $23E5 brightness
COMMENT $23E6 special flag
COMMENT_LINE $23E7 sprite definition
COMMENT $2403 speed + direction
COMMENT $2404 graphic definition
COMMENT $2406 length in SCALE_FACTOR_GAME
COMMENT $2407 anim delay value
COMMENT $2408 pointer to next anim object
COMMENT $240A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $240B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $240C brightness
COMMENT $240D special flag
COMMENT_LINE $240E sprite definition
COMMENT $2428 speed + direction
COMMENT $2429 graphic definition
COMMENT $242B length in SCALE_FACTOR_GAME
COMMENT $242C anim delay value
COMMENT $242D pointer to next anim object
COMMENT $242F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2430 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2431 brightness
COMMENT $2432 special flag
COMMENT $2433 speed + direction
COMMENT $2434 graphic definition
COMMENT $2436 length in SCALE_FACTOR_GAME
COMMENT $2437 anim delay value
COMMENT $2438 pointer to next anim object
COMMENT $243A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $243B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $243C brightness
COMMENT $243D special flag
COMMENT_LINE $243E sprite definition
COMMENT $2458 speed + direction
COMMENT $2459 graphic definition
COMMENT $245B length in SCALE_FACTOR_GAME
COMMENT $245C anim delay value
COMMENT $245D pointer to next anim object
COMMENT $245F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2460 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2461 brightness
COMMENT $2462 special flag
COMMENT_LINE $2463 sprite definition
COMMENT $247D speed + direction
COMMENT $247E graphic definition
COMMENT $2480 length in SCALE_FACTOR_GAME
COMMENT $2481 anim delay value
COMMENT $2482 pointer to next anim object
COMMENT $2484 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2485 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2486 brightness
COMMENT $2487 special flag
COMMENT_LINE $2488 sprite definition
COMMENT $24A2 speed + direction
COMMENT $24A3 graphic definition
COMMENT $24A5 length in SCALE_FACTOR_GAME
COMMENT $24A6 anim delay value
COMMENT $24A7 pointer to next anim object
COMMENT $24A9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $24AA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $24AB brightness
COMMENT $24AC special flag
COMMENT_LINE $24AD sprite definition
COMMENT $24C7 speed + direction
COMMENT $24C8 graphic definition
COMMENT $24CA length in SCALE_FACTOR_GAME
COMMENT $24CB anim delay value
COMMENT $24CC pointer to next anim object
COMMENT $24CE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $24CF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $24D0 brightness
COMMENT $24D1 special flag
COMMENT_LINE $24D2 sprite definition
COMMENT $24EA speed + direction
COMMENT $24EB graphic definition
COMMENT $24ED length in SCALE_FACTOR_GAME
COMMENT $24EE anim delay value
COMMENT $24EF pointer to next anim object
COMMENT $24F1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $24F2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $24F3 brightness
COMMENT $24F4 special flag
COMMENT_LINE $24F5 sprite definition
COMMENT $250D speed + direction
COMMENT $250E graphic definition
COMMENT $2510 length in SCALE_FACTOR_GAME
COMMENT $2511 anim delay value
COMMENT $2512 pointer to next anim object
COMMENT $2514 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2515 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2516 brightness
COMMENT $2517 special flag
COMMENT_LINE $2518 sprite definition
COMMENT $2530 speed + direction
COMMENT $2531 graphic definition
COMMENT $2533 length in SCALE_FACTOR_GAME
COMMENT $2534 anim delay value
COMMENT $2535 pointer to next anim object
COMMENT $2537 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2538 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2539 brightness
COMMENT $253A special flag
COMMENT $253B speed + direction
COMMENT $253C graphic definition
COMMENT $253E length in SCALE_FACTOR_GAME
COMMENT $253F anim delay value
COMMENT $2540 pointer to next anim object
COMMENT $2542 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2543 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2544 brightness
COMMENT $2545 special flag
COMMENT $2546 speed + direction
COMMENT $2547 graphic definition
COMMENT $2549 length in SCALE_FACTOR_GAME
COMMENT $254A anim delay value
COMMENT $254B pointer to next anim object
COMMENT $254D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $254E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $254F brightness
COMMENT $2550 special flag
COMMENT $2551 speed + direction
COMMENT $2552 graphic definition
COMMENT $2554 length in SCALE_FACTOR_GAME
COMMENT $2555 anim delay value
COMMENT $2556 pointer to next anim object
COMMENT $2558 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2559 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $255A brightness
COMMENT $255B special flag
COMMENT $255C speed + direction
COMMENT $255D graphic definition
COMMENT $255F length in SCALE_FACTOR_GAME
COMMENT $2560 anim delay value
COMMENT $2561 pointer to next anim object
COMMENT $2563 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2564 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2565 brightness
COMMENT $2566 special flag
COMMENT $2567 speed + direction
COMMENT $2568 graphic definition
COMMENT $256A length in SCALE_FACTOR_GAME
COMMENT $256B anim delay value
COMMENT $256C pointer to next anim object
COMMENT $256E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $256F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2570 brightness
COMMENT $2571 special flag
COMMENT_LINE $2572 sprite definition
COMMENT $258A speed + direction
COMMENT $258B graphic definition
COMMENT $258D length in SCALE_FACTOR_GAME
COMMENT $258E anim delay value
COMMENT $258F pointer to next anim object
COMMENT $2591 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2592 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2593 brightness
COMMENT $2594 special flag
COMMENT_LINE $2595 sprite definition
COMMENT $25AD speed + direction
COMMENT $25AE graphic definition
COMMENT $25B0 length in SCALE_FACTOR_GAME
COMMENT $25B1 anim delay value
COMMENT $25B2 pointer to next anim object
COMMENT $25B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25B6 brightness
COMMENT $25B7 special flag
COMMENT_LINE $25B8 sprite definition
COMMENT $25D0 speed + direction
COMMENT $25D1 graphic definition
COMMENT $25D3 length in SCALE_FACTOR_GAME
COMMENT $25D4 anim delay value
COMMENT $25D5 pointer to next anim object
COMMENT $25D7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25D8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25D9 brightness
COMMENT $25DA special flag
COMMENT $25DB speed + direction
COMMENT $25DC graphic definition
COMMENT $25DE length in SCALE_FACTOR_GAME
COMMENT $25DF anim delay value
COMMENT $25E0 pointer to next anim object
COMMENT $25E2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25E3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25E4 brightness
COMMENT $25E5 special flag
COMMENT $25E6 speed + direction
COMMENT $25E7 graphic definition
COMMENT $25E9 length in SCALE_FACTOR_GAME
COMMENT $25EA anim delay value
COMMENT $25EB pointer to next anim object
COMMENT $25ED offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25EE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25EF brightness
COMMENT $25F0 special flag
COMMENT $25F1 speed + direction
COMMENT $25F2 graphic definition
COMMENT $25F4 length in SCALE_FACTOR_GAME
COMMENT $25F5 anim delay value
COMMENT $25F6 pointer to next anim object
COMMENT $25F8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25F9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25FA brightness
COMMENT $25FB special flag
COMMENT $25FC speed + direction
COMMENT $25FD graphic definition
COMMENT $25FF length in SCALE_FACTOR_GAME
COMMENT $2600 anim delay value
COMMENT $2601 pointer to next anim object
COMMENT $2603 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2604 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2605 brightness
COMMENT $2606 special flag
COMMENT $2607 speed + direction
COMMENT $2608 graphic definition
COMMENT $260A length in SCALE_FACTOR_GAME
COMMENT $260B anim delay value
COMMENT $260C pointer to next anim object
COMMENT $260E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $260F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2610 brightness
COMMENT $2611 special flag
COMMENT_LINE $2612 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2612 in March-April 1998
COMMENT_LINE $2612 all stuff contained here is public domain
COMMENT_LINE $2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2612 this file contains the 'sprite' definition for a truck                    ;
COMMENT_LINE $2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2638 speed + direction
COMMENT $2639 graphic definition
COMMENT $263B length in SCALE_FACTOR_GAME
COMMENT $263C anim delay value
COMMENT $263D pointer to next anim object
COMMENT $263F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2640 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2641 brightness
COMMENT $2642 special flag
COMMENT $2669 speed + direction
COMMENT $266A graphic definition
COMMENT $266C length in SCALE_FACTOR_GAME
COMMENT $266D anim delay value
COMMENT $266E pointer to next anim object
COMMENT $2670 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2671 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2672 brightness
COMMENT $2673 special flag
COMMENT $269A speed + direction
COMMENT $269B graphic definition
COMMENT $269D length in SCALE_FACTOR_GAME
COMMENT $269E anim delay value
COMMENT $269F pointer to next anim object
COMMENT $26A1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26A2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26A3 brightness
COMMENT $26A4 special flag
COMMENT $26A5 speed + direction
COMMENT $26A6 graphic definition
COMMENT $26A8 length in SCALE_FACTOR_GAME
COMMENT $26A9 anim delay value
COMMENT $26AA pointer to next anim object
COMMENT $26AC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26AD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26AE brightness
COMMENT $26AF special flag
COMMENT $26B0 speed + direction
COMMENT $26B1 graphic definition
COMMENT $26B3 length in SCALE_FACTOR_GAME
COMMENT $26B4 anim delay value
COMMENT $26B5 pointer to next anim object
COMMENT $26B7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26B8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26B9 brightness
COMMENT $26BA special flag
COMMENT $26BB speed + direction
COMMENT $26BC graphic definition
COMMENT $26BE length in SCALE_FACTOR_GAME
COMMENT $26BF anim delay value
COMMENT $26C0 pointer to next anim object
COMMENT $26C2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26C3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26C4 brightness
COMMENT $26C5 special flag
COMMENT $26C6 speed + direction
COMMENT $26C7 graphic definition
COMMENT $26C9 length in SCALE_FACTOR_GAME
COMMENT $26CA anim delay value
COMMENT $26CB pointer to next anim object
COMMENT $26CD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26CE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26CF brightness
COMMENT $26D0 special flag
COMMENT $26D1 speed + direction
COMMENT $26D2 graphic definition
COMMENT $26D4 length in SCALE_FACTOR_GAME
COMMENT $26D5 anim delay value
COMMENT $26D6 pointer to next anim object
COMMENT $26D8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26D9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26DA brightness
COMMENT $26DB special flag
COMMENT_LINE $26DC this file is part of vectrex frogger, written by Malban
COMMENT_LINE $26DC in March-April 1998
COMMENT_LINE $26DC all stuff contained here is public domain
COMMENT_LINE $26DC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $26DC this file contains 'sprite' definition data for the bike                  ;
COMMENT_LINE $26DC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $26DC for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $26DC bike1 is moving to the left with a speed of -1
COMMENT_LINE $26DC sprite definition
COMMENT $270C speed + direction
COMMENT $270D graphic definition
COMMENT $270F length in SCALE_FACTOR_GAME
COMMENT $2710 anim delay value
COMMENT $2711 pointer to next anim object
COMMENT $2713 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2714 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2715 brightness
COMMENT $2716 special flag
COMMENT_LINE $2717 sprite definition
COMMENT $2747 speed + direction
COMMENT $2748 graphic definition
COMMENT $274A length in SCALE_FACTOR_GAME
COMMENT $274B anim delay value
COMMENT $274C pointer to next anim object
COMMENT $274E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $274F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2750 brightness
COMMENT $2751 special flag
COMMENT $2782 speed + direction
COMMENT $2783 graphic definition
COMMENT $2785 length in SCALE_FACTOR_GAME
COMMENT $2786 anim delay value
COMMENT $2787 pointer to next anim object
COMMENT $2789 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $278A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $278B brightness
COMMENT $278C special flag
COMMENT $27BD speed + direction
COMMENT $27BE graphic definition
COMMENT $27C0 length in SCALE_FACTOR_GAME
COMMENT $27C1 anim delay value
COMMENT $27C2 pointer to next anim object
COMMENT $27C4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $27C5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $27C6 brightness
COMMENT $27C7 special flag
COMMENT_LINE $27C8 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $27C8 in March-April 1998
COMMENT_LINE $27C8 all stuff contained here is public domain
COMMENT_LINE $27C8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $27C8 this file contains 'sprite' definition data for a motorcycle              ;
COMMENT_LINE $27C8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $27C8 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $27C8 moped1 is moving to the left with a speed of -1
COMMENT $27DE /
COMMENT $27E0 //
COMMENT $27E2 // \     -------
COMMENT $27E4 /  I \  /      /
COMMENT $27E6 /    \/      /
COMMENT $27E8 /    /\         \
COMMENT $27EA */    /    \        \
COMMENT $27EC \   /       \      /
COMMENT $27EE \ /          \___/
COMMENT $27F2 speed + direction
COMMENT $27F3 graphic definition
COMMENT $27F5 length in SCALE_FACTOR_GAME
COMMENT $27F6 anim delay value
COMMENT $27F7 pointer to next anim object
COMMENT $27F9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $27FA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $27FB brightness
COMMENT $27FC special flag
COMMENT $2813 /
COMMENT $2815 //
COMMENT $2817 // \     -------
COMMENT $2819 /  I \  /      /
COMMENT $281B /    \/      /
COMMENT $281D /    /\         \
COMMENT $281F */    /    \        \
COMMENT $2821 \   /       \      /
COMMENT $2823 \ /          \___/
COMMENT $2827 speed + direction
COMMENT $2828 graphic definition
COMMENT $282A length in SCALE_FACTOR_GAME
COMMENT $282B anim delay value
COMMENT $282C pointer to next anim object
COMMENT $282E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $282F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2830 brightness
COMMENT $2831 special flag
COMMENT $2848 /
COMMENT $284A //
COMMENT $284C // \     -------
COMMENT $284E /  I \  /      /
COMMENT $2850 /    \/      /
COMMENT $2852 /    /\         \
COMMENT $2854 */    /    \        \
COMMENT $2856 \   /       \      /
COMMENT $2858 \ /          \___/
COMMENT $285C speed + direction
COMMENT $285D graphic definition
COMMENT $285F length in SCALE_FACTOR_GAME
COMMENT $2860 anim delay value
COMMENT $2861 pointer to next anim object
COMMENT $2863 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2864 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2865 brightness
COMMENT $2866 special flag
COMMENT $2867 speed + direction
COMMENT $2868 graphic definition
COMMENT $286A length in SCALE_FACTOR_GAME
COMMENT $286B anim delay value
COMMENT $286C pointer to next anim object
COMMENT $286E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $286F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2870 brightness
COMMENT $2871 special flag
COMMENT $2872 speed + direction
COMMENT $2873 graphic definition
COMMENT $2875 length in SCALE_FACTOR_GAME
COMMENT $2876 anim delay value
COMMENT $2877 pointer to next anim object
COMMENT $2879 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $287A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $287B brightness
COMMENT $287C special flag
COMMENT $287D speed + direction
COMMENT $287E graphic definition
COMMENT $2880 length in SCALE_FACTOR_GAME
COMMENT $2881 anim delay value
COMMENT $2882 pointer to next anim object
COMMENT $2884 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2885 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2886 brightness
COMMENT $2887 special flag
COMMENT $2888 speed + direction
COMMENT $2889 graphic definition
COMMENT $288B length in SCALE_FACTOR_GAME
COMMENT $288C anim delay value
COMMENT $288D pointer to next anim object
COMMENT $288F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2890 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2891 brightness
COMMENT $2892 special flag
COMMENT $2893 speed + direction
COMMENT $2894 graphic definition
COMMENT $2896 length in SCALE_FACTOR_GAME
COMMENT $2897 anim delay value
COMMENT $2898 pointer to next anim object
COMMENT $289A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $289B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $289C brightness
COMMENT $289D special flag
COMMENT $289E speed + direction
COMMENT $289F graphic definition
COMMENT $28A1 length in SCALE_FACTOR_GAME
COMMENT $28A2 anim delay value
COMMENT $28A3 pointer to next anim object
COMMENT $28A5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28A6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28A7 brightness
COMMENT $28A8 special flag
COMMENT $28A9 speed + direction
COMMENT $28AA graphic definition
COMMENT $28AC length in SCALE_FACTOR_GAME
COMMENT $28AD anim delay value
COMMENT $28AE pointer to next anim object
COMMENT $28B0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28B1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28B2 brightness
COMMENT $28B3 special flag
COMMENT $28B4 speed + direction
COMMENT $28B5 graphic definition
COMMENT $28B7 length in SCALE_FACTOR_GAME
COMMENT $28B8 anim delay value
COMMENT $28B9 pointer to next anim object
COMMENT $28BB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28BC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28BD brightness
COMMENT $28BE special flag
COMMENT $28BF speed + direction
COMMENT $28C0 graphic definition
COMMENT $28C2 length in SCALE_FACTOR_GAME
COMMENT $28C3 anim delay value
COMMENT $28C4 pointer to next anim object
COMMENT $28C6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28C7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28C8 brightness
COMMENT $28C9 special flag
COMMENT_LINE $28CA this file is part of vectrex frogger, written by Malban
COMMENT_LINE $28CA in March-April 1998
COMMENT_LINE $28CA all stuff contained here is public domain
COMMENT_LINE $28CA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $28CA this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $28CA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $28CA for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $28CA log1 is moving right with a speed of 1
COMMENT_LINE $28CA log2 is moving left with a speed of -1
COMMENT $28E4 speed + direction
COMMENT $28E5 graphic definition
COMMENT $28E7 length in SCALE_FACTOR_GAME
COMMENT $28E8 anim delay value
COMMENT $28E9 pointer to next anim object
COMMENT $28EB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28EC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28ED brightness
COMMENT $28EE special flag
COMMENT $2909 speed + direction
COMMENT $290A graphic definition
COMMENT $290C length in SCALE_FACTOR_GAME
COMMENT $290D anim delay value
COMMENT $290E pointer to next anim object
COMMENT $2910 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2911 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2912 brightness
COMMENT $2913 special flag
COMMENT $292E speed + direction
COMMENT $292F graphic definition
COMMENT $2931 length in SCALE_FACTOR_GAME
COMMENT $2932 anim delay value
COMMENT $2933 pointer to next anim object
COMMENT $2935 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2936 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2937 brightness
COMMENT $2938 special flag
COMMENT $2953 speed + direction
COMMENT $2954 graphic definition
COMMENT $2956 length in SCALE_FACTOR_GAME
COMMENT $2957 anim delay value
COMMENT $2958 pointer to next anim object
COMMENT $295A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $295B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $295C brightness
COMMENT $295D special flag
COMMENT $295E speed + direction
COMMENT $295F graphic definition
COMMENT $2961 length in SCALE_FACTOR_GAME
COMMENT $2962 anim delay value
COMMENT $2963 pointer to next anim object
COMMENT $2965 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2966 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2967 brightness
COMMENT $2968 special flag
COMMENT $2969 speed + direction
COMMENT $296A graphic definition
COMMENT $296C length in SCALE_FACTOR_GAME
COMMENT $296D anim delay value
COMMENT $296E pointer to next anim object
COMMENT $2970 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2971 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2972 brightness
COMMENT $2973 special flag
COMMENT $2974 speed + direction
COMMENT $2975 graphic definition
COMMENT $2977 length in SCALE_FACTOR_GAME
COMMENT $2978 anim delay value
COMMENT $2979 pointer to next anim object
COMMENT $297B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $297C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $297D brightness
COMMENT $297E special flag
COMMENT $297F speed + direction
COMMENT $2980 graphic definition
COMMENT $2982 length in SCALE_FACTOR_GAME
COMMENT $2983 anim delay value
COMMENT $2984 pointer to next anim object
COMMENT $2986 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2987 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2988 brightness
COMMENT $2989 special flag
COMMENT $298A speed + direction
COMMENT $298B graphic definition
COMMENT $298D length in SCALE_FACTOR_GAME
COMMENT $298E anim delay value
COMMENT $298F pointer to next anim object
COMMENT $2991 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2992 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2993 brightness
COMMENT $2994 special flag
COMMENT $2995 speed + direction
COMMENT $2996 graphic definition
COMMENT $2998 length in SCALE_FACTOR_GAME
COMMENT $2999 anim delay value
COMMENT $299A pointer to next anim object
COMMENT $299C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $299D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $299E brightness
COMMENT $299F special flag
COMMENT $29A0 speed + direction
COMMENT $29A1 graphic definition
COMMENT $29A3 length in SCALE_FACTOR_GAME
COMMENT $29A4 anim delay value
COMMENT $29A5 pointer to next anim object
COMMENT $29A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29A9 brightness
COMMENT $29AA special flag
COMMENT $29AB speed + direction
COMMENT $29AC graphic definition
COMMENT $29AE length in SCALE_FACTOR_GAME
COMMENT $29AF anim delay value
COMMENT $29B0 pointer to next anim object
COMMENT $29B2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29B3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29B4 brightness
COMMENT $29B5 special flag
COMMENT $29CE speed + direction
COMMENT $29CF graphic definition
COMMENT $29D1 length in SCALE_FACTOR_GAME
COMMENT $29D2 anim delay value
COMMENT $29D3 pointer to next anim object
COMMENT $29D5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29D6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29D7 brightness
COMMENT $29D8 special flag
COMMENT $29F1 speed + direction
COMMENT $29F2 graphic definition
COMMENT $29F4 length in SCALE_FACTOR_GAME
COMMENT $29F5 anim delay value
COMMENT $29F6 pointer to next anim object
COMMENT $29F8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29F9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29FA brightness
COMMENT $29FB special flag
COMMENT $2A14 speed + direction
COMMENT $2A15 graphic definition
COMMENT $2A17 length in SCALE_FACTOR_GAME
COMMENT $2A18 anim delay value
COMMENT $2A19 pointer to next anim object
COMMENT $2A1B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A1C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A1D brightness
COMMENT $2A1E special flag
COMMENT $2A37 speed + direction
COMMENT $2A38 graphic definition
COMMENT $2A3A length in SCALE_FACTOR_GAME
COMMENT $2A3B anim delay value
COMMENT $2A3C pointer to next anim object
COMMENT $2A3E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A3F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A40 brightness
COMMENT $2A41 special flag
COMMENT $2A42 speed + direction
COMMENT $2A43 graphic definition
COMMENT $2A45 length in SCALE_FACTOR_GAME
COMMENT $2A46 anim delay value
COMMENT $2A47 pointer to next anim object
COMMENT $2A49 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A4A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A4B brightness
COMMENT $2A4C special flag
COMMENT $2A4D speed + direction
COMMENT $2A4E graphic definition
COMMENT $2A50 length in SCALE_FACTOR_GAME
COMMENT $2A51 anim delay value
COMMENT $2A52 pointer to next anim object
COMMENT $2A54 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A55 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A56 brightness
COMMENT $2A57 special flag
COMMENT $2A70 speed + direction
COMMENT $2A71 graphic definition
COMMENT $2A73 length in SCALE_FACTOR_GAME
COMMENT $2A74 anim delay value
COMMENT $2A75 pointer to next anim object
COMMENT $2A77 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A78 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A79 brightness
COMMENT $2A7A special flag
COMMENT $2A93 speed + direction
COMMENT $2A94 graphic definition
COMMENT $2A96 length in SCALE_FACTOR_GAME
COMMENT $2A97 anim delay value
COMMENT $2A98 pointer to next anim object
COMMENT $2A9A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A9B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A9C brightness
COMMENT $2A9D special flag
COMMENT $2AB6 speed + direction
COMMENT $2AB7 graphic definition
COMMENT $2AB9 length in SCALE_FACTOR_GAME
COMMENT $2ABA anim delay value
COMMENT $2ABB pointer to next anim object
COMMENT $2ABD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2ABE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2ABF brightness
COMMENT $2AC0 special flag
COMMENT $2AD9 speed + direction
COMMENT $2ADA graphic definition
COMMENT $2ADC length in SCALE_FACTOR_GAME
COMMENT $2ADD anim delay value
COMMENT $2ADE pointer to next anim object
COMMENT $2AE0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AE1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AE2 brightness
COMMENT $2AE3 special flag
COMMENT $2AE4 speed + direction
COMMENT $2AE5 graphic definition
COMMENT $2AE7 length in SCALE_FACTOR_GAME
COMMENT $2AE8 anim delay value
COMMENT $2AE9 pointer to next anim object
COMMENT $2AEB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AEC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AED brightness
COMMENT $2AEE special flag
COMMENT $2AEF speed + direction
COMMENT $2AF0 graphic definition
COMMENT $2AF2 length in SCALE_FACTOR_GAME
COMMENT $2AF3 anim delay value
COMMENT $2AF4 pointer to next anim object
COMMENT $2AF6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AF7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AF8 brightness
COMMENT $2AF9 special flag
COMMENT_LINE $2AFA log5a_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3a_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5b_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log5b_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3b_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5c_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log5c_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3c_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5d_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log5d_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3d_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5e_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log5e_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3c_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5f_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log5f_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log3b_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log5a_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6a_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4a_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6b_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6b_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4b_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6c_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6c_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4c_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6d_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6d_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4d_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6e_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6e_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4c_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6f_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT_LINE $2AFA log6f_object:
COMMENT_LINE $2AFA DB 1                    ; speed + direction
COMMENT_LINE $2AFA DW log4b_sprite         ; graphic definition
COMMENT_LINE $2AFA DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2AFA DB 3                    ; anim delay value
COMMENT_LINE $2AFA DW log6a_object         ; pointer to next anim object
COMMENT_LINE $2AFA DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2AFA DB $60                  ; brightness
COMMENT_LINE $2AFA DB 0                    ; special flag
COMMENT $2AFA speed + direction
COMMENT $2AFB graphic definition
COMMENT $2AFD length in SCALE_FACTOR_GAME
COMMENT $2AFE anim delay value
COMMENT $2AFF pointer to next anim object
COMMENT $2B01 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B02 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B03 brightness
COMMENT $2B04 special flag
COMMENT $2B05 speed + direction
COMMENT $2B06 graphic definition
COMMENT $2B08 length in SCALE_FACTOR_GAME
COMMENT $2B09 anim delay value
COMMENT $2B0A pointer to next anim object
COMMENT $2B0C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B0D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B0E brightness
COMMENT $2B0F special flag
COMMENT $2B10 speed + direction
COMMENT $2B11 graphic definition
COMMENT $2B13 length in SCALE_FACTOR_GAME
COMMENT $2B14 anim delay value
COMMENT $2B15 pointer to next anim object
COMMENT $2B17 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B18 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B19 brightness
COMMENT $2B1A special flag
COMMENT $2B1B speed + direction
COMMENT $2B1C graphic definition
COMMENT $2B1E length in SCALE_FACTOR_GAME
COMMENT $2B1F anim delay value
COMMENT $2B20 pointer to next anim object
COMMENT $2B22 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B23 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B24 brightness
COMMENT $2B25 special flag
COMMENT $2B26 speed + direction
COMMENT $2B27 graphic definition
COMMENT $2B29 length in SCALE_FACTOR_GAME
COMMENT $2B2A anim delay value
COMMENT $2B2B pointer to next anim object
COMMENT $2B2D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B2E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B2F brightness
COMMENT $2B30 special flag
COMMENT $2B31 speed + direction
COMMENT $2B32 graphic definition
COMMENT $2B34 length in SCALE_FACTOR_GAME
COMMENT $2B35 anim delay value
COMMENT $2B36 pointer to next anim object
COMMENT $2B38 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B39 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B3A brightness
COMMENT $2B3B special flag
COMMENT $2B3C speed + direction
COMMENT $2B3D graphic definition
COMMENT $2B3F length in SCALE_FACTOR_GAME
COMMENT $2B40 anim delay value
COMMENT $2B41 pointer to next anim object
COMMENT $2B43 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B44 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B45 brightness
COMMENT $2B46 special flag
COMMENT $2B47 speed + direction
COMMENT $2B48 graphic definition
COMMENT $2B4A length in SCALE_FACTOR_GAME
COMMENT $2B4B anim delay value
COMMENT $2B4C pointer to next anim object
COMMENT $2B4E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B4F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B50 brightness
COMMENT $2B51 special flag
COMMENT $2B52 speed + direction
COMMENT $2B53 graphic definition
COMMENT $2B55 length in SCALE_FACTOR_GAME
COMMENT $2B56 anim delay value
COMMENT $2B57 pointer to next anim object
COMMENT $2B59 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B5A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B5B brightness
COMMENT $2B5C special flag
COMMENT $2B5D speed + direction
COMMENT $2B5E graphic definition
COMMENT $2B60 length in SCALE_FACTOR_GAME
COMMENT $2B61 anim delay value
COMMENT $2B62 pointer to next anim object
COMMENT $2B64 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B65 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B66 brightness
COMMENT $2B67 special flag
COMMENT $2B68 speed + direction
COMMENT $2B69 graphic definition
COMMENT $2B6B length in SCALE_FACTOR_GAME
COMMENT $2B6C anim delay value
COMMENT $2B6D pointer to next anim object
COMMENT $2B6F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B70 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B71 brightness
COMMENT $2B72 special flag
COMMENT $2B73 speed + direction
COMMENT $2B74 graphic definition
COMMENT $2B76 length in SCALE_FACTOR_GAME
COMMENT $2B77 anim delay value
COMMENT $2B78 pointer to next anim object
COMMENT $2B7A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B7B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B7C brightness
COMMENT $2B7D special flag
COMMENT $2B7E speed + direction
COMMENT $2B7F graphic definition
COMMENT $2B81 length in SCALE_FACTOR_GAME
COMMENT $2B82 anim delay value
COMMENT $2B83 pointer to next anim object
COMMENT $2B85 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B86 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B87 brightness
COMMENT $2B88 special flag
COMMENT $2B89 speed + direction
COMMENT $2B8A graphic definition
COMMENT $2B8C length in SCALE_FACTOR_GAME
COMMENT $2B8D anim delay value
COMMENT $2B8E pointer to next anim object
COMMENT $2B90 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B91 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B92 brightness
COMMENT $2B93 special flag
COMMENT $2B94 speed + direction
COMMENT $2B95 graphic definition
COMMENT $2B97 length in SCALE_FACTOR_GAME
COMMENT $2B98 anim delay value
COMMENT $2B99 pointer to next anim object
COMMENT $2B9B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B9C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B9D brightness
COMMENT $2B9E special flag
COMMENT $2B9F speed + direction
COMMENT $2BA0 graphic definition
COMMENT $2BA2 length in SCALE_FACTOR_GAME
COMMENT $2BA3 anim delay value
COMMENT $2BA4 pointer to next anim object
COMMENT $2BA6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BA7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BA8 brightness
COMMENT $2BA9 special flag
COMMENT $2BAA speed + direction
COMMENT $2BAB graphic definition
COMMENT $2BAD length in SCALE_FACTOR_GAME
COMMENT $2BAE anim delay value
COMMENT $2BAF pointer to next anim object
COMMENT $2BB1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BB2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BB3 brightness
COMMENT $2BB4 special flag
COMMENT $2BB5 speed + direction
COMMENT $2BB6 graphic definition
COMMENT $2BB8 length in SCALE_FACTOR_GAME
COMMENT $2BB9 anim delay value
COMMENT $2BBA pointer to next anim object
COMMENT $2BBC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BBD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BBE brightness
COMMENT $2BBF special flag
COMMENT $2BC0 speed + direction
COMMENT $2BC1 graphic definition
COMMENT $2BC3 length in SCALE_FACTOR_GAME
COMMENT $2BC4 anim delay value
COMMENT $2BC5 pointer to next anim object
COMMENT $2BC7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BC8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BC9 brightness
COMMENT $2BCA special flag
COMMENT $2BCB speed + direction
COMMENT $2BCC graphic definition
COMMENT $2BCE length in SCALE_FACTOR_GAME
COMMENT $2BCF anim delay value
COMMENT $2BD0 pointer to next anim object
COMMENT $2BD2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BD3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BD4 brightness
COMMENT $2BD5 special flag
COMMENT $2BD6 speed + direction
COMMENT $2BD7 graphic definition
COMMENT $2BD9 length in SCALE_FACTOR_GAME
COMMENT $2BDA anim delay value
COMMENT $2BDB pointer to next anim object
COMMENT $2BDD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BDE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BDF brightness
COMMENT $2BE0 special flag
COMMENT $2BE1 speed + direction
COMMENT $2BE2 graphic definition
COMMENT $2BE4 length in SCALE_FACTOR_GAME
COMMENT $2BE5 anim delay value
COMMENT $2BE6 pointer to next anim object
COMMENT $2BE8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BE9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BEA brightness
COMMENT $2BEB special flag
COMMENT $2BEC speed + direction
COMMENT $2BED graphic definition
COMMENT $2BEF length in SCALE_FACTOR_GAME
COMMENT $2BF0 anim delay value
COMMENT $2BF1 pointer to next anim object
COMMENT $2BF3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BF4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BF5 brightness
COMMENT $2BF6 special flag
COMMENT $2BF7 speed + direction
COMMENT $2BF8 graphic definition
COMMENT $2BFA length in SCALE_FACTOR_GAME
COMMENT $2BFB anim delay value
COMMENT $2BFC pointer to next anim object
COMMENT $2BFE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BFF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C00 brightness
COMMENT $2C01 special flag
COMMENT_LINE $2C02 log11a_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3a_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11b_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log11b_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3b_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11c_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log11c_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3c_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11d_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log11d_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3d_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11e_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log11e_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3c_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11f_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log11f_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log3b_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log11a_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12a_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4a_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12b_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12b_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4b_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12c_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12c_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4c_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12d_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12d_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4d_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12e_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12e_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4c_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12f_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 log12f_object:
COMMENT_LINE $2C02 DB 2                    ; speed + direction
COMMENT_LINE $2C02 DW log4b_sprite         ; graphic definition
COMMENT_LINE $2C02 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C02 DB 3                    ; anim delay value
COMMENT_LINE $2C02 DW log12a_object        ; pointer to next anim object
COMMENT_LINE $2C02 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C02 DB $60                  ; brightness
COMMENT_LINE $2C02 DB 0                    ; special flag
COMMENT_LINE $2C02 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2C02 in March-April 1998
COMMENT_LINE $2C02 all stuff contained here is public domain
COMMENT_LINE $2C02 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2C02 this file contains all 'sprite' definitions for turtles used in           ;
COMMENT_LINE $2C02 vectrex frogger (excluding the '0')                                       ;
COMMENT_LINE $2C02 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2C02 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $2C02 turtle1 is moving to the right with a speed of 1
COMMENT_LINE $2C02 turtle2 is moving to the left with a speed of -1
COMMENT_LINE $2C02 turtle3 is moving to the right with a speed of 2
COMMENT_LINE $2C02 turtle4 is moving to the left with a speed of -2
COMMENT $2C1A speed + direction
COMMENT $2C1B graphic definition
COMMENT $2C1D length in SCALE_FACTOR_GAME
COMMENT $2C1E anim delay value
COMMENT $2C1F pointer to next anim object
COMMENT $2C21 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C22 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C23 brightness
COMMENT $2C24 special flag
COMMENT $2C41 speed + direction
COMMENT $2C42 graphic definition
COMMENT $2C44 length in SCALE_FACTOR_GAME
COMMENT $2C45 anim delay value
COMMENT $2C46 pointer to next anim object
COMMENT $2C48 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C49 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C4A brightness
COMMENT $2C4B special flag
COMMENT $2C68 speed + direction
COMMENT $2C69 graphic definition
COMMENT $2C6B length in SCALE_FACTOR_GAME
COMMENT $2C6C anim delay value
COMMENT $2C6D pointer to next anim object
COMMENT $2C6F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C70 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C71 brightness
COMMENT $2C72 special flag
COMMENT $2C8B speed + direction
COMMENT $2C8C graphic definition
COMMENT $2C8E length in SCALE_FACTOR_GAME
COMMENT $2C8F anim delay value
COMMENT $2C90 pointer to next anim object
COMMENT $2C92 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C93 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C94 brightness
COMMENT $2C95 special flag
COMMENT $2CB2 speed + direction
COMMENT $2CB3 graphic definition
COMMENT $2CB5 length in SCALE_FACTOR_GAME
COMMENT $2CB6 anim delay value
COMMENT $2CB7 pointer to next anim object
COMMENT $2CB9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CBA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CBB brightness
COMMENT $2CBC special flag
COMMENT $2CD9 speed + direction
COMMENT $2CDA graphic definition
COMMENT $2CDC length in SCALE_FACTOR_GAME
COMMENT $2CDD anim delay value
COMMENT $2CDE pointer to next anim object
COMMENT $2CE0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CE1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CE2 brightness
COMMENT $2CE3 special flag
COMMENT $2CE4 speed + direction
COMMENT $2CE5 graphic definition
COMMENT $2CE7 length in SCALE_FACTOR_GAME
COMMENT $2CE8 anim delay value
COMMENT $2CE9 pointer to next anim object
COMMENT $2CEB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CEC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CED brightness
COMMENT $2CEE special flag
COMMENT $2CEF speed + direction
COMMENT $2CF0 graphic definition
COMMENT $2CF2 length in SCALE_FACTOR_GAME
COMMENT $2CF3 anim delay value
COMMENT $2CF4 pointer to next anim object
COMMENT $2CF6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CF7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CF8 brightness
COMMENT $2CF9 special flag
COMMENT $2CFA speed + direction
COMMENT $2CFB graphic definition
COMMENT $2CFD length in SCALE_FACTOR_GAME
COMMENT $2CFE anim delay value
COMMENT $2CFF pointer to next anim object
COMMENT $2D01 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D02 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D03 brightness
COMMENT $2D04 special flag
COMMENT $2D05 speed + direction
COMMENT $2D06 graphic definition
COMMENT $2D08 length in SCALE_FACTOR_GAME
COMMENT $2D09 anim delay value
COMMENT $2D0A pointer to next anim object
COMMENT $2D0C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D0D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D0E brightness
COMMENT $2D0F special flag
COMMENT $2D10 speed + direction
COMMENT $2D11 graphic definition
COMMENT $2D13 length in SCALE_FACTOR_GAME
COMMENT $2D14 anim delay value
COMMENT $2D15 pointer to next anim object
COMMENT $2D17 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D18 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D19 brightness
COMMENT $2D1A special flag
COMMENT $2D1B speed + direction
COMMENT $2D1C graphic definition
COMMENT $2D1E length in SCALE_FACTOR_GAME
COMMENT $2D1F anim delay value
COMMENT $2D20 pointer to next anim object
COMMENT $2D22 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D23 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D24 brightness
COMMENT $2D25 special flag
COMMENT $2D26 speed + direction
COMMENT $2D27 graphic definition
COMMENT $2D29 length in SCALE_FACTOR_GAME
COMMENT $2D2A anim delay value
COMMENT $2D2B pointer to next anim object
COMMENT $2D2D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D2E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D2F brightness
COMMENT $2D30 special flag
COMMENT $2D31 alternate object for diving
COMMENT $2D33 speed + direction
COMMENT $2D34 graphic definition
COMMENT $2D36 length in SCALE_FACTOR_GAME
COMMENT $2D37 anim delay value
COMMENT $2D38 pointer to next anim object
COMMENT $2D3A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D3B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D3C brightness
COMMENT $2D3D special flag
COMMENT $2D3E alternate object for diving
COMMENT $2D40 speed + direction
COMMENT $2D41 graphic definition
COMMENT $2D43 length in SCALE_FACTOR_GAME
COMMENT $2D44 anim delay value
COMMENT $2D45 pointer to next anim object
COMMENT $2D47 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D48 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D49 brightness
COMMENT $2D4A special flag
COMMENT $2D4B alternate object for diving
COMMENT $2D4D speed + direction
COMMENT $2D4E graphic definition
COMMENT $2D50 length in SCALE_FACTOR_GAME
COMMENT $2D51 anim delay value
COMMENT $2D52 pointer to next anim object
COMMENT $2D54 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D55 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D56 brightness
COMMENT $2D57 special flag
COMMENT $2D58 alternate object for diving
COMMENT $2D5A speed + direction
COMMENT $2D5B graphic definition
COMMENT $2D5D length in SCALE_FACTOR_GAME
COMMENT $2D5E anim delay value
COMMENT $2D5F pointer to next anim object
COMMENT $2D61 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D62 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D63 brightness
COMMENT $2D64 special flag
COMMENT $2D65 alternate object for diving
COMMENT $2D67 speed + direction
COMMENT $2D68 graphic definition
COMMENT $2D6A length in SCALE_FACTOR_GAME
COMMENT $2D6B anim delay value
COMMENT $2D6C pointer to next anim object
COMMENT $2D6E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D6F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D70 brightness
COMMENT $2D71 special flag
COMMENT $2D72 alternate object for diving
COMMENT $2D74 speed + direction
COMMENT $2D75 graphic definition
COMMENT $2D77 length in SCALE_FACTOR_GAME
COMMENT $2D78 anim delay value
COMMENT $2D79 pointer to next anim object
COMMENT $2D7B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D7C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D7D brightness
COMMENT $2D7E special flag
COMMENT $2D7F alternate object for diving
COMMENT $2D81 speed + direction
COMMENT $2D82 graphic definition
COMMENT $2D84 length in SCALE_FACTOR_GAME
COMMENT $2D85 anim delay value
COMMENT $2D86 pointer to next anim object
COMMENT $2D88 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D89 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D8A brightness
COMMENT $2D8B special flag
COMMENT $2D8C alternate object for diving
COMMENT $2D8E speed + direction
COMMENT $2D8F graphic definition
COMMENT $2D91 length in SCALE_FACTOR_GAME
COMMENT $2D92 anim delay value
COMMENT $2D93 pointer to next anim object
COMMENT $2D95 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D96 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D97 brightness
COMMENT $2D98 special flag
COMMENT $2D99 alternate object for diving
COMMENT $2D9B speed + direction
COMMENT $2D9C graphic definition
COMMENT $2D9E length in SCALE_FACTOR_GAME
COMMENT $2D9F anim delay value
COMMENT $2DA0 pointer to next anim object
COMMENT $2DA2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DA3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2DA4 brightness
COMMENT $2DA5 special flag
COMMENT $2DA6 alternate object for diving
COMMENT $2DA8 speed + direction
COMMENT $2DA9 graphic definition
COMMENT $2DAB length in SCALE_FACTOR_GAME
COMMENT $2DAC anim delay value
COMMENT $2DAD pointer to next anim object
COMMENT $2DAF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DB0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2DB1 brightness
COMMENT $2DB2 special flag
COMMENT $2DB3 alternate object for diving
COMMENT $2DB5 speed + direction
COMMENT $2DB6 graphic definition
COMMENT $2DB8 length in SCALE_FACTOR_GAME
COMMENT $2DB9 anim delay value
COMMENT $2DBA pointer to next anim object
COMMENT $2DBC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DBD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2DBE brightness
COMMENT $2DBF special flag
COMMENT $2DC0 alternate object for diving
COMMENT_LINE $2DC2 sprite definition
COMMENT_LINE $2DD6 sprite definition
COMMENT_LINE $2DEA sprite definition
COMMENT_LINE $2DF8 sprite definition
COMMENT_LINE $2E16 sprite definition
COMMENT_LINE $2E2A sprite definition
COMMENT $2E34 speed + direction
COMMENT $2E35 graphic definition
COMMENT $2E37 length in SCALE_FACTOR_GAME
COMMENT $2E38 anim delay value
COMMENT $2E39 pointer to next anim object
COMMENT $2E3B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E3C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E3D brightness
COMMENT $2E3E special flag
COMMENT $2E3F alternate object for diving
COMMENT $2E41 speed + direction
COMMENT $2E42 graphic definition
COMMENT $2E44 length in SCALE_FACTOR_GAME
COMMENT $2E45 anim delay value
COMMENT $2E46 pointer to next anim object
COMMENT $2E48 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E49 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E4A brightness
COMMENT $2E4B special flag
COMMENT $2E4C alternate object for diving
COMMENT $2E4E speed + direction
COMMENT $2E4F graphic definition
COMMENT $2E51 length in SCALE_FACTOR_GAME
COMMENT $2E52 anim delay value
COMMENT $2E53 pointer to next anim object
COMMENT $2E55 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E56 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E57 brightness
COMMENT $2E58 special flag
COMMENT $2E59 alternate object for diving
COMMENT $2E5B speed + direction
COMMENT $2E5C graphic definition
COMMENT $2E5E length in SCALE_FACTOR_GAME
COMMENT $2E5F anim delay value
COMMENT $2E60 pointer to next anim object
COMMENT $2E62 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E63 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E64 brightness
COMMENT $2E65 special flag
COMMENT $2E66 alternate object for diving
COMMENT $2E68 speed + direction
COMMENT $2E69 graphic definition
COMMENT $2E6B length in SCALE_FACTOR_GAME
COMMENT $2E6C anim delay value
COMMENT $2E6D pointer to next anim object
COMMENT $2E6F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E70 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E71 brightness
COMMENT $2E72 special flag
COMMENT $2E73 alternate object for diving
COMMENT $2E75 speed + direction
COMMENT $2E76 graphic definition
COMMENT $2E78 length in SCALE_FACTOR_GAME
COMMENT $2E79 anim delay value
COMMENT $2E7A pointer to next anim object
COMMENT $2E7C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E7D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E7E brightness
COMMENT $2E7F special flag
COMMENT $2E80 alternate object for diving
COMMENT $2E82 speed + direction
COMMENT $2E83 graphic definition
COMMENT $2E85 length in SCALE_FACTOR_GAME
COMMENT $2E86 anim delay value
COMMENT $2E87 pointer to next anim object
COMMENT $2E89 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E8A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E8B brightness
COMMENT $2E8C special flag
COMMENT $2E8D alternate object for diving
COMMENT $2E8F speed + direction
COMMENT $2E90 graphic definition
COMMENT $2E92 length in SCALE_FACTOR_GAME
COMMENT $2E93 anim delay value
COMMENT $2E94 pointer to next anim object
COMMENT $2E96 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E97 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E98 brightness
COMMENT $2E99 special flag
COMMENT $2E9A alternate object for diving
COMMENT $2E9C speed + direction
COMMENT $2E9D graphic definition
COMMENT $2E9F length in SCALE_FACTOR_GAME
COMMENT $2EA0 anim delay value
COMMENT $2EA1 pointer to next anim object
COMMENT $2EA3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EA4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EA5 brightness
COMMENT $2EA6 special flag
COMMENT $2EA7 alternate object for diving
COMMENT $2EA9 speed + direction
COMMENT $2EAA graphic definition
COMMENT $2EAC length in SCALE_FACTOR_GAME
COMMENT $2EAD anim delay value
COMMENT $2EAE pointer to next anim object
COMMENT $2EB0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EB1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EB2 brightness
COMMENT $2EB3 special flag
COMMENT $2EB4 alternate object for diving
COMMENT $2EB6 speed + direction
COMMENT $2EB7 graphic definition
COMMENT $2EB9 length in SCALE_FACTOR_GAME
COMMENT $2EBA anim delay value
COMMENT $2EBB pointer to next anim object
COMMENT $2EBD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EBE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EBF brightness
COMMENT $2EC0 special flag
COMMENT $2EC1 alternate object for diving
COMMENT $2EC3 speed + direction
COMMENT $2EC4 graphic definition
COMMENT $2EC6 length in SCALE_FACTOR_GAME
COMMENT $2EC7 anim delay value
COMMENT $2EC8 pointer to next anim object
COMMENT $2ECA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2ECB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2ECC brightness
COMMENT $2ECD special flag
COMMENT $2ECE alternate object for diving
COMMENT $2ED0 speed + direction
COMMENT $2ED1 graphic definition
COMMENT $2ED3 length in SCALE_FACTOR_GAME
COMMENT $2ED4 anim delay value
COMMENT $2ED5 pointer to next anim object
COMMENT $2ED7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2ED8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2ED9 brightness
COMMENT $2EDA special flag
COMMENT $2EDB alternate object for diving
COMMENT $2EDD speed + direction
COMMENT $2EDE graphic definition
COMMENT $2EE0 length in SCALE_FACTOR_GAME
COMMENT $2EE1 anim delay value
COMMENT $2EE2 pointer to next anim object
COMMENT $2EE4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EE5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EE6 brightness
COMMENT $2EE7 special flag
COMMENT $2EE8 alternate object for diving
COMMENT $2EEA speed + direction
COMMENT $2EEB graphic definition
COMMENT $2EED length in SCALE_FACTOR_GAME
COMMENT $2EEE anim delay value
COMMENT $2EEF pointer to next anim object
COMMENT $2EF1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EF2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EF3 brightness
COMMENT $2EF4 special flag
COMMENT $2EF5 alternate object for diving
COMMENT $2EF7 speed + direction
COMMENT $2EF8 graphic definition
COMMENT $2EFA length in SCALE_FACTOR_GAME
COMMENT $2EFB anim delay value
COMMENT $2EFC pointer to next anim object
COMMENT $2EFE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EFF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F00 brightness
COMMENT $2F01 special flag
COMMENT $2F02 alternate object for diving
COMMENT $2F04 speed + direction
COMMENT $2F05 graphic definition
COMMENT $2F07 length in SCALE_FACTOR_GAME
COMMENT $2F08 anim delay value
COMMENT $2F09 pointer to next anim object
COMMENT $2F0B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F0C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F0D brightness
COMMENT $2F0E special flag
COMMENT $2F0F alternate object for diving
COMMENT $2F11 speed + direction
COMMENT $2F12 graphic definition
COMMENT $2F14 length in SCALE_FACTOR_GAME
COMMENT $2F15 anim delay value
COMMENT $2F16 pointer to next anim object
COMMENT $2F18 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F19 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F1A brightness
COMMENT $2F1B special flag
COMMENT $2F1C alternate object for diving
COMMENT $2F1E speed + direction
COMMENT $2F1F graphic definition
COMMENT $2F21 length in SCALE_FACTOR_GAME
COMMENT $2F22 anim delay value
COMMENT $2F23 pointer to next anim object
COMMENT $2F25 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F26 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F27 brightness
COMMENT $2F28 special flag
COMMENT $2F29 alternate object for diving
COMMENT $2F2B speed + direction
COMMENT $2F2C graphic definition
COMMENT $2F2E length in SCALE_FACTOR_GAME
COMMENT $2F2F anim delay value
COMMENT $2F30 pointer to next anim object
COMMENT $2F32 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F33 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F34 brightness
COMMENT $2F35 special flag
COMMENT $2F36 alternate object for diving
COMMENT_LINE $2F38 sprite definition
COMMENT_LINE $2F4C sprite definition
COMMENT_LINE $2F60 sprite definition
COMMENT_LINE $2F7E sprite definition
COMMENT_LINE $2F92 sprite definition
COMMENT $2F9C speed + direction
COMMENT $2F9D graphic definition
COMMENT $2F9F length in SCALE_FACTOR_GAME
COMMENT $2FA0 anim delay value
COMMENT $2FA1 pointer to next anim object
COMMENT $2FA3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FA4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FA5 brightness
COMMENT $2FA6 special flag
COMMENT $2FA7 alternate object for diving
COMMENT $2FA9 speed + direction
COMMENT $2FAA graphic definition
COMMENT $2FAC length in SCALE_FACTOR_GAME
COMMENT $2FAD anim delay value
COMMENT $2FAE pointer to next anim object
COMMENT $2FB0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FB1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FB2 brightness
COMMENT $2FB3 special flag
COMMENT $2FB4 alternate object for diving
COMMENT $2FB6 speed + direction
COMMENT $2FB7 graphic definition
COMMENT $2FB9 length in SCALE_FACTOR_GAME
COMMENT $2FBA anim delay value
COMMENT $2FBB pointer to next anim object
COMMENT $2FBD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FBE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FBF brightness
COMMENT $2FC0 special flag
COMMENT $2FC1 alternate object for diving
COMMENT $2FC3 speed + direction
COMMENT $2FC4 graphic definition
COMMENT $2FC6 length in SCALE_FACTOR_GAME
COMMENT $2FC7 anim delay value
COMMENT $2FC8 pointer to next anim object
COMMENT $2FCA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FCB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FCC brightness
COMMENT $2FCD special flag
COMMENT $2FCE alternate object for diving
COMMENT $2FD0 speed + direction
COMMENT $2FD1 graphic definition
COMMENT $2FD3 length in SCALE_FACTOR_GAME
COMMENT $2FD4 anim delay value
COMMENT $2FD5 pointer to next anim object
COMMENT $2FD7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FD8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FD9 brightness
COMMENT $2FDA special flag
COMMENT $2FDB alternate object for diving
COMMENT $2FDD speed + direction
COMMENT $2FDE graphic definition
COMMENT $2FE0 length in SCALE_FACTOR_GAME
COMMENT $2FE1 anim delay value
COMMENT $2FE2 pointer to next anim object
COMMENT $2FE4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FE5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FE6 brightness
COMMENT $2FE7 special flag
COMMENT $2FE8 alternate object for diving
COMMENT $2FEA speed + direction
COMMENT $2FEB graphic definition
COMMENT $2FED length in SCALE_FACTOR_GAME
COMMENT $2FEE anim delay value
COMMENT $2FEF pointer to next anim object
COMMENT $2FF1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FF2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FF3 brightness
COMMENT $2FF4 special flag
COMMENT $2FF5 alternate object for diving
COMMENT $2FF7 speed + direction
COMMENT $2FF8 graphic definition
COMMENT $2FFA length in SCALE_FACTOR_GAME
COMMENT $2FFB anim delay value
COMMENT $2FFC pointer to next anim object
COMMENT $2FFE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FFF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3000 brightness
COMMENT $3001 special flag
COMMENT $3002 alternate object for diving
COMMENT $3004 speed + direction
COMMENT $3005 graphic definition
COMMENT $3007 length in SCALE_FACTOR_GAME
COMMENT $3008 anim delay value
COMMENT $3009 pointer to next anim object
COMMENT $300B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $300C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $300D brightness
COMMENT $300E special flag
COMMENT $300F alternate object for diving
COMMENT $3011 speed + direction
COMMENT $3012 graphic definition
COMMENT $3014 length in SCALE_FACTOR_GAME
COMMENT $3015 anim delay value
COMMENT $3016 pointer to next anim object
COMMENT $3018 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3019 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $301A brightness
COMMENT $301B special flag
COMMENT $301C alternate object for diving
COMMENT $301E speed + direction
COMMENT $301F graphic definition
COMMENT $3021 length in SCALE_FACTOR_GAME
COMMENT $3022 anim delay value
COMMENT $3023 pointer to next anim object
COMMENT $3025 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3026 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3027 brightness
COMMENT $3028 special flag
COMMENT $3029 alternate object for diving
COMMENT $302B speed + direction
COMMENT $302C graphic definition
COMMENT $302E length in SCALE_FACTOR_GAME
COMMENT $302F anim delay value
COMMENT $3030 pointer to next anim object
COMMENT $3032 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3033 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3034 brightness
COMMENT $3035 special flag
COMMENT $3036 alternate object for diving
COMMENT $3038 speed + direction
COMMENT $3039 graphic definition
COMMENT $303B length in SCALE_FACTOR_GAME
COMMENT $303C anim delay value
COMMENT $303D pointer to next anim object
COMMENT $303F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3040 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3041 brightness
COMMENT $3042 special flag
COMMENT $3043 alternate object for diving
COMMENT $3045 speed + direction
COMMENT $3046 graphic definition
COMMENT $3048 length in SCALE_FACTOR_GAME
COMMENT $3049 anim delay value
COMMENT $304A pointer to next anim object
COMMENT $304C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $304D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $304E brightness
COMMENT $304F special flag
COMMENT $3050 alternate object for diving
COMMENT $3052 speed + direction
COMMENT $3053 graphic definition
COMMENT $3055 length in SCALE_FACTOR_GAME
COMMENT $3056 anim delay value
COMMENT $3057 pointer to next anim object
COMMENT $3059 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $305A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $305B brightness
COMMENT $305C special flag
COMMENT $305D alternate object for diving
COMMENT $305F speed + direction
COMMENT $3060 graphic definition
COMMENT $3062 length in SCALE_FACTOR_GAME
COMMENT $3063 anim delay value
COMMENT $3064 pointer to next anim object
COMMENT $3066 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3067 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3068 brightness
COMMENT $3069 special flag
COMMENT $306A alternate object for diving
COMMENT $306C speed + direction
COMMENT $306D graphic definition
COMMENT $306F length in SCALE_FACTOR_GAME
COMMENT $3070 anim delay value
COMMENT $3071 pointer to next anim object
COMMENT $3073 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3074 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3075 brightness
COMMENT $3076 special flag
COMMENT $3077 alternate object for diving
COMMENT $3079 speed + direction
COMMENT $307A graphic definition
COMMENT $307C length in SCALE_FACTOR_GAME
COMMENT $307D anim delay value
COMMENT $307E pointer to next anim object
COMMENT $3080 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3081 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3082 brightness
COMMENT $3083 special flag
COMMENT $3084 alternate object for diving
COMMENT $3086 speed + direction
COMMENT $3087 graphic definition
COMMENT $3089 length in SCALE_FACTOR_GAME
COMMENT $308A anim delay value
COMMENT $308B pointer to next anim object
COMMENT $308D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $308E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $308F brightness
COMMENT $3090 special flag
COMMENT $3091 alternate object for diving
COMMENT $3093 speed + direction
COMMENT $3094 graphic definition
COMMENT $3096 length in SCALE_FACTOR_GAME
COMMENT $3097 anim delay value
COMMENT $3098 pointer to next anim object
COMMENT $309A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $309B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $309C brightness
COMMENT $309D special flag
COMMENT $309E alternate object for diving
COMMENT_LINE $30A0 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $30A0 in March-April 1998
COMMENT_LINE $30A0 all stuff contained here is public domain
COMMENT_LINE $30A0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $30A0 this file contains 'sprite' definition data for snakes                    ;
COMMENT_LINE $30A0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $30A0 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $30A0 snake1 is moving to the right with a speed of 1
COMMENT_LINE $30A0 snake2 is moving to the right with a speed of 2
COMMENT_LINE $30A0 snake3 is moving to the left with a speed of -1
COMMENT_LINE $30A0 snake4 is moving to the left with a speed of -2
COMMENT $30B8 speed + direction
COMMENT $30B9 graphic definition
COMMENT $30BB length in SCALE_FACTOR_GAME
COMMENT $30BC anim delay value
COMMENT $30BD pointer to next anim object
COMMENT $30BF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30C0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30C1 brightness
COMMENT $30C2 special flag
COMMENT $30DB speed + direction
COMMENT $30DC graphic definition
COMMENT $30DE length in SCALE_FACTOR_GAME
COMMENT $30DF anim delay value
COMMENT $30E0 pointer to next anim object
COMMENT $30E2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30E3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30E4 brightness
COMMENT $30E5 special flag
COMMENT $30FE speed + direction
COMMENT $30FF graphic definition
COMMENT $3101 length in SCALE_FACTOR_GAME
COMMENT $3102 anim delay value
COMMENT $3103 pointer to next anim object
COMMENT $3105 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3106 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3107 brightness
COMMENT $3108 special flag
COMMENT $3109 speed + direction
COMMENT $310A graphic definition
COMMENT $310C length in SCALE_FACTOR_GAME
COMMENT $310D anim delay value
COMMENT $310E pointer to next anim object
COMMENT $3110 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3111 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3112 brightness
COMMENT $3113 special flag
COMMENT $3114 speed + direction
COMMENT $3115 graphic definition
COMMENT $3117 length in SCALE_FACTOR_GAME
COMMENT $3118 anim delay value
COMMENT $3119 pointer to next anim object
COMMENT $311B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $311C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $311D brightness
COMMENT $311E special flag
COMMENT $311F speed + direction
COMMENT $3120 graphic definition
COMMENT $3122 length in SCALE_FACTOR_GAME
COMMENT $3123 anim delay value
COMMENT $3124 pointer to next anim object
COMMENT $3126 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3127 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3128 brightness
COMMENT $3129 special flag
COMMENT $312A speed + direction
COMMENT $312B graphic definition
COMMENT $312D length in SCALE_FACTOR_GAME
COMMENT $312E anim delay value
COMMENT $312F pointer to next anim object
COMMENT $3131 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3132 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3133 brightness
COMMENT $3134 special flag
COMMENT $3135 speed + direction
COMMENT $3136 graphic definition
COMMENT $3138 length in SCALE_FACTOR_GAME
COMMENT $3139 anim delay value
COMMENT $313A pointer to next anim object
COMMENT $313C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $313D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $313E brightness
COMMENT $313F special flag
COMMENT $3158 speed + direction
COMMENT $3159 graphic definition
COMMENT $315B length in SCALE_FACTOR_GAME
COMMENT $315C anim delay value
COMMENT $315D pointer to next anim object
COMMENT $315F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3160 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3161 brightness
COMMENT $3162 special flag
COMMENT $317B speed + direction
COMMENT $317C graphic definition
COMMENT $317E length in SCALE_FACTOR_GAME
COMMENT $317F anim delay value
COMMENT $3180 pointer to next anim object
COMMENT $3182 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3183 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3184 brightness
COMMENT $3185 special flag
COMMENT $319E speed + direction
COMMENT $319F graphic definition
COMMENT $31A1 length in SCALE_FACTOR_GAME
COMMENT $31A2 anim delay value
COMMENT $31A3 pointer to next anim object
COMMENT $31A5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31A6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31A7 brightness
COMMENT $31A8 special flag
COMMENT $31A9 speed + direction
COMMENT $31AA graphic definition
COMMENT $31AC length in SCALE_FACTOR_GAME
COMMENT $31AD anim delay value
COMMENT $31AE pointer to next anim object
COMMENT $31B0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31B1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31B2 brightness
COMMENT $31B3 special flag
COMMENT $31B4 speed + direction
COMMENT $31B5 graphic definition
COMMENT $31B7 length in SCALE_FACTOR_GAME
COMMENT $31B8 anim delay value
COMMENT $31B9 pointer to next anim object
COMMENT $31BB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31BC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31BD brightness
COMMENT $31BE special flag
COMMENT $31BF speed + direction
COMMENT $31C0 graphic definition
COMMENT $31C2 length in SCALE_FACTOR_GAME
COMMENT $31C3 anim delay value
COMMENT $31C4 pointer to next anim object
COMMENT $31C6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31C7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31C8 brightness
COMMENT $31C9 special flag
COMMENT $31CA speed + direction
COMMENT $31CB graphic definition
COMMENT $31CD length in SCALE_FACTOR_GAME
COMMENT $31CE anim delay value
COMMENT $31CF pointer to next anim object
COMMENT $31D1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31D2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31D3 brightness
COMMENT $31D4 special flag
COMMENT $31D5 speed + direction
COMMENT $31D6 graphic definition
COMMENT $31D8 length in SCALE_FACTOR_GAME
COMMENT $31D9 anim delay value
COMMENT $31DA pointer to next anim object
COMMENT $31DC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31DD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31DE brightness
COMMENT $31DF special flag
COMMENT_LINE $31E0 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $31E0 in March-April 1998
COMMENT_LINE $31E0 all stuff contained here is public domain
COMMENT_LINE $31E0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $31E0 this file contains 'sprite' definition data for crocodiles                ;
COMMENT_LINE $31E0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $31E0 croco1a_sprite:
COMMENT_LINE $31E0 if USE_LOOP_UNROLING !=1
COMMENT_LINE $31E0 DB 13
COMMENT_LINE $31E0 else
COMMENT_LINE $31E0 DW (MAX_LINE_NUM-(13+1))*ONE_LINE_LENGTH
COMMENT_LINE $31E0 endif
COMMENT_LINE $31E0 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 croco1a_object:
COMMENT_LINE $31E0 DB 1                    ; speed + direction
COMMENT_LINE $31E0 DW croco1a_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco1b_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $31E0 croco1b_sprite:
COMMENT_LINE $31E0 if USE_LOOP_UNROLING !=1
COMMENT_LINE $31E0 DB 13
COMMENT_LINE $31E0 else
COMMENT_LINE $31E0 DW (MAX_LINE_NUM-(13+1))*ONE_LINE_LENGTH
COMMENT_LINE $31E0 endif
COMMENT_LINE $31E0 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 croco1b_object:
COMMENT_LINE $31E0 DB 1                    ; speed + direction
COMMENT_LINE $31E0 DW croco1b_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco1c_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $31E0 croco1c_sprite:
COMMENT_LINE $31E0 if USE_LOOP_UNROLING !=1
COMMENT_LINE $31E0 DB 11
COMMENT_LINE $31E0 else
COMMENT_LINE $31E0 DW (MAX_LINE_NUM-(11+1))*ONE_LINE_LENGTH
COMMENT_LINE $31E0 endif
COMMENT_LINE $31E0 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -2*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB -1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  1*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $31E0 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $31E0 croco1c_object:
COMMENT_LINE $31E0 DB 1                    ; speed + direction
COMMENT_LINE $31E0 DW croco1c_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco1a_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $31E0 croco2a_object:
COMMENT_LINE $31E0 DB 2                    ; speed + direction
COMMENT_LINE $31E0 DW croco1a_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco2b_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $31E0 croco2b_object:
COMMENT_LINE $31E0 DB 2                    ; speed + direction
COMMENT_LINE $31E0 DW croco1b_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco2c_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $31E0 croco2c_object:
COMMENT_LINE $31E0 DB 2                    ; speed + direction
COMMENT_LINE $31E0 DW croco1c_sprite       ; graphic definition
COMMENT_LINE $31E0 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $31E0 DB 5                    ; anim delay value
COMMENT_LINE $31E0 DW croco2a_object       ; pointer to next anim object
COMMENT_LINE $31E0 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $31E0 DB $60                  ; brightness
COMMENT_LINE $31E0 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT $31FE speed + direction
COMMENT $31FF graphic definition
COMMENT $3201 length in SCALE_FACTOR_GAME
COMMENT $3202 anim delay value
COMMENT $3203 pointer to next anim object
COMMENT $3205 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3206 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3207 brightness
COMMENT $3208 special flag
COMMENT $3227 speed + direction
COMMENT $3228 graphic definition
COMMENT $322A length in SCALE_FACTOR_GAME
COMMENT $322B anim delay value
COMMENT $322C pointer to next anim object
COMMENT $322E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $322F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3230 brightness
COMMENT $3231 special flag
COMMENT $324C speed + direction
COMMENT $324D graphic definition
COMMENT $324F length in SCALE_FACTOR_GAME
COMMENT $3250 anim delay value
COMMENT $3251 pointer to next anim object
COMMENT $3253 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3254 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3255 brightness
COMMENT $3256 special flag
COMMENT $3257 speed + direction
COMMENT $3258 graphic definition
COMMENT $325A length in SCALE_FACTOR_GAME
COMMENT $325B anim delay value
COMMENT $325C pointer to next anim object
COMMENT $325E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $325F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3260 brightness
COMMENT $3261 special flag
COMMENT $3262 speed + direction
COMMENT $3263 graphic definition
COMMENT $3265 length in SCALE_FACTOR_GAME
COMMENT $3266 anim delay value
COMMENT $3267 pointer to next anim object
COMMENT $3269 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $326A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $326B brightness
COMMENT $326C special flag
COMMENT $326D speed + direction
COMMENT $326E graphic definition
COMMENT $3270 length in SCALE_FACTOR_GAME
COMMENT $3271 anim delay value
COMMENT $3272 pointer to next anim object
COMMENT $3274 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3275 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3276 brightness
COMMENT $3277 special flag
COMMENT $3293 speed + direction
COMMENT $3294 graphic definition
COMMENT $3296 length in SCALE_FACTOR_GAME
COMMENT $3297 anim delay value
COMMENT $3298 pointer to next anim object
COMMENT $329A offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $329B offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $329C brightness
COMMENT $329D special flag
COMMENT $32BF speed + direction
COMMENT $32C0 graphic definition
COMMENT $32C2 length in SCALE_FACTOR_GAME
COMMENT $32C3 anim delay value
COMMENT $32C4 pointer to next anim object
COMMENT $32C6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $32C7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $32C8 brightness
COMMENT $32C9 special flag
COMMENT $32EF speed + direction
COMMENT $32F0 graphic definition
COMMENT $32F2 length in SCALE_FACTOR_GAME
COMMENT $32F3 anim delay value
COMMENT $32F4 pointer to next anim object
COMMENT $32F6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $32F7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $32F8 brightness
COMMENT $32F9 special flag
COMMENT $331F speed + direction
COMMENT $3320 graphic definition
COMMENT $3322 length in SCALE_FACTOR_GAME
COMMENT $3323 anim delay value
COMMENT $3324 pointer to next anim object
COMMENT $3326 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3327 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3328 brightness
COMMENT $3329 special flag
COMMENT $334F speed + direction
COMMENT $3350 graphic definition
COMMENT $3352 length in SCALE_FACTOR_GAME
COMMENT $3353 anim delay value
COMMENT $3354 pointer to next anim object
COMMENT $3356 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3357 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3358 brightness
COMMENT $3359 special flag
COMMENT $335A speed + direction
COMMENT $335B graphic definition
COMMENT $335D length in SCALE_FACTOR_GAME
COMMENT $335E anim delay value
COMMENT $335F pointer to next anim object
COMMENT $3361 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3362 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3363 brightness
COMMENT $3364 special flag
COMMENT_LINE $3365 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3365 in March-April 1998
COMMENT_LINE $3365 all stuff contained here is public domain
COMMENT_LINE $3365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3365 this file contains 'sprite' definition data for otter                     ;
COMMENT_LINE $3365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $337C speed + direction
COMMENT $337D graphic definition
COMMENT $337F length in SCALE_FACTOR_GAME
COMMENT $3380 anim delay value
COMMENT $3381 pointer to next anim object
COMMENT $3383 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3384 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3385 brightness
COMMENT $3386 special flag
COMMENT $339E speed + direction
COMMENT $339F graphic definition
COMMENT $33A1 length in SCALE_FACTOR_GAME
COMMENT $33A2 anim delay value
COMMENT $33A3 pointer to next anim object
COMMENT $33A5 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $33A6 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $33A7 brightness
COMMENT $33A8 special flag
COMMENT_LINE $33A9 ***************************************************************************
COMMENT_LINE $33A9 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $33A9 in March-April 1998
COMMENT_LINE $33A9 all stuff contained here is public domain
COMMENT_LINE $33A9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $33A9 this file contains all level definitions (16 levels) and the object table ;
COMMENT_LINE $33A9 of sprites which can be used for levels                                   ;
COMMENT_LINE $33A9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $33A9 Note:
COMMENT_LINE $33A9 The levels are optimized as they are. All levels can even under worst case
COMMENT_LINE $33A9 conditions be played with 50Hz display.
COMMENT_LINE $33A9 They all take less than 30000 cycles to draw.
COMMENT_LINE $33A9 If you make other levels, please be sure that each level takes
COMMENT_LINE $33A9 less than 30000 cycles to be drawn. It's easy to go above, since 30 sprites
COMMENT_LINE $33A9 can be drawn at maximum (not counting otter, log snakes, girls and
COMMENT_LINE $33A9 home sprites). Be carfull, display will 'WOBBLE'!
COMMENT_LINE $33A9 actually these levels could probably be 'packed' than we would probably
COMMENT_LINE $33A9 have space for 30-40-50??? levels...
COMMENT_LINE $33A9 1
COMMENT_LINE $33A9 well, it is not all THAT interesting to make levels...
COMMENT_LINE $33A9 ****************************************************************************
COMMENT_LINE $33A9 some objects are not used...
COMMENT_LINE $33A9 if you make new objects... comment them here...
COMMENT_LINE $33A9 for how to make objects look at any object include file
COMMENT $33A9 moving left  -1 '01'
COMMENT $33AB moving left  -1 '02'
COMMENT $33AD moving right  1 '03'
COMMENT $33AF moving left  -1 '04'
COMMENT $33B1 moving right  1 '05'
COMMENT $33B3 moving left  -1 '06'
COMMENT $33B5 moving right  1 '07'
COMMENT $33B7 moving right  1 '08'
COMMENT $33B9 moving right  2 '09'
COMMENT $33BB moving left  -1 '10'
COMMENT $33BD moving left  -2 '11'
COMMENT $33BF moving left  -1 '12'
COMMENT $33C1 moving right  2 '13'
COMMENT $33C3 moving left  -2 '14'
COMMENT $33C5 moving left  -1 '15' left of big
COMMENT $33C7 moving left  -1 '16' right of big
COMMENT $33C9 moving left  -1 '17'
COMMENT $33CB moving left  -1 '18'
COMMENT $33CD moving left  -1 '19'
COMMENT $33CF moving left  -1 '20'
COMMENT $33D1 moving left  -1 '21'
COMMENT $33D3 moving left  -1 '22'
COMMENT $33D5 croco1a_object         ; moving right  1 '23'
COMMENT $33D7 croco2a_object         ; moving right  2 '24'
COMMENT $33D9 moving left  -1 '25'
COMMENT $33DB moving left  -2 '26'
COMMENT $33DD moving right  1 '27'
COMMENT $33DF moving left  -1 '28'
COMMENT $33E1 moving right  2 '29'
COMMENT $33E3 moving left  -2 '30'
COMMENT $33E5 log5a_object           ; moving right  1 '31' left of big
COMMENT $33E7 log6a_object           ; moving right  1 '32' right of big
COMMENT $33E9 moving left  -1 '33'
COMMENT $33EB moving right  1 '34'
COMMENT $33ED moving right  2 '35'
COMMENT $33EF moving right  2 '36'
COMMENT $33F1 moving left  -2 '37'
COMMENT $33F3 moving left  -2 '38' left of big
COMMENT $33F5 moving left  -2 '39' right of big
COMMENT $33F7 log11a_object          ; moving right  2 '40' left of big
COMMENT $33F9 log12a_object          ; moving right  2 '41' right of big
COMMENT $33FB moving left  -2 '42'
COMMENT $33FD moving left  -3 '43'
COMMENT $33FF moving right  1 '44'
COMMENT $3401 moving right  2 '45'
COMMENT $3403 moving left  -1 '46'
COMMENT $3405 moving left  -2 '47'
COMMENT_LINE $3407 per level 11 bands (5 river + middle band + 5 street)
COMMENT_LINE $3407 7 objects per band MAX
COMMENT_LINE $3407 30 objects absolut MAX
COMMENT_LINE $3407 not more than 6 dive objects (changing after dive timer)
COMMENT_LINE $3407 objects not in adjacents positions
COMMENT_LINE $3407 ...........................................................................
COMMENT $3407 per band 12 pos, river
COMMENT $3413 per band 12 pos, river
COMMENT $341F per band 12 pos, river
COMMENT $342B per band 12 pos, river
COMMENT $3437 per band 12 pos, river
COMMENT $3443 middle band
COMMENT $344F per band 12 pos, street
COMMENT $345B per band 12 pos, street
COMMENT $3467 per band 12 pos, street
COMMENT $3473 per band 12 pos, street
COMMENT $347F per band 12 pos, street
COMMENT $348B fly            timer, after how many ticks
COMMENT $348C crocodile      will appear and disappear
COMMENT $348D mole           timer $ 10
COMMENT $348E snake on log   after what rounds
COMMENT $348F female         1 every round
COMMENT $3490 must be dividable by 2, 120 max!
COMMENT $3491 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3492 ...........................................................................
COMMENT $3492 per band 12 pos, river
COMMENT $349E per band 12 pos, river
COMMENT $34AA per band 12 pos, river
COMMENT $34B6 per band 12 pos, river
COMMENT $34C2 per band 12 pos, river
COMMENT $34CE middle band
COMMENT $34DA per band 12 pos, street
COMMENT $34E6 per band 12 pos, street
COMMENT $34F2 per band 12 pos, street
COMMENT $34FE per band 12 pos, street
COMMENT $350A per band 12 pos, street
COMMENT $3516 fly            timer, after how many ticks
COMMENT $3517 crocodile      will appear and disappear
COMMENT $3518 mole
COMMENT $3519 snake on log
COMMENT $351A female
COMMENT $351B timer muss durch 2 teilbar sein
COMMENT_LINE $351C 120 max!
COMMENT $351C turtle dive timer at least 6 $a is ok!!!
COMMENT_LINE $351D ...........................................................................
COMMENT $351D per band 12 pos, river
COMMENT $3529 per band 12 pos, river
COMMENT $3535 per band 12 pos, river
COMMENT $3541 per band 12 pos, river
COMMENT $354D per band 12 pos, river
COMMENT $3559 middle band
COMMENT $3565 per band 12 pos, street
COMMENT $3571 per band 12 pos, street
COMMENT $357D per band 12 pos, street
COMMENT $3589 per band 12 pos, street
COMMENT $3595 per band 12 pos, street
COMMENT $35A1 fly            timer, after how many ticks
COMMENT $35A2 crocodile      will appear and disappear
COMMENT $35A3 mole
COMMENT $35A4 snake on log
COMMENT $35A5 female
COMMENT $35A6 timer muss durch 2 teilbar sein, 120 max!
COMMENT $35A7 turtle dive timer
COMMENT_LINE $35A8 ...........................................................................
COMMENT $35A8 per band 12 pos, river
COMMENT $35B4 per band 12 pos, river
COMMENT $35C0 per band 12 pos, river
COMMENT $35CC per band 12 pos, river
COMMENT $35D8 per band 12 pos, river
COMMENT $35E4 middle band
COMMENT $35F0 per band 12 pos, street
COMMENT $35FC per band 12 pos, street
COMMENT $3608 per band 12 pos, street
COMMENT $3614 per band 12 pos, street
COMMENT $3620 per band 12 pos, street
COMMENT $362C fly            timer, after how many ticks
COMMENT $362D crocodile      will appear and disappear
COMMENT $362E mole
COMMENT $362F snake on log
COMMENT $3630 female
COMMENT $3631 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3632 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3633 ...........................................................................
COMMENT $3633 per band 12 pos, river
COMMENT $363F per band 12 pos, river
COMMENT $364B per band 12 pos, river
COMMENT $3657 per band 12 pos, river
COMMENT $3663 per band 12 pos, river
COMMENT $366F middle band
COMMENT $367B per band 12 pos, street
COMMENT $3687 per band 12 pos, street
COMMENT $3693 per band 12 pos, street
COMMENT $369F per band 12 pos, street
COMMENT $36AB per band 12 pos, street
COMMENT $36B7 fly            timer, after how many ticks
COMMENT $36B8 crocodile      will appear and disappear
COMMENT $36B9 mole
COMMENT $36BA snake on log
COMMENT $36BB female
COMMENT $36BC timer muss durch 2 teilbar sein, 120 max!
COMMENT $36BD turtle dive timer
COMMENT_LINE $36BE ...........................................................................
COMMENT $36BE per band 12 pos, river
COMMENT $36CA per band 12 pos, river
COMMENT $36D6 per band 12 pos, river
COMMENT $36E2 per band 12 pos, river
COMMENT $36EE per band 12 pos, river
COMMENT $36FA middle band
COMMENT $3706 per band 12 pos, street
COMMENT $3712 per band 12 pos, street
COMMENT $371E per band 12 pos, street
COMMENT $372A per band 12 pos, street
COMMENT $3736 per band 12 pos, street
COMMENT $3742 fly            timer, after how many ticks
COMMENT $3743 crocodile      will appear and disappear
COMMENT $3744 mole
COMMENT $3745 snake on log
COMMENT $3746 female
COMMENT $3747 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3748 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3749 ...........................................................................
COMMENT $3749 per band 12 pos, river
COMMENT $3755 per band 12 pos, river
COMMENT $3761 per band 12 pos, river
COMMENT $376D per band 12 pos, river
COMMENT $3779 per band 12 pos, river
COMMENT $3785 middle band
COMMENT $3791 per band 12 pos, street
COMMENT $379D per band 12 pos, street
COMMENT $37A9 per band 12 pos, street
COMMENT $37B5 per band 12 pos, street
COMMENT $37C1 per band 12 pos, street
COMMENT $37CD fly            timer, after how many ticks
COMMENT $37CE crocodile      will appear and disappear
COMMENT $37CF mole
COMMENT $37D0 snake on log
COMMENT $37D1 female
COMMENT $37D2 timer muss durch 2 teilbar sein, 120 max!
COMMENT $37D3 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $37D4 ...........................................................................
COMMENT $37D4 per band 12 pos, river
COMMENT $37E0 per band 12 pos, river
COMMENT $37EC per band 12 pos, river
COMMENT $37F8 per band 12 pos, river
COMMENT $3804 per band 12 pos, river
COMMENT $3810 middle band
COMMENT $381C per band 12 pos, street
COMMENT $3828 per band 12 pos, street
COMMENT $3834 per band 12 pos, street
COMMENT $3840 per band 12 pos, street
COMMENT $384C per band 12 pos, street
COMMENT $3858 fly            timer, after how many ticks
COMMENT $3859 crocodile      will appear and disappear
COMMENT $385A mole
COMMENT $385B snake on log
COMMENT $385C female
COMMENT $385D timer muss durch 2 teilbar sein, 120 max!
COMMENT $385E turtle dive timer
COMMENT_LINE $385F ...........................................................................
COMMENT $385F per band 12 pos, river
COMMENT $386B per band 12 pos, river
COMMENT $3877 per band 12 pos, river
COMMENT $3883 per band 12 pos, river
COMMENT $388F per band 12 pos, river
COMMENT $389B middle band
COMMENT $38A7 per band 12 pos, street
COMMENT $38B3 per band 12 pos, street
COMMENT $38BF per band 12 pos, street
COMMENT $38CB per band 12 pos, street
COMMENT $38D7 per band 12 pos, street
COMMENT $38E3 fly            timer, after how many ticks
COMMENT $38E4 crocodile      will appear and disappear
COMMENT $38E5 mole
COMMENT $38E6 snake on log
COMMENT $38E7 female
COMMENT $38E8 timer muss durch 2 teilbar sein, 120 max!
COMMENT $38E9 turtle dive timer
COMMENT_LINE $38EA ...........................................................................
COMMENT $38EA per band 12 pos, river
COMMENT $38F6 per band 12 pos, river
COMMENT $3902 per band 12 pos, river
COMMENT $390E per band 12 pos, river
COMMENT $391A per band 12 pos, river
COMMENT $3926 middle band
COMMENT $3932 per band 12 pos, street
COMMENT $393E per band 12 pos, street
COMMENT $394A per band 12 pos, street
COMMENT $3956 per band 12 pos, street
COMMENT $3962 per band 12 pos, street
COMMENT $396E fly            timer, after how many ticks
COMMENT $396F crocodile      will appear and disappear
COMMENT $3970 mole
COMMENT $3971 snake on log
COMMENT $3972 female
COMMENT $3973 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3974 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3975 ...........................................................................
COMMENT $3975 per band 12 pos, river
COMMENT $3981 per band 12 pos, river
COMMENT $398D per band 12 pos, river
COMMENT $3999 per band 12 pos, river
COMMENT $39A5 per band 12 pos, river
COMMENT $39B1 middle band
COMMENT $39BD per band 12 pos, street
COMMENT $39C9 per band 12 pos, street
COMMENT $39D5 per band 12 pos, street
COMMENT $39E1 per band 12 pos, street
COMMENT $39ED per band 12 pos, street
COMMENT $39F9 fly            timer, after how many ticks
COMMENT $39FA crocodile      will appear and disappear
COMMENT $39FB mole
COMMENT $39FC snake on log
COMMENT $39FD female
COMMENT $39FE timer muss durch 2 teilbar sein, 120 max!
COMMENT $39FF turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3A00 ...........................................................................
COMMENT $3A00 per band 12 pos, river
COMMENT $3A0C per band 12 pos, river
COMMENT $3A18 per band 12 pos, river
COMMENT $3A24 per band 12 pos, river
COMMENT $3A30 per band 12 pos, river
COMMENT $3A3C middle band
COMMENT $3A48 per band 12 pos, street
COMMENT $3A54 per band 12 pos, street
COMMENT $3A60 per band 12 pos, street
COMMENT $3A6C per band 12 pos, street
COMMENT $3A78 per band 12 pos, street
COMMENT $3A84 fly            timer, after how many ticks
COMMENT $3A85 crocodile      will appear and disappear
COMMENT $3A86 mole
COMMENT $3A87 snake on log
COMMENT $3A88 female
COMMENT $3A89 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3A8A turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3A8B ...........................................................................
COMMENT $3A8B per band 12 pos, river
COMMENT $3A97 per band 12 pos, river
COMMENT $3AA3 per band 12 pos, river
COMMENT $3AAF per band 12 pos, river
COMMENT $3ABB per band 12 pos, river
COMMENT $3AC7 middle band
COMMENT $3AD3 per band 12 pos, street
COMMENT $3ADF per band 12 pos, street
COMMENT $3AEB per band 12 pos, street
COMMENT $3AF7 per band 12 pos, street
COMMENT $3B03 per band 12 pos, street
COMMENT $3B0F fly            timer, after how many ticks
COMMENT $3B10 crocodile      will appear and disappear
COMMENT $3B11 mole
COMMENT $3B12 snake on log
COMMENT $3B13 female
COMMENT $3B14 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3B15 turtle dive timer
COMMENT_LINE $3B16 ...........................................................................
COMMENT $3B16 per band 12 pos, river
COMMENT $3B22 per band 12 pos, river
COMMENT $3B2E per band 12 pos, river
COMMENT $3B3A per band 12 pos, river
COMMENT $3B46 per band 12 pos, river
COMMENT $3B52 middle band
COMMENT $3B5E per band 12 pos, street
COMMENT $3B6A per band 12 pos, street
COMMENT $3B76 per band 12 pos, street
COMMENT $3B82 per band 12 pos, street
COMMENT $3B8E per band 12 pos, street
COMMENT $3B9A fly            timer, after how many ticks
COMMENT $3B9B crocodile      will appear and disappear
COMMENT $3B9C mole
COMMENT $3B9D snake on log
COMMENT $3B9E female
COMMENT $3B9F timer muss durch 2 teilbar sein, 120 max!
COMMENT $3BA0 turtle dive timer
COMMENT_LINE $3BA1 ...........................................................................
COMMENT $3BA1 per band 12 pos, river
COMMENT $3BAD per band 12 pos, river
COMMENT $3BB9 per band 12 pos, river
COMMENT $3BC5 per band 12 pos, river
COMMENT $3BD1 per band 12 pos, river
COMMENT $3BDD middle band
COMMENT $3BE9 per band 12 pos, street
COMMENT $3BF5 per band 12 pos, street
COMMENT $3C01 per band 12 pos, street
COMMENT $3C0D per band 12 pos, street
COMMENT $3C19 per band 12 pos, street
COMMENT $3C25 fly            timer, after how many ticks
COMMENT $3C26 crocodile      will appear and disappear
COMMENT $3C27 mole
COMMENT $3C28 snake on log
COMMENT $3C29 female
COMMENT $3C2A timer muss durch 2 teilbar sein, 120 max!
COMMENT $3C2B turtle dive timer
COMMENT_LINE $3C2C ...........................................................................
COMMENT $3C2C per band 12 pos, river
COMMENT $3C38 per band 12 pos, river
COMMENT $3C44 per band 12 pos, river
COMMENT $3C50 per band 12 pos, river
COMMENT $3C5C per band 12 pos, river
COMMENT $3C68 middle band
COMMENT $3C74 per band 12 pos, street
COMMENT $3C80 per band 12 pos, street
COMMENT $3C8C per band 12 pos, street
COMMENT $3C98 per band 12 pos, street
COMMENT $3CA4 per band 12 pos, street
COMMENT $3CB0 fly            timer, after how many ticks
COMMENT $3CB1 crocodile      will appear and disappear
COMMENT $3CB2 mole
COMMENT $3CB3 snake on log
COMMENT $3CB4 female
COMMENT $3CB5 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3CB6 turtle dive timer
COMMENT_LINE $3CB7 ...........................................................................
COMMENT $3CB7 per band 12 pos, river
COMMENT $3CC3 per band 12 pos, river
COMMENT $3CCF per band 12 pos, river
COMMENT $3CDB per band 12 pos, river
COMMENT $3CE7 per band 12 pos, river
COMMENT $3CF3 middle band
COMMENT $3CFF per band 12 pos, street
COMMENT $3D0B per band 12 pos, street
COMMENT $3D17 per band 12 pos, street
COMMENT $3D23 per band 12 pos, street
COMMENT $3D2F per band 12 pos, street
COMMENT $3D3B fly
COMMENT $3D3C crocodile
COMMENT $3D3D mole
COMMENT $3D3E snake on log
COMMENT $3D3F female
COMMENT $3D40 timer
COMMENT $3D41 turtle dive timer
COMMENT_LINE $3D42 ...........................................................................
COMMENT_LINE $3D42 ***************************************************************************
COMMENT_LINE $3D42 ***************************************************************************
COMMENT $3D42 piano
COMMENT $3D46 minestorm
COMMENT $3D4A psychadelic :-), a missread address, but what the heck
COMMENT_LINE $3D4E it sounds weird!!!
COMMENT $3D4E well, another one of those
COMMENT $3D52 video game beep
COMMENT $3D56 organ with echo
COMMENT_LINE $3D5A ***************************************************************************
COMMENT_LINE $3D6C ***************************************************************************
COMMENT $3D90 $FF is end marker for music
COMMENT_LINE $3D92 ***************************************************************************
COMMENT_LINE $3DA4 ***************************************************************************
COMMENT $3DA4 ADSR and twang address tables, in Vectrex ROM
COMMENT $3DAC ;;;;;;;
COMMENT $3DB0 a 128 means the next byte is a note for the
COMMENT $3DB4 next channel...
COMMENT $3DBC ;;;;;;;
COMMENT $3DCC ;;;;;;;
COMMENT $3DDC ;;;;;;;
COMMENT $3DEA ;;;;;;;
COMMENT $3DFA ;;;;;;;
COMMENT $3E0A ;;;;;;;
COMMENT $3E1A ;;;;;;;
COMMENT $3E20 $FF is end marker for music
COMMENT_LINE $3E22 (high byte set)
COMMENT_LINE $3E22 ***************************************************************************
COMMENT_LINE $3E2C ***************************************************************************
COMMENT_LINE $3E36 ***************************************************************************
COMMENT_LINE $3E44 ***************************************************************************
COMMENT_LINE $3E5E ***************************************************************************
COMMENT_LINE $3E80 ***************************************************************************
COMMENT_LINE $3E80 entries following must be copied to vectrex ram...
COMMENT_LINE $3E80 copied or initialized
COMMENT_LINE $3E80 start of 'my ram'
COMMENT_LINE $3E80 ***************************************************************************
COMMENT $3EA3 object
COMMENT $3EA5 y_pos SCALE_FIRST_HOME
COMMENT $3EA6 x_pos SCALE_FIRST_HOME
COMMENT $3EA7 anim counter
COMMENT $3EA8 object
COMMENT $3EAA y_pos SCALE_IN_HOME
COMMENT $3EAB x_pos SCALE_IN_HOME
COMMENT $3EAC anim counter
COMMENT $3EAD object
COMMENT $3EAF y_pos SCALE_IN_HOME
COMMENT $3EB0 x_pos SCALE_IN_HOME
COMMENT $3EB1 anim counter
COMMENT $3EB2 object
COMMENT $3EB4 y_pos SCALE_IN_HOME
COMMENT $3EB5 x_pos SCALE_IN_HOME
COMMENT $3EB6 anim counter
COMMENT $3EB7 object
COMMENT $3EB9 y_pos SCALE_IN_HOME
COMMENT $3EBA x_pos SCALE_IN_HOME
COMMENT_LINE $3EBB DB   0                    ; anim counter
COMMENT_LINE $3EBB DW   -1                   ; object
COMMENT_LINE $3EBB ***************************************************************************
COMMENT_LINE $3EBB one object:
COMMENT_LINE $3EBB DW   0 ; object
COMMENT_LINE $3EBB DB   0 ; y_pos
COMMENT_LINE $3EBB DB   0 ; x_pos
COMMENT_LINE $3EBB DB   0 ; anim counter
COMMENT_LINE $3EBB ***************************************************************************
COMMENT_LINE $3EBB ***************************************************************************
COMMENT_LINE $3EBB this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3EBB in March-April 1998
COMMENT_LINE $3EBB all stuff contained here is public domain
COMMENT_LINE $3EBB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3EBB this file contains the yankee doodle music for the game                   ;
COMMENT_LINE $3EBB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3EBB Music data bytes:
COMMENT_LINE $3EBB Bits 0-5 = frequency
COMMENT_LINE $3EBB Bit 6 clear = tone
COMMENT_LINE $3EBB Bit 6 = = noise
COMMENT_LINE $3EBB Bit 7 = = next music data byte is for next channel
COMMENT_LINE $3EBB Bit 7 clear, play note with duration in next music data byte:
COMMENT_LINE $3EBB bits 0-5 = duration
COMMENT_LINE $3EBB bit 6 = unused
COMMENT_LINE $3EBB bit 7 = = end of music
COMMENT $3EBB ADSR and twang address tables, in Vectrex ROM
COMMENT $3EBF ;;;;;;;
COMMENT $3EC1 first byte is a note, to be found
COMMENT $3EC3 in vectrex rom, is a 64 byte table...
COMMENT $3EC5 last byte is length of note
COMMENT $3EC7 ;;;;;;;
COMMENT $3ED5 ;;;;;;;
COMMENT $3EDD ;;;;;;;
COMMENT $3EEB ;;;;;;;
COMMENT $3EF7 ;;;;;;;
COMMENT $3EFB a 128 means the next byte is a note for the
COMMENT $3EFF next channel...
COMMENT $3F07 ;;;;;;;
COMMENT $3F17 ;;;;;;;
COMMENT $3F27 ;;;;;;;
COMMENT $3F35 ;;;;;;;
COMMENT $3F45 ;;;;;;;
COMMENT $3F55 ;;;;;;;
COMMENT $3F65 ;;;;;;;
COMMENT $3F71 ;;;;;;;
COMMENT $3F80 ;;;;;;;
COMMENT $3F8E ;;;;;;;
COMMENT $3F9D ;;;;;;;
COMMENT $3FA9 ;;;;;;;
COMMENT $3FB8 ;;;;;;;
COMMENT $3FC8 ;;;;;;;
COMMENT $3FD8 ;;;;;;;
COMMENT $3FE4 $FF is end marker for music
COMMENT_LINE $3FE6 (high byte set) and end marker for
COMMENT_LINE $3FE6 copy routine
COMMENT_LINE $3FE6 ***************************************************************************
COMMENT_LINE $3FE6 stupid assembler, these defines must be made after the above
COMMENT_LINE $3FE6 labels
COMMENT_LINE $3FE6 following are string offsets for the different deaths
COMMENT_LINE $3FE6 these are the addresses used in the game
COMMENT_LINE $3FE6 addresses which are copied have an underscore
COMMENT_LINE $3FE6 addresses which are used - not -
COMMENT_LINE $3FE6 first the scoring strings...
COMMENT_LINE $3FE6 start of string
COMMENT_LINE $3FE6 score string
COMMENT_LINE $3FE6 score BCD number
COMMENT_LINE $3FE6 level string
COMMENT_LINE $3FE6 level BCD number
COMMENT_LINE $3FE6 frogs string
COMMENT_LINE $3FE6 no_frogs is a display ascii AND the counter for frogs per game
COMMENT_LINE $3FE6 addresses of home objects, actually I think not used as standalones
COMMENT_LINE $3FE6 allways calculates from the first...
COMMENT_LINE $3FE6 here the music resides, dues to the roms method of playing
COMMENT_LINE $3FE6 we need a copy in ram for different envelopes...
COMMENT_LINE $3FE6 here the object list address resides...
COMMENT_LINE $3FE6 and the bandlist
COMMENT_LINE $3FE6 morphing uses ram occupied by the game, therefor only be used
COMMENT_LINE $3FE6 as start, end or in between sequences
COMMENT_LINE $3FE6 end by current_morph_vector_diffs + 2*MAX_VECTOR_MORPH
COMMENT_LINE $3FE6 ***************************************************************************
RANGE $0000-$003C DP $FF
RANGE $003C-$00C6 DP $D0
RANGE $00C6-$00CE DP $C8
RANGE $00CE-$0131 DP $D0
RANGE $0131-$0299 DP $C8
RANGE $0299-$02A8 DP $D0
RANGE $02A8-$0431 DP $C8
RANGE $0431-$0444 DP $D0
RANGE $0444-$0462 DP $C8
RANGE $0462-$0471 DP $D0
RANGE $0471-$047B DP $C8
RANGE $047B-$04AD DP $D0
RANGE $04AD-$0618 DP $C8
RANGE $0618-$0BE0 DP $D0
RANGE $0BE0-$0BE6 DP $C8
RANGE $0BE6-$0CB0 DP $D0
RANGE $0CB0-$0D12 DP $C8
RANGE $0D12-$10E0 DP $D0
RANGE $10E0-$116D DP $C8
RANGE $116D-$1173 DP $D0
RANGE $1173-$119A DP $C8
RANGE $119A-$11D1 DP $D0
RANGE $11D1-$11D9 DP $C8
RANGE $11D9-$1245 DP $D0
RANGE $1245-$13BB DP $C8
RANGE $13BB-$13D7 DP $D0
RANGE $13D7-$13F7 DP $C8
RANGE $13F7-$1469 DP $D0
RANGE $1469-$1471 DP $C8
RANGE $1471-$14DD DP $D0
RANGE $14DD-$14E6 DP $C8
RANGE $14F0-$14F8 DP $C8
RANGE $14F8-$1519 DP $D0
RANGE $1519-$1549 DP $C8
RANGE $1549-$15A2 DP $D0
RANGE $15A2-$15AA DP $C8
RANGE $15AA-$15E5 DP $D0
RANGE $15E5-$15E8 DP $C8
RANGE $15E8-$15EF DP $D0
RANGE $15EF-$1618 DP $C8
RANGE $162A-$1632 DP $C8
RANGE $1632-$167F DP $D0
RANGE $167F-$1687 DP $C8
RANGE $1687-$16EF DP $D0
RANGE $16EF-$1720 DP $C8
RANGE $1720-$1808 DP $D0
RANGE $1808-$1876 DP $C8
RANGE $1876-$1912 DP $D0
RANGE $1912-$1963 DP $C8
RANGE $1963-$3FE6 DP $D0
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$0021 CHAR_DATA 16
RANGE $0021-$0025 DB_DATA 4
RANGE $0025-$002C CHAR_DATA 7
RANGE $002C-$002D DB_DATA 1
RANGE $002D-$1A39 CODE
RANGE $1A39-$1A43 CHAR_DATA 10
RANGE $1A43-$1A4F CHAR_DATA 12
RANGE $1A4F-$1A68 CHAR_DATA 25
RANGE $1A68-$1A7A CHAR_DATA 18
RANGE $1A7A-$1A8C CHAR_DATA 18
RANGE $1A8C-$1AA1 CHAR_DATA 21
RANGE $1AA1-$1AB1 DB_DATA 16
RANGE $1AB1-$1ABB DB_DATA 10
RANGE $1ABB-$1AD1 CHAR_DATA 22
RANGE $1AD1-$1AE3 CHAR_DATA 18
RANGE $1AE3-$1AF7 CHAR_DATA 20
RANGE $1AF7-$1B0A CHAR_DATA 19
RANGE $1B0A-$1B1E CHAR_DATA 20
RANGE $1B1E-$1B2F CHAR_DATA 17
RANGE $1B2F-$1B3F CHAR_DATA 16
RANGE $1B3F-$1B52 CHAR_DATA 19
RANGE $1B52-$1B61 CHAR_DATA 15
RANGE $1B61-$1B6F CHAR_DATA 14
RANGE $1B6F-$1B8C CHAR_DATA 29
RANGE $1B8C-$1BA6 CHAR_DATA 26
RANGE $1BA6-$1BBC CHAR_DATA 22
RANGE $1BBC-$1BC0 CHAR_DATA 4
RANGE $1BC0-$1BCE CHAR_DATA 14
RANGE $1BCE-$1BFF CHAR_DATA 49
RANGE $1BFF-$1C0C CHAR_DATA 13
RANGE $1C0C-$1C23 CHAR_DATA 23
RANGE $1C23-$1C2D CHAR_DATA 10
RANGE $1C2D-$1C38 CHAR_DATA 11
RANGE $1C38-$1C43 CHAR_DATA 11
RANGE $1C43-$1C4E CHAR_DATA 11
RANGE $1C4E-$1C58 CHAR_DATA 10
RANGE $1C58-$1C64 CHAR_DATA 12
RANGE $1C64-$1C83 CHAR_DATA 31
RANGE $1C83-$1C84 DB_DATA 1
RANGE $1C84-$1C85 DB_DATA 1
RANGE $1C85-$1C86 DB_DATA 1
RANGE $1C86-$1C87 DB_DATA 1
RANGE $1C87-$1C89 DB_DATA 2
RANGE $1C89-$1C8B DB_DATA 2
RANGE $1C8B-$1C8D DB_DATA 2
RANGE $1C8D-$1C8F DB_DATA 2
RANGE $1C8F-$1C91 DB_DATA 2
RANGE $1C91-$1C93 DB_DATA 2
RANGE $1C93-$1C95 DB_DATA 2
RANGE $1C95-$1C97 DB_DATA 2
RANGE $1C97-$1C99 DB_DATA 2
RANGE $1C99-$1C9B DB_DATA 2
RANGE $1C9B-$1C9D DB_DATA 2
RANGE $1C9D-$1C9F DB_DATA 2
RANGE $1C9F-$1CA1 DB_DATA 2
RANGE $1CA1-$1CA3 DB_DATA 2
RANGE $1CA3-$1CA5 DB_DATA 2
RANGE $1CA5-$1CA7 DB_DATA 2
RANGE $1CA7-$1CA9 DB_DATA 2
RANGE $1CA9-$1CAB DB_DATA 2
RANGE $1CAB-$1CAD DB_DATA 2
RANGE $1CAD-$1CAF DB_DATA 2
RANGE $1CAF-$1CB1 DB_DATA 2
RANGE $1CB1-$1CB3 DB_DATA 2
RANGE $1CB3-$1CB5 DB_DATA 2
RANGE $1CB5-$1CB7 DB_DATA 2
RANGE $1CB7-$1CB8 DB_DATA 1
RANGE $1CB8-$1CB9 DB_DATA 1
RANGE $1CB9-$1CBA DB_DATA 1
RANGE $1CBA-$1CBC DB_DATA 2
RANGE $1CBC-$1CBE DB_DATA 2
RANGE $1CBE-$1CC0 DB_DATA 2
RANGE $1CC0-$1CC2 DB_DATA 2
RANGE $1CC2-$1CC3 DB_DATA 1
RANGE $1CC3-$1CC4 DB_DATA 1
RANGE $1CC4-$1CC5 DB_DATA 1
RANGE $1CC5-$1CC7 DB_DATA 2
RANGE $1CC7-$1CC9 DB_DATA 2
RANGE $1CC9-$1CCB DB_DATA 2
RANGE $1CCB-$1CCD DB_DATA 2
RANGE $1CCD-$1CCF DB_DATA 2
RANGE $1CCF-$1CD1 DB_DATA 2
RANGE $1CD1-$1CD3 DB_DATA 2
RANGE $1CD3-$1CD4 DB_DATA 1
RANGE $1CD4-$1CD5 DB_DATA 1
RANGE $1CD5-$1CD6 DB_DATA 1
RANGE $1CD6-$1CD8 DB_DATA 2
RANGE $1CD8-$1CDA DB_DATA 2
RANGE $1CDA-$1CDC DB_DATA 2
RANGE $1CDC-$1CDE DB_DATA 2
RANGE $1CDE-$1CE0 DB_DATA 2
RANGE $1CE0-$1CE2 DB_DATA 2
RANGE $1CE2-$1CE4 DB_DATA 2
RANGE $1CE4-$1CE6 DB_DATA 2
RANGE $1CE6-$1CE8 DB_DATA 2
RANGE $1CE8-$1CE9 DB_DATA 1
RANGE $1CE9-$1CEA DB_DATA 1
RANGE $1CEA-$1CEB DB_DATA 1
RANGE $1CEB-$1CED DB_DATA 2
RANGE $1CED-$1CEF DB_DATA 2
RANGE $1CEF-$1CF1 DB_DATA 2
RANGE $1CF1-$1CF3 DB_DATA 2
RANGE $1CF3-$1CF5 DB_DATA 2
RANGE $1CF5-$1CF7 DB_DATA 2
RANGE $1CF7-$1CF9 DB_DATA 2
RANGE $1CF9-$1CFB DB_DATA 2
RANGE $1CFB-$1CFC DB_DATA 1
RANGE $1CFC-$1CFD DB_DATA 1
RANGE $1CFD-$1CFE DB_DATA 1
RANGE $1CFE-$1D00 DB_DATA 2
RANGE $1D00-$1D02 DB_DATA 2
RANGE $1D02-$1D04 DB_DATA 2
RANGE $1D04-$1D06 DB_DATA 2
RANGE $1D06-$1D08 DB_DATA 2
RANGE $1D08-$1D0A DB_DATA 2
RANGE $1D0A-$1D0C DB_DATA 2
RANGE $1D0C-$1D0E DB_DATA 2
RANGE $1D0E-$1D0F DB_DATA 1
RANGE $1D0F-$1D10 DB_DATA 1
RANGE $1D10-$1D11 DB_DATA 1
RANGE $1D11-$1D13 DB_DATA 2
RANGE $1D13-$1D15 DB_DATA 2
RANGE $1D15-$1D17 DB_DATA 2
RANGE $1D17-$1D19 DB_DATA 2
RANGE $1D19-$1D1B DB_DATA 2
RANGE $1D1B-$1D1D DB_DATA 2
RANGE $1D1D-$1D1E DB_DATA 1
RANGE $1D1E-$1D1F DB_DATA 1
RANGE $1D1F-$1D20 DB_DATA 1
RANGE $1D20-$1D22 DB_DATA 2
RANGE $1D22-$1D24 DB_DATA 2
RANGE $1D24-$1D26 DB_DATA 2
RANGE $1D26-$1D28 DB_DATA 2
RANGE $1D28-$1D2A DB_DATA 2
RANGE $1D2A-$1D2B DB_DATA 1
RANGE $1D2B-$1D2C DB_DATA 1
RANGE $1D2C-$1D2D DB_DATA 1
RANGE $1D2D-$1D2F DB_DATA 2
RANGE $1D2F-$1D31 DB_DATA 2
RANGE $1D31-$1D33 DB_DATA 2
RANGE $1D33-$1D35 DB_DATA 2
RANGE $1D35-$1D37 DB_DATA 2
RANGE $1D37-$1D39 DB_DATA 2
RANGE $1D39-$1D3B DB_DATA 2
RANGE $1D3B-$1D3D DB_DATA 2
RANGE $1D3D-$1D3F DB_DATA 2
RANGE $1D3F-$1D41 DB_DATA 2
RANGE $1D41-$1D42 DB_DATA 1
RANGE $1D42-$1D43 DB_DATA 1
RANGE $1D43-$1D44 DB_DATA 1
RANGE $1D44-$1D46 DB_DATA 2
RANGE $1D46-$1D48 DB_DATA 2
RANGE $1D48-$1D4A DB_DATA 2
RANGE $1D4A-$1D4C DB_DATA 2
RANGE $1D4C-$1D4E DB_DATA 2
RANGE $1D4E-$1D50 DB_DATA 2
RANGE $1D50-$1D52 DB_DATA 2
RANGE $1D52-$1D53 DB_DATA 1
RANGE $1D53-$1D54 DB_DATA 1
RANGE $1D54-$1D55 DB_DATA 1
RANGE $1D55-$1D57 DB_DATA 2
RANGE $1D57-$1D59 DB_DATA 2
RANGE $1D59-$1D5B DB_DATA 2
RANGE $1D5B-$1D5D DB_DATA 2
RANGE $1D5D-$1D5F DB_DATA 2
RANGE $1D5F-$1D61 DB_DATA 2
RANGE $1D61-$1D62 DB_DATA 1
RANGE $1D62-$1D63 DB_DATA 1
RANGE $1D63-$1D64 DB_DATA 1
RANGE $1D64-$1D66 DB_DATA 2
RANGE $1D66-$1D68 DB_DATA 2
RANGE $1D68-$1D6A DB_DATA 2
RANGE $1D6A-$1D6C DB_DATA 2
RANGE $1D6C-$1D6E DB_DATA 2
RANGE $1D6E-$1D70 DB_DATA 2
RANGE $1D70-$1D72 DB_DATA 2
RANGE $1D72-$1D73 DB_DATA 1
RANGE $1D73-$1D74 DB_DATA 1
RANGE $1D74-$1D75 DB_DATA 1
RANGE $1D75-$1D77 DB_DATA 2
RANGE $1D77-$1D79 DB_DATA 2
RANGE $1D79-$1D7B DB_DATA 2
RANGE $1D7B-$1D7C DB_DATA 1
RANGE $1D7C-$1D7D DB_DATA 1
RANGE $1D7D-$1D7E DB_DATA 1
RANGE $1D7E-$1D80 DB_DATA 2
RANGE $1D80-$1D82 DB_DATA 2
RANGE $1D82-$1D84 DB_DATA 2
RANGE $1D84-$1D86 DB_DATA 2
RANGE $1D86-$1D88 DB_DATA 2
RANGE $1D88-$1D8A DB_DATA 2
RANGE $1D8A-$1D8B DB_DATA 1
RANGE $1D8B-$1D8C DB_DATA 1
RANGE $1D8C-$1D8D DB_DATA 1
RANGE $1D8D-$1D8F DB_DATA 2
RANGE $1D8F-$1D91 DB_DATA 2
RANGE $1D91-$1D93 DB_DATA 2
RANGE $1D93-$1D95 DB_DATA 2
RANGE $1D95-$1D97 DB_DATA 2
RANGE $1D97-$1D99 DB_DATA 2
RANGE $1D99-$1D9A DB_DATA 1
RANGE $1D9A-$1D9B DB_DATA 1
RANGE $1D9B-$1D9C DB_DATA 1
RANGE $1D9C-$1D9E DB_DATA 2
RANGE $1D9E-$1DA0 DB_DATA 2
RANGE $1DA0-$1DA2 DB_DATA 2
RANGE $1DA2-$1DA4 DB_DATA 2
RANGE $1DA4-$1DA6 DB_DATA 2
RANGE $1DA6-$1DA8 DB_DATA 2
RANGE $1DA8-$1DAA DB_DATA 2
RANGE $1DAA-$1DAC DB_DATA 2
RANGE $1DAC-$1DAE DB_DATA 2
RANGE $1DAE-$1DB0 DB_DATA 2
RANGE $1DB0-$1DB1 DB_DATA 1
RANGE $1DB1-$1DB2 DB_DATA 1
RANGE $1DB2-$1DB3 DB_DATA 1
RANGE $1DB3-$1DB5 DB_DATA 2
RANGE $1DB5-$1DB7 DB_DATA 2
RANGE $1DB7-$1DB9 DB_DATA 2
RANGE $1DB9-$1DBB DB_DATA 2
RANGE $1DBB-$1DBD DB_DATA 2
RANGE $1DBD-$1DBF DB_DATA 2
RANGE $1DBF-$1DC1 DB_DATA 2
RANGE $1DC1-$1DC2 DB_DATA 1
RANGE $1DC2-$1DC3 DB_DATA 1
RANGE $1DC3-$1DC4 DB_DATA 1
RANGE $1DC4-$1DC6 DB_DATA 2
RANGE $1DC6-$1DC8 DB_DATA 2
RANGE $1DC8-$1DCA DB_DATA 2
RANGE $1DCA-$1DCC DB_DATA 2
RANGE $1DCC-$1DCE DB_DATA 2
RANGE $1DCE-$1DD0 DB_DATA 2
RANGE $1DD0-$1DD2 DB_DATA 2
RANGE $1DD2-$1DD4 DB_DATA 2
RANGE $1DD4-$1DD6 DB_DATA 2
RANGE $1DD6-$1DD7 DB_DATA 1
RANGE $1DD7-$1DD8 DB_DATA 1
RANGE $1DD8-$1DD9 DB_DATA 1
RANGE $1DD9-$1DDB DB_DATA 2
RANGE $1DDB-$1DDD DB_DATA 2
RANGE $1DDD-$1DDF DB_DATA 2
RANGE $1DDF-$1DE1 DB_DATA 2
RANGE $1DE1-$1DE3 DB_DATA 2
RANGE $1DE3-$1DE5 DB_DATA 2
RANGE $1DE5-$1DE7 DB_DATA 2
RANGE $1DE7-$1DE9 DB_DATA 2
RANGE $1DE9-$1DEB DB_DATA 2
RANGE $1DEB-$1DED DB_DATA 2
RANGE $1DED-$1DEF DB_DATA 2
RANGE $1DEF-$1DF0 DB_DATA 1
RANGE $1DF0-$1DF1 DB_DATA 1
RANGE $1DF1-$1DF2 DB_DATA 1
RANGE $1DF2-$1DF4 DB_DATA 2
RANGE $1DF4-$1DF6 DB_DATA 2
RANGE $1DF6-$1DF8 DB_DATA 2
RANGE $1DF8-$1DFA DB_DATA 2
RANGE $1DFA-$1DFB DB_DATA 1
RANGE $1DFB-$1DFC DB_DATA 1
RANGE $1DFC-$1DFD DB_DATA 1
RANGE $1DFD-$1DFF DB_DATA 2
RANGE $1DFF-$1E01 DB_DATA 2
RANGE $1E01-$1E03 DB_DATA 2
RANGE $1E03-$1E05 DB_DATA 2
RANGE $1E05-$1E07 DB_DATA 2
RANGE $1E07-$1E09 DB_DATA 2
RANGE $1E09-$1E0B DB_DATA 2
RANGE $1E0B-$1E0C DB_DATA 1
RANGE $1E0C-$1E0D DB_DATA 1
RANGE $1E0D-$1E0E DB_DATA 1
RANGE $1E0E-$1E10 DB_DATA 2
RANGE $1E10-$1E12 DB_DATA 2
RANGE $1E12-$1E14 DB_DATA 2
RANGE $1E14-$1E16 DB_DATA 2
RANGE $1E16-$1E17 DB_DATA 1
RANGE $1E17-$1E18 DB_DATA 1
RANGE $1E18-$1E19 DB_DATA 1
RANGE $1E19-$1E1B DB_DATA 2
RANGE $1E1B-$1E1D DB_DATA 2
RANGE $1E1D-$1E1F DB_DATA 2
RANGE $1E1F-$1E21 DB_DATA 2
RANGE $1E21-$1E23 DB_DATA 2
RANGE $1E23-$1E25 DB_DATA 2
RANGE $1E25-$1E26 DB_DATA 1
RANGE $1E26-$1E27 DB_DATA 1
RANGE $1E27-$1E28 DB_DATA 1
RANGE $1E28-$1E2A DB_DATA 2
RANGE $1E2A-$1E2C DB_DATA 2
RANGE $1E2C-$1E2E DB_DATA 2
RANGE $1E2E-$1E30 DB_DATA 2
RANGE $1E30-$1E32 DB_DATA 2
RANGE $1E32-$1E34 DB_DATA 2
RANGE $1E34-$1E35 DB_DATA 1
RANGE $1E35-$1E36 DB_DATA 1
RANGE $1E36-$1E37 DB_DATA 1
RANGE $1E37-$1E39 DB_DATA 2
RANGE $1E39-$1E3B DB_DATA 2
RANGE $1E3B-$1E3D DB_DATA 2
RANGE $1E3D-$1E3F DB_DATA 2
RANGE $1E3F-$1E53 DW_DATA 10
RANGE $1E53-$1E67 DW_DATA 10
RANGE $1E67-$1E73 DW_DATA 6
RANGE $1E73-$1E74 DB_DATA 1
RANGE $1E74-$1E76 DB_DATA 2
RANGE $1E76-$1E78 DB_DATA 2
RANGE $1E78-$1E7A DB_DATA 2
RANGE $1E7A-$1E7C DB_DATA 2
RANGE $1E7C-$1E7E DB_DATA 2
RANGE $1E7E-$1E80 DB_DATA 2
RANGE $1E80-$1E82 DB_DATA 2
RANGE $1E82-$1E84 DB_DATA 2
RANGE $1E84-$1E86 DB_DATA 2
RANGE $1E86-$1E88 DB_DATA 2
RANGE $1E88-$1E8A DB_DATA 2
RANGE $1E8A-$1E8C DB_DATA 2
RANGE $1E8C-$1E8D DB_DATA 1
RANGE $1E8D-$1E8F DB_DATA 2
RANGE $1E8F-$1E91 DB_DATA 2
RANGE $1E91-$1E93 DB_DATA 2
RANGE $1E93-$1E95 DB_DATA 2
RANGE $1E95-$1E97 DB_DATA 2
RANGE $1E97-$1E99 DB_DATA 2
RANGE $1E99-$1E9B DB_DATA 2
RANGE $1E9B-$1E9D DB_DATA 2
RANGE $1E9D-$1E9E DB_DATA 1
RANGE $1E9E-$1EA0 DB_DATA 2
RANGE $1EA0-$1EA2 DB_DATA 2
RANGE $1EA2-$1EA4 DB_DATA 2
RANGE $1EA4-$1EA6 DB_DATA 2
RANGE $1EA6-$1EA8 DB_DATA 2
RANGE $1EA8-$1EAA DB_DATA 2
RANGE $1EAA-$1EAC DB_DATA 2
RANGE $1EAC-$1EAE DB_DATA 2
RANGE $1EAE-$1EB0 DB_DATA 2
RANGE $1EB0-$1EB2 DB_DATA 2
RANGE $1EB2-$1EB3 DB_DATA 1
RANGE $1EB3-$1EB5 DB_DATA 2
RANGE $1EB5-$1EB7 DB_DATA 2
RANGE $1EB7-$1EB9 DB_DATA 2
RANGE $1EB9-$1EBB DB_DATA 2
RANGE $1EBB-$1EBD DB_DATA 2
RANGE $1EBD-$1EBF DB_DATA 2
RANGE $1EBF-$1EC1 DB_DATA 2
RANGE $1EC1-$1EC3 DB_DATA 2
RANGE $1EC3-$1EC5 DB_DATA 2
RANGE $1EC5-$1EC7 DB_DATA 2
RANGE $1EC7-$1EC8 DB_DATA 1
RANGE $1EC8-$1ECA DB_DATA 2
RANGE $1ECA-$1ECC DB_DATA 2
RANGE $1ECC-$1ECE DB_DATA 2
RANGE $1ECE-$1ED0 DB_DATA 2
RANGE $1ED0-$1ED2 DB_DATA 2
RANGE $1ED2-$1ED4 DB_DATA 2
RANGE $1ED4-$1ED6 DB_DATA 2
RANGE $1ED6-$1ED8 DB_DATA 2
RANGE $1ED8-$1EDA DB_DATA 2
RANGE $1EDA-$1EDB DB_DATA 1
RANGE $1EDB-$1EDD DB_DATA 2
RANGE $1EDD-$1EDF DB_DATA 2
RANGE $1EDF-$1EE1 DB_DATA 2
RANGE $1EE1-$1EE3 DB_DATA 2
RANGE $1EE3-$1EE5 DB_DATA 2
RANGE $1EE5-$1EE7 DB_DATA 2
RANGE $1EE7-$1EE9 DB_DATA 2
RANGE $1EE9-$1EEB DB_DATA 2
RANGE $1EEB-$1EED DB_DATA 2
RANGE $1EED-$1EEF DB_DATA 2
RANGE $1EEF-$1EF0 DB_DATA 1
RANGE $1EF0-$1EF2 DB_DATA 2
RANGE $1EF2-$1EF3 DB_DATA 1
RANGE $1EF3-$1EF5 DB_DATA 2
RANGE $1EF5-$1EF7 DB_DATA 2
RANGE $1EF7-$1EF9 DB_DATA 2
RANGE $1EF9-$1EFB DB_DATA 2
RANGE $1EFB-$1EFD DB_DATA 2
RANGE $1EFD-$1EFF DB_DATA 2
RANGE $1EFF-$1F01 DB_DATA 2
RANGE $1F01-$1F03 DB_DATA 2
RANGE $1F03-$1F05 DB_DATA 2
RANGE $1F05-$1F07 DB_DATA 2
RANGE $1F07-$1F09 DB_DATA 2
RANGE $1F09-$1F0B DB_DATA 2
RANGE $1F0B-$1F0D DB_DATA 2
RANGE $1F0D-$1F0F DB_DATA 2
RANGE $1F0F-$1F11 DB_DATA 2
RANGE $1F11-$1F13 DB_DATA 2
RANGE $1F13-$1F15 DB_DATA 2
RANGE $1F15-$1F17 DB_DATA 2
RANGE $1F17-$1F19 DB_DATA 2
RANGE $1F19-$1F1B DB_DATA 2
RANGE $1F1B-$1F1D DB_DATA 2
RANGE $1F1D-$1F1F DB_DATA 2
RANGE $1F1F-$1F21 DB_DATA 2
RANGE $1F21-$1F23 DB_DATA 2
RANGE $1F23-$1F25 DB_DATA 2
RANGE $1F25-$1F27 DB_DATA 2
RANGE $1F27-$1F29 DB_DATA 2
RANGE $1F29-$1F2B DB_DATA 2
RANGE $1F2B-$1F2D DB_DATA 2
RANGE $1F2D-$1F2F DB_DATA 2
RANGE $1F2F-$1F31 DB_DATA 2
RANGE $1F31-$1F33 DB_DATA 2
RANGE $1F33-$1F35 DB_DATA 2
RANGE $1F35-$1F37 DB_DATA 2
RANGE $1F37-$1F39 DB_DATA 2
RANGE $1F39-$1F3B DB_DATA 2
RANGE $1F3B-$1F3D DB_DATA 2
RANGE $1F3D-$1F3F DB_DATA 2
RANGE $1F3F-$1F41 DB_DATA 2
RANGE $1F41-$1F43 DB_DATA 2
RANGE $1F43-$1F45 DB_DATA 2
RANGE $1F45-$1F47 DB_DATA 2
RANGE $1F47-$1F48 DB_DATA 1
RANGE $1F48-$1F4A DB_DATA 2
RANGE $1F4A-$1F4C DB_DATA 2
RANGE $1F4C-$1F4E DB_DATA 2
RANGE $1F4E-$1F50 DB_DATA 2
RANGE $1F50-$1F52 DB_DATA 2
RANGE $1F52-$1F54 DB_DATA 2
RANGE $1F54-$1F56 DB_DATA 2
RANGE $1F56-$1F58 DB_DATA 2
RANGE $1F58-$1F5A DB_DATA 2
RANGE $1F5A-$1F5C DB_DATA 2
RANGE $1F5C-$1F5E DB_DATA 2
RANGE $1F5E-$1F60 DB_DATA 2
RANGE $1F60-$1F62 DB_DATA 2
RANGE $1F62-$1F64 DB_DATA 2
RANGE $1F64-$1F66 DB_DATA 2
RANGE $1F66-$1F68 DB_DATA 2
RANGE $1F68-$1F6A DB_DATA 2
RANGE $1F6A-$1F6C DB_DATA 2
RANGE $1F6C-$1F6E DB_DATA 2
RANGE $1F6E-$1F70 DB_DATA 2
RANGE $1F70-$1F72 DB_DATA 2
RANGE $1F72-$1F74 DB_DATA 2
RANGE $1F74-$1F76 DB_DATA 2
RANGE $1F76-$1F78 DB_DATA 2
RANGE $1F78-$1F7A DB_DATA 2
RANGE $1F7A-$1F7C DB_DATA 2
RANGE $1F7C-$1F7E DB_DATA 2
RANGE $1F7E-$1F80 DB_DATA 2
RANGE $1F80-$1F81 DB_DATA 1
RANGE $1F81-$1F83 DB_DATA 2
RANGE $1F83-$1F85 DB_DATA 2
RANGE $1F85-$1F87 DB_DATA 2
RANGE $1F87-$1F89 DB_DATA 2
RANGE $1F89-$1F8B DB_DATA 2
RANGE $1F8B-$1F8D DB_DATA 2
RANGE $1F8D-$1F8F DB_DATA 2
RANGE $1F8F-$1F91 DB_DATA 2
RANGE $1F91-$1F93 DB_DATA 2
RANGE $1F93-$1F95 DB_DATA 2
RANGE $1F95-$1F97 DB_DATA 2
RANGE $1F97-$1F99 DB_DATA 2
RANGE $1F99-$1F9B DB_DATA 2
RANGE $1F9B-$1F9D DB_DATA 2
RANGE $1F9D-$1F9F DB_DATA 2
RANGE $1F9F-$1FA1 DB_DATA 2
RANGE $1FA1-$1FA3 DB_DATA 2
RANGE $1FA3-$1FA5 DB_DATA 2
RANGE $1FA5-$1FA7 DB_DATA 2
RANGE $1FA7-$1FA9 DB_DATA 2
RANGE $1FA9-$1FAB DB_DATA 2
RANGE $1FAB-$1FAD DB_DATA 2
RANGE $1FAD-$1FAF DB_DATA 2
RANGE $1FAF-$1FB1 DB_DATA 2
RANGE $1FB1-$1FB3 DB_DATA 2
RANGE $1FB3-$1FB5 DB_DATA 2
RANGE $1FB5-$1FB7 DB_DATA 2
RANGE $1FB7-$1FB9 DB_DATA 2
RANGE $1FB9-$1FBB DB_DATA 2
RANGE $1FBB-$1FBD DB_DATA 2
RANGE $1FBD-$1FBF DB_DATA 2
RANGE $1FBF-$1FC1 DB_DATA 2
RANGE $1FC1-$1FC3 DB_DATA 2
RANGE $1FC3-$1FC5 DB_DATA 2
RANGE $1FC5-$1FC7 DB_DATA 2
RANGE $1FC7-$1FC9 DB_DATA 2
RANGE $1FC9-$1FCB DB_DATA 2
RANGE $1FCB-$1FCD DB_DATA 2
RANGE $1FCD-$1FCF DB_DATA 2
RANGE $1FCF-$1FD1 DB_DATA 2
RANGE $1FD1-$1FD3 DB_DATA 2
RANGE $1FD3-$1FD5 DB_DATA 2
RANGE $1FD5-$1FD7 DB_DATA 2
RANGE $1FD7-$1FD9 DB_DATA 2
RANGE $1FD9-$1FDB DB_DATA 2
RANGE $1FDB-$1FDD DB_DATA 2
RANGE $1FDD-$1FDF DB_DATA 2
RANGE $1FDF-$1FE0 DB_DATA 1
RANGE $1FE0-$1FE2 DB_DATA 2
RANGE $1FE2-$1FE4 DB_DATA 2
RANGE $1FE4-$1FE6 DB_DATA 2
RANGE $1FE6-$1FE8 DB_DATA 2
RANGE $1FE8-$1FEA DB_DATA 2
RANGE $1FEA-$1FEC DB_DATA 2
RANGE $1FEC-$1FEE DB_DATA 2
RANGE $1FEE-$1FF0 DB_DATA 2
RANGE $1FF0-$1FF2 DB_DATA 2
RANGE $1FF2-$1FF4 DB_DATA 2
RANGE $1FF4-$1FF6 DB_DATA 2
RANGE $1FF6-$1FF8 DB_DATA 2
RANGE $1FF8-$1FFA DB_DATA 2
RANGE $1FFA-$1FFC DB_DATA 2
RANGE $1FFC-$1FFE DB_DATA 2
RANGE $1FFE-$2000 DB_DATA 2
RANGE $2000-$2002 DB_DATA 2
RANGE $2002-$2004 DB_DATA 2
RANGE $2004-$2006 DB_DATA 2
RANGE $2006-$2008 DB_DATA 2
RANGE $2008-$200A DB_DATA 2
RANGE $200A-$200C DB_DATA 2
RANGE $200C-$200E DB_DATA 2
RANGE $200E-$2010 DB_DATA 2
RANGE $2010-$2012 DB_DATA 2
RANGE $2012-$2014 DB_DATA 2
RANGE $2014-$2016 DB_DATA 2
RANGE $2016-$2018 DB_DATA 2
RANGE $2018-$201A DB_DATA 2
RANGE $201A-$201C DB_DATA 2
RANGE $201C-$201E DB_DATA 2
RANGE $201E-$2020 DB_DATA 2
RANGE $2020-$2022 DB_DATA 2
RANGE $2022-$2024 DB_DATA 2
RANGE $2024-$2026 DB_DATA 2
RANGE $2026-$2028 DB_DATA 2
RANGE $2028-$202A DB_DATA 2
RANGE $202A-$202C DB_DATA 2
RANGE $202C-$202E DB_DATA 2
RANGE $202E-$2030 DB_DATA 2
RANGE $2030-$2032 DB_DATA 2
RANGE $2032-$2034 DB_DATA 2
RANGE $2034-$2036 DB_DATA 2
RANGE $2036-$2038 DB_DATA 2
RANGE $2038-$203A DB_DATA 2
RANGE $203A-$203C DB_DATA 2
RANGE $203C-$203E DB_DATA 2
RANGE $203E-$2040 DB_DATA 2
RANGE $2040-$2042 DB_DATA 2
RANGE $2042-$2044 DB_DATA 2
RANGE $2044-$2046 DB_DATA 2
RANGE $2046-$2048 DB_DATA 2
RANGE $2048-$204A DB_DATA 2
RANGE $204A-$204C DB_DATA 2
RANGE $204C-$204E DB_DATA 2
RANGE $204E-$2050 DB_DATA 2
RANGE $2050-$2052 DB_DATA 2
RANGE $2052-$2054 DB_DATA 2
RANGE $2054-$2056 DB_DATA 2
RANGE $2056-$2058 DB_DATA 2
RANGE $2058-$205A DB_DATA 2
RANGE $205A-$205C DB_DATA 2
RANGE $205C-$205E DB_DATA 2
RANGE $205E-$205F DB_DATA 1
RANGE $205F-$2061 DB_DATA 2
RANGE $2061-$2063 DB_DATA 2
RANGE $2063-$2065 DB_DATA 2
RANGE $2065-$2067 DB_DATA 2
RANGE $2067-$2069 DB_DATA 2
RANGE $2069-$206B DB_DATA 2
RANGE $206B-$206D DB_DATA 2
RANGE $206D-$206F DB_DATA 2
RANGE $206F-$2071 DB_DATA 2
RANGE $2071-$2073 DB_DATA 2
RANGE $2073-$2075 DB_DATA 2
RANGE $2075-$2077 DB_DATA 2
RANGE $2077-$2079 DB_DATA 2
RANGE $2079-$207B DB_DATA 2
RANGE $207B-$207D DB_DATA 2
RANGE $207D-$207F DB_DATA 2
RANGE $207F-$2081 DB_DATA 2
RANGE $2081-$2083 DB_DATA 2
RANGE $2083-$2085 DB_DATA 2
RANGE $2085-$2087 DB_DATA 2
RANGE $2087-$2089 DB_DATA 2
RANGE $2089-$208B DB_DATA 2
RANGE $208B-$208D DB_DATA 2
RANGE $208D-$208F DB_DATA 2
RANGE $208F-$2091 DB_DATA 2
RANGE $2091-$2093 DB_DATA 2
RANGE $2093-$2095 DB_DATA 2
RANGE $2095-$2097 DB_DATA 2
RANGE $2097-$2099 DB_DATA 2
RANGE $2099-$209B DB_DATA 2
RANGE $209B-$209D DB_DATA 2
RANGE $209D-$209F DB_DATA 2
RANGE $209F-$20A1 DB_DATA 2
RANGE $20A1-$20A3 DB_DATA 2
RANGE $20A3-$20A5 DB_DATA 2
RANGE $20A5-$20A7 DB_DATA 2
RANGE $20A7-$20A9 DB_DATA 2
RANGE $20A9-$20AB DB_DATA 2
RANGE $20AB-$20AD DB_DATA 2
RANGE $20AD-$20AF DB_DATA 2
RANGE $20AF-$20B0 DB_DATA 1
RANGE $20B0-$20B2 DB_DATA 2
RANGE $20B2-$20B4 DB_DATA 2
RANGE $20B4-$20B6 DB_DATA 2
RANGE $20B6-$20B8 DB_DATA 2
RANGE $20B8-$20BA DB_DATA 2
RANGE $20BA-$20BC DB_DATA 2
RANGE $20BC-$20BE DB_DATA 2
RANGE $20BE-$20C0 DB_DATA 2
RANGE $20C0-$20C2 DB_DATA 2
RANGE $20C2-$20C4 DB_DATA 2
RANGE $20C4-$20C6 DB_DATA 2
RANGE $20C6-$20C8 DB_DATA 2
RANGE $20C8-$20CA DB_DATA 2
RANGE $20CA-$20CC DB_DATA 2
RANGE $20CC-$20CE DB_DATA 2
RANGE $20CE-$20D0 DB_DATA 2
RANGE $20D0-$20D2 DB_DATA 2
RANGE $20D2-$20D4 DB_DATA 2
RANGE $20D4-$20D6 DB_DATA 2
RANGE $20D6-$20D8 DB_DATA 2
RANGE $20D8-$20DA DB_DATA 2
RANGE $20DA-$20DC DB_DATA 2
RANGE $20DC-$20DE DB_DATA 2
RANGE $20DE-$20E0 DB_DATA 2
RANGE $20E0-$20E2 DB_DATA 2
RANGE $20E2-$20E4 DB_DATA 2
RANGE $20E4-$20E6 DB_DATA 2
RANGE $20E6-$20E8 DB_DATA 2
RANGE $20E8-$20EA DB_DATA 2
RANGE $20EA-$20EC DB_DATA 2
RANGE $20EC-$20EE DB_DATA 2
RANGE $20EE-$20F0 DB_DATA 2
RANGE $20F0-$20F2 DB_DATA 2
RANGE $20F2-$20F4 DB_DATA 2
RANGE $20F4-$20F6 DB_DATA 2
RANGE $20F6-$20F8 DB_DATA 2
RANGE $20F8-$20FA DB_DATA 2
RANGE $20FA-$20FC DB_DATA 2
RANGE $20FC-$20FE DB_DATA 2
RANGE $20FE-$2100 DB_DATA 2
RANGE $2100-$2102 DB_DATA 2
RANGE $2102-$2104 DB_DATA 2
RANGE $2104-$2106 DB_DATA 2
RANGE $2106-$2108 DB_DATA 2
RANGE $2108-$210A DB_DATA 2
RANGE $210A-$210C DB_DATA 2
RANGE $210C-$210E DB_DATA 2
RANGE $210E-$2110 DB_DATA 2
RANGE $2110-$2112 DW_DATA 1
RANGE $2112-$2114 DW_DATA 1
RANGE $2114-$2115 DB_DATA 1
RANGE $2115-$2116 DB_DATA 1
RANGE $2116-$2118 DW_DATA 1
RANGE $2118-$2119 DB_DATA 1
RANGE $2119-$211B DW_DATA 1
RANGE $211B-$211D DW_DATA 1
RANGE $211D-$211E DB_DATA 1
RANGE $211E-$211F DB_DATA 1
RANGE $211F-$2121 DW_DATA 1
RANGE $2121-$2122 DB_DATA 1
RANGE $2122-$2124 DW_DATA 1
RANGE $2124-$2126 DW_DATA 1
RANGE $2126-$2127 DB_DATA 1
RANGE $2127-$2128 DB_DATA 1
RANGE $2128-$212A DW_DATA 1
RANGE $212A-$212B DB_DATA 1
RANGE $212B-$212D DW_DATA 1
RANGE $212D-$212F DW_DATA 1
RANGE $212F-$2130 DB_DATA 1
RANGE $2130-$2131 DB_DATA 1
RANGE $2131-$2133 DW_DATA 1
RANGE $2133-$2134 DB_DATA 1
RANGE $2134-$2136 DW_DATA 1
RANGE $2136-$2138 DW_DATA 1
RANGE $2138-$2139 DB_DATA 1
RANGE $2139-$213A DB_DATA 1
RANGE $213A-$213C DW_DATA 1
RANGE $213C-$213D DB_DATA 1
RANGE $213D-$213F DW_DATA 1
RANGE $213F-$2141 DW_DATA 1
RANGE $2141-$2142 DB_DATA 1
RANGE $2142-$2143 DB_DATA 1
RANGE $2143-$2145 DW_DATA 1
RANGE $2145-$2146 DB_DATA 1
RANGE $2146-$2148 DW_DATA 1
RANGE $2148-$214A DW_DATA 1
RANGE $214A-$214B DB_DATA 1
RANGE $214B-$214C DB_DATA 1
RANGE $214C-$214E DW_DATA 1
RANGE $214E-$214F DB_DATA 1
RANGE $214F-$2151 DW_DATA 1
RANGE $2151-$2153 DW_DATA 1
RANGE $2153-$2154 DB_DATA 1
RANGE $2154-$2155 DB_DATA 1
RANGE $2155-$2157 DW_DATA 1
RANGE $2157-$2158 DB_DATA 1
RANGE $2158-$215A DW_DATA 1
RANGE $215A-$215C DW_DATA 1
RANGE $215C-$215D DB_DATA 1
RANGE $215D-$215E DB_DATA 1
RANGE $215E-$2160 DW_DATA 1
RANGE $2160-$2161 DB_DATA 1
RANGE $2161-$2163 DW_DATA 1
RANGE $2163-$2165 DW_DATA 1
RANGE $2165-$2166 DB_DATA 1
RANGE $2166-$2167 DB_DATA 1
RANGE $2167-$2169 DW_DATA 1
RANGE $2169-$216A DB_DATA 1
RANGE $216A-$216C DW_DATA 1
RANGE $216C-$216E DW_DATA 1
RANGE $216E-$216F DB_DATA 1
RANGE $216F-$2170 DB_DATA 1
RANGE $2170-$2172 DW_DATA 1
RANGE $2172-$2173 DB_DATA 1
RANGE $2173-$2174 DB_DATA 1
RANGE $2174-$2176 DB_DATA 2
RANGE $2176-$2178 DB_DATA 2
RANGE $2178-$217A DB_DATA 2
RANGE $217A-$217C DB_DATA 2
RANGE $217C-$217E DB_DATA 2
RANGE $217E-$2180 DB_DATA 2
RANGE $2180-$2182 DB_DATA 2
RANGE $2182-$2184 DB_DATA 2
RANGE $2184-$2186 DB_DATA 2
RANGE $2186-$2188 DB_DATA 2
RANGE $2188-$218A DB_DATA 2
RANGE $218A-$218C DB_DATA 2
RANGE $218C-$218E DB_DATA 2
RANGE $218E-$2190 DB_DATA 2
RANGE $2190-$2192 DB_DATA 2
RANGE $2192-$2194 DB_DATA 2
RANGE $2194-$2196 DB_DATA 2
RANGE $2196-$2198 DB_DATA 2
RANGE $2198-$219A DB_DATA 2
RANGE $219A-$219C DB_DATA 2
RANGE $219C-$219E DB_DATA 2
RANGE $219E-$219F DB_DATA 1
RANGE $219F-$21A0 DB_DATA 1
RANGE $21A0-$21A1 DB_DATA 1
RANGE $21A1-$21A2 DB_DATA 1
RANGE $21A2-$21A3 DB_DATA 1
RANGE $21A3-$21A4 DB_DATA 1
RANGE $21A4-$21A5 DB_DATA 1
RANGE $21A5-$21A6 DB_DATA 1
RANGE $21A6-$21A7 DB_DATA 1
RANGE $21A7-$21A9 DB_DATA 2
RANGE $21A9-$21AB DB_DATA 2
RANGE $21AB-$21AD DB_DATA 2
RANGE $21AD-$21AF DB_DATA 2
RANGE $21AF-$21B1 DB_DATA 2
RANGE $21B1-$21B3 DB_DATA 2
RANGE $21B3-$21B5 DB_DATA 2
RANGE $21B5-$21B7 DB_DATA 2
RANGE $21B7-$21B9 DB_DATA 2
RANGE $21B9-$21BB DB_DATA 2
RANGE $21BB-$21BD DB_DATA 2
RANGE $21BD-$21BF DB_DATA 2
RANGE $21BF-$21C1 DB_DATA 2
RANGE $21C1-$21C3 DB_DATA 2
RANGE $21C3-$21C5 DB_DATA 2
RANGE $21C5-$21C7 DB_DATA 2
RANGE $21C7-$21C8 DB_DATA 1
RANGE $21C8-$21CA DB_DATA 2
RANGE $21CA-$21CC DB_DATA 2
RANGE $21CC-$21CE DB_DATA 2
RANGE $21CE-$21D0 DB_DATA 2
RANGE $21D0-$21D2 DB_DATA 2
RANGE $21D2-$21D4 DB_DATA 2
RANGE $21D4-$21D6 DB_DATA 2
RANGE $21D6-$21D8 DB_DATA 2
RANGE $21D8-$21DA DB_DATA 2
RANGE $21DA-$21DC DB_DATA 2
RANGE $21DC-$21DE DB_DATA 2
RANGE $21DE-$21E0 DB_DATA 2
RANGE $21E0-$21E2 DB_DATA 2
RANGE $21E2-$21E4 DB_DATA 2
RANGE $21E4-$21E6 DB_DATA 2
RANGE $21E6-$21E8 DB_DATA 2
RANGE $21E8-$21EA DB_DATA 2
RANGE $21EA-$21EC DB_DATA 2
RANGE $21EC-$21ED DB_DATA 1
RANGE $21ED-$21EF DB_DATA 2
RANGE $21EF-$21F1 DB_DATA 2
RANGE $21F1-$21F3 DB_DATA 2
RANGE $21F3-$21F5 DB_DATA 2
RANGE $21F5-$21F7 DB_DATA 2
RANGE $21F7-$21F9 DB_DATA 2
RANGE $21F9-$21FB DB_DATA 2
RANGE $21FB-$21FD DB_DATA 2
RANGE $21FD-$21FF DB_DATA 2
RANGE $21FF-$2201 DB_DATA 2
RANGE $2201-$2203 DB_DATA 2
RANGE $2203-$2205 DB_DATA 2
RANGE $2205-$2207 DB_DATA 2
RANGE $2207-$2209 DB_DATA 2
RANGE $2209-$220B DB_DATA 2
RANGE $220B-$220D DB_DATA 2
RANGE $220D-$220F DB_DATA 2
RANGE $220F-$2211 DB_DATA 2
RANGE $2211-$2212 DB_DATA 1
RANGE $2212-$2214 DB_DATA 2
RANGE $2214-$2216 DB_DATA 2
RANGE $2216-$2218 DB_DATA 2
RANGE $2218-$221A DB_DATA 2
RANGE $221A-$221C DB_DATA 2
RANGE $221C-$221E DB_DATA 2
RANGE $221E-$2220 DB_DATA 2
RANGE $2220-$2222 DB_DATA 2
RANGE $2222-$2223 DB_DATA 1
RANGE $2223-$2225 DW_DATA 1
RANGE $2225-$2226 DB_DATA 1
RANGE $2226-$2227 DB_DATA 1
RANGE $2227-$2229 DW_DATA 1
RANGE $2229-$222A DB_DATA 1
RANGE $222A-$222B DB_DATA 1
RANGE $222B-$222C DB_DATA 1
RANGE $222C-$222D DB_DATA 1
RANGE $222D-$222E DB_DATA 1
RANGE $222E-$2230 DB_DATA 2
RANGE $2230-$2232 DB_DATA 2
RANGE $2232-$2234 DB_DATA 2
RANGE $2234-$2236 DB_DATA 2
RANGE $2236-$2238 DB_DATA 2
RANGE $2238-$223A DB_DATA 2
RANGE $223A-$223C DB_DATA 2
RANGE $223C-$223E DB_DATA 2
RANGE $223E-$223F DB_DATA 1
RANGE $223F-$2241 DW_DATA 1
RANGE $2241-$2242 DB_DATA 1
RANGE $2242-$2243 DB_DATA 1
RANGE $2243-$2245 DW_DATA 1
RANGE $2245-$2246 DB_DATA 1
RANGE $2246-$2247 DB_DATA 1
RANGE $2247-$2248 DB_DATA 1
RANGE $2248-$2249 DB_DATA 1
RANGE $2249-$224A DB_DATA 1
RANGE $224A-$224C DB_DATA 2
RANGE $224C-$224E DB_DATA 2
RANGE $224E-$2250 DB_DATA 2
RANGE $2250-$2252 DB_DATA 2
RANGE $2252-$2254 DB_DATA 2
RANGE $2254-$2256 DB_DATA 2
RANGE $2256-$2258 DB_DATA 2
RANGE $2258-$225A DB_DATA 2
RANGE $225A-$225B DB_DATA 1
RANGE $225B-$225D DW_DATA 1
RANGE $225D-$225E DB_DATA 1
RANGE $225E-$225F DB_DATA 1
RANGE $225F-$2261 DW_DATA 1
RANGE $2261-$2262 DB_DATA 1
RANGE $2262-$2263 DB_DATA 1
RANGE $2263-$2264 DB_DATA 1
RANGE $2264-$2265 DB_DATA 1
RANGE $2265-$2266 DB_DATA 1
RANGE $2266-$2268 DW_DATA 1
RANGE $2268-$2269 DB_DATA 1
RANGE $2269-$226A DB_DATA 1
RANGE $226A-$226C DW_DATA 1
RANGE $226C-$226D DB_DATA 1
RANGE $226D-$226E DB_DATA 1
RANGE $226E-$226F DB_DATA 1
RANGE $226F-$2270 DB_DATA 1
RANGE $2270-$2271 DB_DATA 1
RANGE $2271-$2273 DW_DATA 1
RANGE $2273-$2274 DB_DATA 1
RANGE $2274-$2275 DB_DATA 1
RANGE $2275-$2277 DW_DATA 1
RANGE $2277-$2278 DB_DATA 1
RANGE $2278-$2279 DB_DATA 1
RANGE $2279-$227A DB_DATA 1
RANGE $227A-$227B DB_DATA 1
RANGE $227B-$227C DB_DATA 1
RANGE $227C-$227E DW_DATA 1
RANGE $227E-$227F DB_DATA 1
RANGE $227F-$2280 DB_DATA 1
RANGE $2280-$2282 DW_DATA 1
RANGE $2282-$2283 DB_DATA 1
RANGE $2283-$2284 DB_DATA 1
RANGE $2284-$2285 DB_DATA 1
RANGE $2285-$2286 DB_DATA 1
RANGE $2286-$2287 DB_DATA 1
RANGE $2287-$2289 DB_DATA 2
RANGE $2289-$228B DB_DATA 2
RANGE $228B-$228D DB_DATA 2
RANGE $228D-$228F DB_DATA 2
RANGE $228F-$2291 DB_DATA 2
RANGE $2291-$2293 DB_DATA 2
RANGE $2293-$2295 DB_DATA 2
RANGE $2295-$2297 DB_DATA 2
RANGE $2297-$2299 DB_DATA 2
RANGE $2299-$229B DB_DATA 2
RANGE $229B-$229D DB_DATA 2
RANGE $229D-$229F DB_DATA 2
RANGE $229F-$22A1 DB_DATA 2
RANGE $22A1-$22A3 DB_DATA 2
RANGE $22A3-$22A5 DB_DATA 2
RANGE $22A5-$22A7 DB_DATA 2
RANGE $22A7-$22A9 DB_DATA 2
RANGE $22A9-$22AB DB_DATA 2
RANGE $22AB-$22AD DB_DATA 2
RANGE $22AD-$22AF DB_DATA 2
RANGE $22AF-$22B1 DB_DATA 2
RANGE $22B1-$22B3 DB_DATA 2
RANGE $22B3-$22B5 DB_DATA 2
RANGE $22B5-$22B7 DB_DATA 2
RANGE $22B7-$22B9 DB_DATA 2
RANGE $22B9-$22BB DB_DATA 2
RANGE $22BB-$22BD DB_DATA 2
RANGE $22BD-$22BF DB_DATA 2
RANGE $22BF-$22C1 DW_DATA 1
RANGE $22C1-$22C3 DB_DATA 2
RANGE $22C3-$22C5 DB_DATA 2
RANGE $22C5-$22C7 DB_DATA 2
RANGE $22C7-$22C8 DB_DATA 1
RANGE $22C8-$22CA DW_DATA 1
RANGE $22CA-$22CB DB_DATA 1
RANGE $22CB-$22CC DB_DATA 1
RANGE $22CC-$22CE DW_DATA 1
RANGE $22CE-$22CF DB_DATA 1
RANGE $22CF-$22D0 DB_DATA 1
RANGE $22D0-$22D2 DW_DATA 1
RANGE $22D2-$22D4 DB_DATA 2
RANGE $22D4-$22D6 DB_DATA 2
RANGE $22D6-$22D8 DB_DATA 2
RANGE $22D8-$22DA DB_DATA 2
RANGE $22DA-$22DC DB_DATA 2
RANGE $22DC-$22DE DB_DATA 2
RANGE $22DE-$22E0 DB_DATA 2
RANGE $22E0-$22E1 DB_DATA 1
RANGE $22E1-$22E3 DW_DATA 1
RANGE $22E3-$22E4 DB_DATA 1
RANGE $22E4-$22E5 DB_DATA 1
RANGE $22E5-$22E7 DW_DATA 1
RANGE $22E7-$22E8 DB_DATA 1
RANGE $22E8-$22E9 DB_DATA 1
RANGE $22E9-$22EB DW_DATA 1
RANGE $22EB-$22ED DB_DATA 2
RANGE $22ED-$22EF DB_DATA 2
RANGE $22EF-$22F1 DB_DATA 2
RANGE $22F1-$22F3 DB_DATA 2
RANGE $22F3-$22F4 DB_DATA 1
RANGE $22F4-$22F6 DW_DATA 1
RANGE $22F6-$22F7 DB_DATA 1
RANGE $22F7-$22F8 DB_DATA 1
RANGE $22F8-$22FA DW_DATA 1
RANGE $22FA-$22FB DB_DATA 1
RANGE $22FB-$22FC DB_DATA 1
RANGE $22FC-$22FE DW_DATA 1
RANGE $22FE-$2300 DB_DATA 2
RANGE $2300-$2302 DB_DATA 2
RANGE $2302-$2304 DB_DATA 2
RANGE $2304-$2306 DB_DATA 2
RANGE $2306-$2308 DB_DATA 2
RANGE $2308-$230A DB_DATA 2
RANGE $230A-$230C DB_DATA 2
RANGE $230C-$230E DB_DATA 2
RANGE $230E-$2310 DB_DATA 2
RANGE $2310-$2312 DB_DATA 2
RANGE $2312-$2313 DB_DATA 1
RANGE $2313-$2315 DW_DATA 1
RANGE $2315-$2316 DB_DATA 1
RANGE $2316-$2317 DB_DATA 1
RANGE $2317-$2319 DW_DATA 1
RANGE $2319-$231A DB_DATA 1
RANGE $231A-$231B DB_DATA 1
RANGE $231B-$231D DW_DATA 1
RANGE $231D-$231F DB_DATA 2
RANGE $231F-$2321 DB_DATA 2
RANGE $2321-$2323 DB_DATA 2
RANGE $2323-$2325 DB_DATA 2
RANGE $2325-$2327 DB_DATA 2
RANGE $2327-$2329 DB_DATA 2
RANGE $2329-$232B DB_DATA 2
RANGE $232B-$232D DB_DATA 2
RANGE $232D-$232F DB_DATA 2
RANGE $232F-$2331 DB_DATA 2
RANGE $2331-$2333 DB_DATA 2
RANGE $2333-$2335 DB_DATA 2
RANGE $2335-$2336 DB_DATA 1
RANGE $2336-$2338 DW_DATA 1
RANGE $2338-$2339 DB_DATA 1
RANGE $2339-$233A DB_DATA 1
RANGE $233A-$233C DW_DATA 1
RANGE $233C-$233D DB_DATA 1
RANGE $233D-$233E DB_DATA 1
RANGE $233E-$2340 DW_DATA 1
RANGE $2340-$2342 DB_DATA 2
RANGE $2342-$2344 DB_DATA 2
RANGE $2344-$2346 DB_DATA 2
RANGE $2346-$2348 DB_DATA 2
RANGE $2348-$234A DB_DATA 2
RANGE $234A-$234C DB_DATA 2
RANGE $234C-$234D DB_DATA 1
RANGE $234D-$234F DW_DATA 1
RANGE $234F-$2350 DB_DATA 1
RANGE $2350-$2351 DB_DATA 1
RANGE $2351-$2353 DW_DATA 1
RANGE $2353-$2354 DB_DATA 1
RANGE $2354-$2355 DB_DATA 1
RANGE $2355-$2356 DB_DATA 1
RANGE $2356-$2358 DB_DATA 2
RANGE $2358-$235A DB_DATA 2
RANGE $235A-$235C DB_DATA 2
RANGE $235C-$235E DB_DATA 2
RANGE $235E-$2360 DB_DATA 2
RANGE $2360-$2362 DB_DATA 2
RANGE $2362-$2364 DB_DATA 2
RANGE $2364-$2366 DB_DATA 2
RANGE $2366-$2368 DB_DATA 2
RANGE $2368-$236A DB_DATA 2
RANGE $236A-$236B DB_DATA 1
RANGE $236B-$236D DW_DATA 1
RANGE $236D-$236E DB_DATA 1
RANGE $236E-$236F DB_DATA 1
RANGE $236F-$2371 DW_DATA 1
RANGE $2371-$2372 DB_DATA 1
RANGE $2372-$2373 DB_DATA 1
RANGE $2373-$2374 DB_DATA 1
RANGE $2374-$2375 DB_DATA 1
RANGE $2375-$2376 DB_DATA 1
RANGE $2376-$2378 DB_DATA 2
RANGE $2378-$237A DB_DATA 2
RANGE $237A-$237C DB_DATA 2
RANGE $237C-$237E DB_DATA 2
RANGE $237E-$2380 DB_DATA 2
RANGE $2380-$2382 DB_DATA 2
RANGE $2382-$2384 DB_DATA 2
RANGE $2384-$2386 DB_DATA 2
RANGE $2386-$2388 DB_DATA 2
RANGE $2388-$238A DB_DATA 2
RANGE $238A-$238B DB_DATA 1
RANGE $238B-$238D DW_DATA 1
RANGE $238D-$238E DB_DATA 1
RANGE $238E-$238F DB_DATA 1
RANGE $238F-$2391 DW_DATA 1
RANGE $2391-$2392 DB_DATA 1
RANGE $2392-$2393 DB_DATA 1
RANGE $2393-$2394 DB_DATA 1
RANGE $2394-$2395 DB_DATA 1
RANGE $2395-$2396 DB_DATA 1
RANGE $2396-$2398 DB_DATA 2
RANGE $2398-$239A DB_DATA 2
RANGE $239A-$239C DB_DATA 2
RANGE $239C-$239E DB_DATA 2
RANGE $239E-$23A0 DB_DATA 2
RANGE $23A0-$23A2 DB_DATA 2
RANGE $23A2-$23A4 DB_DATA 2
RANGE $23A4-$23A6 DB_DATA 2
RANGE $23A6-$23A8 DB_DATA 2
RANGE $23A8-$23AA DB_DATA 2
RANGE $23AA-$23AB DB_DATA 1
RANGE $23AB-$23AD DW_DATA 1
RANGE $23AD-$23AE DB_DATA 1
RANGE $23AE-$23AF DB_DATA 1
RANGE $23AF-$23B1 DW_DATA 1
RANGE $23B1-$23B2 DB_DATA 1
RANGE $23B2-$23B3 DB_DATA 1
RANGE $23B3-$23B4 DB_DATA 1
RANGE $23B4-$23B5 DB_DATA 1
RANGE $23B5-$23B6 DB_DATA 1
RANGE $23B6-$23B8 DW_DATA 1
RANGE $23B8-$23B9 DB_DATA 1
RANGE $23B9-$23BA DB_DATA 1
RANGE $23BA-$23BC DW_DATA 1
RANGE $23BC-$23BD DB_DATA 1
RANGE $23BD-$23BE DB_DATA 1
RANGE $23BE-$23BF DB_DATA 1
RANGE $23BF-$23C0 DB_DATA 1
RANGE $23C0-$23C2 DW_DATA 1
RANGE $23C2-$23C4 DB_DATA 2
RANGE $23C4-$23C6 DB_DATA 2
RANGE $23C6-$23C8 DB_DATA 2
RANGE $23C8-$23CA DB_DATA 2
RANGE $23CA-$23CC DB_DATA 2
RANGE $23CC-$23CE DB_DATA 2
RANGE $23CE-$23D0 DB_DATA 2
RANGE $23D0-$23D2 DB_DATA 2
RANGE $23D2-$23D4 DB_DATA 2
RANGE $23D4-$23D6 DB_DATA 2
RANGE $23D6-$23D8 DB_DATA 2
RANGE $23D8-$23DA DB_DATA 2
RANGE $23DA-$23DC DB_DATA 2
RANGE $23DC-$23DD DB_DATA 1
RANGE $23DD-$23DF DW_DATA 1
RANGE $23DF-$23E0 DB_DATA 1
RANGE $23E0-$23E1 DB_DATA 1
RANGE $23E1-$23E3 DW_DATA 1
RANGE $23E3-$23E4 DB_DATA 1
RANGE $23E4-$23E5 DB_DATA 1
RANGE $23E5-$23E6 DB_DATA 1
RANGE $23E6-$23E7 DB_DATA 1
RANGE $23E7-$23E9 DW_DATA 1
RANGE $23E9-$23EB DB_DATA 2
RANGE $23EB-$23ED DB_DATA 2
RANGE $23ED-$23EF DB_DATA 2
RANGE $23EF-$23F1 DB_DATA 2
RANGE $23F1-$23F3 DB_DATA 2
RANGE $23F3-$23F5 DB_DATA 2
RANGE $23F5-$23F7 DB_DATA 2
RANGE $23F7-$23F9 DB_DATA 2
RANGE $23F9-$23FB DB_DATA 2
RANGE $23FB-$23FD DB_DATA 2
RANGE $23FD-$23FF DB_DATA 2
RANGE $23FF-$2401 DB_DATA 2
RANGE $2401-$2403 DB_DATA 2
RANGE $2403-$2404 DB_DATA 1
RANGE $2404-$2406 DW_DATA 1
RANGE $2406-$2407 DB_DATA 1
RANGE $2407-$2408 DB_DATA 1
RANGE $2408-$240A DW_DATA 1
RANGE $240A-$240B DB_DATA 1
RANGE $240B-$240C DB_DATA 1
RANGE $240C-$240D DB_DATA 1
RANGE $240D-$240E DB_DATA 1
RANGE $240E-$2410 DW_DATA 1
RANGE $2410-$2412 DB_DATA 2
RANGE $2412-$2414 DB_DATA 2
RANGE $2414-$2416 DB_DATA 2
RANGE $2416-$2418 DB_DATA 2
RANGE $2418-$241A DB_DATA 2
RANGE $241A-$241C DB_DATA 2
RANGE $241C-$241E DB_DATA 2
RANGE $241E-$2420 DB_DATA 2
RANGE $2420-$2422 DB_DATA 2
RANGE $2422-$2424 DB_DATA 2
RANGE $2424-$2426 DB_DATA 2
RANGE $2426-$2428 DB_DATA 2
RANGE $2428-$2429 DB_DATA 1
RANGE $2429-$242B DW_DATA 1
RANGE $242B-$242C DB_DATA 1
RANGE $242C-$242D DB_DATA 1
RANGE $242D-$242F DW_DATA 1
RANGE $242F-$2430 DB_DATA 1
RANGE $2430-$2431 DB_DATA 1
RANGE $2431-$2432 DB_DATA 1
RANGE $2432-$2433 DB_DATA 1
RANGE $2433-$2434 DB_DATA 1
RANGE $2434-$2436 DW_DATA 1
RANGE $2436-$2437 DB_DATA 1
RANGE $2437-$2438 DB_DATA 1
RANGE $2438-$243A DW_DATA 1
RANGE $243A-$243B DB_DATA 1
RANGE $243B-$243C DB_DATA 1
RANGE $243C-$243D DB_DATA 1
RANGE $243D-$243E DB_DATA 1
RANGE $243E-$2440 DW_DATA 1
RANGE $2440-$2442 DB_DATA 2
RANGE $2442-$2444 DB_DATA 2
RANGE $2444-$2446 DB_DATA 2
RANGE $2446-$2448 DB_DATA 2
RANGE $2448-$244A DB_DATA 2
RANGE $244A-$244C DB_DATA 2
RANGE $244C-$244E DB_DATA 2
RANGE $244E-$2450 DB_DATA 2
RANGE $2450-$2452 DB_DATA 2
RANGE $2452-$2454 DB_DATA 2
RANGE $2454-$2456 DB_DATA 2
RANGE $2456-$2458 DB_DATA 2
RANGE $2458-$2459 DB_DATA 1
RANGE $2459-$245B DW_DATA 1
RANGE $245B-$245C DB_DATA 1
RANGE $245C-$245D DB_DATA 1
RANGE $245D-$245F DW_DATA 1
RANGE $245F-$2460 DB_DATA 1
RANGE $2460-$2461 DB_DATA 1
RANGE $2461-$2462 DB_DATA 1
RANGE $2462-$2463 DB_DATA 1
RANGE $2463-$2465 DW_DATA 1
RANGE $2465-$2467 DB_DATA 2
RANGE $2467-$2469 DB_DATA 2
RANGE $2469-$246B DB_DATA 2
RANGE $246B-$246D DB_DATA 2
RANGE $246D-$246F DB_DATA 2
RANGE $246F-$2471 DB_DATA 2
RANGE $2471-$2473 DB_DATA 2
RANGE $2473-$2475 DB_DATA 2
RANGE $2475-$2477 DB_DATA 2
RANGE $2477-$2479 DB_DATA 2
RANGE $2479-$247B DB_DATA 2
RANGE $247B-$247D DB_DATA 2
RANGE $247D-$247E DB_DATA 1
RANGE $247E-$2480 DW_DATA 1
RANGE $2480-$2481 DB_DATA 1
RANGE $2481-$2482 DB_DATA 1
RANGE $2482-$2484 DW_DATA 1
RANGE $2484-$2485 DB_DATA 1
RANGE $2485-$2486 DB_DATA 1
RANGE $2486-$2487 DB_DATA 1
RANGE $2487-$2488 DB_DATA 1
RANGE $2488-$248A DW_DATA 1
RANGE $248A-$248C DB_DATA 2
RANGE $248C-$248E DB_DATA 2
RANGE $248E-$2490 DB_DATA 2
RANGE $2490-$2492 DB_DATA 2
RANGE $2492-$2494 DB_DATA 2
RANGE $2494-$2496 DB_DATA 2
RANGE $2496-$2498 DB_DATA 2
RANGE $2498-$249A DB_DATA 2
RANGE $249A-$249C DB_DATA 2
RANGE $249C-$249E DB_DATA 2
RANGE $249E-$24A0 DB_DATA 2
RANGE $24A0-$24A2 DB_DATA 2
RANGE $24A2-$24A3 DB_DATA 1
RANGE $24A3-$24A5 DW_DATA 1
RANGE $24A5-$24A6 DB_DATA 1
RANGE $24A6-$24A7 DB_DATA 1
RANGE $24A7-$24A9 DW_DATA 1
RANGE $24A9-$24AA DB_DATA 1
RANGE $24AA-$24AB DB_DATA 1
RANGE $24AB-$24AC DB_DATA 1
RANGE $24AC-$24AD DB_DATA 1
RANGE $24AD-$24AF DW_DATA 1
RANGE $24AF-$24B1 DB_DATA 2
RANGE $24B1-$24B3 DB_DATA 2
RANGE $24B3-$24B5 DB_DATA 2
RANGE $24B5-$24B7 DB_DATA 2
RANGE $24B7-$24B9 DB_DATA 2
RANGE $24B9-$24BB DB_DATA 2
RANGE $24BB-$24BD DB_DATA 2
RANGE $24BD-$24BF DB_DATA 2
RANGE $24BF-$24C1 DB_DATA 2
RANGE $24C1-$24C3 DB_DATA 2
RANGE $24C3-$24C5 DB_DATA 2
RANGE $24C5-$24C7 DB_DATA 2
RANGE $24C7-$24C8 DB_DATA 1
RANGE $24C8-$24CA DW_DATA 1
RANGE $24CA-$24CB DB_DATA 1
RANGE $24CB-$24CC DB_DATA 1
RANGE $24CC-$24CE DW_DATA 1
RANGE $24CE-$24CF DB_DATA 1
RANGE $24CF-$24D0 DB_DATA 1
RANGE $24D0-$24D1 DB_DATA 1
RANGE $24D1-$24D2 DB_DATA 1
RANGE $24D2-$24D4 DW_DATA 1
RANGE $24D4-$24D6 DB_DATA 2
RANGE $24D6-$24D8 DB_DATA 2
RANGE $24D8-$24DA DB_DATA 2
RANGE $24DA-$24DC DB_DATA 2
RANGE $24DC-$24DE DB_DATA 2
RANGE $24DE-$24E0 DB_DATA 2
RANGE $24E0-$24E2 DB_DATA 2
RANGE $24E2-$24E4 DB_DATA 2
RANGE $24E4-$24E6 DB_DATA 2
RANGE $24E6-$24E8 DB_DATA 2
RANGE $24E8-$24EA DB_DATA 2
RANGE $24EA-$24EB DB_DATA 1
RANGE $24EB-$24ED DW_DATA 1
RANGE $24ED-$24EE DB_DATA 1
RANGE $24EE-$24EF DB_DATA 1
RANGE $24EF-$24F1 DW_DATA 1
RANGE $24F1-$24F2 DB_DATA 1
RANGE $24F2-$24F3 DB_DATA 1
RANGE $24F3-$24F4 DB_DATA 1
RANGE $24F4-$24F5 DB_DATA 1
RANGE $24F5-$24F7 DW_DATA 1
RANGE $24F7-$24F9 DB_DATA 2
RANGE $24F9-$24FB DB_DATA 2
RANGE $24FB-$24FD DB_DATA 2
RANGE $24FD-$24FF DB_DATA 2
RANGE $24FF-$2501 DB_DATA 2
RANGE $2501-$2503 DB_DATA 2
RANGE $2503-$2505 DB_DATA 2
RANGE $2505-$2507 DB_DATA 2
RANGE $2507-$2509 DB_DATA 2
RANGE $2509-$250B DB_DATA 2
RANGE $250B-$250D DB_DATA 2
RANGE $250D-$250E DB_DATA 1
RANGE $250E-$2510 DW_DATA 1
RANGE $2510-$2511 DB_DATA 1
RANGE $2511-$2512 DB_DATA 1
RANGE $2512-$2514 DW_DATA 1
RANGE $2514-$2515 DB_DATA 1
RANGE $2515-$2516 DB_DATA 1
RANGE $2516-$2517 DB_DATA 1
RANGE $2517-$2518 DB_DATA 1
RANGE $2518-$251A DW_DATA 1
RANGE $251A-$251C DB_DATA 2
RANGE $251C-$251E DB_DATA 2
RANGE $251E-$2520 DB_DATA 2
RANGE $2520-$2522 DB_DATA 2
RANGE $2522-$2524 DB_DATA 2
RANGE $2524-$2526 DB_DATA 2
RANGE $2526-$2528 DB_DATA 2
RANGE $2528-$252A DB_DATA 2
RANGE $252A-$252C DB_DATA 2
RANGE $252C-$252E DB_DATA 2
RANGE $252E-$2530 DB_DATA 2
RANGE $2530-$2531 DB_DATA 1
RANGE $2531-$2533 DW_DATA 1
RANGE $2533-$2534 DB_DATA 1
RANGE $2534-$2535 DB_DATA 1
RANGE $2535-$2537 DW_DATA 1
RANGE $2537-$2538 DB_DATA 1
RANGE $2538-$2539 DB_DATA 1
RANGE $2539-$253A DB_DATA 1
RANGE $253A-$253B DB_DATA 1
RANGE $253B-$253C DB_DATA 1
RANGE $253C-$253E DW_DATA 1
RANGE $253E-$253F DB_DATA 1
RANGE $253F-$2540 DB_DATA 1
RANGE $2540-$2542 DW_DATA 1
RANGE $2542-$2543 DB_DATA 1
RANGE $2543-$2544 DB_DATA 1
RANGE $2544-$2545 DB_DATA 1
RANGE $2545-$2546 DB_DATA 1
RANGE $2546-$2547 DB_DATA 1
RANGE $2547-$2549 DW_DATA 1
RANGE $2549-$254A DB_DATA 1
RANGE $254A-$254B DB_DATA 1
RANGE $254B-$254D DW_DATA 1
RANGE $254D-$254E DB_DATA 1
RANGE $254E-$254F DB_DATA 1
RANGE $254F-$2550 DB_DATA 1
RANGE $2550-$2551 DB_DATA 1
RANGE $2551-$2552 DB_DATA 1
RANGE $2552-$2554 DW_DATA 1
RANGE $2554-$2555 DB_DATA 1
RANGE $2555-$2556 DB_DATA 1
RANGE $2556-$2558 DW_DATA 1
RANGE $2558-$2559 DB_DATA 1
RANGE $2559-$255A DB_DATA 1
RANGE $255A-$255B DB_DATA 1
RANGE $255B-$255C DB_DATA 1
RANGE $255C-$255D DB_DATA 1
RANGE $255D-$255F DW_DATA 1
RANGE $255F-$2560 DB_DATA 1
RANGE $2560-$2561 DB_DATA 1
RANGE $2561-$2563 DW_DATA 1
RANGE $2563-$2564 DB_DATA 1
RANGE $2564-$2565 DB_DATA 1
RANGE $2565-$2566 DB_DATA 1
RANGE $2566-$2567 DB_DATA 1
RANGE $2567-$2568 DB_DATA 1
RANGE $2568-$256A DW_DATA 1
RANGE $256A-$256B DB_DATA 1
RANGE $256B-$256C DB_DATA 1
RANGE $256C-$256E DW_DATA 1
RANGE $256E-$256F DB_DATA 1
RANGE $256F-$2570 DB_DATA 1
RANGE $2570-$2571 DB_DATA 1
RANGE $2571-$2572 DB_DATA 1
RANGE $2572-$2574 DW_DATA 1
RANGE $2574-$2576 DB_DATA 2
RANGE $2576-$2578 DB_DATA 2
RANGE $2578-$257A DB_DATA 2
RANGE $257A-$257C DB_DATA 2
RANGE $257C-$257E DB_DATA 2
RANGE $257E-$2580 DB_DATA 2
RANGE $2580-$2582 DB_DATA 2
RANGE $2582-$2584 DB_DATA 2
RANGE $2584-$2586 DB_DATA 2
RANGE $2586-$2588 DB_DATA 2
RANGE $2588-$258A DB_DATA 2
RANGE $258A-$258B DB_DATA 1
RANGE $258B-$258D DW_DATA 1
RANGE $258D-$258E DB_DATA 1
RANGE $258E-$258F DB_DATA 1
RANGE $258F-$2591 DW_DATA 1
RANGE $2591-$2592 DB_DATA 1
RANGE $2592-$2593 DB_DATA 1
RANGE $2593-$2594 DB_DATA 1
RANGE $2594-$2595 DB_DATA 1
RANGE $2595-$2597 DW_DATA 1
RANGE $2597-$2599 DB_DATA 2
RANGE $2599-$259B DB_DATA 2
RANGE $259B-$259D DB_DATA 2
RANGE $259D-$259F DB_DATA 2
RANGE $259F-$25A1 DB_DATA 2
RANGE $25A1-$25A3 DB_DATA 2
RANGE $25A3-$25A5 DB_DATA 2
RANGE $25A5-$25A7 DB_DATA 2
RANGE $25A7-$25A9 DB_DATA 2
RANGE $25A9-$25AB DB_DATA 2
RANGE $25AB-$25AD DB_DATA 2
RANGE $25AD-$25AE DB_DATA 1
RANGE $25AE-$25B0 DW_DATA 1
RANGE $25B0-$25B1 DB_DATA 1
RANGE $25B1-$25B2 DB_DATA 1
RANGE $25B2-$25B4 DW_DATA 1
RANGE $25B4-$25B5 DB_DATA 1
RANGE $25B5-$25B6 DB_DATA 1
RANGE $25B6-$25B7 DB_DATA 1
RANGE $25B7-$25B8 DB_DATA 1
RANGE $25B8-$25BA DW_DATA 1
RANGE $25BA-$25BC DB_DATA 2
RANGE $25BC-$25BE DB_DATA 2
RANGE $25BE-$25C0 DB_DATA 2
RANGE $25C0-$25C2 DB_DATA 2
RANGE $25C2-$25C4 DB_DATA 2
RANGE $25C4-$25C6 DB_DATA 2
RANGE $25C6-$25C8 DB_DATA 2
RANGE $25C8-$25CA DB_DATA 2
RANGE $25CA-$25CC DB_DATA 2
RANGE $25CC-$25CE DB_DATA 2
RANGE $25CE-$25D0 DB_DATA 2
RANGE $25D0-$25D1 DB_DATA 1
RANGE $25D1-$25D3 DW_DATA 1
RANGE $25D3-$25D4 DB_DATA 1
RANGE $25D4-$25D5 DB_DATA 1
RANGE $25D5-$25D7 DW_DATA 1
RANGE $25D7-$25D8 DB_DATA 1
RANGE $25D8-$25D9 DB_DATA 1
RANGE $25D9-$25DA DB_DATA 1
RANGE $25DA-$25DB DB_DATA 1
RANGE $25DB-$25DC DB_DATA 1
RANGE $25DC-$25DE DW_DATA 1
RANGE $25DE-$25DF DB_DATA 1
RANGE $25DF-$25E0 DB_DATA 1
RANGE $25E0-$25E2 DW_DATA 1
RANGE $25E2-$25E3 DB_DATA 1
RANGE $25E3-$25E4 DB_DATA 1
RANGE $25E4-$25E5 DB_DATA 1
RANGE $25E5-$25E6 DB_DATA 1
RANGE $25E6-$25E7 DB_DATA 1
RANGE $25E7-$25E9 DW_DATA 1
RANGE $25E9-$25EA DB_DATA 1
RANGE $25EA-$25EB DB_DATA 1
RANGE $25EB-$25ED DW_DATA 1
RANGE $25ED-$25EE DB_DATA 1
RANGE $25EE-$25EF DB_DATA 1
RANGE $25EF-$25F0 DB_DATA 1
RANGE $25F0-$25F1 DB_DATA 1
RANGE $25F1-$25F2 DB_DATA 1
RANGE $25F2-$25F4 DW_DATA 1
RANGE $25F4-$25F5 DB_DATA 1
RANGE $25F5-$25F6 DB_DATA 1
RANGE $25F6-$25F8 DW_DATA 1
RANGE $25F8-$25F9 DB_DATA 1
RANGE $25F9-$25FA DB_DATA 1
RANGE $25FA-$25FB DB_DATA 1
RANGE $25FB-$25FC DB_DATA 1
RANGE $25FC-$25FD DB_DATA 1
RANGE $25FD-$25FF DW_DATA 1
RANGE $25FF-$2600 DB_DATA 1
RANGE $2600-$2601 DB_DATA 1
RANGE $2601-$2603 DW_DATA 1
RANGE $2603-$2604 DB_DATA 1
RANGE $2604-$2605 DB_DATA 1
RANGE $2605-$2606 DB_DATA 1
RANGE $2606-$2607 DB_DATA 1
RANGE $2607-$2608 DB_DATA 1
RANGE $2608-$260A DW_DATA 1
RANGE $260A-$260B DB_DATA 1
RANGE $260B-$260C DB_DATA 1
RANGE $260C-$260E DW_DATA 1
RANGE $260E-$260F DB_DATA 1
RANGE $260F-$2610 DB_DATA 1
RANGE $2610-$2611 DB_DATA 1
RANGE $2611-$2612 DB_DATA 1
RANGE $2612-$2614 DW_DATA 1
RANGE $2614-$2616 DB_DATA 2
RANGE $2616-$2618 DB_DATA 2
RANGE $2618-$261A DB_DATA 2
RANGE $261A-$261C DB_DATA 2
RANGE $261C-$261E DB_DATA 2
RANGE $261E-$2620 DB_DATA 2
RANGE $2620-$2622 DB_DATA 2
RANGE $2622-$2624 DB_DATA 2
RANGE $2624-$2626 DB_DATA 2
RANGE $2626-$2628 DB_DATA 2
RANGE $2628-$262A DB_DATA 2
RANGE $262A-$262C DB_DATA 2
RANGE $262C-$262E DB_DATA 2
RANGE $262E-$2630 DB_DATA 2
RANGE $2630-$2632 DB_DATA 2
RANGE $2632-$2634 DB_DATA 2
RANGE $2634-$2636 DB_DATA 2
RANGE $2636-$2638 DB_DATA 2
RANGE $2638-$2639 DB_DATA 1
RANGE $2639-$263B DW_DATA 1
RANGE $263B-$263C DB_DATA 1
RANGE $263C-$263D DB_DATA 1
RANGE $263D-$263F DW_DATA 1
RANGE $263F-$2640 DB_DATA 1
RANGE $2640-$2641 DB_DATA 1
RANGE $2641-$2642 DB_DATA 1
RANGE $2642-$2643 DB_DATA 1
RANGE $2643-$2645 DW_DATA 1
RANGE $2645-$2647 DB_DATA 2
RANGE $2647-$2649 DB_DATA 2
RANGE $2649-$264B DB_DATA 2
RANGE $264B-$264D DB_DATA 2
RANGE $264D-$264F DB_DATA 2
RANGE $264F-$2651 DB_DATA 2
RANGE $2651-$2653 DB_DATA 2
RANGE $2653-$2655 DB_DATA 2
RANGE $2655-$2657 DB_DATA 2
RANGE $2657-$2659 DB_DATA 2
RANGE $2659-$265B DB_DATA 2
RANGE $265B-$265D DB_DATA 2
RANGE $265D-$265F DB_DATA 2
RANGE $265F-$2661 DB_DATA 2
RANGE $2661-$2663 DB_DATA 2
RANGE $2663-$2665 DB_DATA 2
RANGE $2665-$2667 DB_DATA 2
RANGE $2667-$2669 DB_DATA 2
RANGE $2669-$266A DB_DATA 1
RANGE $266A-$266C DW_DATA 1
RANGE $266C-$266D DB_DATA 1
RANGE $266D-$266E DB_DATA 1
RANGE $266E-$2670 DW_DATA 1
RANGE $2670-$2671 DB_DATA 1
RANGE $2671-$2672 DB_DATA 1
RANGE $2672-$2673 DB_DATA 1
RANGE $2673-$2674 DB_DATA 1
RANGE $2674-$2676 DW_DATA 1
RANGE $2676-$2678 DB_DATA 2
RANGE $2678-$267A DB_DATA 2
RANGE $267A-$267C DB_DATA 2
RANGE $267C-$267E DB_DATA 2
RANGE $267E-$2680 DB_DATA 2
RANGE $2680-$2682 DB_DATA 2
RANGE $2682-$2684 DB_DATA 2
RANGE $2684-$2686 DB_DATA 2
RANGE $2686-$2688 DB_DATA 2
RANGE $2688-$268A DB_DATA 2
RANGE $268A-$268C DB_DATA 2
RANGE $268C-$268E DB_DATA 2
RANGE $268E-$2690 DB_DATA 2
RANGE $2690-$2692 DB_DATA 2
RANGE $2692-$2694 DB_DATA 2
RANGE $2694-$2696 DB_DATA 2
RANGE $2696-$2698 DB_DATA 2
RANGE $2698-$269A DB_DATA 2
RANGE $269A-$269B DB_DATA 1
RANGE $269B-$269D DW_DATA 1
RANGE $269D-$269E DB_DATA 1
RANGE $269E-$269F DB_DATA 1
RANGE $269F-$26A1 DW_DATA 1
RANGE $26A1-$26A2 DB_DATA 1
RANGE $26A2-$26A3 DB_DATA 1
RANGE $26A3-$26A4 DB_DATA 1
RANGE $26A4-$26A5 DB_DATA 1
RANGE $26A5-$26A6 DB_DATA 1
RANGE $26A6-$26A8 DW_DATA 1
RANGE $26A8-$26A9 DB_DATA 1
RANGE $26A9-$26AA DB_DATA 1
RANGE $26AA-$26AC DW_DATA 1
RANGE $26AC-$26AD DB_DATA 1
RANGE $26AD-$26AE DB_DATA 1
RANGE $26AE-$26AF DB_DATA 1
RANGE $26AF-$26B0 DB_DATA 1
RANGE $26B0-$26B1 DB_DATA 1
RANGE $26B1-$26B3 DW_DATA 1
RANGE $26B3-$26B4 DB_DATA 1
RANGE $26B4-$26B5 DB_DATA 1
RANGE $26B5-$26B7 DW_DATA 1
RANGE $26B7-$26B8 DB_DATA 1
RANGE $26B8-$26B9 DB_DATA 1
RANGE $26B9-$26BA DB_DATA 1
RANGE $26BA-$26BB DB_DATA 1
RANGE $26BB-$26BC DB_DATA 1
RANGE $26BC-$26BE DW_DATA 1
RANGE $26BE-$26BF DB_DATA 1
RANGE $26BF-$26C0 DB_DATA 1
RANGE $26C0-$26C2 DW_DATA 1
RANGE $26C2-$26C3 DB_DATA 1
RANGE $26C3-$26C4 DB_DATA 1
RANGE $26C4-$26C5 DB_DATA 1
RANGE $26C5-$26C6 DB_DATA 1
RANGE $26C6-$26C7 DB_DATA 1
RANGE $26C7-$26C9 DW_DATA 1
RANGE $26C9-$26CA DB_DATA 1
RANGE $26CA-$26CB DB_DATA 1
RANGE $26CB-$26CD DW_DATA 1
RANGE $26CD-$26CE DB_DATA 1
RANGE $26CE-$26CF DB_DATA 1
RANGE $26CF-$26D0 DB_DATA 1
RANGE $26D0-$26D1 DB_DATA 1
RANGE $26D1-$26D2 DB_DATA 1
RANGE $26D2-$26D4 DW_DATA 1
RANGE $26D4-$26D5 DB_DATA 1
RANGE $26D5-$26D6 DB_DATA 1
RANGE $26D6-$26D8 DW_DATA 1
RANGE $26D8-$26D9 DB_DATA 1
RANGE $26D9-$26DA DB_DATA 1
RANGE $26DA-$26DB DB_DATA 1
RANGE $26DB-$26DC DB_DATA 1
RANGE $26DC-$26DE DW_DATA 1
RANGE $26DE-$26E0 DB_DATA 2
RANGE $26E0-$26E2 DB_DATA 2
RANGE $26E2-$26E4 DB_DATA 2
RANGE $26E4-$26E6 DB_DATA 2
RANGE $26E6-$26E8 DB_DATA 2
RANGE $26E8-$26EA DB_DATA 2
RANGE $26EA-$26EC DB_DATA 2
RANGE $26EC-$26EE DB_DATA 2
RANGE $26EE-$26F0 DB_DATA 2
RANGE $26F0-$26F2 DB_DATA 2
RANGE $26F2-$26F4 DB_DATA 2
RANGE $26F4-$26F6 DB_DATA 2
RANGE $26F6-$26F8 DB_DATA 2
RANGE $26F8-$26FA DB_DATA 2
RANGE $26FA-$26FC DB_DATA 2
RANGE $26FC-$26FE DB_DATA 2
RANGE $26FE-$2700 DB_DATA 2
RANGE $2700-$2702 DB_DATA 2
RANGE $2702-$2704 DB_DATA 2
RANGE $2704-$2706 DB_DATA 2
RANGE $2706-$2708 DB_DATA 2
RANGE $2708-$270A DB_DATA 2
RANGE $270A-$270C DB_DATA 2
RANGE $270C-$270D DB_DATA 1
RANGE $270D-$270F DW_DATA 1
RANGE $270F-$2710 DB_DATA 1
RANGE $2710-$2711 DB_DATA 1
RANGE $2711-$2713 DW_DATA 1
RANGE $2713-$2714 DB_DATA 1
RANGE $2714-$2715 DB_DATA 1
RANGE $2715-$2716 DB_DATA 1
RANGE $2716-$2717 DB_DATA 1
RANGE $2717-$2719 DW_DATA 1
RANGE $2719-$271B DB_DATA 2
RANGE $271B-$271D DB_DATA 2
RANGE $271D-$271F DB_DATA 2
RANGE $271F-$2721 DB_DATA 2
RANGE $2721-$2723 DB_DATA 2
RANGE $2723-$2725 DB_DATA 2
RANGE $2725-$2727 DB_DATA 2
RANGE $2727-$2729 DB_DATA 2
RANGE $2729-$272B DB_DATA 2
RANGE $272B-$272D DB_DATA 2
RANGE $272D-$272F DB_DATA 2
RANGE $272F-$2731 DB_DATA 2
RANGE $2731-$2733 DB_DATA 2
RANGE $2733-$2735 DB_DATA 2
RANGE $2735-$2737 DB_DATA 2
RANGE $2737-$2739 DB_DATA 2
RANGE $2739-$273B DB_DATA 2
RANGE $273B-$273D DB_DATA 2
RANGE $273D-$273F DB_DATA 2
RANGE $273F-$2741 DB_DATA 2
RANGE $2741-$2743 DB_DATA 2
RANGE $2743-$2745 DB_DATA 2
RANGE $2745-$2747 DB_DATA 2
RANGE $2747-$2748 DB_DATA 1
RANGE $2748-$274A DW_DATA 1
RANGE $274A-$274B DB_DATA 1
RANGE $274B-$274C DB_DATA 1
RANGE $274C-$274E DW_DATA 1
RANGE $274E-$274F DB_DATA 1
RANGE $274F-$2750 DB_DATA 1
RANGE $2750-$2751 DB_DATA 1
RANGE $2751-$2752 DB_DATA 1
RANGE $2752-$2754 DW_DATA 1
RANGE $2754-$2756 DB_DATA 2
RANGE $2756-$2758 DB_DATA 2
RANGE $2758-$275A DB_DATA 2
RANGE $275A-$275C DB_DATA 2
RANGE $275C-$275E DB_DATA 2
RANGE $275E-$2760 DB_DATA 2
RANGE $2760-$2762 DB_DATA 2
RANGE $2762-$2764 DB_DATA 2
RANGE $2764-$2766 DB_DATA 2
RANGE $2766-$2768 DB_DATA 2
RANGE $2768-$276A DB_DATA 2
RANGE $276A-$276C DB_DATA 2
RANGE $276C-$276E DB_DATA 2
RANGE $276E-$2770 DB_DATA 2
RANGE $2770-$2772 DB_DATA 2
RANGE $2772-$2774 DB_DATA 2
RANGE $2774-$2776 DB_DATA 2
RANGE $2776-$2778 DB_DATA 2
RANGE $2778-$277A DB_DATA 2
RANGE $277A-$277C DB_DATA 2
RANGE $277C-$277E DB_DATA 2
RANGE $277E-$2780 DB_DATA 2
RANGE $2780-$2782 DB_DATA 2
RANGE $2782-$2783 DB_DATA 1
RANGE $2783-$2785 DW_DATA 1
RANGE $2785-$2786 DB_DATA 1
RANGE $2786-$2787 DB_DATA 1
RANGE $2787-$2789 DW_DATA 1
RANGE $2789-$278A DB_DATA 1
RANGE $278A-$278B DB_DATA 1
RANGE $278B-$278C DB_DATA 1
RANGE $278C-$278D DB_DATA 1
RANGE $278D-$278F DW_DATA 1
RANGE $278F-$2791 DB_DATA 2
RANGE $2791-$2793 DB_DATA 2
RANGE $2793-$2795 DB_DATA 2
RANGE $2795-$2797 DB_DATA 2
RANGE $2797-$2799 DB_DATA 2
RANGE $2799-$279B DB_DATA 2
RANGE $279B-$279D DB_DATA 2
RANGE $279D-$279F DB_DATA 2
RANGE $279F-$27A1 DB_DATA 2
RANGE $27A1-$27A3 DB_DATA 2
RANGE $27A3-$27A5 DB_DATA 2
RANGE $27A5-$27A7 DB_DATA 2
RANGE $27A7-$27A9 DB_DATA 2
RANGE $27A9-$27AB DB_DATA 2
RANGE $27AB-$27AD DB_DATA 2
RANGE $27AD-$27AF DB_DATA 2
RANGE $27AF-$27B1 DB_DATA 2
RANGE $27B1-$27B3 DB_DATA 2
RANGE $27B3-$27B5 DB_DATA 2
RANGE $27B5-$27B7 DB_DATA 2
RANGE $27B7-$27B9 DB_DATA 2
RANGE $27B9-$27BB DB_DATA 2
RANGE $27BB-$27BD DB_DATA 2
RANGE $27BD-$27BE DB_DATA 1
RANGE $27BE-$27C0 DW_DATA 1
RANGE $27C0-$27C1 DB_DATA 1
RANGE $27C1-$27C2 DB_DATA 1
RANGE $27C2-$27C4 DW_DATA 1
RANGE $27C4-$27C5 DB_DATA 1
RANGE $27C5-$27C6 DB_DATA 1
RANGE $27C6-$27C7 DB_DATA 1
RANGE $27C7-$27C8 DB_DATA 1
RANGE $27C8-$27CA DW_DATA 1
RANGE $27CA-$27CC DB_DATA 2
RANGE $27CC-$27CE DB_DATA 2
RANGE $27CE-$27D0 DB_DATA 2
RANGE $27D0-$27D2 DB_DATA 2
RANGE $27D2-$27D4 DB_DATA 2
RANGE $27D4-$27D6 DB_DATA 2
RANGE $27D6-$27D8 DB_DATA 2
RANGE $27D8-$27DA DB_DATA 2
RANGE $27DA-$27DC DB_DATA 2
RANGE $27DC-$27DE DB_DATA 2
RANGE $27DE-$27E0 DB_DATA 2
RANGE $27E0-$27E2 DB_DATA 2
RANGE $27E2-$27E4 DB_DATA 2
RANGE $27E4-$27E6 DB_DATA 2
RANGE $27E6-$27E8 DB_DATA 2
RANGE $27E8-$27EA DB_DATA 2
RANGE $27EA-$27EC DB_DATA 2
RANGE $27EC-$27EE DB_DATA 2
RANGE $27EE-$27F0 DB_DATA 2
RANGE $27F0-$27F2 DB_DATA 2
RANGE $27F2-$27F3 DB_DATA 1
RANGE $27F3-$27F5 DW_DATA 1
RANGE $27F5-$27F6 DB_DATA 1
RANGE $27F6-$27F7 DB_DATA 1
RANGE $27F7-$27F9 DW_DATA 1
RANGE $27F9-$27FA DB_DATA 1
RANGE $27FA-$27FB DB_DATA 1
RANGE $27FB-$27FC DB_DATA 1
RANGE $27FC-$27FD DB_DATA 1
RANGE $27FD-$27FF DW_DATA 1
RANGE $27FF-$2801 DB_DATA 2
RANGE $2801-$2803 DB_DATA 2
RANGE $2803-$2805 DB_DATA 2
RANGE $2805-$2807 DB_DATA 2
RANGE $2807-$2809 DB_DATA 2
RANGE $2809-$280B DB_DATA 2
RANGE $280B-$280D DB_DATA 2
RANGE $280D-$280F DB_DATA 2
RANGE $280F-$2811 DB_DATA 2
RANGE $2811-$2813 DB_DATA 2
RANGE $2813-$2815 DB_DATA 2
RANGE $2815-$2817 DB_DATA 2
RANGE $2817-$2819 DB_DATA 2
RANGE $2819-$281B DB_DATA 2
RANGE $281B-$281D DB_DATA 2
RANGE $281D-$281F DB_DATA 2
RANGE $281F-$2821 DB_DATA 2
RANGE $2821-$2823 DB_DATA 2
RANGE $2823-$2825 DB_DATA 2
RANGE $2825-$2827 DB_DATA 2
RANGE $2827-$2828 DB_DATA 1
RANGE $2828-$282A DW_DATA 1
RANGE $282A-$282B DB_DATA 1
RANGE $282B-$282C DB_DATA 1
RANGE $282C-$282E DW_DATA 1
RANGE $282E-$282F DB_DATA 1
RANGE $282F-$2830 DB_DATA 1
RANGE $2830-$2831 DB_DATA 1
RANGE $2831-$2832 DB_DATA 1
RANGE $2832-$2834 DW_DATA 1
RANGE $2834-$2836 DB_DATA 2
RANGE $2836-$2838 DB_DATA 2
RANGE $2838-$283A DB_DATA 2
RANGE $283A-$283C DB_DATA 2
RANGE $283C-$283E DB_DATA 2
RANGE $283E-$2840 DB_DATA 2
RANGE $2840-$2842 DB_DATA 2
RANGE $2842-$2844 DB_DATA 2
RANGE $2844-$2846 DB_DATA 2
RANGE $2846-$2848 DB_DATA 2
RANGE $2848-$284A DB_DATA 2
RANGE $284A-$284C DB_DATA 2
RANGE $284C-$284E DB_DATA 2
RANGE $284E-$2850 DB_DATA 2
RANGE $2850-$2852 DB_DATA 2
RANGE $2852-$2854 DB_DATA 2
RANGE $2854-$2856 DB_DATA 2
RANGE $2856-$2858 DB_DATA 2
RANGE $2858-$285A DB_DATA 2
RANGE $285A-$285C DB_DATA 2
RANGE $285C-$285D DB_DATA 1
RANGE $285D-$285F DW_DATA 1
RANGE $285F-$2860 DB_DATA 1
RANGE $2860-$2861 DB_DATA 1
RANGE $2861-$2863 DW_DATA 1
RANGE $2863-$2864 DB_DATA 1
RANGE $2864-$2865 DB_DATA 1
RANGE $2865-$2866 DB_DATA 1
RANGE $2866-$2867 DB_DATA 1
RANGE $2867-$2868 DB_DATA 1
RANGE $2868-$286A DW_DATA 1
RANGE $286A-$286B DB_DATA 1
RANGE $286B-$286C DB_DATA 1
RANGE $286C-$286E DW_DATA 1
RANGE $286E-$286F DB_DATA 1
RANGE $286F-$2870 DB_DATA 1
RANGE $2870-$2871 DB_DATA 1
RANGE $2871-$2872 DB_DATA 1
RANGE $2872-$2873 DB_DATA 1
RANGE $2873-$2875 DW_DATA 1
RANGE $2875-$2876 DB_DATA 1
RANGE $2876-$2877 DB_DATA 1
RANGE $2877-$2879 DW_DATA 1
RANGE $2879-$287A DB_DATA 1
RANGE $287A-$287B DB_DATA 1
RANGE $287B-$287C DB_DATA 1
RANGE $287C-$287D DB_DATA 1
RANGE $287D-$287E DB_DATA 1
RANGE $287E-$2880 DW_DATA 1
RANGE $2880-$2881 DB_DATA 1
RANGE $2881-$2882 DB_DATA 1
RANGE $2882-$2884 DW_DATA 1
RANGE $2884-$2885 DB_DATA 1
RANGE $2885-$2886 DB_DATA 1
RANGE $2886-$2887 DB_DATA 1
RANGE $2887-$2888 DB_DATA 1
RANGE $2888-$2889 DB_DATA 1
RANGE $2889-$288B DW_DATA 1
RANGE $288B-$288C DB_DATA 1
RANGE $288C-$288D DB_DATA 1
RANGE $288D-$288F DW_DATA 1
RANGE $288F-$2890 DB_DATA 1
RANGE $2890-$2891 DB_DATA 1
RANGE $2891-$2892 DB_DATA 1
RANGE $2892-$2893 DB_DATA 1
RANGE $2893-$2894 DB_DATA 1
RANGE $2894-$2896 DW_DATA 1
RANGE $2896-$2897 DB_DATA 1
RANGE $2897-$2898 DB_DATA 1
RANGE $2898-$289A DW_DATA 1
RANGE $289A-$289B DB_DATA 1
RANGE $289B-$289C DB_DATA 1
RANGE $289C-$289D DB_DATA 1
RANGE $289D-$289E DB_DATA 1
RANGE $289E-$289F DB_DATA 1
RANGE $289F-$28A1 DW_DATA 1
RANGE $28A1-$28A2 DB_DATA 1
RANGE $28A2-$28A3 DB_DATA 1
RANGE $28A3-$28A5 DW_DATA 1
RANGE $28A5-$28A6 DB_DATA 1
RANGE $28A6-$28A7 DB_DATA 1
RANGE $28A7-$28A8 DB_DATA 1
RANGE $28A8-$28A9 DB_DATA 1
RANGE $28A9-$28AA DB_DATA 1
RANGE $28AA-$28AC DW_DATA 1
RANGE $28AC-$28AD DB_DATA 1
RANGE $28AD-$28AE DB_DATA 1
RANGE $28AE-$28B0 DW_DATA 1
RANGE $28B0-$28B1 DB_DATA 1
RANGE $28B1-$28B2 DB_DATA 1
RANGE $28B2-$28B3 DB_DATA 1
RANGE $28B3-$28B4 DB_DATA 1
RANGE $28B4-$28B5 DB_DATA 1
RANGE $28B5-$28B7 DW_DATA 1
RANGE $28B7-$28B8 DB_DATA 1
RANGE $28B8-$28B9 DB_DATA 1
RANGE $28B9-$28BB DW_DATA 1
RANGE $28BB-$28BC DB_DATA 1
RANGE $28BC-$28BD DB_DATA 1
RANGE $28BD-$28BE DB_DATA 1
RANGE $28BE-$28BF DB_DATA 1
RANGE $28BF-$28C0 DB_DATA 1
RANGE $28C0-$28C2 DW_DATA 1
RANGE $28C2-$28C3 DB_DATA 1
RANGE $28C3-$28C4 DB_DATA 1
RANGE $28C4-$28C6 DW_DATA 1
RANGE $28C6-$28C7 DB_DATA 1
RANGE $28C7-$28C8 DB_DATA 1
RANGE $28C8-$28C9 DB_DATA 1
RANGE $28C9-$28CA DB_DATA 1
RANGE $28CA-$28CC DW_DATA 1
RANGE $28CC-$28CE DB_DATA 2
RANGE $28CE-$28D0 DB_DATA 2
RANGE $28D0-$28D2 DB_DATA 2
RANGE $28D2-$28D4 DB_DATA 2
RANGE $28D4-$28D6 DB_DATA 2
RANGE $28D6-$28D8 DB_DATA 2
RANGE $28D8-$28DA DB_DATA 2
RANGE $28DA-$28DC DB_DATA 2
RANGE $28DC-$28DE DB_DATA 2
RANGE $28DE-$28E0 DB_DATA 2
RANGE $28E0-$28E2 DB_DATA 2
RANGE $28E2-$28E4 DB_DATA 2
RANGE $28E4-$28E5 DB_DATA 1
RANGE $28E5-$28E7 DW_DATA 1
RANGE $28E7-$28E8 DB_DATA 1
RANGE $28E8-$28E9 DB_DATA 1
RANGE $28E9-$28EB DW_DATA 1
RANGE $28EB-$28EC DB_DATA 1
RANGE $28EC-$28ED DB_DATA 1
RANGE $28ED-$28EE DB_DATA 1
RANGE $28EE-$28EF DB_DATA 1
RANGE $28EF-$28F1 DW_DATA 1
RANGE $28F1-$28F3 DB_DATA 2
RANGE $28F3-$28F5 DB_DATA 2
RANGE $28F5-$28F7 DB_DATA 2
RANGE $28F7-$28F9 DB_DATA 2
RANGE $28F9-$28FB DB_DATA 2
RANGE $28FB-$28FD DB_DATA 2
RANGE $28FD-$28FF DB_DATA 2
RANGE $28FF-$2901 DB_DATA 2
RANGE $2901-$2903 DB_DATA 2
RANGE $2903-$2905 DB_DATA 2
RANGE $2905-$2907 DB_DATA 2
RANGE $2907-$2909 DB_DATA 2
RANGE $2909-$290A DB_DATA 1
RANGE $290A-$290C DW_DATA 1
RANGE $290C-$290D DB_DATA 1
RANGE $290D-$290E DB_DATA 1
RANGE $290E-$2910 DW_DATA 1
RANGE $2910-$2911 DB_DATA 1
RANGE $2911-$2912 DB_DATA 1
RANGE $2912-$2913 DB_DATA 1
RANGE $2913-$2914 DB_DATA 1
RANGE $2914-$2916 DW_DATA 1
RANGE $2916-$2918 DB_DATA 2
RANGE $2918-$291A DB_DATA 2
RANGE $291A-$291C DB_DATA 2
RANGE $291C-$291E DB_DATA 2
RANGE $291E-$2920 DB_DATA 2
RANGE $2920-$2922 DB_DATA 2
RANGE $2922-$2924 DB_DATA 2
RANGE $2924-$2926 DB_DATA 2
RANGE $2926-$2928 DB_DATA 2
RANGE $2928-$292A DB_DATA 2
RANGE $292A-$292C DB_DATA 2
RANGE $292C-$292E DB_DATA 2
RANGE $292E-$292F DB_DATA 1
RANGE $292F-$2931 DW_DATA 1
RANGE $2931-$2932 DB_DATA 1
RANGE $2932-$2933 DB_DATA 1
RANGE $2933-$2935 DW_DATA 1
RANGE $2935-$2936 DB_DATA 1
RANGE $2936-$2937 DB_DATA 1
RANGE $2937-$2938 DB_DATA 1
RANGE $2938-$2939 DB_DATA 1
RANGE $2939-$293B DW_DATA 1
RANGE $293B-$293D DB_DATA 2
RANGE $293D-$293F DB_DATA 2
RANGE $293F-$2941 DB_DATA 2
RANGE $2941-$2943 DB_DATA 2
RANGE $2943-$2945 DB_DATA 2
RANGE $2945-$2947 DB_DATA 2
RANGE $2947-$2949 DB_DATA 2
RANGE $2949-$294B DB_DATA 2
RANGE $294B-$294D DB_DATA 2
RANGE $294D-$294F DB_DATA 2
RANGE $294F-$2951 DB_DATA 2
RANGE $2951-$2953 DB_DATA 2
RANGE $2953-$2954 DB_DATA 1
RANGE $2954-$2956 DW_DATA 1
RANGE $2956-$2957 DB_DATA 1
RANGE $2957-$2958 DB_DATA 1
RANGE $2958-$295A DW_DATA 1
RANGE $295A-$295B DB_DATA 1
RANGE $295B-$295C DB_DATA 1
RANGE $295C-$295D DB_DATA 1
RANGE $295D-$295E DB_DATA 1
RANGE $295E-$295F DB_DATA 1
RANGE $295F-$2961 DW_DATA 1
RANGE $2961-$2962 DB_DATA 1
RANGE $2962-$2963 DB_DATA 1
RANGE $2963-$2965 DW_DATA 1
RANGE $2965-$2966 DB_DATA 1
RANGE $2966-$2967 DB_DATA 1
RANGE $2967-$2968 DB_DATA 1
RANGE $2968-$2969 DB_DATA 1
RANGE $2969-$296A DB_DATA 1
RANGE $296A-$296C DW_DATA 1
RANGE $296C-$296D DB_DATA 1
RANGE $296D-$296E DB_DATA 1
RANGE $296E-$2970 DW_DATA 1
RANGE $2970-$2971 DB_DATA 1
RANGE $2971-$2972 DB_DATA 1
RANGE $2972-$2973 DB_DATA 1
RANGE $2973-$2974 DB_DATA 1
RANGE $2974-$2975 DB_DATA 1
RANGE $2975-$2977 DW_DATA 1
RANGE $2977-$2978 DB_DATA 1
RANGE $2978-$2979 DB_DATA 1
RANGE $2979-$297B DW_DATA 1
RANGE $297B-$297C DB_DATA 1
RANGE $297C-$297D DB_DATA 1
RANGE $297D-$297E DB_DATA 1
RANGE $297E-$297F DB_DATA 1
RANGE $297F-$2980 DB_DATA 1
RANGE $2980-$2982 DW_DATA 1
RANGE $2982-$2983 DB_DATA 1
RANGE $2983-$2984 DB_DATA 1
RANGE $2984-$2986 DW_DATA 1
RANGE $2986-$2987 DB_DATA 1
RANGE $2987-$2988 DB_DATA 1
RANGE $2988-$2989 DB_DATA 1
RANGE $2989-$298A DB_DATA 1
RANGE $298A-$298B DB_DATA 1
RANGE $298B-$298D DW_DATA 1
RANGE $298D-$298E DB_DATA 1
RANGE $298E-$298F DB_DATA 1
RANGE $298F-$2991 DW_DATA 1
RANGE $2991-$2992 DB_DATA 1
RANGE $2992-$2993 DB_DATA 1
RANGE $2993-$2994 DB_DATA 1
RANGE $2994-$2995 DB_DATA 1
RANGE $2995-$2996 DB_DATA 1
RANGE $2996-$2998 DW_DATA 1
RANGE $2998-$2999 DB_DATA 1
RANGE $2999-$299A DB_DATA 1
RANGE $299A-$299C DW_DATA 1
RANGE $299C-$299D DB_DATA 1
RANGE $299D-$299E DB_DATA 1
RANGE $299E-$299F DB_DATA 1
RANGE $299F-$29A0 DB_DATA 1
RANGE $29A0-$29A1 DB_DATA 1
RANGE $29A1-$29A3 DW_DATA 1
RANGE $29A3-$29A4 DB_DATA 1
RANGE $29A4-$29A5 DB_DATA 1
RANGE $29A5-$29A7 DW_DATA 1
RANGE $29A7-$29A8 DB_DATA 1
RANGE $29A8-$29A9 DB_DATA 1
RANGE $29A9-$29AA DB_DATA 1
RANGE $29AA-$29AB DB_DATA 1
RANGE $29AB-$29AC DB_DATA 1
RANGE $29AC-$29AE DW_DATA 1
RANGE $29AE-$29AF DB_DATA 1
RANGE $29AF-$29B0 DB_DATA 1
RANGE $29B0-$29B2 DW_DATA 1
RANGE $29B2-$29B3 DB_DATA 1
RANGE $29B3-$29B4 DB_DATA 1
RANGE $29B4-$29B5 DB_DATA 1
RANGE $29B5-$29B6 DB_DATA 1
RANGE $29B6-$29B8 DW_DATA 1
RANGE $29B8-$29BA DB_DATA 2
RANGE $29BA-$29BC DB_DATA 2
RANGE $29BC-$29BE DB_DATA 2
RANGE $29BE-$29C0 DB_DATA 2
RANGE $29C0-$29C2 DB_DATA 2
RANGE $29C2-$29C4 DB_DATA 2
RANGE $29C4-$29C6 DB_DATA 2
RANGE $29C6-$29C8 DB_DATA 2
RANGE $29C8-$29CA DB_DATA 2
RANGE $29CA-$29CC DB_DATA 2
RANGE $29CC-$29CE DB_DATA 2
RANGE $29CE-$29CF DB_DATA 1
RANGE $29CF-$29D1 DW_DATA 1
RANGE $29D1-$29D2 DB_DATA 1
RANGE $29D2-$29D3 DB_DATA 1
RANGE $29D3-$29D5 DW_DATA 1
RANGE $29D5-$29D6 DB_DATA 1
RANGE $29D6-$29D7 DB_DATA 1
RANGE $29D7-$29D8 DB_DATA 1
RANGE $29D8-$29D9 DB_DATA 1
RANGE $29D9-$29DB DW_DATA 1
RANGE $29DB-$29DD DB_DATA 2
RANGE $29DD-$29DF DB_DATA 2
RANGE $29DF-$29E1 DB_DATA 2
RANGE $29E1-$29E3 DB_DATA 2
RANGE $29E3-$29E5 DB_DATA 2
RANGE $29E5-$29E7 DB_DATA 2
RANGE $29E7-$29E9 DB_DATA 2
RANGE $29E9-$29EB DB_DATA 2
RANGE $29EB-$29ED DB_DATA 2
RANGE $29ED-$29EF DB_DATA 2
RANGE $29EF-$29F1 DB_DATA 2
RANGE $29F1-$29F2 DB_DATA 1
RANGE $29F2-$29F4 DW_DATA 1
RANGE $29F4-$29F5 DB_DATA 1
RANGE $29F5-$29F6 DB_DATA 1
RANGE $29F6-$29F8 DW_DATA 1
RANGE $29F8-$29F9 DB_DATA 1
RANGE $29F9-$29FA DB_DATA 1
RANGE $29FA-$29FB DB_DATA 1
RANGE $29FB-$29FC DB_DATA 1
RANGE $29FC-$29FE DW_DATA 1
RANGE $29FE-$2A00 DB_DATA 2
RANGE $2A00-$2A02 DB_DATA 2
RANGE $2A02-$2A04 DB_DATA 2
RANGE $2A04-$2A06 DB_DATA 2
RANGE $2A06-$2A08 DB_DATA 2
RANGE $2A08-$2A0A DB_DATA 2
RANGE $2A0A-$2A0C DB_DATA 2
RANGE $2A0C-$2A0E DB_DATA 2
RANGE $2A0E-$2A10 DB_DATA 2
RANGE $2A10-$2A12 DB_DATA 2
RANGE $2A12-$2A14 DB_DATA 2
RANGE $2A14-$2A15 DB_DATA 1
RANGE $2A15-$2A17 DW_DATA 1
RANGE $2A17-$2A18 DB_DATA 1
RANGE $2A18-$2A19 DB_DATA 1
RANGE $2A19-$2A1B DW_DATA 1
RANGE $2A1B-$2A1C DB_DATA 1
RANGE $2A1C-$2A1D DB_DATA 1
RANGE $2A1D-$2A1E DB_DATA 1
RANGE $2A1E-$2A1F DB_DATA 1
RANGE $2A1F-$2A21 DW_DATA 1
RANGE $2A21-$2A23 DB_DATA 2
RANGE $2A23-$2A25 DB_DATA 2
RANGE $2A25-$2A27 DB_DATA 2
RANGE $2A27-$2A29 DB_DATA 2
RANGE $2A29-$2A2B DB_DATA 2
RANGE $2A2B-$2A2D DB_DATA 2
RANGE $2A2D-$2A2F DB_DATA 2
RANGE $2A2F-$2A31 DB_DATA 2
RANGE $2A31-$2A33 DB_DATA 2
RANGE $2A33-$2A35 DB_DATA 2
RANGE $2A35-$2A37 DB_DATA 2
RANGE $2A37-$2A38 DB_DATA 1
RANGE $2A38-$2A3A DW_DATA 1
RANGE $2A3A-$2A3B DB_DATA 1
RANGE $2A3B-$2A3C DB_DATA 1
RANGE $2A3C-$2A3E DW_DATA 1
RANGE $2A3E-$2A3F DB_DATA 1
RANGE $2A3F-$2A40 DB_DATA 1
RANGE $2A40-$2A41 DB_DATA 1
RANGE $2A41-$2A42 DB_DATA 1
RANGE $2A42-$2A43 DB_DATA 1
RANGE $2A43-$2A45 DW_DATA 1
RANGE $2A45-$2A46 DB_DATA 1
RANGE $2A46-$2A47 DB_DATA 1
RANGE $2A47-$2A49 DW_DATA 1
RANGE $2A49-$2A4A DB_DATA 1
RANGE $2A4A-$2A4B DB_DATA 1
RANGE $2A4B-$2A4C DB_DATA 1
RANGE $2A4C-$2A4D DB_DATA 1
RANGE $2A4D-$2A4E DB_DATA 1
RANGE $2A4E-$2A50 DW_DATA 1
RANGE $2A50-$2A51 DB_DATA 1
RANGE $2A51-$2A52 DB_DATA 1
RANGE $2A52-$2A54 DW_DATA 1
RANGE $2A54-$2A55 DB_DATA 1
RANGE $2A55-$2A56 DB_DATA 1
RANGE $2A56-$2A57 DB_DATA 1
RANGE $2A57-$2A58 DB_DATA 1
RANGE $2A58-$2A5A DW_DATA 1
RANGE $2A5A-$2A5C DB_DATA 2
RANGE $2A5C-$2A5E DB_DATA 2
RANGE $2A5E-$2A60 DB_DATA 2
RANGE $2A60-$2A62 DB_DATA 2
RANGE $2A62-$2A64 DB_DATA 2
RANGE $2A64-$2A66 DB_DATA 2
RANGE $2A66-$2A68 DB_DATA 2
RANGE $2A68-$2A6A DB_DATA 2
RANGE $2A6A-$2A6C DB_DATA 2
RANGE $2A6C-$2A6E DB_DATA 2
RANGE $2A6E-$2A70 DB_DATA 2
RANGE $2A70-$2A71 DB_DATA 1
RANGE $2A71-$2A73 DW_DATA 1
RANGE $2A73-$2A74 DB_DATA 1
RANGE $2A74-$2A75 DB_DATA 1
RANGE $2A75-$2A77 DW_DATA 1
RANGE $2A77-$2A78 DB_DATA 1
RANGE $2A78-$2A79 DB_DATA 1
RANGE $2A79-$2A7A DB_DATA 1
RANGE $2A7A-$2A7B DB_DATA 1
RANGE $2A7B-$2A7D DW_DATA 1
RANGE $2A7D-$2A7F DB_DATA 2
RANGE $2A7F-$2A81 DB_DATA 2
RANGE $2A81-$2A83 DB_DATA 2
RANGE $2A83-$2A85 DB_DATA 2
RANGE $2A85-$2A87 DB_DATA 2
RANGE $2A87-$2A89 DB_DATA 2
RANGE $2A89-$2A8B DB_DATA 2
RANGE $2A8B-$2A8D DB_DATA 2
RANGE $2A8D-$2A8F DB_DATA 2
RANGE $2A8F-$2A91 DB_DATA 2
RANGE $2A91-$2A93 DB_DATA 2
RANGE $2A93-$2A94 DB_DATA 1
RANGE $2A94-$2A96 DW_DATA 1
RANGE $2A96-$2A97 DB_DATA 1
RANGE $2A97-$2A98 DB_DATA 1
RANGE $2A98-$2A9A DW_DATA 1
RANGE $2A9A-$2A9B DB_DATA 1
RANGE $2A9B-$2A9C DB_DATA 1
RANGE $2A9C-$2A9D DB_DATA 1
RANGE $2A9D-$2A9E DB_DATA 1
RANGE $2A9E-$2AA0 DW_DATA 1
RANGE $2AA0-$2AA2 DB_DATA 2
RANGE $2AA2-$2AA4 DB_DATA 2
RANGE $2AA4-$2AA6 DB_DATA 2
RANGE $2AA6-$2AA8 DB_DATA 2
RANGE $2AA8-$2AAA DB_DATA 2
RANGE $2AAA-$2AAC DB_DATA 2
RANGE $2AAC-$2AAE DB_DATA 2
RANGE $2AAE-$2AB0 DB_DATA 2
RANGE $2AB0-$2AB2 DB_DATA 2
RANGE $2AB2-$2AB4 DB_DATA 2
RANGE $2AB4-$2AB6 DB_DATA 2
RANGE $2AB6-$2AB7 DB_DATA 1
RANGE $2AB7-$2AB9 DW_DATA 1
RANGE $2AB9-$2ABA DB_DATA 1
RANGE $2ABA-$2ABB DB_DATA 1
RANGE $2ABB-$2ABD DW_DATA 1
RANGE $2ABD-$2ABE DB_DATA 1
RANGE $2ABE-$2ABF DB_DATA 1
RANGE $2ABF-$2AC0 DB_DATA 1
RANGE $2AC0-$2AC1 DB_DATA 1
RANGE $2AC1-$2AC3 DW_DATA 1
RANGE $2AC3-$2AC5 DB_DATA 2
RANGE $2AC5-$2AC7 DB_DATA 2
RANGE $2AC7-$2AC9 DB_DATA 2
RANGE $2AC9-$2ACB DB_DATA 2
RANGE $2ACB-$2ACD DB_DATA 2
RANGE $2ACD-$2ACF DB_DATA 2
RANGE $2ACF-$2AD1 DB_DATA 2
RANGE $2AD1-$2AD3 DB_DATA 2
RANGE $2AD3-$2AD5 DB_DATA 2
RANGE $2AD5-$2AD7 DB_DATA 2
RANGE $2AD7-$2AD9 DB_DATA 2
RANGE $2AD9-$2ADA DB_DATA 1
RANGE $2ADA-$2ADC DW_DATA 1
RANGE $2ADC-$2ADD DB_DATA 1
RANGE $2ADD-$2ADE DB_DATA 1
RANGE $2ADE-$2AE0 DW_DATA 1
RANGE $2AE0-$2AE1 DB_DATA 1
RANGE $2AE1-$2AE2 DB_DATA 1
RANGE $2AE2-$2AE3 DB_DATA 1
RANGE $2AE3-$2AE4 DB_DATA 1
RANGE $2AE4-$2AE5 DB_DATA 1
RANGE $2AE5-$2AE7 DW_DATA 1
RANGE $2AE7-$2AE8 DB_DATA 1
RANGE $2AE8-$2AE9 DB_DATA 1
RANGE $2AE9-$2AEB DW_DATA 1
RANGE $2AEB-$2AEC DB_DATA 1
RANGE $2AEC-$2AED DB_DATA 1
RANGE $2AED-$2AEE DB_DATA 1
RANGE $2AEE-$2AEF DB_DATA 1
RANGE $2AEF-$2AF0 DB_DATA 1
RANGE $2AF0-$2AF2 DW_DATA 1
RANGE $2AF2-$2AF3 DB_DATA 1
RANGE $2AF3-$2AF4 DB_DATA 1
RANGE $2AF4-$2AF6 DW_DATA 1
RANGE $2AF6-$2AF7 DB_DATA 1
RANGE $2AF7-$2AF8 DB_DATA 1
RANGE $2AF8-$2AF9 DB_DATA 1
RANGE $2AF9-$2AFA DB_DATA 1
RANGE $2AFA-$2AFB DB_DATA 1
RANGE $2AFB-$2AFD DW_DATA 1
RANGE $2AFD-$2AFE DB_DATA 1
RANGE $2AFE-$2AFF DB_DATA 1
RANGE $2AFF-$2B01 DW_DATA 1
RANGE $2B01-$2B02 DB_DATA 1
RANGE $2B02-$2B03 DB_DATA 1
RANGE $2B03-$2B04 DB_DATA 1
RANGE $2B04-$2B05 DB_DATA 1
RANGE $2B05-$2B06 DB_DATA 1
RANGE $2B06-$2B08 DW_DATA 1
RANGE $2B08-$2B09 DB_DATA 1
RANGE $2B09-$2B0A DB_DATA 1
RANGE $2B0A-$2B0C DW_DATA 1
RANGE $2B0C-$2B0D DB_DATA 1
RANGE $2B0D-$2B0E DB_DATA 1
RANGE $2B0E-$2B0F DB_DATA 1
RANGE $2B0F-$2B10 DB_DATA 1
RANGE $2B10-$2B11 DB_DATA 1
RANGE $2B11-$2B13 DW_DATA 1
RANGE $2B13-$2B14 DB_DATA 1
RANGE $2B14-$2B15 DB_DATA 1
RANGE $2B15-$2B17 DW_DATA 1
RANGE $2B17-$2B18 DB_DATA 1
RANGE $2B18-$2B19 DB_DATA 1
RANGE $2B19-$2B1A DB_DATA 1
RANGE $2B1A-$2B1B DB_DATA 1
RANGE $2B1B-$2B1C DB_DATA 1
RANGE $2B1C-$2B1E DW_DATA 1
RANGE $2B1E-$2B1F DB_DATA 1
RANGE $2B1F-$2B20 DB_DATA 1
RANGE $2B20-$2B22 DW_DATA 1
RANGE $2B22-$2B23 DB_DATA 1
RANGE $2B23-$2B24 DB_DATA 1
RANGE $2B24-$2B25 DB_DATA 1
RANGE $2B25-$2B26 DB_DATA 1
RANGE $2B26-$2B27 DB_DATA 1
RANGE $2B27-$2B29 DW_DATA 1
RANGE $2B29-$2B2A DB_DATA 1
RANGE $2B2A-$2B2B DB_DATA 1
RANGE $2B2B-$2B2D DW_DATA 1
RANGE $2B2D-$2B2E DB_DATA 1
RANGE $2B2E-$2B2F DB_DATA 1
RANGE $2B2F-$2B30 DB_DATA 1
RANGE $2B30-$2B31 DB_DATA 1
RANGE $2B31-$2B32 DB_DATA 1
RANGE $2B32-$2B34 DW_DATA 1
RANGE $2B34-$2B35 DB_DATA 1
RANGE $2B35-$2B36 DB_DATA 1
RANGE $2B36-$2B38 DW_DATA 1
RANGE $2B38-$2B39 DB_DATA 1
RANGE $2B39-$2B3A DB_DATA 1
RANGE $2B3A-$2B3B DB_DATA 1
RANGE $2B3B-$2B3C DB_DATA 1
RANGE $2B3C-$2B3D DB_DATA 1
RANGE $2B3D-$2B3F DW_DATA 1
RANGE $2B3F-$2B40 DB_DATA 1
RANGE $2B40-$2B41 DB_DATA 1
RANGE $2B41-$2B43 DW_DATA 1
RANGE $2B43-$2B44 DB_DATA 1
RANGE $2B44-$2B45 DB_DATA 1
RANGE $2B45-$2B46 DB_DATA 1
RANGE $2B46-$2B47 DB_DATA 1
RANGE $2B47-$2B48 DB_DATA 1
RANGE $2B48-$2B4A DW_DATA 1
RANGE $2B4A-$2B4B DB_DATA 1
RANGE $2B4B-$2B4C DB_DATA 1
RANGE $2B4C-$2B4E DW_DATA 1
RANGE $2B4E-$2B4F DB_DATA 1
RANGE $2B4F-$2B50 DB_DATA 1
RANGE $2B50-$2B51 DB_DATA 1
RANGE $2B51-$2B52 DB_DATA 1
RANGE $2B52-$2B53 DB_DATA 1
RANGE $2B53-$2B55 DW_DATA 1
RANGE $2B55-$2B56 DB_DATA 1
RANGE $2B56-$2B57 DB_DATA 1
RANGE $2B57-$2B59 DW_DATA 1
RANGE $2B59-$2B5A DB_DATA 1
RANGE $2B5A-$2B5B DB_DATA 1
RANGE $2B5B-$2B5C DB_DATA 1
RANGE $2B5C-$2B5D DB_DATA 1
RANGE $2B5D-$2B5E DB_DATA 1
RANGE $2B5E-$2B60 DW_DATA 1
RANGE $2B60-$2B61 DB_DATA 1
RANGE $2B61-$2B62 DB_DATA 1
RANGE $2B62-$2B64 DW_DATA 1
RANGE $2B64-$2B65 DB_DATA 1
RANGE $2B65-$2B66 DB_DATA 1
RANGE $2B66-$2B67 DB_DATA 1
RANGE $2B67-$2B68 DB_DATA 1
RANGE $2B68-$2B69 DB_DATA 1
RANGE $2B69-$2B6B DW_DATA 1
RANGE $2B6B-$2B6C DB_DATA 1
RANGE $2B6C-$2B6D DB_DATA 1
RANGE $2B6D-$2B6F DW_DATA 1
RANGE $2B6F-$2B70 DB_DATA 1
RANGE $2B70-$2B71 DB_DATA 1
RANGE $2B71-$2B72 DB_DATA 1
RANGE $2B72-$2B73 DB_DATA 1
RANGE $2B73-$2B74 DB_DATA 1
RANGE $2B74-$2B76 DW_DATA 1
RANGE $2B76-$2B77 DB_DATA 1
RANGE $2B77-$2B78 DB_DATA 1
RANGE $2B78-$2B7A DW_DATA 1
RANGE $2B7A-$2B7B DB_DATA 1
RANGE $2B7B-$2B7C DB_DATA 1
RANGE $2B7C-$2B7D DB_DATA 1
RANGE $2B7D-$2B7E DB_DATA 1
RANGE $2B7E-$2B7F DB_DATA 1
RANGE $2B7F-$2B81 DW_DATA 1
RANGE $2B81-$2B82 DB_DATA 1
RANGE $2B82-$2B83 DB_DATA 1
RANGE $2B83-$2B85 DW_DATA 1
RANGE $2B85-$2B86 DB_DATA 1
RANGE $2B86-$2B87 DB_DATA 1
RANGE $2B87-$2B88 DB_DATA 1
RANGE $2B88-$2B89 DB_DATA 1
RANGE $2B89-$2B8A DB_DATA 1
RANGE $2B8A-$2B8C DW_DATA 1
RANGE $2B8C-$2B8D DB_DATA 1
RANGE $2B8D-$2B8E DB_DATA 1
RANGE $2B8E-$2B90 DW_DATA 1
RANGE $2B90-$2B91 DB_DATA 1
RANGE $2B91-$2B92 DB_DATA 1
RANGE $2B92-$2B93 DB_DATA 1
RANGE $2B93-$2B94 DB_DATA 1
RANGE $2B94-$2B95 DB_DATA 1
RANGE $2B95-$2B97 DW_DATA 1
RANGE $2B97-$2B98 DB_DATA 1
RANGE $2B98-$2B99 DB_DATA 1
RANGE $2B99-$2B9B DW_DATA 1
RANGE $2B9B-$2B9C DB_DATA 1
RANGE $2B9C-$2B9D DB_DATA 1
RANGE $2B9D-$2B9E DB_DATA 1
RANGE $2B9E-$2B9F DB_DATA 1
RANGE $2B9F-$2BA0 DB_DATA 1
RANGE $2BA0-$2BA2 DW_DATA 1
RANGE $2BA2-$2BA3 DB_DATA 1
RANGE $2BA3-$2BA4 DB_DATA 1
RANGE $2BA4-$2BA6 DW_DATA 1
RANGE $2BA6-$2BA7 DB_DATA 1
RANGE $2BA7-$2BA8 DB_DATA 1
RANGE $2BA8-$2BA9 DB_DATA 1
RANGE $2BA9-$2BAA DB_DATA 1
RANGE $2BAA-$2BAB DB_DATA 1
RANGE $2BAB-$2BAD DW_DATA 1
RANGE $2BAD-$2BAE DB_DATA 1
RANGE $2BAE-$2BAF DB_DATA 1
RANGE $2BAF-$2BB1 DW_DATA 1
RANGE $2BB1-$2BB2 DB_DATA 1
RANGE $2BB2-$2BB3 DB_DATA 1
RANGE $2BB3-$2BB4 DB_DATA 1
RANGE $2BB4-$2BB5 DB_DATA 1
RANGE $2BB5-$2BB6 DB_DATA 1
RANGE $2BB6-$2BB8 DW_DATA 1
RANGE $2BB8-$2BB9 DB_DATA 1
RANGE $2BB9-$2BBA DB_DATA 1
RANGE $2BBA-$2BBC DW_DATA 1
RANGE $2BBC-$2BBD DB_DATA 1
RANGE $2BBD-$2BBE DB_DATA 1
RANGE $2BBE-$2BBF DB_DATA 1
RANGE $2BBF-$2BC0 DB_DATA 1
RANGE $2BC0-$2BC1 DB_DATA 1
RANGE $2BC1-$2BC3 DW_DATA 1
RANGE $2BC3-$2BC4 DB_DATA 1
RANGE $2BC4-$2BC5 DB_DATA 1
RANGE $2BC5-$2BC7 DW_DATA 1
RANGE $2BC7-$2BC8 DB_DATA 1
RANGE $2BC8-$2BC9 DB_DATA 1
RANGE $2BC9-$2BCA DB_DATA 1
RANGE $2BCA-$2BCB DB_DATA 1
RANGE $2BCB-$2BCC DB_DATA 1
RANGE $2BCC-$2BCE DW_DATA 1
RANGE $2BCE-$2BCF DB_DATA 1
RANGE $2BCF-$2BD0 DB_DATA 1
RANGE $2BD0-$2BD2 DW_DATA 1
RANGE $2BD2-$2BD3 DB_DATA 1
RANGE $2BD3-$2BD4 DB_DATA 1
RANGE $2BD4-$2BD5 DB_DATA 1
RANGE $2BD5-$2BD6 DB_DATA 1
RANGE $2BD6-$2BD7 DB_DATA 1
RANGE $2BD7-$2BD9 DW_DATA 1
RANGE $2BD9-$2BDA DB_DATA 1
RANGE $2BDA-$2BDB DB_DATA 1
RANGE $2BDB-$2BDD DW_DATA 1
RANGE $2BDD-$2BDE DB_DATA 1
RANGE $2BDE-$2BDF DB_DATA 1
RANGE $2BDF-$2BE0 DB_DATA 1
RANGE $2BE0-$2BE1 DB_DATA 1
RANGE $2BE1-$2BE2 DB_DATA 1
RANGE $2BE2-$2BE4 DW_DATA 1
RANGE $2BE4-$2BE5 DB_DATA 1
RANGE $2BE5-$2BE6 DB_DATA 1
RANGE $2BE6-$2BE8 DW_DATA 1
RANGE $2BE8-$2BE9 DB_DATA 1
RANGE $2BE9-$2BEA DB_DATA 1
RANGE $2BEA-$2BEB DB_DATA 1
RANGE $2BEB-$2BEC DB_DATA 1
RANGE $2BEC-$2BED DB_DATA 1
RANGE $2BED-$2BEF DW_DATA 1
RANGE $2BEF-$2BF0 DB_DATA 1
RANGE $2BF0-$2BF1 DB_DATA 1
RANGE $2BF1-$2BF3 DW_DATA 1
RANGE $2BF3-$2BF4 DB_DATA 1
RANGE $2BF4-$2BF5 DB_DATA 1
RANGE $2BF5-$2BF6 DB_DATA 1
RANGE $2BF6-$2BF7 DB_DATA 1
RANGE $2BF7-$2BF8 DB_DATA 1
RANGE $2BF8-$2BFA DW_DATA 1
RANGE $2BFA-$2BFB DB_DATA 1
RANGE $2BFB-$2BFC DB_DATA 1
RANGE $2BFC-$2BFE DW_DATA 1
RANGE $2BFE-$2BFF DB_DATA 1
RANGE $2BFF-$2C00 DB_DATA 1
RANGE $2C00-$2C01 DB_DATA 1
RANGE $2C01-$2C02 DB_DATA 1
RANGE $2C02-$2C04 DW_DATA 1
RANGE $2C04-$2C06 DB_DATA 2
RANGE $2C06-$2C08 DB_DATA 2
RANGE $2C08-$2C0A DB_DATA 2
RANGE $2C0A-$2C0C DB_DATA 2
RANGE $2C0C-$2C0E DB_DATA 2
RANGE $2C0E-$2C10 DB_DATA 2
RANGE $2C10-$2C12 DB_DATA 2
RANGE $2C12-$2C14 DB_DATA 2
RANGE $2C14-$2C16 DB_DATA 2
RANGE $2C16-$2C18 DB_DATA 2
RANGE $2C18-$2C1A DB_DATA 2
RANGE $2C1A-$2C1B DB_DATA 1
RANGE $2C1B-$2C1D DW_DATA 1
RANGE $2C1D-$2C1E DB_DATA 1
RANGE $2C1E-$2C1F DB_DATA 1
RANGE $2C1F-$2C21 DW_DATA 1
RANGE $2C21-$2C22 DB_DATA 1
RANGE $2C22-$2C23 DB_DATA 1
RANGE $2C23-$2C24 DB_DATA 1
RANGE $2C24-$2C25 DB_DATA 1
RANGE $2C25-$2C27 DW_DATA 1
RANGE $2C27-$2C29 DB_DATA 2
RANGE $2C29-$2C2B DB_DATA 2
RANGE $2C2B-$2C2D DB_DATA 2
RANGE $2C2D-$2C2F DB_DATA 2
RANGE $2C2F-$2C31 DB_DATA 2
RANGE $2C31-$2C33 DB_DATA 2
RANGE $2C33-$2C35 DB_DATA 2
RANGE $2C35-$2C37 DB_DATA 2
RANGE $2C37-$2C39 DB_DATA 2
RANGE $2C39-$2C3B DB_DATA 2
RANGE $2C3B-$2C3D DB_DATA 2
RANGE $2C3D-$2C3F DB_DATA 2
RANGE $2C3F-$2C41 DB_DATA 2
RANGE $2C41-$2C42 DB_DATA 1
RANGE $2C42-$2C44 DW_DATA 1
RANGE $2C44-$2C45 DB_DATA 1
RANGE $2C45-$2C46 DB_DATA 1
RANGE $2C46-$2C48 DW_DATA 1
RANGE $2C48-$2C49 DB_DATA 1
RANGE $2C49-$2C4A DB_DATA 1
RANGE $2C4A-$2C4B DB_DATA 1
RANGE $2C4B-$2C4C DB_DATA 1
RANGE $2C4C-$2C4E DW_DATA 1
RANGE $2C4E-$2C50 DB_DATA 2
RANGE $2C50-$2C52 DB_DATA 2
RANGE $2C52-$2C54 DB_DATA 2
RANGE $2C54-$2C56 DB_DATA 2
RANGE $2C56-$2C58 DB_DATA 2
RANGE $2C58-$2C5A DB_DATA 2
RANGE $2C5A-$2C5C DB_DATA 2
RANGE $2C5C-$2C5E DB_DATA 2
RANGE $2C5E-$2C60 DB_DATA 2
RANGE $2C60-$2C62 DB_DATA 2
RANGE $2C62-$2C64 DB_DATA 2
RANGE $2C64-$2C66 DB_DATA 2
RANGE $2C66-$2C68 DB_DATA 2
RANGE $2C68-$2C69 DB_DATA 1
RANGE $2C69-$2C6B DW_DATA 1
RANGE $2C6B-$2C6C DB_DATA 1
RANGE $2C6C-$2C6D DB_DATA 1
RANGE $2C6D-$2C6F DW_DATA 1
RANGE $2C6F-$2C70 DB_DATA 1
RANGE $2C70-$2C71 DB_DATA 1
RANGE $2C71-$2C72 DB_DATA 1
RANGE $2C72-$2C73 DB_DATA 1
RANGE $2C73-$2C75 DW_DATA 1
RANGE $2C75-$2C77 DB_DATA 2
RANGE $2C77-$2C79 DB_DATA 2
RANGE $2C79-$2C7B DB_DATA 2
RANGE $2C7B-$2C7D DB_DATA 2
RANGE $2C7D-$2C7F DB_DATA 2
RANGE $2C7F-$2C81 DB_DATA 2
RANGE $2C81-$2C83 DB_DATA 2
RANGE $2C83-$2C85 DB_DATA 2
RANGE $2C85-$2C87 DB_DATA 2
RANGE $2C87-$2C89 DB_DATA 2
RANGE $2C89-$2C8B DB_DATA 2
RANGE $2C8B-$2C8C DB_DATA 1
RANGE $2C8C-$2C8E DW_DATA 1
RANGE $2C8E-$2C8F DB_DATA 1
RANGE $2C8F-$2C90 DB_DATA 1
RANGE $2C90-$2C92 DW_DATA 1
RANGE $2C92-$2C93 DB_DATA 1
RANGE $2C93-$2C94 DB_DATA 1
RANGE $2C94-$2C95 DB_DATA 1
RANGE $2C95-$2C96 DB_DATA 1
RANGE $2C96-$2C98 DW_DATA 1
RANGE $2C98-$2C9A DB_DATA 2
RANGE $2C9A-$2C9C DB_DATA 2
RANGE $2C9C-$2C9E DB_DATA 2
RANGE $2C9E-$2CA0 DB_DATA 2
RANGE $2CA0-$2CA2 DB_DATA 2
RANGE $2CA2-$2CA4 DB_DATA 2
RANGE $2CA4-$2CA6 DB_DATA 2
RANGE $2CA6-$2CA8 DB_DATA 2
RANGE $2CA8-$2CAA DB_DATA 2
RANGE $2CAA-$2CAC DB_DATA 2
RANGE $2CAC-$2CAE DB_DATA 2
RANGE $2CAE-$2CB0 DB_DATA 2
RANGE $2CB0-$2CB2 DB_DATA 2
RANGE $2CB2-$2CB3 DB_DATA 1
RANGE $2CB3-$2CB5 DW_DATA 1
RANGE $2CB5-$2CB6 DB_DATA 1
RANGE $2CB6-$2CB7 DB_DATA 1
RANGE $2CB7-$2CB9 DW_DATA 1
RANGE $2CB9-$2CBA DB_DATA 1
RANGE $2CBA-$2CBB DB_DATA 1
RANGE $2CBB-$2CBC DB_DATA 1
RANGE $2CBC-$2CBD DB_DATA 1
RANGE $2CBD-$2CBF DW_DATA 1
RANGE $2CBF-$2CC1 DB_DATA 2
RANGE $2CC1-$2CC3 DB_DATA 2
RANGE $2CC3-$2CC5 DB_DATA 2
RANGE $2CC5-$2CC7 DB_DATA 2
RANGE $2CC7-$2CC9 DB_DATA 2
RANGE $2CC9-$2CCB DB_DATA 2
RANGE $2CCB-$2CCD DB_DATA 2
RANGE $2CCD-$2CCF DB_DATA 2
RANGE $2CCF-$2CD1 DB_DATA 2
RANGE $2CD1-$2CD3 DB_DATA 2
RANGE $2CD3-$2CD5 DB_DATA 2
RANGE $2CD5-$2CD7 DB_DATA 2
RANGE $2CD7-$2CD9 DB_DATA 2
RANGE $2CD9-$2CDA DB_DATA 1
RANGE $2CDA-$2CDC DW_DATA 1
RANGE $2CDC-$2CDD DB_DATA 1
RANGE $2CDD-$2CDE DB_DATA 1
RANGE $2CDE-$2CE0 DW_DATA 1
RANGE $2CE0-$2CE1 DB_DATA 1
RANGE $2CE1-$2CE2 DB_DATA 1
RANGE $2CE2-$2CE3 DB_DATA 1
RANGE $2CE3-$2CE4 DB_DATA 1
RANGE $2CE4-$2CE5 DB_DATA 1
RANGE $2CE5-$2CE7 DW_DATA 1
RANGE $2CE7-$2CE8 DB_DATA 1
RANGE $2CE8-$2CE9 DB_DATA 1
RANGE $2CE9-$2CEB DW_DATA 1
RANGE $2CEB-$2CEC DB_DATA 1
RANGE $2CEC-$2CED DB_DATA 1
RANGE $2CED-$2CEE DB_DATA 1
RANGE $2CEE-$2CEF DB_DATA 1
RANGE $2CEF-$2CF0 DB_DATA 1
RANGE $2CF0-$2CF2 DW_DATA 1
RANGE $2CF2-$2CF3 DB_DATA 1
RANGE $2CF3-$2CF4 DB_DATA 1
RANGE $2CF4-$2CF6 DW_DATA 1
RANGE $2CF6-$2CF7 DB_DATA 1
RANGE $2CF7-$2CF8 DB_DATA 1
RANGE $2CF8-$2CF9 DB_DATA 1
RANGE $2CF9-$2CFA DB_DATA 1
RANGE $2CFA-$2CFB DB_DATA 1
RANGE $2CFB-$2CFD DW_DATA 1
RANGE $2CFD-$2CFE DB_DATA 1
RANGE $2CFE-$2CFF DB_DATA 1
RANGE $2CFF-$2D01 DW_DATA 1
RANGE $2D01-$2D02 DB_DATA 1
RANGE $2D02-$2D03 DB_DATA 1
RANGE $2D03-$2D04 DB_DATA 1
RANGE $2D04-$2D05 DB_DATA 1
RANGE $2D05-$2D06 DB_DATA 1
RANGE $2D06-$2D08 DW_DATA 1
RANGE $2D08-$2D09 DB_DATA 1
RANGE $2D09-$2D0A DB_DATA 1
RANGE $2D0A-$2D0C DW_DATA 1
RANGE $2D0C-$2D0D DB_DATA 1
RANGE $2D0D-$2D0E DB_DATA 1
RANGE $2D0E-$2D0F DB_DATA 1
RANGE $2D0F-$2D10 DB_DATA 1
RANGE $2D10-$2D11 DB_DATA 1
RANGE $2D11-$2D13 DW_DATA 1
RANGE $2D13-$2D14 DB_DATA 1
RANGE $2D14-$2D15 DB_DATA 1
RANGE $2D15-$2D17 DW_DATA 1
RANGE $2D17-$2D18 DB_DATA 1
RANGE $2D18-$2D19 DB_DATA 1
RANGE $2D19-$2D1A DB_DATA 1
RANGE $2D1A-$2D1B DB_DATA 1
RANGE $2D1B-$2D1C DB_DATA 1
RANGE $2D1C-$2D1E DW_DATA 1
RANGE $2D1E-$2D1F DB_DATA 1
RANGE $2D1F-$2D20 DB_DATA 1
RANGE $2D20-$2D22 DW_DATA 1
RANGE $2D22-$2D23 DB_DATA 1
RANGE $2D23-$2D24 DB_DATA 1
RANGE $2D24-$2D25 DB_DATA 1
RANGE $2D25-$2D26 DB_DATA 1
RANGE $2D26-$2D27 DB_DATA 1
RANGE $2D27-$2D29 DW_DATA 1
RANGE $2D29-$2D2A DB_DATA 1
RANGE $2D2A-$2D2B DB_DATA 1
RANGE $2D2B-$2D2D DW_DATA 1
RANGE $2D2D-$2D2E DB_DATA 1
RANGE $2D2E-$2D2F DB_DATA 1
RANGE $2D2F-$2D30 DB_DATA 1
RANGE $2D30-$2D31 DB_DATA 1
RANGE $2D31-$2D33 DW_DATA 1
RANGE $2D33-$2D34 DB_DATA 1
RANGE $2D34-$2D36 DW_DATA 1
RANGE $2D36-$2D37 DB_DATA 1
RANGE $2D37-$2D38 DB_DATA 1
RANGE $2D38-$2D3A DW_DATA 1
RANGE $2D3A-$2D3B DB_DATA 1
RANGE $2D3B-$2D3C DB_DATA 1
RANGE $2D3C-$2D3D DB_DATA 1
RANGE $2D3D-$2D3E DB_DATA 1
RANGE $2D3E-$2D40 DW_DATA 1
RANGE $2D40-$2D41 DB_DATA 1
RANGE $2D41-$2D43 DW_DATA 1
RANGE $2D43-$2D44 DB_DATA 1
RANGE $2D44-$2D45 DB_DATA 1
RANGE $2D45-$2D47 DW_DATA 1
RANGE $2D47-$2D48 DB_DATA 1
RANGE $2D48-$2D49 DB_DATA 1
RANGE $2D49-$2D4A DB_DATA 1
RANGE $2D4A-$2D4B DB_DATA 1
RANGE $2D4B-$2D4D DW_DATA 1
RANGE $2D4D-$2D4E DB_DATA 1
RANGE $2D4E-$2D50 DW_DATA 1
RANGE $2D50-$2D51 DB_DATA 1
RANGE $2D51-$2D52 DB_DATA 1
RANGE $2D52-$2D54 DW_DATA 1
RANGE $2D54-$2D55 DB_DATA 1
RANGE $2D55-$2D56 DB_DATA 1
RANGE $2D56-$2D57 DB_DATA 1
RANGE $2D57-$2D58 DB_DATA 1
RANGE $2D58-$2D5A DW_DATA 1
RANGE $2D5A-$2D5B DB_DATA 1
RANGE $2D5B-$2D5D DW_DATA 1
RANGE $2D5D-$2D5E DB_DATA 1
RANGE $2D5E-$2D5F DB_DATA 1
RANGE $2D5F-$2D61 DW_DATA 1
RANGE $2D61-$2D62 DB_DATA 1
RANGE $2D62-$2D63 DB_DATA 1
RANGE $2D63-$2D64 DB_DATA 1
RANGE $2D64-$2D65 DB_DATA 1
RANGE $2D65-$2D67 DW_DATA 1
RANGE $2D67-$2D68 DB_DATA 1
RANGE $2D68-$2D6A DW_DATA 1
RANGE $2D6A-$2D6B DB_DATA 1
RANGE $2D6B-$2D6C DB_DATA 1
RANGE $2D6C-$2D6E DW_DATA 1
RANGE $2D6E-$2D6F DB_DATA 1
RANGE $2D6F-$2D70 DB_DATA 1
RANGE $2D70-$2D71 DB_DATA 1
RANGE $2D71-$2D72 DB_DATA 1
RANGE $2D72-$2D74 DW_DATA 1
RANGE $2D74-$2D75 DB_DATA 1
RANGE $2D75-$2D77 DW_DATA 1
RANGE $2D77-$2D78 DB_DATA 1
RANGE $2D78-$2D79 DB_DATA 1
RANGE $2D79-$2D7B DW_DATA 1
RANGE $2D7B-$2D7C DB_DATA 1
RANGE $2D7C-$2D7D DB_DATA 1
RANGE $2D7D-$2D7E DB_DATA 1
RANGE $2D7E-$2D7F DB_DATA 1
RANGE $2D7F-$2D81 DW_DATA 1
RANGE $2D81-$2D82 DB_DATA 1
RANGE $2D82-$2D84 DW_DATA 1
RANGE $2D84-$2D85 DB_DATA 1
RANGE $2D85-$2D86 DB_DATA 1
RANGE $2D86-$2D88 DW_DATA 1
RANGE $2D88-$2D89 DB_DATA 1
RANGE $2D89-$2D8A DB_DATA 1
RANGE $2D8A-$2D8B DB_DATA 1
RANGE $2D8B-$2D8C DB_DATA 1
RANGE $2D8C-$2D8E DW_DATA 1
RANGE $2D8E-$2D8F DB_DATA 1
RANGE $2D8F-$2D91 DW_DATA 1
RANGE $2D91-$2D92 DB_DATA 1
RANGE $2D92-$2D93 DB_DATA 1
RANGE $2D93-$2D95 DW_DATA 1
RANGE $2D95-$2D96 DB_DATA 1
RANGE $2D96-$2D97 DB_DATA 1
RANGE $2D97-$2D98 DB_DATA 1
RANGE $2D98-$2D99 DB_DATA 1
RANGE $2D99-$2D9B DW_DATA 1
RANGE $2D9B-$2D9C DB_DATA 1
RANGE $2D9C-$2D9E DW_DATA 1
RANGE $2D9E-$2D9F DB_DATA 1
RANGE $2D9F-$2DA0 DB_DATA 1
RANGE $2DA0-$2DA2 DW_DATA 1
RANGE $2DA2-$2DA3 DB_DATA 1
RANGE $2DA3-$2DA4 DB_DATA 1
RANGE $2DA4-$2DA5 DB_DATA 1
RANGE $2DA5-$2DA6 DB_DATA 1
RANGE $2DA6-$2DA8 DW_DATA 1
RANGE $2DA8-$2DA9 DB_DATA 1
RANGE $2DA9-$2DAB DW_DATA 1
RANGE $2DAB-$2DAC DB_DATA 1
RANGE $2DAC-$2DAD DB_DATA 1
RANGE $2DAD-$2DAF DW_DATA 1
RANGE $2DAF-$2DB0 DB_DATA 1
RANGE $2DB0-$2DB1 DB_DATA 1
RANGE $2DB1-$2DB2 DB_DATA 1
RANGE $2DB2-$2DB3 DB_DATA 1
RANGE $2DB3-$2DB5 DW_DATA 1
RANGE $2DB5-$2DB6 DB_DATA 1
RANGE $2DB6-$2DB8 DW_DATA 1
RANGE $2DB8-$2DB9 DB_DATA 1
RANGE $2DB9-$2DBA DB_DATA 1
RANGE $2DBA-$2DBC DW_DATA 1
RANGE $2DBC-$2DBD DB_DATA 1
RANGE $2DBD-$2DBE DB_DATA 1
RANGE $2DBE-$2DBF DB_DATA 1
RANGE $2DBF-$2DC0 DB_DATA 1
RANGE $2DC0-$2DC2 DW_DATA 1
RANGE $2DC2-$2DC4 DW_DATA 1
RANGE $2DC4-$2DC6 DB_DATA 2
RANGE $2DC6-$2DC8 DB_DATA 2
RANGE $2DC8-$2DCA DB_DATA 2
RANGE $2DCA-$2DCC DB_DATA 2
RANGE $2DCC-$2DCE DB_DATA 2
RANGE $2DCE-$2DD0 DB_DATA 2
RANGE $2DD0-$2DD2 DB_DATA 2
RANGE $2DD2-$2DD4 DB_DATA 2
RANGE $2DD4-$2DD6 DB_DATA 2
RANGE $2DD6-$2DD8 DW_DATA 1
RANGE $2DD8-$2DDA DB_DATA 2
RANGE $2DDA-$2DDC DB_DATA 2
RANGE $2DDC-$2DDE DB_DATA 2
RANGE $2DDE-$2DE0 DB_DATA 2
RANGE $2DE0-$2DE2 DB_DATA 2
RANGE $2DE2-$2DE4 DB_DATA 2
RANGE $2DE4-$2DE6 DB_DATA 2
RANGE $2DE6-$2DE8 DB_DATA 2
RANGE $2DE8-$2DEA DB_DATA 2
RANGE $2DEA-$2DEC DW_DATA 1
RANGE $2DEC-$2DEE DB_DATA 2
RANGE $2DEE-$2DF0 DB_DATA 2
RANGE $2DF0-$2DF2 DB_DATA 2
RANGE $2DF2-$2DF4 DB_DATA 2
RANGE $2DF4-$2DF6 DB_DATA 2
RANGE $2DF6-$2DF8 DB_DATA 2
RANGE $2DF8-$2DFA DW_DATA 1
RANGE $2DFA-$2DFC DB_DATA 2
RANGE $2DFC-$2DFE DB_DATA 2
RANGE $2DFE-$2E00 DB_DATA 2
RANGE $2E00-$2E02 DB_DATA 2
RANGE $2E02-$2E04 DB_DATA 2
RANGE $2E04-$2E06 DB_DATA 2
RANGE $2E06-$2E08 DB_DATA 2
RANGE $2E08-$2E0A DB_DATA 2
RANGE $2E0A-$2E0C DB_DATA 2
RANGE $2E0C-$2E0E DB_DATA 2
RANGE $2E0E-$2E10 DB_DATA 2
RANGE $2E10-$2E12 DB_DATA 2
RANGE $2E12-$2E14 DB_DATA 2
RANGE $2E14-$2E16 DB_DATA 2
RANGE $2E16-$2E18 DW_DATA 1
RANGE $2E18-$2E1A DB_DATA 2
RANGE $2E1A-$2E1C DB_DATA 2
RANGE $2E1C-$2E1E DB_DATA 2
RANGE $2E1E-$2E20 DB_DATA 2
RANGE $2E20-$2E22 DB_DATA 2
RANGE $2E22-$2E24 DB_DATA 2
RANGE $2E24-$2E26 DB_DATA 2
RANGE $2E26-$2E28 DB_DATA 2
RANGE $2E28-$2E2A DB_DATA 2
RANGE $2E2A-$2E2C DW_DATA 1
RANGE $2E2C-$2E2E DB_DATA 2
RANGE $2E2E-$2E30 DB_DATA 2
RANGE $2E30-$2E32 DB_DATA 2
RANGE $2E32-$2E34 DB_DATA 2
RANGE $2E34-$2E35 DB_DATA 1
RANGE $2E35-$2E37 DW_DATA 1
RANGE $2E37-$2E38 DB_DATA 1
RANGE $2E38-$2E39 DB_DATA 1
RANGE $2E39-$2E3B DW_DATA 1
RANGE $2E3B-$2E3C DB_DATA 1
RANGE $2E3C-$2E3D DB_DATA 1
RANGE $2E3D-$2E3E DB_DATA 1
RANGE $2E3E-$2E3F DB_DATA 1
RANGE $2E3F-$2E41 DW_DATA 1
RANGE $2E41-$2E42 DB_DATA 1
RANGE $2E42-$2E44 DW_DATA 1
RANGE $2E44-$2E45 DB_DATA 1
RANGE $2E45-$2E46 DB_DATA 1
RANGE $2E46-$2E48 DW_DATA 1
RANGE $2E48-$2E49 DB_DATA 1
RANGE $2E49-$2E4A DB_DATA 1
RANGE $2E4A-$2E4B DB_DATA 1
RANGE $2E4B-$2E4C DB_DATA 1
RANGE $2E4C-$2E4E DW_DATA 1
RANGE $2E4E-$2E4F DB_DATA 1
RANGE $2E4F-$2E51 DW_DATA 1
RANGE $2E51-$2E52 DB_DATA 1
RANGE $2E52-$2E53 DB_DATA 1
RANGE $2E53-$2E55 DW_DATA 1
RANGE $2E55-$2E56 DB_DATA 1
RANGE $2E56-$2E57 DB_DATA 1
RANGE $2E57-$2E58 DB_DATA 1
RANGE $2E58-$2E59 DB_DATA 1
RANGE $2E59-$2E5B DW_DATA 1
RANGE $2E5B-$2E5C DB_DATA 1
RANGE $2E5C-$2E5E DW_DATA 1
RANGE $2E5E-$2E5F DB_DATA 1
RANGE $2E5F-$2E60 DB_DATA 1
RANGE $2E60-$2E62 DW_DATA 1
RANGE $2E62-$2E63 DB_DATA 1
RANGE $2E63-$2E64 DB_DATA 1
RANGE $2E64-$2E65 DB_DATA 1
RANGE $2E65-$2E66 DB_DATA 1
RANGE $2E66-$2E68 DW_DATA 1
RANGE $2E68-$2E69 DB_DATA 1
RANGE $2E69-$2E6B DW_DATA 1
RANGE $2E6B-$2E6C DB_DATA 1
RANGE $2E6C-$2E6D DB_DATA 1
RANGE $2E6D-$2E6F DW_DATA 1
RANGE $2E6F-$2E70 DB_DATA 1
RANGE $2E70-$2E71 DB_DATA 1
RANGE $2E71-$2E72 DB_DATA 1
RANGE $2E72-$2E73 DB_DATA 1
RANGE $2E73-$2E75 DW_DATA 1
RANGE $2E75-$2E76 DB_DATA 1
RANGE $2E76-$2E78 DW_DATA 1
RANGE $2E78-$2E79 DB_DATA 1
RANGE $2E79-$2E7A DB_DATA 1
RANGE $2E7A-$2E7C DW_DATA 1
RANGE $2E7C-$2E7D DB_DATA 1
RANGE $2E7D-$2E7E DB_DATA 1
RANGE $2E7E-$2E7F DB_DATA 1
RANGE $2E7F-$2E80 DB_DATA 1
RANGE $2E80-$2E82 DW_DATA 1
RANGE $2E82-$2E83 DB_DATA 1
RANGE $2E83-$2E85 DW_DATA 1
RANGE $2E85-$2E86 DB_DATA 1
RANGE $2E86-$2E87 DB_DATA 1
RANGE $2E87-$2E89 DW_DATA 1
RANGE $2E89-$2E8A DB_DATA 1
RANGE $2E8A-$2E8B DB_DATA 1
RANGE $2E8B-$2E8C DB_DATA 1
RANGE $2E8C-$2E8D DB_DATA 1
RANGE $2E8D-$2E8F DW_DATA 1
RANGE $2E8F-$2E90 DB_DATA 1
RANGE $2E90-$2E92 DW_DATA 1
RANGE $2E92-$2E93 DB_DATA 1
RANGE $2E93-$2E94 DB_DATA 1
RANGE $2E94-$2E96 DW_DATA 1
RANGE $2E96-$2E97 DB_DATA 1
RANGE $2E97-$2E98 DB_DATA 1
RANGE $2E98-$2E99 DB_DATA 1
RANGE $2E99-$2E9A DB_DATA 1
RANGE $2E9A-$2E9C DW_DATA 1
RANGE $2E9C-$2E9D DB_DATA 1
RANGE $2E9D-$2E9F DW_DATA 1
RANGE $2E9F-$2EA0 DB_DATA 1
RANGE $2EA0-$2EA1 DB_DATA 1
RANGE $2EA1-$2EA3 DW_DATA 1
RANGE $2EA3-$2EA4 DB_DATA 1
RANGE $2EA4-$2EA5 DB_DATA 1
RANGE $2EA5-$2EA6 DB_DATA 1
RANGE $2EA6-$2EA7 DB_DATA 1
RANGE $2EA7-$2EA9 DW_DATA 1
RANGE $2EA9-$2EAA DB_DATA 1
RANGE $2EAA-$2EAC DW_DATA 1
RANGE $2EAC-$2EAD DB_DATA 1
RANGE $2EAD-$2EAE DB_DATA 1
RANGE $2EAE-$2EB0 DW_DATA 1
RANGE $2EB0-$2EB1 DB_DATA 1
RANGE $2EB1-$2EB2 DB_DATA 1
RANGE $2EB2-$2EB3 DB_DATA 1
RANGE $2EB3-$2EB4 DB_DATA 1
RANGE $2EB4-$2EB6 DW_DATA 1
RANGE $2EB6-$2EB7 DB_DATA 1
RANGE $2EB7-$2EB9 DW_DATA 1
RANGE $2EB9-$2EBA DB_DATA 1
RANGE $2EBA-$2EBB DB_DATA 1
RANGE $2EBB-$2EBD DW_DATA 1
RANGE $2EBD-$2EBE DB_DATA 1
RANGE $2EBE-$2EBF DB_DATA 1
RANGE $2EBF-$2EC0 DB_DATA 1
RANGE $2EC0-$2EC1 DB_DATA 1
RANGE $2EC1-$2EC3 DW_DATA 1
RANGE $2EC3-$2EC4 DB_DATA 1
RANGE $2EC4-$2EC6 DW_DATA 1
RANGE $2EC6-$2EC7 DB_DATA 1
RANGE $2EC7-$2EC8 DB_DATA 1
RANGE $2EC8-$2ECA DW_DATA 1
RANGE $2ECA-$2ECB DB_DATA 1
RANGE $2ECB-$2ECC DB_DATA 1
RANGE $2ECC-$2ECD DB_DATA 1
RANGE $2ECD-$2ECE DB_DATA 1
RANGE $2ECE-$2ED0 DW_DATA 1
RANGE $2ED0-$2ED1 DB_DATA 1
RANGE $2ED1-$2ED3 DW_DATA 1
RANGE $2ED3-$2ED4 DB_DATA 1
RANGE $2ED4-$2ED5 DB_DATA 1
RANGE $2ED5-$2ED7 DW_DATA 1
RANGE $2ED7-$2ED8 DB_DATA 1
RANGE $2ED8-$2ED9 DB_DATA 1
RANGE $2ED9-$2EDA DB_DATA 1
RANGE $2EDA-$2EDB DB_DATA 1
RANGE $2EDB-$2EDD DW_DATA 1
RANGE $2EDD-$2EDE DB_DATA 1
RANGE $2EDE-$2EE0 DW_DATA 1
RANGE $2EE0-$2EE1 DB_DATA 1
RANGE $2EE1-$2EE2 DB_DATA 1
RANGE $2EE2-$2EE4 DW_DATA 1
RANGE $2EE4-$2EE5 DB_DATA 1
RANGE $2EE5-$2EE6 DB_DATA 1
RANGE $2EE6-$2EE7 DB_DATA 1
RANGE $2EE7-$2EE8 DB_DATA 1
RANGE $2EE8-$2EEA DW_DATA 1
RANGE $2EEA-$2EEB DB_DATA 1
RANGE $2EEB-$2EED DW_DATA 1
RANGE $2EED-$2EEE DB_DATA 1
RANGE $2EEE-$2EEF DB_DATA 1
RANGE $2EEF-$2EF1 DW_DATA 1
RANGE $2EF1-$2EF2 DB_DATA 1
RANGE $2EF2-$2EF3 DB_DATA 1
RANGE $2EF3-$2EF4 DB_DATA 1
RANGE $2EF4-$2EF5 DB_DATA 1
RANGE $2EF5-$2EF7 DW_DATA 1
RANGE $2EF7-$2EF8 DB_DATA 1
RANGE $2EF8-$2EFA DW_DATA 1
RANGE $2EFA-$2EFB DB_DATA 1
RANGE $2EFB-$2EFC DB_DATA 1
RANGE $2EFC-$2EFE DW_DATA 1
RANGE $2EFE-$2EFF DB_DATA 1
RANGE $2EFF-$2F00 DB_DATA 1
RANGE $2F00-$2F01 DB_DATA 1
RANGE $2F01-$2F02 DB_DATA 1
RANGE $2F02-$2F04 DW_DATA 1
RANGE $2F04-$2F05 DB_DATA 1
RANGE $2F05-$2F07 DW_DATA 1
RANGE $2F07-$2F08 DB_DATA 1
RANGE $2F08-$2F09 DB_DATA 1
RANGE $2F09-$2F0B DW_DATA 1
RANGE $2F0B-$2F0C DB_DATA 1
RANGE $2F0C-$2F0D DB_DATA 1
RANGE $2F0D-$2F0E DB_DATA 1
RANGE $2F0E-$2F0F DB_DATA 1
RANGE $2F0F-$2F11 DW_DATA 1
RANGE $2F11-$2F12 DB_DATA 1
RANGE $2F12-$2F14 DW_DATA 1
RANGE $2F14-$2F15 DB_DATA 1
RANGE $2F15-$2F16 DB_DATA 1
RANGE $2F16-$2F18 DW_DATA 1
RANGE $2F18-$2F19 DB_DATA 1
RANGE $2F19-$2F1A DB_DATA 1
RANGE $2F1A-$2F1B DB_DATA 1
RANGE $2F1B-$2F1C DB_DATA 1
RANGE $2F1C-$2F1E DW_DATA 1
RANGE $2F1E-$2F1F DB_DATA 1
RANGE $2F1F-$2F21 DW_DATA 1
RANGE $2F21-$2F22 DB_DATA 1
RANGE $2F22-$2F23 DB_DATA 1
RANGE $2F23-$2F25 DW_DATA 1
RANGE $2F25-$2F26 DB_DATA 1
RANGE $2F26-$2F27 DB_DATA 1
RANGE $2F27-$2F28 DB_DATA 1
RANGE $2F28-$2F29 DB_DATA 1
RANGE $2F29-$2F2B DW_DATA 1
RANGE $2F2B-$2F2C DB_DATA 1
RANGE $2F2C-$2F2E DW_DATA 1
RANGE $2F2E-$2F2F DB_DATA 1
RANGE $2F2F-$2F30 DB_DATA 1
RANGE $2F30-$2F32 DW_DATA 1
RANGE $2F32-$2F33 DB_DATA 1
RANGE $2F33-$2F34 DB_DATA 1
RANGE $2F34-$2F35 DB_DATA 1
RANGE $2F35-$2F36 DB_DATA 1
RANGE $2F36-$2F38 DW_DATA 1
RANGE $2F38-$2F3A DW_DATA 1
RANGE $2F3A-$2F3C DB_DATA 2
RANGE $2F3C-$2F3E DB_DATA 2
RANGE $2F3E-$2F40 DB_DATA 2
RANGE $2F40-$2F42 DB_DATA 2
RANGE $2F42-$2F44 DB_DATA 2
RANGE $2F44-$2F46 DB_DATA 2
RANGE $2F46-$2F48 DB_DATA 2
RANGE $2F48-$2F4A DB_DATA 2
RANGE $2F4A-$2F4C DB_DATA 2
RANGE $2F4C-$2F4E DW_DATA 1
RANGE $2F4E-$2F50 DB_DATA 2
RANGE $2F50-$2F52 DB_DATA 2
RANGE $2F52-$2F54 DB_DATA 2
RANGE $2F54-$2F56 DB_DATA 2
RANGE $2F56-$2F58 DB_DATA 2
RANGE $2F58-$2F5A DB_DATA 2
RANGE $2F5A-$2F5C DB_DATA 2
RANGE $2F5C-$2F5E DB_DATA 2
RANGE $2F5E-$2F60 DB_DATA 2
RANGE $2F60-$2F62 DW_DATA 1
RANGE $2F62-$2F64 DB_DATA 2
RANGE $2F64-$2F66 DB_DATA 2
RANGE $2F66-$2F68 DB_DATA 2
RANGE $2F68-$2F6A DB_DATA 2
RANGE $2F6A-$2F6C DB_DATA 2
RANGE $2F6C-$2F6E DB_DATA 2
RANGE $2F6E-$2F70 DB_DATA 2
RANGE $2F70-$2F72 DB_DATA 2
RANGE $2F72-$2F74 DB_DATA 2
RANGE $2F74-$2F76 DB_DATA 2
RANGE $2F76-$2F78 DB_DATA 2
RANGE $2F78-$2F7A DB_DATA 2
RANGE $2F7A-$2F7C DB_DATA 2
RANGE $2F7C-$2F7E DB_DATA 2
RANGE $2F7E-$2F80 DW_DATA 1
RANGE $2F80-$2F82 DB_DATA 2
RANGE $2F82-$2F84 DB_DATA 2
RANGE $2F84-$2F86 DB_DATA 2
RANGE $2F86-$2F88 DB_DATA 2
RANGE $2F88-$2F8A DB_DATA 2
RANGE $2F8A-$2F8C DB_DATA 2
RANGE $2F8C-$2F8E DB_DATA 2
RANGE $2F8E-$2F90 DB_DATA 2
RANGE $2F90-$2F92 DB_DATA 2
RANGE $2F92-$2F94 DW_DATA 1
RANGE $2F94-$2F96 DB_DATA 2
RANGE $2F96-$2F98 DB_DATA 2
RANGE $2F98-$2F9A DB_DATA 2
RANGE $2F9A-$2F9C DB_DATA 2
RANGE $2F9C-$2F9D DB_DATA 1
RANGE $2F9D-$2F9F DW_DATA 1
RANGE $2F9F-$2FA0 DB_DATA 1
RANGE $2FA0-$2FA1 DB_DATA 1
RANGE $2FA1-$2FA3 DW_DATA 1
RANGE $2FA3-$2FA4 DB_DATA 1
RANGE $2FA4-$2FA5 DB_DATA 1
RANGE $2FA5-$2FA6 DB_DATA 1
RANGE $2FA6-$2FA7 DB_DATA 1
RANGE $2FA7-$2FA9 DW_DATA 1
RANGE $2FA9-$2FAA DB_DATA 1
RANGE $2FAA-$2FAC DW_DATA 1
RANGE $2FAC-$2FAD DB_DATA 1
RANGE $2FAD-$2FAE DB_DATA 1
RANGE $2FAE-$2FB0 DW_DATA 1
RANGE $2FB0-$2FB1 DB_DATA 1
RANGE $2FB1-$2FB2 DB_DATA 1
RANGE $2FB2-$2FB3 DB_DATA 1
RANGE $2FB3-$2FB4 DB_DATA 1
RANGE $2FB4-$2FB6 DW_DATA 1
RANGE $2FB6-$2FB7 DB_DATA 1
RANGE $2FB7-$2FB9 DW_DATA 1
RANGE $2FB9-$2FBA DB_DATA 1
RANGE $2FBA-$2FBB DB_DATA 1
RANGE $2FBB-$2FBD DW_DATA 1
RANGE $2FBD-$2FBE DB_DATA 1
RANGE $2FBE-$2FBF DB_DATA 1
RANGE $2FBF-$2FC0 DB_DATA 1
RANGE $2FC0-$2FC1 DB_DATA 1
RANGE $2FC1-$2FC3 DW_DATA 1
RANGE $2FC3-$2FC4 DB_DATA 1
RANGE $2FC4-$2FC6 DW_DATA 1
RANGE $2FC6-$2FC7 DB_DATA 1
RANGE $2FC7-$2FC8 DB_DATA 1
RANGE $2FC8-$2FCA DW_DATA 1
RANGE $2FCA-$2FCB DB_DATA 1
RANGE $2FCB-$2FCC DB_DATA 1
RANGE $2FCC-$2FCD DB_DATA 1
RANGE $2FCD-$2FCE DB_DATA 1
RANGE $2FCE-$2FD0 DW_DATA 1
RANGE $2FD0-$2FD1 DB_DATA 1
RANGE $2FD1-$2FD3 DW_DATA 1
RANGE $2FD3-$2FD4 DB_DATA 1
RANGE $2FD4-$2FD5 DB_DATA 1
RANGE $2FD5-$2FD7 DW_DATA 1
RANGE $2FD7-$2FD8 DB_DATA 1
RANGE $2FD8-$2FD9 DB_DATA 1
RANGE $2FD9-$2FDA DB_DATA 1
RANGE $2FDA-$2FDB DB_DATA 1
RANGE $2FDB-$2FDD DW_DATA 1
RANGE $2FDD-$2FDE DB_DATA 1
RANGE $2FDE-$2FE0 DW_DATA 1
RANGE $2FE0-$2FE1 DB_DATA 1
RANGE $2FE1-$2FE2 DB_DATA 1
RANGE $2FE2-$2FE4 DW_DATA 1
RANGE $2FE4-$2FE5 DB_DATA 1
RANGE $2FE5-$2FE6 DB_DATA 1
RANGE $2FE6-$2FE7 DB_DATA 1
RANGE $2FE7-$2FE8 DB_DATA 1
RANGE $2FE8-$2FEA DW_DATA 1
RANGE $2FEA-$2FEB DB_DATA 1
RANGE $2FEB-$2FED DW_DATA 1
RANGE $2FED-$2FEE DB_DATA 1
RANGE $2FEE-$2FEF DB_DATA 1
RANGE $2FEF-$2FF1 DW_DATA 1
RANGE $2FF1-$2FF2 DB_DATA 1
RANGE $2FF2-$2FF3 DB_DATA 1
RANGE $2FF3-$2FF4 DB_DATA 1
RANGE $2FF4-$2FF5 DB_DATA 1
RANGE $2FF5-$2FF7 DW_DATA 1
RANGE $2FF7-$2FF8 DB_DATA 1
RANGE $2FF8-$2FFA DW_DATA 1
RANGE $2FFA-$2FFB DB_DATA 1
RANGE $2FFB-$2FFC DB_DATA 1
RANGE $2FFC-$2FFE DW_DATA 1
RANGE $2FFE-$2FFF DB_DATA 1
RANGE $2FFF-$3000 DB_DATA 1
RANGE $3000-$3001 DB_DATA 1
RANGE $3001-$3002 DB_DATA 1
RANGE $3002-$3004 DW_DATA 1
RANGE $3004-$3005 DB_DATA 1
RANGE $3005-$3007 DW_DATA 1
RANGE $3007-$3008 DB_DATA 1
RANGE $3008-$3009 DB_DATA 1
RANGE $3009-$300B DW_DATA 1
RANGE $300B-$300C DB_DATA 1
RANGE $300C-$300D DB_DATA 1
RANGE $300D-$300E DB_DATA 1
RANGE $300E-$300F DB_DATA 1
RANGE $300F-$3011 DW_DATA 1
RANGE $3011-$3012 DB_DATA 1
RANGE $3012-$3014 DW_DATA 1
RANGE $3014-$3015 DB_DATA 1
RANGE $3015-$3016 DB_DATA 1
RANGE $3016-$3018 DW_DATA 1
RANGE $3018-$3019 DB_DATA 1
RANGE $3019-$301A DB_DATA 1
RANGE $301A-$301B DB_DATA 1
RANGE $301B-$301C DB_DATA 1
RANGE $301C-$301E DW_DATA 1
RANGE $301E-$301F DB_DATA 1
RANGE $301F-$3021 DW_DATA 1
RANGE $3021-$3022 DB_DATA 1
RANGE $3022-$3023 DB_DATA 1
RANGE $3023-$3025 DW_DATA 1
RANGE $3025-$3026 DB_DATA 1
RANGE $3026-$3027 DB_DATA 1
RANGE $3027-$3028 DB_DATA 1
RANGE $3028-$3029 DB_DATA 1
RANGE $3029-$302B DW_DATA 1
RANGE $302B-$302C DB_DATA 1
RANGE $302C-$302E DW_DATA 1
RANGE $302E-$302F DB_DATA 1
RANGE $302F-$3030 DB_DATA 1
RANGE $3030-$3032 DW_DATA 1
RANGE $3032-$3033 DB_DATA 1
RANGE $3033-$3034 DB_DATA 1
RANGE $3034-$3035 DB_DATA 1
RANGE $3035-$3036 DB_DATA 1
RANGE $3036-$3038 DW_DATA 1
RANGE $3038-$3039 DB_DATA 1
RANGE $3039-$303B DW_DATA 1
RANGE $303B-$303C DB_DATA 1
RANGE $303C-$303D DB_DATA 1
RANGE $303D-$303F DW_DATA 1
RANGE $303F-$3040 DB_DATA 1
RANGE $3040-$3041 DB_DATA 1
RANGE $3041-$3042 DB_DATA 1
RANGE $3042-$3043 DB_DATA 1
RANGE $3043-$3045 DW_DATA 1
RANGE $3045-$3046 DB_DATA 1
RANGE $3046-$3048 DW_DATA 1
RANGE $3048-$3049 DB_DATA 1
RANGE $3049-$304A DB_DATA 1
RANGE $304A-$304C DW_DATA 1
RANGE $304C-$304D DB_DATA 1
RANGE $304D-$304E DB_DATA 1
RANGE $304E-$304F DB_DATA 1
RANGE $304F-$3050 DB_DATA 1
RANGE $3050-$3052 DW_DATA 1
RANGE $3052-$3053 DB_DATA 1
RANGE $3053-$3055 DW_DATA 1
RANGE $3055-$3056 DB_DATA 1
RANGE $3056-$3057 DB_DATA 1
RANGE $3057-$3059 DW_DATA 1
RANGE $3059-$305A DB_DATA 1
RANGE $305A-$305B DB_DATA 1
RANGE $305B-$305C DB_DATA 1
RANGE $305C-$305D DB_DATA 1
RANGE $305D-$305F DW_DATA 1
RANGE $305F-$3060 DB_DATA 1
RANGE $3060-$3062 DW_DATA 1
RANGE $3062-$3063 DB_DATA 1
RANGE $3063-$3064 DB_DATA 1
RANGE $3064-$3066 DW_DATA 1
RANGE $3066-$3067 DB_DATA 1
RANGE $3067-$3068 DB_DATA 1
RANGE $3068-$3069 DB_DATA 1
RANGE $3069-$306A DB_DATA 1
RANGE $306A-$306C DW_DATA 1
RANGE $306C-$306D DB_DATA 1
RANGE $306D-$306F DW_DATA 1
RANGE $306F-$3070 DB_DATA 1
RANGE $3070-$3071 DB_DATA 1
RANGE $3071-$3073 DW_DATA 1
RANGE $3073-$3074 DB_DATA 1
RANGE $3074-$3075 DB_DATA 1
RANGE $3075-$3076 DB_DATA 1
RANGE $3076-$3077 DB_DATA 1
RANGE $3077-$3079 DW_DATA 1
RANGE $3079-$307A DB_DATA 1
RANGE $307A-$307C DW_DATA 1
RANGE $307C-$307D DB_DATA 1
RANGE $307D-$307E DB_DATA 1
RANGE $307E-$3080 DW_DATA 1
RANGE $3080-$3081 DB_DATA 1
RANGE $3081-$3082 DB_DATA 1
RANGE $3082-$3083 DB_DATA 1
RANGE $3083-$3084 DB_DATA 1
RANGE $3084-$3086 DW_DATA 1
RANGE $3086-$3087 DB_DATA 1
RANGE $3087-$3089 DW_DATA 1
RANGE $3089-$308A DB_DATA 1
RANGE $308A-$308B DB_DATA 1
RANGE $308B-$308D DW_DATA 1
RANGE $308D-$308E DB_DATA 1
RANGE $308E-$308F DB_DATA 1
RANGE $308F-$3090 DB_DATA 1
RANGE $3090-$3091 DB_DATA 1
RANGE $3091-$3093 DW_DATA 1
RANGE $3093-$3094 DB_DATA 1
RANGE $3094-$3096 DW_DATA 1
RANGE $3096-$3097 DB_DATA 1
RANGE $3097-$3098 DB_DATA 1
RANGE $3098-$309A DW_DATA 1
RANGE $309A-$309B DB_DATA 1
RANGE $309B-$309C DB_DATA 1
RANGE $309C-$309D DB_DATA 1
RANGE $309D-$309E DB_DATA 1
RANGE $309E-$30A0 DW_DATA 1
RANGE $30A0-$30A2 DW_DATA 1
RANGE $30A2-$30A4 DB_DATA 2
RANGE $30A4-$30A6 DB_DATA 2
RANGE $30A6-$30A8 DB_DATA 2
RANGE $30A8-$30AA DB_DATA 2
RANGE $30AA-$30AC DB_DATA 2
RANGE $30AC-$30AE DB_DATA 2
RANGE $30AE-$30B0 DB_DATA 2
RANGE $30B0-$30B2 DB_DATA 2
RANGE $30B2-$30B4 DB_DATA 2
RANGE $30B4-$30B6 DB_DATA 2
RANGE $30B6-$30B8 DB_DATA 2
RANGE $30B8-$30B9 DB_DATA 1
RANGE $30B9-$30BB DW_DATA 1
RANGE $30BB-$30BC DB_DATA 1
RANGE $30BC-$30BD DB_DATA 1
RANGE $30BD-$30BF DW_DATA 1
RANGE $30BF-$30C0 DB_DATA 1
RANGE $30C0-$30C1 DB_DATA 1
RANGE $30C1-$30C2 DB_DATA 1
RANGE $30C2-$30C3 DB_DATA 1
RANGE $30C3-$30C5 DW_DATA 1
RANGE $30C5-$30C7 DB_DATA 2
RANGE $30C7-$30C9 DB_DATA 2
RANGE $30C9-$30CB DB_DATA 2
RANGE $30CB-$30CD DB_DATA 2
RANGE $30CD-$30CF DB_DATA 2
RANGE $30CF-$30D1 DB_DATA 2
RANGE $30D1-$30D3 DB_DATA 2
RANGE $30D3-$30D5 DB_DATA 2
RANGE $30D5-$30D7 DB_DATA 2
RANGE $30D7-$30D9 DB_DATA 2
RANGE $30D9-$30DB DB_DATA 2
RANGE $30DB-$30DC DB_DATA 1
RANGE $30DC-$30DE DW_DATA 1
RANGE $30DE-$30DF DB_DATA 1
RANGE $30DF-$30E0 DB_DATA 1
RANGE $30E0-$30E2 DW_DATA 1
RANGE $30E2-$30E3 DB_DATA 1
RANGE $30E3-$30E4 DB_DATA 1
RANGE $30E4-$30E5 DB_DATA 1
RANGE $30E5-$30E6 DB_DATA 1
RANGE $30E6-$30E8 DW_DATA 1
RANGE $30E8-$30EA DB_DATA 2
RANGE $30EA-$30EC DB_DATA 2
RANGE $30EC-$30EE DB_DATA 2
RANGE $30EE-$30F0 DB_DATA 2
RANGE $30F0-$30F2 DB_DATA 2
RANGE $30F2-$30F4 DB_DATA 2
RANGE $30F4-$30F6 DB_DATA 2
RANGE $30F6-$30F8 DB_DATA 2
RANGE $30F8-$30FA DB_DATA 2
RANGE $30FA-$30FC DB_DATA 2
RANGE $30FC-$30FE DB_DATA 2
RANGE $30FE-$30FF DB_DATA 1
RANGE $30FF-$3101 DW_DATA 1
RANGE $3101-$3102 DB_DATA 1
RANGE $3102-$3103 DB_DATA 1
RANGE $3103-$3105 DW_DATA 1
RANGE $3105-$3106 DB_DATA 1
RANGE $3106-$3107 DB_DATA 1
RANGE $3107-$3108 DB_DATA 1
RANGE $3108-$3109 DB_DATA 1
RANGE $3109-$310A DB_DATA 1
RANGE $310A-$310C DW_DATA 1
RANGE $310C-$310D DB_DATA 1
RANGE $310D-$310E DB_DATA 1
RANGE $310E-$3110 DW_DATA 1
RANGE $3110-$3111 DB_DATA 1
RANGE $3111-$3112 DB_DATA 1
RANGE $3112-$3113 DB_DATA 1
RANGE $3113-$3114 DB_DATA 1
RANGE $3114-$3115 DB_DATA 1
RANGE $3115-$3117 DW_DATA 1
RANGE $3117-$3118 DB_DATA 1
RANGE $3118-$3119 DB_DATA 1
RANGE $3119-$311B DW_DATA 1
RANGE $311B-$311C DB_DATA 1
RANGE $311C-$311D DB_DATA 1
RANGE $311D-$311E DB_DATA 1
RANGE $311E-$311F DB_DATA 1
RANGE $311F-$3120 DB_DATA 1
RANGE $3120-$3122 DW_DATA 1
RANGE $3122-$3123 DB_DATA 1
RANGE $3123-$3124 DB_DATA 1
RANGE $3124-$3126 DW_DATA 1
RANGE $3126-$3127 DB_DATA 1
RANGE $3127-$3128 DB_DATA 1
RANGE $3128-$3129 DB_DATA 1
RANGE $3129-$312A DB_DATA 1
RANGE $312A-$312B DB_DATA 1
RANGE $312B-$312D DW_DATA 1
RANGE $312D-$312E DB_DATA 1
RANGE $312E-$312F DB_DATA 1
RANGE $312F-$3131 DW_DATA 1
RANGE $3131-$3132 DB_DATA 1
RANGE $3132-$3133 DB_DATA 1
RANGE $3133-$3134 DB_DATA 1
RANGE $3134-$3135 DB_DATA 1
RANGE $3135-$3136 DB_DATA 1
RANGE $3136-$3138 DW_DATA 1
RANGE $3138-$3139 DB_DATA 1
RANGE $3139-$313A DB_DATA 1
RANGE $313A-$313C DW_DATA 1
RANGE $313C-$313D DB_DATA 1
RANGE $313D-$313E DB_DATA 1
RANGE $313E-$313F DB_DATA 1
RANGE $313F-$3140 DB_DATA 1
RANGE $3140-$3142 DW_DATA 1
RANGE $3142-$3144 DB_DATA 2
RANGE $3144-$3146 DB_DATA 2
RANGE $3146-$3148 DB_DATA 2
RANGE $3148-$314A DB_DATA 2
RANGE $314A-$314C DB_DATA 2
RANGE $314C-$314E DB_DATA 2
RANGE $314E-$3150 DB_DATA 2
RANGE $3150-$3152 DB_DATA 2
RANGE $3152-$3154 DB_DATA 2
RANGE $3154-$3156 DB_DATA 2
RANGE $3156-$3158 DB_DATA 2
RANGE $3158-$3159 DB_DATA 1
RANGE $3159-$315B DW_DATA 1
RANGE $315B-$315C DB_DATA 1
RANGE $315C-$315D DB_DATA 1
RANGE $315D-$315F DW_DATA 1
RANGE $315F-$3160 DB_DATA 1
RANGE $3160-$3161 DB_DATA 1
RANGE $3161-$3162 DB_DATA 1
RANGE $3162-$3163 DB_DATA 1
RANGE $3163-$3165 DW_DATA 1
RANGE $3165-$3167 DB_DATA 2
RANGE $3167-$3169 DB_DATA 2
RANGE $3169-$316B DB_DATA 2
RANGE $316B-$316D DB_DATA 2
RANGE $316D-$316F DB_DATA 2
RANGE $316F-$3171 DB_DATA 2
RANGE $3171-$3173 DB_DATA 2
RANGE $3173-$3175 DB_DATA 2
RANGE $3175-$3177 DB_DATA 2
RANGE $3177-$3179 DB_DATA 2
RANGE $3179-$317B DB_DATA 2
RANGE $317B-$317C DB_DATA 1
RANGE $317C-$317E DW_DATA 1
RANGE $317E-$317F DB_DATA 1
RANGE $317F-$3180 DB_DATA 1
RANGE $3180-$3182 DW_DATA 1
RANGE $3182-$3183 DB_DATA 1
RANGE $3183-$3184 DB_DATA 1
RANGE $3184-$3185 DB_DATA 1
RANGE $3185-$3186 DB_DATA 1
RANGE $3186-$3188 DW_DATA 1
RANGE $3188-$318A DB_DATA 2
RANGE $318A-$318C DB_DATA 2
RANGE $318C-$318E DB_DATA 2
RANGE $318E-$3190 DB_DATA 2
RANGE $3190-$3192 DB_DATA 2
RANGE $3192-$3194 DB_DATA 2
RANGE $3194-$3196 DB_DATA 2
RANGE $3196-$3198 DB_DATA 2
RANGE $3198-$319A DB_DATA 2
RANGE $319A-$319C DB_DATA 2
RANGE $319C-$319E DB_DATA 2
RANGE $319E-$319F DB_DATA 1
RANGE $319F-$31A1 DW_DATA 1
RANGE $31A1-$31A2 DB_DATA 1
RANGE $31A2-$31A3 DB_DATA 1
RANGE $31A3-$31A5 DW_DATA 1
RANGE $31A5-$31A6 DB_DATA 1
RANGE $31A6-$31A7 DB_DATA 1
RANGE $31A7-$31A8 DB_DATA 1
RANGE $31A8-$31A9 DB_DATA 1
RANGE $31A9-$31AA DB_DATA 1
RANGE $31AA-$31AC DW_DATA 1
RANGE $31AC-$31AD DB_DATA 1
RANGE $31AD-$31AE DB_DATA 1
RANGE $31AE-$31B0 DW_DATA 1
RANGE $31B0-$31B1 DB_DATA 1
RANGE $31B1-$31B2 DB_DATA 1
RANGE $31B2-$31B3 DB_DATA 1
RANGE $31B3-$31B4 DB_DATA 1
RANGE $31B4-$31B5 DB_DATA 1
RANGE $31B5-$31B7 DW_DATA 1
RANGE $31B7-$31B8 DB_DATA 1
RANGE $31B8-$31B9 DB_DATA 1
RANGE $31B9-$31BB DW_DATA 1
RANGE $31BB-$31BC DB_DATA 1
RANGE $31BC-$31BD DB_DATA 1
RANGE $31BD-$31BE DB_DATA 1
RANGE $31BE-$31BF DB_DATA 1
RANGE $31BF-$31C0 DB_DATA 1
RANGE $31C0-$31C2 DW_DATA 1
RANGE $31C2-$31C3 DB_DATA 1
RANGE $31C3-$31C4 DB_DATA 1
RANGE $31C4-$31C6 DW_DATA 1
RANGE $31C6-$31C7 DB_DATA 1
RANGE $31C7-$31C8 DB_DATA 1
RANGE $31C8-$31C9 DB_DATA 1
RANGE $31C9-$31CA DB_DATA 1
RANGE $31CA-$31CB DB_DATA 1
RANGE $31CB-$31CD DW_DATA 1
RANGE $31CD-$31CE DB_DATA 1
RANGE $31CE-$31CF DB_DATA 1
RANGE $31CF-$31D1 DW_DATA 1
RANGE $31D1-$31D2 DB_DATA 1
RANGE $31D2-$31D3 DB_DATA 1
RANGE $31D3-$31D4 DB_DATA 1
RANGE $31D4-$31D5 DB_DATA 1
RANGE $31D5-$31D6 DB_DATA 1
RANGE $31D6-$31D8 DW_DATA 1
RANGE $31D8-$31D9 DB_DATA 1
RANGE $31D9-$31DA DB_DATA 1
RANGE $31DA-$31DC DW_DATA 1
RANGE $31DC-$31DD DB_DATA 1
RANGE $31DD-$31DE DB_DATA 1
RANGE $31DE-$31DF DB_DATA 1
RANGE $31DF-$31E0 DB_DATA 1
RANGE $31E0-$31E2 DW_DATA 1
RANGE $31E2-$31E4 DB_DATA 2
RANGE $31E4-$31E6 DB_DATA 2
RANGE $31E6-$31E8 DB_DATA 2
RANGE $31E8-$31EA DB_DATA 2
RANGE $31EA-$31EC DB_DATA 2
RANGE $31EC-$31EE DB_DATA 2
RANGE $31EE-$31F0 DB_DATA 2
RANGE $31F0-$31F2 DB_DATA 2
RANGE $31F2-$31F4 DB_DATA 2
RANGE $31F4-$31F6 DB_DATA 2
RANGE $31F6-$31F8 DB_DATA 2
RANGE $31F8-$31FA DB_DATA 2
RANGE $31FA-$31FC DB_DATA 2
RANGE $31FC-$31FE DB_DATA 2
RANGE $31FE-$31FF DB_DATA 1
RANGE $31FF-$3201 DW_DATA 1
RANGE $3201-$3202 DB_DATA 1
RANGE $3202-$3203 DB_DATA 1
RANGE $3203-$3205 DW_DATA 1
RANGE $3205-$3206 DB_DATA 1
RANGE $3206-$3207 DB_DATA 1
RANGE $3207-$3208 DB_DATA 1
RANGE $3208-$3209 DB_DATA 1
RANGE $3209-$320B DW_DATA 1
RANGE $320B-$320D DB_DATA 2
RANGE $320D-$320F DB_DATA 2
RANGE $320F-$3211 DB_DATA 2
RANGE $3211-$3213 DB_DATA 2
RANGE $3213-$3215 DB_DATA 2
RANGE $3215-$3217 DB_DATA 2
RANGE $3217-$3219 DB_DATA 2
RANGE $3219-$321B DB_DATA 2
RANGE $321B-$321D DB_DATA 2
RANGE $321D-$321F DB_DATA 2
RANGE $321F-$3221 DB_DATA 2
RANGE $3221-$3223 DB_DATA 2
RANGE $3223-$3225 DB_DATA 2
RANGE $3225-$3227 DB_DATA 2
RANGE $3227-$3228 DB_DATA 1
RANGE $3228-$322A DW_DATA 1
RANGE $322A-$322B DB_DATA 1
RANGE $322B-$322C DB_DATA 1
RANGE $322C-$322E DW_DATA 1
RANGE $322E-$322F DB_DATA 1
RANGE $322F-$3230 DB_DATA 1
RANGE $3230-$3231 DB_DATA 1
RANGE $3231-$3232 DB_DATA 1
RANGE $3232-$3234 DW_DATA 1
RANGE $3234-$3236 DB_DATA 2
RANGE $3236-$3238 DB_DATA 2
RANGE $3238-$323A DB_DATA 2
RANGE $323A-$323C DB_DATA 2
RANGE $323C-$323E DB_DATA 2
RANGE $323E-$3240 DB_DATA 2
RANGE $3240-$3242 DB_DATA 2
RANGE $3242-$3244 DB_DATA 2
RANGE $3244-$3246 DB_DATA 2
RANGE $3246-$3248 DB_DATA 2
RANGE $3248-$324A DB_DATA 2
RANGE $324A-$324C DB_DATA 2
RANGE $324C-$324D DB_DATA 1
RANGE $324D-$324F DW_DATA 1
RANGE $324F-$3250 DB_DATA 1
RANGE $3250-$3251 DB_DATA 1
RANGE $3251-$3253 DW_DATA 1
RANGE $3253-$3254 DB_DATA 1
RANGE $3254-$3255 DB_DATA 1
RANGE $3255-$3256 DB_DATA 1
RANGE $3256-$3257 DB_DATA 1
RANGE $3257-$3258 DB_DATA 1
RANGE $3258-$325A DW_DATA 1
RANGE $325A-$325B DB_DATA 1
RANGE $325B-$325C DB_DATA 1
RANGE $325C-$325E DW_DATA 1
RANGE $325E-$325F DB_DATA 1
RANGE $325F-$3260 DB_DATA 1
RANGE $3260-$3261 DB_DATA 1
RANGE $3261-$3262 DB_DATA 1
RANGE $3262-$3263 DB_DATA 1
RANGE $3263-$3265 DW_DATA 1
RANGE $3265-$3266 DB_DATA 1
RANGE $3266-$3267 DB_DATA 1
RANGE $3267-$3269 DW_DATA 1
RANGE $3269-$326A DB_DATA 1
RANGE $326A-$326B DB_DATA 1
RANGE $326B-$326C DB_DATA 1
RANGE $326C-$326D DB_DATA 1
RANGE $326D-$326E DB_DATA 1
RANGE $326E-$3270 DW_DATA 1
RANGE $3270-$3271 DB_DATA 1
RANGE $3271-$3272 DB_DATA 1
RANGE $3272-$3274 DW_DATA 1
RANGE $3274-$3275 DB_DATA 1
RANGE $3275-$3276 DB_DATA 1
RANGE $3276-$3277 DB_DATA 1
RANGE $3277-$3278 DB_DATA 1
RANGE $3278-$3279 DB_DATA 1
RANGE $3279-$327B DB_DATA 2
RANGE $327B-$327D DB_DATA 2
RANGE $327D-$327F DB_DATA 2
RANGE $327F-$3281 DB_DATA 2
RANGE $3281-$3283 DB_DATA 2
RANGE $3283-$3285 DB_DATA 2
RANGE $3285-$3287 DB_DATA 2
RANGE $3287-$3289 DB_DATA 2
RANGE $3289-$328B DB_DATA 2
RANGE $328B-$328D DB_DATA 2
RANGE $328D-$328F DB_DATA 2
RANGE $328F-$3291 DB_DATA 2
RANGE $3291-$3293 DB_DATA 2
RANGE $3293-$3294 DB_DATA 1
RANGE $3294-$3296 DW_DATA 1
RANGE $3296-$3297 DB_DATA 1
RANGE $3297-$3298 DB_DATA 1
RANGE $3298-$329A DW_DATA 1
RANGE $329A-$329B DB_DATA 1
RANGE $329B-$329C DB_DATA 1
RANGE $329C-$329D DB_DATA 1
RANGE $329D-$329E DB_DATA 1
RANGE $329E-$329F DB_DATA 1
RANGE $329F-$32A1 DB_DATA 2
RANGE $32A1-$32A3 DB_DATA 2
RANGE $32A3-$32A5 DB_DATA 2
RANGE $32A5-$32A7 DB_DATA 2
RANGE $32A7-$32A9 DB_DATA 2
RANGE $32A9-$32AB DB_DATA 2
RANGE $32AB-$32AD DB_DATA 2
RANGE $32AD-$32AF DB_DATA 2
RANGE $32AF-$32B1 DB_DATA 2
RANGE $32B1-$32B3 DB_DATA 2
RANGE $32B3-$32B5 DB_DATA 2
RANGE $32B5-$32B7 DB_DATA 2
RANGE $32B7-$32B9 DB_DATA 2
RANGE $32B9-$32BB DB_DATA 2
RANGE $32BB-$32BD DB_DATA 2
RANGE $32BD-$32BF DB_DATA 2
RANGE $32BF-$32C0 DB_DATA 1
RANGE $32C0-$32C2 DW_DATA 1
RANGE $32C2-$32C3 DB_DATA 1
RANGE $32C3-$32C4 DB_DATA 1
RANGE $32C4-$32C6 DW_DATA 1
RANGE $32C6-$32C7 DB_DATA 1
RANGE $32C7-$32C8 DB_DATA 1
RANGE $32C8-$32C9 DB_DATA 1
RANGE $32C9-$32CA DB_DATA 1
RANGE $32CA-$32CB DB_DATA 1
RANGE $32CB-$32CD DB_DATA 2
RANGE $32CD-$32CF DB_DATA 2
RANGE $32CF-$32D1 DB_DATA 2
RANGE $32D1-$32D3 DB_DATA 2
RANGE $32D3-$32D5 DB_DATA 2
RANGE $32D5-$32D7 DB_DATA 2
RANGE $32D7-$32D9 DB_DATA 2
RANGE $32D9-$32DB DB_DATA 2
RANGE $32DB-$32DD DB_DATA 2
RANGE $32DD-$32DF DB_DATA 2
RANGE $32DF-$32E1 DB_DATA 2
RANGE $32E1-$32E3 DB_DATA 2
RANGE $32E3-$32E5 DB_DATA 2
RANGE $32E5-$32E7 DB_DATA 2
RANGE $32E7-$32E9 DB_DATA 2
RANGE $32E9-$32EB DB_DATA 2
RANGE $32EB-$32ED DB_DATA 2
RANGE $32ED-$32EF DB_DATA 2
RANGE $32EF-$32F0 DB_DATA 1
RANGE $32F0-$32F2 DW_DATA 1
RANGE $32F2-$32F3 DB_DATA 1
RANGE $32F3-$32F4 DB_DATA 1
RANGE $32F4-$32F6 DW_DATA 1
RANGE $32F6-$32F7 DB_DATA 1
RANGE $32F7-$32F8 DB_DATA 1
RANGE $32F8-$32F9 DB_DATA 1
RANGE $32F9-$32FA DB_DATA 1
RANGE $32FA-$32FB DB_DATA 1
RANGE $32FB-$32FD DB_DATA 2
RANGE $32FD-$32FF DB_DATA 2
RANGE $32FF-$3301 DB_DATA 2
RANGE $3301-$3303 DB_DATA 2
RANGE $3303-$3305 DB_DATA 2
RANGE $3305-$3307 DB_DATA 2
RANGE $3307-$3309 DB_DATA 2
RANGE $3309-$330B DB_DATA 2
RANGE $330B-$330D DB_DATA 2
RANGE $330D-$330F DB_DATA 2
RANGE $330F-$3311 DB_DATA 2
RANGE $3311-$3313 DB_DATA 2
RANGE $3313-$3315 DB_DATA 2
RANGE $3315-$3317 DB_DATA 2
RANGE $3317-$3319 DB_DATA 2
RANGE $3319-$331B DB_DATA 2
RANGE $331B-$331D DB_DATA 2
RANGE $331D-$331F DB_DATA 2
RANGE $331F-$3320 DB_DATA 1
RANGE $3320-$3322 DW_DATA 1
RANGE $3322-$3323 DB_DATA 1
RANGE $3323-$3324 DB_DATA 1
RANGE $3324-$3326 DW_DATA 1
RANGE $3326-$3327 DB_DATA 1
RANGE $3327-$3328 DB_DATA 1
RANGE $3328-$3329 DB_DATA 1
RANGE $3329-$332A DB_DATA 1
RANGE $332A-$332B DB_DATA 1
RANGE $332B-$332D DB_DATA 2
RANGE $332D-$332F DB_DATA 2
RANGE $332F-$3331 DB_DATA 2
RANGE $3331-$3333 DB_DATA 2
RANGE $3333-$3335 DB_DATA 2
RANGE $3335-$3337 DB_DATA 2
RANGE $3337-$3339 DB_DATA 2
RANGE $3339-$333B DB_DATA 2
RANGE $333B-$333D DB_DATA 2
RANGE $333D-$333F DB_DATA 2
RANGE $333F-$3341 DB_DATA 2
RANGE $3341-$3343 DB_DATA 2
RANGE $3343-$3345 DB_DATA 2
RANGE $3345-$3347 DB_DATA 2
RANGE $3347-$3349 DB_DATA 2
RANGE $3349-$334B DB_DATA 2
RANGE $334B-$334D DB_DATA 2
RANGE $334D-$334F DB_DATA 2
RANGE $334F-$3350 DB_DATA 1
RANGE $3350-$3352 DW_DATA 1
RANGE $3352-$3353 DB_DATA 1
RANGE $3353-$3354 DB_DATA 1
RANGE $3354-$3356 DW_DATA 1
RANGE $3356-$3357 DB_DATA 1
RANGE $3357-$3358 DB_DATA 1
RANGE $3358-$3359 DB_DATA 1
RANGE $3359-$335A DB_DATA 1
RANGE $335A-$335B DB_DATA 1
RANGE $335B-$335D DW_DATA 1
RANGE $335D-$335E DB_DATA 1
RANGE $335E-$335F DB_DATA 1
RANGE $335F-$3361 DW_DATA 1
RANGE $3361-$3362 DB_DATA 1
RANGE $3362-$3363 DB_DATA 1
RANGE $3363-$3364 DB_DATA 1
RANGE $3364-$3365 DB_DATA 1
RANGE $3365-$3366 DB_DATA 1
RANGE $3366-$3368 DB_DATA 2
RANGE $3368-$336A DB_DATA 2
RANGE $336A-$336C DB_DATA 2
RANGE $336C-$336E DB_DATA 2
RANGE $336E-$3370 DB_DATA 2
RANGE $3370-$3372 DB_DATA 2
RANGE $3372-$3374 DB_DATA 2
RANGE $3374-$3376 DB_DATA 2
RANGE $3376-$3378 DB_DATA 2
RANGE $3378-$337A DB_DATA 2
RANGE $337A-$337C DB_DATA 2
RANGE $337C-$337D DB_DATA 1
RANGE $337D-$337F DW_DATA 1
RANGE $337F-$3380 DB_DATA 1
RANGE $3380-$3381 DB_DATA 1
RANGE $3381-$3383 DW_DATA 1
RANGE $3383-$3384 DB_DATA 1
RANGE $3384-$3385 DB_DATA 1
RANGE $3385-$3386 DB_DATA 1
RANGE $3386-$3387 DB_DATA 1
RANGE $3387-$3388 DB_DATA 1
RANGE $3388-$338A DB_DATA 2
RANGE $338A-$338C DB_DATA 2
RANGE $338C-$338E DB_DATA 2
RANGE $338E-$3390 DB_DATA 2
RANGE $3390-$3392 DB_DATA 2
RANGE $3392-$3394 DB_DATA 2
RANGE $3394-$3396 DB_DATA 2
RANGE $3396-$3398 DB_DATA 2
RANGE $3398-$339A DB_DATA 2
RANGE $339A-$339C DB_DATA 2
RANGE $339C-$339E DB_DATA 2
RANGE $339E-$339F DB_DATA 1
RANGE $339F-$33A1 DW_DATA 1
RANGE $33A1-$33A2 DB_DATA 1
RANGE $33A2-$33A3 DB_DATA 1
RANGE $33A3-$33A5 DW_DATA 1
RANGE $33A5-$33A6 DB_DATA 1
RANGE $33A6-$33A7 DB_DATA 1
RANGE $33A7-$33A8 DB_DATA 1
RANGE $33A8-$33A9 DB_DATA 1
RANGE $33A9-$33AB DW_DATA 1
RANGE $33AB-$33AD DW_DATA 1
RANGE $33AD-$33AF DW_DATA 1
RANGE $33AF-$33B1 DW_DATA 1
RANGE $33B1-$33B3 DW_DATA 1
RANGE $33B3-$33B5 DW_DATA 1
RANGE $33B5-$33B7 DW_DATA 1
RANGE $33B7-$33B9 DW_DATA 1
RANGE $33B9-$33BB DW_DATA 1
RANGE $33BB-$33BD DW_DATA 1
RANGE $33BD-$33BF DW_DATA 1
RANGE $33BF-$33C1 DW_DATA 1
RANGE $33C1-$33C3 DW_DATA 1
RANGE $33C3-$33C5 DW_DATA 1
RANGE $33C5-$33C7 DW_DATA 1
RANGE $33C7-$33C9 DW_DATA 1
RANGE $33C9-$33CB DW_DATA 1
RANGE $33CB-$33CD DW_DATA 1
RANGE $33CD-$33CF DW_DATA 1
RANGE $33CF-$33D1 DW_DATA 1
RANGE $33D1-$33D3 DW_DATA 1
RANGE $33D3-$33D5 DW_DATA 1
RANGE $33D5-$33D7 DW_DATA 1
RANGE $33D7-$33D9 DW_DATA 1
RANGE $33D9-$33DB DW_DATA 1
RANGE $33DB-$33DD DW_DATA 1
RANGE $33DD-$33DF DW_DATA 1
RANGE $33DF-$33E1 DW_DATA 1
RANGE $33E1-$33E3 DW_DATA 1
RANGE $33E3-$33E5 DW_DATA 1
RANGE $33E5-$33E7 DW_DATA 1
RANGE $33E7-$33E9 DW_DATA 1
RANGE $33E9-$33EB DW_DATA 1
RANGE $33EB-$33ED DW_DATA 1
RANGE $33ED-$33EF DW_DATA 1
RANGE $33EF-$33F1 DW_DATA 1
RANGE $33F1-$33F3 DW_DATA 1
RANGE $33F3-$33F5 DW_DATA 1
RANGE $33F5-$33F7 DW_DATA 1
RANGE $33F7-$33F9 DW_DATA 1
RANGE $33F9-$33FB DW_DATA 1
RANGE $33FB-$33FD DW_DATA 1
RANGE $33FD-$33FF DW_DATA 1
RANGE $33FF-$3401 DW_DATA 1
RANGE $3401-$3403 DW_DATA 1
RANGE $3403-$3405 DW_DATA 1
RANGE $3405-$3407 DW_DATA 1
RANGE $3407-$3413 DB_DATA 12
RANGE $3413-$341F DB_DATA 12
RANGE $341F-$342B DB_DATA 12
RANGE $342B-$3437 DB_DATA 12
RANGE $3437-$3443 DB_DATA 12
RANGE $3443-$344F DB_DATA 12
RANGE $344F-$345B DB_DATA 12
RANGE $345B-$3467 DB_DATA 12
RANGE $3467-$3473 DB_DATA 12
RANGE $3473-$347F DB_DATA 12
RANGE $347F-$348B DB_DATA 12
RANGE $348B-$348C DB_DATA 1
RANGE $348C-$348D DB_DATA 1
RANGE $348D-$348E DB_DATA 1
RANGE $348E-$348F DB_DATA 1
RANGE $348F-$3490 DB_DATA 1
RANGE $3490-$3491 DB_DATA 1
RANGE $3491-$3492 DB_DATA 1
RANGE $3492-$349E DB_DATA 12
RANGE $349E-$34AA DB_DATA 12
RANGE $34AA-$34B6 DB_DATA 12
RANGE $34B6-$34C2 DB_DATA 12
RANGE $34C2-$34CE DB_DATA 12
RANGE $34CE-$34DA DB_DATA 12
RANGE $34DA-$34E6 DB_DATA 12
RANGE $34E6-$34F2 DB_DATA 12
RANGE $34F2-$34FE DB_DATA 12
RANGE $34FE-$350A DB_DATA 12
RANGE $350A-$3516 DB_DATA 12
RANGE $3516-$3517 DB_DATA 1
RANGE $3517-$3518 DB_DATA 1
RANGE $3518-$3519 DB_DATA 1
RANGE $3519-$351A DB_DATA 1
RANGE $351A-$351B DB_DATA 1
RANGE $351B-$351C DB_DATA 1
RANGE $351C-$351D DB_DATA 1
RANGE $351D-$3529 DB_DATA 12
RANGE $3529-$3535 DB_DATA 12
RANGE $3535-$3541 DB_DATA 12
RANGE $3541-$354D DB_DATA 12
RANGE $354D-$3559 DB_DATA 12
RANGE $3559-$3565 DB_DATA 12
RANGE $3565-$3571 DB_DATA 12
RANGE $3571-$357D DB_DATA 12
RANGE $357D-$3589 DB_DATA 12
RANGE $3589-$3595 DB_DATA 12
RANGE $3595-$35A1 DB_DATA 12
RANGE $35A1-$35A2 DB_DATA 1
RANGE $35A2-$35A3 DB_DATA 1
RANGE $35A3-$35A4 DB_DATA 1
RANGE $35A4-$35A5 DB_DATA 1
RANGE $35A5-$35A6 DB_DATA 1
RANGE $35A6-$35A7 DB_DATA 1
RANGE $35A7-$35A8 DB_DATA 1
RANGE $35A8-$35B4 DB_DATA 12
RANGE $35B4-$35C0 DB_DATA 12
RANGE $35C0-$35CC DB_DATA 12
RANGE $35CC-$35D8 DB_DATA 12
RANGE $35D8-$35E4 DB_DATA 12
RANGE $35E4-$35F0 DB_DATA 12
RANGE $35F0-$35FC DB_DATA 12
RANGE $35FC-$3608 DB_DATA 12
RANGE $3608-$3614 DB_DATA 12
RANGE $3614-$3620 DB_DATA 12
RANGE $3620-$362C DB_DATA 12
RANGE $362C-$362D DB_DATA 1
RANGE $362D-$362E DB_DATA 1
RANGE $362E-$362F DB_DATA 1
RANGE $362F-$3630 DB_DATA 1
RANGE $3630-$3631 DB_DATA 1
RANGE $3631-$3632 DB_DATA 1
RANGE $3632-$3633 DB_DATA 1
RANGE $3633-$363F DB_DATA 12
RANGE $363F-$364B DB_DATA 12
RANGE $364B-$3657 DB_DATA 12
RANGE $3657-$3663 DB_DATA 12
RANGE $3663-$366F DB_DATA 12
RANGE $366F-$367B DB_DATA 12
RANGE $367B-$3687 DB_DATA 12
RANGE $3687-$3693 DB_DATA 12
RANGE $3693-$369F DB_DATA 12
RANGE $369F-$36AB DB_DATA 12
RANGE $36AB-$36B7 DB_DATA 12
RANGE $36B7-$36B8 DB_DATA 1
RANGE $36B8-$36B9 DB_DATA 1
RANGE $36B9-$36BA DB_DATA 1
RANGE $36BA-$36BB DB_DATA 1
RANGE $36BB-$36BC DB_DATA 1
RANGE $36BC-$36BD DB_DATA 1
RANGE $36BD-$36BE DB_DATA 1
RANGE $36BE-$36CA DB_DATA 12
RANGE $36CA-$36D6 DB_DATA 12
RANGE $36D6-$36E2 DB_DATA 12
RANGE $36E2-$36EE DB_DATA 12
RANGE $36EE-$36FA DB_DATA 12
RANGE $36FA-$3706 DB_DATA 12
RANGE $3706-$3712 DB_DATA 12
RANGE $3712-$371E DB_DATA 12
RANGE $371E-$372A DB_DATA 12
RANGE $372A-$3736 DB_DATA 12
RANGE $3736-$3742 DB_DATA 12
RANGE $3742-$3743 DB_DATA 1
RANGE $3743-$3744 DB_DATA 1
RANGE $3744-$3745 DB_DATA 1
RANGE $3745-$3746 DB_DATA 1
RANGE $3746-$3747 DB_DATA 1
RANGE $3747-$3748 DB_DATA 1
RANGE $3748-$3749 DB_DATA 1
RANGE $3749-$3755 DB_DATA 12
RANGE $3755-$3761 DB_DATA 12
RANGE $3761-$376D DB_DATA 12
RANGE $376D-$3779 DB_DATA 12
RANGE $3779-$3785 DB_DATA 12
RANGE $3785-$3791 DB_DATA 12
RANGE $3791-$379D DB_DATA 12
RANGE $379D-$37A9 DB_DATA 12
RANGE $37A9-$37B5 DB_DATA 12
RANGE $37B5-$37C1 DB_DATA 12
RANGE $37C1-$37CD DB_DATA 12
RANGE $37CD-$37CE DB_DATA 1
RANGE $37CE-$37CF DB_DATA 1
RANGE $37CF-$37D0 DB_DATA 1
RANGE $37D0-$37D1 DB_DATA 1
RANGE $37D1-$37D2 DB_DATA 1
RANGE $37D2-$37D3 DB_DATA 1
RANGE $37D3-$37D4 DB_DATA 1
RANGE $37D4-$37E0 DB_DATA 12
RANGE $37E0-$37EC DB_DATA 12
RANGE $37EC-$37F8 DB_DATA 12
RANGE $37F8-$3804 DB_DATA 12
RANGE $3804-$3810 DB_DATA 12
RANGE $3810-$381C DB_DATA 12
RANGE $381C-$3828 DB_DATA 12
RANGE $3828-$3834 DB_DATA 12
RANGE $3834-$3840 DB_DATA 12
RANGE $3840-$384C DB_DATA 12
RANGE $384C-$3858 DB_DATA 12
RANGE $3858-$3859 DB_DATA 1
RANGE $3859-$385A DB_DATA 1
RANGE $385A-$385B DB_DATA 1
RANGE $385B-$385C DB_DATA 1
RANGE $385C-$385D DB_DATA 1
RANGE $385D-$385E DB_DATA 1
RANGE $385E-$385F DB_DATA 1
RANGE $385F-$386B DB_DATA 12
RANGE $386B-$3877 DB_DATA 12
RANGE $3877-$3883 DB_DATA 12
RANGE $3883-$388F DB_DATA 12
RANGE $388F-$389B DB_DATA 12
RANGE $389B-$38A7 DB_DATA 12
RANGE $38A7-$38B3 DB_DATA 12
RANGE $38B3-$38BF DB_DATA 12
RANGE $38BF-$38CB DB_DATA 12
RANGE $38CB-$38D7 DB_DATA 12
RANGE $38D7-$38E3 DB_DATA 12
RANGE $38E3-$38E4 DB_DATA 1
RANGE $38E4-$38E5 DB_DATA 1
RANGE $38E5-$38E6 DB_DATA 1
RANGE $38E6-$38E7 DB_DATA 1
RANGE $38E7-$38E8 DB_DATA 1
RANGE $38E8-$38E9 DB_DATA 1
RANGE $38E9-$38EA DB_DATA 1
RANGE $38EA-$38F6 DB_DATA 12
RANGE $38F6-$3902 DB_DATA 12
RANGE $3902-$390E DB_DATA 12
RANGE $390E-$391A DB_DATA 12
RANGE $391A-$3926 DB_DATA 12
RANGE $3926-$3932 DB_DATA 12
RANGE $3932-$393E DB_DATA 12
RANGE $393E-$394A DB_DATA 12
RANGE $394A-$3956 DB_DATA 12
RANGE $3956-$3962 DB_DATA 12
RANGE $3962-$396E DB_DATA 12
RANGE $396E-$396F DB_DATA 1
RANGE $396F-$3970 DB_DATA 1
RANGE $3970-$3971 DB_DATA 1
RANGE $3971-$3972 DB_DATA 1
RANGE $3972-$3973 DB_DATA 1
RANGE $3973-$3974 DB_DATA 1
RANGE $3974-$3975 DB_DATA 1
RANGE $3975-$3981 DB_DATA 12
RANGE $3981-$398D DB_DATA 12
RANGE $398D-$3999 DB_DATA 12
RANGE $3999-$39A5 DB_DATA 12
RANGE $39A5-$39B1 DB_DATA 12
RANGE $39B1-$39BD DB_DATA 12
RANGE $39BD-$39C9 DB_DATA 12
RANGE $39C9-$39D5 DB_DATA 12
RANGE $39D5-$39E1 DB_DATA 12
RANGE $39E1-$39ED DB_DATA 12
RANGE $39ED-$39F9 DB_DATA 12
RANGE $39F9-$39FA DB_DATA 1
RANGE $39FA-$39FB DB_DATA 1
RANGE $39FB-$39FC DB_DATA 1
RANGE $39FC-$39FD DB_DATA 1
RANGE $39FD-$39FE DB_DATA 1
RANGE $39FE-$39FF DB_DATA 1
RANGE $39FF-$3A00 DB_DATA 1
RANGE $3A00-$3A0C DB_DATA 12
RANGE $3A0C-$3A18 DB_DATA 12
RANGE $3A18-$3A24 DB_DATA 12
RANGE $3A24-$3A30 DB_DATA 12
RANGE $3A30-$3A3C DB_DATA 12
RANGE $3A3C-$3A48 DB_DATA 12
RANGE $3A48-$3A54 DB_DATA 12
RANGE $3A54-$3A60 DB_DATA 12
RANGE $3A60-$3A6C DB_DATA 12
RANGE $3A6C-$3A78 DB_DATA 12
RANGE $3A78-$3A84 DB_DATA 12
RANGE $3A84-$3A85 DB_DATA 1
RANGE $3A85-$3A86 DB_DATA 1
RANGE $3A86-$3A87 DB_DATA 1
RANGE $3A87-$3A88 DB_DATA 1
RANGE $3A88-$3A89 DB_DATA 1
RANGE $3A89-$3A8A DB_DATA 1
RANGE $3A8A-$3A8B DB_DATA 1
RANGE $3A8B-$3A97 DB_DATA 12
RANGE $3A97-$3AA3 DB_DATA 12
RANGE $3AA3-$3AAF DB_DATA 12
RANGE $3AAF-$3ABB DB_DATA 12
RANGE $3ABB-$3AC7 DB_DATA 12
RANGE $3AC7-$3AD3 DB_DATA 12
RANGE $3AD3-$3ADF DB_DATA 12
RANGE $3ADF-$3AEB DB_DATA 12
RANGE $3AEB-$3AF7 DB_DATA 12
RANGE $3AF7-$3B03 DB_DATA 12
RANGE $3B03-$3B0F DB_DATA 12
RANGE $3B0F-$3B10 DB_DATA 1
RANGE $3B10-$3B11 DB_DATA 1
RANGE $3B11-$3B12 DB_DATA 1
RANGE $3B12-$3B13 DB_DATA 1
RANGE $3B13-$3B14 DB_DATA 1
RANGE $3B14-$3B15 DB_DATA 1
RANGE $3B15-$3B16 DB_DATA 1
RANGE $3B16-$3B22 DB_DATA 12
RANGE $3B22-$3B2E DB_DATA 12
RANGE $3B2E-$3B3A DB_DATA 12
RANGE $3B3A-$3B46 DB_DATA 12
RANGE $3B46-$3B52 DB_DATA 12
RANGE $3B52-$3B5E DB_DATA 12
RANGE $3B5E-$3B6A DB_DATA 12
RANGE $3B6A-$3B76 DB_DATA 12
RANGE $3B76-$3B82 DB_DATA 12
RANGE $3B82-$3B8E DB_DATA 12
RANGE $3B8E-$3B9A DB_DATA 12
RANGE $3B9A-$3B9B DB_DATA 1
RANGE $3B9B-$3B9C DB_DATA 1
RANGE $3B9C-$3B9D DB_DATA 1
RANGE $3B9D-$3B9E DB_DATA 1
RANGE $3B9E-$3B9F DB_DATA 1
RANGE $3B9F-$3BA0 DB_DATA 1
RANGE $3BA0-$3BA1 DB_DATA 1
RANGE $3BA1-$3BAD DB_DATA 12
RANGE $3BAD-$3BB9 DB_DATA 12
RANGE $3BB9-$3BC5 DB_DATA 12
RANGE $3BC5-$3BD1 DB_DATA 12
RANGE $3BD1-$3BDD DB_DATA 12
RANGE $3BDD-$3BE9 DB_DATA 12
RANGE $3BE9-$3BF5 DB_DATA 12
RANGE $3BF5-$3C01 DB_DATA 12
RANGE $3C01-$3C0D DB_DATA 12
RANGE $3C0D-$3C19 DB_DATA 12
RANGE $3C19-$3C25 DB_DATA 12
RANGE $3C25-$3C26 DB_DATA 1
RANGE $3C26-$3C27 DB_DATA 1
RANGE $3C27-$3C28 DB_DATA 1
RANGE $3C28-$3C29 DB_DATA 1
RANGE $3C29-$3C2A DB_DATA 1
RANGE $3C2A-$3C2B DB_DATA 1
RANGE $3C2B-$3C2C DB_DATA 1
RANGE $3C2C-$3C38 DB_DATA 12
RANGE $3C38-$3C44 DB_DATA 12
RANGE $3C44-$3C50 DB_DATA 12
RANGE $3C50-$3C5C DB_DATA 12
RANGE $3C5C-$3C68 DB_DATA 12
RANGE $3C68-$3C74 DB_DATA 12
RANGE $3C74-$3C80 DB_DATA 12
RANGE $3C80-$3C8C DB_DATA 12
RANGE $3C8C-$3C98 DB_DATA 12
RANGE $3C98-$3CA4 DB_DATA 12
RANGE $3CA4-$3CB0 DB_DATA 12
RANGE $3CB0-$3CB1 DB_DATA 1
RANGE $3CB1-$3CB2 DB_DATA 1
RANGE $3CB2-$3CB3 DB_DATA 1
RANGE $3CB3-$3CB4 DB_DATA 1
RANGE $3CB4-$3CB5 DB_DATA 1
RANGE $3CB5-$3CB6 DB_DATA 1
RANGE $3CB6-$3CB7 DB_DATA 1
RANGE $3CB7-$3CC3 DB_DATA 12
RANGE $3CC3-$3CCF DB_DATA 12
RANGE $3CCF-$3CDB DB_DATA 12
RANGE $3CDB-$3CE7 DB_DATA 12
RANGE $3CE7-$3CF3 DB_DATA 12
RANGE $3CF3-$3CFF DB_DATA 12
RANGE $3CFF-$3D0B DB_DATA 12
RANGE $3D0B-$3D17 DB_DATA 12
RANGE $3D17-$3D23 DB_DATA 12
RANGE $3D23-$3D2F DB_DATA 12
RANGE $3D2F-$3D3B DB_DATA 12
RANGE $3D3B-$3D3C DB_DATA 1
RANGE $3D3C-$3D3D DB_DATA 1
RANGE $3D3D-$3D3E DB_DATA 1
RANGE $3D3E-$3D3F DB_DATA 1
RANGE $3D3F-$3D40 DB_DATA 1
RANGE $3D40-$3D41 DB_DATA 1
RANGE $3D41-$3D42 DB_DATA 1
RANGE $3D42-$3D46 DW_DATA 2
RANGE $3D46-$3D4A DW_DATA 2
RANGE $3D4A-$3D4E DW_DATA 2
RANGE $3D4E-$3D52 DW_DATA 2
RANGE $3D52-$3D56 DW_DATA 2
RANGE $3D56-$3D5A DW_DATA 2
RANGE $3D5A-$3D5E DW_DATA 2
RANGE $3D5E-$3D62 DB_DATA 4
RANGE $3D62-$3D66 DB_DATA 4
RANGE $3D66-$3D6A DB_DATA 4
RANGE $3D6A-$3D6C DB_DATA 2
RANGE $3D6C-$3D70 DW_DATA 2
RANGE $3D70-$3D74 DB_DATA 4
RANGE $3D74-$3D78 DB_DATA 4
RANGE $3D78-$3D7C DB_DATA 4
RANGE $3D7C-$3D80 DB_DATA 4
RANGE $3D80-$3D84 DB_DATA 4
RANGE $3D84-$3D88 DB_DATA 4
RANGE $3D88-$3D8A DB_DATA 2
RANGE $3D8A-$3D8E DB_DATA 4
RANGE $3D8E-$3D90 DB_DATA 2
RANGE $3D90-$3D92 DB_DATA 2
RANGE $3D92-$3D96 DW_DATA 2
RANGE $3D96-$3D9A DB_DATA 4
RANGE $3D9A-$3D9E DB_DATA 4
RANGE $3D9E-$3DA2 DB_DATA 4
RANGE $3DA2-$3DA4 DB_DATA 2
RANGE $3DA4-$3DA8 DW_DATA 2
RANGE $3DA8-$3DAC DB_DATA 4
RANGE $3DAC-$3DB0 DB_DATA 4
RANGE $3DB0-$3DB4 DB_DATA 4
RANGE $3DB4-$3DB8 DB_DATA 4
RANGE $3DB8-$3DBC DB_DATA 4
RANGE $3DBC-$3DC0 DB_DATA 4
RANGE $3DC0-$3DC4 DB_DATA 4
RANGE $3DC4-$3DC8 DB_DATA 4
RANGE $3DC8-$3DCC DB_DATA 4
RANGE $3DCC-$3DD0 DB_DATA 4
RANGE $3DD0-$3DD4 DB_DATA 4
RANGE $3DD4-$3DD8 DB_DATA 4
RANGE $3DD8-$3DDC DB_DATA 4
RANGE $3DDC-$3DE0 DB_DATA 4
RANGE $3DE0-$3DE2 DB_DATA 2
RANGE $3DE2-$3DE6 DB_DATA 4
RANGE $3DE6-$3DEA DB_DATA 4
RANGE $3DEA-$3DEE DB_DATA 4
RANGE $3DEE-$3DF2 DB_DATA 4
RANGE $3DF2-$3DF6 DB_DATA 4
RANGE $3DF6-$3DFA DB_DATA 4
RANGE $3DFA-$3DFE DB_DATA 4
RANGE $3DFE-$3E02 DB_DATA 4
RANGE $3E02-$3E06 DB_DATA 4
RANGE $3E06-$3E0A DB_DATA 4
RANGE $3E0A-$3E0E DB_DATA 4
RANGE $3E0E-$3E12 DB_DATA 4
RANGE $3E12-$3E16 DB_DATA 4
RANGE $3E16-$3E1A DB_DATA 4
RANGE $3E1A-$3E1E DB_DATA 4
RANGE $3E1E-$3E20 DB_DATA 2
RANGE $3E20-$3E22 DB_DATA 2
RANGE $3E22-$3E26 DW_DATA 2
RANGE $3E26-$3E2A DB_DATA 4
RANGE $3E2A-$3E2C DB_DATA 2
RANGE $3E2C-$3E30 DW_DATA 2
RANGE $3E30-$3E34 DB_DATA 4
RANGE $3E34-$3E36 DB_DATA 2
RANGE $3E36-$3E3A DW_DATA 2
RANGE $3E3A-$3E3E DB_DATA 4
RANGE $3E3E-$3E42 DB_DATA 4
RANGE $3E42-$3E44 DB_DATA 2
RANGE $3E44-$3E48 DW_DATA 2
RANGE $3E48-$3E4C DB_DATA 4
RANGE $3E4C-$3E50 DB_DATA 4
RANGE $3E50-$3E54 DB_DATA 4
RANGE $3E54-$3E58 DB_DATA 4
RANGE $3E58-$3E5C DB_DATA 4
RANGE $3E5C-$3E5E DB_DATA 2
RANGE $3E5E-$3E62 DW_DATA 2
RANGE $3E62-$3E66 DB_DATA 4
RANGE $3E66-$3E6A DB_DATA 4
RANGE $3E6A-$3E6E DB_DATA 4
RANGE $3E6E-$3E72 DB_DATA 4
RANGE $3E72-$3E76 DB_DATA 4
RANGE $3E76-$3E7A DB_DATA 4
RANGE $3E7A-$3E7E DB_DATA 4
RANGE $3E7E-$3E80 DB_DATA 2
RANGE $3E80-$3E86 CHAR_DATA 6
RANGE $3E86-$3E8D CHAR_DATA 7
RANGE $3E8D-$3E93 CHAR_DATA 6
RANGE $3E93-$3E9A CHAR_DATA 7
RANGE $3E9A-$3EA0 CHAR_DATA 6
RANGE $3EA0-$3EA2 DB_DATA 2
RANGE $3EA2-$3EA3 DB_DATA 1
RANGE $3EA3-$3EA5 DW_DATA 1
RANGE $3EA5-$3EA6 DB_DATA 1
RANGE $3EA6-$3EA7 DB_DATA 1
RANGE $3EA7-$3EA8 DB_DATA 1
RANGE $3EA8-$3EAA DW_DATA 1
RANGE $3EAA-$3EAB DB_DATA 1
RANGE $3EAB-$3EAC DB_DATA 1
RANGE $3EAC-$3EAD DB_DATA 1
RANGE $3EAD-$3EAF DW_DATA 1
RANGE $3EAF-$3EB0 DB_DATA 1
RANGE $3EB0-$3EB1 DB_DATA 1
RANGE $3EB1-$3EB2 DB_DATA 1
RANGE $3EB2-$3EB4 DW_DATA 1
RANGE $3EB4-$3EB5 DB_DATA 1
RANGE $3EB5-$3EB6 DB_DATA 1
RANGE $3EB6-$3EB7 DB_DATA 1
RANGE $3EB7-$3EB9 DW_DATA 1
RANGE $3EB9-$3EBA DB_DATA 1
RANGE $3EBA-$3EBB DB_DATA 1
RANGE $3EBB-$3EBF DW_DATA 2
RANGE $3EBF-$3EC1 DB_DATA 2
RANGE $3EC1-$3EC3 DB_DATA 2
RANGE $3EC3-$3EC5 DB_DATA 2
RANGE $3EC5-$3EC7 DB_DATA 2
RANGE $3EC7-$3EC9 DB_DATA 2
RANGE $3EC9-$3ECB DB_DATA 2
RANGE $3ECB-$3ECD DB_DATA 2
RANGE $3ECD-$3ECF DB_DATA 2
RANGE $3ECF-$3ED1 DB_DATA 2
RANGE $3ED1-$3ED3 DB_DATA 2
RANGE $3ED3-$3ED5 DB_DATA 2
RANGE $3ED5-$3ED7 DB_DATA 2
RANGE $3ED7-$3ED9 DB_DATA 2
RANGE $3ED9-$3EDB DB_DATA 2
RANGE $3EDB-$3EDD DB_DATA 2
RANGE $3EDD-$3EDF DB_DATA 2
RANGE $3EDF-$3EE1 DB_DATA 2
RANGE $3EE1-$3EE3 DB_DATA 2
RANGE $3EE3-$3EE5 DB_DATA 2
RANGE $3EE5-$3EE7 DB_DATA 2
RANGE $3EE7-$3EE9 DB_DATA 2
RANGE $3EE9-$3EEB DB_DATA 2
RANGE $3EEB-$3EED DB_DATA 2
RANGE $3EED-$3EEF DB_DATA 2
RANGE $3EEF-$3EF1 DB_DATA 2
RANGE $3EF1-$3EF3 DB_DATA 2
RANGE $3EF3-$3EF7 DB_DATA 4
RANGE $3EF7-$3EFB DB_DATA 4
RANGE $3EFB-$3EFF DB_DATA 4
RANGE $3EFF-$3F03 DB_DATA 4
RANGE $3F03-$3F07 DB_DATA 4
RANGE $3F07-$3F0B DB_DATA 4
RANGE $3F0B-$3F0F DB_DATA 4
RANGE $3F0F-$3F13 DB_DATA 4
RANGE $3F13-$3F17 DB_DATA 4
RANGE $3F17-$3F1B DB_DATA 4
RANGE $3F1B-$3F1F DB_DATA 4
RANGE $3F1F-$3F23 DB_DATA 4
RANGE $3F23-$3F27 DB_DATA 4
RANGE $3F27-$3F2B DB_DATA 4
RANGE $3F2B-$3F2D DB_DATA 2
RANGE $3F2D-$3F31 DB_DATA 4
RANGE $3F31-$3F35 DB_DATA 4
RANGE $3F35-$3F39 DB_DATA 4
RANGE $3F39-$3F3D DB_DATA 4
RANGE $3F3D-$3F41 DB_DATA 4
RANGE $3F41-$3F45 DB_DATA 4
RANGE $3F45-$3F49 DB_DATA 4
RANGE $3F49-$3F4D DB_DATA 4
RANGE $3F4D-$3F51 DB_DATA 4
RANGE $3F51-$3F55 DB_DATA 4
RANGE $3F55-$3F59 DB_DATA 4
RANGE $3F59-$3F5D DB_DATA 4
RANGE $3F5D-$3F61 DB_DATA 4
RANGE $3F61-$3F65 DB_DATA 4
RANGE $3F65-$3F69 DB_DATA 4
RANGE $3F69-$3F6B DB_DATA 2
RANGE $3F6B-$3F6F DB_DATA 4
RANGE $3F6F-$3F71 DB_DATA 2
RANGE $3F71-$3F75 DB_DATA 4
RANGE $3F75-$3F78 DB_DATA 3
RANGE $3F78-$3F7C DB_DATA 4
RANGE $3F7C-$3F80 DB_DATA 4
RANGE $3F80-$3F84 DB_DATA 4
RANGE $3F84-$3F88 DB_DATA 4
RANGE $3F88-$3F8C DB_DATA 4
RANGE $3F8C-$3F8E DB_DATA 2
RANGE $3F8E-$3F92 DB_DATA 4
RANGE $3F92-$3F95 DB_DATA 3
RANGE $3F95-$3F99 DB_DATA 4
RANGE $3F99-$3F9D DB_DATA 4
RANGE $3F9D-$3FA1 DB_DATA 4
RANGE $3FA1-$3FA3 DB_DATA 2
RANGE $3FA3-$3FA7 DB_DATA 4
RANGE $3FA7-$3FA9 DB_DATA 2
RANGE $3FA9-$3FAD DB_DATA 4
RANGE $3FAD-$3FB0 DB_DATA 3
RANGE $3FB0-$3FB4 DB_DATA 4
RANGE $3FB4-$3FB8 DB_DATA 4
RANGE $3FB8-$3FBC DB_DATA 4
RANGE $3FBC-$3FC0 DB_DATA 4
RANGE $3FC0-$3FC4 DB_DATA 4
RANGE $3FC4-$3FC8 DB_DATA 4
RANGE $3FC8-$3FCC DB_DATA 4
RANGE $3FCC-$3FD0 DB_DATA 4
RANGE $3FD0-$3FD4 DB_DATA 4
RANGE $3FD4-$3FD8 DB_DATA 4
RANGE $3FD8-$3FDC DB_DATA 4
RANGE $3FDC-$3FDE DB_DATA 2
RANGE $3FDE-$3FE2 DB_DATA 4
RANGE $3FE2-$3FE4 DB_DATA 2
RANGE $3FE4-$3FE6 DB_DATA 2

