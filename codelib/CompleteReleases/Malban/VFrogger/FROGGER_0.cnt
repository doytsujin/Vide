BANK 0
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $F192 Wait_Recal
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1BA Read_Btns
LABEL $F1F8 Joy_Digital
LABEL $F289 Do_Sound
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F312 Moveto_d
LABEL $F37A Print_Str_d
LABEL $F38A Print_List
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F548 Clear_x_d
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $FEC6 music7
LABEL $FF62 musicb
LABEL $C880 user_ram
COMMENT_LABEL $C880 well start of our ram space
LABEL $C880 user_ram_start
LABEL $C880 music_active
COMMENT_LABEL $C880 pointer to music piece which is playing now
LABEL $C882 music_counter
COMMENT_LABEL $C882 pointer to weridos, used only in init screen
LABEL $C884 tmp1
COMMENT_LABEL $C884 two temporal storage variables
LABEL $C886 tmp2
COMMENT_LABEL $C886 ...
LABEL $C888 mul_tmp1
COMMENT_LABEL $C888 two variable used in MY_MUL only
LABEL $C88A mul_tmp2
LABEL $C88C current_brightness
COMMENT_LABEL $C88C currently = brightness (why didn't I use the vectrex's os variable???)
LABEL $C88D morph_status
COMMENT_LABEL $C88D status---
LABEL $C88E morph_tmp
COMMENT_LABEL $C88E saves a few cycles... for the step counter only in one_morph_step
LABEL $C88F morph_sign
COMMENT_LABEL $C88F number of steps between 'from' and 'to' variable
LABEL $C890 morph_counter
COMMENT_LABEL $C890 number of steps between 'from' and 'to' variable
LABEL $C891 morph_steps
COMMENT_LABEL $C891 number of steps between 'from' and 'to' constant
LABEL $C892 morph_delay
COMMENT_LABEL $C892 delay between one step and another (variable)
LABEL $C894 morph_structure
COMMENT_LABEL $C894 pointer to morphstructure of current morphing
LABEL $C896 morph_div_jsr
COMMENT_LABEL $C896 pointer to indirectly JSR to a divide routine (for optimization)
LABEL $C898 scroll_variables_start
COMMENT_LABEL $C898 from here reuse scroll variables...
LABEL $C898 kind_of_death
COMMENT_LABEL $C898 storage to text, what kind of death happened to frog
LABEL $C89A in_home_counter
COMMENT_LABEL $C89A number of free homes in the currently played level
LABEL $C89B game_level
COMMENT_LABEL $C89B what game level are we playing
LABEL $C89C current_frog_size_x
COMMENT_LABEL $C89C size of frog 'sprites' following (all the same for now)
LABEL $C89D current_frog_offset
COMMENT_LABEL $C89D offset to 'zero' of current frog sprite
LABEL $C89F current_frog_heading
COMMENT_LABEL $C89F what direction is frogger looking at
LABEL $C8A0 level_score
COMMENT_LABEL $C8A0 internel level score, score information is updated only
LABEL $C8A1 last_joy_x
COMMENT_LABEL $C8A1 last joystick position X,
LABEL $C8A2 last_joy_y
COMMENT_LABEL $C8A2 and Y,  for checking, we don't want an autorun feature...
LABEL $C8A3 current_frog_brightness
COMMENT_LABEL $C8A3 current brightness of frogger, not used anymore?
LABEL $C8A4 high_check
COMMENT_LABEL $C8A4 checker variable for new life (every 10000 points)
LABEL $C8A5 frog_pos
COMMENT_LABEL $C8A5 position 16bit y,x of frog
LABEL $C8A5 frog_y
COMMENT_LABEL $C8A5 y pos of frog
LABEL $C8A6 frog_x
COMMENT_LABEL $C8A6 and the x
LABEL $C8A7 frog_pos_band
COMMENT_LABEL $C8A7 band information (ranging from 0-11), y,x
LABEL $C8A7 frog_y_band
COMMENT_LABEL $C8A7 band y information
LABEL $C8A8 frog_x_band
COMMENT_LABEL $C8A8 band y information
LABEL $C8A9 frog_pic
COMMENT_LABEL $C8A9 now used frog 'picture'
LABEL $C8AB my_timer_start
COMMENT_LABEL $C8AB reset value of level timer
LABEL $C8AD y_timer
COMMENT_LABEL $C8AD y value of my timer vector line
LABEL $C8AE my_timer
COMMENT_LABEL $C8AE x value of vector line (8bit) AND the timer variable itself (16bit) variable
LABEL $C8B0 fly_timer
COMMENT_LABEL $C8B0 timer variable for fly
LABEL $C8B2 fly_timer_start
COMMENT_LABEL $C8B2 reset value of fly timer
LABEL $C8B4 fly_house
COMMENT_LABEL $C8B4 what house is the fly currently in
LABEL $C8B5 fly_status
COMMENT_LABEL $C8B5 what's the flys status?
LABEL $C8B6 croco_timer
COMMENT_LABEL $C8B6 croco (home) timer variable
LABEL $C8B8 croco_timer_start
COMMENT_LABEL $C8B8 croco timer reset
LABEL $C8BA croco_house
COMMENT_LABEL $C8BA what house is the croco currently 'visiting'
LABEL $C8BB croco_status
COMMENT_LABEL $C8BB what's the crocos status
LABEL $C8BC dive_timer
COMMENT_LABEL $C8BC (turtle) dive timer variable
LABEL $C8BE dive_timer_start
COMMENT_LABEL $C8BE reset value for the above
LABEL $C8BF frog_bonus
COMMENT_LABEL $C8BF what bonuses has frog collected? (girl, fly)
LABEL $C8C0 otter_status
COMMENT_LABEL $C8C0 what's the otters status
LABEL $C8C1 otter_timer_start
COMMENT_LABEL $C8C1 otter timer reset value
LABEL $C8C3 otter_timer
COMMENT_LABEL $C8C3 otter timer variable
LABEL $C8C5 otter_log_pre
COMMENT_LABEL $C8C5 the 'logs' address of the 'log' BEFOR the otter
LABEL $C8C7 otter_log_past
COMMENT_LABEL $C8C7 the 'logs' address of the 'log' BEHIND the otter
LABEL $C8C9 otter_object
COMMENT_LABEL $C8C9 the object information address of current otter
LABEL $C8CB otter_pos
COMMENT_LABEL $C8CB current position of otter
LABEL $C8CD otter_anim_counter
COMMENT_LABEL $C8CD animation counter of otter
LABEL $C8CE otter_speed
COMMENT_LABEL $C8CE current speed of otter
LABEL $C8CF otter_band
COMMENT_LABEL $C8CF what band is otter swimming in?
LABEL $C8D1 girl_status
COMMENT_LABEL $C8D1 what's the girls status?
LABEL $C8D2 girl_round_counter
COMMENT_LABEL $C8D2 counter, for what round girl will be next displayed
LABEL $C8D3 girl_round_counter_reset
COMMENT_LABEL $C8D3 counter reset value
LABEL $C8D4 girl_log_object
COMMENT_LABEL $C8D4 log, the girl is on, allways first log on second river band
LABEL $C8D6 girl_object
COMMENT_LABEL $C8D6 pointer to current girl object information
LABEL $C8D8 girl_pos
COMMENT_LABEL $C8D8 current position of girl
LABEL $C8DA girl_anim_counter
COMMENT_LABEL $C8DA animation counter of girl
LABEL $C8DB girl_zero
COMMENT_LABEL $C8DB allways a 16 bit zero, to jump out of the loop...
LABEL $C8DD girl_speed
COMMENT_LABEL $C8DD speed of girl
LABEL $C8DE snake_status
COMMENT_LABEL $C8DE snake's status (only one snake on logs possible for now)
LABEL $C8DF snake_round_counter
COMMENT_LABEL $C8DF counter, for what round snake will be next displayed (variable)
LABEL $C8E0 snake_round_counter_reset
COMMENT_LABEL $C8E0 reset value for above
LABEL $C8E1 snake_log_object
COMMENT_LABEL $C8E1 'log', the snake is on, allways first log on third river band!!!
LABEL $C8E3 snake_object
COMMENT_LABEL $C8E3 pointer to snake's object definition
LABEL $C8E5 snake_pos
COMMENT_LABEL $C8E5 position of snake (y,x)
LABEL $C8E7 snake_anim_counter
COMMENT_LABEL $C8E7 animation counter for snake
LABEL $C8E8 snake_gone
COMMENT_LABEL $C8E8 number of steps a snake can make before turing arround
LABEL $C8E9 snake_speed_start
COMMENT_LABEL $C8E9 startspeed of snake (determined by 'log's' speed)
LABEL $C8EA snake_speed
COMMENT_LABEL $C8EA speed of snake now
LABEL $C8EB i_jump
COMMENT_LABEL $C8EB indirect jump for vector list drawing unlooped
LABEL $C8ED startDataPos
LABEL $C8EF nextDataPos
LABEL $C8F1 currentDataBitPos
LABEL $C8F2 currentDataByte
LABEL $C8F3 froggerInJump
LABEL $C8F4 froggerAnimPointer
LABEL $C8F6 tempy
LABEL $C8F7 user_ram_end
COMMENT_LABEL $C8F7 end of user ram
LABEL $C884 loop1
COMMENT_LABEL $C884 loop1 counter in level setup
LABEL $C885 loop2
COMMENT_LABEL $C885 loop2 counter in level setup
LABEL $C888 divide_tmp
COMMENT_LABEL $C888 divide tmp variable, you don't divide while multiplying vice versa
LABEL $C888 tmp_band_offset
COMMENT_LABEL $C888 used in level setup and gameplay, but there is NO multiplication in game...
LABEL $C88A tmp_band_list
COMMENT_LABEL $C88A used in level setup
LABEL $C88A counter
COMMENT_LABEL $C88A counter used in intermissions
LABEL $C89C game_over_intensity
COMMENT_LABEL $C89C intensity of game over text
LABEL $C89F game_over_scaley
COMMENT_LABEL $C89F scale y of game over string
LABEL $C89D game_over_scalex
COMMENT_LABEL $C89D scale x of game over string
LABEL $C8A1 game_over_ypos
COMMENT_LABEL $C8A1 game over y position
LABEL $C8A2 game_over_xpos
COMMENT_LABEL $C8A2 game over x position
EQU $06 SCROLL_SCALE_FACTOR
COMMENT_LABEL $06 constant, no variable, a scale factor, the offsets are calculated for this!
EQU $08 NUMBER_OF_SCROLL_LETTERS
COMMENT_LABEL $08 constant, number of letters visible at a time in the scroll text
LABEL $C898 scroll_text_address_start
COMMENT_LABEL $C898 start address of scroll variables, start address of scroll text
LABEL $C89A scroll_text_address_current
COMMENT_LABEL $C89A current address of next scroll text letter
LABEL $C89C scroll_speed
COMMENT_LABEL $C89C speed of the scrolling
LABEL $C89D scroll_y
COMMENT_LABEL $C89D y position of the scroll text
LABEL $C89E scroll_left_boundary
COMMENT_LABEL $C89E left most position of scroll text
LABEL $C89F scroll_right_boundary
COMMENT_LABEL $C89F right most position of scroll text
LABEL $C8A0 scroll_step_width
COMMENT_LABEL $C8A0 how many 'pixels' the letters are appart
LABEL $C8A1 scroll_intensity
COMMENT_LABEL $C8A1 intensity of scroll text
LABEL $C8A2 scroll_objects
COMMENT_LABEL $C8A2 start address of ram scroll text object definitions
LABEL $C8CB scroll_objects_end
COMMENT_LABEL $C8CB space for number of letters for letter object definitions
LABEL $C8CB scroll_variables_end
COMMENT_LABEL $C8CB the end...
LABEL $C8CC init_screen_mode
LABEL $C8CD init_current_intensity
EQU $01 INIT_MODE_TEXT
COMMENT_LABEL $01 these two describe the mode
EQU $02 INIT_MODE_MORPH
COMMENT_LABEL $02 of the init screen
EQU $0A OTTER_X_LEN
COMMENT_LABEL $0A size of otter (x) for collision checking
EQU $37 SNAKE_GO_LIMIT
COMMENT_LABEL $37 number of 'pixels' a snake can go before turing arround
EQU $05 MAX_SPRITE_OFFSET
COMMENT_LABEL $05 supposed to maximal sprite offset
EQU $01 IS_CARRIED
COMMENT_LABEL $01 the object (girl) is carried by frog
EQU $02 IS_DISPLAYED
COMMENT_LABEL $02 the object is currently visible
EQU $03 IS_WAITING
COMMENT_LABEL $03 the object is waiting to be displayed
EQU $01 FLY_BONUS
COMMENT_LABEL $01 if = a fly bonus is awarded
EQU $02 GIRL_BONUS
COMMENT_LABEL $02 if = a girl bonus is awarded
EQU $0A MORPHING_DONE
COMMENT_LABEL $0A this morphing structure finnished
EQU $0B MORPHING_WORKING
COMMENT_LABEL $0B is morphing
EQU $00 MORPHING_COMPLETE
COMMENT_LABEL $00 no more morphing
EQU $3F MAX_VECTOR_MORPH
COMMENT_LABEL $3F this uses 128*3 bytes of RAM, maximum number of vectors for a morph
EQU $50 MORPH_STARTUP_DELAY
COMMENT_LABEL $50 constants used in init morph
EQU $0F MORPH_STEPS_INTRO
EQU $02 MORPH_DELAY_INIT
EQU $0F MORPH_STEPS_Z
COMMENT_LABEL $0F below is history, morphing is
EQU $7F SCREEN_TOP
LABEL $0080 SCREEN_LEFT
EQU $7F SCREEN_RIGHT
LABEL $F160 NORMAL_TEXT_SIZE
COMMENT_LABEL $F160 big text that is
LABEL $FB30 LITTLE_TEXT_SIZE
COMMENT_LABEL $FB30 fairly small text
LABEL $F530 SCORE_TEXT_SIZE
COMMENT_LABEL $F530 'middle' big text :-)
LABEL $0081 SPECIAL_CROCO_FULL
LABEL $0082 SPECIAL_CROCO_HALF
LABEL $0083 SPECIAL_HOME_FLY
LABEL $0084 SPECIAL_RIGHT_CROCO
LABEL $0085 SPECIAL_LEFT_CROCO
LABEL $0086 SPECIAL_RIGHT_SNAKE
LABEL $0087 SPECIAL_LEFT_SNAKE
EQU $20 SPECIAL_GIRL_RIGHT
COMMENT_LABEL $20 is ANDed and compared to...
EQU $21 SPECIAL_GIRL_LEFT
EQU $40 SPECIAL_DIVE
COMMENT_LABEL $40 note: the $40 in this and the next two
EQU $40 SPECIAL_DIVE_UP
COMMENT_LABEL $40 is ANDed and compared to...
EQU $41 SPECIAL_DIVE_DOWN
LABEL $00EA SCALE_FACTOR_GRID
COMMENT_LABEL $00EA the virtual grid, which everything is = in
LABEL $0091 SCALE_FACTOR_GAME
COMMENT_LABEL $0091 every (nearly) positioning is made with
EQU $1C SCALE_FACTOR_HOME
COMMENT_LABEL $1C scale factor for drawing the homes
LABEL $0083 SCALE_IN_HOME
COMMENT_LABEL $0083 scale factor for objects within an home
EQU $06 SCALE_FACTOR_SPRITE
COMMENT_LABEL $06 all sprites are drawn using this scale factor
EQU $70 SCALE_FACTOR_VECTOR_MORPH
COMMENT_LABEL $70 scale factor for morphing objects...
EQU $64 BOUNDARY_HI
COMMENT_LABEL $64 right boundary of playfield
LABEL $0081 BOUNDARY_LO
COMMENT_LABEL $0081 left boundary of playfield
EQU $19 SPRITE_BLOW_UP
COMMENT_LABEL $19 thru this sprites get a possible max of 5 * 25 = 125 (pretty near 127...)
EQU $08 HOME_BLOW_UP
COMMENT_LABEL $08 ...
EQU $0C VEC_BLOWUP
COMMENT_LABEL $0C max vector 5 for now, double == 10 times 12 = 120, max would be 128...
EQU $10 GRID_SIZE_GAME
COMMENT_LABEL $10 (10*($ea/$91)), for SCALE_FACTOR_GRID
EQU $0A GRID_SIZE
COMMENT_LABEL $0A for scale factor $ff
LABEL $00B2 HOME1_POS_LEFT
LABEL $00C1 HOME1_POS_RIGHT
LABEL $00D2 HOME2_POS_LEFT
LABEL $00E1 HOME2_POS_RIGHT
LABEL $00F3 HOME3_POS_LEFT
EQU $02 HOME3_POS_RIGHT
EQU $14 HOME4_POS_LEFT
EQU $23 HOME4_POS_RIGHT
EQU $35 HOME5_POS_LEFT
EQU $44 HOME5_POS_RIGHT
EQU $01 HEADING_RIGHT
EQU $02 HEADING_LEFT
EQU $03 HEADING_DOWN
EQU $04 HEADING_UP
EQU $35 FROGS_PER_GAME
COMMENT_LABEL $35 number of frogs per game, note: this is
LABEL $00A0 FROG_INIT_YPOS
EQU $06 FROG_INIT_XPOS
LABEL $A006 FROG_INIT_POS
EQU $0C FROG_INIT_YPOS_BAND
COMMENT_LABEL $0C home band is twelf (in memory)
EQU $07 FROG_INIT_XPOS_BAND
COMMENT_LABEL $07 six is middle
LABEL $0C07 FROG_INIT_POS_BAND
EQU $10 FROG_X_JUMP
EQU $10 FROG_Y_JUMP
EQU $0A FROG_SIZEX_UP
EQU $5A FROG_RIGHT_OUT
LABEL $009F FROG_LEFT_OUT
EQU $77 SCORE_YPOS
LABEL $0088 SCORE_XPOS
EQU $18 MAX_LINE_NUM
LABEL $1073 line_end
LABEL $1064 line_start
EQU $11 game_name
LABEL $007C entry_point
LABEL $0030 fixDraw
EQU $47 nextv
EQU $7C new_game
LABEL $3EEF ymData
LABEL $457C init_ym_sound
LABEL $1119 init_vars
LABEL $11A6 init_screen
LABEL $1281 setup_level
LABEL $008E restart_game
LABEL $0091 main_loop
LABEL $0093 LF19E2
LABEL $45AF do_ym_sound
LABEL $0112 move_frog
LABEL $0497 draw_objects
LABEL $00BB main_loop_enter
COMMENT_LABEL $00BB enter from pause here
LABEL $00F6 pause_loop
LABEL $C8FD no_score_string
LABEL $1528 print_score
LABEL $1A85 pause_string
LABEL $012D newJumpPossible
LABEL $0129 noleftcontinue
LABEL $01BA continue_left_jump
LABEL $01CC new_xpos_exit
LABEL $01CC no_new_xpos
LABEL $0185 pos_left
LABEL $4CCD frog_jump
LABEL $21E6 frogger_right_offset
LABEL $22AF frogger_right
LABEL $21E4 frogger_left_offset
LABEL $220B froggerLeftAnim
LABEL $0250 no_new_ypos
LABEL $0214 pos_down
LABEL $0250 new_ypos_exit
LABEL $21E2 frogger_up_offset
LABEL $21EA frogger_up
LABEL $21E0 frogger_down_offset
LABEL $21EA frogger_down
LABEL $0257 do_collision_check
LABEL $0396 home_jump_tried
LABEL $CAF5 band_list
LABEL $0262 collision_loop
LABEL $027B end_no_collision_detected
COMMENT_LABEL $027B no collision detected, is that good?
LABEL $0266 collision_loop1
LABEL $0282 frog_lower
COMMENT_LABEL $0282 frog is on the left
LABEL $0288 collision_detected
COMMENT_LABEL $0288 ok, a collision happened, check if good or bad
LABEL $02CB die_drown
LABEL $02DA transporting
COMMENT_LABEL $02DA no we are 'riding' some object
LABEL $02AA no_special_test_c
LABEL $02A0 no_right_snake
LABEL $02D5 die_snake
LABEL $0026 DIE_CAR
LABEL $02AC die_set
LABEL $02AE die
COMMENT_LABEL $02AE the frog is lost
LABEL $C917 no_frogs
LABEL $155B frog_dead
LABEL $02C0 not_lost_yet
LABEL $13FD game_lost
LABEL $1176 init_new_frog_vars
LABEL $02C6 die_out
LABEL $0039 DIE_OUT
LABEL $004D DIE_DROWN
LABEL $02D0 die_croco
LABEL $006E DIE_CROCO
LABEL $005E DIE_SNAKE
LABEL $02FE no_special_test
LABEL $02EC no_left_croco
LABEL $0369 _no_snake_
LABEL $02FA no_right_croco
LABEL $032D _no_girl_
LABEL $0311 Abs_b11
LABEL $0318 leave_here11
LABEL $4C29 girl_got_sound
LABEL $0354 no_log_right_snake
LABEL $0347 Abs_b13
LABEL $034E leave_here13
LABEL $035C Abs_b14
LABEL $0363 leave_here14
LABEL $038F band_minus_one
LABEL $0388 band_plus_one
LABEL $0012 DIE_WALL_JUMP
LABEL $03B1 home2_test
LABEL $C91A home_entry_1
LABEL $042E no_object_in_home
LABEL $0401 object_in_home
LABEL $03C5 home3_test
LABEL $C91F home_entry_2
LABEL $03D9 home4_test
LABEL $C924 home_entry_3
LABEL $03ED home5_test
LABEL $C929 home_entry_4
LABEL $C92E home_entry_5
LABEL $0415 no_home_fly
LABEL $042E init_with_bonus
LABEL $0421 no_half_croco
LABEL $0428 no_full_croco
LABEL $0000 DIE_HOME_FULL
LABEL $2389 frog1a_in_home_object
LABEL $0465 no_new_level
LABEL $C90A no_level_string
LABEL $1631 frog_in_home
LABEL $1731 level_complete
LABEL $3E62 level_done_data
LABEL $35B2 level1_data
LABEL $008B LEVEL_DATA_LENGTH
COMMENT_LABEL $008B length of one level in byte
LABEL $045C no_roll_over
LABEL $1797 roll_over_intermission
LABEL $046B timer_death
LABEL $046D draw_frog_move_timer
LABEL $0090 DIE_TIME
LABEL $0475 die_set_2
LABEL $0489 not_lost_yet2
LABEL $0525 no_fly_in_level
LABEL $0525 finnished_fly_stuff2
LABEL $0513 fly_is_being_displayed
LABEL $04E4 home_got
COMMENT_LABEL $04E4 now we have a random home...
LABEL $C91A home_objects
LABEL $04EC test_next_house
LABEL $04FE home_is_empty
COMMENT_LABEL $04FE now we got a 'random' empty home address in B,U
LABEL $04F6 not_last_home_yet
LABEL $0521 finnished_fly_stuff
LABEL $24D7 fly1a_object
LABEL $057E no_croco_in_level
LABEL $057E finnished_croco_stuff2
LABEL $056C croco_is_being_displayed
LABEL $053D chome_got
COMMENT_LABEL $053D now we have a random home...
LABEL $0545 ctest_next_house
LABEL $0557 chome_is_empty
COMMENT_LABEL $0557 now we got a 'random' empty home address in B,U
LABEL $054F cnot_last_home_yet
LABEL $057A finnished_croco_stuff
LABEL $343A crocoh1a_object
LABEL $05B0 no_dive_change
LABEL $CBB5 t_list
COMMENT_LABEL $CBB5 start of dive object list
LABEL $058A next_dive_object
LABEL $05B0 all_objects_done
LABEL $062F finnish_otter_timer_stuff
LABEL $05C8 band_got
COMMENT_LABEL $05C8 now we have a random river band...
LABEL $05D6 object_random_select_init
LABEL $05D8 object_random_select
LABEL $05EA got_second_log
LABEL $3527 otter1a_object
LABEL $0627 destroy_timer_otter
LABEL $061C Abs_b21
LABEL $0623 leave_here21
LABEL $062D timer_otter_ok
LABEL $0639 draw_frog_move
LABEL $0671 _DRAW_END24
LABEL $065A _DRAW_VLA24
LABEL $0671 entry_timer_count_down
LABEL $21B5 homes
LABEL $06E2 no_timer_change
LABEL $06C9 not_dive_timer_change
LABEL $06E2 otter_no_timer_change
LABEL $06E5 home_draw_move
LABEL $06F1 _DRAW_VLA_home
LABEL $070F _DRAW_END_home
LABEL $0706 LF3F4_home1
LABEL $0712 LF3F4_home2
LABEL $0759 die_not_time
LABEL $0749 go_on_timer1
LABEL $4CB9 triller1
LABEL $4CC3 triller2
LABEL $075C pattern_line_move1
LABEL $0773 line_1_LF3F4
LABEL $0790 pattern_line_move2
LABEL $07A7 line_2_LF3F4
LABEL $07CA time_line_move
LABEL $07EB line_3_LF3F4
LABEL $085E no_object_in_1_house
LABEL $081F no_new_animation_phase_home39
LABEL $0824 home_object_move39
LABEL $085C _DRAW_END42
LABEL $0845 _DRAW_VLA42
LABEL $08CD no_object_in_2_house
LABEL $088E no_new_animation_phase_home43
LABEL $0893 home_object_move43
LABEL $08CB _DRAW_END46
LABEL $08B4 _DRAW_VLA46
LABEL $093C no_object_in_3_house
LABEL $08FD no_new_animation_phase_home47
LABEL $0902 home_object_move47
LABEL $093A _DRAW_END50
LABEL $0923 _DRAW_VLA50
LABEL $09AB no_object_in_4_house
LABEL $096C no_new_animation_phase_home51
LABEL $0971 home_object_move51
LABEL $09A9 _DRAW_END54
LABEL $0992 _DRAW_VLA54
LABEL $0A1A no_object_in_5_house
LABEL $09DB no_new_animation_phase_home55
LABEL $09E0 home_object_move55
LABEL $0A18 _DRAW_END58
LABEL $0A01 _DRAW_VLA58
LABEL $0BBE no_snake
LABEL $0A5F snot_lower_out_of_bounds
LABEL $0A53 snake_wait
LABEL $0A66 snake_done_no_snake_next_round
LABEL $0AC9 go_on_snake
LABEL $0A9E switch_to_left_snake
LABEL $3256 snake1a_object
LABEL $0AE7 snake_all_done
LABEL $32F9 snake3a_object
LABEL $0AFA unloop_start_address0
LABEL $001B LENGTH_OF_HEADER
EQU $0F ONE_LINE_LENGTH
COMMENT_LABEL $0F 16
LABEL $0AF4 LF33D
LABEL $0F0E header_start
LABEL $0F29 header_end
LABEL $0CA0 no_otter_in_level
LABEL $0CA0 finnished_otter_stuff
LABEL $0BE9 display_otter
LABEL $0C10 display_otter_1
LABEL $0081 DIE_MOLE
LABEL $0C34 onot_lower_out_of_bounds
LABEL $0C3A obound_test_done
LABEL $0C3A onot_higher_out_of_bounds
LABEL $0C61 no_anim_change_otter
LABEL $0C66 otter_move1
LABEL $0C9E _DRAW_END78
LABEL $0C87 _DRAW_VLA78
LABEL $0CA0 entry_level_done
LABEL $CA5D object_list
LABEL $0CA8 next_object
LABEL $0CCE not_lower_out_of_bounds
LABEL $0CD4 now_check_for_girl
LABEL $0D3E not_higher_out_of_bounds
LABEL $0D08 no_girl_
LABEL $0CF3 girl_might_be_displayed
COMMENT_LABEL $0CF3 check if the girl will be displayed
LABEL $23D7 girl1a_object
LABEL $0D38 no_snake_
LABEL $0D1D snake_might_be_displayed
COMMENT_LABEL $0D1D check if the snake will be displayed
LABEL $0D5E no_animation_move
LABEL $0EF7 anim_no_next
LABEL $0D76 unloop_start_address1
LABEL $0D70 move_sprite_1
LABEL $0EF4 looDone84
LABEL $0F08 unloop_start_address2
LABEL $0F02 move_sprite_3
LABEL $1086 looDone108
LABEL $1090 do_girl_stuff
LABEL $10DB no_animation_moveg
LABEL $10DE move_sprite_g
LABEL $1116 _DRAW_END135
LABEL $10FF _DRAW_VLA135
LABEL $4BD9 weirdos
LABEL $C932 copy_start4
LABEL $4D52 _copy_start4
LABEL $1135 copy_loop1
LABEL $4D17 _copy_start1
LABEL $C8F7 copy_start1
LABEL $4D52 _copy_end1
LABEL $CA5D copy_start2
LABEL $CAF5 copy_end2
LABEL $CAF5 copy_start3
LABEL $CBB5 copy_end3
LABEL $1166 continue_level
LABEL $1BFE scroll_text
LABEL $1954 set_up_scrolling
LABEL $11D6 init_screen_loop
LABEL $1209 no_new_music
LABEL $4BF1 weirdos_end
LABEL $11EA no_last_weirdos
LABEL $C932 yankee
LABEL $19A5 do_one_scroll_step
LABEL $1248 no_text_display
LABEL $123D no_init_change
LABEL $2152 morph_init1
LABEL $1847 set_up_morphing
LABEL $1277 no_morph_display
LABEL $18B9 do_one_morph_step_16
LABEL $1267 morph_not_done_yet
LABEL $1267 no_init_change2
LABEL $CADC current_morph_vectorlist
LABEL $12A5 no_reinit_level
LABEL $129B reinit_level
LABEL $4EAA _band_list_end
LABEL $4DEA _band_list_start
LABEL $4DE8 _object_list_end
COMMENT_LABEL $4DE8 30 sprites
LABEL $4D52 _object_list_start
LABEL $12D8 _loop1
LABEL $12E0 _loop2
LABEL $133E move_on
LABEL $3554 object_table
LABEL $1313 this_is_no_dive_object
LABEL $13D4 no_reinit_stuff
LABEL $135B fly_available
LABEL $1367 fly_go_on
LABEL $136F croco_available
LABEL $137B croco_go_on
LABEL $13A2 snake_go_on
LABEL $13C4 girl_go_on
LABEL $13DC no_girl_on_this_level
LABEL $13E6 no_snake_on_this_level
LABEL $13F0 no_otter_on_this_level
LABEL $1416 no_new_high
LABEL $180E new_high_score
LABEL $142D game_over_loop1
LABEL $1A7B game_over_string
LABEL $146B no_y_scale_now
LABEL $1476 use_y
LABEL $1484 use_x
LABEL $216D morph_countdown1
LABEL $14A7 game_over_loop2
LABEL $C8F7 score_only_string
LABEL $1A91 continue_string
LABEL $C8F7 score_string
LABEL $4BF1 death_sound
LABEL $157D death_screen_loop1
LABEL $23ED frog_dead_pic
LABEL $21A3 morph_death1
LABEL $15E0 death_screen_loop
LABEL $1AE3 died
LABEL $1B13 cause_strings
LABEL $162A end_of_death_morph
LABEL $160F go_on_anyway1
LABEL $1624 exit_to_reinit
LABEL $164A no_fly_bonus
LABEL $1658 no_girl_bonus
LABEL $165A timer_bonus
LABEL $4C03 frog_home_sound
LABEL $21AC morph_home1
LABEL $16BD home_screen_loop
LABEL $1AFD reached_home
LABEL $16E5 no_fly_bonus2
LABEL $1ABC fly_bonus_text
LABEL $16F5 no_girl_bonus2
LABEL $1AAA girl_bonus_text
LABEL $1718 end_of_home_morph
LABEL $1701 go_on_anyway2
LABEL $171D end_of_home
LABEL $172E no_new_life
LABEL $17D5 new_life_intermission
LABEL $4C3B level_done_sound
LABEL $175F level_loop
LABEL $1ACE level_complete_text
LABEL $1780 level_loop_done
LABEL $1796 no_new_life1
LABEL $17A5 roll_over_intermission_loop
LABEL $1BCE roll_over_string
LABEL $17D4 roll_over_intermission_end
LABEL $17CD roll_over_sound_is_playing
LABEL $4CDB ta_ta_ta1
LABEL $4CF5 ta_ta_ta2
LABEL $17EF new_life_intermission_loop
LABEL $1BB1 new_life_string
LABEL $180D new_life_end
LABEL $1828 new_high_score_loop
LABEL $1BE8 highscore_string
LABEL $1846 new_high_score_end
LABEL $CA5D current_morph_vectorlist_org
LABEL $1862 A_is_high_vector_counter
LABEL $CB5B current_morph_vector_diffs
LABEL $18AA set_up_morphing_loop2
LABEL $18D5 morphing_now_16
LABEL $18CF no_new_morph_structure
LABEL $18DB delay_done_16
LABEL $193E no_morphing_is_last
LABEL $193A no_morphing_is_first
LABEL $190D do_morph_loop2_16
COMMENT_LABEL $190D loop through all vector coordinates of list
LABEL $1915 no_minus_morph_16
LABEL $1930 no_minus_morph2_16
LABEL $1981 divide_by_zero200
LABEL $197B divide_next200
LABEL $1970 divide_next1200
LABEL $1983 divide_end200
LABEL $1990 scroll_setup_loop1
LABEL $19AE next_scroll_object
LABEL $1A7A scroll_objects_all_done
LABEL $1A2B scroll_bound_test_done
LABEL $19DA scroll_text_not_over_yet
LABEL $19E6 no_scroll_space
LABEL $1A05 load_x_with_letter_address_done
LABEL $19EF no_scroll_fullstop
LABEL $1CFB _fs
LABEL $1A03 load1_x_with_letter_address_don
LABEL $19F8 no_scroll_0
LABEL $1CC8 _t_
LABEL $1E81 _abc
LABEL $1A40 LF33D204
LABEL $1A75 no_space_draw
LABEL $1A4E _DRAW_VLA207
COMMENT_LABEL $1A4E the local directive doesn't work here ???
LABEL $1A68 LF3F4208
LABEL $1B13 home_full
LABEL $1B25 wall_jump
LABEL $1B39 car
LABEL $1B4C out
LABEL $1B60 drown
LABEL $1B71 snake
LABEL $1B81 croco
LABEL $1B94 mole
LABEL $1BA3 time
LABEL $1D06 _a
LABEL $1D17 _b
LABEL $1D2C _c
LABEL $1D3F _d
LABEL $1D52 _e
LABEL $1D61 _f
LABEL $1D6E _g
LABEL $1D85 _h
LABEL $1D96 _i
LABEL $1DA5 _j
LABEL $1DB4 _k
LABEL $1DB6 _l
LABEL $1DBF _m
LABEL $1DCE _n
LABEL $1DDD _o
LABEL $1DF4 _p
LABEL $1E03 _q
LABEL $1E05 _r
LABEL $1E1A _s
LABEL $1E33 _t
LABEL $1E3E _u
LABEL $1E4F _v
LABEL $1E5A _w
LABEL $1E69 _x
LABEL $1E78 _y
LABEL $1E81 _z
LABEL $1EB5 _0
LABEL $1ECE _1
LABEL $1EDF _2
LABEL $1EF4 _3
LABEL $1F09 _4
LABEL $1F1C _5
LABEL $1F31 _dot
LABEL $1F34 _written
LABEL $1F89 _by
LABEL $1FC2 _chris
LABEL $2021 _frog1
LABEL $20A0 _rip
LABEL $20F1 _home1
LABEL $215B morph_init2
LABEL $2164 morph_init3
LABEL $2176 morph_countdown2
LABEL $217F morph_countdown3
LABEL $2188 morph_countdown4
LABEL $2191 morph_countdown5
LABEL $219A morph_countdown6
LABEL $221B frogger_left1
LABEL $228A frogger_left4
LABEL $2265 frogger_left3
LABEL $2240 frogger_left2
LABEL $221B frogger_left
EQU $19 BLOW_UP
LABEL $22E4 frogger_right1
LABEL $2353 frogger_right4
LABEL $232E frogger_right3
LABEL $2309 frogger_right2
LABEL $2378 frog1a_in_home_sprite
LABEL $23A5 frog1b_in_home_object
LABEL $2394 frog1b_in_home_sprite
LABEL $23C1 frog1c_in_home_object
LABEL $23B0 frog1c_in_home_sprite
LABEL $23CC frog1d_in_home_object
LABEL $23E2 girl1b_object
LABEL $2427 _l_sprite
LABEL $242F _l_object
LABEL $2439 _e_sprite
LABEL $2449 _e_object
LABEL $2453 _v_sprite
LABEL $245D _v_object
LABEL $2467 _d_sprite
LABEL $247D _d_object
LABEL $2487 _o_sprite
LABEL $24A1 _o_object
LABEL $24AB _n_sprite
LABEL $24B9 _n_object
LABEL $24C2 fly1a_sprite
LABEL $24F7 fly1b_object
LABEL $24E2 fly1b_sprite
LABEL $2517 fly1c_object
LABEL $2502 fly1c_sprite
LABEL $2522 fly1d_object
LABEL $252E car1a_sprite
LABEL $254A car1a_object
LABEL $2572 car1b_object
LABEL $2556 car1b_sprite
LABEL $2598 car1c_object
LABEL $257E car1c_sprite
LABEL $25A3 car1d_object
LABEL $25AF car3a_sprite
LABEL $25C9 car3a_object
LABEL $25EF car3b_object
LABEL $25D5 car3b_sprite
LABEL $25FB car4a_sprite
LABEL $2615 car4a_object
LABEL $263B car4b_object
LABEL $2621 car4b_sprite
LABEL $2647 car5a_sprite
LABEL $265F car5a_object
LABEL $2683 car5b_object
LABEL $266B car5b_sprite
LABEL $26A7 car5c_object
LABEL $268F car5c_sprite
LABEL $26B2 car5d_object
LABEL $26BD car6a_object
LABEL $26C8 car6b_object
LABEL $26D3 car6c_object
LABEL $26DE car6d_object
LABEL $26EA car7a_sprite
LABEL $2702 car7a_object
LABEL $2726 car7b_object
LABEL $270E car7b_sprite
LABEL $274A car7c_object
LABEL $2732 car7c_sprite
LABEL $2755 car7d_object
LABEL $2760 car8a_object
LABEL $276B car8b_object
LABEL $2776 car8c_object
LABEL $2781 car8d_object
LABEL $278D truck1a_sprite
LABEL $27B3 truck1a_object
LABEL $27E5 truck1b_object
LABEL $27BF truck1b_sprite
LABEL $2817 truck1c_object
LABEL $27F1 truck1c_sprite
LABEL $2822 truck1d_object
LABEL $282D truck2a_object
LABEL $2838 truck2b_object
LABEL $2843 truck2c_object
LABEL $284E truck2d_object
LABEL $285A bike1a_sprite
LABEL $288A bike1a_object
LABEL $28C6 bike1b_object
LABEL $2896 bike1b_sprite
LABEL $2902 bike1c_object
LABEL $28D2 bike1c_sprite
LABEL $293E bike1d_object
LABEL $290E bike1d_sprite
LABEL $2949 moped1a_sprite
LABEL $2973 moped1a_object
LABEL $29A8 moped1b_object
LABEL $297E moped1b_sprite
LABEL $29DD moped1c_object
LABEL $29B3 moped1c_sprite
LABEL $29E8 moped1d_object
LABEL $29F3 moped2a_object
LABEL $29FE moped2b_object
LABEL $2A09 moped2c_object
LABEL $2A14 moped2d_object
LABEL $2A1F moped3a_object
LABEL $2A2A moped3b_object
LABEL $2A35 moped3c_object
LABEL $2A40 moped3d_object
LABEL $2A4C log1a_sprite
LABEL $2A66 log1a_object
LABEL $2A8C log1b_object
LABEL $2A72 log1b_sprite
LABEL $2AB2 log1c_object
LABEL $2A98 log1c_sprite
LABEL $2AD8 log1d_object
LABEL $2ABE log1d_sprite
LABEL $2AE3 log1e_object
LABEL $2AEE log1f_object
LABEL $2AF9 log2a_object
LABEL $2B04 log2b_object
LABEL $2B0F log2c_object
LABEL $2B1A log2d_object
LABEL $2B25 log2e_object
LABEL $2B30 log2f_object
LABEL $2B3C log3a_sprite
LABEL $2B54 log3a_object
LABEL $2B77 log3b_object
LABEL $2B5F log3b_sprite
LABEL $2B9B log3c_object
LABEL $2B83 log3c_sprite
LABEL $2BBF log3d_object
LABEL $2BA7 log3d_sprite
LABEL $2BCA log3e_object
LABEL $2BD5 log3f_object
LABEL $2BE1 log4a_sprite
LABEL $2BF9 log4a_object
LABEL $2C1D log4b_object
LABEL $2C05 log4b_sprite
LABEL $2C41 log4c_object
LABEL $2C29 log4c_sprite
LABEL $2C65 log4d_object
LABEL $2C4D log4d_sprite
LABEL $2C70 log4e_object
LABEL $2C7B log4f_object
LABEL $2C86 log7a_object
LABEL $2C91 log7b_object
LABEL $2C9C log7c_object
LABEL $2CA7 log7d_object
LABEL $2CB2 log7e_object
LABEL $2CBD log7f_object
LABEL $2CC8 log8a_object
LABEL $2CD3 log8b_object
LABEL $2CDE log8c_object
LABEL $2CE9 log8d_object
LABEL $2CF4 log8e_object
LABEL $2CFF log8f_object
LABEL $2D0A log9a_object
LABEL $2D15 log9b_object
LABEL $2D20 log9c_object
LABEL $2D2B log9d_object
LABEL $2D36 log9e_object
LABEL $2D41 log9f_object
LABEL $2D4C log10a_object
LABEL $2D57 log10b_object
LABEL $2D62 log10c_object
LABEL $2D6D log10d_object
LABEL $2D78 log10e_object
LABEL $2D83 log10f_object
LABEL $2D8F turtle1a_sprite
LABEL $2DA7 turtle1a_object
LABEL $2DCF turtle1b_object
LABEL $2DB3 turtle1b_sprite
LABEL $2DF7 turtle1c_object
LABEL $2DDB turtle1c_sprite
LABEL $2E03 turtle2a_sprite
LABEL $2E1B turtle2a_object
LABEL $2E43 turtle2b_object
LABEL $2E27 turtle2b_sprite
LABEL $2E6B turtle2c_object
LABEL $2E4F turtle2c_sprite
LABEL $2E76 turtle3a_object
LABEL $2E81 turtle3b_object
LABEL $2E8C turtle3c_object
LABEL $2E97 turtle4a_object
LABEL $2EA2 turtle4b_object
LABEL $2EAD turtle4c_object
LABEL $2EB8 turtled1a_object
LABEL $2EC5 turtled1b_object
LABEL $2FCC turtlea1a_object
LABEL $2ED2 turtled1c_object
LABEL $2EDF turtled2a_object
LABEL $2EEC turtled2b_object
LABEL $3139 turtlea2a_object
LABEL $2EF9 turtled2c_object
LABEL $2F06 turtled3a_object
LABEL $2F13 turtled3b_object
LABEL $304E turtlea3a_object
LABEL $2F20 turtled3c_object
LABEL $2F2D turtled4a_object
LABEL $2F3A turtled4b_object
LABEL $31BB turtlea4a_object
LABEL $2F47 turtled4c_object
LABEL $2F55 turtlea1a_sprite
LABEL $2F6A turtlea1b_sprite
LABEL $2F7F turtlea1c_sprite
LABEL $2F8D turtlea1d_sprite
LABEL $2FAD turtlea1e_sprite
LABEL $2FC2 turtlea1f_sprite
LABEL $2FD9 turtlea1b_object
LABEL $3027 turtleb1a_object
LABEL $2FE6 turtlea1c_object
LABEL $2FF3 turtlea1d_object
LABEL $3000 turtlea1e_object
LABEL $300D turtlea1f_object
LABEL $301A turtlea1g_object
LABEL $3034 turtleb1b_object
LABEL $3041 turtleb1c_object
LABEL $305B turtlea3b_object
LABEL $30A9 turtleb3a_object
LABEL $3068 turtlea3c_object
LABEL $3075 turtlea3d_object
LABEL $3082 turtlea3e_object
LABEL $308F turtlea3f_object
LABEL $309C turtlea3g_object
LABEL $30B6 turtleb3b_object
LABEL $30C3 turtleb3c_object
LABEL $30D1 turtlea2a_sprite
LABEL $30E6 turtlea2b_sprite
LABEL $30FB turtlea2d_sprite
LABEL $311A turtlea2e_sprite
LABEL $312F turtlea2f_sprite
LABEL $3146 turtlea2b_object
LABEL $3194 turtleb2a_object
LABEL $3153 turtlea2c_object
LABEL $3160 turtlea2d_object
LABEL $316D turtlea2e_object
LABEL $317A turtlea2f_object
LABEL $3187 turtlea2g_object
LABEL $31A1 turtleb2b_object
LABEL $31AE turtleb2c_object
LABEL $31C8 turtlea4b_object
LABEL $3216 turtleb4a_object
LABEL $31D5 turtlea4c_object
LABEL $31E2 turtlea4d_object
LABEL $31EF turtlea4e_object
LABEL $31FC turtlea4f_object
LABEL $3209 turtlea4g_object
LABEL $3223 turtleb4b_object
LABEL $3230 turtleb4c_object
LABEL $323E snake1a_sprite
LABEL $327A snake1b_object
LABEL $3262 snake1b_sprite
LABEL $329E snake1c_object
LABEL $3286 snake1c_sprite
LABEL $32A9 snake1d_object
LABEL $32B4 snake2a_object
LABEL $32BF snake2b_object
LABEL $32CA snake2c_object
LABEL $32D5 snake2d_object
LABEL $32E1 snake3a_sprite
LABEL $331D snake3b_object
LABEL $3305 snake3b_sprite
LABEL $3341 snake3c_object
LABEL $3329 snake3c_sprite
LABEL $334C snake3d_object
LABEL $3357 snake4a_object
LABEL $3362 snake4b_object
LABEL $336D snake4c_object
LABEL $3378 snake4d_object
LABEL $3384 croco3a_sprite
LABEL $33A2 croco3a_object
LABEL $33CC croco3b_object
LABEL $33AE croco3b_sprite
LABEL $33F2 croco3c_object
LABEL $33D8 croco3c_sprite
LABEL $33FD croco4a_object
LABEL $3408 croco4b_object
LABEL $3413 croco4c_object
LABEL $341F crocoh1a_sprite
LABEL $3467 crocoh1b_object
LABEL $3446 crocoh1b_sprite
LABEL $3498 crocoh1c_object
LABEL $3473 crocoh1c_sprite
LABEL $34C9 crocoh1d_object
LABEL $34A4 crocoh1d_sprite
LABEL $34FA crocoh1e_object
LABEL $34D5 crocoh1e_sprite
LABEL $3505 crocoh1f_object
LABEL $3510 otter1a_sprite
LABEL $3549 otter1b_object
LABEL $3532 otter1b_sprite
LABEL $363D level2_data
EQU $01 HAS_VOICE0
EQU $01 HAS_VOICE1
EQU $01 HAS_DIF_TONE0
EQU $01 HAS_DIF_TONE1
EQU $01 HAS_TONE0
EQU $01 HAS_TONE1
EQU $3C FIRST7
LABEL $3EED ymlen
LABEL $45C4 bitPosOk211
LABEL $4BD8 done
LABEL $45E3 bitPosOk212
LABEL $48D3 voice0done
LABEL $4602 bitPosOk213
LABEL $46AB voice0Amplitudedone
LABEL $4623 bitPosOk214
LABEL $462E voice0AmplitudeBit0Done
LABEL $4644 bitPosOk215
LABEL $464F voice0AmplitudeBit1Done
LABEL $4665 bitPosOk216
LABEL $4670 voice0AmplitudeBit2Done
LABEL $4686 bitPosOk217
LABEL $4691 voice0AmplitudeBit3Done
EQU $00 HAS_SOME_NOISE
LABEL $46C3 bitPosOk220
LABEL $46D1 voice0SetNoTone
LABEL $46D3 voice0ToneDone
LABEL $46E8 bitPosOk221
LABEL $4815 voice0NoLowFreq
LABEL $4709 bitPosOk222
LABEL $4714 voice0LowFreqBit0Done
LABEL $472A bitPosOk223
LABEL $4735 voice0LowFreqBit1Done
LABEL $474B bitPosOk224
LABEL $4756 voice0LowFreqBit2Done
LABEL $476C bitPosOk225
LABEL $4777 voice0LowFreqBit3Done
LABEL $478D bitPosOk226
LABEL $4798 voice0LowFreqBit4Done
LABEL $47AE bitPosOk227
LABEL $47B9 voice0LowFreqBit5Done
LABEL $47CF bitPosOk228
LABEL $47DA voice0LowFreqBit6Done
LABEL $47F0 bitPosOk229
LABEL $47FB voice0LowFreqBit7Done
LABEL $482A bitPosOk232
LABEL $48D3 voice0NoHiFreq
LABEL $484B bitPosOk233
LABEL $4856 voice0HiFreqBit0Done
LABEL $486C bitPosOk234
LABEL $4877 voice0HiFreqBit1Done
LABEL $488D bitPosOk235
LABEL $4898 voice0HiFreqBit2Done
LABEL $48AE bitPosOk236
LABEL $48B9 voice0HiFreqBit3Done
LABEL $48E8 bitPosOk239
LABEL $4BD8 voice1done
LABEL $4907 bitPosOk240
LABEL $49B0 voice1Amplitudedone
LABEL $4928 bitPosOk241
LABEL $4933 voice1AmplitudeBit0Done
LABEL $4949 bitPosOk242
LABEL $4954 voice1AmplitudeBit1Done
LABEL $496A bitPosOk243
LABEL $4975 voice1AmplitudeBit2Done
LABEL $498B bitPosOk244
LABEL $4996 voice1AmplitudeBit3Done
LABEL $49C8 bitPosOk247
LABEL $49D6 voice1SetNoTone
LABEL $49D8 voice1ToneDone
LABEL $49ED bitPosOk248
LABEL $4B1A voice1NoLowFreq
LABEL $4A0E bitPosOk249
LABEL $4A19 voice1LowFreqBit0Done
LABEL $4A2F bitPosOk250
LABEL $4A3A voice1LowFreqBit1Done
LABEL $4A50 bitPosOk251
LABEL $4A5B voice1LowFreqBit2Done
LABEL $4A71 bitPosOk252
LABEL $4A7C voice1LowFreqBit3Done
LABEL $4A92 bitPosOk253
LABEL $4A9D voice1LowFreqBit4Done
LABEL $4AB3 bitPosOk254
LABEL $4ABE voice1LowFreqBit5Done
LABEL $4AD4 bitPosOk255
LABEL $4ADF voice1LowFreqBit6Done
LABEL $4AF5 bitPosOk256
LABEL $4B00 voice1LowFreqBit7Done
LABEL $4B2F bitPosOk259
LABEL $4BD8 voice1NoHiFreq
LABEL $4B50 bitPosOk260
LABEL $4B5B voice1HiFreqBit0Done
LABEL $4B71 bitPosOk261
LABEL $4B7C voice1HiFreqBit1Done
LABEL $4B92 bitPosOk262
LABEL $4B9D voice1HiFreqBit2Done
LABEL $4BB3 bitPosOk263
LABEL $4BBE voice1HiFreqBit3Done
EQU $00 HAS_VOICE2
LABEL $4D17 _score_only_string
LABEL $4D1D _no_score_string
LABEL $4D24 _level_string
LABEL $4D2A _no_level_string
LABEL $4D31 _frogs_string
LABEL $4D37 _no_frogs
LABEL $4D3A _home_objects
EQU $6A HOME_Y_POS
EQU -$50 HOME_X_POS
EQU $24 HOME_X_WIDTH
LABEL $4D52 _home_end
LABEL $4D52 _copy_start2
LABEL $4D52 _object_list
LABEL $4DEA _copy_end2
COMMENT_LABEL $4DEA + 2 that last object is allways zero
LABEL $4DEA _copy_start3
LABEL $4DEA _band_list
LABEL $4EAA _copy_end3
LABEL $4D52 _yankee
LABEL $4E7D _copy_end4
COMMENT_LINE $0000 VECTREX FROGGER
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 comments and vectrex talk are welcome
COMMENT_LINE $0000 my email: malban@email.de
COMMENT_LINE $0000 following command line was used to assemble:
COMMENT_LINE $0000 C:>as09.exe -w200 -h0 -l -mcti frogger.asm >error
COMMENT_LINE $0000 I used the 6809 assembler:
COMMENT_LINE $0000 as09 [1.11].
COMMENT_LINE $0000 Copyright 1990-1994, Frank A. Vorstenbosch, Kingswood Software.
COMMENT_LINE $0000 Available at:
COMMENT_LINE $0000 http://www.falstaff.demon.co.uk/cross.html
COMMENT_LINE $0000 NOWN BUGS(!)
COMMENT_LINE $0000 * bug with diving turtle is still there (offsets of sprite higher 5)
COMMENT_LINE $0000 - rarely seen!
COMMENT_LINE $0000 * sound glitches, dunno, what causes that
COMMENT_LINE $0000 * some vector drawings are not 100% exact, due to optimizations used
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 I like these makro definitions, they are like inlining :-)
COMMENT $0000 vectrex functions as macros (some)
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains makro definitions of vectrex BIOS functions, these are ;
COMMENT_LINE $0000 exact clones of the BIOS functions                                        ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 Shadow of sound chip registers (15 bytes)
COMMENT $0000 Current state of all joystick buttons
COMMENT $0000 Previous state of all joystick buttons
COMMENT $0000 Current toggle state of all buttons
COMMENT $0000 Current toggle state of stick 1 button 1
COMMENT $0000 Current toggle state of stick 1 button 2
COMMENT $0000 Current toggle state of stick 1 button 3
COMMENT $0000 Current toggle state of stick 1 button 4
COMMENT $0000 Current toggle state of stick 2 button 1
COMMENT $0000 Current toggle state of stick 2 button 2
COMMENT $0000 Current toggle state of stick 2 button 3
COMMENT $0000 Current toggle state of stick 2 button 4
COMMENT $0000 Joystick A/D resolution ($80=min $00=max)
COMMENT $0000 Joystick 1 left/right
COMMENT $0000 Joystick 1 up/down
COMMENT $0000 Joystick 2 left/right
COMMENT $0000 Joystick 2 up/down
COMMENT $0000 Joystick enable/mux flags (4 bytes)
COMMENT $0000 Joystick 1 X enable/mux flag (=1)
COMMENT $0000 Joystick 1 Y enable/mux flag (=3)
COMMENT $0000 Joystick 2 X enable/mux flag (=5)
COMMENT $0000 Joystick 2 Y enable/mux flag (=7)
COMMENT $0000 Misc counter/flag byte, zero when not in use
COMMENT $0000 Check0Ref enable flag
COMMENT $0000 Loop counter word (incremented in Wait_Recal)
COMMENT $0000 Default brightness
COMMENT $0000 Dot dwell time?
COMMENT $0000 Dot pattern (bits)
COMMENT $0000 Default text height and width
COMMENT $0000 Default text height
COMMENT $0000 Default text width
COMMENT $0000 Temporary string pointer for Print_Str
COMMENT $0000 Six bytes of counters
COMMENT $0000 First  counter byte
COMMENT $0000 Second counter byte
COMMENT $0000 Third  counter byte
COMMENT $0000 Fourth counter byte
COMMENT $0000 Fifth  counter byte
COMMENT $0000 Sixth  counter byte
COMMENT $0000 Temp storage word for rise/run
COMMENT $0000 Angle for rise/run and rotation calculations
COMMENT $0000 Index pair for run
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT $0000 Index pair for rise
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT $0000 length for rise/run
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT $0000 Refresh time (divided by 1.5MHz)
COMMENT $0000 Refresh time low byte
COMMENT $0000 Refresh time high byte
COMMENT $0000 Music work buffer (14 bytes, backwards?)
COMMENT $0000 register 10
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT $0000 register 7
COMMENT $0000 register 6
COMMENT $0000 register 5
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT $0000 register 1
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT $0000 Pointer to note-to-frequency table (normally $FC8D)
COMMENT $0000 Maximum number of players for Select_Game
COMMENT $0000 Maximum number of games for Select_Game
COMMENT $0000 Storage for first music header word (ADSR table)
COMMENT $0000 Storage for second music header word ('twang' table)
COMMENT $0000 Music data pointer
COMMENT $0000 Used by Explosion_Snd - bit for first channel used?
COMMENT $0000 Used by Explosion_Snd - bits for all channels used?
COMMENT $0000 Current sound channel number for Init_Music
COMMENT $0000 Music active flag ($00=off $01=start $80=on)
COMMENT $0000 Duration counter for Init_Music
COMMENT $0000 3 word 'twang' table used by Init_Music
COMMENT $0000 Four bytes copied from Explosion_Snd's U-reg parameters
COMMENT $0000 Used by Explosion_Snd - channel number in use?
COMMENT $0000 Used by Explosion_Snd - bit for second channel used?
COMMENT $0000 ADSR timers for each sound channel (3 bytes)
COMMENT $0000 Storage for base frequency of each channel (3 words)
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT $0000 Explosion_Snd initialization flag?
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT $0000 Used by Explosion_Snd
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT $0000 Number of players selected in Select_Game
COMMENT $0000 Game number selected in Select_Game
COMMENT $0000 Pointer to 3-byte random number seed (=$C87D)
COMMENT $0000 Default 3-byte random number seed
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT $0000 Default top-of-stack
COMMENT $0000 High score storage (7 bytes)
COMMENT $0000 SWI2/SWI3 interrupt vector (3 bytes)
COMMENT $0000 SWI2/SWI3 interrupt vector (3 bytes)
COMMENT $0000 FIRQ interrupt vector (3 bytes)
COMMENT $0000 IRQ interrupt vector (3 bytes)
COMMENT $0000 SWI/NMI interrupt vector (3 bytes)
COMMENT $0000 SWI/NMI interrupt vector (3 bytes)
COMMENT $0000 Cold start flag (warm start if = $7321)
COMMENT $0000 VIA port B data I/O register
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT $0000 VIA port A data I/O register (handshaking)
COMMENT $0000 VIA port B data direction register (0=input 1=output)
COMMENT $0000 VIA port A data direction register (0=input 1=output)
COMMENT $0000 VIA timer 1 count register lo (scale factor)
COMMENT $0000 VIA timer 1 count register hi
COMMENT $0000 VIA timer 1 latch register lo
COMMENT $0000 VIA timer 1 latch register hi
COMMENT $0000 VIA timer 2 count/latch register lo (refresh)
COMMENT $0000 VIA timer 2 count/latch register hi
COMMENT $0000 VIA shift register
COMMENT $0000 VIA auxiliary control register
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT $0000 VIA control register
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT $0000 VIA interrupt flags register
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT $0000 VIA interrupt enable register
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT $0000 VIA port A data I/O register (no handshaking)
COMMENT $0000 count y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 count scale y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 count y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 count scale y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 pattern y x pattern y x ... $01
COMMENT $0000 pattern y x pattern y x ... $01
COMMENT $0000 scale pattern y x pattern y x ... $01
COMMENT $0000 pattern y x pattern y x ... $01
COMMENT $0000 pattern y x pattern y x ... $01
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 y x y x ...
COMMENT $0000 mode y x mode y x ... $01
COMMENT $0000 never used by GCE carts?
COMMENT $0000 30 cycles
COMMENT $0000 25 cycles
COMMENT $0000 20 cycles
COMMENT $0000 12 cycles
COMMENT $0000 5*B + 10 cycles
COMMENT $0000 5 cycles
COMMENT_LINE $0000 most of these macros are taken from the ROM to avoid
COMMENT_LINE $0000 all those JSR / RTS, in order to save time (over space)
COMMENT_LINE $0000 some of these 'functions' look like they could be optimized
COMMENT_LINE $0000 I did however NOT optimze anything, since I'm not sure
COMMENT_LINE $0000 that it isn't used for any timing stuff...
COMMENT_LINE $0000 _ZERO_VECTOR_BEAM      macro
COMMENT_LINE $0000 _INTENSITY_A           macro
COMMENT_LINE $0000 _INTENSITY             macro value
COMMENT_LINE $0000 _SCALE_A               macro
COMMENT_LINE $0000 _SCALE_B               macro
COMMENT_LINE $0000 _SCALE                 macro value
COMMENT_LINE $0000 _DRAW_LINE_D           macro
COMMENT_LINE $0000 _DRAW_LINE             macro __x,__y
COMMENT_LINE $0000 _DRAW_REL_LINE_FROM    macro __x1,__y1,__x2,_y2
COMMENT_LINE $0000 _DRAW_ZERO_LINE_FROM   macro __x1,__y1,__x2,_y2
COMMENT_LINE $0000 _DRAW_LINE_PATTERN     macro __x,__y,__p
COMMENT_LINE $0000 _ABS_A_B               macro
COMMENT_LINE $0000 _ABS_B                 macro
COMMENT_LINE $0000 _MOVE_TO_D             macro
COMMENT_LINE $0000 _MOVE_TO               macro __x,__y
COMMENT_LINE $0000 _DRAW_VLC              macro
COMMENT_LINE $0000 _DRAW_DIRECT_VLC       macro list_address
COMMENT_LINE $0000 _DRAW_DIRECT_POS_VLC   macro __x, __y, list_address
COMMENT_LINE $0000 _DP_TO_C8              macro
COMMENT_LINE $0000 _DP_TO_D0              macro
COMMENT_LINE $0000 _DO_SOUND              macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store intensity in D/A
COMMENT $0000 Save intensity in $C827
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 do it again just because ?
COMMENT $0000 turn off mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 scale for placing first point
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 defines 'LF3F4' as a local variable
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT_LINE $0000 the followin two instructions might be optimized
COMMENT_LINE $0000 but there is something about 18 cycles :-)
COMMENT $0000 Point to next coordinate pair
COMMENT $0000 Wait a moment
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Shift reg=$FF (solid line), T1H=0
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Set T1H (scale factor?)
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Send Y to A/D
COMMENT $0000 Enable mux
COMMENT $0000 Point to next coordinate pair (here a NOP)
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Get default pattern
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Put pattern in shift register
COMMENT $0000 Clear T1H (scale factor?)
COMMENT $0000 Check if T1 timed out (note wasted byte)
COMMENT $0000 Update pattern if not
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 This code is for lines that are not really short lines
COMMENT $0000 Get default pattern
COMMENT $0000 Update pattern register
COMMENT $0000 Wait a moment
COMMENT $0000 Check if T1 timed out
COMMENT $0000 Update pattern again if not
COMMENT $0000 Get line counter (here also NOP)
COMMENT $0000 Clear shift register (blank output)
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Save D-register on stack
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 timer 1 count high
COMMENT $0000 Get back D-reg
COMMENT $0000 Wait for timer 1
COMMENT $0000 Delay a moment
COMMENT $0000 Wait for timer 1
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 the local directive doesn't work here ???
COMMENT_LINE $0000 I think because it is a makro using makro...
COMMENT $0000 Decrement line count
COMMENT $0000 Go back for more points
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 address of home vector list
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 address of home vector list
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 point to shadow memory
COMMENT $0000 point to sound buffer
COMMENT $0000 init count for 14 registers
COMMENT $0000 get next register
COMMENT $0000 skip if unchanged
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 go back for next register
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 user variable definitions
COMMENT_LINE $0000 $c880
COMMENT_LINE $0000 following are some variable used only when something is 'morphing'
COMMENT_LINE $0000 following are 'in game' variables, out of the game these can be reused
COMMENT_LINE $0000 from here only variables in game!!!
COMMENT_LINE $0000 a short note on the sprite offsets: all sprites have 'naturally' a starting
COMMENT_LINE $0000 point the offset is the space between that starting point and a 'virtual'
COMMENT_LINE $0000 grid position. the value of these offsets heavily depend on which scaling is used,
COMMENT_LINE $0000 so if you use a different 'resolution' these offsets must be changed also...
COMMENT_LINE $0000 in between levels in the intermission sequences
COMMENT_LINE $0000 following is an exact list object structure... for girl
COMMENT_LINE $0000 following are some 'in' game variables which can be reused, they do not
COMMENT_LINE $0000 collide with the other side...
COMMENT_LINE $0000 variables that are only used on startup screen
COMMENT_LINE $0000 these use the same namespace as the above variables below
COMMENT_LINE $0000 scroll_variables_start
COMMENT_LINE $0000 for init screen
COMMENT_LINE $0000 see bottom of file for further addresses!
COMMENT_LINE $0000 following are a lot of constants which I declared for 'better'
COMMENT_LINE $0000 readability (and to keep things variable (constant<->variable!!!)) of the source...
COMMENT_LINE $0000 these are not really well sorted...
COMMENT_LINE $0000 this value is added to the repositioning of sprites
COMMENT_LINE $0000 if they move out of bounds and go to the other side
COMMENT_LINE $0000 to prevent going out of bounds right away again
COMMENT_LINE $0000 because of there offset
COMMENT_LINE $0000 I'm not sure all sprites keep this maximum
COMMENT_LINE $0000 this may 'cause random repositioning of sprites
COMMENT_LINE $0000 a known problem, but I didin't increase this, since the
COMMENT_LINE $0000 actual playing area is allready quite small as it is...
COMMENT_LINE $0000 following are some status constants used for turtle, snake, otter, fly, girl and croco
COMMENT_LINE $0000 bonus BIT MAPS, only two for now, these are AND or ORed
COMMENT_LINE $0000 morphing stati...
COMMENT_LINE $0000 and general morphing constants
COMMENT_LINE $0000 now fixed and allways done with
COMMENT_LINE $0000 16 steps!!!
COMMENT_LINE $0000 number of steps between first and second object
COMMENT_LINE $0000 this actually uses shift rights to implement 32 steps between vectors
COMMENT_LINE $0000 here allways the actual number of steps -1
COMMENT_LINE $0000 !!! all values supported, but only
COMMENT_LINE $0000 8, 16, 32, 64 are using shift as divs!!!
COMMENT_LINE $0000 other values will be SLOW
COMMENT_LINE $0000 (about 10000 cycles per round)
COMMENT_LINE $0000 they allways appear somewhere... truth values :-)
COMMENT_LINE $0000 vectrex coordinates use range from -128 to +127
COMMENT_LINE $0000 these top and bottom values are for scale factor $ff
COMMENT_LINE $0000 different sizes of texts, in format yx, note: different ranges for y and x!
COMMENT_LINE $0000 following are SPECIAL definitions for special objects
COMMENT_LINE $0000 these must be = in the object definition
COMMENT_LINE $0000 SPECIAL_MINUS_LENGTH            EQU -1       ; obsolete...
COMMENT_LINE $0000 scale factors used in the game (all different for optimization :-) :-( )
COMMENT_LINE $0000 following are some 'blowup' factors applied to various objects (for optimization)
COMMENT_LINE $0000 these factors must be = that the resulting coordinate is still below 127
COMMENT_LINE $0000 for optimization the resulting vectors should be pretty near 127
COMMENT_LINE $0000 and the scale factor be = that it is the smallest possible value!
COMMENT_LINE $0000 grid size of the virtal grid in different scale factors
COMMENT_LINE $0000 max 10, so that 12*GRID_SIZE still <= 127
COMMENT_LINE $0000 size can than be altered using scale factor
COMMENT_LINE $0000 I want to draw all lines in one
COMMENT_LINE $0000 go, so 10 is max here :-(
COMMENT_LINE $0000 otherwise I could scale the sprites
COMMENT_LINE $0000 with the same scaling value...
COMMENT_LINE $0000 frogger constants
COMMENT_LINE $0000 following are position information as to where the houses are located
COMMENT_LINE $0000 in SCALE_FACTOR_GAME
COMMENT_LINE $0000 following are for constants for checking which way frogger heads
COMMENT_LINE $0000 value of these is of no importance, just difference...
COMMENT_LINE $0000 an ASCII '5' since it is displayed also with
COMMENT_LINE $0000 this value
COMMENT_LINE $0000 start position of frog in GRID_SIZE GAME
COMMENT_LINE $0000 start band of frog in (0-12) in GRID POSITION
COMMENT_LINE $0000 number of 'pixels' one jump takes the frog...
COMMENT_LINE $0000 obviously in GRID_SIZE_GAME
COMMENT_LINE $0000 sizes of the different frog objects...
COMMENT_LINE $0000 since all the same, I don't use them anymore...
COMMENT_LINE $0000 positions of where frog will be considered to be out of bounds...
COMMENT_LINE $0000 in GAME position
COMMENT_LINE $0000 some positioning variables for the score information display...
COMMENT_LINE $0000 in screen coordinates
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 most of them have been splitted into the main source by now
COMMENT_LINE $0000 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $0000 in March-April 1998
COMMENT_LINE $0000 all stuff contained here is public domain (?)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains private makros, some are taken from the BIOS of vectrex;
COMMENT_LINE $0000 and changed slightly to be more speedy, other were written alltogether by ;
COMMENT_LINE $0000 me, some of these are even obsolete... but all should be in a working     ;
COMMENT_LINE $0000 state                                                                     ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 some heavily optimized for speed :-(
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is supposed to 'reset' the sound hardware,
COMMENT_LINE $0000 it doesn't seem to work correctly though, frog jumps sometimes
COMMENT_LINE $0000 sound differently, what kind of 'bug' is that?
COMMENT $0000 no music is playing ->0
COMMENT $0000 shadow regs
COMMENT_LINE $0000 in the next do sound call
COMMENT_LINE $0000 all regs are cleared automatically
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro should be called every round a music is to be played
COMMENT_LINE $0000 this does not play the sound, it initializes it only, but also every round!
COMMENT_LINE $0000 leaves with DP = to C8
COMMENT_LINE $0000 expects music to be initialized
COMMENT_LINE $0000 and pointer in music_active
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro initializes a new piece of music
COMMENT_LINE $0000 the above 'function' must be called every round in order for the music
COMMENT_LINE $0000 actually to be played
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT_LINE $0000 the next instructions initialize a new sound
COMMENT_LINE $0000 load #1
COMMENT_LINE $0000 set this as marker for music start
COMMENT $0000 doesn'T destroy a register
COMMENT $0000 to do it that way
COMMENT $0000 load a music structure (piece_of_music)
COMMENT $0000 and store it to my own music active pointer
COMMENT_LINE $0000 next a do_my_sound and than do sound must be called
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is sort of the startup for every display round
COMMENT_LINE $0000 does all sound stuff and recalibration, leaves with
COMMENT_LINE $0000 DP = to D0
COMMENT_LINE $0000 destroyes pretty much every register...
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) see above
COMMENT $0000 sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT $0000 ROM function that does the sound playing
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT_LINE $0000 JSR     Wait_Recal         ; sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT_LINE $0000 _DO_SOUND
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makros are for intensity setting
COMMENT_LINE $0000 to = a intensity the bios does use some (many) cycles, here a
COMMENT_LINE $0000 test really saves some cycles, if intensity is = many times per round
COMMENT_LINE $0000 (like differently shaded sprites)
COMMENT_LINE $0000 intensity = to value found in register A
COMMENT_LINE $0000 is compared/stored to 'current_brightness'
COMMENT_LINE $0000 if not equal the new brightness is set!
COMMENT $0000 name of macro, and variable name, can also be accessed with
COMMENT $0000 compare to last known value
COMMENT $0000 if the same, than jump
COMMENT $0000 otherwise store new value
COMMENT $0000 and than set the intensity
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, only the brightness is passed as makro parameter
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to register A
COMMENT $0000 'call' the other makro
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, but allways sets the new brightness
COMMENT_LINE $0000 good for startup of new round, since intensity MUST be = at that point
COMMENT_LINE $0000 or after other functions which destroy brighness (print_str...)
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to A
COMMENT $0000 store it
COMMENT $0000 and change the brightness
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makro ...
COMMENT_LINE $0000 they search for a better (faster) scale/DAC relation and use
COMMENT_LINE $0000 the scaling thus found, it should be somewhat faster that way...
COMMENT_LINE $0000 per round we save approxematly: ? cycles
COMMENT_LINE $0000 both destroy X and D
COMMENT_LINE $0000 SCALE factor is changed
COMMENT_LINE $0000 forget it !!!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0000 NOT DONE:
COMMENT_LINE $0000 what should be done:
COMMENT_LINE $0000 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0000 a = a * s
COMMENT_LINE $0000 b = b * s
COMMENT_LINE $0000 scaling = scaling / s
COMMENT_LINE $0000 that would give the most efficient positioning
COMMENT_LINE $0000 bother it takes more time to calculate the above,
COMMENT_LINE $0000 than it saves
COMMENT_LINE $0000 with every positioning via this routine now,
COMMENT_LINE $0000 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0000 to do one simple positioning!!!
COMMENT_LINE $0000 that is probably about 300 cycles per positioning
COMMENT_LINE $0000 this is done about 30-40 times per round
COMMENT_LINE $0000 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0000 and we haven't drawn a single line yet!!!
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 only positive for now
COMMENT_LINE $0000 multiply two 16 bit values to another 16 bit value
COMMENT_LINE $0000 multiplies D and tmp1 to D
COMMENT_LINE $0000 result should be also 16 bit able, otherwise high bit is lost
COMMENT_LINE $0000 ***ERROR*** It is not tested for signedness, should test
COMMENT_LINE $0000 at startup, if our counter us negative, like the last mul above
COMMENT_LINE $0000 but I don't need it now, it would be just a waste of time
COMMENT_LINE $0000 for my needs!!!
COMMENT $0000 remember D
COMMENT $0000 was it a mul zero? than go there
COMMENT $0000 get the other 16 bit value to D
COMMENT $0000 was that one a zero? than go there
COMMENT $0000 otherwise start multiplying
COMMENT $0000 here we loop after the first step
COMMENT $0000 load our last intermediate multiply value
COMMENT $0000 add tmp1 once
COMMENT $0000 here we go with our first mul step
COMMENT $0000 store the intermediate mul value to mul_tmp2
COMMENT $0000 load 'counter' (was D)
COMMENT $0000 decrement counter ***ERROR***,
COMMENT $0000 and store counter back
COMMENT $0000 if counter not zero, repeat multi...
COMMENT $0000 otherwise load the result to D register
COMMENT $0000 and goto end
COMMENT $0000 here we come if a zero mul was made
COMMENT $0000 result (D) is than zero
COMMENT $0000 and done...
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 there are many 16 bit operands missing, so is
COMMENT_LINE $0000 a LSRD
COMMENT_LINE $0000 this macro does a 16 bit LSR on register D
COMMENT $0000 LSR B
COMMENT $0000 LSR A
COMMENT $0000 if no carry, than exit
COMMENT $0000 otherwise underflow from A to 7bit of B
COMMENT $0000 done
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Sound chip register 0E to port A
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 pause
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 DDR A to input
COMMENT $0000 sound BDIR off, BC1 on, mux off
COMMENT $0000 pause
COMMENT $0000 Read buttons
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 DDR A to output
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT $0000 Set scale factor
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again
COMMENT $0000 disable mux
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT_LINE $0000 LDB     #$FF
COMMENT_LINE $0000 STB     <VIA_t1_cnt_lo  ;Set scale factor
COMMENT_LINE $0000 LDD     #$7F7F
COMMENT_LINE $0000 MY_MOVE_TO_D
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT_LINE $0000 LDD     #$8080
COMMENT_LINE $0000 MY_MOVE_TO_D
COMMENT_LINE $0000 LDB     #$CC
COMMENT_LINE $0000 STB     <VIA_cntl       ;/BLANK low and /ZERO low
COMMENT_LINE $0000 STA     <VIA_shift_reg  ;clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 do it again -> delay
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys Vec_Misc_Count ($C823)
COMMENT_LINE $0000 expects dp to d0
COMMENT_LINE $0000 only OK for small scales, cause not exact!
COMMENT_LINE $0000 STB     <VIA_port_a     ;Send Y to A/D
COMMENT_LINE $0000 STA     <VIA_port_b
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT $0000 Clear shift register (blank output)
COMMENT $0000 3
COMMENT $0000 B-reg = T1 interrupt bit
COMMENT $0000 Wait for T1 to time out
COMMENT $0000 Wait a moment more
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 LDB     #$CC            ; prepare for zero below
COMMENT $0000 BLANK low and /ZERO low
COMMENT_LINE $0000 zero here for following homes
COMMENT_LINE $0000 LDA     #SCALE_IN_HOME
COMMENT $0000 for first house
COMMENT $0000 load object position
COMMENT $0000 korrect with sprite offset Y
COMMENT $0000 korrect with sprite offset X
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load new object definition
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT $0000 A= scale, B= Timer flag
COMMENT $0000 Wait for T1 to time out
COMMENT_LINE $0000 move to done
COMMENT $0000 do it
COMMENT_LINE $0000 in X vector list now!
COMMENT_LINE $0000 U still untouched, pointer to first home!
COMMENT_LINE $0000 display the vector list
COMMENT $0000 (MAKRO) and draw the vector list
COMMENT $0000 for first house
COMMENT $0000 load object position
COMMENT $0000 korrect with sprite offset Y
COMMENT $0000 korrect with sprite offset X
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Enable mux
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load new object definition
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT $0000 A= scale, B= Timer flag
COMMENT $0000 Wait for T1 to time out
COMMENT_LINE $0000 move to done
COMMENT $0000 do it
COMMENT_LINE $0000 in X vector list now!
COMMENT_LINE $0000 U still untouched, pointer to first home!
COMMENT_LINE $0000 display the vector list
COMMENT $0000 (MAKRO) and draw the vector list
COMMENT $0000 makros for unlooping
COMMENT_LINE $0000 ONE_LINE_DRAW macro                        ; cycles
COMMENT_LINE $0000 INC     VIA_port_b        ; [6] Disable mux
COMMENT_LINE $0000 STB     VIA_port_a        ; [6] Send X to A/D
COMMENT_LINE $0000 DEC     VIA_shift_reg     ; [6] Put pattern in shift register
COMMENT_LINE $0000 CLR     VIA_t1_cnt_hi     ; [4] enable timer 1
COMMENT_LINE $0000 LDD     ,X++              ; [8] load Y coordinate to A, X coordinate to B
COMMENT_LINE $0000 STA     VIA_port_a        ; [4] Send Y to A/D
COMMENT_LINE $0000 CLR     VIA_port_b        ; [4] enable mux, thus y integrators are = to Y
COMMENT_LINE $0000 CLR     VIA_shift_reg     ; [4] turn the lights off
COMMENT_LINE $0000 endm
COMMENT_LINE $0000 MAX_LINE_NUM EQU 23
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 SCALE_FACTOR_SPRITE 6
COMMENT_LINE $0000 destroys Vec_Misc_Count ($C823)
COMMENT_LINE $0000 optimized vector list draw makro
COMMENT_LINE $0000 for scale of 6 only!!!
COMMENT_LINE $0000 we even don't wait for the timer
COMMENT_LINE $0000 note: after completetion you must
COMMENT_LINE $0000 do a           STA     VIA_shift_reg
COMMENT_LINE $0000 after about 3 cycles!
COMMENT_LINE $0000 otherwise the beam is not switched off
COMMENT_LINE $0000 reg A contains 0
COMMENT_LINE $0000 saves 1 (STA VIA_shift_reg) over _S makro, with 30 sprites that are 120 cycles!
COMMENT_LINE $0000 idea, not imlemented, to save another 10 cycles per line!
COMMENT_LINE $0000 do the maximum of lines per vector list entries hardcoded
COMMENT_LINE $0000 than jump in the beginning to the required length of vectors to be drawn
COMMENT_LINE $0000 DEC     $C823           ; 7
COMMENT_LINE $0000 BMI     _DRAW_END\?     ; 3 Go back for more points
COMMENT_LINE $0000 these instructions will not be needed anymore!
COMMENT_LINE $0000 we can than go straight from one line to the next, doing that in the
COMMENT_LINE $0000 sprite routine will save nearly 10 cycles per vector per sprite!!!
COMMENT_LINE $0000 another 3000-4000 cycles!!!
COMMENT $0000 cycles
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 this is only atrigger, but lda is faster than tst
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT_LINE $0000 dec VIA_port_b
COMMENT $0000 (2)
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT $0000 (4)
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 this is only atrigger
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [4] turn the lights off
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 (2)
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT $0000 (4)
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 this is only atrigger
COMMENT $0000 [4] enable timer 1
COMMENT $0000 [4] turn the lights off
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3 Go back for more points
COMMENT_LINE $0000 NOP                     ; 2
COMMENT_LINE $0000 STA     <VIA_shift_reg
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 note: after completetion you must
COMMENT_LINE $0000 do a           STA     VIA_shift_reg
COMMENT_LINE $0000 after about 3 cycles!
COMMENT_LINE $0000 otherwise the beam is not switched off
COMMENT_LINE $0000 reg A contains 0
COMMENT $0000 Send Y to A/D
COMMENT $0000 Disable mux
COMMENT $0000 Send X to A/D
COMMENT $0000 Put pattern in shift register
COMMENT $0000 enable timer 1
COMMENT $0000 6
COMMENT $0000 7
COMMENT $0000 3
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $0021 hight, width, rel y, rel x (from 0,0)
COMMENT $0025 some game information, ending with $80
COMMENT $002C end of game header
COMMENT_LINE $002D ***************************************************************************
COMMENT_LINE $002D here the cartridge program starts off
COMMENT_LINE $0030 setup fixdraw
COMMENT $0039 mux disabled, ramp disables
COMMENT $003D Shift reg mode = 000 free disable, T1 PB7 disabled
COMMENT $0041 ZERO disabled, and BLANK enabled
COMMENT $0047 a = y, b = x
COMMENT $0049 Y -> Send it to the D/A
COMMENT $004D ramp disabled, mux enabled -> to Y
COMMENT $0050 ramp disabled, mux disabled -> to Y
COMMENT $0052 X -> Send it to the D/A
COMMENT $0058 enable ramp
COMMENT_LINE $005A bra bra3
COMMENT_LINE $005A bra3
COMMENT $005B ZERO disabled, and BLANK disabled
COMMENT $0064 disable ramp
COMMENT_LINE $006D bra bra3
COMMENT_LINE $006D bra3
COMMENT $006D ZERO disabled, and BLANK enabled
COMMENT $0079 Shift reg mode = 110 SHIFT out under control of system clock, T1 PB7 disabled
COMMENT $0082 initialize game variables
COMMENT $0085 startup screen
COMMENT_LINE $0088 init_screen messes up variables,
COMMENT_LINE $0088 so init them again :-)
COMMENT $0088 initialize game variables
COMMENT $008B set up the first level
COMMENT $008E round_startup_main expects dp set to d0
COMMENT $0091 well, this does the round initializing, main optimized special
COMMENT_LINE $0091 JSR     Wait_Recal         ; sets dp to d0, and pos at 0, 0
COMMENT $0091 just for assembler optimization...
COMMENT $0093 Wait for timer t2
COMMENT $0097 Store refresh value
COMMENT $009A into timer t2
COMMENT_LINE $009C LDB     #$FF
COMMENT_LINE $009C STB     <VIA_t1_cnt_lo  ;Set scale factor
COMMENT_LINE $009C LDD     #$7F7F
COMMENT_LINE $009C MY_MOVE_TO_D
COMMENT $009F blank low and zero low
COMMENT $00A1 clear shift register
COMMENT_LINE $00A3 LDD     #$8080
COMMENT_LINE $00A3 MY_MOVE_TO_D
COMMENT_LINE $00A3 LDB     #$CC
COMMENT_LINE $00A3 STB     <VIA_cntl       ;/BLANK low and /ZERO low
COMMENT_LINE $00A3 STA     <VIA_shift_reg  ;clear shift register
COMMENT $00A6 clear D/A register
COMMENT $00A8 mux=1, disable mux
COMMENT $00AA mux=1, enable mux
COMMENT $00AC do it again -> delay
COMMENT $00B0 disable mux
COMMENT_LINE $00B2 _DO_SOUND
COMMENT $00B5 get joystick stuff, and move frog, collision detection...
COMMENT_LINE $00B8 DO_MY_SOUND_MAIN          ; is usually in ROUND_START_UP, here the above is
COMMENT_LINE $00B8 splitted, saves one DP_TO_C8!
COMMENT $00B8 draw all graphical elements
COMMENT $00BB after draw objects, dp is set to d0
COMMENT_LINE $00BB perhaps jumps right back to pause!
COMMENT_LINE $00BB following used to be a call to
COMMENT_LINE $00BB the button function
COMMENT_LINE $00BB doing it this way saves
COMMENT_LINE $00BB a couple of hundred cycles!
COMMENT $00BB button status in A
COMMENT $00BB Sound chip register 0E to port A
COMMENT $00BF sound BDIR on, BC1 on, mux off
COMMENT $00C4 pause
COMMENT $00C5 sound BDIR off, BC1 off, mux off
COMMENT $00C7 DDR A to input
COMMENT $00C9 sound BDIR off, BC1 on, mux off
COMMENT $00CE pause
COMMENT $00CF Read buttons
COMMENT $00D1 sound BDIR off, BC1 off, mux off
COMMENT $00D5 DDR A to output
COMMENT $00D7 is button4 of joy 1 pressed?
COMMENT_LINE $00D9 note, can EASILY be changed to any
COMMENT_LINE $00D9 other button, it's just the bit!
COMMENT $00D9 if not, start another round
COMMENT_LINE $00DB pause game here...
COMMENT_LINE $00DB first calculated the score now
COMMENT $00DB get button status
COMMENT $00DE jumps allready jumped in this level
COMMENT $00E1 minus scores not added
COMMENT $00E3 0 scores not added
COMMENT $00E5 times 10
COMMENT $00E8 must be in A :-(
COMMENT $00EA load level address
COMMENT $00ED must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $00F0 add to score(level)
COMMENT $00F3 jumps allready jumped in this level
COMMENT $00F6 the cycles waster :-)
COMMENT $00F9 load default text height & width
COMMENT $00FC poke it to ram location
COMMENT $00FF get address of 'pause' string
COMMENT $0102 Text Y
COMMENT $0104 Text X
COMMENT $0106 Print the string
COMMENT $0109 get button status
COMMENT $010C is a button pressed?
COMMENT $010E start another round
COMMENT $0110 go back to main loop
COMMENT_LINE $0112 ***************************************************************************
COMMENT_LINE $0112 this routine calculates the new positions
COMMENT_LINE $0112 expected:dp is allready pointing to d0
COMMENT_LINE $0112 nothing is returned
COMMENT_LINE $0112 leaves with dp pointing to c8
COMMENT $0112 is a "old" jump still ongoing?
COMMENT $011B pretty for optimizing to use a makro :-)
COMMENT $011D than the last?
COMMENT_LINE $0121 hey dissi "b reak"
COMMENT $012D pretty for optimizing to use a makro :-)
COMMENT_LINE $012D move frog corresponding to joystick...
COMMENT $012D must be zero for digital joystick, is set to $ff in private vector routine
COMMENT $0130 read joystick positions (cycle waste)
COMMENT_LINE $0133 first checking for changed x pos
COMMENT $0137 pretty for optimizing to use a makro :-)
COMMENT $0137 only jump if last joy pos was zero
COMMENT $0139 load joystick 1 position X to A
COMMENT $013B store this joystick position
COMMENT $013D no joystick input available
COMMENT $0141 joystick moved to left
COMMENT $0143 test the old joystick position
COMMENT $0144 was center
COMMENT $0148 load old pos to B
COMMENT $014A is it at maximum right position?
COMMENT $014C if so, do nothing
COMMENT_LINE $014E the next instructions initialize a new sound
COMMENT_LINE $014E load #1
COMMENT_LINE $014E set this as marker for music start
COMMENT $014E doesn'T destroy a register
COMMENT $0150 to do it that way
COMMENT $0152 load a music structure (piece_of_music)
COMMENT $0155 and store it to my own music active pointer
COMMENT_LINE $0157 next a do_my_sound and than do sound must be called
COMMENT_LINE $015B do from here
COMMENT_LINE $015B remember x offset in frog.i
COMMENT_LINE $015B must also work for girl
COMMENT $015B load old pos to B
COMMENT $015D increase position with speed faktor
COMMENT $015F and store new position
COMMENT $0161 for internal checking
COMMENT $0165 new heading == old heading?
COMMENT $0167 if yes -> we are done
COMMENT $0169 store it
COMMENT $016B load old pos to D
COMMENT $016D korrekt the old offset y
COMMENT $016F korrekt the old offset x
COMMENT $0171 korrekt the new offset y
COMMENT $0174 korrekt the new offset x
COMMENT $0177 store it back
COMMENT $0179 load the current offset
COMMENT $017C and remember it
COMMENT $017E use the vector list for frog
COMMENT $0181 right pointing frog store it
COMMENT $0183 and exit joystick position routine
COMMENT $0185 test the old joystick position
COMMENT $0186 was center
COMMENT $0188 load old pos to B
COMMENT $018A is it at maximum left position?
COMMENT $018C if so, do nothing
COMMENT_LINE $018E the next instructions initialize a new sound
COMMENT_LINE $018E load #1
COMMENT_LINE $018E set this as marker for music start
COMMENT $018E doesn'T destroy a register
COMMENT $0190 to do it that way
COMMENT $0192 load a music structure (piece_of_music)
COMMENT $0195 and store it to my own music active pointer
COMMENT_LINE $0197 next a do_my_sound and than do sound must be called
COMMENT_LINE $0197 hey dissi "b reak"
COMMENT_LINE $0197 init new jump anim sequence
COMMENT $019B for internal checking
COMMENT $019D than the last?
COMMENT $01A1 if yes -> we are done
COMMENT $01A3 and store it
COMMENT $01A5 load old pos to D
COMMENT $01A7 load old pos to B
COMMENT $01A9 korrekt the old offset y
COMMENT $01AB korrekt the old offset x
COMMENT $01AD korrekt the new offset y
COMMENT $01B0 korrekt the new offset x
COMMENT $01B3 store it back
COMMENT $01B5 load the current offset
COMMENT $01B8 and store it
COMMENT $01BA use the vector list for
COMMENT $01C4 left pointing frog
COMMENT $01C6 load old pos to B
COMMENT $01C8 decrease position with speed faktor
COMMENT $01CA and store new position
COMMENT_LINE $01CC than checking for changed y pos
COMMENT $01CC load joystick 1 position X to A
COMMENT $01CE only jump if last joy pos was zero
COMMENT $01D0 store this joystick position
COMMENT $01D2 no joystick input available
COMMENT $01D4 joystick moved to down
COMMENT $01D6 test the old joystick position
COMMENT $01D7 was center
COMMENT $01D9 load old pos to B
COMMENT $01DB is it at maximum upper position?
COMMENT $01DD if so, do nothing
COMMENT_LINE $01DF the next instructions initialize a new sound
COMMENT_LINE $01DF load #1
COMMENT_LINE $01DF set this as marker for music start
COMMENT $01DF doesn'T destroy a register
COMMENT $01E1 to do it that way
COMMENT $01E3 load a music structure (piece_of_music)
COMMENT $01E6 and store it to my own music active pointer
COMMENT_LINE $01E8 next a do_my_sound and than do sound must be called
COMMENT $01E8 load old pos to B
COMMENT $01EC increase position with speed faktor
COMMENT $01EE and store new position
COMMENT $01F0 for internal checking
COMMENT $01F2 than the last?
COMMENT $01F4 is the heading now the same
COMMENT $01F6 if yes -> we are done
COMMENT $01F8 store new heading
COMMENT $01FA load old pos to D
COMMENT $01FC korrekt the old offset y
COMMENT $01FE korrekt the old offset x
COMMENT $0200 korrekt the new offset y
COMMENT $0203 korrekt the new offset x
COMMENT $0206 store it back
COMMENT $0208 remember the current offset
COMMENT $020D use the vector list for
COMMENT $0210 up pointing frog, store it
COMMENT $0212 and exit joystick position routine
COMMENT $0214 test the old joystick position
COMMENT $0215 was center
COMMENT $0217 load old pos to B
COMMENT $0219 is it at maximum down position?
COMMENT $021B if so, do nothing
COMMENT_LINE $021D the next instructions initialize a new sound
COMMENT_LINE $021D load #1
COMMENT_LINE $021D set this as marker for music start
COMMENT $021D doesn'T destroy a register
COMMENT $021F to do it that way
COMMENT $0221 load a music structure (piece_of_music)
COMMENT $0224 and store it to my own music active pointer
COMMENT_LINE $0226 next a do_my_sound and than do sound must be called
COMMENT $0226 load old pos to B
COMMENT $022A decrease position with speed faktor
COMMENT $022C and store new position
COMMENT $022E for internal checking
COMMENT $0230 than the last?
COMMENT $0232 is the heading now the same
COMMENT $0234 if yes -> we are done
COMMENT $0236 store new heading
COMMENT $0238 load old pos to D
COMMENT $023A korrekt the old offset y
COMMENT $023C korrekt the old offset x
COMMENT $023E korrekt the new offset y
COMMENT $0241 korrekt the new offset x
COMMENT $0244 store it back
COMMENT $0246 remember the current offset
COMMENT $024B use the vector list for
COMMENT $024E down pointing frog
COMMENT_LINE $0250 now lets see if we hit a baddy or goody :-)
COMMENT_LINE $0250 note this stuff could be done in some dispatcher version
COMMENT_LINE $0250 in the sprite positioning loop
COMMENT_LINE $0250 look at the sprite section for what I mean by that :-)
COMMENT_LINE $0250 possibly another few hundred cycles could be saved!
COMMENT $0250 load band information
COMMENT $0252 a short jump saves a few cycles
COMMENT $0254 do a far jump for the home stuff
COMMENT_LINE $0257 first we must get the position of this band in the band list
COMMENT $0257 one less, since homes, don't have a band
COMMENT $0258 fixed to 16 byte,
COMMENT $0259 so we just use some LSL instead
COMMENT $025A of MUL...
COMMENT $025D load bandlist
COMMENT $0260 and go to current band in bandlist
COMMENT $0262 get pointer to next object_list element in this band
COMMENT $0264 if empty we are done
COMMENT_LINE $0266 ok, here we have an object_list entry we must check...
COMMENT_LINE $0269 U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $0269 X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $0269 Y pointer to object structure, points to speed of the current object
COMMENT_LINE $0269 now it gets tricky, we have to compare the position information,
COMMENT_LINE $0269 which is in SCALE_FACTOR_GAME
COMMENT_LINE $0269 with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $0269 we dismiss the difference here and just think that the
COMMENT_LINE $0269 value we find in 'length' in the object definition is
COMMENT_LINE $0269 also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT_LINE $0269 note: this minus stuff below, I removed it for some reason,
COMMENT_LINE $0269 but doing it would actually be a good idea
COMMENT_LINE $0269 for now all sprites have the leftmost position as starting vector
COMMENT_LINE $0269 the minus sprites used to have the rightmost point as the starting vector
COMMENT_LINE $0269 if frog had the opposite side as starting point from all other
COMMENT_LINE $0269 vectors, the collision
COMMENT_LINE $0269 checking could be done with just 1 compare instead of the now
COMMENT_LINE $0269 two compares... but actually I was to lazy to change the
COMMENT_LINE $0269 sprites...
COMMENT_LINE $0269 but on a busy lane one could save up to 100 cycles with this!!!
COMMENT_LINE $0269 ;SPECIAL_MINUS_LENGTH
COMMENT_LINE $0269 TST     10,Y              ; test if sprite starts at the right (MINUS)
COMMENT_LINE $0269 BMI     negative_flag_set ; side ... than a different testing must be done
COMMENT_LINE $0269 perhaps some day I will move the frog position information out
COMMENT_LINE $0269 of the loop... should save a few cycles...
COMMENT $0269 load frog position
COMMENT $026B so that detection is not all THAT sharp
COMMENT $026C so that detection is not all THAT sharp
COMMENT $026D compare it to x postion of object
COMMENT $026F if frog further left, jump
COMMENT $0271 subtract length of object
COMMENT $0273 subtract X position of object
COMMENT $0275 if we are now on 'the left' we hit it
COMMENT $0277 get pointer to next object_list element in this band
COMMENT $0279 if empty we are done
COMMENT $027B load band, if in lower half
COMMENT $027D not collision is good
COMMENT $027F otherwise we die (drowning)
COMMENT $0281 nothing happened, phuu! (bye)
COMMENT $0282 add the size of the frog to A (position of frog)
COMMENT $0284 compare it to x postion of object
COMMENT $0286 still lower, than no collision
COMMENT_LINE $0288 negative_flag_set:
COMMENT_LINE $0288 LDA     frog_x             ; load frog position
COMMENT_LINE $0288 INCA                       ; so that detection is not all THAT sharp
COMMENT_LINE $0288 INCA                       ; so that detection is not all THAT sharp
COMMENT_LINE $0288 CMPA    1,U                ; compare it to x postion of object
COMMENT_LINE $0288 BGT     collision_loop     ; if frog further right, than no collision at all
COMMENT_LINE $0288 nfrog_higher:                              ; otherwise frog is on the right
COMMENT_LINE $0288 ADDA    3,Y                ; add the size of the object (Y+3=pointer to 'length')
COMMENT_LINE $0288 ADDA    current_frog_size_x; add the size of the frog to A (position of frog)
COMMENT_LINE $0288 CMPA    1,U                ; compare it to x postion of object
COMMENT_LINE $0288 BGT     collision_detected ; if we are now on 'the left' we hit it
COMMENT_LINE $0288 BRA     collision_loop     ; otherwise check next object
COMMENT $0288 load band information
COMMENT $028A if in upper half, than it is good
COMMENT $028C than we are being transported
COMMENT $028E SPECIAL...
COMMENT $0290 middle band is treated as a street
COMMENT $0292 if a snake is encountered
COMMENT $0294 jump if not
COMMENT $0296 load the frog postion
COMMENT $0298 minus X position of object
COMMENT $029A hardcoded length of snake :-(
COMMENT $029C otherwise go on
COMMENT $029E otherwise die a snake death
COMMENT_LINE $02A0 must be left snake than (or something is wrong)
COMMENT_LINE $02A0 there are no special cars!
COMMENT $02A0 load the frog postion
COMMENT $02A2 minus X position of object
COMMENT $02A4 hardcoded length of snake :-(
COMMENT $02A6 otherwise go on
COMMENT $02A8 if lower than bitten by snake
COMMENT_LINE $02AA NOTE: A should allways be zero here
COMMENT $02AA otherwise we die a DIE_CAR
COMMENT $02AC type of death
COMMENT $02AE decrease number of available frogs
COMMENT $02B1 do a frog_dead intermission, kind of death
COMMENT_LINE $02B4 is correctly set in 'kind_of_death'
COMMENT $02B4 compare to '0'
COMMENT $02B6 the number of available frogs
COMMENT $02B9 if not zero yet, go on
COMMENT $02BB clean up stack so that we can do a jump
COMMENT $02BD do a game_lost intermission and return there
COMMENT $02C0 init_new_frog_vars expects dp at c8
COMMENT $02C3 clear the frog variables
COMMENT $02C6 die a DIE_OUT kind of
COMMENT $02C9 jump to die
COMMENT $02CB die a DIE_DROWN kind of
COMMENT $02CE jump to die
COMMENT $02D0 die a DIE_CROCO kind of
COMMENT $02D3 jump to die
COMMENT $02D5 die a DIE_SNAKE kind of
COMMENT $02D8 jump to die
COMMENT $02DA lets test the special flag...
COMMENT $02DC if no special go on
COMMENT $02DE test for left crocodile
COMMENT $02E0 if not, jump
COMMENT $02E2 load the frog postion
COMMENT $02E4 subtract X position of object
COMMENT $02E6 hardcoded length of croco :-(
COMMENT $02E8 not eaten by croco, nothing else can be here
COMMENT $02EA if lower frogger was eaten by crocodile
COMMENT $02EC are we sitting on a right croco?
COMMENT $02EE no? than jump
COMMENT $02F0 load the frog postion
COMMENT $02F2 subtract X position of object
COMMENT $02F4 hardcoded length of croco :-(
COMMENT $02F6 not eaten by croco, nothing else can be here
COMMENT $02F8 if higher frogger was eaten by crocodile
COMMENT $02FA look if this is a dived turtle
COMMENT $02FC if yes... drown
COMMENT_LINE $02FE check if we 'capture' a girl
COMMENT $02FE what's the girls status?
COMMENT $0300 is it displayed
COMMENT $0302 no? than jump
COMMENT $0304 load log object address
COMMENT $0306 address + 3 is stored, correct it
COMMENT $0309 subtract the current object information
COMMENT $030B if not the same, go to no_girl_
COMMENT_LINE $030D check for collision
COMMENT $030D load girl x pos
COMMENT $030F subtract frog_x pos
COMMENT $0311 absolute it
COMMENT $0318 if not in the range of 10
COMMENT $031A jump to no girl
COMMENT $031C IS CARRIED
COMMENT $031E load bonus state
COMMENT $0320 add a girl bonus
COMMENT $0322 store it
COMMENT $0324 and play a girl tune
COMMENT_LINE $0324 the next instructions initialize a new sound
COMMENT_LINE $0324 load #1
COMMENT_LINE $0324 set this as marker for music start
COMMENT $0324 doesn'T destroy a register
COMMENT $0326 to do it that way
COMMENT $0328 load a music structure (piece_of_music)
COMMENT $032B and store it to my own music active pointer
COMMENT_LINE $032D next a do_my_sound and than do sound must be called
COMMENT_LINE $032D check if we hit a 'log' snake
COMMENT $032D what's the snake's status?
COMMENT $032F is it displayed
COMMENT $0331 no? than jump
COMMENT $0333 what band are we on now ?
COMMENT $0335 compare with 'snake band'
COMMENT $0337 if not our band... go on
COMMENT $0339 which contains the log a objectlist address
COMMENT $033B load special
COMMENT $033D if a snake is encountered
COMMENT $033F jump if not
COMMENT $0341 load the frog postion
COMMENT $0343 minus X position of object
COMMENT $0345 real hardcoded length
COMMENT $0347 absolut it
COMMENT $034E somewhere arround the snakes head?
COMMENT $0350 if higher, than not hit
COMMENT $0352 otherwise than bitten by snake
COMMENT $0354 now we look for left snake
COMMENT $0356 no?, than jump
COMMENT $0358 load the frog postion
COMMENT $035A minus X position of object
COMMENT $035C absolut it
COMMENT $0363 somewhere arround the snakes head?
COMMENT $0365 if lower than bitten by snake
COMMENT $0369 load the frog postion
COMMENT $036B add the speed of the object
COMMENT $036D and store it
COMMENT $036F are we out of bounds right?
COMMENT $0371 than dead
COMMENT $0375 are we out of bounds left?
COMMENT $0377 than dead
COMMENT $037B ok, for checking of 'normal' bounds
COMMENT_LINE $037D we need to calculate the band_x
COMMENT_LINE $037D coordinates, 'tmp_band_offset' is now
COMMENT_LINE $037D used as a helper
COMMENT_LINE $037D it counts from 0 to 9
COMMENT_LINE $037D if below 0 band_x is decremented
COMMENT_LINE $037D if 10 or high it is incremented...
COMMENT $037D add the speed of the object
COMMENT $037F if below zero, dec band_x 1
COMMENT $0381 if higher GRID_SIZE...
COMMENT $0383 ... add one to band_x
COMMENT $0385 otherwise just store it back
COMMENT $0388 for internal checking
COMMENT $038A make it modulo 10
COMMENT $038C store it
COMMENT $038E otherwise bye for good
COMMENT $038F for internal checking
COMMENT $0391 make it modulo 10
COMMENT $0393 store it
COMMENT $0395 otherwise bye for good
COMMENT_LINE $0396 ; here check for homereach must be put and new frog started
COMMENT $0396 default death for this
COMMENT $0399 band is DIE_WALL_JUMP
COMMENT $039B load frog position
COMMENT $039D are we left of home
COMMENT $039F yep, than die DIE_WALL_JUMP
COMMENT $03A3 or are we right, than
COMMENT $03A5 goto next test
COMMENT $03A7 load home address to X
COMMENT $03AA load home object to U
COMMENT $03AD if none, than OK
COMMENT $03AF if there is something,... further checking
COMMENT $03B1 are we left of home
COMMENT $03B3 yep, than die DIE_WALL_JUMP
COMMENT $03B7 or are we right, than
COMMENT $03B9 goto next test
COMMENT $03BB load home address to X
COMMENT $03BE load home object to U
COMMENT $03C1 if none, than OK
COMMENT $03C3 if there is something,... further checking
COMMENT $03C5 are we left of home
COMMENT $03C7 yep, than die DIE_WALL_JUMP
COMMENT $03CB or are we right, than
COMMENT $03CD goto next test
COMMENT $03CF load home address to X
COMMENT $03D2 load home object to U
COMMENT $03D5 if none, than OK
COMMENT $03D7 if there is something,... further checking
COMMENT $03D9 are we left of home
COMMENT $03DB yep, than die DIE_WALL_JUMP
COMMENT $03DF or are we right, than
COMMENT $03E1 goto next test
COMMENT $03E3 load home address to X
COMMENT $03E6 load home object to U
COMMENT $03E9 if none, than OK
COMMENT $03EB if there is something,... further checking
COMMENT $03ED are we left of home
COMMENT $03EF yep, than die DIE_WALL_JUMP
COMMENT $03F3 or are we right, than
COMMENT $03F5 goto die DIE_WALL_JUMP
COMMENT $03F9 load home address to X
COMMENT $03FC load home object to U
COMMENT $03FF if none, than OK
COMMENT_LINE $0401 X pointer to home object position
COMMENT_LINE $0401 U pointer to home object
COMMENT_LINE $0401 here test ob frog, croco or fly in home
COMMENT $0401 load the object special to A
COMMENT $0403 check if fly...
COMMENT $0405 no?. bother, than dead :-(
COMMENT_LINE $0407 yep, this is a fly object, reinitiate fly...
COMMENT $0407 reload the fly timer
COMMENT $0409 and store it
COMMENT $040B is WAITING
COMMENT $040D load fly bonus for extro
COMMENT $040F add old bonus to it
COMMENT $0411 and store it back...
COMMENT $0413 and do 'frog reached home'
COMMENT $0415 is only half a crocodile seen?
COMMENT $0417 no, than jump
COMMENT $0419 reload the croco timer
COMMENT $041B and store it
COMMENT $041D is WAITING
COMMENT $041F and do 'frog reached home', phhht
COMMENT $0421 if a full crocodile is in house
COMMENT $0423 no?, than jump
COMMENT $0425 otherwise frogger is dead
COMMENT $0428 default death
COMMENT $042B frogger jumped to occupied home
COMMENT_LINE $042E X pointer to home object position
COMMENT_LINE $042E 0
COMMENT $042E load object for frog is in home
COMMENT $0431 and set it as new home object
COMMENT $0433 load animation counter of object
COMMENT $0436 and store it to object in RAM
COMMENT $0438 decrease home counter
COMMENT $043A if not zero, than not all homes are full
COMMENT $043C 1 level plus
COMMENT $043E load level address
COMMENT $0441 must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $0443 add to score (level)
COMMENT $0446 do a frog in home intermission
COMMENT $0449 do a level done intermission
COMMENT $044C increase level counter
COMMENT $044F load number of none level
COMMENT $0451 compare to game_level
COMMENT $0454 if equal a roll_over has occured
COMMENT $0456 clear level (start at 0 again)
COMMENT $0459 and do a roll_over intermission
COMMENT $045C for set up level...
COMMENT $045F set up a new level
COMMENT $0462 clear the frog variables
COMMENT $0465 do a frog in home intermission
COMMENT $0468 clear the frog variables
COMMENT_LINE $046B ***************************************************************************
COMMENT_LINE $046B belongs to draw object below
COMMENT_LINE $046B is here because of short branch...
COMMENT $046B B timer 1 bit test
COMMENT $046D done with move?
COMMENT $0470 no, than go on waiting
COMMENT $0472 die a DIE_TIME kind of
COMMENT $0475 type of death
COMMENT $0477 decrease number of available frogs
COMMENT $047A do a frog_dead intermission, kind of death
COMMENT_LINE $047D is correctly set in 'kind_of_death'
COMMENT $047D compare to '0'
COMMENT $0482 if not zero yet, go on
COMMENT $0484 clean up stack so that we can do a jump
COMMENT $0486 otherwise do a game_lost intermission
COMMENT $0490 pretty for optimizing to use a makro :-)
COMMENT $0490 clear the frog variables
COMMENT_LINE $0497 ***************************************************************************
COMMENT_LINE $0497 exits with dp to d0
COMMENT_LINE $0497 nothing is returned
COMMENT $049B pretty for optimizing to use a makro :-)
COMMENT_LINE $049B ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $049B independent code section
COMMENT_LINE $049B draw frog
COMMENT $049B frog is drawn in full intensity
COMMENT $049D Store intensity in D/A
COMMENT $049F Save intensity in $C827
COMMENT $04A2 mux disabled channel 2
COMMENT $04A7 mux enabled channel 2
COMMENT $04A9 do it again just because ?
COMMENT $04AD turn off mux
COMMENT $04AF set game scaling
COMMENT $04B1 move to time 1 lo, this means scaling
COMMENT $04B3 load current frog position to D
COMMENT_LINE $04B6 following passage is a move_to_d derivat
COMMENT $04B6 Store Y in D/A register
COMMENT $04B8 Blank low, zero high?
COMMENT $04BD Enable mux
COMMENT $04BF Disable mux
COMMENT $04C1 Store X in D/A register
COMMENT $04C3 enable timer
COMMENT_LINE $04C5 pause stuff start!
COMMENT_LINE $04C5 this is stuff which takes time,
COMMENT_LINE $04C5 but can be done anywhere, so we do it here
COMMENT_LINE $04C5 in a 'pause', our pause lasts till GAME_SCALE ($91)
COMMENT_LINE $04C5 timer is count down, that is our scale - timer...
COMMENT_LINE $04C5 the below code looks like a bit
COMMENT_LINE $04C5 overdone, but you might think about the possibilities,
COMMENT_LINE $04C5 each of the about 20-30 sprite use the GAME_SCALE timer,
COMMENT_LINE $04C5 if one wrote a dispatcher type for the time wasted in these sprite
COMMENT_LINE $04C5 positioning, one could calculate whole 3d worlds!!!
COMMENT_LINE $04C5 20-30 * $91 timer cycles to waste!... (plus a bit of overhead)!!!
COMMENT_LINE $04C5 furthermore, if we actually take longer than the $91 cycles
COMMENT_LINE $04C5 it doesn't matter!
COMMENT_LINE $04C5 since integration is halted by the timer countdown
COMMENT_LINE $04C5 ( well after a few 1000 cycles it DOES matter)
COMMENT_LINE $04C5 note:
COMMENT_LINE $04C5 if levels are done well only a small fraction of this pause will be done
COMMENT_LINE $04C5 each round
COMMENT $04C8 load new vector (length was cut by timer :-))
COMMENT $04CA if timer is zero, we are dead
COMMENT_LINE $04CC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $04CC let us look if we need to initiate/destroy a home object
COMMENT_LINE $04CC that is fly or crocodile
COMMENT_LINE $04CC independent code section
COMMENT_LINE $04CC do timer stuff for fly
COMMENT_LINE $04CC insert/remove fly
COMMENT $04CC is there any fly stuff at all?
COMMENT $04CE no?, than go on
COMMENT $04D0 is zero?
COMMENT $04D2 if not zero, do nothing
COMMENT $04D4 is there any fly stuff at all?
COMMENT $04D6 fly is waiting to be displayed
COMMENT $04D8 no?, than it is allready displayed
COMMENT_LINE $04DA if zero... initiate new fly
COMMENT $04DA get a random number
COMMENT $04DD only the lower three bits
COMMENT $04DF not higher than 4
COMMENT $04E1 if lower than ok
COMMENT $04E3 otherwise take only half of it
COMMENT $04E4 must multiply by 5, length of home object
COMMENT $04E6 times 5
COMMENT $04E7 remember start address if all homes are occupied
COMMENT $04E9 load the address to U, start of list of homes
COMMENT $04EC is this home empty (only checking upper byte, should be ok)
COMMENT $04EE if yes, than go on
COMMENT $04F0 otherwise, compare to 20 (right most home)
COMMENT $04F2 not last home?, than go on
COMMENT $04F4 store -5, so that +5 is 0, leftmost home
COMMENT $04F6 check next home (home object is 5 bytes long)
COMMENT $04F8 checked all homes yet
COMMENT $04FA yes, than no home is free
COMMENT $04FC and check again if empty...
COMMENT $04FE remember offset to home for removal
COMMENT $0500 get address of U and add the offset
COMMENT $0503 in U address of 'random' home
COMMENT $0505 load fly object
COMMENT $0508 store to the calculated home address
COMMENT $050A load animation counter of object
COMMENT $050D and store it to object in RAM
COMMENT $050F IS DISPLAYED
COMMENT $0511 and finnished with fly stuff...
COMMENT_LINE $0513 fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $0513 now destroy fly
COMMENT $0513 load current fly offset
COMMENT $0515 get address of U and add the offset
COMMENT $0518 in U address of 'random' home
COMMENT $051F is WAITING
COMMENT $0521 reload the fly timer
COMMENT $0523 and store it
COMMENT_LINE $0525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0525 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0525 independent code section
COMMENT_LINE $0525 do timer stuff for croco (home)
COMMENT_LINE $0525 insert/remove croco
COMMENT $0525 is there any croco stuff at all?
COMMENT $0527 no?, than go on
COMMENT $0529 store it back
COMMENT $052B if not zero, do nothing
COMMENT $052D is there any croco stuff at all?
COMMENT $052F croco is waiting to be displayed
COMMENT $0531 no?, than it is allready displayed
COMMENT_LINE $0533 if zero... initiate new croco
COMMENT $0533 get a random number
COMMENT $0536 only the lower three bits
COMMENT $0538 not higher than 4
COMMENT $053A if lower than ok
COMMENT $053C otherwise take only half of it
COMMENT $053D must multiply by 5, length of home object
COMMENT $053F times 5
COMMENT $0540 remember start address if all homes are occupied
COMMENT $0542 load the address to U, start of list of homes
COMMENT $0545 is this home empty (only checking upper byte, should be ok)
COMMENT $0547 if yes, than go on
COMMENT $0549 otherwise, compate to 20 (right most home)
COMMENT $054B not last home?, than go on
COMMENT $054D store -5, so that +5 is 0, leftmost home
COMMENT $054F check next home (home object is 5 bytes long)
COMMENT $0551 checked all homes yet
COMMENT $0553 yes, than no home is free
COMMENT $0555 and check again if empty...
COMMENT $0557 remember offset to home for removal
COMMENT $0559 get address of U and add the offset
COMMENT $055C in U address of 'random' home
COMMENT $055E load croco object
COMMENT $0561 store to the calculated home address
COMMENT $0563 load animation counter of object
COMMENT $0566 and store it to object in RAM
COMMENT $0568 is DISPLAYED
COMMENT $056A and finnished with croco stuff...
COMMENT_LINE $056C croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $056C now destroy croco
COMMENT $056C load current croco offset
COMMENT $056E get address of U and add the offset
COMMENT $0571 in U address of 'random' home
COMMENT $0578 IS WAITING
COMMENT $057A reload the croco timer
COMMENT $057C and store it
COMMENT_LINE $057E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $057E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $057E independent code section
COMMENT_LINE $057E do timer stuff for diving turtles
COMMENT_LINE $057E initiate alternate turtle sprites on
COMMENT_LINE $057E timer...
COMMENT_LINE $057E clean up stuff
COMMENT_LINE $057E NOTE: turtles really suck
COMMENT_LINE $057E sometimes turtles are torn appart due to
COMMENT_LINE $057E huge sprite offsets
COMMENT_LINE $057E higher than the (now used 5 maximum offset)
COMMENT $057E should the turtles dive?
COMMENT $0580 if not zero, don't do anything
COMMENT $0582 first let us restore the timer
COMMENT $0584 store it HI
COMMENT_LINE $0586 go thru all sprites
COMMENT_LINE $0586 see if diving special is there,
COMMENT_LINE $0586 than change sprites to diving sprites
COMMENT $058E load object address
COMMENT_LINE $0590 U pointer to object
COMMENT_LINE $0590 X pointer to this object list
COMMENT_LINE $0590 Y pointer to t_list
COMMENT_LINE $0590 from here we change the actual object in the object list
COMMENT_LINE $0590 these special objects (for now only turtles)
COMMENT_LINE $0590 have an extra entry in their object describtion
COMMENT_LINE $0590 this is the 'alternate' object describtion address
COMMENT_LINE $0590 this will be loaded and placed in the object list
COMMENT_LINE $0590 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0590 which allways switches back and forth between diving
COMMENT_LINE $0590 and non diving turtles (as we defined the object
COMMENT_LINE $0590 information as this)
COMMENT $0590 faster than a PSHS
COMMENT $0593 load alternate object to Y
COMMENT $0596 load old sprite offsets
COMMENT $0598 negate them (A)
COMMENT $0599 negate them (B)
COMMENT $059A add y position to old sprite offset y
COMMENT $059C add x position to old sprite offset x
COMMENT $059E add new sprite offset y
COMMENT $05A0 add new sprite offset x
COMMENT $05A2 and store the corrected position
COMMENT $05A4 load new animation counter start
COMMENT $05A6 and set it in object list
COMMENT $05A8 store new object definition to object list
COMMENT $05AB faster than a PULS
COMMENT $05AE and go on
COMMENT_LINE $05B0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $05B4 if not zero, do nothing
COMMENT $05B8 if not zero, do nothing
COMMENT_LINE $05BA if zero... initiate new otter
COMMENT $05BA get a random number
COMMENT $05BD random in range of 0 - 15
COMMENT $05BF remember for lane offset
COMMENT $05C1 only the lower three bits
COMMENT $05C3 not higher than 5
COMMENT $05C5 if lower than ok
COMMENT $05C7 otherwise take only half of it
COMMENT $05C8 this is the band we are on now
COMMENT $05CA multiply by band structure width
COMMENT $05CB which is 16 bytes
COMMENT $05CE copy A to B
COMMENT $05D0 SEX B :-) but without sign
COMMENT $05D1 add address start of band list
COMMENT_LINE $05D4 now we try to get a pseudo random offset of objects within
COMMENT_LINE $05D4 this lane, we use the same random number as for lane determination
COMMENT_LINE $05D4 but this time ranging from 0 - 15, see above
COMMENT $05D4 at least 1 in tmp1 so we don't loop to 255
COMMENT_LINE $05D6 start address of this bandlist is in D (and remains there untouched...)
COMMENT $05D6 copy start of lane list to X
COMMENT $05D8 load object list address to U
COMMENT $05DA if zero than we have gone past the last object
COMMENT_LINE $05DC and jump to reinit X
COMMENT $05DC otherwise we decrement our random value by 1
COMMENT $05DE if not zero, get the next object list member
COMMENT $05E0 store list object address of
COMMENT_LINE $05E2 'log' pre otter
COMMENT $05E2 load next list position
COMMENT $05E4 if not zero jump
COMMENT $05E6 if zero we have to use the first object in this band
COMMENT $05E8 even if it is the same... as the pre object
COMMENT $05EA store list object address of
COMMENT_LINE $05EC 'log' past otter
COMMENT $05EC load object address of first otter animation to X
COMMENT $05EF load pre otter object list address
COMMENT $05F1 position of pre list object
COMMENT $05F3 pre object
COMMENT $05F5 modify for y offset of pre object
COMMENT $05F7 modify for x offset of pre object
COMMENT $05F9 add length of pre object
COMMENT $05FB modify y position with otter offset
COMMENT $05FD modify x position with otter offset
COMMENT $05FF add another 3 just for good measure...
COMMENT $0601 and store this as the new otter position
COMMENT $0603 are we to far to the right?
COMMENT $0605 if so, don't use this otter
COMMENT $0607 are we to far to the left?
COMMENT $0609 if so don't use this otter either
COMMENT_LINE $060B the above is sort of needed, since I don't want to check
COMMENT_LINE $060B all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $060B that otter is quasi outside of the main screen and the
COMMENT_LINE $060B log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $060B befor the otter has a chance to realize it is allready near
COMMENT_LINE $060B thus the otter might stay there forever...
COMMENT $060B load speed of pre object
COMMENT $060D otter allways + 1
COMMENT_LINE $060E my otter allways moves from left to right
COMMENT_LINE $060E or standstill
COMMENT $060E store the new speed
COMMENT $0610 store otter anim A 1 object as the relevant otter object
COMMENT $0612 reset animation counter for otter
COMMENT $0614 and store it
COMMENT_LINE $0616 now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $0616 stupid 'log' object, like a midway turtle or a
COMMENT_LINE $0616 middle 'big' log...
COMMENT $0616 load object list address of object past otter
COMMENT $0618 and load the position of otter now
COMMENT $061A subtract these two
COMMENT $061C absolute that
COMMENT $0623 look if they are really near each other
COMMENT_LINE $0625 15 'includes' length of otter, hardcoded :-(
COMMENT $0625 if not near, go to end, otherwise destroy otter
COMMENT $0627 reload the otter timer
COMMENT $0629 and store it
COMMENT $062B and go to done
COMMENT $062D is displayed
COMMENT_LINE $062F ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0633 pretty for optimizing to use a makro :-)
COMMENT_LINE $0633 finally, are done with our in 'pause' move stuff!
COMMENT $0633 load current frog sprite
COMMENT $0636 A scale factor, B timer 1 bit test
COMMENT $0639 done with move?
COMMENT $063B no, than go on waiting
COMMENT_LINE $063D done with move_to_d
COMMENT $063D move to time 1 lo, this means scaling
COMMENT $0645 Send Y to A/D
COMMENT $064B Disable mux
COMMENT $064D Send X to A/D
COMMENT $064F Put pattern in shift register
COMMENT $0651 enable timer 1
COMMENT $0653 6
COMMENT $0655 7
COMMENT $0658 3 Go back for more points
COMMENT $065A Send Y to A/D
COMMENT $0662 Disable mux
COMMENT $0664 Send X to A/D
COMMENT $0666 Put pattern in shift register
COMMENT $0668 enable timer 1
COMMENT $066A 6
COMMENT $066C 7
COMMENT $066F 3 Go back for more points
COMMENT_LINE $0671 NOP                     ; 2
COMMENT_LINE $0671 STA     <VIA_shift_reg
COMMENT_LINE $0671 the above makro leaves with A set to 0!
COMMENT_LINE $0671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0671 here is the entry point for the timer count down
COMMENT_LINE $0671 when frog reaches home...
COMMENT_LINE $0671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0671 independent code section
COMMENT_LINE $0671 draw home, middway and timer line
COMMENT $0671 this and the overnext instruction, zero the beam!
COMMENT $0673 from my sprite draw
COMMENT $0675 /BLANK low and /ZERO low
COMMENT $0677 all following sprites have intensity of $60
COMMENT $0679 Store intensity in D/A
COMMENT $067B Save intensity in $C827
COMMENT $067E mux disabled channel 2
COMMENT $0683 mux enabled channel 2
COMMENT $0685 do it again just because ?
COMMENT $0689 turn off mux
COMMENT_LINE $068B for positioning allways 'SCALE_FACTOR_GRID'
COMMENT $068B clear A, and scale to B
COMMENT $068E patched for speed... /2
COMMENT $068E move to time 1 lo, this means scaling
COMMENT_LINE $0690 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0690 still 0
COMMENT $0690 B=Y pos
COMMENT $0692 Store Y in D/A register
COMMENT $0694 Enable mux
COMMENT $0696 Blank low, zero high?
COMMENT $069A Disable mux
COMMENT $069C X pos relative to start
COMMENT $069E Store X in D/A register
COMMENT $06A0 enable timer
COMMENT $06A2 address of home vector list
COMMENT_LINE $06A5 this is stuff which takes time,
COMMENT_LINE $06A5 but can be done anywhere, so we do it here
COMMENT_LINE $06A5 in a 'pause'
COMMENT $06A5 test if we are in death timer loop
COMMENT $06A8 frog is allready dead!
COMMENT $06AA load fly timer
COMMENT $06AD decrease it
COMMENT $06B0 store it back
COMMENT $06B3 load croco timer
COMMENT $06B6 decrease it
COMMENT $06B9 store it back
COMMENT $06BC load the timer value
COMMENT $06BF if $ff, than no turtle
COMMENT $06C1 overstep the next two
COMMENT $06C3 count it down by $20
COMMENT $06C6 store it
COMMENT $06C9 load the timer value
COMMENT $06CC count it down by $20
COMMENT $06CF store it
COMMENT $06D5 is displayed
COMMENT $06D9 load otter timer
COMMENT $06DC decrease it
COMMENT $06DF store it back
COMMENT_LINE $06E2 done with in 'pause' stuff
COMMENT $06E2 A = Scale factor, B Bit for timer test
COMMENT $06E5 done with move?
COMMENT $06E7 no, than go on waiting
COMMENT_LINE $06E9 done with move
COMMENT_LINE $06E9 own scale factor to homes, since they are drawn in an individually fitted scale
COMMENT $06E9 move to time 1 lo, this means scaling
COMMENT_LINE $06EB now a MY_DRAW_VLC
COMMENT $06EB A= how many vectors?, B = Y coordinate
COMMENT $06ED remember in counter
COMMENT $06F0 clear A
COMMENT_LINE $06F1 STB     VIA_port_a        ; Send Y to A/D
COMMENT_LINE $06F1 STA     VIA_port_b        ; enable MUX
COMMENT $06F3 load next coordinate (X)
COMMENT $06F5 Disable mux
COMMENT $06F7 Send X to A/D
COMMENT $06F9 Put pattern in shift register ($ff)
COMMENT $06FB enable timer 1
COMMENT $06FD next coordinate (Y)
COMMENT $06FF more vectors?
COMMENT $0702 Go back for more points
COMMENT $0704 B-reg = T1 interrupt bit
COMMENT $0706 Wait for T1 to time out
COMMENT $070A Wait a moment more
COMMENT $070B Clear shift register (blank output)
COMMENT $070F A-reg = T1 interrupt bit, B = zero vector byte
COMMENT $0712 Wait for T1 to time out
COMMENT $0716 Wait a moment more
COMMENT_LINE $0719 DRAW THE THREE LINES IN BETWEEN
COMMENT $0719 /BLANK low and /ZERO low
COMMENT $071B patched for speed... /2
COMMENT $071B scale for placing first point
COMMENT $071D move to time 1 lo, this means scaling
COMMENT $071F Y pos, A=0
COMMENT_LINE $0722 move to D
COMMENT $0722 Store Y in D/A register
COMMENT $0724 Enable mux
COMMENT $0726 Blank low, zero high?
COMMENT $0728 Disable mux
COMMENT $072A zero high!
COMMENT $072C X pos relative to start
COMMENT $072E Store X in D/A register
COMMENT $0730 enable timer
COMMENT_LINE $0732 much cycles wasted in below wait for TI1
COMMENT_LINE $0732 we use the time and do some stuff in here...
COMMENT_LINE $0732 this is stuff which takes time,
COMMENT_LINE $0732 but can be done anywhere, so we do it here
COMMENT_LINE $0732 in a 'pause'
COMMENT_LINE $0732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0732 independent code section
COMMENT_LINE $0732 decrease and check level timer
COMMENT_LINE $0732 warn if low
COMMENT $0732 load new vector (length was cut by timer :-))
COMMENT $0735 is it small yet?
COMMENT $0739 no, than jump
COMMENT $073B otherwise play triller1
COMMENT_LINE $073B the next instructions initialize a new sound
COMMENT_LINE $073B load #1
COMMENT_LINE $073B set this as marker for music start
COMMENT $073B doesn'T destroy a register
COMMENT $073E to do it that way
COMMENT $0741 load a music structure (piece_of_music)
COMMENT $0744 and store it to my own music active pointer
COMMENT_LINE $0747 next a do_my_sound and than do sound must be called
COMMENT $0749 is it really really small?
COMMENT $074B nah, not that small yet
COMMENT $074D or play triller2
COMMENT_LINE $074D the next instructions initialize a new sound
COMMENT_LINE $074D load #1
COMMENT_LINE $074D set this as marker for music start
COMMENT $074D doesn'T destroy a register
COMMENT $0750 to do it that way
COMMENT $0753 load a music structure (piece_of_music)
COMMENT $0756 and store it to my own music active pointer
COMMENT_LINE $0759 next a do_my_sound and than do sound must be called
COMMENT_LINE $0759 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0759 done with in 'pause' stuff!
COMMENT $0759 A is scale, B is bit test $40
COMMENT $075C Wait for T1 to time out
COMMENT_LINE $0760 move to done
COMMENT $0760 move to time 1 lo, this means scaling
COMMENT_LINE $0762 draw line...
COMMENT $0762 A=0, B=X
COMMENT $0765 Send Y to A/D
COMMENT $0767 Enable mux
COMMENT $0769 Disable mux
COMMENT $076B Send X to A/D
COMMENT $076F enable T1H
COMMENT $0771 B-reg = T1 interrupt bit
COMMENT $0773 Wait for T1 to time out
COMMENT $0779 Clear shift register (blank output)
COMMENT_LINE $077B line draw done
COMMENT $077B move to time 1 lo, this means scaling
COMMENT_LINE $077D move start
COMMENT $077D a small Y offset down
COMMENT $077F Store Y in D/A register
COMMENT $0781 Enable mux
COMMENT $0783 Blank low, zero high?
COMMENT $0787 Disable mux
COMMENT $0789 Store X in D/A register
COMMENT $078B enable timer
COMMENT $078D A is scale, B is bit test $40
COMMENT $0790 Wait for T1 to time out
COMMENT_LINE $0794 move end
COMMENT $0794 move to time 1 lo, this means scaling
COMMENT_LINE $0796 draw start
COMMENT $0796 A=0, B=X
COMMENT $0799 Send Y to A/D
COMMENT $079B Enable mux
COMMENT $079D Disable mux
COMMENT $079F Send X to A/D
COMMENT $07A3 Set T1H (scale factor?)
COMMENT $07A5 B-reg = T1 interrupt bit
COMMENT $07A7 Wait for T1 to time out
COMMENT $07AD Clear shift register (blank output)
COMMENT_LINE $07AF draw end
COMMENT $07AF move to time 1 lo, this means scaling
COMMENT_LINE $07B1 notice!
COMMENT_LINE $07B1 the timer line length could also be altered using the scale factor,
COMMENT_LINE $07B1 in fact that would save some cycles, especially
COMMENT_LINE $07B1 when time goes low...
COMMENT $07B1 back to zero
COMMENT $07B3 /BLANK low and /ZERO low
COMMENT_LINE $07B5 A is still zero from above
COMMENT_LINE $07B5 move to
COMMENT $07B5 y offset
COMMENT $07B7 Store Y in D/A register
COMMENT $07B9 Enable mux
COMMENT $07BB Blank low, zero high?
COMMENT $07BD Disable mux
COMMENT $07BF zero high, this is really a few cycles to early!
COMMENT $07C1 X pos relative to start
COMMENT $07C3 Store X in D/A register
COMMENT $07C5 enable timer
COMMENT $07C7 A= scale, B-reg = T1 interrupt bit
COMMENT $07CA Wait for T1 to time out
COMMENT_LINE $07CE move done
COMMENT $07CE move to time 1 lo, this means scaling
COMMENT $07D0 load new vector (length was cut by timer :-)), y is allways 0
COMMENT_LINE $07D3 draw line
COMMENT $07D4 Send Y to A/D
COMMENT $07D6 Enable mux
COMMENT $07D8 Disable mux
COMMENT $07DA Send X to A/D
COMMENT $07DE Set T1H (scale factor?)
COMMENT $07E0 B-reg = T1 interrupt bit
COMMENT $07E2 clear temporal
COMMENT $07E5 storage for offset
COMMENT $07E8 load the address to U, start of list of homes
COMMENT $07EB Wait for T1 to time out
COMMENT $07EF prepare for zero below
COMMENT $07F1 Clear shift register (blank output)
COMMENT_LINE $07F3 draw end
COMMENT_LINE $07F3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $07F3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $07F3 independent code section
COMMENT_LINE $07F3 draw all 'home' sprites
COMMENT $07F3 BLANK low and /ZERO low
COMMENT $07F5 load object to X
COMMENT $07F7 if zero, than anothing to do
COMMENT_LINE $07F9 do 1 house object here!
COMMENT $07FB for first house
COMMENT $07FB move to time 1 lo, this means scaling
COMMENT $07FD load object position
COMMENT $07FF korrect with sprite offset Y
COMMENT $0801 korrect with sprite offset X
COMMENT_LINE $0803 move to
COMMENT $0803 Store Y in D/A register
COMMENT $0805 Enable mux
COMMENT $0807 Blank low, zero high?
COMMENT $080B Disable mux
COMMENT $080D Store X in D/A register
COMMENT $080F enable timer
COMMENT $0811 decrease animation counter
COMMENT $0813 if zero, we must initialize new animation phase
COMMENT $0815 load new object definition
COMMENT $0818 store new object definition to object list
COMMENT $081B load new animation counter start
COMMENT $081D and set it in object list
COMMENT $081F load object vector list to X,
COMMENT $0821 A= scale, B= Timer flag
COMMENT $0824 Wait for T1 to time out
COMMENT_LINE $0828 move to done
COMMENT $0828 do it
COMMENT $0828 move to time 1 lo, this means scaling
COMMENT_LINE $082A in X vector list now!
COMMENT_LINE $082A U still untouched, pointer to first home!
COMMENT_LINE $082A display the vector list
COMMENT $082A (MAKRO) and draw the vector list
COMMENT $0830 Send Y to A/D
COMMENT $0836 Disable mux
COMMENT $0838 Send X to A/D
COMMENT $083A Put pattern in shift register
COMMENT $083C enable timer 1
COMMENT $083E 6
COMMENT $0840 7
COMMENT $0843 3 Go back for more points
COMMENT $0845 Send Y to A/D
COMMENT $084D Disable mux
COMMENT $084F Send X to A/D
COMMENT $0851 Put pattern in shift register
COMMENT $0853 enable timer 1
COMMENT $0855 6
COMMENT $0857 7
COMMENT $085A 3 Go back for more points
COMMENT_LINE $085C NOP                     ; 2
COMMENT_LINE $085C STA     <VIA_shift_reg
COMMENT $085E load the address to U, start of list of homes
COMMENT $0863 if zero, than anothing to do
COMMENT_LINE $0865 do 2 house object here!
COMMENT_LINE $0868 LDB     #$CC            ; prepare for zero below
COMMENT $0868 BLANK low and /ZERO low
COMMENT_LINE $086A zero here for following homes
COMMENT_LINE $086A LDA     #SCALE_IN_HOME
COMMENT $086A for first house
COMMENT $086A move to time 1 lo, this means scaling
COMMENT $086C load object position
COMMENT $086E korrect with sprite offset Y
COMMENT $0870 korrect with sprite offset X
COMMENT_LINE $0872 move to
COMMENT $0872 Store Y in D/A register
COMMENT $0874 Enable mux
COMMENT $0876 Blank low, zero high?
COMMENT $087A Disable mux
COMMENT $087C Store X in D/A register
COMMENT $087E enable timer
COMMENT $0880 decrease animation counter
COMMENT $0882 if zero, we must initialize new animation phase
COMMENT $0884 load new object definition
COMMENT $0887 store new object definition to object list
COMMENT $088A load new animation counter start
COMMENT $088C and set it in object list
COMMENT $088E load object vector list to X,
COMMENT $0890 A= scale, B= Timer flag
COMMENT $0893 Wait for T1 to time out
COMMENT_LINE $0897 move to done
COMMENT $0897 do it
COMMENT $0897 move to time 1 lo, this means scaling
COMMENT_LINE $0899 in X vector list now!
COMMENT_LINE $0899 U still untouched, pointer to first home!
COMMENT_LINE $0899 display the vector list
COMMENT $0899 (MAKRO) and draw the vector list
COMMENT $089F Send Y to A/D
COMMENT $08A5 Disable mux
COMMENT $08A7 Send X to A/D
COMMENT $08A9 Put pattern in shift register
COMMENT $08AB enable timer 1
COMMENT $08AD 6
COMMENT $08AF 7
COMMENT $08B2 3 Go back for more points
COMMENT $08B4 Send Y to A/D
COMMENT $08BC Disable mux
COMMENT $08BE Send X to A/D
COMMENT $08C0 Put pattern in shift register
COMMENT $08C2 enable timer 1
COMMENT $08C4 6
COMMENT $08C6 7
COMMENT $08C9 3 Go back for more points
COMMENT_LINE $08CB NOP                     ; 2
COMMENT_LINE $08CB STA     <VIA_shift_reg
COMMENT $08CD load the address to U, start of list of homes
COMMENT $08D2 if zero, than anothing to do
COMMENT_LINE $08D4 do 3 house object here!
COMMENT_LINE $08D7 LDB     #$CC            ; prepare for zero below
COMMENT $08D7 BLANK low and /ZERO low
COMMENT_LINE $08D9 zero here for following homes
COMMENT_LINE $08D9 LDA     #SCALE_IN_HOME
COMMENT $08D9 for first house
COMMENT $08D9 move to time 1 lo, this means scaling
COMMENT $08DB load object position
COMMENT $08DD korrect with sprite offset Y
COMMENT $08DF korrect with sprite offset X
COMMENT_LINE $08E1 move to
COMMENT $08E1 Store Y in D/A register
COMMENT $08E3 Enable mux
COMMENT $08E5 Blank low, zero high?
COMMENT $08E9 Disable mux
COMMENT $08EB Store X in D/A register
COMMENT $08ED enable timer
COMMENT $08EF decrease animation counter
COMMENT $08F1 if zero, we must initialize new animation phase
COMMENT $08F3 load new object definition
COMMENT $08F6 store new object definition to object list
COMMENT $08F9 load new animation counter start
COMMENT $08FB and set it in object list
COMMENT $08FD load object vector list to X,
COMMENT $08FF A= scale, B= Timer flag
COMMENT $0902 Wait for T1 to time out
COMMENT_LINE $0906 move to done
COMMENT $0906 do it
COMMENT $0906 move to time 1 lo, this means scaling
COMMENT_LINE $0908 in X vector list now!
COMMENT_LINE $0908 U still untouched, pointer to first home!
COMMENT_LINE $0908 display the vector list
COMMENT $0908 (MAKRO) and draw the vector list
COMMENT $090E Send Y to A/D
COMMENT $0914 Disable mux
COMMENT $0916 Send X to A/D
COMMENT $0918 Put pattern in shift register
COMMENT $091A enable timer 1
COMMENT $091C 6
COMMENT $091E 7
COMMENT $0921 3 Go back for more points
COMMENT $0923 Send Y to A/D
COMMENT $092B Disable mux
COMMENT $092D Send X to A/D
COMMENT $092F Put pattern in shift register
COMMENT $0931 enable timer 1
COMMENT $0933 6
COMMENT $0935 7
COMMENT $0938 3 Go back for more points
COMMENT_LINE $093A NOP                     ; 2
COMMENT_LINE $093A STA     <VIA_shift_reg
COMMENT $093C load the address to U, start of list of homes
COMMENT $0941 if zero, than anothing to do
COMMENT_LINE $0943 do 4 house object here!
COMMENT_LINE $0946 LDB     #$CC            ; prepare for zero below
COMMENT $0946 BLANK low and /ZERO low
COMMENT_LINE $0948 zero here for following homes
COMMENT_LINE $0948 LDA     #SCALE_IN_HOME
COMMENT $0948 for first house
COMMENT $0948 move to time 1 lo, this means scaling
COMMENT $094A load object position
COMMENT $094C korrect with sprite offset Y
COMMENT $094E korrect with sprite offset X
COMMENT_LINE $0950 move to
COMMENT $0950 Store Y in D/A register
COMMENT $0952 Enable mux
COMMENT $0954 Blank low, zero high?
COMMENT $0958 Disable mux
COMMENT $095A Store X in D/A register
COMMENT $095C enable timer
COMMENT $095E decrease animation counter
COMMENT $0960 if zero, we must initialize new animation phase
COMMENT $0962 load new object definition
COMMENT $0965 store new object definition to object list
COMMENT $0968 load new animation counter start
COMMENT $096A and set it in object list
COMMENT $096C load object vector list to X,
COMMENT $096E A= scale, B= Timer flag
COMMENT $0971 Wait for T1 to time out
COMMENT_LINE $0975 move to done
COMMENT $0975 do it
COMMENT $0975 move to time 1 lo, this means scaling
COMMENT_LINE $0977 in X vector list now!
COMMENT_LINE $0977 U still untouched, pointer to first home!
COMMENT_LINE $0977 display the vector list
COMMENT $0977 (MAKRO) and draw the vector list
COMMENT $097D Send Y to A/D
COMMENT $0983 Disable mux
COMMENT $0985 Send X to A/D
COMMENT $0987 Put pattern in shift register
COMMENT $0989 enable timer 1
COMMENT $098B 6
COMMENT $098D 7
COMMENT $0990 3 Go back for more points
COMMENT $0992 Send Y to A/D
COMMENT $099A Disable mux
COMMENT $099C Send X to A/D
COMMENT $099E Put pattern in shift register
COMMENT $09A0 enable timer 1
COMMENT $09A2 6
COMMENT $09A4 7
COMMENT $09A7 3 Go back for more points
COMMENT_LINE $09A9 NOP                     ; 2
COMMENT_LINE $09A9 STA     <VIA_shift_reg
COMMENT $09AB load the address to U, start of list of homes
COMMENT $09B0 if zero, than anothing to do
COMMENT_LINE $09B2 do 5 house object here!
COMMENT_LINE $09B5 LDB     #$CC            ; prepare for zero below
COMMENT $09B5 BLANK low and /ZERO low
COMMENT_LINE $09B7 zero here for following homes
COMMENT_LINE $09B7 LDA     #SCALE_IN_HOME
COMMENT $09B7 for first house
COMMENT $09B7 move to time 1 lo, this means scaling
COMMENT $09B9 load object position
COMMENT $09BB korrect with sprite offset Y
COMMENT $09BD korrect with sprite offset X
COMMENT_LINE $09BF move to
COMMENT $09BF Store Y in D/A register
COMMENT $09C1 Enable mux
COMMENT $09C3 Blank low, zero high?
COMMENT $09C7 Disable mux
COMMENT $09C9 Store X in D/A register
COMMENT $09CB enable timer
COMMENT $09CD decrease animation counter
COMMENT $09CF if zero, we must initialize new animation phase
COMMENT $09D1 load new object definition
COMMENT $09D4 store new object definition to object list
COMMENT $09D7 load new animation counter start
COMMENT $09D9 and set it in object list
COMMENT $09DB load object vector list to X,
COMMENT $09DD A= scale, B= Timer flag
COMMENT $09E0 Wait for T1 to time out
COMMENT_LINE $09E4 move to done
COMMENT $09E4 do it
COMMENT $09E4 move to time 1 lo, this means scaling
COMMENT_LINE $09E6 in X vector list now!
COMMENT_LINE $09E6 U still untouched, pointer to first home!
COMMENT_LINE $09E6 display the vector list
COMMENT $09E6 (MAKRO) and draw the vector list
COMMENT $09EC Send Y to A/D
COMMENT $09F2 Disable mux
COMMENT $09F4 Send X to A/D
COMMENT $09F6 Put pattern in shift register
COMMENT $09F8 enable timer 1
COMMENT $09FA 6
COMMENT $09FC 7
COMMENT $09FF 3 Go back for more points
COMMENT $0A01 Send Y to A/D
COMMENT $0A09 Disable mux
COMMENT $0A0B Send X to A/D
COMMENT $0A0D Put pattern in shift register
COMMENT $0A0F enable timer 1
COMMENT $0A11 6
COMMENT $0A13 7
COMMENT $0A16 3 Go back for more points
COMMENT_LINE $0A18 NOP                     ; 2
COMMENT_LINE $0A18 STA     <VIA_shift_reg
COMMENT_LINE $0A1A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A1A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A1A now look if there is a snake on some log
COMMENT $0A1A get the status
COMMENT $0A1D if zero, than no snake on level
COMMENT $0A21 if waiting
COMMENT $0A23 go to no snake
COMMENT_LINE $0A27 now we set the new coordinates
COMMENT $0A27 go allways to zero, is sort of bad,
COMMENT $0A29 /BLANK low and /ZERO low
COMMENT $0A2B U to snake_anim_counter
COMMENT $0A2E Y to snake object
COMMENT $0A31 a different scale again... still very high :-(
COMMENT $0A33 move to time 1 lo, this means scaling
COMMENT $0A35 do positioning, load pos here
COMMENT_LINE $0A38 move to start
COMMENT $0A38 Store Y in D/A register
COMMENT $0A3A Blank low, zero high?
COMMENT $0A3F Enable mux
COMMENT $0A41 Disable mux
COMMENT $0A43 Store X in D/A register
COMMENT $0A45 enable timer
COMMENT_LINE $0A47 here in move stuff!
COMMENT $0A47 + 1
COMMENT $0A49 do positioning, load pos here
COMMENT $0A4C add the speed, got from log information earlier
COMMENT $0A4F is on left side out of bounds?
COMMENT $0A51 no, than no coordinate fiddling
COMMENT $0A53 is waiting
COMMENT $0A56 initiate the round counter
COMMENT $0A59 store it
COMMENT $0A5F check if we are out of bounds on the right
COMMENT $0A63 and 're' store it
COMMENT $0A66 decrease the number of steps a snake does befor turing arround
COMMENT $0A69 if not turning... go on
COMMENT $0A6B save X
COMMENT $0A6D look at special in object definition for information...
COMMENT $0A6F are we now left or right?
COMMENT $0A71 if right... jump
COMMENT $0A73 load old sprite offsets
COMMENT $0A75 negate them (A)
COMMENT $0A76 negate them (B)
COMMENT $0A77 add y position to old sprite offset y
COMMENT $0A7A add x position to old sprite offset x
COMMENT $0A7D load new object definition
COMMENT $0A80 add new sprite offset y
COMMENT $0A82 add new sprite offset x
COMMENT $0A84 and store the corrected position
COMMENT $0A87 store new object definition
COMMENT $0A8A load new animation counter start
COMMENT $0A8C and set it in object list
COMMENT $0A8F now go to opposite direction +1 equal log speed
COMMENT $0A92 plus another to be 1 step faster
COMMENT $0A95 get the limit of snake movement before turing again
COMMENT $0A97 and store it
COMMENT $0A9A restore X
COMMENT $0A9C done with snake
COMMENT $0A9E load old sprite offsets
COMMENT $0AA0 negate them (A)
COMMENT $0AA1 negate them (B)
COMMENT $0AA2 add y position to old sprite offset y
COMMENT $0AA5 add x position to old sprite offset x
COMMENT $0AA8 load new object definition
COMMENT $0AAB add new sprite offset y
COMMENT $0AAD add new sprite offset x
COMMENT $0AAF and store the corrected position
COMMENT $0AB2 store new object definition
COMMENT $0AB5 load new animation counter start
COMMENT $0AB7 and set it in object list
COMMENT $0ABA now go to opposite direction -1 equal log speed
COMMENT $0ABD minus another to be 1 step faster
COMMENT $0AC0 get the limit of snake movement before turing again
COMMENT $0AC2 and store it
COMMENT $0AC5 restore X
COMMENT $0AC7 done with snake, on turn, no animation check is needed
COMMENT $0AC9 decrease animation counter
COMMENT $0ACB if zero, we must initialize new animation phase
COMMENT $0ACD save X
COMMENT_LINE $0ACF snake animation change
COMMENT $0ACF load old sprite offsets
COMMENT $0AD1 negate them (A)
COMMENT $0AD2 negate them (B)
COMMENT $0AD3 add y position to old sprite offset y
COMMENT $0AD5 add x position to old sprite offset x
COMMENT $0AD7 load new object definition
COMMENT $0AD9 add new sprite offset y
COMMENT $0ADB add new sprite offset x
COMMENT $0ADD and store the corrected position
COMMENT $0ADF store new object definition to object list
COMMENT $0AE1 load new animation counter start
COMMENT $0AE3 and set it in object list
COMMENT $0AE5 restore X
COMMENT_LINE $0AE7 in move stuff end
COMMENT $0AE7 load object vector list to X,
COMMENT $0AE9 load offset of vector list draw
COMMENT $0AEB 4=JMP [], 2=LDD ,X++
COMMENT $0AF1 A bit for timer, B scale
COMMENT $0AF4 wait for timer to finnish move to
COMMENT_LINE $0AF8 if not allready
COMMENT $0AF8 scale for sprite
COMMENT $0AF8 move to time 1 lo, this means scaling
COMMENT $0AFA (2)
COMMENT $0AFC (2) [4] Send Y to A/D
COMMENT $0B04 [6] Send X to A/D
COMMENT $0B08 [4] enable timer 1
COMMENT $0B0A [8] load Y coordinate to A, X coordinate to B
COMMENT $0B0C [4] Send Y to A/D
COMMENT $0B11 (4)
COMMENT $0B18 [6] Send X to A/D
COMMENT $0B1A this is only atrigger, but lda is faster than tst
COMMENT $0B1C [4] enable timer 1
COMMENT $0B1E [8] load Y coordinate to A, X coordinate to B
COMMENT $0B20 [4] Send Y to A/D
COMMENT_LINE $0B22 dec VIA_port_b
COMMENT $0B27 [6] Send X to A/D
COMMENT $0B29 this is only atrigger, but lda is faster than tst
COMMENT $0B2B [4] enable timer 1
COMMENT $0B2D [8] load Y coordinate to A, X coordinate to B
COMMENT $0B2F [4] Send Y to A/D
COMMENT_LINE $0B31 dec VIA_port_b
COMMENT $0B36 [6] Send X to A/D
COMMENT $0B38 this is only atrigger, but lda is faster than tst
COMMENT $0B3A [4] enable timer 1
COMMENT $0B3C [8] load Y coordinate to A, X coordinate to B
COMMENT $0B3E [4] Send Y to A/D
COMMENT_LINE $0B40 dec VIA_port_b
COMMENT $0B45 [6] Send X to A/D
COMMENT $0B47 this is only atrigger, but lda is faster than tst
COMMENT $0B49 [4] enable timer 1
COMMENT $0B4B [8] load Y coordinate to A, X coordinate to B
COMMENT $0B4D [4] Send Y to A/D
COMMENT_LINE $0B4F dec VIA_port_b
COMMENT $0B54 [6] Send X to A/D
COMMENT $0B56 this is only atrigger, but lda is faster than tst
COMMENT $0B58 [4] enable timer 1
COMMENT $0B5A [8] load Y coordinate to A, X coordinate to B
COMMENT $0B5C [4] Send Y to A/D
COMMENT_LINE $0B5E dec VIA_port_b
COMMENT $0B63 [6] Send X to A/D
COMMENT $0B65 this is only atrigger, but lda is faster than tst
COMMENT $0B67 [4] enable timer 1
COMMENT $0B69 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B6B [4] Send Y to A/D
COMMENT_LINE $0B6D dec VIA_port_b
COMMENT $0B72 [6] Send X to A/D
COMMENT $0B74 this is only atrigger, but lda is faster than tst
COMMENT $0B76 [4] enable timer 1
COMMENT $0B78 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B7A [4] Send Y to A/D
COMMENT_LINE $0B7C dec VIA_port_b
COMMENT $0B81 [6] Send X to A/D
COMMENT $0B83 this is only atrigger, but lda is faster than tst
COMMENT $0B85 [4] enable timer 1
COMMENT $0B87 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B89 [4] Send Y to A/D
COMMENT_LINE $0B8B dec VIA_port_b
COMMENT $0B90 [6] Send X to A/D
COMMENT $0B92 this is only atrigger, but lda is faster than tst
COMMENT $0B94 [4] enable timer 1
COMMENT $0B96 [8] load Y coordinate to A, X coordinate to B
COMMENT $0B98 [4] Send Y to A/D
COMMENT_LINE $0B9A dec VIA_port_b
COMMENT $0B9F [6] Send X to A/D
COMMENT $0BA1 this is only atrigger, but lda is faster than tst
COMMENT $0BA3 [4] enable timer 1
COMMENT $0BA5 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BA7 [4] Send Y to A/D
COMMENT_LINE $0BA9 dec VIA_port_b
COMMENT $0BAE [6] Send X to A/D
COMMENT $0BB0 this is only atrigger
COMMENT $0BB2 [4] enable timer 1
COMMENT $0BBC [4] turn the lights off
COMMENT_LINE $0BBE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0BBE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0BBE independent code section
COMMENT_LINE $0BBE remove/display otter
COMMENT $0BBE is there any otter stuff at all?
COMMENT $0BC1 no?, than go on
COMMENT $0BC5 [4] turn the lights off
COMMENT $0BC7 croco is waiting to be displayed
COMMENT $0BC9 if zero, do nothing
COMMENT_LINE $0BCD otter is allready displayed, must check if we should destroy it...
COMMENT $0BCD load object list address of object past otter
COMMENT $0BD0 and load the position of otter now
COMMENT $0BD3 compare to log pos
COMMENT $0BD5 go to display if otter higher log
COMMENT_LINE $0BD7 here when otter pos smaller log pos
COMMENT $0BD7 now add the hardcoded length plus some (5) extra 'pixel'
COMMENT $0BD9 compare to log pos
COMMENT $0BDB if still lower, than display
COMMENT_LINE $0BDD otherwise if now greater, than a 'collision' with log happened
COMMENT_LINE $0BDD now destroy otter
COMMENT $0BDD reload the otter timer
COMMENT $0BE0 and store it
COMMENT $0BE3 IS WAITING
COMMENT $0BE6 and go to done
COMMENT_LINE $0BE9 ok, otter is available and still displayed...
COMMENT_LINE $0BE9 first let us look if there is afrog to be eaten... :-)
COMMENT $0BE9 go to 0,0
COMMENT $0BEB /BLANK low and /ZERO low
COMMENT $0BED what band are we on now ?
COMMENT $0BF0 plus one to compare with frog band
COMMENT $0BF1 compare with frog band
COMMENT $0BF4 if not equal... do a simple otter display
COMMENT $0BF6 load otter position
COMMENT $0BF9 subtract frog position
COMMENT $0BFC if positive no collision is possible -> jump to display
COMMENT $0BFE near 20
COMMENT $0C00 if lower, than everything OK
COMMENT $0C02 test if we are in death timer loop
COMMENT $0C05 frog is allready dead!
COMMENT $0C0A die a DIE_MOLE kind of
COMMENT_LINE $0C10 ............................................................................
COMMENT_LINE $0C10 this is actually the same as the code used in the main sprite loop
COMMENT_LINE $0C10 just fitted for otter only...
COMMENT $0C10 scale for game positioning
COMMENT $0C12 move to time 1 lo, this means scaling
COMMENT $0C14 load otter position
COMMENT_LINE $0C17 move to
COMMENT $0C17 Store Y in D/A register
COMMENT $0C19 Blank low, zero high?
COMMENT $0C1E Enable mux
COMMENT $0C20 Disable mux
COMMENT $0C22 Store X in D/A register
COMMENT $0C24 enable timer
COMMENT_LINE $0C26 in move stuff start
COMMENT $0C26 load otter position
COMMENT $0C29 add the speed
COMMENT $0C2C is on left side out of bounds?
COMMENT $0C2E no, than no coordinate fiddling
COMMENT $0C32 don't check for right out of bounds now
COMMENT $0C34 check if we are out of bounds on the right
COMMENT $0C36 no? than go on
COMMENT $0C3A store the new x position
COMMENT $0C3D load the otter object to U
COMMENT $0C40 decrease animation counter
COMMENT $0C43 if zero, we must initialize new animation phase
COMMENT $0C45 load old sprite offsets
COMMENT $0C47 negate them (A)
COMMENT $0C48 negate them (B)
COMMENT $0C49 add y position to old sprite offset y
COMMENT $0C4C add x position to old sprite offset x
COMMENT $0C4F load new object definition
COMMENT $0C51 add new sprite offset y
COMMENT $0C53 add new sprite offset x
COMMENT $0C55 and store the corrected position
COMMENT $0C59 store new object definition to object list
COMMENT $0C5C load new animation counter start
COMMENT $0C5E and set it in object list
COMMENT $0C61 load object vector list to X,
COMMENT_LINE $0C63 in move stuff end
COMMENT $0C63 A= scale, B = timer IRQ...
COMMENT $0C66 Wait for T1 to time out
COMMENT_LINE $0C6A move done
COMMENT $0C6A scale for sprite
COMMENT $0C6A move to time 1 lo, this means scaling
COMMENT $0C6C draw sprite
COMMENT $0C72 Send Y to A/D
COMMENT $0C78 Disable mux
COMMENT $0C7A Send X to A/D
COMMENT $0C7C Put pattern in shift register
COMMENT $0C7E enable timer 1
COMMENT $0C80 6
COMMENT $0C82 7
COMMENT $0C85 3 Go back for more points
COMMENT $0C87 Send Y to A/D
COMMENT $0C8F Disable mux
COMMENT $0C91 Send X to A/D
COMMENT $0C93 Put pattern in shift register
COMMENT $0C95 enable timer 1
COMMENT $0C97 6
COMMENT $0C99 7
COMMENT $0C9C 3 Go back for more points
COMMENT_LINE $0C9E NOP                     ; 2
COMMENT_LINE $0C9E STA     <VIA_shift_reg
COMMENT $0C9E finnish otter
COMMENT_LINE $0CA0 ............................................................................
COMMENT_LINE $0CA0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0CA0 entry for 'LEVEL DONE' display
COMMENT_LINE $0CA0 only the 'sprites' are displayed (and moved) below...
COMMENT_LINE $0CA0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0CA0 independent code section
COMMENT_LINE $0CA1 DRAW ALL LEVEL SPRITES
COMMENT_LINE $0CA1 now drawing all sprites (or object, whatever you call them)
COMMENT_LINE $0CA1 isn't that a nice short routine, to draw all sprites,
COMMENT_LINE $0CA1 move them, do an out of bounds checking,
COMMENT_LINE $0CA1 intensity changing, and initializing
COMMENT_LINE $0CA1 new animation sequences?
COMMENT_LINE $0CA1 actually the animation initialization takes most of the code
COMMENT_LINE $0CA1 well, split the makros... :-) and you'll see that it
COMMENT_LINE $0CA1 is not that short afterall...
COMMENT $0CA1 load the address to U, start of list of
COMMENT_LINE $0CA4 all objects (sprites) for this level
COMMENT_LINE $0CA4 and their position
COMMENT $0CA4 load new list object
COMMENT_LINE $0CA8 U pointing to Y coordinate now
COMMENT_LINE $0CA8 Y pointing to object structure AND
COMMENT_LINE $0CA8 Y pointing to x-speed in object structure
COMMENT $0CA8 a different scale again... still very high :-(
COMMENT $0CAA move to time 1 lo, this means scaling
COMMENT $0CAE [4] turn the lights off
COMMENT $0CB0 /BLANK low and /ZERO low
COMMENT $0CB2 load y, x coordinate from object_list to
COMMENT_LINE $0CB4 A,B=D,
COMMENT_LINE $0CB4 intensities of all sprites are the same, so no
COMMENT_LINE $0CB4 setting is really needed!
COMMENT_LINE $0CB4 LDA     9,Y                ; load intensity of sprite
COMMENT_LINE $0CB4 MY_INTENSITY_A             ; change to intensity in A
COMMENT_LINE $0CB4 fuck, now it really gets tricky, this used to be a makro, but due to
COMMENT_LINE $0CB4 optimization I split the makro
COMMENT_LINE $0CB4 notice:
COMMENT_LINE $0CB4 during a positioning of a vector, there is a loop, where the program just
COMMENT_LINE $0CB4 waits for the beam to reach the required position
COMMENT_LINE $0CB4 it waits for the SCALE.
COMMENT_LINE $0CB4 here I tweaked the move_to_d function for my purposes
COMMENT_LINE $0CB4 i use an optimized 'version' of move_to_D (without the delays, losing
COMMENT_LINE $0CB4 a little bit of accuracy)
COMMENT_LINE $0CB4 since game positioning is done with a 'huge' scale factor ($91) there
COMMENT_LINE $0CB4 is a whole lot of empty space in here, and that at EACH sprite.
COMMENT_LINE $0CB4 I don't know yet how to use the time wasted here efficiently,
COMMENT_LINE $0CB4 I should build a task handler for things like this :-)
COMMENT_LINE $0CB4 anyway, the only thing done yet in (befor!) that loop is the
COMMENT_LINE $0CB4 checking whether an animation occurs or not.
COMMENT_LINE $0CB4 and now if the sprite is out of bounds
COMMENT_LINE $0CB4 and girl and snake checking!!!
COMMENT_LINE $0CB4 not much yet, but another 1000 cycles saved.
COMMENT_LINE $0CB4 note: there can probably MUCH more been done during that waiting!!!
COMMENT_LINE $0CB4 ;;;;;;;;;;;; NOW MOVE_TO_D
COMMENT_LINE $0CB4 note: there are 2 or 3 cycles more that could be saved here
COMMENT_LINE $0CB4 by optimizing, but the vectrex zeroing is NOT
COMMENT_LINE $0CB4 fast enough, vectors are not positioned correctly than!!!
COMMENT $0CB4 Store Y in D/A register
COMMENT $0CB6 Enable mux, this sets the Y integrator
COMMENT $0CB8 Blank low, zero high?
COMMENT $0CBA Disable mux
COMMENT $0CBC Store X in D/A register this goes to the X integrator
COMMENT $0CBE Now zero is of... we can integrate!
COMMENT $0CC0 enable timer, by accessing it!
COMMENT_LINE $0CC2 here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $0CC2 in move action here!
COMMENT $0CC2 Increment U by 1
COMMENT $0CC4 add to B (x coordinate that is)
COMMENT_LINE $0CC6 the speed value (in the list object,
COMMENT_LINE $0CC6 e.g. car_1), increment Y by 1
COMMENT $0CC6 is on left side out of bounds?
COMMENT $0CC8 no, than no coordinate fiddling
COMMENT $0CCC don't check for right out of bounds now
COMMENT $0CCE check if we are out of bounds on the right
COMMENT $0CD0 no? than go on
COMMENT_LINE $0CD4 on each out of bounds a girl check is made...
COMMENT $0CD4 save coordinates
COMMENT $0CDA pretty for optimizing to use a makro :-)
COMMENT $0CDA what's the girls status?
COMMENT $0CDC no girl at all? than jump
COMMENT_LINE $0CDE TFR     U,D               ; transfer object list address to D
COMMENT_LINE $0CDE CMPA    girl_log_object   ; so that we can conveniently compare
COMMENT_LINE $0CDE BNE     no_girl_          ; it to girl_log_object
COMMENT_LINE $0CDE CMPB    girl_log_object+1 ; which contains the log a objectlist address
COMMENT $0CE1 if not the same, go to no_girl_
COMMENT $0CE3 what's the girls status?
COMMENT $0CE5 we are waiting to be displayed
COMMENT $0CE7 than go to might be displayed routine
COMMENT $0CE9 if frogger carries girl,
COMMENT $0CEB do nothing
COMMENT_LINE $0CED now IS_DISPLAYED, resetting counter and reset status
COMMENT $0CED IS WAITING
COMMENT $0CEF initiate the round counter
COMMENT $0CF1 store it
COMMENT $0CF3 count down the round counter
COMMENT $0CF5 if not zero, than no girl will be displayed
COMMENT $0CF7 IS DISPLAYED
COMMENT $0CF9 load girl object address
COMMENT $0CFC store it as first object
COMMENT_LINE $0CFE now do positioning...
COMMENT $0CFE the position of the log is on the stack
COMMENT $0D00 get and store the X position
COMMENT $0D02 y position hardcoded, since sprites have different starting points
COMMENT $0D04 store y position
COMMENT $0D06 if we did girl, than no snake here!
COMMENT $0D08 what's the snake's status?
COMMENT $0D0A no snake at all? than jump
COMMENT_LINE $0D0C TFR     U,D               ; transfer object list address to D
COMMENT_LINE $0D0C CMPA    snake_log_object  ; so that we can conveniently compare
COMMENT_LINE $0D0C BNE     no_snake_         ; it to girl_log_object
COMMENT_LINE $0D0C CMPB    snake_log_object+1; which contains the log a objectlist address
COMMENT $0D0F if not the same, go to no_snake_
COMMENT $0D11 what's the snake's status?
COMMENT $0D13 we are waiting to be displayed
COMMENT $0D15 than go to might be displayed routine
COMMENT $0D17 IS WAITING
COMMENT $0D19 initiate the round counter
COMMENT $0D1B store it
COMMENT $0D1D count down the round counter
COMMENT $0D1F if not zero, than no snake will be displayed
COMMENT $0D21 IS DISPLAYED
COMMENT $0D23 load snake object address
COMMENT $0D26 store it as first object
COMMENT_LINE $0D28 now do positioning...
COMMENT $0D28 the position of the log is on the stack
COMMENT $0D2A get and store the X position
COMMENT $0D2C y position hardcoded, since sprites have different starting points
COMMENT $0D2E store y position
COMMENT $0D30 get the speed of snake start
COMMENT $0D32 store it
COMMENT $0D34 get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0D36 and store it
COMMENT $0D3C pretty for optimizing to use a makro :-)
COMMENT $0D3C restore coordinates
COMMENT $0D3E store the new x position, and increment U
COMMENT_LINE $0D40 (U points to animation)
COMMENT_LINE $0D40 now we do that animation checking
COMMENT $0D40 load object vector list to X,
COMMENT $0D42 decrease animation counter
COMMENT $0D44 if zero, we must initialize new animation phase
COMMENT $0D46 load old sprite offsets
COMMENT $0D48 negate them (A)
COMMENT $0D49 negate them (B)
COMMENT $0D4A add y position to old sprite offset y
COMMENT $0D4C add x position to old sprite offset x
COMMENT $0D4E load new object definition
COMMENT $0D51 add new sprite offset y
COMMENT $0D53 add new sprite offset x
COMMENT $0D55 and store the corrected position
COMMENT $0D57 store new object definition to object list
COMMENT $0D5A load new animation counter start
COMMENT $0D5C and set it in object list
COMMENT $0D5E load new list object, increment U by 2
COMMENT $0D61 and do the next object  (or jump away)
COMMENT $0D65 load offset of vector list draw
COMMENT $0D67 4=JMP [], 2=LDD ,X++
COMMENT_LINE $0D6D in move action done
COMMENT $0D6D A= SCALE, B = Timer IRQ check
COMMENT_LINE $0D70 the following is the position checking loop
COMMENT_LINE $0D70 waiting till an interrupt occurs
COMMENT $0D70 test the bit
COMMENT $0D72 if not zero, than loop
COMMENT $0D74 scale for sprite
COMMENT $0D74 move to time 1 lo, this means scaling
COMMENT $0D7C (2)
COMMENT $0D7E (2) [4] Send Y to A/D
COMMENT $0D86 [6] Send X to A/D
COMMENT $0D8A [4] enable timer 1
COMMENT $0D8C [8] load Y coordinate to A, X coordinate to B
COMMENT $0D8E [4] Send Y to A/D
COMMENT $0D93 (4)
COMMENT $0D9A [6] Send X to A/D
COMMENT $0D9C this is only atrigger, but lda is faster than tst
COMMENT $0D9E [4] enable timer 1
COMMENT $0DA0 [8] load Y coordinate to A, X coordinate to B
COMMENT $0DA2 [4] Send Y to A/D
COMMENT_LINE $0DA4 dec VIA_port_b
COMMENT $0DA9 [6] Send X to A/D
COMMENT $0DAB this is only atrigger, but lda is faster than tst
COMMENT $0DAD [4] enable timer 1
COMMENT $0DAF [8] load Y coordinate to A, X coordinate to B
COMMENT $0DB1 [4] Send Y to A/D
COMMENT_LINE $0DB3 dec VIA_port_b
COMMENT $0DB8 [6] Send X to A/D
COMMENT $0DBA this is only atrigger, but lda is faster than tst
COMMENT $0DBC [4] enable timer 1
COMMENT $0DBE [8] load Y coordinate to A, X coordinate to B
COMMENT $0DC0 [4] Send Y to A/D
COMMENT_LINE $0DC2 dec VIA_port_b
COMMENT $0DC7 [6] Send X to A/D
COMMENT $0DC9 this is only atrigger, but lda is faster than tst
COMMENT $0DCB [4] enable timer 1
COMMENT $0DCD [8] load Y coordinate to A, X coordinate to B
COMMENT $0DCF [4] Send Y to A/D
COMMENT_LINE $0DD1 dec VIA_port_b
COMMENT $0DD6 [6] Send X to A/D
COMMENT $0DD8 this is only atrigger, but lda is faster than tst
COMMENT $0DDA [4] enable timer 1
COMMENT $0DDC [8] load Y coordinate to A, X coordinate to B
COMMENT $0DDE [4] Send Y to A/D
COMMENT_LINE $0DE0 dec VIA_port_b
COMMENT $0DE5 [6] Send X to A/D
COMMENT $0DE7 this is only atrigger, but lda is faster than tst
COMMENT $0DE9 [4] enable timer 1
COMMENT $0DEB [8] load Y coordinate to A, X coordinate to B
COMMENT $0DED [4] Send Y to A/D
COMMENT_LINE $0DEF dec VIA_port_b
COMMENT $0DF4 [6] Send X to A/D
COMMENT $0DF6 this is only atrigger, but lda is faster than tst
COMMENT $0DF8 [4] enable timer 1
COMMENT $0DFA [8] load Y coordinate to A, X coordinate to B
COMMENT $0DFC [4] Send Y to A/D
COMMENT_LINE $0DFE dec VIA_port_b
COMMENT $0E03 [6] Send X to A/D
COMMENT $0E05 this is only atrigger, but lda is faster than tst
COMMENT $0E07 [4] enable timer 1
COMMENT $0E09 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E0B [4] Send Y to A/D
COMMENT_LINE $0E0D dec VIA_port_b
COMMENT $0E12 [6] Send X to A/D
COMMENT $0E14 this is only atrigger, but lda is faster than tst
COMMENT $0E16 [4] enable timer 1
COMMENT $0E18 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E1A [4] Send Y to A/D
COMMENT_LINE $0E1C dec VIA_port_b
COMMENT $0E21 [6] Send X to A/D
COMMENT $0E23 this is only atrigger, but lda is faster than tst
COMMENT $0E25 [4] enable timer 1
COMMENT $0E27 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E29 [4] Send Y to A/D
COMMENT_LINE $0E2B dec VIA_port_b
COMMENT $0E30 [6] Send X to A/D
COMMENT $0E32 this is only atrigger, but lda is faster than tst
COMMENT $0E34 [4] enable timer 1
COMMENT $0E36 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E38 [4] Send Y to A/D
COMMENT_LINE $0E3A dec VIA_port_b
COMMENT $0E3F [6] Send X to A/D
COMMENT $0E41 this is only atrigger, but lda is faster than tst
COMMENT $0E43 [4] enable timer 1
COMMENT $0E45 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E47 [4] Send Y to A/D
COMMENT_LINE $0E49 dec VIA_port_b
COMMENT $0E4E [6] Send X to A/D
COMMENT $0E50 this is only atrigger, but lda is faster than tst
COMMENT $0E52 [4] enable timer 1
COMMENT $0E54 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E56 [4] Send Y to A/D
COMMENT_LINE $0E58 dec VIA_port_b
COMMENT $0E5D [6] Send X to A/D
COMMENT $0E5F this is only atrigger, but lda is faster than tst
COMMENT $0E61 [4] enable timer 1
COMMENT $0E63 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E65 [4] Send Y to A/D
COMMENT_LINE $0E67 dec VIA_port_b
COMMENT $0E6C [6] Send X to A/D
COMMENT $0E6E this is only atrigger, but lda is faster than tst
COMMENT $0E70 [4] enable timer 1
COMMENT $0E72 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E74 [4] Send Y to A/D
COMMENT_LINE $0E76 dec VIA_port_b
COMMENT $0E7B [6] Send X to A/D
COMMENT $0E7D this is only atrigger, but lda is faster than tst
COMMENT $0E7F [4] enable timer 1
COMMENT $0E81 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E83 [4] Send Y to A/D
COMMENT_LINE $0E85 dec VIA_port_b
COMMENT $0E8A [6] Send X to A/D
COMMENT $0E8C this is only atrigger, but lda is faster than tst
COMMENT $0E8E [4] enable timer 1
COMMENT $0E90 [8] load Y coordinate to A, X coordinate to B
COMMENT $0E92 [4] Send Y to A/D
COMMENT_LINE $0E94 dec VIA_port_b
COMMENT $0E99 [6] Send X to A/D
COMMENT $0E9B this is only atrigger, but lda is faster than tst
COMMENT $0E9D [4] enable timer 1
COMMENT $0E9F [8] load Y coordinate to A, X coordinate to B
COMMENT $0EA1 [4] Send Y to A/D
COMMENT_LINE $0EA3 dec VIA_port_b
COMMENT $0EA8 [6] Send X to A/D
COMMENT $0EAA this is only atrigger, but lda is faster than tst
COMMENT $0EAC [4] enable timer 1
COMMENT $0EAE [8] load Y coordinate to A, X coordinate to B
COMMENT $0EB0 [4] Send Y to A/D
COMMENT_LINE $0EB2 dec VIA_port_b
COMMENT $0EB7 [6] Send X to A/D
COMMENT $0EB9 this is only atrigger, but lda is faster than tst
COMMENT $0EBB [4] enable timer 1
COMMENT $0EBD [8] load Y coordinate to A, X coordinate to B
COMMENT $0EBF [4] Send Y to A/D
COMMENT_LINE $0EC1 dec VIA_port_b
COMMENT $0EC6 [6] Send X to A/D
COMMENT $0EC8 this is only atrigger, but lda is faster than tst
COMMENT $0ECA [4] enable timer 1
COMMENT $0ECC [8] load Y coordinate to A, X coordinate to B
COMMENT $0ECE [4] Send Y to A/D
COMMENT_LINE $0ED0 dec VIA_port_b
COMMENT $0ED5 [6] Send X to A/D
COMMENT $0ED7 this is only atrigger, but lda is faster than tst
COMMENT $0ED9 [4] enable timer 1
COMMENT $0EDB [8] load Y coordinate to A, X coordinate to B
COMMENT $0EDD [4] Send Y to A/D
COMMENT_LINE $0EDF dec VIA_port_b
COMMENT $0EE4 [6] Send X to A/D
COMMENT $0EE6 this is only atrigger
COMMENT $0EE8 [4] enable timer 1
COMMENT $0EF2 [4] turn the lights off
COMMENT $0EF4 and do the next
COMMENT_LINE $0EF7 here if no new animation is to be done
COMMENT $0EF7 load offset of vector list draw
COMMENT $0EF9 4=JMP [], 2=LDD ,X++
COMMENT $0EFF A= SCALE, B = Timer IRQ check
COMMENT_LINE $0F02 the following is the position checking loop
COMMENT_LINE $0F02 waiting till an interrupt occurs
COMMENT $0F02 test the bit
COMMENT $0F04 if not zero, than loop
COMMENT $0F06 scale for sprite
COMMENT $0F06 move to time 1 lo, this means scaling
COMMENT $0F0E (2)
COMMENT $0F10 (2) [4] Send Y to A/D
COMMENT $0F18 [6] Send X to A/D
COMMENT $0F1C [4] enable timer 1
COMMENT $0F1E [8] load Y coordinate to A, X coordinate to B
COMMENT $0F20 [4] Send Y to A/D
COMMENT $0F25 (4)
COMMENT $0F2C [6] Send X to A/D
COMMENT $0F2E this is only atrigger, but lda is faster than tst
COMMENT $0F30 [4] enable timer 1
COMMENT $0F32 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F34 [4] Send Y to A/D
COMMENT_LINE $0F36 dec VIA_port_b
COMMENT $0F3B [6] Send X to A/D
COMMENT $0F3D this is only atrigger, but lda is faster than tst
COMMENT $0F3F [4] enable timer 1
COMMENT $0F41 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F43 [4] Send Y to A/D
COMMENT_LINE $0F45 dec VIA_port_b
COMMENT $0F4A [6] Send X to A/D
COMMENT $0F4C this is only atrigger, but lda is faster than tst
COMMENT $0F4E [4] enable timer 1
COMMENT $0F50 [8] load Y coordinate to A, X coordinate to B
COMMENT $0F52 [4] Send Y to A/D
COMMENT_LINE $0F54 dec VIA_port_b
COMMENT $0F59 [6] Send X to A/D
COMMENT $0F5B this is only atrigger, but lda is faster than tst
COMMENT $0F5D [4] enable timer 1
COMMENT $0F5F [8] load Y coordinate to A, X coordinate to B
COMMENT $0F61 [4] Send Y to A/D
COMMENT_LINE $0F63 dec VIA_port_b
COMMENT $0F68 [6] Send X to A/D
COMMENT $0F6A this is only atrigger, but lda is faster than tst
COMMENT $0F6C [4] enable timer 1
COMMENT $0F6E [8] load Y coordinate to A, X coordinate to B
COMMENT $0F70 [4] Send Y to A/D
COMMENT_LINE $0F72 dec VIA_port_b
COMMENT $0F77 [6] Send X to A/D
COMMENT $0F79 this is only atrigger, but lda is faster than tst
COMMENT $0F7B [4] enable timer 1
COMMENT $0F7D [8] load Y coordinate to A, X coordinate to B
COMMENT $0F7F [4] Send Y to A/D
COMMENT_LINE $0F81 dec VIA_port_b
COMMENT $0F86 [6] Send X to A/D
COMMENT $0F88 this is only atrigger, but lda is faster than tst
COMMENT $0F8A [4] enable timer 1
COMMENT $0F8C [8] load Y coordinate to A, X coordinate to B
COMMENT $0F8E [4] Send Y to A/D
COMMENT_LINE $0F90 dec VIA_port_b
COMMENT $0F95 [6] Send X to A/D
COMMENT $0F97 this is only atrigger, but lda is faster than tst
COMMENT $0F99 [4] enable timer 1
COMMENT $0F9B [8] load Y coordinate to A, X coordinate to B
COMMENT $0F9D [4] Send Y to A/D
COMMENT_LINE $0F9F dec VIA_port_b
COMMENT $0FA4 [6] Send X to A/D
COMMENT $0FA6 this is only atrigger, but lda is faster than tst
COMMENT $0FA8 [4] enable timer 1
COMMENT $0FAA [8] load Y coordinate to A, X coordinate to B
COMMENT $0FAC [4] Send Y to A/D
COMMENT_LINE $0FAE dec VIA_port_b
COMMENT $0FB3 [6] Send X to A/D
COMMENT $0FB5 this is only atrigger, but lda is faster than tst
COMMENT $0FB7 [4] enable timer 1
COMMENT $0FB9 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FBB [4] Send Y to A/D
COMMENT_LINE $0FBD dec VIA_port_b
COMMENT $0FC2 [6] Send X to A/D
COMMENT $0FC4 this is only atrigger, but lda is faster than tst
COMMENT $0FC6 [4] enable timer 1
COMMENT $0FC8 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FCA [4] Send Y to A/D
COMMENT_LINE $0FCC dec VIA_port_b
COMMENT $0FD1 [6] Send X to A/D
COMMENT $0FD3 this is only atrigger, but lda is faster than tst
COMMENT $0FD5 [4] enable timer 1
COMMENT $0FD7 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FD9 [4] Send Y to A/D
COMMENT_LINE $0FDB dec VIA_port_b
COMMENT $0FE0 [6] Send X to A/D
COMMENT $0FE2 this is only atrigger, but lda is faster than tst
COMMENT $0FE4 [4] enable timer 1
COMMENT $0FE6 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FE8 [4] Send Y to A/D
COMMENT_LINE $0FEA dec VIA_port_b
COMMENT $0FEF [6] Send X to A/D
COMMENT $0FF1 this is only atrigger, but lda is faster than tst
COMMENT $0FF3 [4] enable timer 1
COMMENT $0FF5 [8] load Y coordinate to A, X coordinate to B
COMMENT $0FF7 [4] Send Y to A/D
COMMENT_LINE $0FF9 dec VIA_port_b
COMMENT $0FFE [6] Send X to A/D
COMMENT $1000 this is only atrigger, but lda is faster than tst
COMMENT $1002 [4] enable timer 1
COMMENT $1004 [8] load Y coordinate to A, X coordinate to B
COMMENT $1006 [4] Send Y to A/D
COMMENT_LINE $1008 dec VIA_port_b
COMMENT $100D [6] Send X to A/D
COMMENT $100F this is only atrigger, but lda is faster than tst
COMMENT $1011 [4] enable timer 1
COMMENT $1013 [8] load Y coordinate to A, X coordinate to B
COMMENT $1015 [4] Send Y to A/D
COMMENT_LINE $1017 dec VIA_port_b
COMMENT $101C [6] Send X to A/D
COMMENT $101E this is only atrigger, but lda is faster than tst
COMMENT $1020 [4] enable timer 1
COMMENT $1022 [8] load Y coordinate to A, X coordinate to B
COMMENT $1024 [4] Send Y to A/D
COMMENT_LINE $1026 dec VIA_port_b
COMMENT $102B [6] Send X to A/D
COMMENT $102D this is only atrigger, but lda is faster than tst
COMMENT $102F [4] enable timer 1
COMMENT $1031 [8] load Y coordinate to A, X coordinate to B
COMMENT $1033 [4] Send Y to A/D
COMMENT_LINE $1035 dec VIA_port_b
COMMENT $103A [6] Send X to A/D
COMMENT $103C this is only atrigger, but lda is faster than tst
COMMENT $103E [4] enable timer 1
COMMENT $1040 [8] load Y coordinate to A, X coordinate to B
COMMENT $1042 [4] Send Y to A/D
COMMENT_LINE $1044 dec VIA_port_b
COMMENT $1049 [6] Send X to A/D
COMMENT $104B this is only atrigger, but lda is faster than tst
COMMENT $104D [4] enable timer 1
COMMENT $104F [8] load Y coordinate to A, X coordinate to B
COMMENT $1051 [4] Send Y to A/D
COMMENT_LINE $1053 dec VIA_port_b
COMMENT $1058 [6] Send X to A/D
COMMENT $105A this is only atrigger, but lda is faster than tst
COMMENT $105C [4] enable timer 1
COMMENT $105E [8] load Y coordinate to A, X coordinate to B
COMMENT $1060 [4] Send Y to A/D
COMMENT_LINE $1062 dec VIA_port_b
COMMENT $1067 [6] Send X to A/D
COMMENT $1069 this is only atrigger, but lda is faster than tst
COMMENT $106B [4] enable timer 1
COMMENT $106D [8] load Y coordinate to A, X coordinate to B
COMMENT $106F [4] Send Y to A/D
COMMENT_LINE $1071 dec VIA_port_b
COMMENT $1076 [6] Send X to A/D
COMMENT $1078 this is only atrigger
COMMENT $107A [4] enable timer 1
COMMENT $1084 [4] turn the lights off
COMMENT_LINE $1086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1086 now look if there is a girl on some log
COMMENT $1086 get the status
COMMENT $1089 if waiting
COMMENT $108B go to girl stuff
COMMENT $108D finnish last sprite draw
COMMENT_LINE $108F finnished drawing the whole level once!
COMMENT_LINE $1090 girl stuff below main function for short branches...
COMMENT_LINE $1090 now we set the new coordinates and jump into the object
COMMENT_LINE $1090 display loop again
COMMENT_LINE $1090 setup all registers for a jump into the object loop
COMMENT $1090 a different scale again... still very high :-(
COMMENT $1092 move to time 1 lo, this means scaling
COMMENT $1094 finnish last sprite draw
COMMENT $1096 go allways to zero, is sort of bad,
COMMENT $1098 /BLANK low and /ZERO low
COMMENT $109A do positioning, load pos here
COMMENT $109D Store Y in D/A register
COMMENT $109F Enable mux, this sets the Y integrator
COMMENT $10A1 Disable mux
COMMENT $10A3 Store X in D/A register this goes to the X integrator
COMMENT $10A5 Blank low, zero high?
COMMENT $10A7 Now zero is of... we can integrate!
COMMENT $10A9 enable timer, by accessing it!
COMMENT_LINE $10AB here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $10AB nothing is now done here!
COMMENT $10AB U to girl_anim_counter
COMMENT $10AE Y to girl object
COMMENT $10B2 + 1
COMMENT $10B4 do positioning, load pos here
COMMENT $10B7 add the speed, got from log information earlier
COMMENT $10BA and 're' store it
COMMENT_LINE $10BD now we do that animation checking
COMMENT $10BD load object vector list to X,
COMMENT $10BF decrease animation counter
COMMENT $10C1 if zero, we must initialize new animation phase
COMMENT $10C3 load old sprite offsets
COMMENT $10C5 negate them (A)
COMMENT $10C6 negate them (B)
COMMENT $10C7 add y position to old sprite offset y
COMMENT $10C9 add x position to old sprite offset x
COMMENT $10CB load new object definition
COMMENT $10CE add new sprite offset y
COMMENT $10D0 add new sprite offset x
COMMENT $10D2 and store the corrected position
COMMENT $10D4 store new object definition to object list
COMMENT $10D7 load new animation counter start
COMMENT $10D9 and set it in object list
COMMENT $10DB A= SCALE, B = Timer IRQ check
COMMENT_LINE $10DE the following is the position checking loop
COMMENT_LINE $10DE waiting till an interrupt occurs
COMMENT $10DE test the bit
COMMENT $10E0 if not zero, than loop
COMMENT $10E2 (SCALE_FACTOR_SPRITE)
COMMENT $10E2 move to time 1 lo, this means scaling
COMMENT $10E4 draw the sprite
COMMENT $10EA Send Y to A/D
COMMENT $10F0 Disable mux
COMMENT $10F2 Send X to A/D
COMMENT $10F4 Put pattern in shift register
COMMENT $10F6 enable timer 1
COMMENT $10F8 6
COMMENT $10FA 7
COMMENT $10FD 3 Go back for more points
COMMENT $10FF Send Y to A/D
COMMENT $1107 Disable mux
COMMENT $1109 Send X to A/D
COMMENT $110B Put pattern in shift register
COMMENT $110D enable timer 1
COMMENT $110F 6
COMMENT $1111 7
COMMENT $1114 3 Go back for more points
COMMENT_LINE $1116 NOP                     ; 2
COMMENT_LINE $1116 STA     <VIA_shift_reg
COMMENT $1116 this is about 3 cycles to early, :(
COMMENT $1118 and finnished drawing even the girl
COMMENT_LINE $1119 ***************************************************************************
COMMENT_LINE $1119 this routine initializes the game variables
COMMENT_LINE $1119 nothing is expected and nothing is returned
COMMENT_LINE $1119 leaves DP to C8
COMMENT $111C these set up the joystick
COMMENT $111E enquiries
COMMENT $1120 allowing only all directions for
COMMENT $1122 for joystick one
COMMENT $1124 this setting up saves a few hundred
COMMENT $1126 cycles
COMMENT $1128 don't miss it, if you don't need the
COMMENT_LINE $112A second joystick!
COMMENT $112A load weirdos address
COMMENT $112D and store it to music counter
COMMENT_LINE $112F copy music structure to ram
COMMENT $112F start of ram copy 4 address
COMMENT $1132 start of rom copy 4 address
COMMENT $1135 load byte from U to A and increment U
COMMENT $1137 store A byte to X and increment X
COMMENT $1139 was it last byte
COMMENT $113B no, than loop on...
COMMENT_LINE $113D ram for score and 'small stuff'
COMMENT $113D my 'ram' address (source)
COMMENT $1140 copy my 'ram' to vectrex ram (destination)
COMMENT $1143 number of bytes to be copied, must be less than $81
COMMENT $1145 and copy...
COMMENT $1148 address to clear
COMMENT $114B number of bytes - 1 to clear
COMMENT $114E clear sub routine in ROM
COMMENT $1151 address to clear
COMMENT $1154 number of bytes - 1 to clear
COMMENT $1157 clear sub routine in ROM
COMMENT $115A initial game level
COMMENT $115C upon startup
COMMENT $115E get level string
COMMENT $1161 clear level string
COMMENT $1164 no y change for timer line...
COMMENT_LINE $1166 entry point for continue with current level
COMMENT $1166 get the address of score string
COMMENT $1169 clear score
COMMENT $116C balls 5
COMMENT $116E and store five balls
COMMENT $1171 load the 5th digit
COMMENT $1174 and store it, for new life at change... (every 10000 points)
COMMENT_LINE $1176 entry point for each new frog
COMMENT $1178 frogger faces up
COMMENT $117B upon startup
COMMENT $117D adjust sizing information
COMMENT $117F store it
COMMENT $1181 first frog is looking up
COMMENT $1183 store that
COMMENT $1185 load the offset of the currently used pic
COMMENT $1188 and store it for later use
COMMENT $118A load init values
COMMENT $118D and evalute the new pos
COMMENT $1190 corresponding to the offset
COMMENT $1193 and store them...
COMMENT $1195 load init values
COMMENT $1198 and store them...
COMMENT $119A initialize timer
COMMENT $119C store it
COMMENT $119E allways clear, for double death check
COMMENT $11A0 be quiet
COMMENT $11A0 no music is playing ->0
COMMENT $11A2 shadow regs
COMMENT_LINE $11A5 in the next do sound call
COMMENT_LINE $11A5 all regs are cleared automatically
COMMENT_LINE $11A6 ***************************************************************************
COMMENT_LINE $11A6 this routine draws the initial screen
COMMENT_LINE $11A6 with information about the game
COMMENT_LINE $11A6 nothing is expected and nothing is returned
COMMENT_LINE $11A6 leaves dp pointing d0 expected
COMMENT $11A9 get button status once, since only
COMMENT_LINE $11AC differences are noticed
COMMENT $11AF load default text height & width
COMMENT $11B2 poke it to ram location
COMMENT_LINE $11B4 just for show a little scroll text...
COMMENT_LINE $11B4 scrolltext destroys a whole load of valuable
COMMENT_LINE $11B4 ram space...
COMMENT_LINE $11B4 had to use some ram twice...
COMMENT $11B4 y position of scroller
COMMENT $11B6 store it
COMMENT $11B8 left boundary
COMMENT $11BA store it
COMMENT $11BC right boundary
COMMENT $11BE store it
COMMENT $11C0 scroll speed (going from right to left)
COMMENT $11C2 store it
COMMENT $11C4 and intensity of scroll text
COMMENT $11C6 store it
COMMENT $11C8 address of the text
COMMENT $11CB set it all up...
COMMENT $11CE startup intensity
COMMENT $11D0 store it to current intensity
COMMENT $11D2 first start up displaying the text
COMMENT $11D4 store it in init screen mode
COMMENT $11D6 is music still playing?
COMMENT $11D9 than jump
COMMENT $11DB load new table addresses
COMMENT $11DE are we at the end?
COMMENT $11E2 no, than go on
COMMENT $11E4 load weirdos address
COMMENT $11E7 and store it to music counter
COMMENT_LINE $11EA in D now address of new weirdo
COMMENT $11EA transfer D to index register Y
COMMENT $11EC now set the next weirdo address
COMMENT $11EF and store it to music counter
COMMENT $11F2 load adddress of music structure
COMMENT $11F5 load
COMMENT $11F7 and store new ADSR table
COMMENT $11F9 load
COMMENT $11FB and store new twang table
COMMENT $11FD and play the tune again...
COMMENT_LINE $11FD the next instructions initialize a new sound
COMMENT_LINE $11FD load #1
COMMENT_LINE $11FD set this as marker for music start
COMMENT $11FD doesn'T destroy a register
COMMENT $1200 to do it that way
COMMENT $1203 load a music structure (piece_of_music)
COMMENT $1206 and store it to my own music active pointer
COMMENT_LINE $1209 next a do_my_sound and than do sound must be called
COMMENT $1209 well, the startup...
COMMENT $1209 (MAKRO) see above
COMMENT $1209 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $120D pretty for optimizing to use a makro :-)
COMMENT $120D get active music
COMMENT $120F and init new notes
COMMENT $1212 sets dp to d0, and pos at 0, 0
COMMENT $1215 just for assembler optimization...
COMMENT $1215 ROM function that does the sound playing
COMMENT $1218 this does the whole scroll text
COMMENT_LINE $121B thing...
COMMENT_LINE $121B beware... it destroys quite a
COMMENT_LINE $121B lot of variables
COMMENT $121B load the current intro intensity
COMMENT $121E set it
COMMENT $1221 load the current intro mode
COMMENT $1224 test for text more
COMMENT $1226 jump if not text mode
COMMENT $1228 decrement intensity
COMMENT $122B if not zero, than stay in same mode
COMMENT $122D otherwise switch to morph mode
COMMENT $122F set it
COMMENT $1232 load new intensity
COMMENT $1234 and store it
COMMENT $1237 set up morphing
COMMENT $123A in a routine
COMMENT $123D load text start to U
COMMENT_LINE $1240 Get A=Y, B=X (D=AB) coordinate
COMMENT $1240 Y, X coordinates
COMMENT $1243 Print the string
COMMENT_LINE $1246 string printing "vectrex frogger" takes about 5000 cycles :-(
COMMENT $1248 back to zero
COMMENT $124A /BLANK low and /ZERO low
COMMENT $124C scale for placing first point
COMMENT $124E move to time 1 lo, this means scaling
COMMENT $1250 does one morph step, changing of vectors
COMMENT $1253 load morph status
COMMENT $1256 if not complete, jump
COMMENT $1258 decrement intensity
COMMENT $125B if not zero, jump
COMMENT $125D otherwise init text mode
COMMENT $125F store it
COMMENT $1262 reload intensity
COMMENT $1264 store it
COMMENT $1267 y, x position of morph object
COMMENT $126A must be after do_one_morph_step
COMMENT_LINE $126D otherwise integraters 'leak'
COMMENT $126D and load the new vector list
COMMENT $1270 scale for placing first point
COMMENT $1272 move to time 1 lo, this means scaling
COMMENT $1274 get it on the screen
COMMENT $1277 get button status
COMMENT $127A is a button pressed?
COMMENT $127C no, than stay in init_screen_loop
COMMENT_LINE $1281 ***************************************************************************
COMMENT_LINE $1281 expects DP to $C8
COMMENT_LINE $1281 mainly this routine sets up the sprite information which are
COMMENT_LINE $1281 stored in the simple level structure
COMMENT_LINE $1281 sprites are arranged in a fixed length list
COMMENT_LINE $1281 a maximum of currently 30 sprites (should be enough) can be
COMMENT_LINE $1281 stored in that list
COMMENT_LINE $1281 though it depends on the size and position of these sprites if
COMMENT_LINE $1281 vectrex is capable of drawing them in a way which doesn't hurt the eyes
COMMENT_LINE $1281 the 'playfield' is divided into a 12*12 grid
COMMENT_LINE $1281 the lowest position cannot contain any sprites, since
COMMENT_LINE $1281 that's where frogger starts of
COMMENT_LINE $1281 the level (see levels.i for an example) is constructed of a field of
COMMENT_LINE $1281 bytes. If a byte differs from 0 a sprite is assumed
COMMENT_LINE $1281 in that position
COMMENT_LINE $1281 the position in screen coordinates is calculated from the byte position
COMMENT_LINE $1281 in the field.
COMMENT_LINE $1281 the byte itself is used as information what kind of sprite is to be
COMMENT_LINE $1281 used
COMMENT_LINE $1281 the position and the address where the sprite data is stored is
COMMENT_LINE $1281 copied to an object_list in vectrex ram
COMMENT_LINE $1281 this list will be repainted every round
COMMENT_LINE $1281 for easier collision detection a second list is used
COMMENT_LINE $1281 one for each band, a maximum of 7 sprites per band is currently supported
COMMENT_LINE $1281 that way I don't have to check every single sprite, only those
COMMENT_LINE $1281 in the band which interests me (still a few sprites to check)
COMMENT_LINE $1281 the length of the sprite is stored in it's data structure, only the
COMMENT_LINE $1281 length is relevant for collision detection,
COMMENT_LINE $1281 since it is assumed that frogger allways hops over a whole band
COMMENT_LINE $1281 sprites are allways assumed to start at 0 and than have a width of
COMMENT_LINE $1281 'length'
COMMENT_LINE $1281 if frogger 'touches' such a length it dies (or swims)
COMMENT_LINE $1281 actually I think this is a very nasty collision detection
COMMENT_LINE $1281 for the road, since the mearest scratch kills frogger,
COMMENT_LINE $1281 on the other hand, he can get hold of only a 'pixel' of log
COMMENT_LINE $1281 and still hold on to it :-)
COMMENT $1281 five homes exist
COMMENT $1283 store it
COMMENT_LINE $1285 this means 5 empty homes
COMMENT $1285 clear all homes
COMMENT $1288 first home
COMMENT $128C store the clear to home 1
COMMENT $128E store the clear to home 2
COMMENT $1290 store the clear to home 3
COMMENT $1292 store the clear to home 4
COMMENT $1294 store the clear to home 5
COMMENT $1297 this is a helper if we reinit the
COMMENT $1299 level or start a new one
COMMENT_LINE $129B this sets it to new level
COMMENT_LINE $129B entry point for level reinit
COMMENT_LINE $129B must allways be done after a morph, since a morph uses
COMMENT_LINE $129B the same ram as the level information
COMMENT_LINE $129B damn only 1 K (or less that is)
COMMENT $12A1 otherwise set tmp2
COMMENT $12A3 to 1, which means reinit
COMMENT $12A7 clear all homes
COMMENT_LINE $12AA clear static dive turtle list
COMMENT $12AA load start address
COMMENT $12AD load length of structure
COMMENT $12B0 clear object structure
COMMENT_LINE $12B3 first clear the current level
COMMENT_LINE $12B3 this clears the last level band list
COMMENT $12B3 load start address
COMMENT $12B6 savety copy to tmp_band_list
COMMENT $12B8 load length of structure
COMMENT $12BB clear band_list
COMMENT_LINE $12BE this clears the level object list
COMMENT $12BE load start address
COMMENT $12C1 load length of structure
COMMENT $12C4 clear object structure
COMMENT $12C7 load the address to U
COMMENT_LINE $12CA than we go to current level
COMMENT $12CA load length of level
COMMENT $12CC load level number
COMMENT $12CE multiply these two
COMMENT $12CF and add to start address of level data
COMMENT $12D2 and in X register for easier access (indexed)
COMMENT_LINE $12D4 now we will loop a while, first thru all bands (11)
COMMENT $12D4 11 bands (10+ middle)
COMMENT $12D6 initialize counter for loop1
COMMENT_LINE $12D8 and than the inner loop thru all band positions (12)
COMMENT $12D8 band list (x) offset for each new
COMMENT $12DA band = 0
COMMENT $12DC fixed GRID_WIDTH
COMMENT $12DE initialize counter for loop2
COMMENT $12E0 load level information (one byte each pass), increment X by 1
COMMENT $12E2 than move on
COMMENT_LINE $12E4 if we encounter something different than 0
COMMENT_LINE $12E4 we have a sprite which we will place in the
COMMENT_LINE $12E4 object structure,
COMMENT_LINE $12E4 this object structur will be updated all thru the
COMMENT_LINE $12E4 game...
COMMENT $12E4 clear A
COMMENT $12E5 since it starts at 1 not 0
COMMENT $12E6 multiply B by 2
COMMENT $12E7 add object table address
COMMENT $12EA move to index register Y
COMMENT $12EC and load the the sprite object structure to D
COMMENT_LINE $12EE first lets save this object list position to the current band_list
COMMENT_LINE $12EE pointer
COMMENT_LINE $12EE in the band_list are all object_list positions stored, sorted
COMMENT_LINE $12EE by each band
COMMENT_LINE $12EE band list provides storage for a maximum of 7 sprites per band
COMMENT_LINE $12EE this is NOT checked, make the levels good!!!
COMMENT $12EE save X,D  register
COMMENT $12F0 load current band list 'band' (y) position
COMMENT $12F2 add the current (x) position (how many objects on this band)
COMMENT $12F4 increment the offset
COMMENT $12F6 by two
COMMENT $12F8 store that in X index register
COMMENT $12FA save the current object_list position to band_list
COMMENT $12FC and restore the pointer to level information
COMMENT_LINE $12FE in D still the current object
COMMENT_LINE $12FE init dive turtle start
COMMENT_LINE $12FE a list with a max of 6, not checked!
COMMENT $12FE save D and X
COMMENT $1300 transfer D to index Y, get the object pointer to Y
COMMENT $1302 load special to A
COMMENT $1304 look if it is a DIVE_SPECIAL
COMMENT $1306 if not, go on
COMMENT $1308 counter for number of divers
COMMENT $130A position to store divers
COMMENT $130D store object_list position to t_list plus offset
COMMENT $130F and increment list pointer by 2
COMMENT $1311 and store it back
COMMENT $1313 restore D and X
COMMENT_LINE $1315 init dive turtle end
COMMENT_LINE $1315 now store the object definition address to the object_list
COMMENT_LINE $1315 and initialize all variables...
COMMENT $1315 and store it to object_list increment U by two
COMMENT $1317 transfer D to index Y
COMMENT $1319 load the offsets from Y pointer
COMMENT $131B y offset (these are offset in the sprite)
COMMENT $131D x offset  itself, an offset to the starting vector
COMMENT $131F now get the y pos
COMMENT $1321 make it signed
COMMENT $1323 in game pos relation
COMMENT $1325 should be a byte value
COMMENT $1326 add to offset
COMMENT $1328 and store it to object... increment U by one
COMMENT $132A now get the x pos
COMMENT $132C reverse the X coordinate
COMMENT $132D make it signed
COMMENT $132F in game pos relation
COMMENT $1331 should be a byte value
COMMENT $1332 add to offset
COMMENT $1334 and store it to object... increment U by one
COMMENT_LINE $1336 LEAY    [-4,U]            ; load object again to Y
COMMENT_LINE $1336 LDB     4,Y               ; load anim speed at offset 4
COMMENT $1336 randomize the animation startup
COMMENT_LINE $1339 so that not all sprites are animated
COMMENT_LINE $1339 in the same round...
COMMENT $1339 maximum of 15
COMMENT $133B at least one
COMMENT $133C store it to anim counter
COMMENT $133E dec loop2
COMMENT $1340 end check if finnished
COMMENT $1342 fixed band list len
COMMENT $1345 go one band list element further
COMMENT $1347 and store it
COMMENT $1349 dec loop1
COMMENT $134B end check if finnished
COMMENT $134D we don't won't to reinit
COMMENT $134F the next stuff
COMMENT $1353 fly
COMMENT $1355 if fly available , jump
COMMENT $1357 store to status, this means no fly on screen
COMMENT $1359 and go on
COMMENT $135B otherwise use A as timer information HI
COMMENT $135D clear LO
COMMENT $135F reload
COMMENT $1361 and set the used timer to it
COMMENT $1363 fly is waiting to be displayed
COMMENT $1365 store it
COMMENT $1367 crocodile
COMMENT $1369 if croco available , jump
COMMENT $136B store to status, this means no croco on screen
COMMENT $136D and go on
COMMENT $136F otherwise use A as timer information HI
COMMENT $1371 clear LO
COMMENT $1373 reload
COMMENT $1375 and set the used timer to it
COMMENT $1377 croco is waiting to be displayed
COMMENT $1379 store it
COMMENT $137B reset LO of otter timer allways
COMMENT $137D otter
COMMENT $137F store to status, this means no otter on screen if zero
COMMENT $1381 otherwise use A as timer information HI
COMMENT_LINE $1383 rest of otter is initialized below in the 'allways' section
COMMENT $1383 snake on log
COMMENT $1385 store to status, this means no snake on log
COMMENT $1387 if !=0 than it is the round_counter
COMMENT $1389 and go on
COMMENT_LINE $138B x, y pos will be set in sprite draw loop
COMMENT_LINE $138B speed will also be taken from host (log) object
COMMENT $138B load animation counter
COMMENT $138D and store it to object
COMMENT $138F align snake to first object in band 3
COMMENT $1393 remember the object list position of that object
COMMENT $1396 get the object address
COMMENT $1398 get the speed of the object
COMMENT $139A allways go from left to right on startup...
COMMENT $139B store it
COMMENT $139D add three to object list position for easier checking in
COMMENT_LINE $139F draw object routine
COMMENT $139F save the objectlist address...
COMMENT $13A2 female
COMMENT $13A4 store to status, this means no girl on screen
COMMENT $13A6 if !=0 than it is the round_counter
COMMENT $13A8 and go on
COMMENT_LINE $13AA x, y pos will be set in sprite draw loop
COMMENT_LINE $13AA speed will also be taken from host (log) object
COMMENT $13AA load animation counter
COMMENT $13AC and store it to object
COMMENT $13AE clear the girl zero vector
COMMENT $13B0 so that we jump out of the display loop
COMMENT $13B2 align girl to first object in band 4
COMMENT $13B6 remember the object list position of that object
COMMENT $13B9 get the object address
COMMENT $13BB get the speed of the object
COMMENT $13BD store it
COMMENT $13BF add three to object list position for easier checking in
COMMENT_LINE $13C1 draw object routine
COMMENT $13C1 save the objectlist address...
COMMENT $13C4 timer
COMMENT $13C6 store time for level information
COMMENT $13C8 and set low timer
COMMENT_LINE $13CA this now has the same length as the middway
COMMENT_LINE $13CA (if timer in level is set correctly that is)
COMMENT $13CA store it
COMMENT $13CC turtle timer
COMMENT $13CE load the diving counter
COMMENT $13D0 and set the timer for diving HI
COMMENT $13D2 clear LO
COMMENT_LINE $13D4 from here on again some 'allways init' stuff
COMMENT $13D4 if !=0 than it is the round_counter
COMMENT $13D6 if !=0 than it is the round_counter
COMMENT $13DA girl is waiting to be displayed
COMMENT $13DC store it
COMMENT $13DE if !=0 than it is the round_counter
COMMENT $13E0 if !=0 than it is the round_counter
COMMENT $13E4 snake is waiting to be displayed
COMMENT $13E6 store it
COMMENT $13E8 reload the otter timer
COMMENT $13EA and store it
COMMENT $13EE otter status now is 'is waiting'
COMMENT $13F0 store the status
COMMENT $13F2 no bonus collected for this frog
COMMENT $13F4 reset timer
COMMENT $13F6 store it
COMMENT $13F8 needed for band information calculation
COMMENT $13FA when frog 'rides' an object
COMMENT_LINE $13FD ***************************************************************************
COMMENT $13FD 'OS' high score
COMMENT $1400 own last score
COMMENT $1403 jsr to compare the score now, to 'OS' high score
COMMENT $1406 if 1, than the new score is new highscore
COMMENT $1408 if not new high score, than jump
COMMENT $140A otherwise set this as new high
COMMENT $140D 'OS' high score
COMMENT $1410 own last score
COMMENT $1413 if own was higher, set 'OS' == own
COMMENT $1416 not speed optimized, but space!
COMMENT_LINE $1419 do some extro
COMMENT $1419 clear A
COMMENT $141A and store in intensity
COMMENT $141C scale x
COMMENT $141E scale y
COMMENT $1420 pos y
COMMENT $1422 pos x of game over string
COMMENT_LINE $1424 the next instructions initialize a new sound
COMMENT_LINE $1424 load #1
COMMENT_LINE $1424 set this as marker for music start
COMMENT $1424 doesn'T destroy a register
COMMENT $1426 to do it that way
COMMENT $1428 load a music structure (piece_of_music)
COMMENT $142B and store it to my own music active pointer
COMMENT_LINE $142D next a do_my_sound and than do sound must be called
COMMENT $142D (MAKRO) see above
COMMENT $142D (MAKRO) the 'Init_Music_chk' expects this
COMMENT $1431 pretty for optimizing to use a makro :-)
COMMENT $1431 get active music
COMMENT $1433 and init new notes
COMMENT $1436 sets dp to d0, and pos at 0, 0
COMMENT $1439 just for assembler optimization...
COMMENT $1439 ROM function that does the sound playing
COMMENT_LINE $143C now print something on screen
COMMENT $143C prepare drawing of game over string
COMMENT $143F load scaling stuff
COMMENT $1442 poke it to ram location
COMMENT $1445 load intensity
COMMENT $1448 set intensity
COMMENT $144B load position
COMMENT $144E to D (A,B) register
COMMENT $1451 and the address of the string itself
COMMENT $1454 and draw it
COMMENT_LINE $1457 calculate new appearence
COMMENT $1457 increase intensity
COMMENT $145A three per step
COMMENT $145C store it
COMMENT $145F every second step increase
COMMENT $1461 y scale of string
COMMENT $1463 load it
COMMENT $1466 increase it
COMMENT $1468 save it
COMMENT $146B now look at the position of the
COMMENT $146E string, first y pos
COMMENT $1470 increase it by two, but not to much
COMMENT $1474 maximum at $70
COMMENT $1476 store it
COMMENT $1479 likewise treat x pos load it
COMMENT $147C decrease it
COMMENT $147E till -$70
COMMENT $1482 or use minimum of -$70
COMMENT $1484 store it
COMMENT $1487 now do the x scaling
COMMENT $148A every round add 3
COMMENT $148C and store it
COMMENT $148F do all this
COMMENT $1492 till intensity is full
COMMENT $1494 do the game loop
COMMENT $1496 get button status once, since only
COMMENT_LINE $1499 differences are noticed
COMMENT $1499 now correct x scaling
COMMENT $149C since it just rolled over, sub 3
COMMENT $149E and store it
COMMENT $14A1 load address of morph structure
COMMENT $14A4 and initialize a new morphing
COMMENT $14A7 do sound and integrator reset stuff
COMMENT $14A7 (MAKRO) see above
COMMENT $14A7 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $14AB pretty for optimizing to use a makro :-)
COMMENT $14AB get active music
COMMENT $14AD and init new notes
COMMENT $14B0 sets dp to d0, and pos at 0, 0
COMMENT $14B3 just for assembler optimization...
COMMENT $14B3 ROM function that does the sound playing
COMMENT $14B6 and do it
COMMENT $14B9 load score text size
COMMENT $14BC poke it to ram location
COMMENT $14BF Y=-$70, X=-$30
COMMENT $14C2 get address of string
COMMENT $14C5 and draw it
COMMENT $14C8 prepare drawing of game over string
COMMENT $14CB load scaling stuff
COMMENT $14CE poke it to ram location
COMMENT $14D1 load position
COMMENT $14D4 to D (A,B) register
COMMENT $14D7 and the address of the string itself
COMMENT $14DA and draw it
COMMENT $14DD and do it
COMMENT $14E0 back to zero
COMMENT $14E2 /BLANK low and /ZERO low
COMMENT $14E4 look of morphing is complete
COMMENT $14E7 don't morph anymore
COMMENT $14EB does one morph step, changing of vectors
COMMENT $14EE scale for placing first point
COMMENT $14F0 move to time 1 lo, this means scaling
COMMENT $14F2 y=0, X = '5'
COMMENT $14F5 and move there
COMMENT $14F8 load the morph vector list to X
COMMENT $14FB scale it correctly
COMMENT $14FB scale for placing first point
COMMENT $14FD move to time 1 lo, this means scaling
COMMENT $14FF and draw the vectorlist
COMMENT $1502 back to zero
COMMENT $1504 /BLANK low and /ZERO low
COMMENT $1506 load score text size
COMMENT $1509 poke it to ram location
COMMENT $150C load position, to D (A,B) register
COMMENT $150F get address of string
COMMENT $1512 and draw it
COMMENT_LINE $1515 morph_complete:
COMMENT $1515 get button status
COMMENT $1518 is a button pressed?
COMMENT $151A no, than stay in game_over_loop2
COMMENT_LINE $151C here continue...
COMMENT $1522 clear the frog variables
COMMENT_LINE $1528 BRA     new_game          ; start a new game
COMMENT_LINE $1528 ***************************************************************************
COMMENT_LINE $1528 subroutines for intermissions
COMMENT_LINE $1528 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1528 in March-April 1998
COMMENT_LINE $1528 all stuff contained here is public domain
COMMENT_LINE $1528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1528 this file contains subroutines declared as 'intermissions', like          ;
COMMENT_LINE $1528 game over, level done, new life...                                        ;
COMMENT_LINE $1528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1528 ***************************************************************************
COMMENT_LINE $1528 does ROUND_STARTUP
COMMENT_LINE $1528 sets score text size
COMMENT_LINE $1528 sets intensity to $60
COMMENT_LINE $1528 prints score, level frogs
COMMENT_LINE $1528 this routine takes about 10000 cycles...
COMMENT_LINE $1528 damn the stupid text output!!!
COMMENT $1528 load score text size
COMMENT $152B poke it to ram location
COMMENT $152E (MAKRO) see above
COMMENT $152E (MAKRO) the 'Init_Music_chk' expects this
COMMENT $1532 pretty for optimizing to use a makro :-)
COMMENT $1532 get active music
COMMENT $1534 and init new notes
COMMENT $1537 sets dp to d0, and pos at 0, 0
COMMENT $153A just for assembler optimization...
COMMENT $153A ROM function that does the sound playing
COMMENT $1540 load text start to U
COMMENT $1543 for the $80
COMMENT $1545 we store temporarily Spaces
COMMENT $1547 ...
COMMENT $154A load the position
COMMENT $154D and do a simple print_str_d
COMMENT $1550 load text start to U
COMMENT $1553 now we restore the $80
COMMENT $1555 otherwise the scoring
COMMENT $1557 will be busted
COMMENT $155A bye
COMMENT_LINE $155B ***************************************************************************
COMMENT_LINE $155B death intermission
COMMENT $155F be quiet
COMMENT $155F no music is playing ->0
COMMENT $1561 shadow regs
COMMENT_LINE $1564 in the next do sound call
COMMENT_LINE $1564 all regs are cleared automatically
COMMENT_LINE $1564 fix the current frog position for 'dead frog'
COMMENT $1564 load old pos to B
COMMENT $1566 korrekt the old offset y
COMMENT $1568 korrekt the old offset x
COMMENT $156A korrekt the new offset y
COMMENT $156D korrekt the new offset x
COMMENT $1570 store it back
COMMENT $1572 well, have a guess
COMMENT_LINE $1572 the next instructions initialize a new sound
COMMENT_LINE $1572 load #1
COMMENT_LINE $1572 set this as marker for music start
COMMENT $1572 doesn'T destroy a register
COMMENT $1574 to do it that way
COMMENT $1576 load a music structure (piece_of_music)
COMMENT $1579 and store it to my own music active pointer
COMMENT_LINE $157B next a do_my_sound and than do sound must be called
COMMENT $157B counter for in level death sequence
COMMENT $157D remember the counter
COMMENT $157F this is a new round...
COMMENT $157F (MAKRO) see above
COMMENT $157F (MAKRO) the 'Init_Music_chk' expects this
COMMENT $1583 pretty for optimizing to use a makro :-)
COMMENT $1583 get active music
COMMENT $1585 and init new notes
COMMENT $1588 sets dp to d0, and pos at 0, 0
COMMENT $158B just for assembler optimization...
COMMENT $158B ROM function that does the sound playing
COMMENT $1591 set the scale factor for positioning
COMMENT $1593 move to time 1 lo, this means scaling
COMMENT $1595 load current frog position to D
COMMENT $1598 go to that position
COMMENT $159B scale factor for frog
COMMENT $159B scale for placing first point
COMMENT $159D move to time 1 lo, this means scaling
COMMENT $159F load current frog sprite, dead here...
COMMENT $15A2 and draw it
COMMENT $15A5 mystery, for draw VL makro :-)
COMMENT $15A6 draw_objects, same as on timer countdown
COMMENT $15A9 get our round counter back...
COMMENT $15AB decrease it
COMMENT $15AC and loop until when not zero yet
COMMENT $15AE jumps allready jumped in this level
COMMENT $15B1 times 10
COMMENT $15B4 must be in A :-(
COMMENT $15B6 load level address
COMMENT $15B9 must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $15BC add to score(level)
COMMENT $15BF get button status once, since only
COMMENT_LINE $15C2 differences are noticed
COMMENT $15C2 load score text size
COMMENT $15C5 poke it to ram location
COMMENT $15C8 be quiet
COMMENT $15C8 no music is playing ->0
COMMENT $15CB shadow regs
COMMENT_LINE $15CE in the next do sound call
COMMENT_LINE $15CE all regs are cleared automatically
COMMENT_LINE $15CE the next instructions initialize a new sound
COMMENT_LINE $15CE load #1
COMMENT_LINE $15CE set this as marker for music start
COMMENT $15CE doesn'T destroy a register
COMMENT $15D1 to do it that way
COMMENT $15D4 load a music structure (piece_of_music)
COMMENT $15D7 and store it to my own music active pointer
COMMENT_LINE $15DA next a do_my_sound and than do sound must be called
COMMENT $15DA load address of morph structure
COMMENT $15DD and initialize a new morphing
COMMENT $15E0 this is a new round...
COMMENT $15E0 (MAKRO) see above
COMMENT $15E0 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $15E4 pretty for optimizing to use a makro :-)
COMMENT $15E4 get active music
COMMENT $15E6 and init new notes
COMMENT $15E9 sets dp to d0, and pos at 0, 0
COMMENT $15EC just for assembler optimization...
COMMENT $15EC ROM function that does the sound playing
COMMENT $15EF load text start to U
COMMENT $15F5 how did we die?
COMMENT $15F8 load text start to U
COMMENT_LINE $15FB Get A=Y, B=X (D=AB) coordinate
COMMENT $15FB load text start to U
COMMENT $1600 Print the string
COMMENT $1603 back to zero
COMMENT $1605 /BLANK low and /ZERO low
COMMENT $1607 look of morphing is complete
COMMENT $160A don't morph anymore
COMMENT $160C does one morph step, changing of vectors
COMMENT $160F /Blank low, /ZERO high
COMMENT $1611 needed, since print_str leaves ZERO low!
COMMENT $1613 load the morph vector list to X
COMMENT $1616 scale it correctly
COMMENT $1616 scale for placing first point
COMMENT $1618 move to time 1 lo, this means scaling
COMMENT $161A and draw the vectorlist
COMMENT $161D get button status
COMMENT $1620 is a button pressed?
COMMENT $1622 no, than stay in init_screen_loop
COMMENT $1627 last JSR can allways be a jump
COMMENT_LINE $1631 ***************************************************************************
COMMENT_LINE $1631 frog reached home intermission
COMMENT $1631 must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $1637 be quiet
COMMENT $1637 no music is playing ->0
COMMENT $1639 shadow regs
COMMENT_LINE $163C in the next do sound call
COMMENT_LINE $163C all regs are cleared automatically
COMMENT $163C load bonus state
COMMENT $163E is there a fly bonus
COMMENT $1640 if no jump
COMMENT $1642 otherwise load 200
COMMENT $1644 load score address
COMMENT $1647 add to score
COMMENT $164A load bonus state
COMMENT $164C is there a girl bonus
COMMENT $164E if no jump
COMMENT $1650 otherwise load 200
COMMENT $1652 load score address
COMMENT $1655 add to score
COMMENT $1658 load the timer value
COMMENT_LINE $165A here starts the timer count down loop
COMMENT $165A store the timer value
COMMENT $165D add 10 for each 2 timer ticks
COMMENT $165F load level address
COMMENT $1662 must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $1665 add to score(level)
COMMENT $1668 (MAKRO) see above
COMMENT $1668 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $166C pretty for optimizing to use a makro :-)
COMMENT $166C get active music
COMMENT $166E and init new notes
COMMENT $1671 sets dp to d0, and pos at 0, 0
COMMENT $1674 just for assembler optimization...
COMMENT $1674 ROM function that does the sound playing
COMMENT $167A mystery, for draw VL makro :-)
COMMENT $167B draw_objects
COMMENT $167E add some accoustic
COMMENT_LINE $167E the next instructions initialize a new sound
COMMENT_LINE $167E load #1
COMMENT_LINE $167E set this as marker for music start
COMMENT $167E doesn'T destroy a register
COMMENT $1681 to do it that way
COMMENT $1684 load a music structure (piece_of_music)
COMMENT $1687 and store it to my own music active pointer
COMMENT_LINE $168A next a do_my_sound and than do sound must be called
COMMENT $168A load the timer value
COMMENT $168D count it down by $20
COMMENT $168F if not minus... go on
COMMENT $1691 add jumps times 10 (forward)
COMMENT $1694 could be fixed,
COMMENT $1697 must be in A :-(
COMMENT $1699 load level address
COMMENT $169C must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $169F add to score(level)
COMMENT $16A2 get button status once, since only
COMMENT_LINE $16A5 differences are noticed
COMMENT $16A5 load score text size
COMMENT $16A8 poke it to ram location
COMMENT_LINE $16AB the next instructions initialize a new sound
COMMENT_LINE $16AB load #1
COMMENT_LINE $16AB set this as marker for music start
COMMENT $16AB doesn'T destroy a register
COMMENT $16AE to do it that way
COMMENT $16B1 load a music structure (piece_of_music)
COMMENT $16B4 and store it to my own music active pointer
COMMENT_LINE $16B7 next a do_my_sound and than do sound must be called
COMMENT $16B7 load address of morph structure
COMMENT $16BA and initialize a new morphing
COMMENT $16BD (MAKRO) see above
COMMENT $16BD (MAKRO) the 'Init_Music_chk' expects this
COMMENT $16C1 pretty for optimizing to use a makro :-)
COMMENT $16C1 get active music
COMMENT $16C3 and init new notes
COMMENT $16C6 sets dp to d0, and pos at 0, 0
COMMENT $16C9 just for assembler optimization...
COMMENT $16C9 ROM function that does the sound playing
COMMENT $16CC load text start to U
COMMENT_LINE $16CF Get A=Y, B=X (D=AB) coordinate
COMMENT $16D2 Print the string
COMMENT $16D5 was there a fly bonus?
COMMENT $16DA if not jump
COMMENT $16DC load text start to U
COMMENT_LINE $16DF Get A=Y, B=X (D=AB) coordinate
COMMENT $16E2 Print the string
COMMENT $16E5 was there a girl bonus?
COMMENT $16E8 if not jump
COMMENT $16EC load text start to U
COMMENT_LINE $16EF Get A=Y, B=X (D=AB) coordinate
COMMENT $16F2 Print the string
COMMENT $16F5 back to zero
COMMENT $16F7 /BLANK low and /ZERO low
COMMENT $16F9 look of morphing is complete
COMMENT $16FC don't morph anymore
COMMENT $16FE does one morph step, changing of vectors
COMMENT $1701 /Blank low, /ZERO high
COMMENT $1703 needed, since print_str leaves ZERO low!
COMMENT $1705 load the morph vector list to X
COMMENT $1708 scale it correctly
COMMENT $1708 scale for placing first point
COMMENT $170A move to time 1 lo, this means scaling
COMMENT $170C and draw the vectorlist
COMMENT $170F get button status
COMMENT $1712 is a button pressed?
COMMENT $1714 no, than stay in init_screen_loop
COMMENT $171D load the 5th digit
COMMENT $1720 changed from last check?
COMMENT $1723 if not go on
COMMENT $1725 otherwise stroe new value to check
COMMENT $1728 incraese frog lifes
COMMENT $172B and do an intermission
COMMENT_LINE $1731 ***************************************************************************
COMMENT $1731 must be zero for Add_Score_a (left to $ff in vector routine)
COMMENT $1733 be quiet
COMMENT $1733 no music is playing ->0
COMMENT $1735 shadow regs
COMMENT_LINE $1738 in the next do sound call
COMMENT_LINE $1738 all regs are cleared automatically
COMMENT $173A load level address
COMMENT $173D add to score(level)
COMMENT $1742 load level address
COMMENT $1745 add to score(level)
COMMENT $1748 load this level to A
COMMENT $174A remember it...
COMMENT_LINE $174C load 'LEVEL DONE' level number
COMMENT $174E and store it to game level
COMMENT $1750 set this level up
COMMENT $1753 and init it
COMMENT_LINE $1756 display till button pressed
COMMENT_LINE $1756 the next instructions initialize a new sound
COMMENT_LINE $1756 load #1
COMMENT_LINE $1756 set this as marker for music start
COMMENT $1756 doesn'T destroy a register
COMMENT $1758 to do it that way
COMMENT $175A load a music structure (piece_of_music)
COMMENT $175D and store it to my own music active pointer
COMMENT_LINE $175F next a do_my_sound and than do sound must be called
COMMENT $1762 load score text size
COMMENT $1765 poke it to ram location
COMMENT $176E Print the string
COMMENT $1771 draw this 'level'
COMMENT $1774 test the music flag
COMMENT $1777 if music done, get out of loop
COMMENT $1779 get button status
COMMENT $177C is a button pressed?
COMMENT $177E no, than stay in init_screen_loop
COMMENT $1780 restore old game level
COMMENT $1782 and set it
COMMENT $1785 load the 5th digit
COMMENT $1788 changed from last check?
COMMENT $178B if not go on
COMMENT $178D otherwise stroe new value to check
COMMENT $1790 incraese frog lifes
COMMENT $1793 and do an intermission
COMMENT_LINE $1797 ***************************************************************************
COMMENT_LINE $1797 and some 'small' intermissions...
COMMENT_LINE $1797 just text, nothing fancy
COMMENT_LINE $1797 the following functions could as well be only one with a
COMMENT_LINE $1797 index pointer to the text to be displayed...
COMMENT_LINE $1797 well, we got space enough, haven't we?
COMMENT $1797 be quiet
COMMENT $1797 no music is playing ->0
COMMENT $179A shadow regs
COMMENT_LINE $179D in the next do sound call
COMMENT_LINE $179D all regs are cleared automatically
COMMENT $179D get button status
COMMENT $17A0 load a timer, how long the following
COMMENT $17A2 text will be displayed
COMMENT $17A8 load score text size
COMMENT $17AB poke it to ram location
COMMENT $17AE string to be printed
COMMENT $17B4 Print the string
COMMENT $17B7 decreas timer,
COMMENT $17BA if zero, than we are done
COMMENT $17BC test the music flag
COMMENT $17BF if music done, get out of loop
COMMENT_LINE $17C1 the next instructions initialize a new sound
COMMENT_LINE $17C1 load #1
COMMENT_LINE $17C1 set this as marker for music start
COMMENT $17C1 doesn'T destroy a register
COMMENT $17C4 to do it that way
COMMENT $17C7 load a music structure (piece_of_music)
COMMENT $17CA and store it to my own music active pointer
COMMENT_LINE $17CD next a do_my_sound and than do sound must be called
COMMENT $17CD get button status
COMMENT $17D0 is a button pressed?
COMMENT $17D2 start another round
COMMENT_LINE $17D5 ***************************************************************************
COMMENT $17D5 be quiet
COMMENT $17D5 no music is playing ->0
COMMENT $17D8 shadow regs
COMMENT_LINE $17DB in the next do sound call
COMMENT_LINE $17DB all regs are cleared automatically
COMMENT $17DB get button status
COMMENT $17DE load a timer, how long the following
COMMENT $17E0 text will be displayed
COMMENT_LINE $17E3 the next instructions initialize a new sound
COMMENT_LINE $17E3 load #1
COMMENT_LINE $17E3 set this as marker for music start
COMMENT $17E3 doesn'T destroy a register
COMMENT $17E6 to do it that way
COMMENT $17E9 load a music structure (piece_of_music)
COMMENT $17EC and store it to my own music active pointer
COMMENT_LINE $17EF next a do_my_sound and than do sound must be called
COMMENT $17F2 load score text size
COMMENT $17F5 poke it to ram location
COMMENT $17F8 string to be printed
COMMENT $17FE Print the string
COMMENT $1801 decreas timer,
COMMENT $1804 if zero, than we are done
COMMENT $1806 get button status
COMMENT $1809 is a button pressed?
COMMENT $180B start another round
COMMENT_LINE $180E ***************************************************************************
COMMENT_LINE $180E yepeay... a new high score
COMMENT $180E be quiet
COMMENT $180E no music is playing ->0
COMMENT $1811 shadow regs
COMMENT_LINE $1814 in the next do sound call
COMMENT_LINE $1814 all regs are cleared automatically
COMMENT $1814 get button status
COMMENT $1817 load a timer, how long the following
COMMENT $1819 text will be displayed
COMMENT_LINE $181C the next instructions initialize a new sound
COMMENT_LINE $181C load #1
COMMENT_LINE $181C set this as marker for music start
COMMENT $181C doesn'T destroy a register
COMMENT $181F to do it that way
COMMENT $1822 load a music structure (piece_of_music)
COMMENT $1825 and store it to my own music active pointer
COMMENT_LINE $1828 next a do_my_sound and than do sound must be called
COMMENT $182B load score text size
COMMENT $182E poke it to ram location
COMMENT $1831 string to be printed
COMMENT $1837 Print the string
COMMENT $183A decreas timer,
COMMENT $183D if zero, than we are done
COMMENT $183F get button status
COMMENT $1842 is a button pressed?
COMMENT $1844 start another round
COMMENT_LINE $1847 ***************************************************************************
COMMENT_LINE $1847 ***************************************************************************
COMMENT_LINE $1847 subroutines for morphing
COMMENT_LINE $1847 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1847 in March-April 1998
COMMENT_LINE $1847 all stuff contained here is public domain
COMMENT_LINE $1847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1847 morphing subroutines                                                      ;
COMMENT_LINE $1847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1847 ***************************************************************************
COMMENT_LINE $1847 below are all subroutines for morphing
COMMENT_LINE $1847 (only two) set_up_morphing(), do_one_morph_step()
COMMENT_LINE $1847 ***************************************************************************
COMMENT_LINE $1847 this sets up a morph
COMMENT_LINE $1847 in U a pointer to a morph structure is expected,
COMMENT_LINE $1847 structure:
COMMENT_LINE $1847 DW               ; morph from vector list
COMMENT_LINE $1847 DW               ; morph to vector list
COMMENT_LINE $1847 DB               ; morph steps
COMMENT_LINE $1847 DB               ; delay between one morph step
COMMENT_LINE $1847 DW               ; optional (0 or structure)
COMMENT_LINE $1847 ; pointer to next morph structure
COMMENT_LINE $1847 DB               ; startup delay
COMMENT_LINE $1847 vector list must have (as usual with my routines) the following style
COMMENT_LINE $1847 count, rel y, rel x, rel y, rel x, ...
COMMENT_LINE $1847 maximal vectors for morphing is now 63 (127/2)
COMMENT_LINE $1847 if more are needed than something below cries for a 16 bit change...
COMMENT_LINE $1847 vector list don't need to have the same length anymore
COMMENT_LINE $1847 for optimal performance use a power of two step counter (-1)
COMMENT_LINE $1847 (8, 16, 32, 64 are supported with fast DIV routines)
COMMENT_LINE $1847 this routine sets up three vector lists (sort of) in RAM
COMMENT_LINE $1847 current_morph_vectorlist_org
COMMENT_LINE $1847 current_morph_vectorlist
COMMENT_LINE $1847 current_morph_vector_diffs
COMMENT_LINE $1847 current_morph_vectorlist_org
COMMENT_LINE $1847 is the original startlist, but possibly lengthened to the
COMMENT_LINE $1847 max vectorlist length of the two passed vectors (filled with 0,0 coordinates)
COMMENT_LINE $1847 current_morph_vectorlist
COMMENT_LINE $1847 is the storage area for the next to be drawn vectorlist
COMMENT_LINE $1847 is = to the original vector list (not max length)
COMMENT_LINE $1847 current_morph_vector_diffs
COMMENT_LINE $1847 not a real vector list, this contains the difference between the
COMMENT_LINE $1847 points of the two passed vector lists
COMMENT_LINE $1847 used in 'do_one_morph_step' to calculate the next vector
COMMENT_LINE $1847 further some variables are set, like delay, div routine, and morph_structure...
COMMENT $184A remember current morph structure
COMMENT_LINE $184C first clear all current stuff, since we
COMMENT_LINE $184C don't know how long all vectors will be
COMMENT_LINE $184C could be optimized to a later fill
COMMENT_LINE $184C with only the fills we need,
COMMENT_LINE $184C but at this point vectrex should be fast enough
COMMENT_LINE $184C so it doesn't matter to waste a bit time here...
COMMENT_LINE $184C since current_morph_vectorlist_org, current_morph_vectorlist and current_morph_vector_diffs
COMMENT_LINE $184C are neighbours one Clear_x_d should be enough...
COMMENT $184C address to clear
COMMENT $184F number of bytes - 1 to clear
COMMENT $1852 clear sub routine in ROM
COMMENT $1855 X = pointer to 'from'
COMMENT $1857 Y = pointer to 'to'
COMMENT $185A load number of vectors
COMMENT $185C compare number of vectors
COMMENT $185E which vector list is longer ?
COMMENT $1860 load number of vectors 'to', the second...
COMMENT_LINE $1862 in A is the higher vector count
COMMENT $1862 set high value in vector lists
COMMENT $1865 add 1
COMMENT $1866 multiply by two, since every vector has two coordinates
COMMENT $1867 remember in tmp2
COMMENT_LINE $1869 copy 'from' to original
COMMENT $1869 destination pointer
COMMENT $186C source pointer
COMMENT $186E load length and step over length byte
COMMENT $1870 increase 1, since one is missing
COMMENT $1871 times two, since there are two coordinates
COMMENT $1872 and copy it
COMMENT $1875 load current morph structure
COMMENT_LINE $1877 copy 'from' to current
COMMENT $1877 destination pointer
COMMENT $187A source pointer
COMMENT $187C load length
COMMENT $187E increase 1, since one is missing
COMMENT $187F times two, since there are two coordinates
COMMENT $1880 add 1 since counter is also copied
COMMENT $1881 and copy it
COMMENT $1884 load current morph structure
COMMENT_LINE $1886 copy 'to' to 'buffer' (buffer is now 'current_morph_vector_diffs')
COMMENT_LINE $1886 destination pointer
COMMENT $1886 no +1 here, since in diffs only the offsets are relevant anyway
COMMENT $1889 source pointer
COMMENT $188B load length and step over length byte
COMMENT $188D increase 1, since one is missing
COMMENT $188E times two, since there are two coordinates
COMMENT $188F and copy it
COMMENT $1892 load current morph structure
COMMENT $1894 load morph steps to A
COMMENT $1896 plus one
COMMENT $1897 and save it this is variable
COMMENT $1899 and again not variable
COMMENT $189B load morph delay A
COMMENT $189D and save it
COMMENT $189F and mark the whole thing as active
COMMENT $18A1 and store it
COMMENT_LINE $18A3 now we must calculate the current_morph_vector_diffs
COMMENT_LINE $18A3 we must determine the difference between the two sets of coordinates
COMMENT_LINE $18A3 use tmp2 as loop counter
COMMENT_LINE $18A3 number of vectors to process * 2
COMMENT $18A6 Y = pointer to 'to' (buffer)
COMMENT_LINE $18AA and Y = pointer to vector diffs
COMMENT $18AA load the second's vector coordinate
COMMENT $18AC neg it, since we actually want a 'a=a-b' style
COMMENT_LINE $18AD what we do is
COMMENT_LINE $18AD invert b and do a b=-b+a
COMMENT $18AD and add the source coordinate
COMMENT $18AF store is (back) to vector diffs
COMMENT $18B1 decrease vector counter by 1
COMMENT $18B3 and continue with next vector if not done
COMMENT $18B8 all done now, return
COMMENT_LINE $18B9 ***************************************************************************
COMMENT_LINE $18B9 uses tmp1 and tmp2
COMMENT_LINE $18B9 destroys everything
COMMENT_LINE $18B9 what it does:
COMMENT_LINE $18B9 current_morph_vectorlist is = to a (possibly) newly calculated vector
COMMENT_LINE $18B9 but hardcoded
COMMENT_LINE $18B9 16 steps,
COMMENT_LINE $18B9 not using JSR for DIV
COMMENT_LINE $18B9 saves 1000 cycles on intro screen!!!
COMMENT $18B9 load the status
COMMENT $18BC and look what there is to do
COMMENT $18BE morphing now?
COMMENT $18C0 or complete?
COMMENT $18C2 should a new morph be initialized?
COMMENT_LINE $18C4 here we come with MORPHING_DONE
COMMENT $18C4 load the current morph structure
COMMENT $18C7 look if there is a next structure
COMMENT $18C9 no? than go out
COMMENT $18CB yes? than initialize it
COMMENT $18CE go back
COMMENT $18CF load completeness flag to A
COMMENT $18D1 and store it
COMMENT $18D4 go back
COMMENT $18D5 decrease delay value
COMMENT $18D8 only morph when zero
COMMENT $18DA otherise go back
COMMENT $18DB in the current morph structure
COMMENT $18DE look for the next delay value
COMMENT $18E0 and set it
COMMENT $18E3 load counter of morph steps
COMMENT $18E6 are we done ?
COMMENT $18E8 no, than calculate offset to number of steps
COMMENT $18EB is it the beginning?
COMMENT_LINE $18ED no, than we go on
COMMENT $18ED pointer to original vectorlist
COMMENT_LINE $18F0 (RAM), but the (maybe) longer version
COMMENT $18F0 load length of vectorlist and increment X
COMMENT $18F2 only needed the first time we are in here...
COMMENT_LINE $18F5 A current number of vectors in (RAM) vectorlist
COMMENT $18F5 since it misses allways one, add one
COMMENT $18F6 multiply by two, since every vector has
COMMENT_LINE $18F7 start and end point
COMMENT $18F7 use tmp2 as loop counter see below
COMMENT $18FA U = pointer to vector diffs (RAM)
COMMENT $18FD target memory pointer (RAM)
COMMENT_LINE $1901 plus one, since we don't need the vector counter
COMMENT $1901 load number of steps to B
COMMENT $1904 invert the morph counter
COMMENT $1907 store..., so we don't have to calculate in the loop
COMMENT $190A clear signess... (that's positiv)
COMMENT $190D load the difference between the 'to' coordinates to A
COMMENT $190F check if negative sign
COMMENT $1911 mark as negative
COMMENT $1914 and make positiv
COMMENT $1915 initiated above..., this is the
COMMENT_LINE $1918 'morph step' of number of morph_steps we are makeing
COMMENT $1918 multiply, B should be smaller
COMMENT_LINE $1919 than A (B is cycle relevant)
COMMENT $1927 is it signed?
COMMENT $192A no, than go on
COMMENT $192C otherwise restore the 'minus'
COMMENT $192D and reset sign memory
COMMENT $1930 negate the div value
COMMENT_LINE $1931 this is again a formal a=a-b
COMMENT_LINE $1931 what we do is
COMMENT_LINE $1931 invert b and do a b=-b+a
COMMENT $1931 add the resulting difference to original coordinate
COMMENT $1933 and store it to the current vectorlist
COMMENT $1935 decrement the vectorlist loop counter by one
COMMENT $1938 and if not done,.. repeat
COMMENT_LINE $193A on first entry vectorlist is allready set
COMMENT $193A decrement morph step counter
COMMENT $193D and go back
COMMENT $193E load current morph structure
COMMENT_LINE $1941 copy 'to' to current_morph_vectorlist
COMMENT $1941 destination pointer
COMMENT $1944 source pointer
COMMENT $1946 load length
COMMENT $1948 increase 1, since one is missing
COMMENT $1949 times two, since there are two coordinates
COMMENT $194A increase 1, since now we also copy the counter
COMMENT $194B and copy it
COMMENT $194E no we are done with morphing...
COMMENT $1950 and store it
COMMENT $1953 go back...
COMMENT_LINE $1954 ***************************************************************************
COMMENT_LINE $1954 end of morph routine section
COMMENT_LINE $1954 ***************************************************************************
COMMENT_LINE $1954 ***************************************************************************
COMMENT_LINE $1954 subroutines for scrolling
COMMENT_LINE $1954 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1954 in March-April 1998
COMMENT_LINE $1954 all stuff contained here is public domain
COMMENT_LINE $1954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1954 scroll subroutines used in the startup screen                             ;
COMMENT_LINE $1954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1954 ***************************************************************************
COMMENT_LINE $1954 below are all subroutines for scroll text
COMMENT_LINE $1954 scrolling from right to left!
COMMENT_LINE $1954 (only two) set_up_scrolling(), do_one_scroll_step()
COMMENT_LINE $1954 scroll text ends with $80
COMMENT_LINE $1954 this restarts scrolling...
COMMENT_LINE $1954 ***************************************************************************
COMMENT_LINE $1954 expects text address in X register
COMMENT_LINE $1954 scroll_y:                  the y coordinate (signed byte value)
COMMENT_LINE $1954 scroll_left_boundary       (signed byte value)
COMMENT_LINE $1954 scroll_right_boundary      (signed byte value)
COMMENT_LINE $1954 scroll_speed               (signed byte value) must be negative
COMMENT_LINE $1954 scroll_intensity           (byte value)
COMMENT_LINE $1954 NUMBER_OF_SCROLL_LETTERS
COMMENT_LINE $1954 uses tmp1, tmp2
COMMENT $1954 remember address of first letter
COMMENT $1956 and store it as current address
COMMENT $1958 how many letters are at most to be displayed at once?
COMMENT $195B remember that value in tmp1 (16 bit)
COMMENT_LINE $195D CLR     tmp1               ; make it 16 bit
COMMENT $195D load right boundary
COMMENT $195F subtract left boundary
COMMENT $1961 SEX it, this is the 16 bit width 'in pixel'
COMMENT $1962 divide it by the number od letters to be displayed
COMMENT $1983 remember that as the scroll step...
COMMENT $1985 set loop counter for initializing the scroll objects
COMMENT $1987 remember that too in tmp1 (only 8 bit this time)
COMMENT $1989 get address of the first 'scroll object' (RAM address)
COMMENT $198C get the y position of the scroll text
COMMENT $198E and screen address where first letter will appear
COMMENT_LINE $1990 now we loop 'NUMBER_OF_SCROLL_LETTERS' times to set up our object space
COMMENT $1990 y coordinate, from above
COMMENT $1992 x coordinate, from above
COMMENT $1994 no object yet
COMMENT $1996 no object yet, these two are an address pointer,
COMMENT_LINE $1998 zero means a SPACE is printed...
COMMENT $1998 no x offset yet, here we will remember
COMMENT_LINE $199A the x offset later on, must remember this,
COMMENT_LINE $199A otherwise letters will overlap eventually...
COMMENT $199A go one letter to the left (x coordinate that is)
COMMENT $199C decrements our loop counter
COMMENT $199E if not finnished ... loop again
COMMENT $19A0 otherwise store a 'ff' as an and marker
COMMENT $19A2 y coordinate ff loop over
COMMENT $19A4 bye bye...
COMMENT_LINE $19A5 ***************************************************************************
COMMENT_LINE $19A5 does one scroll step of text initialized with the above function
COMMENT_LINE $19A5 does also all printing...
COMMENT_LINE $19A5 expects dp = to d0
COMMENT_LINE $19A5 sets intensity and trashs beam position (as well as everything else...)
COMMENT_LINE $19A5 destroys tmp1
COMMENT $19A5 load intensity
COMMENT $19AB get address of our scroll objects
COMMENT_LINE $19AE now loop thru all objects, till we find a $ff
COMMENT_LINE $19AE than we are done...
COMMENT $19AE first set our scaling (whatever we designed our
COMMENT $19B0 move to time 1 lo, this means scaling
COMMENT_LINE $19B2 object offsets for)
COMMENT $19B2 than go to zero (pitty :-()
COMMENT $19B4 /BLANK low and /ZERO low
COMMENT_LINE $19B6 but I guess we have to, otherwise
COMMENT_LINE $19B6 the position will garble up I think
COMMENT $19B6 load y, x coordinate
COMMENT_LINE $19B8 A,B=D, increment U by 1, U pointing to X
COMMENT_LINE $19B8 coordinate now
COMMENT $19B8 are we done yet?
COMMENT $19BA if so, jump out of the loop
COMMENT $19BE add to B (x coordinate that is)
COMMENT_LINE $19C1 the speed value
COMMENT $19C1 is on left side out of bounds?
COMMENT $19C4 if not go on...
COMMENT_LINE $19C6 otherwise ...
COMMENT_LINE $19C6 init new letter here
COMMENT $19C6 get address of current letter
COMMENT $19CA load the current letter to B
COMMENT $19CC compare to $80, end marker
COMMENT $19CE if not set, go on
COMMENT $19D0 otherwise load start address of text
COMMENT $19D4 store it as current
COMMENT $19D8 and load the first letter of the text to B
COMMENT_LINE $19DA here we certainly have a correct 'letter'- value in B register
COMMENT $19DA really correct? isn't it a SPACE
COMMENT $19DC no? than go on...
COMMENT $19DE otherwise zero everything, pointer to vector list
COMMENT $19E1 and offsets
COMMENT $19E4 go on
COMMENT $19E6 is it even a 'fullstop'
COMMENT $19E8 if not... go on
COMMENT $19EA if it is load vectorlist addres to X
COMMENT_LINE $19ED LDD     -2,X               ; and load the offsets to D
COMMENT_LINE $19ED BRA     load_x_with_letter_address_done ; and go on
COMMENT $19ED and go on
COMMENT $19EF is it even a 'turtle' :-)
COMMENT $19F1 if not... go on
COMMENT $19F3 if it is load vectorlist addres to X
COMMENT_LINE $19F6 LDD     -2,X               ; and load the offsets to D
COMMENT_LINE $19F6 BRA     load_x_with_letter_address_done ; and go on
COMMENT $19F6 and go on
COMMENT_LINE $19F8 no it should be a 'real' letter (CAPITAL!!!)
COMMENT_LINE $19F8 lets calculate the abc-table offset...
COMMENT $19F8 subtract smallest letter, so A has 0 offset
COMMENT $19FA multiply by two, since addresses are 16 bit
COMMENT $19FB SEX it :-)
COMMENT $19FC and add the abc (table of vector list address of the alphabet's letters)
COMMENT $19FF get that into an index register (X)
COMMENT $1A01 load the letters address from the table
COMMENT $1A03 and load the vector list offsets to D
COMMENT_LINE $1A05 now we correct everything ...
COMMENT $1A05 save vectorlist address to objectlist
COMMENT $1A07 remember the offsets
COMMENT_LINE $1A0A now a small intermezzo...
COMMENT_LINE $1A0A just increment the letter pointer in our
COMMENT_LINE $1A0A text by one... so that the next letter will be correctly
COMMENT_LINE $1A0A handled
COMMENT $1A0A load current text address to D
COMMENT $1A0D increment one
COMMENT $1A10 and store it back
COMMENT_LINE $1A13 ok, now back to that offset stuff from above
COMMENT_LINE $1A13 swap old and new offsets...
COMMENT $1A13 load x offset of old letter to A (from object list)
COMMENT $1A15 load x offset of new letter to B (from remembering from above)
COMMENT $1A18 store the old offset to tmp1 + 1
COMMENT $1A1B and put the new offset into our object list
COMMENT $1A1D now add the right boundary address to B
COMMENT $1A20 and subtract the old offset from that, that
COMMENT_LINE $1A23 is our new start address (screen oriented)
COMMENT_LINE $1A23 (might even be further right than our
COMMENT_LINE $1A23 dedicated start address, but that can't be helped)
COMMENT $1A23 load y address
COMMENT $1A26 modify that with new y offset ONLY
COMMENT $1A29 and store that to our object list
COMMENT $1A2B store the new x position, and increment U
COMMENT $1A2D move to the required position
COMMENT_LINE $1A2D optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $1A2D NOT DONE:
COMMENT_LINE $1A2D what should be done:
COMMENT_LINE $1A2D s = $ff / max(abs(a),abs(b))
COMMENT_LINE $1A2D a = a * s
COMMENT_LINE $1A2D b = b * s
COMMENT_LINE $1A2D scaling = scaling / s
COMMENT_LINE $1A2D that would give the most efficient positioning
COMMENT_LINE $1A2D bother it takes more time to calculate the above,
COMMENT_LINE $1A2D than it saves
COMMENT_LINE $1A2D with every positioning via this routine now,
COMMENT_LINE $1A2D it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $1A2D to do one simple positioning!!!
COMMENT_LINE $1A2D that is probably about 300 cycles per positioning
COMMENT_LINE $1A2D this is done about 30-40 times per round
COMMENT_LINE $1A2D alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $1A2D and we haven't drawn a single line yet!!!
COMMENT $1A2D Store Y in D/A register
COMMENT $1A2F Blank low, zero high?
COMMENT $1A34 Enable mux
COMMENT $1A36 Clear shift regigster
COMMENT $1A38 Disable mux
COMMENT $1A3A Store X in D/A register
COMMENT $1A3C enable timer
COMMENT $1A44 load object vector list to X,
COMMENT $1A46 don't draw if vector is not available (== 0 means SPACE)
COMMENT $1A48 pitty we have to do this!
COMMENT $1A48 scale for placing first point
COMMENT $1A4A move to time 1 lo, this means scaling
COMMENT $1A4C (1MAKRO2) and draw the vector list
COMMENT_LINE $1A4E I think because it is a makro using makro...
COMMENT $1A53 Send Y to A/D
COMMENT $1A55 Enable mux
COMMENT_LINE $1A57 the followin two instructions might be optimized
COMMENT_LINE $1A57 but there is something about 18 cycles :-)
COMMENT $1A57 Point to next coordinate pair
COMMENT $1A59 Wait a moment
COMMENT $1A5A Disable mux
COMMENT $1A5C Send X to A/D
COMMENT $1A5E Shift reg=$FF (solid line), T1H=0
COMMENT $1A61 Put pattern in shift register
COMMENT $1A63 Set T1H (scale factor?)
COMMENT $1A65 B-reg = T1 interrupt bit
COMMENT $1A68 Wait for T1 to time out
COMMENT $1A6C Wait a moment more
COMMENT $1A6D Clear shift register (blank output)
COMMENT $1A6F Decrement line count
COMMENT $1A73 Go back for more points
COMMENT $1A75 increment object list by one, since we are not
COMMENT_LINE $1A77 really interested in the x offset at that point
COMMENT_LINE $1A77 anymore...
COMMENT $1A77 and go on with our next listobject...
COMMENT $1A7A ok, that was our scroll step :-)
COMMENT_LINE $1A7B ***************************************************************************
COMMENT_LINE $1A7B used variables and constants...
COMMENT_LINE $1A7B SCROLL_SCALE_FACTOR             EQU    $6
COMMENT_LINE $1A7B NUMBER_OF_SCROLL_LETTERS        EQU    10
COMMENT_LINE $1A7B scroll_text_address_start       EQU    scroll_variables_start
COMMENT_LINE $1A7B scroll_text_address_current     EQU    scroll_text_address_start + 2
COMMENT_LINE $1A7B scroll_speed                    EQU    scroll_text_address_current + 2
COMMENT_LINE $1A7B scroll_y                        EQU    scroll_speed + 1
COMMENT_LINE $1A7B scroll_left_boundary            EQU    scroll_y + 1
COMMENT_LINE $1A7B scroll_right_boundary           EQU    scroll_left_boundary + 1
COMMENT_LINE $1A7B scroll_step_width               EQU    scroll_right_boundary + 1
COMMENT_LINE $1A7B scroll_intensity                EQU    scroll_step_width + 1
COMMENT_LINE $1A7B scroll_objects                  EQU    scroll_intensity + 1
COMMENT_LINE $1A7B scroll_objects_end              EQU    (scroll_objects+(5*NUMBER_OF_SCROLL_LETTERS)+1)
COMMENT_LINE $1A7B scroll_variables_end            EQU    scroll_objects_end
COMMENT_LINE $1A7B ***************************************************************************
COMMENT_LINE $1A7B ***************************************************************************
COMMENT_LINE $1CC6 ***************************************************************************
COMMENT_LINE $1CC6 include vector sprite definitions
COMMENT_LINE $1CC6 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1CC6 in March-April 1998
COMMENT_LINE $1CC6 all stuff contained here is public domain
COMMENT_LINE $1CC6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1CC6 this file contains 'sprite' definition data for all letters and a do, used;
COMMENT_LINE $1CC6 in scroll text                                                            ;
COMMENT_LINE $1CC6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $1CC6 y offset
COMMENT $1CC7 x offset
COMMENT_LINE $1CC8 sprite definition
COMMENT $1CF9 y offset
COMMENT $1CFA x offset
COMMENT_LINE $1CFB sprite definition
COMMENT $1D04 y offset
COMMENT $1D05 x offset
COMMENT_LINE $1D06 sprite definition
COMMENT $1D15 y offset
COMMENT $1D16 x offset
COMMENT_LINE $1D17 sprite definition
COMMENT $1D2A y offset
COMMENT $1D2B x offset
COMMENT_LINE $1D2C sprite definition
COMMENT $1D3D y offset
COMMENT $1D3E x offset
COMMENT_LINE $1D3F sprite definition
COMMENT $1D50 y offset
COMMENT $1D51 x offset
COMMENT_LINE $1D52 sprite definition
COMMENT $1D5F y offset
COMMENT $1D60 x offset
COMMENT_LINE $1D61 sprite definition
COMMENT $1D6C y offset
COMMENT $1D6D x offset
COMMENT_LINE $1D6E sprite definition
COMMENT $1D83 y offset
COMMENT $1D84 x offset
COMMENT_LINE $1D85 sprite definition
COMMENT $1D94 y offset
COMMENT $1D95 x offset
COMMENT_LINE $1D96 sprite definition
COMMENT $1DA3 y offset
COMMENT $1DA4 x offset
COMMENT_LINE $1DA5 sprite definition
COMMENT_LINE $1DB4 DB  6    ; y offset
COMMENT_LINE $1DB4 DB  1    ; x offset
COMMENT_LINE $1DB4 sprite definition
COMMENT_LINE $1DB4 DB 5
COMMENT_LINE $1DB4 DB -5*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1DB4 DB  5*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $1DB4 DB -5*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $1DB4 DB -5*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $1DB4 DB  5*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $1DB4 DB -5*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT $1DB4 y offset
COMMENT $1DB5 x offset
COMMENT_LINE $1DB6 sprite definition
COMMENT $1DBD y offset
COMMENT $1DBE x offset
COMMENT_LINE $1DBF sprite definition
COMMENT $1DCC y offset
COMMENT $1DCD x offset
COMMENT_LINE $1DCE sprite definition
COMMENT $1DDB y offset
COMMENT $1DDC x offset
COMMENT_LINE $1DDD sprite definition
COMMENT $1DF2 y offset
COMMENT $1DF3 x offset
COMMENT_LINE $1DF4 sprite definition
COMMENT_LINE $1E03 DB -3    ; y offset
COMMENT_LINE $1E03 DB  4    ; x offset
COMMENT_LINE $1E03 sprite definition
COMMENT_LINE $1E03 DB 10
COMMENT_LINE $1E03 DB -3*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  1*SPRITE_BLOW_UP,  1*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  0*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB -4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB -4*SPRITE_BLOW_UP,  0*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB -1*SPRITE_BLOW_UP,  1*SPRITE_BLOW_UP
COMMENT_LINE $1E03 DB  0*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT $1E03 y offset
COMMENT $1E04 x offset
COMMENT_LINE $1E05 sprite definition
COMMENT $1E18 y offset
COMMENT $1E19 x offset
COMMENT_LINE $1E1A sprite definition
COMMENT $1E31 y offset
COMMENT $1E32 x offset
COMMENT_LINE $1E33 sprite definition
COMMENT $1E3C y offset
COMMENT $1E3D x offset
COMMENT_LINE $1E3E sprite definition
COMMENT $1E4D y offset
COMMENT $1E4E x offset
COMMENT_LINE $1E4F sprite definition
COMMENT $1E58 y offset
COMMENT $1E59 x offset
COMMENT_LINE $1E5A sprite definition
COMMENT $1E67 y offset
COMMENT $1E68 x offset
COMMENT_LINE $1E69 sprite definition
COMMENT $1E76 y offset
COMMENT $1E77 x offset
COMMENT_LINE $1E78 sprite definition
COMMENT_LINE $1E81 DB  6    ; y offset
COMMENT_LINE $1E81 DB  1    ; x offset
COMMENT_LINE $1E81 sprite definition
COMMENT_LINE $1E81 DB 3
COMMENT_LINE $1E81 DB  0*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $1E81 DB -5*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $1E81 DB -5*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $1E81 DB  0*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $1EB5 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $1EB5 in March-April 1998
COMMENT_LINE $1EB5 all stuff contained here is public domain
COMMENT_LINE $1EB5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1EB5 this file contains all definitions for morphing objects used throughout   ;
COMMENT_LINE $1EB5 vectrex frogger                                                           ;
COMMENT_LINE $1EB5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2152 morph from
COMMENT $2154 morph to
COMMENT $2156 morph steps
COMMENT $2157 delay between one morph step
COMMENT $2158 optional (0 or structure)
COMMENT_LINE $215A pointer to next morph structure
COMMENT $215A startup delay
COMMENT $215B morph from
COMMENT $215D morph to
COMMENT $215F morph steps
COMMENT $2160 delay between one morph step
COMMENT $2161 optional (0 or structure)
COMMENT_LINE $2163 pointer to next morph structure
COMMENT $2163 startup delay
COMMENT $2164 morph from
COMMENT $2166 morph to
COMMENT $2168 morph steps
COMMENT $2169 delay between one morph step
COMMENT $216A morph_init4          ; optional (0 or structure)
COMMENT_LINE $216C pointer to next morph structure
COMMENT $216C startup delay
COMMENT_LINE $216D only one morphing at a time supported for now!!!
COMMENT $216D morph from
COMMENT $216F morph to
COMMENT $2171 morph steps
COMMENT $2172 delay between one morph step
COMMENT $2173 optional (0 or structure)
COMMENT_LINE $2175 pointer to next morph structure
COMMENT $2175 startup delay
COMMENT $2176 morph from
COMMENT $2178 morph to
COMMENT $217A morph steps
COMMENT $217B delay between one morph step
COMMENT $217C optional (0 or structure)
COMMENT_LINE $217E pointer to next morph structure
COMMENT $217E startup delay
COMMENT $217F morph from
COMMENT $2181 morph to
COMMENT $2183 morph steps
COMMENT $2184 delay between one morph step
COMMENT $2185 optional (0 or structure)
COMMENT_LINE $2187 pointer to next morph structure
COMMENT $2187 startup delay
COMMENT $2188 morph from
COMMENT $218A morph to
COMMENT $218C morph steps
COMMENT $218D delay between one morph step
COMMENT $218E optional (0 or structure)
COMMENT_LINE $2190 pointer to next morph structure
COMMENT $2190 startup delay
COMMENT $2191 morph from
COMMENT $2193 morph to
COMMENT $2195 morph steps
COMMENT $2196 delay between one morph step
COMMENT $2197 optional (0 or structure)
COMMENT_LINE $2199 pointer to next morph structure
COMMENT $2199 startup delay
COMMENT $219A morph from
COMMENT $219C morph to
COMMENT $219E morph steps
COMMENT $219F delay between one morph step
COMMENT $21A0 optional (0 or structure)
COMMENT_LINE $21A2 pointer to next morph structure
COMMENT $21A2 startup delay
COMMENT $21A3 morph from
COMMENT $21A5 morph to
COMMENT $21A7 morph steps
COMMENT $21A8 delay between one morph step
COMMENT $21A9 optional (0 or structure)
COMMENT_LINE $21AB pointer to next morph structure
COMMENT $21AB startup delay
COMMENT $21AC morph from
COMMENT $21AE morph to
COMMENT $21B0 morph steps
COMMENT $21B1 delay between one morph step
COMMENT $21B2 optional (0 or structure)
COMMENT_LINE $21B4 pointer to next morph structure
COMMENT $21B4 startup delay
COMMENT_LINE $21B5 ***************************************************************************
COMMENT_LINE $21B5 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $21B5 in March-April 1998
COMMENT_LINE $21B5 all stuff contained here is public domain
COMMENT_LINE $21B5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $21B5 this file contains the vector list for the home of frogger                ;
COMMENT_LINE $21B5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $21B5 21 vectors are drawn
COMMENT $21C0 _   _   _   _   _
COMMENT $21C2 __I I_I I_I I_I I_I I__
COMMENT_LINE $21E0 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $21E0 in March-April 1998
COMMENT_LINE $21E0 all stuff contained here is public domain
COMMENT_LINE $21E0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $21E0 this file contains 'sprite' definition data for all frogs (non morphing)  ;
COMMENT_LINE $21E0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $21E0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21E1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21E2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21E3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21E4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21E5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21E6 ?
COMMENT $21E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $21E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $21EA 16 vectors are drawn
COMMENT $21F1 -------
COMMENT $21F3 /        \
COMMENT $21F5 \       /
COMMENT $21F7 /       \
COMMENT $21F9 */            \
COMMENT $21FB \            /
COMMENT $21FD \    /-\   /
COMMENT $21FF \  /  \  /
COMMENT $2201 /_/    \_\
COMMENT $2240 number of lines to draw
COMMENT $2241 draw to y, x
COMMENT $2243 draw to y, x
COMMENT $2245 draw to y, x
COMMENT $2247 draw to y, x
COMMENT $2249 draw to y, x
COMMENT $224B draw to y, x
COMMENT $224D draw to y, x
COMMENT $224F draw to y, x
COMMENT $2251 draw to y, x
COMMENT $2253 draw to y, x
COMMENT $2255 draw to y, x
COMMENT $2257 draw to y, x
COMMENT $2259 draw to y, x
COMMENT $225B draw to y, x
COMMENT $225D draw to y, x
COMMENT $225F draw to y, x
COMMENT $2261 draw to y, x
COMMENT $2263 draw to y, x
COMMENT $2265 number of lines to draw
COMMENT $2266 draw to y, x
COMMENT $2268 draw to y, x
COMMENT $226A draw to y, x
COMMENT $226C draw to y, x
COMMENT $226E draw to y, x
COMMENT $2270 draw to y, x
COMMENT $2272 draw to y, x
COMMENT $2274 draw to y, x
COMMENT $2276 draw to y, x
COMMENT $2278 draw to y, x
COMMENT $227A draw to y, x
COMMENT $227C draw to y, x
COMMENT $227E draw to y, x
COMMENT $2280 draw to y, x
COMMENT $2282 draw to y, x
COMMENT $2284 draw to y, x
COMMENT $2286 draw to y, x
COMMENT $2288 draw to y, x
COMMENT $228A number of lines to draw
COMMENT $228B draw to y, x
COMMENT $228D draw to y, x
COMMENT $228F draw to y, x
COMMENT $2291 draw to y, x
COMMENT $2293 draw to y, x
COMMENT $2295 draw to y, x
COMMENT $2297 draw to y, x
COMMENT $2299 draw to y, x
COMMENT $229B draw to y, x
COMMENT $229D draw to y, x
COMMENT $229F draw to y, x
COMMENT $22A1 draw to y, x
COMMENT $22A3 draw to y, x
COMMENT $22A5 draw to y, x
COMMENT $22A7 draw to y, x
COMMENT $22A9 draw to y, x
COMMENT $22AB draw to y, x
COMMENT $22AD draw to y, x
COMMENT $22E4 number of lines to draw
COMMENT $22E5 draw to y, x
COMMENT $22E7 draw to y, x
COMMENT $22E9 draw to y, x
COMMENT $22EB draw to y, x
COMMENT $22ED draw to y, x
COMMENT $22EF draw to y, x
COMMENT $22F1 draw to y, x
COMMENT $22F3 draw to y, x
COMMENT $22F5 draw to y, x
COMMENT $22F7 draw to y, x
COMMENT $22F9 draw to y, x
COMMENT $22FB draw to y, x
COMMENT $22FD draw to y, x
COMMENT $22FF draw to y, x
COMMENT $2301 draw to y, x
COMMENT $2303 draw to y, x
COMMENT $2305 draw to y, x
COMMENT $2307 draw to y, x
COMMENT $2309 number of lines to draw
COMMENT $230A draw to y, x
COMMENT $230C draw to y, x
COMMENT $230E draw to y, x
COMMENT $2310 draw to y, x
COMMENT $2312 draw to y, x
COMMENT $2314 draw to y, x
COMMENT $2316 draw to y, x
COMMENT $2318 draw to y, x
COMMENT $231A draw to y, x
COMMENT $231C draw to y, x
COMMENT $231E draw to y, x
COMMENT $2320 draw to y, x
COMMENT $2322 draw to y, x
COMMENT $2324 draw to y, x
COMMENT $2326 draw to y, x
COMMENT $2328 draw to y, x
COMMENT $232A draw to y, x
COMMENT $232C draw to y, x
COMMENT $232E number of lines to draw
COMMENT $232F draw to y, x
COMMENT $2331 draw to y, x
COMMENT $2333 draw to y, x
COMMENT $2335 draw to y, x
COMMENT $2337 draw to y, x
COMMENT $2339 draw to y, x
COMMENT $233B draw to y, x
COMMENT $233D draw to y, x
COMMENT $233F draw to y, x
COMMENT $2341 draw to y, x
COMMENT $2343 draw to y, x
COMMENT $2345 draw to y, x
COMMENT $2347 draw to y, x
COMMENT $2349 draw to y, x
COMMENT $234B draw to y, x
COMMENT $234D draw to y, x
COMMENT $234F draw to y, x
COMMENT $2351 draw to y, x
COMMENT $2353 number of lines to draw
COMMENT $2354 draw to y, x
COMMENT $2356 draw to y, x
COMMENT $2358 draw to y, x
COMMENT $235A draw to y, x
COMMENT $235C draw to y, x
COMMENT $235E draw to y, x
COMMENT $2360 draw to y, x
COMMENT $2362 draw to y, x
COMMENT $2364 draw to y, x
COMMENT $2366 draw to y, x
COMMENT $2368 draw to y, x
COMMENT $236A draw to y, x
COMMENT $236C draw to y, x
COMMENT $236E draw to y, x
COMMENT $2370 draw to y, x
COMMENT $2372 draw to y, x
COMMENT $2374 draw to y, x
COMMENT $2376 draw to y, x
COMMENT $2389 speed + direction
COMMENT $238A graphic definition
COMMENT $238C length in SCALE_FACTOR_GAME
COMMENT $238D anim delay value
COMMENT $238E pointer to next anim object
COMMENT $2390 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2391 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2392 brightness
COMMENT $2393 special flag
COMMENT $23A5 speed + direction
COMMENT $23A6 graphic definition
COMMENT $23A8 length in SCALE_FACTOR_GAME
COMMENT $23A9 anim delay value
COMMENT $23AA pointer to next anim object
COMMENT $23AC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $23AD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $23AE brightness
COMMENT $23AF special flag
COMMENT $23C1 speed + direction
COMMENT $23C2 graphic definition
COMMENT $23C4 length in SCALE_FACTOR_GAME
COMMENT $23C5 anim delay value
COMMENT $23C6 pointer to next anim object
COMMENT $23C8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $23C9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $23CA brightness
COMMENT $23CB special flag
COMMENT $23CC speed + direction
COMMENT $23CD graphic definition
COMMENT $23CF length in SCALE_FACTOR_GAME
COMMENT $23D0 anim delay value
COMMENT $23D1 pointer to next anim object
COMMENT $23D3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $23D4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $23D5 brightness
COMMENT $23D6 special flag
COMMENT $23D7 speed + direction
COMMENT $23D8 graphic definition
COMMENT $23DA length in SCALE_FACTOR_GAME
COMMENT $23DB anim delay value
COMMENT $23DC pointer to next anim object
COMMENT $23DE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $23DF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $23E0 brightness
COMMENT $23E1 special flag
COMMENT $23E2 speed + direction
COMMENT $23E3 graphic definition
COMMENT $23E5 length in SCALE_FACTOR_GAME
COMMENT $23E6 anim delay value
COMMENT $23E7 pointer to next anim object
COMMENT $23E9 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $23EA offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $23EB brightness
COMMENT $23EC special flag
COMMENT_LINE $2426 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2426 in March-April 1998
COMMENT_LINE $2426 all stuff contained here is public domain
COMMENT_LINE $2426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2426 this file contains 'sprite' definition data for letters (level done)      ;
COMMENT_LINE $2426 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $242F speed + direction
COMMENT $2430 graphic definition
COMMENT $2432 length in SCALE_FACTOR_GAME
COMMENT $2433 anim delay value
COMMENT $2434 pointer to next anim object
COMMENT $2436 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2437 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $2438 DB $7f                  ; brightness
COMMENT_LINE $2438 DB 0                    ; special flag
COMMENT $2449 speed + direction
COMMENT $244A graphic definition
COMMENT $244C length in SCALE_FACTOR_GAME
COMMENT $244D anim delay value
COMMENT $244E pointer to next anim object
COMMENT $2450 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2451 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $2452 DB $7f                  ; brightness
COMMENT_LINE $2452 DB 0                    ; special flag
COMMENT $245D speed + direction
COMMENT $245E graphic definition
COMMENT $2460 length in SCALE_FACTOR_GAME
COMMENT $2461 anim delay value
COMMENT $2462 pointer to next anim object
COMMENT $2464 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2465 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $2466 DB $7f                  ; brightness
COMMENT_LINE $2466 DB 0                    ; special flag
COMMENT $247D speed + direction
COMMENT $247E graphic definition
COMMENT $2480 length in SCALE_FACTOR_GAME
COMMENT $2481 anim delay value
COMMENT $2482 pointer to next anim object
COMMENT $2484 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $2485 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $2486 DB $7f                  ; brightness
COMMENT_LINE $2486 DB 0                    ; special flag
COMMENT $24A1 speed + direction
COMMENT $24A2 graphic definition
COMMENT $24A4 length in SCALE_FACTOR_GAME
COMMENT $24A5 anim delay value
COMMENT $24A6 pointer to next anim object
COMMENT $24A8 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $24A9 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $24AA DB $7f                  ; brightness
COMMENT_LINE $24AA DB 0                    ; special flag
COMMENT $24B9 speed + direction
COMMENT $24BA graphic definition
COMMENT $24BC length in SCALE_FACTOR_GAME
COMMENT $24BD anim delay value
COMMENT $24BE pointer to next anim object
COMMENT $24C0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $24C1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $24C2 DB $7f                  ; brightness
COMMENT_LINE $24C2 DB 0                    ; special flag
COMMENT_LINE $24C2 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $24C2 in March-April 1998
COMMENT_LINE $24C2 all stuff contained here is public domain
COMMENT_LINE $24C2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C2 this file contains contains includes for all graphic defenitions          ;
COMMENT_LINE $24C2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C2 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $24C2 in March-April 1998
COMMENT_LINE $24C2 all stuff contained here is public domain
COMMENT_LINE $24C2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C2 this file contains 'sprite' definition data for the fly                   ;
COMMENT_LINE $24C2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24C2 fly1 is not moving
COMMENT $24D7 speed + direction
COMMENT $24D8 graphic definition
COMMENT $24DA length in SCALE_FACTOR_GAME
COMMENT $24DB anim delay value
COMMENT $24DC pointer to next anim object
COMMENT $24DE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $24DF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $24E0 brightness
COMMENT $24E1 special flag
COMMENT $24F7 speed + direction
COMMENT $24F8 graphic definition
COMMENT $24FA length in SCALE_FACTOR_GAME
COMMENT $24FB anim delay value
COMMENT $24FC pointer to next anim object
COMMENT $24FE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $24FF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2500 brightness
COMMENT $2501 special flag
COMMENT $2517 speed + direction
COMMENT $2518 graphic definition
COMMENT $251A length in SCALE_FACTOR_GAME
COMMENT $251B anim delay value
COMMENT $251C pointer to next anim object
COMMENT $251E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $251F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $2520 brightness
COMMENT $2521 special flag
COMMENT $2522 speed + direction
COMMENT $2523 graphic definition
COMMENT $2525 length in SCALE_FACTOR_GAME
COMMENT $2526 anim delay value
COMMENT $2527 pointer to next anim object
COMMENT $2529 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $252A offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $252B brightness
COMMENT $252C special flag
COMMENT_LINE $252D this file is part of vectrex frogger, written by Malban
COMMENT_LINE $252D in March-April 1998
COMMENT_LINE $252D all stuff contained here is public domain
COMMENT_LINE $252D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $252D this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $252D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $252D for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $252D car1 is moving left with a speed of -1
COMMENT_LINE $252D for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $252D car3 is moving right with a speed of 1
COMMENT_LINE $252D sprite definition
COMMENT $254A speed + direction
COMMENT $254B graphic definition
COMMENT $254D length in SCALE_FACTOR_GAME
COMMENT $254E anim delay value
COMMENT $254F pointer to next anim object
COMMENT $2551 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2552 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2553 brightness
COMMENT $2554 special flag
COMMENT_LINE $2555 sprite definition
COMMENT $2572 speed + direction
COMMENT $2573 graphic definition
COMMENT $2575 length in SCALE_FACTOR_GAME
COMMENT $2576 anim delay value
COMMENT $2577 pointer to next anim object
COMMENT $2579 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $257A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $257B brightness
COMMENT $257C special flag
COMMENT_LINE $257D sprite definition
COMMENT $2598 speed + direction
COMMENT $2599 graphic definition
COMMENT $259B length in SCALE_FACTOR_GAME
COMMENT $259C anim delay value
COMMENT $259D pointer to next anim object
COMMENT $259F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25A0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25A1 brightness
COMMENT $25A2 special flag
COMMENT $25A3 speed + direction
COMMENT $25A4 graphic definition
COMMENT $25A6 length in SCALE_FACTOR_GAME
COMMENT $25A7 anim delay value
COMMENT $25A8 pointer to next anim object
COMMENT $25AA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25AB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25AC brightness
COMMENT $25AD special flag
COMMENT_LINE $25AE sprite definition
COMMENT $25C9 speed + direction
COMMENT $25CA graphic definition
COMMENT $25CC length in SCALE_FACTOR_GAME
COMMENT $25CD anim delay value
COMMENT $25CE pointer to next anim object
COMMENT $25D0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25D1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25D2 brightness
COMMENT $25D3 special flag
COMMENT_LINE $25D4 sprite definition
COMMENT $25EF speed + direction
COMMENT $25F0 graphic definition
COMMENT $25F2 length in SCALE_FACTOR_GAME
COMMENT $25F3 anim delay value
COMMENT $25F4 pointer to next anim object
COMMENT $25F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $25F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $25F8 brightness
COMMENT $25F9 special flag
COMMENT_LINE $25FA sprite definition
COMMENT $2615 speed + direction
COMMENT $2616 graphic definition
COMMENT $2618 length in SCALE_FACTOR_GAME
COMMENT $2619 anim delay value
COMMENT $261A pointer to next anim object
COMMENT $261C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $261D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $261E brightness
COMMENT $261F special flag
COMMENT_LINE $2620 sprite definition
COMMENT $263B speed + direction
COMMENT $263C graphic definition
COMMENT $263E length in SCALE_FACTOR_GAME
COMMENT $263F anim delay value
COMMENT $2640 pointer to next anim object
COMMENT $2642 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2643 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2644 brightness
COMMENT $2645 special flag
COMMENT_LINE $2646 sprite definition
COMMENT $265F speed + direction
COMMENT $2660 graphic definition
COMMENT $2662 length in SCALE_FACTOR_GAME
COMMENT $2663 anim delay value
COMMENT $2664 pointer to next anim object
COMMENT $2666 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2667 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2668 brightness
COMMENT $2669 special flag
COMMENT_LINE $266A sprite definition
COMMENT $2683 speed + direction
COMMENT $2684 graphic definition
COMMENT $2686 length in SCALE_FACTOR_GAME
COMMENT $2687 anim delay value
COMMENT $2688 pointer to next anim object
COMMENT $268A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $268B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $268C brightness
COMMENT $268D special flag
COMMENT_LINE $268E sprite definition
COMMENT $26A7 speed + direction
COMMENT $26A8 graphic definition
COMMENT $26AA length in SCALE_FACTOR_GAME
COMMENT $26AB anim delay value
COMMENT $26AC pointer to next anim object
COMMENT $26AE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26AF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26B0 brightness
COMMENT $26B1 special flag
COMMENT $26B2 speed + direction
COMMENT $26B3 graphic definition
COMMENT $26B5 length in SCALE_FACTOR_GAME
COMMENT $26B6 anim delay value
COMMENT $26B7 pointer to next anim object
COMMENT $26B9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26BA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26BB brightness
COMMENT $26BC special flag
COMMENT $26BD speed + direction
COMMENT $26BE graphic definition
COMMENT $26C0 length in SCALE_FACTOR_GAME
COMMENT $26C1 anim delay value
COMMENT $26C2 pointer to next anim object
COMMENT $26C4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26C5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26C6 brightness
COMMENT $26C7 special flag
COMMENT $26C8 speed + direction
COMMENT $26C9 graphic definition
COMMENT $26CB length in SCALE_FACTOR_GAME
COMMENT $26CC anim delay value
COMMENT $26CD pointer to next anim object
COMMENT $26CF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26D0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26D1 brightness
COMMENT $26D2 special flag
COMMENT $26D3 speed + direction
COMMENT $26D4 graphic definition
COMMENT $26D6 length in SCALE_FACTOR_GAME
COMMENT $26D7 anim delay value
COMMENT $26D8 pointer to next anim object
COMMENT $26DA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26DB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26DC brightness
COMMENT $26DD special flag
COMMENT $26DE speed + direction
COMMENT $26DF graphic definition
COMMENT $26E1 length in SCALE_FACTOR_GAME
COMMENT $26E2 anim delay value
COMMENT $26E3 pointer to next anim object
COMMENT $26E5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $26E6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $26E7 brightness
COMMENT $26E8 special flag
COMMENT_LINE $26E9 sprite definition
COMMENT $2702 speed + direction
COMMENT $2703 graphic definition
COMMENT $2705 length in SCALE_FACTOR_GAME
COMMENT $2706 anim delay value
COMMENT $2707 pointer to next anim object
COMMENT $2709 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $270A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $270B brightness
COMMENT $270C special flag
COMMENT_LINE $270D sprite definition
COMMENT $2726 speed + direction
COMMENT $2727 graphic definition
COMMENT $2729 length in SCALE_FACTOR_GAME
COMMENT $272A anim delay value
COMMENT $272B pointer to next anim object
COMMENT $272D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $272E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $272F brightness
COMMENT $2730 special flag
COMMENT_LINE $2731 sprite definition
COMMENT $274A speed + direction
COMMENT $274B graphic definition
COMMENT $274D length in SCALE_FACTOR_GAME
COMMENT $274E anim delay value
COMMENT $274F pointer to next anim object
COMMENT $2751 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2752 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2753 brightness
COMMENT $2754 special flag
COMMENT $2755 speed + direction
COMMENT $2756 graphic definition
COMMENT $2758 length in SCALE_FACTOR_GAME
COMMENT $2759 anim delay value
COMMENT $275A pointer to next anim object
COMMENT $275C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $275D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $275E brightness
COMMENT $275F special flag
COMMENT $2760 speed + direction
COMMENT $2761 graphic definition
COMMENT $2763 length in SCALE_FACTOR_GAME
COMMENT $2764 anim delay value
COMMENT $2765 pointer to next anim object
COMMENT $2767 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2768 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2769 brightness
COMMENT $276A special flag
COMMENT $276B speed + direction
COMMENT $276C graphic definition
COMMENT $276E length in SCALE_FACTOR_GAME
COMMENT $276F anim delay value
COMMENT $2770 pointer to next anim object
COMMENT $2772 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2773 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2774 brightness
COMMENT $2775 special flag
COMMENT $2776 speed + direction
COMMENT $2777 graphic definition
COMMENT $2779 length in SCALE_FACTOR_GAME
COMMENT $277A anim delay value
COMMENT $277B pointer to next anim object
COMMENT $277D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $277E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $277F brightness
COMMENT $2780 special flag
COMMENT $2781 speed + direction
COMMENT $2782 graphic definition
COMMENT $2784 length in SCALE_FACTOR_GAME
COMMENT $2785 anim delay value
COMMENT $2786 pointer to next anim object
COMMENT $2788 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2789 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $278A brightness
COMMENT $278B special flag
COMMENT_LINE $278C this file is part of vectrex frogger, written by Malban
COMMENT_LINE $278C in March-April 1998
COMMENT_LINE $278C all stuff contained here is public domain
COMMENT_LINE $278C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $278C this file contains the 'sprite' definition for a truck                    ;
COMMENT_LINE $278C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $27B3 speed + direction
COMMENT $27B4 graphic definition
COMMENT $27B6 length in SCALE_FACTOR_GAME
COMMENT $27B7 anim delay value
COMMENT $27B8 pointer to next anim object
COMMENT $27BA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $27BB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $27BC brightness
COMMENT $27BD special flag
COMMENT $27E5 speed + direction
COMMENT $27E6 graphic definition
COMMENT $27E8 length in SCALE_FACTOR_GAME
COMMENT $27E9 anim delay value
COMMENT $27EA pointer to next anim object
COMMENT $27EC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $27ED offsets x in 'SCALE_FACTOR_GAME'
COMMENT $27EE brightness
COMMENT $27EF special flag
COMMENT $2817 speed + direction
COMMENT $2818 graphic definition
COMMENT $281A length in SCALE_FACTOR_GAME
COMMENT $281B anim delay value
COMMENT $281C pointer to next anim object
COMMENT $281E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $281F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2820 brightness
COMMENT $2821 special flag
COMMENT $2822 speed + direction
COMMENT $2823 graphic definition
COMMENT $2825 length in SCALE_FACTOR_GAME
COMMENT $2826 anim delay value
COMMENT $2827 pointer to next anim object
COMMENT $2829 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $282A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $282B brightness
COMMENT $282C special flag
COMMENT $282D speed + direction
COMMENT $282E graphic definition
COMMENT $2830 length in SCALE_FACTOR_GAME
COMMENT $2831 anim delay value
COMMENT $2832 pointer to next anim object
COMMENT $2834 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2835 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2836 brightness
COMMENT $2837 special flag
COMMENT $2838 speed + direction
COMMENT $2839 graphic definition
COMMENT $283B length in SCALE_FACTOR_GAME
COMMENT $283C anim delay value
COMMENT $283D pointer to next anim object
COMMENT $283F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2840 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2841 brightness
COMMENT $2842 special flag
COMMENT $2843 speed + direction
COMMENT $2844 graphic definition
COMMENT $2846 length in SCALE_FACTOR_GAME
COMMENT $2847 anim delay value
COMMENT $2848 pointer to next anim object
COMMENT $284A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $284B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $284C brightness
COMMENT $284D special flag
COMMENT $284E speed + direction
COMMENT $284F graphic definition
COMMENT $2851 length in SCALE_FACTOR_GAME
COMMENT $2852 anim delay value
COMMENT $2853 pointer to next anim object
COMMENT $2855 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2856 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2857 brightness
COMMENT $2858 special flag
COMMENT_LINE $2859 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2859 in March-April 1998
COMMENT_LINE $2859 all stuff contained here is public domain
COMMENT_LINE $2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2859 this file contains 'sprite' definition data for the bike                  ;
COMMENT_LINE $2859 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2859 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $2859 bike1 is moving to the left with a speed of -1
COMMENT_LINE $2859 sprite definition
COMMENT $288A speed + direction
COMMENT $288B graphic definition
COMMENT $288D length in SCALE_FACTOR_GAME
COMMENT $288E anim delay value
COMMENT $288F pointer to next anim object
COMMENT $2891 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2892 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2893 brightness
COMMENT $2894 special flag
COMMENT_LINE $2895 sprite definition
COMMENT $28C6 speed + direction
COMMENT $28C7 graphic definition
COMMENT $28C9 length in SCALE_FACTOR_GAME
COMMENT $28CA anim delay value
COMMENT $28CB pointer to next anim object
COMMENT $28CD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $28CE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $28CF brightness
COMMENT $28D0 special flag
COMMENT $2902 speed + direction
COMMENT $2903 graphic definition
COMMENT $2905 length in SCALE_FACTOR_GAME
COMMENT $2906 anim delay value
COMMENT $2907 pointer to next anim object
COMMENT $2909 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $290A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $290B brightness
COMMENT $290C special flag
COMMENT $293E speed + direction
COMMENT $293F graphic definition
COMMENT $2941 length in SCALE_FACTOR_GAME
COMMENT $2942 anim delay value
COMMENT $2943 pointer to next anim object
COMMENT $2945 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2946 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2947 brightness
COMMENT $2948 special flag
COMMENT_LINE $2949 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2949 in March-April 1998
COMMENT_LINE $2949 all stuff contained here is public domain
COMMENT_LINE $2949 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2949 this file contains 'sprite' definition data for a motorcycle              ;
COMMENT_LINE $2949 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2949 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $2949 moped1 is moving to the left with a speed of -1
COMMENT $295F /
COMMENT $2961 //
COMMENT $2963 // \     -------
COMMENT $2965 /  I \  /      /
COMMENT $2967 /    \/      /
COMMENT $2969 /    /\         \
COMMENT $296B */    /    \        \
COMMENT $296D \   /       \      /
COMMENT $296F \ /          \___/
COMMENT $2973 speed + direction
COMMENT $2974 graphic definition
COMMENT $2976 length in SCALE_FACTOR_GAME
COMMENT $2977 anim delay value
COMMENT $2978 pointer to next anim object
COMMENT $297A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $297B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $297C brightness
COMMENT $297D special flag
COMMENT $2994 /
COMMENT $2996 //
COMMENT $2998 // \     -------
COMMENT $299A /  I \  /      /
COMMENT $299C /    \/      /
COMMENT $299E /    /\         \
COMMENT $29A0 */    /    \        \
COMMENT $29A2 \   /       \      /
COMMENT $29A4 \ /          \___/
COMMENT $29A8 speed + direction
COMMENT $29A9 graphic definition
COMMENT $29AB length in SCALE_FACTOR_GAME
COMMENT $29AC anim delay value
COMMENT $29AD pointer to next anim object
COMMENT $29AF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29B0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29B1 brightness
COMMENT $29B2 special flag
COMMENT $29C9 /
COMMENT $29CB //
COMMENT $29CD // \     -------
COMMENT $29CF /  I \  /      /
COMMENT $29D1 /    \/      /
COMMENT $29D3 /    /\         \
COMMENT $29D5 */    /    \        \
COMMENT $29D7 \   /       \      /
COMMENT $29D9 \ /          \___/
COMMENT $29DD speed + direction
COMMENT $29DE graphic definition
COMMENT $29E0 length in SCALE_FACTOR_GAME
COMMENT $29E1 anim delay value
COMMENT $29E2 pointer to next anim object
COMMENT $29E4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29E5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29E6 brightness
COMMENT $29E7 special flag
COMMENT $29E8 speed + direction
COMMENT $29E9 graphic definition
COMMENT $29EB length in SCALE_FACTOR_GAME
COMMENT $29EC anim delay value
COMMENT $29ED pointer to next anim object
COMMENT $29EF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29F0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29F1 brightness
COMMENT $29F2 special flag
COMMENT $29F3 speed + direction
COMMENT $29F4 graphic definition
COMMENT $29F6 length in SCALE_FACTOR_GAME
COMMENT $29F7 anim delay value
COMMENT $29F8 pointer to next anim object
COMMENT $29FA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $29FB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $29FC brightness
COMMENT $29FD special flag
COMMENT $29FE speed + direction
COMMENT $29FF graphic definition
COMMENT $2A01 length in SCALE_FACTOR_GAME
COMMENT $2A02 anim delay value
COMMENT $2A03 pointer to next anim object
COMMENT $2A05 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A06 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A07 brightness
COMMENT $2A08 special flag
COMMENT $2A09 speed + direction
COMMENT $2A0A graphic definition
COMMENT $2A0C length in SCALE_FACTOR_GAME
COMMENT $2A0D anim delay value
COMMENT $2A0E pointer to next anim object
COMMENT $2A10 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A11 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A12 brightness
COMMENT $2A13 special flag
COMMENT $2A14 speed + direction
COMMENT $2A15 graphic definition
COMMENT $2A17 length in SCALE_FACTOR_GAME
COMMENT $2A18 anim delay value
COMMENT $2A19 pointer to next anim object
COMMENT $2A1B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A1C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A1D brightness
COMMENT $2A1E special flag
COMMENT $2A1F speed + direction
COMMENT $2A20 graphic definition
COMMENT $2A22 length in SCALE_FACTOR_GAME
COMMENT $2A23 anim delay value
COMMENT $2A24 pointer to next anim object
COMMENT $2A26 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A27 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A28 brightness
COMMENT $2A29 special flag
COMMENT $2A2A speed + direction
COMMENT $2A2B graphic definition
COMMENT $2A2D length in SCALE_FACTOR_GAME
COMMENT $2A2E anim delay value
COMMENT $2A2F pointer to next anim object
COMMENT $2A31 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A32 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A33 brightness
COMMENT $2A34 special flag
COMMENT $2A35 speed + direction
COMMENT $2A36 graphic definition
COMMENT $2A38 length in SCALE_FACTOR_GAME
COMMENT $2A39 anim delay value
COMMENT $2A3A pointer to next anim object
COMMENT $2A3C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A3D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A3E brightness
COMMENT $2A3F special flag
COMMENT $2A40 speed + direction
COMMENT $2A41 graphic definition
COMMENT $2A43 length in SCALE_FACTOR_GAME
COMMENT $2A44 anim delay value
COMMENT $2A45 pointer to next anim object
COMMENT $2A47 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A48 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A49 brightness
COMMENT $2A4A special flag
COMMENT_LINE $2A4B this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2A4B in March-April 1998
COMMENT_LINE $2A4B all stuff contained here is public domain
COMMENT_LINE $2A4B ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2A4B this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $2A4B ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2A4B for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $2A4B log1 is moving right with a speed of 1
COMMENT_LINE $2A4B log2 is moving left with a speed of -1
COMMENT $2A66 speed + direction
COMMENT $2A67 graphic definition
COMMENT $2A69 length in SCALE_FACTOR_GAME
COMMENT $2A6A anim delay value
COMMENT $2A6B pointer to next anim object
COMMENT $2A6D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A6E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A6F brightness
COMMENT $2A70 special flag
COMMENT $2A8C speed + direction
COMMENT $2A8D graphic definition
COMMENT $2A8F length in SCALE_FACTOR_GAME
COMMENT $2A90 anim delay value
COMMENT $2A91 pointer to next anim object
COMMENT $2A93 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2A94 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2A95 brightness
COMMENT $2A96 special flag
COMMENT $2AB2 speed + direction
COMMENT $2AB3 graphic definition
COMMENT $2AB5 length in SCALE_FACTOR_GAME
COMMENT $2AB6 anim delay value
COMMENT $2AB7 pointer to next anim object
COMMENT $2AB9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2ABA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2ABB brightness
COMMENT $2ABC special flag
COMMENT $2AD8 speed + direction
COMMENT $2AD9 graphic definition
COMMENT $2ADB length in SCALE_FACTOR_GAME
COMMENT $2ADC anim delay value
COMMENT $2ADD pointer to next anim object
COMMENT $2ADF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AE0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AE1 brightness
COMMENT $2AE2 special flag
COMMENT $2AE3 speed + direction
COMMENT $2AE4 graphic definition
COMMENT $2AE6 length in SCALE_FACTOR_GAME
COMMENT $2AE7 anim delay value
COMMENT $2AE8 pointer to next anim object
COMMENT $2AEA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AEB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AEC brightness
COMMENT $2AED special flag
COMMENT $2AEE speed + direction
COMMENT $2AEF graphic definition
COMMENT $2AF1 length in SCALE_FACTOR_GAME
COMMENT $2AF2 anim delay value
COMMENT $2AF3 pointer to next anim object
COMMENT $2AF5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2AF6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2AF7 brightness
COMMENT $2AF8 special flag
COMMENT $2AF9 speed + direction
COMMENT $2AFA graphic definition
COMMENT $2AFC length in SCALE_FACTOR_GAME
COMMENT $2AFD anim delay value
COMMENT $2AFE pointer to next anim object
COMMENT $2B00 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B01 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B02 brightness
COMMENT $2B03 special flag
COMMENT $2B04 speed + direction
COMMENT $2B05 graphic definition
COMMENT $2B07 length in SCALE_FACTOR_GAME
COMMENT $2B08 anim delay value
COMMENT $2B09 pointer to next anim object
COMMENT $2B0B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B0C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B0D brightness
COMMENT $2B0E special flag
COMMENT $2B0F speed + direction
COMMENT $2B10 graphic definition
COMMENT $2B12 length in SCALE_FACTOR_GAME
COMMENT $2B13 anim delay value
COMMENT $2B14 pointer to next anim object
COMMENT $2B16 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B17 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B18 brightness
COMMENT $2B19 special flag
COMMENT $2B1A speed + direction
COMMENT $2B1B graphic definition
COMMENT $2B1D length in SCALE_FACTOR_GAME
COMMENT $2B1E anim delay value
COMMENT $2B1F pointer to next anim object
COMMENT $2B21 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B22 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B23 brightness
COMMENT $2B24 special flag
COMMENT $2B25 speed + direction
COMMENT $2B26 graphic definition
COMMENT $2B28 length in SCALE_FACTOR_GAME
COMMENT $2B29 anim delay value
COMMENT $2B2A pointer to next anim object
COMMENT $2B2C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B2D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B2E brightness
COMMENT $2B2F special flag
COMMENT $2B30 speed + direction
COMMENT $2B31 graphic definition
COMMENT $2B33 length in SCALE_FACTOR_GAME
COMMENT $2B34 anim delay value
COMMENT $2B35 pointer to next anim object
COMMENT $2B37 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B38 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B39 brightness
COMMENT $2B3A special flag
COMMENT $2B54 speed + direction
COMMENT $2B55 graphic definition
COMMENT $2B57 length in SCALE_FACTOR_GAME
COMMENT $2B58 anim delay value
COMMENT $2B59 pointer to next anim object
COMMENT $2B5B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B5C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B5D brightness
COMMENT $2B5E special flag
COMMENT $2B77 speed + direction
COMMENT $2B78 graphic definition
COMMENT $2B7A length in SCALE_FACTOR_GAME
COMMENT $2B7B anim delay value
COMMENT $2B7C pointer to next anim object
COMMENT $2B7E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2B7F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2B80 brightness
COMMENT $2B81 special flag
COMMENT $2B9B speed + direction
COMMENT $2B9C graphic definition
COMMENT $2B9E length in SCALE_FACTOR_GAME
COMMENT $2B9F anim delay value
COMMENT $2BA0 pointer to next anim object
COMMENT $2BA2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BA3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BA4 brightness
COMMENT $2BA5 special flag
COMMENT $2BBF speed + direction
COMMENT $2BC0 graphic definition
COMMENT $2BC2 length in SCALE_FACTOR_GAME
COMMENT $2BC3 anim delay value
COMMENT $2BC4 pointer to next anim object
COMMENT $2BC6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BC7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BC8 brightness
COMMENT $2BC9 special flag
COMMENT $2BCA speed + direction
COMMENT $2BCB graphic definition
COMMENT $2BCD length in SCALE_FACTOR_GAME
COMMENT $2BCE anim delay value
COMMENT $2BCF pointer to next anim object
COMMENT $2BD1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BD2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BD3 brightness
COMMENT $2BD4 special flag
COMMENT $2BD5 speed + direction
COMMENT $2BD6 graphic definition
COMMENT $2BD8 length in SCALE_FACTOR_GAME
COMMENT $2BD9 anim delay value
COMMENT $2BDA pointer to next anim object
COMMENT $2BDC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2BDD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2BDE brightness
COMMENT $2BDF special flag
COMMENT $2BF9 speed + direction
COMMENT $2BFA graphic definition
COMMENT $2BFC length in SCALE_FACTOR_GAME
COMMENT $2BFD anim delay value
COMMENT $2BFE pointer to next anim object
COMMENT $2C00 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C01 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C02 brightness
COMMENT $2C03 special flag
COMMENT $2C1D speed + direction
COMMENT $2C1E graphic definition
COMMENT $2C20 length in SCALE_FACTOR_GAME
COMMENT $2C21 anim delay value
COMMENT $2C22 pointer to next anim object
COMMENT $2C24 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C25 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C26 brightness
COMMENT $2C27 special flag
COMMENT $2C41 speed + direction
COMMENT $2C42 graphic definition
COMMENT $2C44 length in SCALE_FACTOR_GAME
COMMENT $2C45 anim delay value
COMMENT $2C46 pointer to next anim object
COMMENT $2C48 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C49 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C4A brightness
COMMENT $2C4B special flag
COMMENT $2C65 speed + direction
COMMENT $2C66 graphic definition
COMMENT $2C68 length in SCALE_FACTOR_GAME
COMMENT $2C69 anim delay value
COMMENT $2C6A pointer to next anim object
COMMENT $2C6C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C6D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C6E brightness
COMMENT $2C6F special flag
COMMENT $2C70 speed + direction
COMMENT $2C71 graphic definition
COMMENT $2C73 length in SCALE_FACTOR_GAME
COMMENT $2C74 anim delay value
COMMENT $2C75 pointer to next anim object
COMMENT $2C77 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C78 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C79 brightness
COMMENT $2C7A special flag
COMMENT $2C7B speed + direction
COMMENT $2C7C graphic definition
COMMENT $2C7E length in SCALE_FACTOR_GAME
COMMENT $2C7F anim delay value
COMMENT $2C80 pointer to next anim object
COMMENT $2C82 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C83 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C84 brightness
COMMENT $2C85 special flag
COMMENT_LINE $2C86 log5a_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3a_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5b_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log5b_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3b_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5c_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log5c_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3c_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5d_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log5d_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3d_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5e_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log5e_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3c_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5f_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log5f_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log3b_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log5a_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6a_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4a_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6b_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6b_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4b_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6c_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6c_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4c_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6d_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6d_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4d_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6e_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6e_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4c_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6f_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT_LINE $2C86 log6f_object:
COMMENT_LINE $2C86 DB 1                    ; speed + direction
COMMENT_LINE $2C86 DW log4b_sprite         ; graphic definition
COMMENT_LINE $2C86 DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2C86 DB 3                    ; anim delay value
COMMENT_LINE $2C86 DW log6a_object         ; pointer to next anim object
COMMENT_LINE $2C86 DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2C86 DB $60                  ; brightness
COMMENT_LINE $2C86 DB 0                    ; special flag
COMMENT $2C86 speed + direction
COMMENT $2C87 graphic definition
COMMENT $2C89 length in SCALE_FACTOR_GAME
COMMENT $2C8A anim delay value
COMMENT $2C8B pointer to next anim object
COMMENT $2C8D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C8E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C8F brightness
COMMENT $2C90 special flag
COMMENT $2C91 speed + direction
COMMENT $2C92 graphic definition
COMMENT $2C94 length in SCALE_FACTOR_GAME
COMMENT $2C95 anim delay value
COMMENT $2C96 pointer to next anim object
COMMENT $2C98 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2C99 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2C9A brightness
COMMENT $2C9B special flag
COMMENT $2C9C speed + direction
COMMENT $2C9D graphic definition
COMMENT $2C9F length in SCALE_FACTOR_GAME
COMMENT $2CA0 anim delay value
COMMENT $2CA1 pointer to next anim object
COMMENT $2CA3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CA4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CA5 brightness
COMMENT $2CA6 special flag
COMMENT $2CA7 speed + direction
COMMENT $2CA8 graphic definition
COMMENT $2CAA length in SCALE_FACTOR_GAME
COMMENT $2CAB anim delay value
COMMENT $2CAC pointer to next anim object
COMMENT $2CAE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CAF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CB0 brightness
COMMENT $2CB1 special flag
COMMENT $2CB2 speed + direction
COMMENT $2CB3 graphic definition
COMMENT $2CB5 length in SCALE_FACTOR_GAME
COMMENT $2CB6 anim delay value
COMMENT $2CB7 pointer to next anim object
COMMENT $2CB9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CBA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CBB brightness
COMMENT $2CBC special flag
COMMENT $2CBD speed + direction
COMMENT $2CBE graphic definition
COMMENT $2CC0 length in SCALE_FACTOR_GAME
COMMENT $2CC1 anim delay value
COMMENT $2CC2 pointer to next anim object
COMMENT $2CC4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CC5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CC6 brightness
COMMENT $2CC7 special flag
COMMENT $2CC8 speed + direction
COMMENT $2CC9 graphic definition
COMMENT $2CCB length in SCALE_FACTOR_GAME
COMMENT $2CCC anim delay value
COMMENT $2CCD pointer to next anim object
COMMENT $2CCF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CD0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CD1 brightness
COMMENT $2CD2 special flag
COMMENT $2CD3 speed + direction
COMMENT $2CD4 graphic definition
COMMENT $2CD6 length in SCALE_FACTOR_GAME
COMMENT $2CD7 anim delay value
COMMENT $2CD8 pointer to next anim object
COMMENT $2CDA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CDB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CDC brightness
COMMENT $2CDD special flag
COMMENT $2CDE speed + direction
COMMENT $2CDF graphic definition
COMMENT $2CE1 length in SCALE_FACTOR_GAME
COMMENT $2CE2 anim delay value
COMMENT $2CE3 pointer to next anim object
COMMENT $2CE5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CE6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CE7 brightness
COMMENT $2CE8 special flag
COMMENT $2CE9 speed + direction
COMMENT $2CEA graphic definition
COMMENT $2CEC length in SCALE_FACTOR_GAME
COMMENT $2CED anim delay value
COMMENT $2CEE pointer to next anim object
COMMENT $2CF0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CF1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CF2 brightness
COMMENT $2CF3 special flag
COMMENT $2CF4 speed + direction
COMMENT $2CF5 graphic definition
COMMENT $2CF7 length in SCALE_FACTOR_GAME
COMMENT $2CF8 anim delay value
COMMENT $2CF9 pointer to next anim object
COMMENT $2CFB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2CFC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2CFD brightness
COMMENT $2CFE special flag
COMMENT $2CFF speed + direction
COMMENT $2D00 graphic definition
COMMENT $2D02 length in SCALE_FACTOR_GAME
COMMENT $2D03 anim delay value
COMMENT $2D04 pointer to next anim object
COMMENT $2D06 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D07 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D08 brightness
COMMENT $2D09 special flag
COMMENT $2D0A speed + direction
COMMENT $2D0B graphic definition
COMMENT $2D0D length in SCALE_FACTOR_GAME
COMMENT $2D0E anim delay value
COMMENT $2D0F pointer to next anim object
COMMENT $2D11 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D12 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D13 brightness
COMMENT $2D14 special flag
COMMENT $2D15 speed + direction
COMMENT $2D16 graphic definition
COMMENT $2D18 length in SCALE_FACTOR_GAME
COMMENT $2D19 anim delay value
COMMENT $2D1A pointer to next anim object
COMMENT $2D1C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D1D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D1E brightness
COMMENT $2D1F special flag
COMMENT $2D20 speed + direction
COMMENT $2D21 graphic definition
COMMENT $2D23 length in SCALE_FACTOR_GAME
COMMENT $2D24 anim delay value
COMMENT $2D25 pointer to next anim object
COMMENT $2D27 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D28 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D29 brightness
COMMENT $2D2A special flag
COMMENT $2D2B speed + direction
COMMENT $2D2C graphic definition
COMMENT $2D2E length in SCALE_FACTOR_GAME
COMMENT $2D2F anim delay value
COMMENT $2D30 pointer to next anim object
COMMENT $2D32 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D33 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D34 brightness
COMMENT $2D35 special flag
COMMENT $2D36 speed + direction
COMMENT $2D37 graphic definition
COMMENT $2D39 length in SCALE_FACTOR_GAME
COMMENT $2D3A anim delay value
COMMENT $2D3B pointer to next anim object
COMMENT $2D3D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D3E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D3F brightness
COMMENT $2D40 special flag
COMMENT $2D41 speed + direction
COMMENT $2D42 graphic definition
COMMENT $2D44 length in SCALE_FACTOR_GAME
COMMENT $2D45 anim delay value
COMMENT $2D46 pointer to next anim object
COMMENT $2D48 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D49 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D4A brightness
COMMENT $2D4B special flag
COMMENT $2D4C speed + direction
COMMENT $2D4D graphic definition
COMMENT $2D4F length in SCALE_FACTOR_GAME
COMMENT $2D50 anim delay value
COMMENT $2D51 pointer to next anim object
COMMENT $2D53 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D54 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D55 brightness
COMMENT $2D56 special flag
COMMENT $2D57 speed + direction
COMMENT $2D58 graphic definition
COMMENT $2D5A length in SCALE_FACTOR_GAME
COMMENT $2D5B anim delay value
COMMENT $2D5C pointer to next anim object
COMMENT $2D5E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D5F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D60 brightness
COMMENT $2D61 special flag
COMMENT $2D62 speed + direction
COMMENT $2D63 graphic definition
COMMENT $2D65 length in SCALE_FACTOR_GAME
COMMENT $2D66 anim delay value
COMMENT $2D67 pointer to next anim object
COMMENT $2D69 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D6A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D6B brightness
COMMENT $2D6C special flag
COMMENT $2D6D speed + direction
COMMENT $2D6E graphic definition
COMMENT $2D70 length in SCALE_FACTOR_GAME
COMMENT $2D71 anim delay value
COMMENT $2D72 pointer to next anim object
COMMENT $2D74 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D75 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D76 brightness
COMMENT $2D77 special flag
COMMENT $2D78 speed + direction
COMMENT $2D79 graphic definition
COMMENT $2D7B length in SCALE_FACTOR_GAME
COMMENT $2D7C anim delay value
COMMENT $2D7D pointer to next anim object
COMMENT $2D7F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D80 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D81 brightness
COMMENT $2D82 special flag
COMMENT $2D83 speed + direction
COMMENT $2D84 graphic definition
COMMENT $2D86 length in SCALE_FACTOR_GAME
COMMENT $2D87 anim delay value
COMMENT $2D88 pointer to next anim object
COMMENT $2D8A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2D8B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2D8C brightness
COMMENT $2D8D special flag
COMMENT_LINE $2D8E log11a_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3a_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11b_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log11b_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3b_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11c_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log11c_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3c_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11d_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log11d_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3d_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11e_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log11e_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3c_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11f_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log11f_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log3b_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log11a_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12a_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4a_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12b_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12b_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4b_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12c_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12c_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4c_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12d_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12d_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4d_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12e_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12e_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4c_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12f_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E log12f_object:
COMMENT_LINE $2D8E DB 2                    ; speed + direction
COMMENT_LINE $2D8E DW log4b_sprite         ; graphic definition
COMMENT_LINE $2D8E DB 32                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $2D8E DB 3                    ; anim delay value
COMMENT_LINE $2D8E DW log12a_object        ; pointer to next anim object
COMMENT_LINE $2D8E DB 2                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB 0                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2D8E DB $60                  ; brightness
COMMENT_LINE $2D8E DB 0                    ; special flag
COMMENT_LINE $2D8E this file is part of vectrex frogger, written by Malban
COMMENT_LINE $2D8E in March-April 1998
COMMENT_LINE $2D8E all stuff contained here is public domain
COMMENT_LINE $2D8E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2D8E this file contains all 'sprite' definitions for turtles used in           ;
COMMENT_LINE $2D8E vectrex frogger (excluding the '0')                                       ;
COMMENT_LINE $2D8E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2D8E for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $2D8E turtle1 is moving to the right with a speed of 1
COMMENT_LINE $2D8E turtle2 is moving to the left with a speed of -1
COMMENT_LINE $2D8E turtle3 is moving to the right with a speed of 2
COMMENT_LINE $2D8E turtle4 is moving to the left with a speed of -2
COMMENT $2DA7 speed + direction
COMMENT $2DA8 graphic definition
COMMENT $2DAA length in SCALE_FACTOR_GAME
COMMENT $2DAB anim delay value
COMMENT $2DAC pointer to next anim object
COMMENT $2DAE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DAF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2DB0 brightness
COMMENT $2DB1 special flag
COMMENT $2DCF speed + direction
COMMENT $2DD0 graphic definition
COMMENT $2DD2 length in SCALE_FACTOR_GAME
COMMENT $2DD3 anim delay value
COMMENT $2DD4 pointer to next anim object
COMMENT $2DD6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DD7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2DD8 brightness
COMMENT $2DD9 special flag
COMMENT $2DF7 speed + direction
COMMENT $2DF8 graphic definition
COMMENT $2DFA length in SCALE_FACTOR_GAME
COMMENT $2DFB anim delay value
COMMENT $2DFC pointer to next anim object
COMMENT $2DFE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2DFF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E00 brightness
COMMENT $2E01 special flag
COMMENT $2E1B speed + direction
COMMENT $2E1C graphic definition
COMMENT $2E1E length in SCALE_FACTOR_GAME
COMMENT $2E1F anim delay value
COMMENT $2E20 pointer to next anim object
COMMENT $2E22 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E23 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E24 brightness
COMMENT $2E25 special flag
COMMENT $2E43 speed + direction
COMMENT $2E44 graphic definition
COMMENT $2E46 length in SCALE_FACTOR_GAME
COMMENT $2E47 anim delay value
COMMENT $2E48 pointer to next anim object
COMMENT $2E4A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E4B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E4C brightness
COMMENT $2E4D special flag
COMMENT $2E6B speed + direction
COMMENT $2E6C graphic definition
COMMENT $2E6E length in SCALE_FACTOR_GAME
COMMENT $2E6F anim delay value
COMMENT $2E70 pointer to next anim object
COMMENT $2E72 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E73 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E74 brightness
COMMENT $2E75 special flag
COMMENT $2E76 speed + direction
COMMENT $2E77 graphic definition
COMMENT $2E79 length in SCALE_FACTOR_GAME
COMMENT $2E7A anim delay value
COMMENT $2E7B pointer to next anim object
COMMENT $2E7D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E7E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E7F brightness
COMMENT $2E80 special flag
COMMENT $2E81 speed + direction
COMMENT $2E82 graphic definition
COMMENT $2E84 length in SCALE_FACTOR_GAME
COMMENT $2E85 anim delay value
COMMENT $2E86 pointer to next anim object
COMMENT $2E88 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E89 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E8A brightness
COMMENT $2E8B special flag
COMMENT $2E8C speed + direction
COMMENT $2E8D graphic definition
COMMENT $2E8F length in SCALE_FACTOR_GAME
COMMENT $2E90 anim delay value
COMMENT $2E91 pointer to next anim object
COMMENT $2E93 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E94 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2E95 brightness
COMMENT $2E96 special flag
COMMENT $2E97 speed + direction
COMMENT $2E98 graphic definition
COMMENT $2E9A length in SCALE_FACTOR_GAME
COMMENT $2E9B anim delay value
COMMENT $2E9C pointer to next anim object
COMMENT $2E9E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2E9F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EA0 brightness
COMMENT $2EA1 special flag
COMMENT $2EA2 speed + direction
COMMENT $2EA3 graphic definition
COMMENT $2EA5 length in SCALE_FACTOR_GAME
COMMENT $2EA6 anim delay value
COMMENT $2EA7 pointer to next anim object
COMMENT $2EA9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EAA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EAB brightness
COMMENT $2EAC special flag
COMMENT $2EAD speed + direction
COMMENT $2EAE graphic definition
COMMENT $2EB0 length in SCALE_FACTOR_GAME
COMMENT $2EB1 anim delay value
COMMENT $2EB2 pointer to next anim object
COMMENT $2EB4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EB5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EB6 brightness
COMMENT $2EB7 special flag
COMMENT $2EB8 speed + direction
COMMENT $2EB9 graphic definition
COMMENT $2EBB length in SCALE_FACTOR_GAME
COMMENT $2EBC anim delay value
COMMENT $2EBD pointer to next anim object
COMMENT $2EBF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EC0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EC1 brightness
COMMENT $2EC2 special flag
COMMENT $2EC3 alternate object for diving
COMMENT $2EC5 speed + direction
COMMENT $2EC6 graphic definition
COMMENT $2EC8 length in SCALE_FACTOR_GAME
COMMENT $2EC9 anim delay value
COMMENT $2ECA pointer to next anim object
COMMENT $2ECC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2ECD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2ECE brightness
COMMENT $2ECF special flag
COMMENT $2ED0 alternate object for diving
COMMENT $2ED2 speed + direction
COMMENT $2ED3 graphic definition
COMMENT $2ED5 length in SCALE_FACTOR_GAME
COMMENT $2ED6 anim delay value
COMMENT $2ED7 pointer to next anim object
COMMENT $2ED9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EDA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EDB brightness
COMMENT $2EDC special flag
COMMENT $2EDD alternate object for diving
COMMENT $2EDF speed + direction
COMMENT $2EE0 graphic definition
COMMENT $2EE2 length in SCALE_FACTOR_GAME
COMMENT $2EE3 anim delay value
COMMENT $2EE4 pointer to next anim object
COMMENT $2EE6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EE7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EE8 brightness
COMMENT $2EE9 special flag
COMMENT $2EEA alternate object for diving
COMMENT $2EEC speed + direction
COMMENT $2EED graphic definition
COMMENT $2EEF length in SCALE_FACTOR_GAME
COMMENT $2EF0 anim delay value
COMMENT $2EF1 pointer to next anim object
COMMENT $2EF3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EF4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EF5 brightness
COMMENT $2EF6 special flag
COMMENT $2EF7 alternate object for diving
COMMENT $2EF9 speed + direction
COMMENT $2EFA graphic definition
COMMENT $2EFC length in SCALE_FACTOR_GAME
COMMENT $2EFD anim delay value
COMMENT $2EFE pointer to next anim object
COMMENT $2F00 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F01 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F02 brightness
COMMENT $2F03 special flag
COMMENT $2F04 alternate object for diving
COMMENT $2F06 speed + direction
COMMENT $2F07 graphic definition
COMMENT $2F09 length in SCALE_FACTOR_GAME
COMMENT $2F0A anim delay value
COMMENT $2F0B pointer to next anim object
COMMENT $2F0D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F0E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F0F brightness
COMMENT $2F10 special flag
COMMENT $2F11 alternate object for diving
COMMENT $2F13 speed + direction
COMMENT $2F14 graphic definition
COMMENT $2F16 length in SCALE_FACTOR_GAME
COMMENT $2F17 anim delay value
COMMENT $2F18 pointer to next anim object
COMMENT $2F1A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F1B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F1C brightness
COMMENT $2F1D special flag
COMMENT $2F1E alternate object for diving
COMMENT $2F20 speed + direction
COMMENT $2F21 graphic definition
COMMENT $2F23 length in SCALE_FACTOR_GAME
COMMENT $2F24 anim delay value
COMMENT $2F25 pointer to next anim object
COMMENT $2F27 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F28 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F29 brightness
COMMENT $2F2A special flag
COMMENT $2F2B alternate object for diving
COMMENT $2F2D speed + direction
COMMENT $2F2E graphic definition
COMMENT $2F30 length in SCALE_FACTOR_GAME
COMMENT $2F31 anim delay value
COMMENT $2F32 pointer to next anim object
COMMENT $2F34 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F35 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F36 brightness
COMMENT $2F37 special flag
COMMENT $2F38 alternate object for diving
COMMENT $2F3A speed + direction
COMMENT $2F3B graphic definition
COMMENT $2F3D length in SCALE_FACTOR_GAME
COMMENT $2F3E anim delay value
COMMENT $2F3F pointer to next anim object
COMMENT $2F41 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F42 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F43 brightness
COMMENT $2F44 special flag
COMMENT $2F45 alternate object for diving
COMMENT $2F47 speed + direction
COMMENT $2F48 graphic definition
COMMENT $2F4A length in SCALE_FACTOR_GAME
COMMENT $2F4B anim delay value
COMMENT $2F4C pointer to next anim object
COMMENT $2F4E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2F4F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2F50 brightness
COMMENT $2F51 special flag
COMMENT $2F52 alternate object for diving
COMMENT_LINE $2F54 sprite definition
COMMENT_LINE $2F69 sprite definition
COMMENT_LINE $2F7E sprite definition
COMMENT_LINE $2F8E sprite definition
COMMENT_LINE $2FAC sprite definition
COMMENT_LINE $2FC1 sprite definition
COMMENT $2FCC speed + direction
COMMENT $2FCD graphic definition
COMMENT $2FCF length in SCALE_FACTOR_GAME
COMMENT $2FD0 anim delay value
COMMENT $2FD1 pointer to next anim object
COMMENT $2FD3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FD4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FD5 brightness
COMMENT $2FD6 special flag
COMMENT $2FD7 alternate object for diving
COMMENT $2FD9 speed + direction
COMMENT $2FDA graphic definition
COMMENT $2FDC length in SCALE_FACTOR_GAME
COMMENT $2FDD anim delay value
COMMENT $2FDE pointer to next anim object
COMMENT $2FE0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FE1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FE2 brightness
COMMENT $2FE3 special flag
COMMENT $2FE4 alternate object for diving
COMMENT $2FE6 speed + direction
COMMENT $2FE7 graphic definition
COMMENT $2FE9 length in SCALE_FACTOR_GAME
COMMENT $2FEA anim delay value
COMMENT $2FEB pointer to next anim object
COMMENT $2FED offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FEE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FEF brightness
COMMENT $2FF0 special flag
COMMENT $2FF1 alternate object for diving
COMMENT $2FF3 speed + direction
COMMENT $2FF4 graphic definition
COMMENT $2FF6 length in SCALE_FACTOR_GAME
COMMENT $2FF7 anim delay value
COMMENT $2FF8 pointer to next anim object
COMMENT $2FFA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2FFB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2FFC brightness
COMMENT $2FFD special flag
COMMENT $2FFE alternate object for diving
COMMENT $3000 speed + direction
COMMENT $3001 graphic definition
COMMENT $3003 length in SCALE_FACTOR_GAME
COMMENT $3004 anim delay value
COMMENT $3005 pointer to next anim object
COMMENT $3007 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3008 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3009 brightness
COMMENT $300A special flag
COMMENT $300B alternate object for diving
COMMENT $300D speed + direction
COMMENT $300E graphic definition
COMMENT $3010 length in SCALE_FACTOR_GAME
COMMENT $3011 anim delay value
COMMENT $3012 pointer to next anim object
COMMENT $3014 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3015 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3016 brightness
COMMENT $3017 special flag
COMMENT $3018 alternate object for diving
COMMENT $301A speed + direction
COMMENT $301B graphic definition
COMMENT $301D length in SCALE_FACTOR_GAME
COMMENT $301E anim delay value
COMMENT $301F pointer to next anim object
COMMENT $3021 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3022 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3023 brightness
COMMENT $3024 special flag
COMMENT $3025 alternate object for diving
COMMENT $3027 speed + direction
COMMENT $3028 graphic definition
COMMENT $302A length in SCALE_FACTOR_GAME
COMMENT $302B anim delay value
COMMENT $302C pointer to next anim object
COMMENT $302E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $302F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3030 brightness
COMMENT $3031 special flag
COMMENT $3032 alternate object for diving
COMMENT $3034 speed + direction
COMMENT $3035 graphic definition
COMMENT $3037 length in SCALE_FACTOR_GAME
COMMENT $3038 anim delay value
COMMENT $3039 pointer to next anim object
COMMENT $303B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $303C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $303D brightness
COMMENT $303E special flag
COMMENT $303F alternate object for diving
COMMENT $3041 speed + direction
COMMENT $3042 graphic definition
COMMENT $3044 length in SCALE_FACTOR_GAME
COMMENT $3045 anim delay value
COMMENT $3046 pointer to next anim object
COMMENT $3048 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3049 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $304A brightness
COMMENT $304B special flag
COMMENT $304C alternate object for diving
COMMENT $304E speed + direction
COMMENT $304F graphic definition
COMMENT $3051 length in SCALE_FACTOR_GAME
COMMENT $3052 anim delay value
COMMENT $3053 pointer to next anim object
COMMENT $3055 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3056 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3057 brightness
COMMENT $3058 special flag
COMMENT $3059 alternate object for diving
COMMENT $305B speed + direction
COMMENT $305C graphic definition
COMMENT $305E length in SCALE_FACTOR_GAME
COMMENT $305F anim delay value
COMMENT $3060 pointer to next anim object
COMMENT $3062 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3063 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3064 brightness
COMMENT $3065 special flag
COMMENT $3066 alternate object for diving
COMMENT $3068 speed + direction
COMMENT $3069 graphic definition
COMMENT $306B length in SCALE_FACTOR_GAME
COMMENT $306C anim delay value
COMMENT $306D pointer to next anim object
COMMENT $306F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3070 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3071 brightness
COMMENT $3072 special flag
COMMENT $3073 alternate object for diving
COMMENT $3075 speed + direction
COMMENT $3076 graphic definition
COMMENT $3078 length in SCALE_FACTOR_GAME
COMMENT $3079 anim delay value
COMMENT $307A pointer to next anim object
COMMENT $307C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $307D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $307E brightness
COMMENT $307F special flag
COMMENT $3080 alternate object for diving
COMMENT $3082 speed + direction
COMMENT $3083 graphic definition
COMMENT $3085 length in SCALE_FACTOR_GAME
COMMENT $3086 anim delay value
COMMENT $3087 pointer to next anim object
COMMENT $3089 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $308A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $308B brightness
COMMENT $308C special flag
COMMENT $308D alternate object for diving
COMMENT $308F speed + direction
COMMENT $3090 graphic definition
COMMENT $3092 length in SCALE_FACTOR_GAME
COMMENT $3093 anim delay value
COMMENT $3094 pointer to next anim object
COMMENT $3096 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3097 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3098 brightness
COMMENT $3099 special flag
COMMENT $309A alternate object for diving
COMMENT $309C speed + direction
COMMENT $309D graphic definition
COMMENT $309F length in SCALE_FACTOR_GAME
COMMENT $30A0 anim delay value
COMMENT $30A1 pointer to next anim object
COMMENT $30A3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30A4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30A5 brightness
COMMENT $30A6 special flag
COMMENT $30A7 alternate object for diving
COMMENT $30A9 speed + direction
COMMENT $30AA graphic definition
COMMENT $30AC length in SCALE_FACTOR_GAME
COMMENT $30AD anim delay value
COMMENT $30AE pointer to next anim object
COMMENT $30B0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30B1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30B2 brightness
COMMENT $30B3 special flag
COMMENT $30B4 alternate object for diving
COMMENT $30B6 speed + direction
COMMENT $30B7 graphic definition
COMMENT $30B9 length in SCALE_FACTOR_GAME
COMMENT $30BA anim delay value
COMMENT $30BB pointer to next anim object
COMMENT $30BD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30BE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30BF brightness
COMMENT $30C0 special flag
COMMENT $30C1 alternate object for diving
COMMENT $30C3 speed + direction
COMMENT $30C4 graphic definition
COMMENT $30C6 length in SCALE_FACTOR_GAME
COMMENT $30C7 anim delay value
COMMENT $30C8 pointer to next anim object
COMMENT $30CA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $30CB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $30CC brightness
COMMENT $30CD special flag
COMMENT $30CE alternate object for diving
COMMENT_LINE $30D0 sprite definition
COMMENT_LINE $30E5 sprite definition
COMMENT_LINE $30FA sprite definition
COMMENT_LINE $3119 sprite definition
COMMENT_LINE $312E sprite definition
COMMENT $3139 speed + direction
COMMENT $313A graphic definition
COMMENT $313C length in SCALE_FACTOR_GAME
COMMENT $313D anim delay value
COMMENT $313E pointer to next anim object
COMMENT $3140 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3141 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3142 brightness
COMMENT $3143 special flag
COMMENT $3144 alternate object for diving
COMMENT $3146 speed + direction
COMMENT $3147 graphic definition
COMMENT $3149 length in SCALE_FACTOR_GAME
COMMENT $314A anim delay value
COMMENT $314B pointer to next anim object
COMMENT $314D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $314E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $314F brightness
COMMENT $3150 special flag
COMMENT $3151 alternate object for diving
COMMENT $3153 speed + direction
COMMENT $3154 graphic definition
COMMENT $3156 length in SCALE_FACTOR_GAME
COMMENT $3157 anim delay value
COMMENT $3158 pointer to next anim object
COMMENT $315A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $315B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $315C brightness
COMMENT $315D special flag
COMMENT $315E alternate object for diving
COMMENT $3160 speed + direction
COMMENT $3161 graphic definition
COMMENT $3163 length in SCALE_FACTOR_GAME
COMMENT $3164 anim delay value
COMMENT $3165 pointer to next anim object
COMMENT $3167 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3168 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3169 brightness
COMMENT $316A special flag
COMMENT $316B alternate object for diving
COMMENT $316D speed + direction
COMMENT $316E graphic definition
COMMENT $3170 length in SCALE_FACTOR_GAME
COMMENT $3171 anim delay value
COMMENT $3172 pointer to next anim object
COMMENT $3174 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3175 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3176 brightness
COMMENT $3177 special flag
COMMENT $3178 alternate object for diving
COMMENT $317A speed + direction
COMMENT $317B graphic definition
COMMENT $317D length in SCALE_FACTOR_GAME
COMMENT $317E anim delay value
COMMENT $317F pointer to next anim object
COMMENT $3181 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3182 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3183 brightness
COMMENT $3184 special flag
COMMENT $3185 alternate object for diving
COMMENT $3187 speed + direction
COMMENT $3188 graphic definition
COMMENT $318A length in SCALE_FACTOR_GAME
COMMENT $318B anim delay value
COMMENT $318C pointer to next anim object
COMMENT $318E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $318F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3190 brightness
COMMENT $3191 special flag
COMMENT $3192 alternate object for diving
COMMENT $3194 speed + direction
COMMENT $3195 graphic definition
COMMENT $3197 length in SCALE_FACTOR_GAME
COMMENT $3198 anim delay value
COMMENT $3199 pointer to next anim object
COMMENT $319B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $319C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $319D brightness
COMMENT $319E special flag
COMMENT $319F alternate object for diving
COMMENT $31A1 speed + direction
COMMENT $31A2 graphic definition
COMMENT $31A4 length in SCALE_FACTOR_GAME
COMMENT $31A5 anim delay value
COMMENT $31A6 pointer to next anim object
COMMENT $31A8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31A9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31AA brightness
COMMENT $31AB special flag
COMMENT $31AC alternate object for diving
COMMENT $31AE speed + direction
COMMENT $31AF graphic definition
COMMENT $31B1 length in SCALE_FACTOR_GAME
COMMENT $31B2 anim delay value
COMMENT $31B3 pointer to next anim object
COMMENT $31B5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31B6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31B7 brightness
COMMENT $31B8 special flag
COMMENT $31B9 alternate object for diving
COMMENT $31BB speed + direction
COMMENT $31BC graphic definition
COMMENT $31BE length in SCALE_FACTOR_GAME
COMMENT $31BF anim delay value
COMMENT $31C0 pointer to next anim object
COMMENT $31C2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31C3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31C4 brightness
COMMENT $31C5 special flag
COMMENT $31C6 alternate object for diving
COMMENT $31C8 speed + direction
COMMENT $31C9 graphic definition
COMMENT $31CB length in SCALE_FACTOR_GAME
COMMENT $31CC anim delay value
COMMENT $31CD pointer to next anim object
COMMENT $31CF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31D0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31D1 brightness
COMMENT $31D2 special flag
COMMENT $31D3 alternate object for diving
COMMENT $31D5 speed + direction
COMMENT $31D6 graphic definition
COMMENT $31D8 length in SCALE_FACTOR_GAME
COMMENT $31D9 anim delay value
COMMENT $31DA pointer to next anim object
COMMENT $31DC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31DD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31DE brightness
COMMENT $31DF special flag
COMMENT $31E0 alternate object for diving
COMMENT $31E2 speed + direction
COMMENT $31E3 graphic definition
COMMENT $31E5 length in SCALE_FACTOR_GAME
COMMENT $31E6 anim delay value
COMMENT $31E7 pointer to next anim object
COMMENT $31E9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31EA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31EB brightness
COMMENT $31EC special flag
COMMENT $31ED alternate object for diving
COMMENT $31EF speed + direction
COMMENT $31F0 graphic definition
COMMENT $31F2 length in SCALE_FACTOR_GAME
COMMENT $31F3 anim delay value
COMMENT $31F4 pointer to next anim object
COMMENT $31F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $31F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $31F8 brightness
COMMENT $31F9 special flag
COMMENT $31FA alternate object for diving
COMMENT $31FC speed + direction
COMMENT $31FD graphic definition
COMMENT $31FF length in SCALE_FACTOR_GAME
COMMENT $3200 anim delay value
COMMENT $3201 pointer to next anim object
COMMENT $3203 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3204 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3205 brightness
COMMENT $3206 special flag
COMMENT $3207 alternate object for diving
COMMENT $3209 speed + direction
COMMENT $320A graphic definition
COMMENT $320C length in SCALE_FACTOR_GAME
COMMENT $320D anim delay value
COMMENT $320E pointer to next anim object
COMMENT $3210 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3211 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3212 brightness
COMMENT $3213 special flag
COMMENT $3214 alternate object for diving
COMMENT $3216 speed + direction
COMMENT $3217 graphic definition
COMMENT $3219 length in SCALE_FACTOR_GAME
COMMENT $321A anim delay value
COMMENT $321B pointer to next anim object
COMMENT $321D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $321E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $321F brightness
COMMENT $3220 special flag
COMMENT $3221 alternate object for diving
COMMENT $3223 speed + direction
COMMENT $3224 graphic definition
COMMENT $3226 length in SCALE_FACTOR_GAME
COMMENT $3227 anim delay value
COMMENT $3228 pointer to next anim object
COMMENT $322A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $322B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $322C brightness
COMMENT $322D special flag
COMMENT $322E alternate object for diving
COMMENT $3230 speed + direction
COMMENT $3231 graphic definition
COMMENT $3233 length in SCALE_FACTOR_GAME
COMMENT $3234 anim delay value
COMMENT $3235 pointer to next anim object
COMMENT $3237 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3238 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3239 brightness
COMMENT $323A special flag
COMMENT $323B alternate object for diving
COMMENT_LINE $323D this file is part of vectrex frogger, written by Malban
COMMENT_LINE $323D in March-April 1998
COMMENT_LINE $323D all stuff contained here is public domain
COMMENT_LINE $323D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $323D this file contains 'sprite' definition data for snakes                    ;
COMMENT_LINE $323D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $323D for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $323D snake1 is moving to the right with a speed of 1
COMMENT_LINE $323D snake2 is moving to the right with a speed of 2
COMMENT_LINE $323D snake3 is moving to the left with a speed of -1
COMMENT_LINE $323D snake4 is moving to the left with a speed of -2
COMMENT $3256 speed + direction
COMMENT $3257 graphic definition
COMMENT $3259 length in SCALE_FACTOR_GAME
COMMENT $325A anim delay value
COMMENT $325B pointer to next anim object
COMMENT $325D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $325E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $325F brightness
COMMENT $3260 special flag
COMMENT $327A speed + direction
COMMENT $327B graphic definition
COMMENT $327D length in SCALE_FACTOR_GAME
COMMENT $327E anim delay value
COMMENT $327F pointer to next anim object
COMMENT $3281 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3282 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3283 brightness
COMMENT $3284 special flag
COMMENT $329E speed + direction
COMMENT $329F graphic definition
COMMENT $32A1 length in SCALE_FACTOR_GAME
COMMENT $32A2 anim delay value
COMMENT $32A3 pointer to next anim object
COMMENT $32A5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32A6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32A7 brightness
COMMENT $32A8 special flag
COMMENT $32A9 speed + direction
COMMENT $32AA graphic definition
COMMENT $32AC length in SCALE_FACTOR_GAME
COMMENT $32AD anim delay value
COMMENT $32AE pointer to next anim object
COMMENT $32B0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32B1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32B2 brightness
COMMENT $32B3 special flag
COMMENT $32B4 speed + direction
COMMENT $32B5 graphic definition
COMMENT $32B7 length in SCALE_FACTOR_GAME
COMMENT $32B8 anim delay value
COMMENT $32B9 pointer to next anim object
COMMENT $32BB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32BC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32BD brightness
COMMENT $32BE special flag
COMMENT $32BF speed + direction
COMMENT $32C0 graphic definition
COMMENT $32C2 length in SCALE_FACTOR_GAME
COMMENT $32C3 anim delay value
COMMENT $32C4 pointer to next anim object
COMMENT $32C6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32C7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32C8 brightness
COMMENT $32C9 special flag
COMMENT $32CA speed + direction
COMMENT $32CB graphic definition
COMMENT $32CD length in SCALE_FACTOR_GAME
COMMENT $32CE anim delay value
COMMENT $32CF pointer to next anim object
COMMENT $32D1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32D2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32D3 brightness
COMMENT $32D4 special flag
COMMENT $32D5 speed + direction
COMMENT $32D6 graphic definition
COMMENT $32D8 length in SCALE_FACTOR_GAME
COMMENT $32D9 anim delay value
COMMENT $32DA pointer to next anim object
COMMENT $32DC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32DD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32DE brightness
COMMENT $32DF special flag
COMMENT $32F9 speed + direction
COMMENT $32FA graphic definition
COMMENT $32FC length in SCALE_FACTOR_GAME
COMMENT $32FD anim delay value
COMMENT $32FE pointer to next anim object
COMMENT $3300 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3301 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3302 brightness
COMMENT $3303 special flag
COMMENT $331D speed + direction
COMMENT $331E graphic definition
COMMENT $3320 length in SCALE_FACTOR_GAME
COMMENT $3321 anim delay value
COMMENT $3322 pointer to next anim object
COMMENT $3324 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3325 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3326 brightness
COMMENT $3327 special flag
COMMENT $3341 speed + direction
COMMENT $3342 graphic definition
COMMENT $3344 length in SCALE_FACTOR_GAME
COMMENT $3345 anim delay value
COMMENT $3346 pointer to next anim object
COMMENT $3348 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3349 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $334A brightness
COMMENT $334B special flag
COMMENT $334C speed + direction
COMMENT $334D graphic definition
COMMENT $334F length in SCALE_FACTOR_GAME
COMMENT $3350 anim delay value
COMMENT $3351 pointer to next anim object
COMMENT $3353 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3354 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3355 brightness
COMMENT $3356 special flag
COMMENT $3357 speed + direction
COMMENT $3358 graphic definition
COMMENT $335A length in SCALE_FACTOR_GAME
COMMENT $335B anim delay value
COMMENT $335C pointer to next anim object
COMMENT $335E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $335F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3360 brightness
COMMENT $3361 special flag
COMMENT $3362 speed + direction
COMMENT $3363 graphic definition
COMMENT $3365 length in SCALE_FACTOR_GAME
COMMENT $3366 anim delay value
COMMENT $3367 pointer to next anim object
COMMENT $3369 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $336A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $336B brightness
COMMENT $336C special flag
COMMENT $336D speed + direction
COMMENT $336E graphic definition
COMMENT $3370 length in SCALE_FACTOR_GAME
COMMENT $3371 anim delay value
COMMENT $3372 pointer to next anim object
COMMENT $3374 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3375 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3376 brightness
COMMENT $3377 special flag
COMMENT $3378 speed + direction
COMMENT $3379 graphic definition
COMMENT $337B length in SCALE_FACTOR_GAME
COMMENT $337C anim delay value
COMMENT $337D pointer to next anim object
COMMENT $337F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3380 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3381 brightness
COMMENT $3382 special flag
COMMENT_LINE $3383 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3383 in March-April 1998
COMMENT_LINE $3383 all stuff contained here is public domain
COMMENT_LINE $3383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3383 this file contains 'sprite' definition data for crocodiles                ;
COMMENT_LINE $3383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3383 croco1a_sprite:
COMMENT_LINE $3383 if USE_LOOP_UNROLING !=1
COMMENT_LINE $3383 DB 13
COMMENT_LINE $3383 else
COMMENT_LINE $3383 DW (MAX_LINE_NUM-(13+1))*ONE_LINE_LENGTH
COMMENT_LINE $3383 endif
COMMENT_LINE $3383 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -1*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 croco1a_object:
COMMENT_LINE $3383 DB 1                    ; speed + direction
COMMENT_LINE $3383 DW croco1a_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco1b_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $3383 croco1b_sprite:
COMMENT_LINE $3383 if USE_LOOP_UNROLING !=1
COMMENT_LINE $3383 DB 13
COMMENT_LINE $3383 else
COMMENT_LINE $3383 DW (MAX_LINE_NUM-(13+1))*ONE_LINE_LENGTH
COMMENT_LINE $3383 endif
COMMENT_LINE $3383 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 croco1b_object:
COMMENT_LINE $3383 DB 1                    ; speed + direction
COMMENT_LINE $3383 DW croco1b_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco1c_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $3383 croco1c_sprite:
COMMENT_LINE $3383 if USE_LOOP_UNROLING !=1
COMMENT_LINE $3383 DB 11
COMMENT_LINE $3383 else
COMMENT_LINE $3383 DW (MAX_LINE_NUM-(11+1))*ONE_LINE_LENGTH
COMMENT_LINE $3383 endif
COMMENT_LINE $3383 DB  3*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  2*SPRITE_BLOW_UP,  5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP,  2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -2*SPRITE_BLOW_UP,  4*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -4*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -3*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB -1*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  1*SPRITE_BLOW_UP, -2*SPRITE_BLOW_UP
COMMENT_LINE $3383 DB  0*SPRITE_BLOW_UP, -5*SPRITE_BLOW_UP
COMMENT_LINE $3383 croco1c_object:
COMMENT_LINE $3383 DB 1                    ; speed + direction
COMMENT_LINE $3383 DW croco1c_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco1a_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $3383 croco2a_object:
COMMENT_LINE $3383 DB 2                    ; speed + direction
COMMENT_LINE $3383 DW croco1a_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco2b_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $3383 croco2b_object:
COMMENT_LINE $3383 DB 2                    ; speed + direction
COMMENT_LINE $3383 DW croco1b_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco2c_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT_LINE $3383 croco2c_object:
COMMENT_LINE $3383 DB 2                    ; speed + direction
COMMENT_LINE $3383 DW croco1c_sprite       ; graphic definition
COMMENT_LINE $3383 DB 34                   ; length in SCALE_FACTOR_GAME
COMMENT_LINE $3383 DB 5                    ; anim delay value
COMMENT_LINE $3383 DW croco2a_object       ; pointer to next anim object
COMMENT_LINE $3383 DB 0                    ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB 1                    ; offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $3383 DB $60                  ; brightness
COMMENT_LINE $3383 DB SPECIAL_RIGHT_CROCO  ; special flag
COMMENT $33A2 speed + direction
COMMENT $33A3 graphic definition
COMMENT $33A5 length in SCALE_FACTOR_GAME
COMMENT $33A6 anim delay value
COMMENT $33A7 pointer to next anim object
COMMENT $33A9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $33AA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $33AB brightness
COMMENT $33AC special flag
COMMENT $33CC speed + direction
COMMENT $33CD graphic definition
COMMENT $33CF length in SCALE_FACTOR_GAME
COMMENT $33D0 anim delay value
COMMENT $33D1 pointer to next anim object
COMMENT $33D3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $33D4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $33D5 brightness
COMMENT $33D6 special flag
COMMENT $33F2 speed + direction
COMMENT $33F3 graphic definition
COMMENT $33F5 length in SCALE_FACTOR_GAME
COMMENT $33F6 anim delay value
COMMENT $33F7 pointer to next anim object
COMMENT $33F9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $33FA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $33FB brightness
COMMENT $33FC special flag
COMMENT $33FD speed + direction
COMMENT $33FE graphic definition
COMMENT $3400 length in SCALE_FACTOR_GAME
COMMENT $3401 anim delay value
COMMENT $3402 pointer to next anim object
COMMENT $3404 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3405 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3406 brightness
COMMENT $3407 special flag
COMMENT $3408 speed + direction
COMMENT $3409 graphic definition
COMMENT $340B length in SCALE_FACTOR_GAME
COMMENT $340C anim delay value
COMMENT $340D pointer to next anim object
COMMENT $340F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3410 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3411 brightness
COMMENT $3412 special flag
COMMENT $3413 speed + direction
COMMENT $3414 graphic definition
COMMENT $3416 length in SCALE_FACTOR_GAME
COMMENT $3417 anim delay value
COMMENT $3418 pointer to next anim object
COMMENT $341A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $341B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $341C brightness
COMMENT $341D special flag
COMMENT $343A speed + direction
COMMENT $343B graphic definition
COMMENT $343D length in SCALE_FACTOR_GAME
COMMENT $343E anim delay value
COMMENT $343F pointer to next anim object
COMMENT $3441 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3442 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3443 brightness
COMMENT $3444 special flag
COMMENT $3467 speed + direction
COMMENT $3468 graphic definition
COMMENT $346A length in SCALE_FACTOR_GAME
COMMENT $346B anim delay value
COMMENT $346C pointer to next anim object
COMMENT $346E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $346F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3470 brightness
COMMENT $3471 special flag
COMMENT $3498 speed + direction
COMMENT $3499 graphic definition
COMMENT $349B length in SCALE_FACTOR_GAME
COMMENT $349C anim delay value
COMMENT $349D pointer to next anim object
COMMENT $349F offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A1 brightness
COMMENT $34A2 special flag
COMMENT $34C9 speed + direction
COMMENT $34CA graphic definition
COMMENT $34CC length in SCALE_FACTOR_GAME
COMMENT $34CD anim delay value
COMMENT $34CE pointer to next anim object
COMMENT $34D0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D2 brightness
COMMENT $34D3 special flag
COMMENT $34FA speed + direction
COMMENT $34FB graphic definition
COMMENT $34FD length in SCALE_FACTOR_GAME
COMMENT $34FE anim delay value
COMMENT $34FF pointer to next anim object
COMMENT $3501 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3502 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3503 brightness
COMMENT $3504 special flag
COMMENT $3505 speed + direction
COMMENT $3506 graphic definition
COMMENT $3508 length in SCALE_FACTOR_GAME
COMMENT $3509 anim delay value
COMMENT $350A pointer to next anim object
COMMENT $350C offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $350D offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $350E brightness
COMMENT $350F special flag
COMMENT_LINE $3510 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3510 in March-April 1998
COMMENT_LINE $3510 all stuff contained here is public domain
COMMENT_LINE $3510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3510 this file contains 'sprite' definition data for otter                     ;
COMMENT_LINE $3510 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $3527 speed + direction
COMMENT $3528 graphic definition
COMMENT $352A length in SCALE_FACTOR_GAME
COMMENT $352B anim delay value
COMMENT $352C pointer to next anim object
COMMENT $352E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $352F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3530 brightness
COMMENT $3531 special flag
COMMENT $3549 speed + direction
COMMENT $354A graphic definition
COMMENT $354C length in SCALE_FACTOR_GAME
COMMENT $354D anim delay value
COMMENT $354E pointer to next anim object
COMMENT $3550 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3551 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3552 brightness
COMMENT $3553 special flag
COMMENT_LINE $3554 ***************************************************************************
COMMENT_LINE $3554 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3554 in March-April 1998
COMMENT_LINE $3554 all stuff contained here is public domain
COMMENT_LINE $3554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3554 this file contains all level definitions (16 levels) and the object table ;
COMMENT_LINE $3554 of sprites which can be used for levels                                   ;
COMMENT_LINE $3554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3554 Note:
COMMENT_LINE $3554 The levels are optimized as they are. All levels can even under worst case
COMMENT_LINE $3554 conditions be played with 50Hz display.
COMMENT_LINE $3554 They all take less than 30000 cycles to draw.
COMMENT_LINE $3554 If you make other levels, please be sure that each level takes
COMMENT_LINE $3554 less than 30000 cycles to be drawn. It's easy to go above, since 30 sprites
COMMENT_LINE $3554 can be drawn at maximum (not counting otter, log snakes, girls and
COMMENT_LINE $3554 home sprites). Be carfull, display will 'WOBBLE'!
COMMENT_LINE $3554 actually these levels could probably be 'packed' than we would probably
COMMENT_LINE $3554 have space for 30-40-50??? levels...
COMMENT_LINE $3554 1
COMMENT_LINE $3554 well, it is not all THAT interesting to make levels...
COMMENT_LINE $3554 ****************************************************************************
COMMENT_LINE $3554 some objects are not used...
COMMENT_LINE $3554 if you make new objects... comment them here...
COMMENT_LINE $3554 for how to make objects look at any object include file
COMMENT $3554 moving left  -1 '01'
COMMENT $3556 moving left  -1 '02'
COMMENT $3558 moving right  1 '03'
COMMENT $355A moving left  -1 '04'
COMMENT $355C moving right  1 '05'
COMMENT $355E moving left  -1 '06'
COMMENT $3560 moving right  1 '07'
COMMENT $3562 moving right  1 '08'
COMMENT $3564 moving right  2 '09'
COMMENT $3566 moving left  -1 '10'
COMMENT $3568 moving left  -2 '11'
COMMENT $356A moving left  -1 '12'
COMMENT $356C moving right  2 '13'
COMMENT $356E moving left  -2 '14'
COMMENT $3570 moving left  -1 '15' left of big
COMMENT $3572 moving left  -1 '16' right of big
COMMENT $3574 moving left  -1 '17'
COMMENT $3576 moving left  -1 '18'
COMMENT $3578 moving left  -1 '19'
COMMENT $357A moving left  -1 '20'
COMMENT $357C moving left  -1 '21'
COMMENT $357E moving left  -1 '22'
COMMENT $3580 croco1a_object         ; moving right  1 '23'
COMMENT $3582 croco2a_object         ; moving right  2 '24'
COMMENT $3584 moving left  -1 '25'
COMMENT $3586 moving left  -2 '26'
COMMENT $3588 moving right  1 '27'
COMMENT $358A moving left  -1 '28'
COMMENT $358C moving right  2 '29'
COMMENT $358E moving left  -2 '30'
COMMENT $3590 log5a_object           ; moving right  1 '31' left of big
COMMENT $3592 log6a_object           ; moving right  1 '32' right of big
COMMENT $3594 moving left  -1 '33'
COMMENT $3596 moving right  1 '34'
COMMENT $3598 moving right  2 '35'
COMMENT $359A moving right  2 '36'
COMMENT $359C moving left  -2 '37'
COMMENT $359E moving left  -2 '38' left of big
COMMENT $35A0 moving left  -2 '39' right of big
COMMENT $35A2 log11a_object          ; moving right  2 '40' left of big
COMMENT $35A4 log12a_object          ; moving right  2 '41' right of big
COMMENT $35A6 moving left  -2 '42'
COMMENT $35A8 moving left  -3 '43'
COMMENT $35AA moving right  1 '44'
COMMENT $35AC moving right  2 '45'
COMMENT $35AE moving left  -1 '46'
COMMENT $35B0 moving left  -2 '47'
COMMENT_LINE $35B2 per level 11 bands (5 river + middle band + 5 street)
COMMENT_LINE $35B2 7 objects per band MAX
COMMENT_LINE $35B2 30 objects absolut MAX
COMMENT_LINE $35B2 not more than 6 dive objects (changing after dive timer)
COMMENT_LINE $35B2 objects not in adjacents positions
COMMENT_LINE $35B2 ...........................................................................
COMMENT $35B2 per band 12 pos, river
COMMENT $35BE per band 12 pos, river
COMMENT $35CA per band 12 pos, river
COMMENT $35D6 per band 12 pos, river
COMMENT $35E2 per band 12 pos, river
COMMENT $35EE middle band
COMMENT $35FA per band 12 pos, street
COMMENT $3606 per band 12 pos, street
COMMENT $3612 per band 12 pos, street
COMMENT $361E per band 12 pos, street
COMMENT $362A per band 12 pos, street
COMMENT $3636 fly            timer, after how many ticks
COMMENT $3637 crocodile      will appear and disappear
COMMENT $3638 mole           timer $ 10
COMMENT $3639 snake on log   after what rounds
COMMENT $363A female         1 every round
COMMENT $363B must be dividable by 2, 120 max!
COMMENT $363C turtle dive timer, $ff = not diving turtle
COMMENT_LINE $363D ...........................................................................
COMMENT $363D per band 12 pos, river
COMMENT $3649 per band 12 pos, river
COMMENT $3655 per band 12 pos, river
COMMENT $3661 per band 12 pos, river
COMMENT $366D per band 12 pos, river
COMMENT $3679 middle band
COMMENT $3685 per band 12 pos, street
COMMENT $3691 per band 12 pos, street
COMMENT $369D per band 12 pos, street
COMMENT $36A9 per band 12 pos, street
COMMENT $36B5 per band 12 pos, street
COMMENT $36C1 fly            timer, after how many ticks
COMMENT $36C2 crocodile      will appear and disappear
COMMENT $36C3 mole
COMMENT $36C4 snake on log
COMMENT $36C5 female
COMMENT $36C6 timer muss durch 2 teilbar sein
COMMENT_LINE $36C7 120 max!
COMMENT $36C7 turtle dive timer at least 6 $a is ok!!!
COMMENT_LINE $36C8 ...........................................................................
COMMENT $36C8 per band 12 pos, river
COMMENT $36D4 per band 12 pos, river
COMMENT $36E0 per band 12 pos, river
COMMENT $36EC per band 12 pos, river
COMMENT $36F8 per band 12 pos, river
COMMENT $3704 middle band
COMMENT $3710 per band 12 pos, street
COMMENT $371C per band 12 pos, street
COMMENT $3728 per band 12 pos, street
COMMENT $3734 per band 12 pos, street
COMMENT $3740 per band 12 pos, street
COMMENT $374C fly            timer, after how many ticks
COMMENT $374D crocodile      will appear and disappear
COMMENT $374E mole
COMMENT $374F snake on log
COMMENT $3750 female
COMMENT $3751 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3752 turtle dive timer
COMMENT_LINE $3753 ...........................................................................
COMMENT $3753 per band 12 pos, river
COMMENT $375F per band 12 pos, river
COMMENT $376B per band 12 pos, river
COMMENT $3777 per band 12 pos, river
COMMENT $3783 per band 12 pos, river
COMMENT $378F middle band
COMMENT $379B per band 12 pos, street
COMMENT $37A7 per band 12 pos, street
COMMENT $37B3 per band 12 pos, street
COMMENT $37BF per band 12 pos, street
COMMENT $37CB per band 12 pos, street
COMMENT $37D7 fly            timer, after how many ticks
COMMENT $37D8 crocodile      will appear and disappear
COMMENT $37D9 mole
COMMENT $37DA snake on log
COMMENT $37DB female
COMMENT $37DC timer muss durch 2 teilbar sein, 120 max!
COMMENT $37DD turtle dive timer, $ff = not diving turtle
COMMENT_LINE $37DE ...........................................................................
COMMENT $37DE per band 12 pos, river
COMMENT $37EA per band 12 pos, river
COMMENT $37F6 per band 12 pos, river
COMMENT $3802 per band 12 pos, river
COMMENT $380E per band 12 pos, river
COMMENT $381A middle band
COMMENT $3826 per band 12 pos, street
COMMENT $3832 per band 12 pos, street
COMMENT $383E per band 12 pos, street
COMMENT $384A per band 12 pos, street
COMMENT $3856 per band 12 pos, street
COMMENT $3862 fly            timer, after how many ticks
COMMENT $3863 crocodile      will appear and disappear
COMMENT $3864 mole
COMMENT $3865 snake on log
COMMENT $3866 female
COMMENT $3867 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3868 turtle dive timer
COMMENT_LINE $3869 ...........................................................................
COMMENT $3869 per band 12 pos, river
COMMENT $3875 per band 12 pos, river
COMMENT $3881 per band 12 pos, river
COMMENT $388D per band 12 pos, river
COMMENT $3899 per band 12 pos, river
COMMENT $38A5 middle band
COMMENT $38B1 per band 12 pos, street
COMMENT $38BD per band 12 pos, street
COMMENT $38C9 per band 12 pos, street
COMMENT $38D5 per band 12 pos, street
COMMENT $38E1 per band 12 pos, street
COMMENT $38ED fly            timer, after how many ticks
COMMENT $38EE crocodile      will appear and disappear
COMMENT $38EF mole
COMMENT $38F0 snake on log
COMMENT $38F1 female
COMMENT $38F2 timer muss durch 2 teilbar sein, 120 max!
COMMENT $38F3 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $38F4 ...........................................................................
COMMENT $38F4 per band 12 pos, river
COMMENT $3900 per band 12 pos, river
COMMENT $390C per band 12 pos, river
COMMENT $3918 per band 12 pos, river
COMMENT $3924 per band 12 pos, river
COMMENT $3930 middle band
COMMENT $393C per band 12 pos, street
COMMENT $3948 per band 12 pos, street
COMMENT $3954 per band 12 pos, street
COMMENT $3960 per band 12 pos, street
COMMENT $396C per band 12 pos, street
COMMENT $3978 fly            timer, after how many ticks
COMMENT $3979 crocodile      will appear and disappear
COMMENT $397A mole
COMMENT $397B snake on log
COMMENT $397C female
COMMENT $397D timer muss durch 2 teilbar sein, 120 max!
COMMENT $397E turtle dive timer, $ff = not diving turtle
COMMENT_LINE $397F ...........................................................................
COMMENT $397F per band 12 pos, river
COMMENT $398B per band 12 pos, river
COMMENT $3997 per band 12 pos, river
COMMENT $39A3 per band 12 pos, river
COMMENT $39AF per band 12 pos, river
COMMENT $39BB middle band
COMMENT $39C7 per band 12 pos, street
COMMENT $39D3 per band 12 pos, street
COMMENT $39DF per band 12 pos, street
COMMENT $39EB per band 12 pos, street
COMMENT $39F7 per band 12 pos, street
COMMENT $3A03 fly            timer, after how many ticks
COMMENT $3A04 crocodile      will appear and disappear
COMMENT $3A05 mole
COMMENT $3A06 snake on log
COMMENT $3A07 female
COMMENT $3A08 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3A09 turtle dive timer
COMMENT_LINE $3A0A ...........................................................................
COMMENT $3A0A per band 12 pos, river
COMMENT $3A16 per band 12 pos, river
COMMENT $3A22 per band 12 pos, river
COMMENT $3A2E per band 12 pos, river
COMMENT $3A3A per band 12 pos, river
COMMENT $3A46 middle band
COMMENT $3A52 per band 12 pos, street
COMMENT $3A5E per band 12 pos, street
COMMENT $3A6A per band 12 pos, street
COMMENT $3A76 per band 12 pos, street
COMMENT $3A82 per band 12 pos, street
COMMENT $3A8E fly            timer, after how many ticks
COMMENT $3A8F crocodile      will appear and disappear
COMMENT $3A90 mole
COMMENT $3A91 snake on log
COMMENT $3A92 female
COMMENT $3A93 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3A94 turtle dive timer
COMMENT_LINE $3A95 ...........................................................................
COMMENT $3A95 per band 12 pos, river
COMMENT $3AA1 per band 12 pos, river
COMMENT $3AAD per band 12 pos, river
COMMENT $3AB9 per band 12 pos, river
COMMENT $3AC5 per band 12 pos, river
COMMENT $3AD1 middle band
COMMENT $3ADD per band 12 pos, street
COMMENT $3AE9 per band 12 pos, street
COMMENT $3AF5 per band 12 pos, street
COMMENT $3B01 per band 12 pos, street
COMMENT $3B0D per band 12 pos, street
COMMENT $3B19 fly            timer, after how many ticks
COMMENT $3B1A crocodile      will appear and disappear
COMMENT $3B1B mole
COMMENT $3B1C snake on log
COMMENT $3B1D female
COMMENT $3B1E timer muss durch 2 teilbar sein, 120 max!
COMMENT $3B1F turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3B20 ...........................................................................
COMMENT $3B20 per band 12 pos, river
COMMENT $3B2C per band 12 pos, river
COMMENT $3B38 per band 12 pos, river
COMMENT $3B44 per band 12 pos, river
COMMENT $3B50 per band 12 pos, river
COMMENT $3B5C middle band
COMMENT $3B68 per band 12 pos, street
COMMENT $3B74 per band 12 pos, street
COMMENT $3B80 per band 12 pos, street
COMMENT $3B8C per band 12 pos, street
COMMENT $3B98 per band 12 pos, street
COMMENT $3BA4 fly            timer, after how many ticks
COMMENT $3BA5 crocodile      will appear and disappear
COMMENT $3BA6 mole
COMMENT $3BA7 snake on log
COMMENT $3BA8 female
COMMENT $3BA9 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3BAA turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3BAB ...........................................................................
COMMENT $3BAB per band 12 pos, river
COMMENT $3BB7 per band 12 pos, river
COMMENT $3BC3 per band 12 pos, river
COMMENT $3BCF per band 12 pos, river
COMMENT $3BDB per band 12 pos, river
COMMENT $3BE7 middle band
COMMENT $3BF3 per band 12 pos, street
COMMENT $3BFF per band 12 pos, street
COMMENT $3C0B per band 12 pos, street
COMMENT $3C17 per band 12 pos, street
COMMENT $3C23 per band 12 pos, street
COMMENT $3C2F fly            timer, after how many ticks
COMMENT $3C30 crocodile      will appear and disappear
COMMENT $3C31 mole
COMMENT $3C32 snake on log
COMMENT $3C33 female
COMMENT $3C34 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3C35 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $3C36 ...........................................................................
COMMENT $3C36 per band 12 pos, river
COMMENT $3C42 per band 12 pos, river
COMMENT $3C4E per band 12 pos, river
COMMENT $3C5A per band 12 pos, river
COMMENT $3C66 per band 12 pos, river
COMMENT $3C72 middle band
COMMENT $3C7E per band 12 pos, street
COMMENT $3C8A per band 12 pos, street
COMMENT $3C96 per band 12 pos, street
COMMENT $3CA2 per band 12 pos, street
COMMENT $3CAE per band 12 pos, street
COMMENT $3CBA fly            timer, after how many ticks
COMMENT $3CBB crocodile      will appear and disappear
COMMENT $3CBC mole
COMMENT $3CBD snake on log
COMMENT $3CBE female
COMMENT $3CBF timer muss durch 2 teilbar sein, 120 max!
COMMENT $3CC0 turtle dive timer
COMMENT_LINE $3CC1 ...........................................................................
COMMENT $3CC1 per band 12 pos, river
COMMENT $3CCD per band 12 pos, river
COMMENT $3CD9 per band 12 pos, river
COMMENT $3CE5 per band 12 pos, river
COMMENT $3CF1 per band 12 pos, river
COMMENT $3CFD middle band
COMMENT $3D09 per band 12 pos, street
COMMENT $3D15 per band 12 pos, street
COMMENT $3D21 per band 12 pos, street
COMMENT $3D2D per band 12 pos, street
COMMENT $3D39 per band 12 pos, street
COMMENT $3D45 fly            timer, after how many ticks
COMMENT $3D46 crocodile      will appear and disappear
COMMENT $3D47 mole
COMMENT $3D48 snake on log
COMMENT $3D49 female
COMMENT $3D4A timer muss durch 2 teilbar sein, 120 max!
COMMENT $3D4B turtle dive timer
COMMENT_LINE $3D4C ...........................................................................
COMMENT $3D4C per band 12 pos, river
COMMENT $3D58 per band 12 pos, river
COMMENT $3D64 per band 12 pos, river
COMMENT $3D70 per band 12 pos, river
COMMENT $3D7C per band 12 pos, river
COMMENT $3D88 middle band
COMMENT $3D94 per band 12 pos, street
COMMENT $3DA0 per band 12 pos, street
COMMENT $3DAC per band 12 pos, street
COMMENT $3DB8 per band 12 pos, street
COMMENT $3DC4 per band 12 pos, street
COMMENT $3DD0 fly            timer, after how many ticks
COMMENT $3DD1 crocodile      will appear and disappear
COMMENT $3DD2 mole
COMMENT $3DD3 snake on log
COMMENT $3DD4 female
COMMENT $3DD5 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3DD6 turtle dive timer
COMMENT_LINE $3DD7 ...........................................................................
COMMENT $3DD7 per band 12 pos, river
COMMENT $3DE3 per band 12 pos, river
COMMENT $3DEF per band 12 pos, river
COMMENT $3DFB per band 12 pos, river
COMMENT $3E07 per band 12 pos, river
COMMENT $3E13 middle band
COMMENT $3E1F per band 12 pos, street
COMMENT $3E2B per band 12 pos, street
COMMENT $3E37 per band 12 pos, street
COMMENT $3E43 per band 12 pos, street
COMMENT $3E4F per band 12 pos, street
COMMENT $3E5B fly            timer, after how many ticks
COMMENT $3E5C crocodile      will appear and disappear
COMMENT $3E5D mole
COMMENT $3E5E snake on log
COMMENT $3E5F female
COMMENT $3E60 timer muss durch 2 teilbar sein, 120 max!
COMMENT $3E61 turtle dive timer
COMMENT_LINE $3E62 ...........................................................................
COMMENT $3E62 per band 12 pos, river
COMMENT $3E6E per band 12 pos, river
COMMENT $3E7A per band 12 pos, river
COMMENT $3E86 per band 12 pos, river
COMMENT $3E92 per band 12 pos, river
COMMENT $3E9E middle band
COMMENT $3EAA per band 12 pos, street
COMMENT $3EB6 per band 12 pos, street
COMMENT $3EC2 per band 12 pos, street
COMMENT $3ECE per band 12 pos, street
COMMENT $3EDA per band 12 pos, street
COMMENT $3EE6 fly
COMMENT $3EE7 crocodile
COMMENT $3EE8 mole
COMMENT $3EE9 snake on log
COMMENT $3EEA female
COMMENT $3EEB timer
COMMENT $3EEC turtle dive timer
COMMENT_LINE $3EED ...........................................................................
COMMENT_LINE $3EED ***************************************************************************
COMMENT_LINE $457C if zero flag is = after macro the bit was 0
COMMENT_LINE $457C if zero is clear after macro the bit was 1
COMMENT_LINE $0000 load a new byte
COMMENT_LINE $0000 bit position correct here
COMMENT_LINE $0000 remember we use one bit now!
COMMENT_LINE $0000 is the bit at the current position set?
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 a = reg, b = data
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 store data in reg a in an
COMMENT_LINE $0000 appropriate way to PSG register
COMMENT_LINE $0000 expects u to point to shadow area
COMMENT_LINE $0000 expect in U start of data
COMMENT $4598 store register select byte
COMMENT $459A sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $459E sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $45A2 read sound chip status (?)
COMMENT $45A4 store data byte
COMMENT $45A6 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $45AA sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $45AF ***************************************************************************
COMMENT_LINE $45AF No shadowing
COMMENT_LINE $45AF uses psg shadow reg 7
COMMENT_LINE $45AF check first bit, if 0, than nothing AT all changed
COMMENT_LINE $45B4 load a new byte
COMMENT_LINE $45C4 bit position correct here
COMMENT_LINE $45C4 remember we use one bit now!
COMMENT_LINE $45C7 is the bit at the current position set?
COMMENT_LINE $45CE ;;;
COMMENT_LINE $45CE ; voice 0
COMMENT_LINE $45CE ;;;
COMMENT_LINE $45CE check voice 0, if next bit 0, than nothing changed in voice0
COMMENT_LINE $45D3 load a new byte
COMMENT_LINE $45E3 bit position correct here
COMMENT_LINE $45E3 remember we use one bit now!
COMMENT_LINE $45E6 is the bit at the current position set?
COMMENT_LINE $45ED check next bit, if 0, than amplitude is the same
COMMENT_LINE $45F2 load a new byte
COMMENT_LINE $4602 bit position correct here
COMMENT_LINE $4602 remember we use one bit now!
COMMENT_LINE $4605 is the bit at the current position set?
COMMENT_LINE $460C get 4 bits of amplitude from stream
COMMENT_LINE $4613 load a new byte
COMMENT_LINE $4623 bit position correct here
COMMENT_LINE $4623 remember we use one bit now!
COMMENT_LINE $4626 is the bit at the current position set?
COMMENT_LINE $4634 load a new byte
COMMENT_LINE $4644 bit position correct here
COMMENT_LINE $4644 remember we use one bit now!
COMMENT_LINE $4647 is the bit at the current position set?
COMMENT_LINE $4655 load a new byte
COMMENT_LINE $4665 bit position correct here
COMMENT_LINE $4665 remember we use one bit now!
COMMENT_LINE $4668 is the bit at the current position set?
COMMENT_LINE $4676 load a new byte
COMMENT_LINE $4686 bit position correct here
COMMENT_LINE $4686 remember we use one bit now!
COMMENT_LINE $4689 is the bit at the current position set?
COMMENT $4695 store register select byte
COMMENT $4697 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $469B sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $469F read sound chip status (?)
COMMENT $46A1 store data byte
COMMENT $46A3 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $46A7 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $46AB check if noise, when next bit is set, than noise
COMMENT $46AB load reg 7 shadow
COMMENT $0000 set bit 3 to 0
COMMENT $0000 set bit 3 to 1
COMMENT_LINE $0000 check if tone, when next bit is set, than noise
COMMENT_LINE $46B3 load a new byte
COMMENT_LINE $46C3 bit position correct here
COMMENT_LINE $46C3 remember we use one bit now!
COMMENT_LINE $46C6 is the bit at the current position set?
COMMENT $46CD set bit 0 to 0
COMMENT $46D1 set bit 0 to 1
COMMENT_LINE $46D3 sta      $C807                        ; and store the value to shadow
COMMENT_LINE $46D3 check voice 0 low frequence, if next bit is one, = it
COMMENT_LINE $46D8 load a new byte
COMMENT_LINE $46E8 bit position correct here
COMMENT_LINE $46E8 remember we use one bit now!
COMMENT_LINE $46EB is the bit at the current position set?
COMMENT_LINE $46F2 get 8 bits of low freq from stream
COMMENT_LINE $46F9 load a new byte
COMMENT_LINE $4709 bit position correct here
COMMENT_LINE $4709 remember we use one bit now!
COMMENT_LINE $470C is the bit at the current position set?
COMMENT_LINE $471A load a new byte
COMMENT_LINE $472A bit position correct here
COMMENT_LINE $472A remember we use one bit now!
COMMENT_LINE $472D is the bit at the current position set?
COMMENT_LINE $473B load a new byte
COMMENT_LINE $474B bit position correct here
COMMENT_LINE $474B remember we use one bit now!
COMMENT_LINE $474E is the bit at the current position set?
COMMENT_LINE $475C load a new byte
COMMENT_LINE $476C bit position correct here
COMMENT_LINE $476C remember we use one bit now!
COMMENT_LINE $476F is the bit at the current position set?
COMMENT_LINE $477D load a new byte
COMMENT_LINE $478D bit position correct here
COMMENT_LINE $478D remember we use one bit now!
COMMENT_LINE $4790 is the bit at the current position set?
COMMENT_LINE $479E load a new byte
COMMENT_LINE $47AE bit position correct here
COMMENT_LINE $47AE remember we use one bit now!
COMMENT_LINE $47B1 is the bit at the current position set?
COMMENT_LINE $47BF load a new byte
COMMENT_LINE $47CF bit position correct here
COMMENT_LINE $47CF remember we use one bit now!
COMMENT_LINE $47D2 is the bit at the current position set?
COMMENT_LINE $47E0 load a new byte
COMMENT_LINE $47F0 bit position correct here
COMMENT_LINE $47F0 remember we use one bit now!
COMMENT_LINE $47F3 is the bit at the current position set?
COMMENT $47FF store register select byte
COMMENT $4801 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $4805 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $4809 read sound chip status (?)
COMMENT $480B store data byte
COMMENT $480D sound BDIR on, BC1 off, mux off - WRITE
COMMENT $4811 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $4815 check voice 0 high frequency, if next bit is one, = it
COMMENT_LINE $481A load a new byte
COMMENT_LINE $482A bit position correct here
COMMENT_LINE $482A remember we use one bit now!
COMMENT_LINE $482D is the bit at the current position set?
COMMENT_LINE $4834 get 4 bits of low freq from stream
COMMENT_LINE $483B load a new byte
COMMENT_LINE $484B bit position correct here
COMMENT_LINE $484B remember we use one bit now!
COMMENT_LINE $484E is the bit at the current position set?
COMMENT_LINE $485C load a new byte
COMMENT_LINE $486C bit position correct here
COMMENT_LINE $486C remember we use one bit now!
COMMENT_LINE $486F is the bit at the current position set?
COMMENT_LINE $487D load a new byte
COMMENT_LINE $488D bit position correct here
COMMENT_LINE $488D remember we use one bit now!
COMMENT_LINE $4890 is the bit at the current position set?
COMMENT_LINE $489E load a new byte
COMMENT_LINE $48AE bit position correct here
COMMENT_LINE $48AE remember we use one bit now!
COMMENT_LINE $48B1 is the bit at the current position set?
COMMENT $48BD store register select byte
COMMENT $48BF sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $48C3 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $48C7 read sound chip status (?)
COMMENT $48C9 store data byte
COMMENT $48CB sound BDIR on, BC1 off, mux off - WRITE
COMMENT $48CF sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $48D3 ;;;
COMMENT_LINE $48D3 ; voice 1
COMMENT_LINE $48D3 ;;;
COMMENT_LINE $48D3 check voice 1, if next bit 0, than nothing changed in voice1
COMMENT_LINE $48D8 load a new byte
COMMENT_LINE $48E8 bit position correct here
COMMENT_LINE $48E8 remember we use one bit now!
COMMENT_LINE $48EB is the bit at the current position set?
COMMENT_LINE $48F2 check next bit, if 0, than amplitude is the same
COMMENT_LINE $48F7 load a new byte
COMMENT_LINE $4907 bit position correct here
COMMENT_LINE $4907 remember we use one bit now!
COMMENT_LINE $490A is the bit at the current position set?
COMMENT_LINE $4911 get 4 bits of amplitude from stream
COMMENT_LINE $4918 load a new byte
COMMENT_LINE $4928 bit position correct here
COMMENT_LINE $4928 remember we use one bit now!
COMMENT_LINE $492B is the bit at the current position set?
COMMENT_LINE $4939 load a new byte
COMMENT_LINE $4949 bit position correct here
COMMENT_LINE $4949 remember we use one bit now!
COMMENT_LINE $494C is the bit at the current position set?
COMMENT_LINE $495A load a new byte
COMMENT_LINE $496A bit position correct here
COMMENT_LINE $496A remember we use one bit now!
COMMENT_LINE $496D is the bit at the current position set?
COMMENT_LINE $497B load a new byte
COMMENT_LINE $498B bit position correct here
COMMENT_LINE $498B remember we use one bit now!
COMMENT_LINE $498E is the bit at the current position set?
COMMENT $499A store register select byte
COMMENT $499C sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $49A0 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $49A4 read sound chip status (?)
COMMENT $49A6 store data byte
COMMENT $49A8 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $49AC sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $49B0 check if noise, when next bit is set, than noise
COMMENT $49B0 load reg 7 shadow
COMMENT $0000 set bit 4 to 0
COMMENT $0000 set bit 4 to 1
COMMENT_LINE $0000 check if tone, when next bit is set, than noise
COMMENT_LINE $49B8 load a new byte
COMMENT_LINE $49C8 bit position correct here
COMMENT_LINE $49C8 remember we use one bit now!
COMMENT_LINE $49CB is the bit at the current position set?
COMMENT $49D2 set bit 1 to 0
COMMENT $49D6 set bit 1 to 1
COMMENT_LINE $49D8 sta      $C807                        ; and store the value to shadow
COMMENT_LINE $49D8 check voice 1 low frequence, if next bit is one, = it
COMMENT_LINE $49DD load a new byte
COMMENT_LINE $49ED bit position correct here
COMMENT_LINE $49ED remember we use one bit now!
COMMENT_LINE $49F0 is the bit at the current position set?
COMMENT_LINE $49F7 get 8 bits of low freq from stream
COMMENT_LINE $49FE load a new byte
COMMENT_LINE $4A0E bit position correct here
COMMENT_LINE $4A0E remember we use one bit now!
COMMENT_LINE $4A11 is the bit at the current position set?
COMMENT_LINE $4A1F load a new byte
COMMENT_LINE $4A2F bit position correct here
COMMENT_LINE $4A2F remember we use one bit now!
COMMENT_LINE $4A32 is the bit at the current position set?
COMMENT_LINE $4A40 load a new byte
COMMENT_LINE $4A50 bit position correct here
COMMENT_LINE $4A50 remember we use one bit now!
COMMENT_LINE $4A53 is the bit at the current position set?
COMMENT_LINE $4A61 load a new byte
COMMENT_LINE $4A71 bit position correct here
COMMENT_LINE $4A71 remember we use one bit now!
COMMENT_LINE $4A74 is the bit at the current position set?
COMMENT_LINE $4A82 load a new byte
COMMENT_LINE $4A92 bit position correct here
COMMENT_LINE $4A92 remember we use one bit now!
COMMENT_LINE $4A95 is the bit at the current position set?
COMMENT_LINE $4AA3 load a new byte
COMMENT_LINE $4AB3 bit position correct here
COMMENT_LINE $4AB3 remember we use one bit now!
COMMENT_LINE $4AB6 is the bit at the current position set?
COMMENT_LINE $4AC4 load a new byte
COMMENT_LINE $4AD4 bit position correct here
COMMENT_LINE $4AD4 remember we use one bit now!
COMMENT_LINE $4AD7 is the bit at the current position set?
COMMENT_LINE $4AE5 load a new byte
COMMENT_LINE $4AF5 bit position correct here
COMMENT_LINE $4AF5 remember we use one bit now!
COMMENT_LINE $4AF8 is the bit at the current position set?
COMMENT $4B04 store register select byte
COMMENT $4B06 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $4B0A sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $4B0E read sound chip status (?)
COMMENT $4B10 store data byte
COMMENT $4B12 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $4B16 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $4B1A check voice 1 high frequency, if next bit is one, = it
COMMENT_LINE $4B1F load a new byte
COMMENT_LINE $4B2F bit position correct here
COMMENT_LINE $4B2F remember we use one bit now!
COMMENT_LINE $4B32 is the bit at the current position set?
COMMENT_LINE $4B39 get 4 bits of low freq from stream
COMMENT_LINE $4B40 load a new byte
COMMENT_LINE $4B50 bit position correct here
COMMENT_LINE $4B50 remember we use one bit now!
COMMENT_LINE $4B53 is the bit at the current position set?
COMMENT_LINE $4B61 load a new byte
COMMENT_LINE $4B71 bit position correct here
COMMENT_LINE $4B71 remember we use one bit now!
COMMENT_LINE $4B74 is the bit at the current position set?
COMMENT_LINE $4B82 load a new byte
COMMENT_LINE $4B92 bit position correct here
COMMENT_LINE $4B92 remember we use one bit now!
COMMENT_LINE $4B95 is the bit at the current position set?
COMMENT_LINE $4BA3 load a new byte
COMMENT_LINE $4BB3 bit position correct here
COMMENT_LINE $4BB3 remember we use one bit now!
COMMENT_LINE $4BB6 is the bit at the current position set?
COMMENT $4BC2 store register select byte
COMMENT $4BC4 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $4BC8 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $4BCC read sound chip status (?)
COMMENT $4BCE store data byte
COMMENT $4BD0 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $4BD4 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $4BD8 ;;;
COMMENT_LINE $4BD8 ; voice 2
COMMENT_LINE $4BD8 ;;;
COMMENT_LINE $4BD8 check voice 2, if next bit 0, than nothing changed in voice2
COMMENT_LINE $4BD8 check next bit, if 0, than amplitude is the same
COMMENT_LINE $4BD8 get 4 bits of amplitude from stream
COMMENT_LINE $4BD8 check if noise, when next bit is set, than noise
COMMENT $4BD8 load reg 7 shadow
COMMENT $0000 set bit 5 to 0
COMMENT $0000 set bit 5 to 1
COMMENT_LINE $0000 check if tone, when next bit is set, than noise
COMMENT $0000 set bit 2 to 0
COMMENT $0000 set bit 2 to 1
COMMENT_LINE $0000 sta      $C807                        ; and store the value to shadow
COMMENT_LINE $0000 check voice 2 low frequence, if next bit is one, = it
COMMENT_LINE $0000 get 8 bits of low freq from stream
COMMENT_LINE $0000 check voice 2 high frequency, if next bit is one, = it
COMMENT_LINE $0000 get 4 bits of low freq from stream
COMMENT_LINE $4BD8 last, check if noise data must be set
COMMENT_LINE $4BD8 get 5 bits of low freq from stream
COMMENT_LINE $4BD8 lda      $c807
COMMENT_LINE $4BD8 STORE_PSG  7
COMMENT_LINE $4BD9 ***************************************************************************
COMMENT $4BD9 piano
COMMENT $4BDD minestorm
COMMENT $4BE1 psychadelic :-), a missread address, but what the heck
COMMENT_LINE $4BE5 it sounds weird!!!
COMMENT $4BE5 well, another one of those
COMMENT $4BE9 video game beep
COMMENT $4BED organ with echo
COMMENT_LINE $4BF1 ***************************************************************************
COMMENT_LINE $4C03 ***************************************************************************
COMMENT $4C27 $FF is end marker for music
COMMENT_LINE $4C29 ***************************************************************************
COMMENT_LINE $4C3B ***************************************************************************
COMMENT $4C3B ADSR and twang address tables, in Vectrex ROM
COMMENT $4C43 ;;;;;;;
COMMENT $4C47 a 128 means the next byte is a note for the
COMMENT $4C4B next channel...
COMMENT $4C53 ;;;;;;;
COMMENT $4C63 ;;;;;;;
COMMENT $4C73 ;;;;;;;
COMMENT $4C81 ;;;;;;;
COMMENT $4C91 ;;;;;;;
COMMENT $4CA1 ;;;;;;;
COMMENT $4CB1 ;;;;;;;
COMMENT $4CB7 $FF is end marker for music
COMMENT_LINE $4CB9 (high byte set)
COMMENT_LINE $4CB9 ***************************************************************************
COMMENT_LINE $4CC3 ***************************************************************************
COMMENT_LINE $4CCD ***************************************************************************
COMMENT_LINE $4CDB ***************************************************************************
COMMENT_LINE $4CF5 ***************************************************************************
COMMENT_LINE $4D17 ***************************************************************************
COMMENT_LINE $4D17 entries following must be copied to vectrex ram...
COMMENT_LINE $4D17 copied or initialized
COMMENT_LINE $4D17 start of 'my ram'
COMMENT_LINE $4D17 ***************************************************************************
COMMENT $4D3A object
COMMENT $4D3C y_pos SCALE_FIRST_HOME
COMMENT $4D3D x_pos SCALE_FIRST_HOME
COMMENT $4D3E anim counter
COMMENT $4D3F object
COMMENT $4D41 y_pos SCALE_IN_HOME
COMMENT $4D42 x_pos SCALE_IN_HOME
COMMENT $4D43 anim counter
COMMENT $4D44 object
COMMENT $4D46 y_pos SCALE_IN_HOME
COMMENT $4D47 x_pos SCALE_IN_HOME
COMMENT $4D48 anim counter
COMMENT $4D49 object
COMMENT $4D4B y_pos SCALE_IN_HOME
COMMENT $4D4C x_pos SCALE_IN_HOME
COMMENT $4D4D anim counter
COMMENT $4D4E object
COMMENT $4D50 y_pos SCALE_IN_HOME
COMMENT $4D51 x_pos SCALE_IN_HOME
COMMENT_LINE $4D52 DB   0                    ; anim counter
COMMENT_LINE $4D52 DW   -1                   ; object
COMMENT_LINE $4D52 ***************************************************************************
COMMENT_LINE $4D52 one object:
COMMENT_LINE $4D52 DW   0 ; object
COMMENT_LINE $4D52 DB   0 ; y_pos
COMMENT_LINE $4D52 DB   0 ; x_pos
COMMENT_LINE $4D52 DB   0 ; anim counter
COMMENT_LINE $4D52 ***************************************************************************
COMMENT_LINE $4D52 ***************************************************************************
COMMENT_LINE $4D52 this file is part of vectrex frogger, written by Malban
COMMENT_LINE $4D52 in March-April 1998
COMMENT_LINE $4D52 all stuff contained here is public domain
COMMENT_LINE $4D52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4D52 this file contains the yankee doodle music for the game                   ;
COMMENT_LINE $4D52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4D52 Music data bytes:
COMMENT_LINE $4D52 Bits 0-5 = frequency
COMMENT_LINE $4D52 Bit 6 clear = tone
COMMENT_LINE $4D52 Bit 6 = = noise
COMMENT_LINE $4D52 Bit 7 = = next music data byte is for next channel
COMMENT_LINE $4D52 Bit 7 clear, play note with duration in next music data byte:
COMMENT_LINE $4D52 bits 0-5 = duration
COMMENT_LINE $4D52 bit 6 = unused
COMMENT_LINE $4D52 bit 7 = = end of music
COMMENT $4D52 ADSR and twang address tables, in Vectrex ROM
COMMENT $4D56 ;;;;;;;
COMMENT $4D58 first byte is a note, to be found
COMMENT $4D5A in vectrex rom, is a 64 byte table...
COMMENT $4D5C last byte is length of note
COMMENT $4D5E ;;;;;;;
COMMENT $4D6C ;;;;;;;
COMMENT $4D74 ;;;;;;;
COMMENT $4D82 ;;;;;;;
COMMENT $4D8E ;;;;;;;
COMMENT $4D92 a 128 means the next byte is a note for the
COMMENT $4D96 next channel...
COMMENT $4D9E ;;;;;;;
COMMENT $4DAE ;;;;;;;
COMMENT $4DBE ;;;;;;;
COMMENT $4DCC ;;;;;;;
COMMENT $4DDC ;;;;;;;
COMMENT $4DEC ;;;;;;;
COMMENT $4DFC ;;;;;;;
COMMENT $4E08 ;;;;;;;
COMMENT $4E17 ;;;;;;;
COMMENT $4E25 ;;;;;;;
COMMENT $4E34 ;;;;;;;
COMMENT $4E40 ;;;;;;;
COMMENT $4E4F ;;;;;;;
COMMENT $4E5F ;;;;;;;
COMMENT $4E6F ;;;;;;;
COMMENT $4E7B $FF is end marker for music
COMMENT_LINE $4E7D (high byte set) and end marker for
COMMENT_LINE $4E7D copy routine
COMMENT_LINE $4E7D ***************************************************************************
COMMENT_LINE $4E7D stupid assembler, these defines must be made after the above
COMMENT_LINE $4E7D labels
COMMENT_LINE $4E7D following are string offsets for the different deaths
COMMENT_LINE $4E7D these are the addresses used in the game
COMMENT_LINE $4E7D addresses which are copied have an underscore
COMMENT_LINE $4E7D addresses which are used - not -
COMMENT_LINE $4E7D first the scoring strings...
COMMENT_LINE $4E7D start of string
COMMENT_LINE $4E7D score string
COMMENT_LINE $4E7D score BCD number
COMMENT_LINE $4E7D level string
COMMENT_LINE $4E7D level BCD number
COMMENT_LINE $4E7D frogs string
COMMENT_LINE $4E7D no_frogs is a display ascii AND the counter for frogs per game
COMMENT_LINE $4E7D addresses of home objects, actually I think not used as standalones
COMMENT_LINE $4E7D allways calculates from the first...
COMMENT_LINE $4E7D here the music resides, dues to the roms method of playing
COMMENT_LINE $4E7D we need a copy in ram for different envelopes...
COMMENT_LINE $4E7D here the object list address resides...
COMMENT_LINE $4E7D and the bandlist
COMMENT_LINE $4E7D morphing uses ram occupied by the game, therefor only be used
COMMENT_LINE $4E7D as start, end or in between sequences
COMMENT_LINE $4E7D end by current_morph_vector_diffs + 2*MAX_VECTOR_MORPH
COMMENT_LINE $4E7D ***************************************************************************
RANGE $0000-$011A DP $D0
RANGE $011A-$012C DP $C8
RANGE $012C-$0136 DP $D0
RANGE $0136-$02B3 DP $C8
RANGE $02B3-$02C2 DP $D0
RANGE $02C2-$044B DP $C8
RANGE $044B-$045E DP $D0
RANGE $045E-$047C DP $C8
RANGE $047C-$048B DP $D0
RANGE $048B-$0495 DP $C8
RANGE $0495-$04C7 DP $D0
RANGE $04C7-$0632 DP $C8
RANGE $0632-$0C08 DP $D0
RANGE $0C08-$0C0E DP $C8
RANGE $0C0E-$0CD8 DP $D0
RANGE $0CD8-$0D3A DP $C8
RANGE $0D3A-$111A DP $D0
RANGE $111A-$11A7 DP $C8
RANGE $11A7-$11AD DP $D0
RANGE $11AD-$11D4 DP $C8
RANGE $11D4-$120B DP $D0
RANGE $120B-$1213 DP $C8
RANGE $1213-$127F DP $D0
RANGE $127F-$13FB DP $C8
RANGE $13FB-$1417 DP $D0
RANGE $1417-$1437 DP $C8
RANGE $1437-$14A9 DP $D0
RANGE $14A9-$14B1 DP $C8
RANGE $14B1-$151D DP $D0
RANGE $151D-$1526 DP $C8
RANGE $1530-$1538 DP $C8
RANGE $1538-$1559 DP $D0
RANGE $1559-$1589 DP $C8
RANGE $1589-$15E2 DP $D0
RANGE $15E2-$15EA DP $C8
RANGE $15EA-$1625 DP $D0
RANGE $1625-$1628 DP $C8
RANGE $1628-$162F DP $D0
RANGE $162F-$1658 DP $C8
RANGE $166A-$1672 DP $C8
RANGE $1672-$16BF DP $D0
RANGE $16BF-$16C7 DP $C8
RANGE $16C7-$172F DP $D0
RANGE $172F-$1760 DP $C8
RANGE $1760-$1848 DP $D0
RANGE $1848-$18B6 DP $C8
RANGE $18B6-$1952 DP $D0
RANGE $1952-$19A3 DP $C8
RANGE $19A3-$4E7B DP $D0
RANGE $0000-$000B DB_DATA
RANGE $000B-$000D DW_DATA
RANGE $000D-$002D DB_DATA
RANGE $002D-$002F CODE
RANGE $0030-$0A5E CODE
RANGE $0A5F-$1A7B CODE
RANGE $1A7B-$1E81 DB_DATA
RANGE $1E81-$1EB5 DW_DATA
RANGE $1EB5-$2152 DB_DATA
RANGE $2152-$2156 DW_DATA
RANGE $2156-$2158 DB_DATA
RANGE $2158-$215A DW_DATA
RANGE $215A-$215B DB_DATA
RANGE $215B-$215F DW_DATA
RANGE $215F-$2161 DB_DATA
RANGE $2161-$2163 DW_DATA
RANGE $2163-$2164 DB_DATA
RANGE $2164-$2168 DW_DATA
RANGE $2168-$216A DB_DATA
RANGE $216A-$216C DW_DATA
RANGE $216C-$216D DB_DATA
RANGE $216D-$2171 DW_DATA
RANGE $2171-$2173 DB_DATA
RANGE $2173-$2175 DW_DATA
RANGE $2175-$2176 DB_DATA
RANGE $2176-$217A DW_DATA
RANGE $217A-$217C DB_DATA
RANGE $217C-$217E DW_DATA
RANGE $217E-$217F DB_DATA
RANGE $217F-$2183 DW_DATA
RANGE $2183-$2185 DB_DATA
RANGE $2185-$2187 DW_DATA
RANGE $2187-$2188 DB_DATA
RANGE $2188-$218C DW_DATA
RANGE $218C-$218E DB_DATA
RANGE $218E-$2190 DW_DATA
RANGE $2190-$2191 DB_DATA
RANGE $2191-$2195 DW_DATA
RANGE $2195-$2197 DB_DATA
RANGE $2197-$2199 DW_DATA
RANGE $2199-$219A DB_DATA
RANGE $219A-$219E DW_DATA
RANGE $219E-$21A0 DB_DATA
RANGE $21A0-$21A2 DW_DATA
RANGE $21A2-$21A3 DB_DATA
RANGE $21A3-$21A7 DW_DATA
RANGE $21A7-$21A9 DB_DATA
RANGE $21A9-$21AB DW_DATA
RANGE $21AB-$21AC DB_DATA
RANGE $21AC-$21B0 DW_DATA
RANGE $21B0-$21B2 DB_DATA
RANGE $21B2-$21B4 DW_DATA
RANGE $21B4-$220B DB_DATA
RANGE $220B-$221B DW_DATA
RANGE $221B-$22D4 DB_DATA
RANGE $22D4-$22E4 DW_DATA
RANGE $22E4-$238A DB_DATA
RANGE $238A-$238C DW_DATA
RANGE $238C-$238E DB_DATA
RANGE $238E-$2390 DW_DATA
RANGE $2390-$23A6 DB_DATA
RANGE $23A6-$23A8 DW_DATA
RANGE $23A8-$23AA DB_DATA
RANGE $23AA-$23AC DW_DATA
RANGE $23AC-$23C2 DB_DATA
RANGE $23C2-$23C4 DW_DATA
RANGE $23C4-$23C6 DB_DATA
RANGE $23C6-$23C8 DW_DATA
RANGE $23C8-$23CD DB_DATA
RANGE $23CD-$23CF DW_DATA
RANGE $23CF-$23D1 DB_DATA
RANGE $23D1-$23D3 DW_DATA
RANGE $23D3-$23D8 DB_DATA
RANGE $23D8-$23DA DW_DATA
RANGE $23DA-$23DC DB_DATA
RANGE $23DC-$23DE DW_DATA
RANGE $23DE-$23E3 DB_DATA
RANGE $23E3-$23E5 DW_DATA
RANGE $23E5-$23E7 DB_DATA
RANGE $23E7-$23E9 DW_DATA
RANGE $23E9-$2427 DB_DATA
RANGE $2427-$2429 DW_DATA
RANGE $2429-$2430 DB_DATA
RANGE $2430-$2432 DW_DATA
RANGE $2432-$2434 DB_DATA
RANGE $2434-$2436 DW_DATA
RANGE $2436-$2439 DB_DATA
RANGE $2439-$243B DW_DATA
RANGE $243B-$244A DB_DATA
RANGE $244A-$244C DW_DATA
RANGE $244C-$244E DB_DATA
RANGE $244E-$2450 DW_DATA
RANGE $2450-$2453 DB_DATA
RANGE $2453-$2455 DW_DATA
RANGE $2455-$245E DB_DATA
RANGE $245E-$2460 DW_DATA
RANGE $2460-$2462 DB_DATA
RANGE $2462-$2464 DW_DATA
RANGE $2464-$2467 DB_DATA
RANGE $2467-$2469 DW_DATA
RANGE $2469-$247E DB_DATA
RANGE $247E-$2480 DW_DATA
RANGE $2480-$2482 DB_DATA
RANGE $2482-$2484 DW_DATA
RANGE $2484-$2487 DB_DATA
RANGE $2487-$2489 DW_DATA
RANGE $2489-$24A2 DB_DATA
RANGE $24A2-$24A4 DW_DATA
RANGE $24A4-$24A6 DB_DATA
RANGE $24A6-$24A8 DW_DATA
RANGE $24A8-$24AB DB_DATA
RANGE $24AB-$24AD DW_DATA
RANGE $24AD-$24BA DB_DATA
RANGE $24BA-$24BC DW_DATA
RANGE $24BC-$24BE DB_DATA
RANGE $24BE-$24C0 DW_DATA
RANGE $24C0-$24D8 DB_DATA
RANGE $24D8-$24DA DW_DATA
RANGE $24DA-$24DC DB_DATA
RANGE $24DC-$24DE DW_DATA
RANGE $24DE-$24F8 DB_DATA
RANGE $24F8-$24FA DW_DATA
RANGE $24FA-$24FC DB_DATA
RANGE $24FC-$24FE DW_DATA
RANGE $24FE-$2518 DB_DATA
RANGE $2518-$251A DW_DATA
RANGE $251A-$251C DB_DATA
RANGE $251C-$251E DW_DATA
RANGE $251E-$2523 DB_DATA
RANGE $2523-$2525 DW_DATA
RANGE $2525-$2527 DB_DATA
RANGE $2527-$2529 DW_DATA
RANGE $2529-$252E DB_DATA
RANGE $252E-$2530 DW_DATA
RANGE $2530-$254B DB_DATA
RANGE $254B-$254D DW_DATA
RANGE $254D-$254F DB_DATA
RANGE $254F-$2551 DW_DATA
RANGE $2551-$2556 DB_DATA
RANGE $2556-$2558 DW_DATA
RANGE $2558-$2573 DB_DATA
RANGE $2573-$2575 DW_DATA
RANGE $2575-$2577 DB_DATA
RANGE $2577-$2579 DW_DATA
RANGE $2579-$257E DB_DATA
RANGE $257E-$2580 DW_DATA
RANGE $2580-$2599 DB_DATA
RANGE $2599-$259B DW_DATA
RANGE $259B-$259D DB_DATA
RANGE $259D-$259F DW_DATA
RANGE $259F-$25A4 DB_DATA
RANGE $25A4-$25A6 DW_DATA
RANGE $25A6-$25A8 DB_DATA
RANGE $25A8-$25AA DW_DATA
RANGE $25AA-$25AF DB_DATA
RANGE $25AF-$25B1 DW_DATA
RANGE $25B1-$25CA DB_DATA
RANGE $25CA-$25CC DW_DATA
RANGE $25CC-$25CE DB_DATA
RANGE $25CE-$25D0 DW_DATA
RANGE $25D0-$25D5 DB_DATA
RANGE $25D5-$25D7 DW_DATA
RANGE $25D7-$25F0 DB_DATA
RANGE $25F0-$25F2 DW_DATA
RANGE $25F2-$25F4 DB_DATA
RANGE $25F4-$25F6 DW_DATA
RANGE $25F6-$25FB DB_DATA
RANGE $25FB-$25FD DW_DATA
RANGE $25FD-$2616 DB_DATA
RANGE $2616-$2618 DW_DATA
RANGE $2618-$261A DB_DATA
RANGE $261A-$261C DW_DATA
RANGE $261C-$2621 DB_DATA
RANGE $2621-$2623 DW_DATA
RANGE $2623-$263C DB_DATA
RANGE $263C-$263E DW_DATA
RANGE $263E-$2640 DB_DATA
RANGE $2640-$2642 DW_DATA
RANGE $2642-$2647 DB_DATA
RANGE $2647-$2649 DW_DATA
RANGE $2649-$2660 DB_DATA
RANGE $2660-$2662 DW_DATA
RANGE $2662-$2664 DB_DATA
RANGE $2664-$2666 DW_DATA
RANGE $2666-$266B DB_DATA
RANGE $266B-$266D DW_DATA
RANGE $266D-$2684 DB_DATA
RANGE $2684-$2686 DW_DATA
RANGE $2686-$2688 DB_DATA
RANGE $2688-$268A DW_DATA
RANGE $268A-$268F DB_DATA
RANGE $268F-$2691 DW_DATA
RANGE $2691-$26A8 DB_DATA
RANGE $26A8-$26AA DW_DATA
RANGE $26AA-$26AC DB_DATA
RANGE $26AC-$26AE DW_DATA
RANGE $26AE-$26B3 DB_DATA
RANGE $26B3-$26B5 DW_DATA
RANGE $26B5-$26B7 DB_DATA
RANGE $26B7-$26B9 DW_DATA
RANGE $26B9-$26BE DB_DATA
RANGE $26BE-$26C0 DW_DATA
RANGE $26C0-$26C2 DB_DATA
RANGE $26C2-$26C4 DW_DATA
RANGE $26C4-$26C9 DB_DATA
RANGE $26C9-$26CB DW_DATA
RANGE $26CB-$26CD DB_DATA
RANGE $26CD-$26CF DW_DATA
RANGE $26CF-$26D4 DB_DATA
RANGE $26D4-$26D6 DW_DATA
RANGE $26D6-$26D8 DB_DATA
RANGE $26D8-$26DA DW_DATA
RANGE $26DA-$26DF DB_DATA
RANGE $26DF-$26E1 DW_DATA
RANGE $26E1-$26E3 DB_DATA
RANGE $26E3-$26E5 DW_DATA
RANGE $26E5-$26EA DB_DATA
RANGE $26EA-$26EC DW_DATA
RANGE $26EC-$2703 DB_DATA
RANGE $2703-$2705 DW_DATA
RANGE $2705-$2707 DB_DATA
RANGE $2707-$2709 DW_DATA
RANGE $2709-$270E DB_DATA
RANGE $270E-$2710 DW_DATA
RANGE $2710-$2727 DB_DATA
RANGE $2727-$2729 DW_DATA
RANGE $2729-$272B DB_DATA
RANGE $272B-$272D DW_DATA
RANGE $272D-$2732 DB_DATA
RANGE $2732-$2734 DW_DATA
RANGE $2734-$274B DB_DATA
RANGE $274B-$274D DW_DATA
RANGE $274D-$274F DB_DATA
RANGE $274F-$2751 DW_DATA
RANGE $2751-$2756 DB_DATA
RANGE $2756-$2758 DW_DATA
RANGE $2758-$275A DB_DATA
RANGE $275A-$275C DW_DATA
RANGE $275C-$2761 DB_DATA
RANGE $2761-$2763 DW_DATA
RANGE $2763-$2765 DB_DATA
RANGE $2765-$2767 DW_DATA
RANGE $2767-$276C DB_DATA
RANGE $276C-$276E DW_DATA
RANGE $276E-$2770 DB_DATA
RANGE $2770-$2772 DW_DATA
RANGE $2772-$2777 DB_DATA
RANGE $2777-$2779 DW_DATA
RANGE $2779-$277B DB_DATA
RANGE $277B-$277D DW_DATA
RANGE $277D-$2782 DB_DATA
RANGE $2782-$2784 DW_DATA
RANGE $2784-$2786 DB_DATA
RANGE $2786-$2788 DW_DATA
RANGE $2788-$278D DB_DATA
RANGE $278D-$278F DW_DATA
RANGE $278F-$27B4 DB_DATA
RANGE $27B4-$27B6 DW_DATA
RANGE $27B6-$27B8 DB_DATA
RANGE $27B8-$27BA DW_DATA
RANGE $27BA-$27BF DB_DATA
RANGE $27BF-$27C1 DW_DATA
RANGE $27C1-$27E6 DB_DATA
RANGE $27E6-$27E8 DW_DATA
RANGE $27E8-$27EA DB_DATA
RANGE $27EA-$27EC DW_DATA
RANGE $27EC-$27F1 DB_DATA
RANGE $27F1-$27F3 DW_DATA
RANGE $27F3-$2818 DB_DATA
RANGE $2818-$281A DW_DATA
RANGE $281A-$281C DB_DATA
RANGE $281C-$281E DW_DATA
RANGE $281E-$2823 DB_DATA
RANGE $2823-$2825 DW_DATA
RANGE $2825-$2827 DB_DATA
RANGE $2827-$2829 DW_DATA
RANGE $2829-$282E DB_DATA
RANGE $282E-$2830 DW_DATA
RANGE $2830-$2832 DB_DATA
RANGE $2832-$2834 DW_DATA
RANGE $2834-$2839 DB_DATA
RANGE $2839-$283B DW_DATA
RANGE $283B-$283D DB_DATA
RANGE $283D-$283F DW_DATA
RANGE $283F-$2844 DB_DATA
RANGE $2844-$2846 DW_DATA
RANGE $2846-$2848 DB_DATA
RANGE $2848-$284A DW_DATA
RANGE $284A-$284F DB_DATA
RANGE $284F-$2851 DW_DATA
RANGE $2851-$2853 DB_DATA
RANGE $2853-$2855 DW_DATA
RANGE $2855-$285A DB_DATA
RANGE $285A-$285C DW_DATA
RANGE $285C-$288B DB_DATA
RANGE $288B-$288D DW_DATA
RANGE $288D-$288F DB_DATA
RANGE $288F-$2891 DW_DATA
RANGE $2891-$2896 DB_DATA
RANGE $2896-$2898 DW_DATA
RANGE $2898-$28C7 DB_DATA
RANGE $28C7-$28C9 DW_DATA
RANGE $28C9-$28CB DB_DATA
RANGE $28CB-$28CD DW_DATA
RANGE $28CD-$28D2 DB_DATA
RANGE $28D2-$28D4 DW_DATA
RANGE $28D4-$2903 DB_DATA
RANGE $2903-$2905 DW_DATA
RANGE $2905-$2907 DB_DATA
RANGE $2907-$2909 DW_DATA
RANGE $2909-$290E DB_DATA
RANGE $290E-$2910 DW_DATA
RANGE $2910-$293F DB_DATA
RANGE $293F-$2941 DW_DATA
RANGE $2941-$2943 DB_DATA
RANGE $2943-$2945 DW_DATA
RANGE $2945-$2949 DB_DATA
RANGE $2949-$294B DW_DATA
RANGE $294B-$2974 DB_DATA
RANGE $2974-$2976 DW_DATA
RANGE $2976-$2978 DB_DATA
RANGE $2978-$297A DW_DATA
RANGE $297A-$297E DB_DATA
RANGE $297E-$2980 DW_DATA
RANGE $2980-$29A9 DB_DATA
RANGE $29A9-$29AB DW_DATA
RANGE $29AB-$29AD DB_DATA
RANGE $29AD-$29AF DW_DATA
RANGE $29AF-$29B3 DB_DATA
RANGE $29B3-$29B5 DW_DATA
RANGE $29B5-$29DE DB_DATA
RANGE $29DE-$29E0 DW_DATA
RANGE $29E0-$29E2 DB_DATA
RANGE $29E2-$29E4 DW_DATA
RANGE $29E4-$29E9 DB_DATA
RANGE $29E9-$29EB DW_DATA
RANGE $29EB-$29ED DB_DATA
RANGE $29ED-$29EF DW_DATA
RANGE $29EF-$29F4 DB_DATA
RANGE $29F4-$29F6 DW_DATA
RANGE $29F6-$29F8 DB_DATA
RANGE $29F8-$29FA DW_DATA
RANGE $29FA-$29FF DB_DATA
RANGE $29FF-$2A01 DW_DATA
RANGE $2A01-$2A03 DB_DATA
RANGE $2A03-$2A05 DW_DATA
RANGE $2A05-$2A0A DB_DATA
RANGE $2A0A-$2A0C DW_DATA
RANGE $2A0C-$2A0E DB_DATA
RANGE $2A0E-$2A10 DW_DATA
RANGE $2A10-$2A15 DB_DATA
RANGE $2A15-$2A17 DW_DATA
RANGE $2A17-$2A19 DB_DATA
RANGE $2A19-$2A1B DW_DATA
RANGE $2A1B-$2A20 DB_DATA
RANGE $2A20-$2A22 DW_DATA
RANGE $2A22-$2A24 DB_DATA
RANGE $2A24-$2A26 DW_DATA
RANGE $2A26-$2A2B DB_DATA
RANGE $2A2B-$2A2D DW_DATA
RANGE $2A2D-$2A2F DB_DATA
RANGE $2A2F-$2A31 DW_DATA
RANGE $2A31-$2A36 DB_DATA
RANGE $2A36-$2A38 DW_DATA
RANGE $2A38-$2A3A DB_DATA
RANGE $2A3A-$2A3C DW_DATA
RANGE $2A3C-$2A41 DB_DATA
RANGE $2A41-$2A43 DW_DATA
RANGE $2A43-$2A45 DB_DATA
RANGE $2A45-$2A47 DW_DATA
RANGE $2A47-$2A4C DB_DATA
RANGE $2A4C-$2A4E DW_DATA
RANGE $2A4E-$2A67 DB_DATA
RANGE $2A67-$2A69 DW_DATA
RANGE $2A69-$2A6B DB_DATA
RANGE $2A6B-$2A6D DW_DATA
RANGE $2A6D-$2A72 DB_DATA
RANGE $2A72-$2A74 DW_DATA
RANGE $2A74-$2A8D DB_DATA
RANGE $2A8D-$2A8F DW_DATA
RANGE $2A8F-$2A91 DB_DATA
RANGE $2A91-$2A93 DW_DATA
RANGE $2A93-$2A98 DB_DATA
RANGE $2A98-$2A9A DW_DATA
RANGE $2A9A-$2AB3 DB_DATA
RANGE $2AB3-$2AB5 DW_DATA
RANGE $2AB5-$2AB7 DB_DATA
RANGE $2AB7-$2AB9 DW_DATA
RANGE $2AB9-$2ABE DB_DATA
RANGE $2ABE-$2AC0 DW_DATA
RANGE $2AC0-$2AD9 DB_DATA
RANGE $2AD9-$2ADB DW_DATA
RANGE $2ADB-$2ADD DB_DATA
RANGE $2ADD-$2ADF DW_DATA
RANGE $2ADF-$2AE4 DB_DATA
RANGE $2AE4-$2AE6 DW_DATA
RANGE $2AE6-$2AE8 DB_DATA
RANGE $2AE8-$2AEA DW_DATA
RANGE $2AEA-$2AEF DB_DATA
RANGE $2AEF-$2AF1 DW_DATA
RANGE $2AF1-$2AF3 DB_DATA
RANGE $2AF3-$2AF5 DW_DATA
RANGE $2AF5-$2AFA DB_DATA
RANGE $2AFA-$2AFC DW_DATA
RANGE $2AFC-$2AFE DB_DATA
RANGE $2AFE-$2B00 DW_DATA
RANGE $2B00-$2B05 DB_DATA
RANGE $2B05-$2B07 DW_DATA
RANGE $2B07-$2B09 DB_DATA
RANGE $2B09-$2B0B DW_DATA
RANGE $2B0B-$2B10 DB_DATA
RANGE $2B10-$2B12 DW_DATA
RANGE $2B12-$2B14 DB_DATA
RANGE $2B14-$2B16 DW_DATA
RANGE $2B16-$2B1B DB_DATA
RANGE $2B1B-$2B1D DW_DATA
RANGE $2B1D-$2B1F DB_DATA
RANGE $2B1F-$2B21 DW_DATA
RANGE $2B21-$2B26 DB_DATA
RANGE $2B26-$2B28 DW_DATA
RANGE $2B28-$2B2A DB_DATA
RANGE $2B2A-$2B2C DW_DATA
RANGE $2B2C-$2B31 DB_DATA
RANGE $2B31-$2B33 DW_DATA
RANGE $2B33-$2B35 DB_DATA
RANGE $2B35-$2B37 DW_DATA
RANGE $2B37-$2B3C DB_DATA
RANGE $2B3C-$2B3E DW_DATA
RANGE $2B3E-$2B55 DB_DATA
RANGE $2B55-$2B57 DW_DATA
RANGE $2B57-$2B59 DB_DATA
RANGE $2B59-$2B5B DW_DATA
RANGE $2B5B-$2B5F DB_DATA
RANGE $2B5F-$2B61 DW_DATA
RANGE $2B61-$2B78 DB_DATA
RANGE $2B78-$2B7A DW_DATA
RANGE $2B7A-$2B7C DB_DATA
RANGE $2B7C-$2B7E DW_DATA
RANGE $2B7E-$2B83 DB_DATA
RANGE $2B83-$2B85 DW_DATA
RANGE $2B85-$2B9C DB_DATA
RANGE $2B9C-$2B9E DW_DATA
RANGE $2B9E-$2BA0 DB_DATA
RANGE $2BA0-$2BA2 DW_DATA
RANGE $2BA2-$2BA7 DB_DATA
RANGE $2BA7-$2BA9 DW_DATA
RANGE $2BA9-$2BC0 DB_DATA
RANGE $2BC0-$2BC2 DW_DATA
RANGE $2BC2-$2BC4 DB_DATA
RANGE $2BC4-$2BC6 DW_DATA
RANGE $2BC6-$2BCB DB_DATA
RANGE $2BCB-$2BCD DW_DATA
RANGE $2BCD-$2BCF DB_DATA
RANGE $2BCF-$2BD1 DW_DATA
RANGE $2BD1-$2BD6 DB_DATA
RANGE $2BD6-$2BD8 DW_DATA
RANGE $2BD8-$2BDA DB_DATA
RANGE $2BDA-$2BDC DW_DATA
RANGE $2BDC-$2BE1 DB_DATA
RANGE $2BE1-$2BE3 DW_DATA
RANGE $2BE3-$2BFA DB_DATA
RANGE $2BFA-$2BFC DW_DATA
RANGE $2BFC-$2BFE DB_DATA
RANGE $2BFE-$2C00 DW_DATA
RANGE $2C00-$2C05 DB_DATA
RANGE $2C05-$2C07 DW_DATA
RANGE $2C07-$2C1E DB_DATA
RANGE $2C1E-$2C20 DW_DATA
RANGE $2C20-$2C22 DB_DATA
RANGE $2C22-$2C24 DW_DATA
RANGE $2C24-$2C29 DB_DATA
RANGE $2C29-$2C2B DW_DATA
RANGE $2C2B-$2C42 DB_DATA
RANGE $2C42-$2C44 DW_DATA
RANGE $2C44-$2C46 DB_DATA
RANGE $2C46-$2C48 DW_DATA
RANGE $2C48-$2C4D DB_DATA
RANGE $2C4D-$2C4F DW_DATA
RANGE $2C4F-$2C66 DB_DATA
RANGE $2C66-$2C68 DW_DATA
RANGE $2C68-$2C6A DB_DATA
RANGE $2C6A-$2C6C DW_DATA
RANGE $2C6C-$2C71 DB_DATA
RANGE $2C71-$2C73 DW_DATA
RANGE $2C73-$2C75 DB_DATA
RANGE $2C75-$2C77 DW_DATA
RANGE $2C77-$2C7C DB_DATA
RANGE $2C7C-$2C7E DW_DATA
RANGE $2C7E-$2C80 DB_DATA
RANGE $2C80-$2C82 DW_DATA
RANGE $2C82-$2C87 DB_DATA
RANGE $2C87-$2C89 DW_DATA
RANGE $2C89-$2C8B DB_DATA
RANGE $2C8B-$2C8D DW_DATA
RANGE $2C8D-$2C92 DB_DATA
RANGE $2C92-$2C94 DW_DATA
RANGE $2C94-$2C96 DB_DATA
RANGE $2C96-$2C98 DW_DATA
RANGE $2C98-$2C9D DB_DATA
RANGE $2C9D-$2C9F DW_DATA
RANGE $2C9F-$2CA1 DB_DATA
RANGE $2CA1-$2CA3 DW_DATA
RANGE $2CA3-$2CA8 DB_DATA
RANGE $2CA8-$2CAA DW_DATA
RANGE $2CAA-$2CAC DB_DATA
RANGE $2CAC-$2CAE DW_DATA
RANGE $2CAE-$2CB3 DB_DATA
RANGE $2CB3-$2CB5 DW_DATA
RANGE $2CB5-$2CB7 DB_DATA
RANGE $2CB7-$2CB9 DW_DATA
RANGE $2CB9-$2CBE DB_DATA
RANGE $2CBE-$2CC0 DW_DATA
RANGE $2CC0-$2CC2 DB_DATA
RANGE $2CC2-$2CC4 DW_DATA
RANGE $2CC4-$2CC9 DB_DATA
RANGE $2CC9-$2CCB DW_DATA
RANGE $2CCB-$2CCD DB_DATA
RANGE $2CCD-$2CCF DW_DATA
RANGE $2CCF-$2CD4 DB_DATA
RANGE $2CD4-$2CD6 DW_DATA
RANGE $2CD6-$2CD8 DB_DATA
RANGE $2CD8-$2CDA DW_DATA
RANGE $2CDA-$2CDF DB_DATA
RANGE $2CDF-$2CE1 DW_DATA
RANGE $2CE1-$2CE3 DB_DATA
RANGE $2CE3-$2CE5 DW_DATA
RANGE $2CE5-$2CEA DB_DATA
RANGE $2CEA-$2CEC DW_DATA
RANGE $2CEC-$2CEE DB_DATA
RANGE $2CEE-$2CF0 DW_DATA
RANGE $2CF0-$2CF5 DB_DATA
RANGE $2CF5-$2CF7 DW_DATA
RANGE $2CF7-$2CF9 DB_DATA
RANGE $2CF9-$2CFB DW_DATA
RANGE $2CFB-$2D00 DB_DATA
RANGE $2D00-$2D02 DW_DATA
RANGE $2D02-$2D04 DB_DATA
RANGE $2D04-$2D06 DW_DATA
RANGE $2D06-$2D0B DB_DATA
RANGE $2D0B-$2D0D DW_DATA
RANGE $2D0D-$2D0F DB_DATA
RANGE $2D0F-$2D11 DW_DATA
RANGE $2D11-$2D16 DB_DATA
RANGE $2D16-$2D18 DW_DATA
RANGE $2D18-$2D1A DB_DATA
RANGE $2D1A-$2D1C DW_DATA
RANGE $2D1C-$2D21 DB_DATA
RANGE $2D21-$2D23 DW_DATA
RANGE $2D23-$2D25 DB_DATA
RANGE $2D25-$2D27 DW_DATA
RANGE $2D27-$2D2C DB_DATA
RANGE $2D2C-$2D2E DW_DATA
RANGE $2D2E-$2D30 DB_DATA
RANGE $2D30-$2D32 DW_DATA
RANGE $2D32-$2D37 DB_DATA
RANGE $2D37-$2D39 DW_DATA
RANGE $2D39-$2D3B DB_DATA
RANGE $2D3B-$2D3D DW_DATA
RANGE $2D3D-$2D42 DB_DATA
RANGE $2D42-$2D44 DW_DATA
RANGE $2D44-$2D46 DB_DATA
RANGE $2D46-$2D48 DW_DATA
RANGE $2D48-$2D4D DB_DATA
RANGE $2D4D-$2D4F DW_DATA
RANGE $2D4F-$2D51 DB_DATA
RANGE $2D51-$2D53 DW_DATA
RANGE $2D53-$2D58 DB_DATA
RANGE $2D58-$2D5A DW_DATA
RANGE $2D5A-$2D5C DB_DATA
RANGE $2D5C-$2D5E DW_DATA
RANGE $2D5E-$2D63 DB_DATA
RANGE $2D63-$2D65 DW_DATA
RANGE $2D65-$2D67 DB_DATA
RANGE $2D67-$2D69 DW_DATA
RANGE $2D69-$2D6E DB_DATA
RANGE $2D6E-$2D70 DW_DATA
RANGE $2D70-$2D72 DB_DATA
RANGE $2D72-$2D74 DW_DATA
RANGE $2D74-$2D79 DB_DATA
RANGE $2D79-$2D7B DW_DATA
RANGE $2D7B-$2D7D DB_DATA
RANGE $2D7D-$2D7F DW_DATA
RANGE $2D7F-$2D84 DB_DATA
RANGE $2D84-$2D86 DW_DATA
RANGE $2D86-$2D88 DB_DATA
RANGE $2D88-$2D8A DW_DATA
RANGE $2D8A-$2D8F DB_DATA
RANGE $2D8F-$2D91 DW_DATA
RANGE $2D91-$2DA8 DB_DATA
RANGE $2DA8-$2DAA DW_DATA
RANGE $2DAA-$2DAC DB_DATA
RANGE $2DAC-$2DAE DW_DATA
RANGE $2DAE-$2DB3 DB_DATA
RANGE $2DB3-$2DB5 DW_DATA
RANGE $2DB5-$2DD0 DB_DATA
RANGE $2DD0-$2DD2 DW_DATA
RANGE $2DD2-$2DD4 DB_DATA
RANGE $2DD4-$2DD6 DW_DATA
RANGE $2DD6-$2DDB DB_DATA
RANGE $2DDB-$2DDD DW_DATA
RANGE $2DDD-$2DF8 DB_DATA
RANGE $2DF8-$2DFA DW_DATA
RANGE $2DFA-$2DFC DB_DATA
RANGE $2DFC-$2DFE DW_DATA
RANGE $2DFE-$2E03 DB_DATA
RANGE $2E03-$2E05 DW_DATA
RANGE $2E05-$2E1C DB_DATA
RANGE $2E1C-$2E1E DW_DATA
RANGE $2E1E-$2E20 DB_DATA
RANGE $2E20-$2E22 DW_DATA
RANGE $2E22-$2E27 DB_DATA
RANGE $2E27-$2E29 DW_DATA
RANGE $2E29-$2E44 DB_DATA
RANGE $2E44-$2E46 DW_DATA
RANGE $2E46-$2E48 DB_DATA
RANGE $2E48-$2E4A DW_DATA
RANGE $2E4A-$2E4F DB_DATA
RANGE $2E4F-$2E51 DW_DATA
RANGE $2E51-$2E6C DB_DATA
RANGE $2E6C-$2E6E DW_DATA
RANGE $2E6E-$2E70 DB_DATA
RANGE $2E70-$2E72 DW_DATA
RANGE $2E72-$2E77 DB_DATA
RANGE $2E77-$2E79 DW_DATA
RANGE $2E79-$2E7B DB_DATA
RANGE $2E7B-$2E7D DW_DATA
RANGE $2E7D-$2E82 DB_DATA
RANGE $2E82-$2E84 DW_DATA
RANGE $2E84-$2E86 DB_DATA
RANGE $2E86-$2E88 DW_DATA
RANGE $2E88-$2E8D DB_DATA
RANGE $2E8D-$2E8F DW_DATA
RANGE $2E8F-$2E91 DB_DATA
RANGE $2E91-$2E93 DW_DATA
RANGE $2E93-$2E98 DB_DATA
RANGE $2E98-$2E9A DW_DATA
RANGE $2E9A-$2E9C DB_DATA
RANGE $2E9C-$2E9E DW_DATA
RANGE $2E9E-$2EA3 DB_DATA
RANGE $2EA3-$2EA5 DW_DATA
RANGE $2EA5-$2EA7 DB_DATA
RANGE $2EA7-$2EA9 DW_DATA
RANGE $2EA9-$2EAE DB_DATA
RANGE $2EAE-$2EB0 DW_DATA
RANGE $2EB0-$2EB2 DB_DATA
RANGE $2EB2-$2EB4 DW_DATA
RANGE $2EB4-$2EB9 DB_DATA
RANGE $2EB9-$2EBB DW_DATA
RANGE $2EBB-$2EBD DB_DATA
RANGE $2EBD-$2EBF DW_DATA
RANGE $2EBF-$2EC3 DB_DATA
RANGE $2EC3-$2EC5 DW_DATA
RANGE $2EC5-$2EC6 DB_DATA
RANGE $2EC6-$2EC8 DW_DATA
RANGE $2EC8-$2ECA DB_DATA
RANGE $2ECA-$2ECC DW_DATA
RANGE $2ECC-$2ED0 DB_DATA
RANGE $2ED0-$2ED2 DW_DATA
RANGE $2ED2-$2ED3 DB_DATA
RANGE $2ED3-$2ED5 DW_DATA
RANGE $2ED5-$2ED7 DB_DATA
RANGE $2ED7-$2ED9 DW_DATA
RANGE $2ED9-$2EDD DB_DATA
RANGE $2EDD-$2EDF DW_DATA
RANGE $2EDF-$2EE0 DB_DATA
RANGE $2EE0-$2EE2 DW_DATA
RANGE $2EE2-$2EE4 DB_DATA
RANGE $2EE4-$2EE6 DW_DATA
RANGE $2EE6-$2EEA DB_DATA
RANGE $2EEA-$2EEC DW_DATA
RANGE $2EEC-$2EED DB_DATA
RANGE $2EED-$2EEF DW_DATA
RANGE $2EEF-$2EF1 DB_DATA
RANGE $2EF1-$2EF3 DW_DATA
RANGE $2EF3-$2EF7 DB_DATA
RANGE $2EF7-$2EF9 DW_DATA
RANGE $2EF9-$2EFA DB_DATA
RANGE $2EFA-$2EFC DW_DATA
RANGE $2EFC-$2EFE DB_DATA
RANGE $2EFE-$2F00 DW_DATA
RANGE $2F00-$2F04 DB_DATA
RANGE $2F04-$2F06 DW_DATA
RANGE $2F06-$2F07 DB_DATA
RANGE $2F07-$2F09 DW_DATA
RANGE $2F09-$2F0B DB_DATA
RANGE $2F0B-$2F0D DW_DATA
RANGE $2F0D-$2F11 DB_DATA
RANGE $2F11-$2F13 DW_DATA
RANGE $2F13-$2F14 DB_DATA
RANGE $2F14-$2F16 DW_DATA
RANGE $2F16-$2F18 DB_DATA
RANGE $2F18-$2F1A DW_DATA
RANGE $2F1A-$2F1E DB_DATA
RANGE $2F1E-$2F20 DW_DATA
RANGE $2F20-$2F21 DB_DATA
RANGE $2F21-$2F23 DW_DATA
RANGE $2F23-$2F25 DB_DATA
RANGE $2F25-$2F27 DW_DATA
RANGE $2F27-$2F2B DB_DATA
RANGE $2F2B-$2F2D DW_DATA
RANGE $2F2D-$2F2E DB_DATA
RANGE $2F2E-$2F30 DW_DATA
RANGE $2F30-$2F32 DB_DATA
RANGE $2F32-$2F34 DW_DATA
RANGE $2F34-$2F38 DB_DATA
RANGE $2F38-$2F3A DW_DATA
RANGE $2F3A-$2F3B DB_DATA
RANGE $2F3B-$2F3D DW_DATA
RANGE $2F3D-$2F3F DB_DATA
RANGE $2F3F-$2F41 DW_DATA
RANGE $2F41-$2F45 DB_DATA
RANGE $2F45-$2F47 DW_DATA
RANGE $2F47-$2F48 DB_DATA
RANGE $2F48-$2F4A DW_DATA
RANGE $2F4A-$2F4C DB_DATA
RANGE $2F4C-$2F4E DW_DATA
RANGE $2F4E-$2F52 DB_DATA
RANGE $2F52-$2F54 DW_DATA
RANGE $2F54-$2F55 DB_DATA
RANGE $2F55-$2F57 DW_DATA
RANGE $2F57-$2F6A DB_DATA
RANGE $2F6A-$2F6C DW_DATA
RANGE $2F6C-$2F7F DB_DATA
RANGE $2F7F-$2F81 DW_DATA
RANGE $2F81-$2F8E DB_DATA
RANGE $2F8E-$2F90 DW_DATA
RANGE $2F90-$2FAD DB_DATA
RANGE $2FAD-$2FAF DW_DATA
RANGE $2FAF-$2FC2 DB_DATA
RANGE $2FC2-$2FC4 DW_DATA
RANGE $2FC4-$2FCD DB_DATA
RANGE $2FCD-$2FCF DW_DATA
RANGE $2FCF-$2FD1 DB_DATA
RANGE $2FD1-$2FD3 DW_DATA
RANGE $2FD3-$2FD7 DB_DATA
RANGE $2FD7-$2FD9 DW_DATA
RANGE $2FD9-$2FDA DB_DATA
RANGE $2FDA-$2FDC DW_DATA
RANGE $2FDC-$2FDE DB_DATA
RANGE $2FDE-$2FE0 DW_DATA
RANGE $2FE0-$2FE4 DB_DATA
RANGE $2FE4-$2FE6 DW_DATA
RANGE $2FE6-$2FE7 DB_DATA
RANGE $2FE7-$2FE9 DW_DATA
RANGE $2FE9-$2FEB DB_DATA
RANGE $2FEB-$2FED DW_DATA
RANGE $2FED-$2FF1 DB_DATA
RANGE $2FF1-$2FF3 DW_DATA
RANGE $2FF3-$2FF4 DB_DATA
RANGE $2FF4-$2FF6 DW_DATA
RANGE $2FF6-$2FF8 DB_DATA
RANGE $2FF8-$2FFA DW_DATA
RANGE $2FFA-$2FFE DB_DATA
RANGE $2FFE-$3000 DW_DATA
RANGE $3000-$3001 DB_DATA
RANGE $3001-$3003 DW_DATA
RANGE $3003-$3005 DB_DATA
RANGE $3005-$3007 DW_DATA
RANGE $3007-$300B DB_DATA
RANGE $300B-$300D DW_DATA
RANGE $300D-$300E DB_DATA
RANGE $300E-$3010 DW_DATA
RANGE $3010-$3012 DB_DATA
RANGE $3012-$3014 DW_DATA
RANGE $3014-$3018 DB_DATA
RANGE $3018-$301A DW_DATA
RANGE $301A-$301B DB_DATA
RANGE $301B-$301D DW_DATA
RANGE $301D-$301F DB_DATA
RANGE $301F-$3021 DW_DATA
RANGE $3021-$3025 DB_DATA
RANGE $3025-$3027 DW_DATA
RANGE $3027-$3028 DB_DATA
RANGE $3028-$302A DW_DATA
RANGE $302A-$302C DB_DATA
RANGE $302C-$302E DW_DATA
RANGE $302E-$3032 DB_DATA
RANGE $3032-$3034 DW_DATA
RANGE $3034-$3035 DB_DATA
RANGE $3035-$3037 DW_DATA
RANGE $3037-$3039 DB_DATA
RANGE $3039-$303B DW_DATA
RANGE $303B-$303F DB_DATA
RANGE $303F-$3041 DW_DATA
RANGE $3041-$3042 DB_DATA
RANGE $3042-$3044 DW_DATA
RANGE $3044-$3046 DB_DATA
RANGE $3046-$3048 DW_DATA
RANGE $3048-$304C DB_DATA
RANGE $304C-$304E DW_DATA
RANGE $304E-$304F DB_DATA
RANGE $304F-$3051 DW_DATA
RANGE $3051-$3053 DB_DATA
RANGE $3053-$3055 DW_DATA
RANGE $3055-$3059 DB_DATA
RANGE $3059-$305B DW_DATA
RANGE $305B-$305C DB_DATA
RANGE $305C-$305E DW_DATA
RANGE $305E-$3060 DB_DATA
RANGE $3060-$3062 DW_DATA
RANGE $3062-$3066 DB_DATA
RANGE $3066-$3068 DW_DATA
RANGE $3068-$3069 DB_DATA
RANGE $3069-$306B DW_DATA
RANGE $306B-$306D DB_DATA
RANGE $306D-$306F DW_DATA
RANGE $306F-$3073 DB_DATA
RANGE $3073-$3075 DW_DATA
RANGE $3075-$3076 DB_DATA
RANGE $3076-$3078 DW_DATA
RANGE $3078-$307A DB_DATA
RANGE $307A-$307C DW_DATA
RANGE $307C-$3080 DB_DATA
RANGE $3080-$3082 DW_DATA
RANGE $3082-$3083 DB_DATA
RANGE $3083-$3085 DW_DATA
RANGE $3085-$3087 DB_DATA
RANGE $3087-$3089 DW_DATA
RANGE $3089-$308D DB_DATA
RANGE $308D-$308F DW_DATA
RANGE $308F-$3090 DB_DATA
RANGE $3090-$3092 DW_DATA
RANGE $3092-$3094 DB_DATA
RANGE $3094-$3096 DW_DATA
RANGE $3096-$309A DB_DATA
RANGE $309A-$309C DW_DATA
RANGE $309C-$309D DB_DATA
RANGE $309D-$309F DW_DATA
RANGE $309F-$30A1 DB_DATA
RANGE $30A1-$30A3 DW_DATA
RANGE $30A3-$30A7 DB_DATA
RANGE $30A7-$30A9 DW_DATA
RANGE $30A9-$30AA DB_DATA
RANGE $30AA-$30AC DW_DATA
RANGE $30AC-$30AE DB_DATA
RANGE $30AE-$30B0 DW_DATA
RANGE $30B0-$30B4 DB_DATA
RANGE $30B4-$30B6 DW_DATA
RANGE $30B6-$30B7 DB_DATA
RANGE $30B7-$30B9 DW_DATA
RANGE $30B9-$30BB DB_DATA
RANGE $30BB-$30BD DW_DATA
RANGE $30BD-$30C1 DB_DATA
RANGE $30C1-$30C3 DW_DATA
RANGE $30C3-$30C4 DB_DATA
RANGE $30C4-$30C6 DW_DATA
RANGE $30C6-$30C8 DB_DATA
RANGE $30C8-$30CA DW_DATA
RANGE $30CA-$30CE DB_DATA
RANGE $30CE-$30D0 DW_DATA
RANGE $30D0-$30D1 DB_DATA
RANGE $30D1-$30D3 DW_DATA
RANGE $30D3-$30E6 DB_DATA
RANGE $30E6-$30E8 DW_DATA
RANGE $30E8-$30FB DB_DATA
RANGE $30FB-$30FD DW_DATA
RANGE $30FD-$311A DB_DATA
RANGE $311A-$311C DW_DATA
RANGE $311C-$312F DB_DATA
RANGE $312F-$3131 DW_DATA
RANGE $3131-$313A DB_DATA
RANGE $313A-$313C DW_DATA
RANGE $313C-$313E DB_DATA
RANGE $313E-$3140 DW_DATA
RANGE $3140-$3144 DB_DATA
RANGE $3144-$3146 DW_DATA
RANGE $3146-$3147 DB_DATA
RANGE $3147-$3149 DW_DATA
RANGE $3149-$314B DB_DATA
RANGE $314B-$314D DW_DATA
RANGE $314D-$3151 DB_DATA
RANGE $3151-$3153 DW_DATA
RANGE $3153-$3154 DB_DATA
RANGE $3154-$3156 DW_DATA
RANGE $3156-$3158 DB_DATA
RANGE $3158-$315A DW_DATA
RANGE $315A-$315E DB_DATA
RANGE $315E-$3160 DW_DATA
RANGE $3160-$3161 DB_DATA
RANGE $3161-$3163 DW_DATA
RANGE $3163-$3165 DB_DATA
RANGE $3165-$3167 DW_DATA
RANGE $3167-$316B DB_DATA
RANGE $316B-$316D DW_DATA
RANGE $316D-$316E DB_DATA
RANGE $316E-$3170 DW_DATA
RANGE $3170-$3172 DB_DATA
RANGE $3172-$3174 DW_DATA
RANGE $3174-$3178 DB_DATA
RANGE $3178-$317A DW_DATA
RANGE $317A-$317B DB_DATA
RANGE $317B-$317D DW_DATA
RANGE $317D-$317F DB_DATA
RANGE $317F-$3181 DW_DATA
RANGE $3181-$3185 DB_DATA
RANGE $3185-$3187 DW_DATA
RANGE $3187-$3188 DB_DATA
RANGE $3188-$318A DW_DATA
RANGE $318A-$318C DB_DATA
RANGE $318C-$318E DW_DATA
RANGE $318E-$3192 DB_DATA
RANGE $3192-$3194 DW_DATA
RANGE $3194-$3195 DB_DATA
RANGE $3195-$3197 DW_DATA
RANGE $3197-$3199 DB_DATA
RANGE $3199-$319B DW_DATA
RANGE $319B-$319F DB_DATA
RANGE $319F-$31A1 DW_DATA
RANGE $31A1-$31A2 DB_DATA
RANGE $31A2-$31A4 DW_DATA
RANGE $31A4-$31A6 DB_DATA
RANGE $31A6-$31A8 DW_DATA
RANGE $31A8-$31AC DB_DATA
RANGE $31AC-$31AE DW_DATA
RANGE $31AE-$31AF DB_DATA
RANGE $31AF-$31B1 DW_DATA
RANGE $31B1-$31B3 DB_DATA
RANGE $31B3-$31B5 DW_DATA
RANGE $31B5-$31B9 DB_DATA
RANGE $31B9-$31BB DW_DATA
RANGE $31BB-$31BC DB_DATA
RANGE $31BC-$31BE DW_DATA
RANGE $31BE-$31C0 DB_DATA
RANGE $31C0-$31C2 DW_DATA
RANGE $31C2-$31C6 DB_DATA
RANGE $31C6-$31C8 DW_DATA
RANGE $31C8-$31C9 DB_DATA
RANGE $31C9-$31CB DW_DATA
RANGE $31CB-$31CD DB_DATA
RANGE $31CD-$31CF DW_DATA
RANGE $31CF-$31D3 DB_DATA
RANGE $31D3-$31D5 DW_DATA
RANGE $31D5-$31D6 DB_DATA
RANGE $31D6-$31D8 DW_DATA
RANGE $31D8-$31DA DB_DATA
RANGE $31DA-$31DC DW_DATA
RANGE $31DC-$31E0 DB_DATA
RANGE $31E0-$31E2 DW_DATA
RANGE $31E2-$31E3 DB_DATA
RANGE $31E3-$31E5 DW_DATA
RANGE $31E5-$31E7 DB_DATA
RANGE $31E7-$31E9 DW_DATA
RANGE $31E9-$31ED DB_DATA
RANGE $31ED-$31EF DW_DATA
RANGE $31EF-$31F0 DB_DATA
RANGE $31F0-$31F2 DW_DATA
RANGE $31F2-$31F4 DB_DATA
RANGE $31F4-$31F6 DW_DATA
RANGE $31F6-$31FA DB_DATA
RANGE $31FA-$31FC DW_DATA
RANGE $31FC-$31FD DB_DATA
RANGE $31FD-$31FF DW_DATA
RANGE $31FF-$3201 DB_DATA
RANGE $3201-$3203 DW_DATA
RANGE $3203-$3207 DB_DATA
RANGE $3207-$3209 DW_DATA
RANGE $3209-$320A DB_DATA
RANGE $320A-$320C DW_DATA
RANGE $320C-$320E DB_DATA
RANGE $320E-$3210 DW_DATA
RANGE $3210-$3214 DB_DATA
RANGE $3214-$3216 DW_DATA
RANGE $3216-$3217 DB_DATA
RANGE $3217-$3219 DW_DATA
RANGE $3219-$321B DB_DATA
RANGE $321B-$321D DW_DATA
RANGE $321D-$3221 DB_DATA
RANGE $3221-$3223 DW_DATA
RANGE $3223-$3224 DB_DATA
RANGE $3224-$3226 DW_DATA
RANGE $3226-$3228 DB_DATA
RANGE $3228-$322A DW_DATA
RANGE $322A-$322E DB_DATA
RANGE $322E-$3230 DW_DATA
RANGE $3230-$3231 DB_DATA
RANGE $3231-$3233 DW_DATA
RANGE $3233-$3235 DB_DATA
RANGE $3235-$3237 DW_DATA
RANGE $3237-$323B DB_DATA
RANGE $323B-$323D DW_DATA
RANGE $323D-$323E DB_DATA
RANGE $323E-$3240 DW_DATA
RANGE $3240-$3257 DB_DATA
RANGE $3257-$3259 DW_DATA
RANGE $3259-$325B DB_DATA
RANGE $325B-$325D DW_DATA
RANGE $325D-$3262 DB_DATA
RANGE $3262-$3264 DW_DATA
RANGE $3264-$327B DB_DATA
RANGE $327B-$327D DW_DATA
RANGE $327D-$327F DB_DATA
RANGE $327F-$3281 DW_DATA
RANGE $3281-$3286 DB_DATA
RANGE $3286-$3288 DW_DATA
RANGE $3288-$329F DB_DATA
RANGE $329F-$32A1 DW_DATA
RANGE $32A1-$32A3 DB_DATA
RANGE $32A3-$32A5 DW_DATA
RANGE $32A5-$32AA DB_DATA
RANGE $32AA-$32AC DW_DATA
RANGE $32AC-$32AE DB_DATA
RANGE $32AE-$32B0 DW_DATA
RANGE $32B0-$32B5 DB_DATA
RANGE $32B5-$32B7 DW_DATA
RANGE $32B7-$32B9 DB_DATA
RANGE $32B9-$32BB DW_DATA
RANGE $32BB-$32C0 DB_DATA
RANGE $32C0-$32C2 DW_DATA
RANGE $32C2-$32C4 DB_DATA
RANGE $32C4-$32C6 DW_DATA
RANGE $32C6-$32CB DB_DATA
RANGE $32CB-$32CD DW_DATA
RANGE $32CD-$32CF DB_DATA
RANGE $32CF-$32D1 DW_DATA
RANGE $32D1-$32D6 DB_DATA
RANGE $32D6-$32D8 DW_DATA
RANGE $32D8-$32DA DB_DATA
RANGE $32DA-$32DC DW_DATA
RANGE $32DC-$32E1 DB_DATA
RANGE $32E1-$32E3 DW_DATA
RANGE $32E3-$32FA DB_DATA
RANGE $32FA-$32FC DW_DATA
RANGE $32FC-$32FE DB_DATA
RANGE $32FE-$3300 DW_DATA
RANGE $3300-$3305 DB_DATA
RANGE $3305-$3307 DW_DATA
RANGE $3307-$331E DB_DATA
RANGE $331E-$3320 DW_DATA
RANGE $3320-$3322 DB_DATA
RANGE $3322-$3324 DW_DATA
RANGE $3324-$3329 DB_DATA
RANGE $3329-$332B DW_DATA
RANGE $332B-$3342 DB_DATA
RANGE $3342-$3344 DW_DATA
RANGE $3344-$3346 DB_DATA
RANGE $3346-$3348 DW_DATA
RANGE $3348-$334D DB_DATA
RANGE $334D-$334F DW_DATA
RANGE $334F-$3351 DB_DATA
RANGE $3351-$3353 DW_DATA
RANGE $3353-$3358 DB_DATA
RANGE $3358-$335A DW_DATA
RANGE $335A-$335C DB_DATA
RANGE $335C-$335E DW_DATA
RANGE $335E-$3363 DB_DATA
RANGE $3363-$3365 DW_DATA
RANGE $3365-$3367 DB_DATA
RANGE $3367-$3369 DW_DATA
RANGE $3369-$336E DB_DATA
RANGE $336E-$3370 DW_DATA
RANGE $3370-$3372 DB_DATA
RANGE $3372-$3374 DW_DATA
RANGE $3374-$3379 DB_DATA
RANGE $3379-$337B DW_DATA
RANGE $337B-$337D DB_DATA
RANGE $337D-$337F DW_DATA
RANGE $337F-$3384 DB_DATA
RANGE $3384-$3386 DW_DATA
RANGE $3386-$33A3 DB_DATA
RANGE $33A3-$33A5 DW_DATA
RANGE $33A5-$33A7 DB_DATA
RANGE $33A7-$33A9 DW_DATA
RANGE $33A9-$33AE DB_DATA
RANGE $33AE-$33B0 DW_DATA
RANGE $33B0-$33CD DB_DATA
RANGE $33CD-$33CF DW_DATA
RANGE $33CF-$33D1 DB_DATA
RANGE $33D1-$33D3 DW_DATA
RANGE $33D3-$33D8 DB_DATA
RANGE $33D8-$33DA DW_DATA
RANGE $33DA-$33F3 DB_DATA
RANGE $33F3-$33F5 DW_DATA
RANGE $33F5-$33F7 DB_DATA
RANGE $33F7-$33F9 DW_DATA
RANGE $33F9-$33FE DB_DATA
RANGE $33FE-$3400 DW_DATA
RANGE $3400-$3402 DB_DATA
RANGE $3402-$3404 DW_DATA
RANGE $3404-$3409 DB_DATA
RANGE $3409-$340B DW_DATA
RANGE $340B-$340D DB_DATA
RANGE $340D-$340F DW_DATA
RANGE $340F-$3414 DB_DATA
RANGE $3414-$3416 DW_DATA
RANGE $3416-$3418 DB_DATA
RANGE $3418-$341A DW_DATA
RANGE $341A-$343B DB_DATA
RANGE $343B-$343D DW_DATA
RANGE $343D-$343F DB_DATA
RANGE $343F-$3441 DW_DATA
RANGE $3441-$3468 DB_DATA
RANGE $3468-$346A DW_DATA
RANGE $346A-$346C DB_DATA
RANGE $346C-$346E DW_DATA
RANGE $346E-$3499 DB_DATA
RANGE $3499-$349B DW_DATA
RANGE $349B-$349D DB_DATA
RANGE $349D-$349F DW_DATA
RANGE $349F-$34CA DB_DATA
RANGE $34CA-$34CC DW_DATA
RANGE $34CC-$34CE DB_DATA
RANGE $34CE-$34D0 DW_DATA
RANGE $34D0-$34FB DB_DATA
RANGE $34FB-$34FD DW_DATA
RANGE $34FD-$34FF DB_DATA
RANGE $34FF-$3501 DW_DATA
RANGE $3501-$3506 DB_DATA
RANGE $3506-$3508 DW_DATA
RANGE $3508-$350A DB_DATA
RANGE $350A-$350C DW_DATA
RANGE $350C-$3528 DB_DATA
RANGE $3528-$352A DW_DATA
RANGE $352A-$352C DB_DATA
RANGE $352C-$352E DW_DATA
RANGE $352E-$354A DB_DATA
RANGE $354A-$354C DW_DATA
RANGE $354C-$354E DB_DATA
RANGE $354E-$3550 DW_DATA
RANGE $3550-$3554 DB_DATA
RANGE $3554-$35B2 DW_DATA
RANGE $35B2-$3EED DB_DATA
RANGE $3EED-$3EEF DW_DATA
RANGE $3EEF-$457C DB_DATA
RANGE $457C-$4BD9 CODE
RANGE $4BD9-$4BF5 DW_DATA
RANGE $4BF5-$4C03 DB_DATA
RANGE $4C03-$4C07 DW_DATA
RANGE $4C07-$4C29 DB_DATA
RANGE $4C29-$4C2D DW_DATA
RANGE $4C2D-$4C3B DB_DATA
RANGE $4C3B-$4C3F DW_DATA
RANGE $4C3F-$4CB9 DB_DATA
RANGE $4CB9-$4CBD DW_DATA
RANGE $4CBD-$4CC3 DB_DATA
RANGE $4CC3-$4CC7 DW_DATA
RANGE $4CC7-$4CCD DB_DATA
RANGE $4CCD-$4CD1 DW_DATA
RANGE $4CD1-$4CDB DB_DATA
RANGE $4CDB-$4CDF DW_DATA
RANGE $4CDF-$4CF5 DB_DATA
RANGE $4CF5-$4CF9 DW_DATA
RANGE $4CF9-$4D3A DB_DATA
RANGE $4D3A-$4D3C DW_DATA
RANGE $4D3C-$4D3F DB_DATA
RANGE $4D3F-$4D41 DW_DATA
RANGE $4D41-$4D44 DB_DATA
RANGE $4D44-$4D46 DW_DATA
RANGE $4D46-$4D49 DB_DATA
RANGE $4D49-$4D4B DW_DATA
RANGE $4D4B-$4D4E DB_DATA
RANGE $4D4E-$4D50 DW_DATA
RANGE $4D50-$4D52 DB_DATA
RANGE $4D52-$4D56 DW_DATA
RANGE $4D56-$4E7D DB_DATA

