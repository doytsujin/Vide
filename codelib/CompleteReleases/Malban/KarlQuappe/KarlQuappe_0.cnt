BANK 0
EQU $00 
EQU $01 USE_PB6
EQU $00 START_LEVEL
EQU $05 FROGS_PER_GAME
COMMENT_LABEL $05 number of frogs per game,
EQU $00 HALFSPEED
COMMENT_LABEL $00 if defined, it is possible for objects to move slower than 1 "pixel"
EQU $00 ARCADE_MOVE
COMMENT_LABEL $00 than logs and crocos are also defined in the opposite direction (no levels done though)
LABEL $C800 Vec_Snd_Shadow
COMMENT_LABEL $C800 Shadow of sound chip registers (15 bytes)
LABEL $C80F Vec_Btn_State
COMMENT_LABEL $C80F Current state of all joystick buttons
LABEL $C810 Vec_Prev_Btns
COMMENT_LABEL $C810 Previous state of all joystick buttons
LABEL $C811 Vec_Buttons
COMMENT_LABEL $C811 Current toggle state of all buttons
LABEL $C812 Vec_Button_1_1
COMMENT_LABEL $C812 Current toggle state of stick 1 button 1
LABEL $C813 Vec_Button_1_2
COMMENT_LABEL $C813 Current toggle state of stick 1 button 2
LABEL $C814 Vec_Button_1_3
COMMENT_LABEL $C814 Current toggle state of stick 1 button 3
LABEL $C815 Vec_Button_1_4
COMMENT_LABEL $C815 Current toggle state of stick 1 button 4
LABEL $C816 Vec_Button_2_1
COMMENT_LABEL $C816 Current toggle state of stick 2 button 1
LABEL $C817 Vec_Button_2_2
COMMENT_LABEL $C817 Current toggle state of stick 2 button 2
LABEL $C818 Vec_Button_2_3
COMMENT_LABEL $C818 Current toggle state of stick 2 button 3
LABEL $C819 Vec_Button_2_4
COMMENT_LABEL $C819 Current toggle state of stick 2 button 4
LABEL $C81A Vec_Joy_Resltn
COMMENT_LABEL $C81A Joystick A/D resolution ($80=min $00=max)
LABEL $C81B Vec_Joy_1_X
COMMENT_LABEL $C81B Joystick 1 left/right
LABEL $C81C Vec_Joy_1_Y
COMMENT_LABEL $C81C Joystick 1 up/down
LABEL $C81D Vec_Joy_2_X
COMMENT_LABEL $C81D Joystick 2 left/right
LABEL $C81E Vec_Joy_2_Y
COMMENT_LABEL $C81E Joystick 2 up/down
LABEL $C81F Vec_Joy_Mux
COMMENT_LABEL $C81F Joystick enable/mux flags (4 bytes)
LABEL $C81F Vec_Joy_Mux_1_X
COMMENT_LABEL $C81F Joystick 1 X enable/mux flag (=1)
LABEL $C820 Vec_Joy_Mux_1_Y
COMMENT_LABEL $C820 Joystick 1 Y enable/mux flag (=3)
LABEL $C821 Vec_Joy_Mux_2_X
COMMENT_LABEL $C821 Joystick 2 X enable/mux flag (=5)
LABEL $C822 Vec_Joy_Mux_2_Y
COMMENT_LABEL $C822 Joystick 2 Y enable/mux flag (=7)
LABEL $C823 Vec_Misc_Count
COMMENT_LABEL $C823 Misc counter/flag byte, zero when not in use
LABEL $C824 Vec_0Ref_Enable
COMMENT_LABEL $C824 Check0Ref enable flag
LABEL $C825 Vec_Loop_Count
COMMENT_LABEL $C825 Loop counter word (incremented in Wait_Recal)
LABEL $C827 Vec_Brightness
COMMENT_LABEL $C827 Default brightness
LABEL $C828 Vec_Dot_Dwell
COMMENT_LABEL $C828 Dot dwell time?
LABEL $C829 Vec_Pattern
COMMENT_LABEL $C829 Dot pattern (bits)
LABEL $C82A Vec_Text_HW
COMMENT_LABEL $C82A Default text height and width
LABEL $C82A Vec_Text_Height
COMMENT_LABEL $C82A Default text height
LABEL $C82B Vec_Text_Width
COMMENT_LABEL $C82B Default text width
LABEL $C82C Vec_Str_Ptr
COMMENT_LABEL $C82C Temporary string pointer for Print_Str
LABEL $C82E Vec_Counters
COMMENT_LABEL $C82E Six bytes of counters
LABEL $C82E Vec_Counter_1
COMMENT_LABEL $C82E First  counter byte
LABEL $C82F Vec_Counter_2
COMMENT_LABEL $C82F Second counter byte
LABEL $C830 Vec_Counter_3
COMMENT_LABEL $C830 Third  counter byte
LABEL $C831 Vec_Counter_4
COMMENT_LABEL $C831 Fourth counter byte
LABEL $C832 Vec_Counter_5
COMMENT_LABEL $C832 Fifth  counter byte
LABEL $C833 Vec_Counter_6
COMMENT_LABEL $C833 Sixth  counter byte
LABEL $C834 Vec_RiseRun_Tmp
COMMENT_LABEL $C834 Temp storage word for rise/run
LABEL $C836 Vec_Angle
COMMENT_LABEL $C836 Angle for rise/run and rotation calculations
LABEL $C837 Vec_Run_Index
COMMENT_LABEL $C837 Index pair for run
LABEL $C839 Vec_Rise_Index
COMMENT_LABEL $C839 Index pair for rise
LABEL $C83B Vec_RiseRun_Len
COMMENT_LABEL $C83B length for rise/run
LABEL $C83D Vec_Rfrsh
COMMENT_LABEL $C83D Refresh time (divided by 1.5MHz)
LABEL $C83D Vec_Rfrsh_lo
COMMENT_LABEL $C83D Refresh time low byte
LABEL $C83E Vec_Rfrsh_hi
COMMENT_LABEL $C83E Refresh time high byte
LABEL $C83F Vec_Music_Work
COMMENT_LABEL $C83F Music work buffer (14 bytes, backwards?)
LABEL $C842 Vec_Music_Wk_A
COMMENT_LABEL $C842 register 10
LABEL $C845 Vec_Music_Wk_7
COMMENT_LABEL $C845 register 7
LABEL $C846 Vec_Music_Wk_6
COMMENT_LABEL $C846 register 6
LABEL $C847 Vec_Music_Wk_5
COMMENT_LABEL $C847 register 5
LABEL $C84B Vec_Music_Wk_1
COMMENT_LABEL $C84B register 1
LABEL $C84D Vec_Freq_Table
COMMENT_LABEL $C84D Pointer to note-to-frequency table (normally $FC8D)
LABEL $C84F Vec_Max_Players
COMMENT_LABEL $C84F Maximum number of players for Select_Game
LABEL $C850 Vec_Max_Games
COMMENT_LABEL $C850 Maximum number of games for Select_Game
LABEL $C84F Vec_ADSR_Table
COMMENT_LABEL $C84F Storage for first music header word (ADSR table)
LABEL $C851 Vec_Twang_Table
COMMENT_LABEL $C851 Storage for second music header word ('twang' table)
LABEL $C853 Vec_Music_Ptr
COMMENT_LABEL $C853 Music data pointer
LABEL $C853 Vec_Expl_ChanA
COMMENT_LABEL $C853 Used by Explosion_Snd - bit for first channel used?
LABEL $C854 Vec_Expl_Chans
COMMENT_LABEL $C854 Used by Explosion_Snd - bits for all channels used?
LABEL $C855 Vec_Music_Chan
COMMENT_LABEL $C855 Current sound channel number for Init_Music
LABEL $C856 Vec_Music_Flag
COMMENT_LABEL $C856 Music active flag ($00=off $01=start $80=on)
LABEL $C857 Vec_Duration
COMMENT_LABEL $C857 Duration counter for Init_Music
LABEL $C858 Vec_Music_Twang
COMMENT_LABEL $C858 3 word 'twang' table used by Init_Music
LABEL $C858 Vec_Expl_1
COMMENT_LABEL $C858 Four bytes copied from Explosion_Snd's U-reg parameters
LABEL $C859 Vec_Expl_2
LABEL $C85A Vec_Expl_3
LABEL $C85B Vec_Expl_4
LABEL $C85C Vec_Expl_Chan
COMMENT_LABEL $C85C Used by Explosion_Snd - channel number in use?
LABEL $C85D Vec_Expl_ChanB
COMMENT_LABEL $C85D Used by Explosion_Snd - bit for second channel used?
LABEL $C85E Vec_ADSR_Timers
COMMENT_LABEL $C85E ADSR timers for each sound channel (3 bytes)
LABEL $C861 Vec_Music_Freq
COMMENT_LABEL $C861 Storage for base frequency of each channel (3 words)
LABEL $C867 Vec_Expl_Flag
COMMENT_LABEL $C867 Explosion_Snd initialization flag?
LABEL $C877 Vec_Expl_Timer
COMMENT_LABEL $C877 Used by Explosion_Snd
LABEL $C879 Vec_Num_Players
COMMENT_LABEL $C879 Number of players selected in Select_Game
LABEL $C87A Vec_Num_Game
COMMENT_LABEL $C87A Game number selected in Select_Game
LABEL $C87B Vec_Seed_Ptr
COMMENT_LABEL $C87B Pointer to 3-byte random number seed (=$C87D)
LABEL $C87D Vec_Random_Seed
COMMENT_LABEL $C87D Default 3-byte random number seed
LABEL $CBEA Vec_Default_Stk
COMMENT_LABEL $CBEA Default top-of-stack
LABEL $CBEB Vec_High_Score
COMMENT_LABEL $CBEB High score storage (7 bytes)
LABEL $CBF2 Vec_SWI3_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF2 Vec_SWI2_Vector
COMMENT_LABEL $CBF2 SWI2/SWI3 interrupt vector (3 bytes)
LABEL $CBF5 Vec_FIRQ_Vector
COMMENT_LABEL $CBF5 FIRQ interrupt vector (3 bytes)
LABEL $CBF8 Vec_IRQ_Vector
COMMENT_LABEL $CBF8 IRQ interrupt vector (3 bytes)
LABEL $CBFB Vec_SWI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFB Vec_NMI_Vector
COMMENT_LABEL $CBFB SWI/NMI interrupt vector (3 bytes)
LABEL $CBFE Vec_Cold_Flag
COMMENT_LABEL $CBFE Cold start flag (warm start if = $7321)
LABEL $D000 VIA_port_b
COMMENT_LABEL $D000 VIA port B data I/O register
LABEL $D001 VIA_port_a
COMMENT_LABEL $D001 VIA port A data I/O register (handshaking)
LABEL $D002 VIA_DDR_b
COMMENT_LABEL $D002 VIA port B data direction register (0=input 1=output)
LABEL $D003 VIA_DDR_a
COMMENT_LABEL $D003 VIA port A data direction register (0=input 1=output)
LABEL $D004 VIA_t1_cnt_lo
COMMENT_LABEL $D004 VIA timer 1 count register lo (scale factor)
LABEL $D005 VIA_t1_cnt_hi
COMMENT_LABEL $D005 VIA timer 1 count register hi
LABEL $D006 VIA_t1_lch_lo
COMMENT_LABEL $D006 VIA timer 1 latch register lo
LABEL $D007 VIA_t1_lch_hi
COMMENT_LABEL $D007 VIA timer 1 latch register hi
LABEL $D008 VIA_t2_lo
COMMENT_LABEL $D008 VIA timer 2 count/latch register lo (refresh)
LABEL $D009 VIA_t2_hi
COMMENT_LABEL $D009 VIA timer 2 count/latch register hi
LABEL $D00A VIA_shift_reg
COMMENT_LABEL $D00A VIA shift register
LABEL $D00B VIA_aux_cntl
COMMENT_LABEL $D00B VIA auxiliary control register
LABEL $D00C VIA_cntl
COMMENT_LABEL $D00C VIA control register
LABEL $D00D VIA_int_flags
COMMENT_LABEL $D00D VIA interrupt flags register
LABEL $D00E VIA_int_enable
COMMENT_LABEL $D00E VIA interrupt enable register
LABEL $D00F VIA_port_a_nohs
COMMENT_LABEL $D00F VIA port A data I/O register (no handshaking)
LABEL $F000 Cold_Start
LABEL $F06C Warm_Start
LABEL $F14C Init_VIA
LABEL $F164 Init_OS_RAM
LABEL $F18B Init_OS
LABEL $F192 Wait_Recal
LABEL $F1A2 Set_Refresh
LABEL $F1AA DP_to_D0
LABEL $F1AF DP_to_C8
LABEL $F1B4 Read_Btns_Mask
LABEL $F1BA Read_Btns
LABEL $F1F5 Joy_Analog
LABEL $F1F8 Joy_Digital
LABEL $F256 Sound_Byte
LABEL $F259 Sound_Byte_x
LABEL $F25B Sound_Byte_raw
LABEL $F272 Clear_Sound
LABEL $F27D Sound_Bytes
LABEL $F284 Sound_Bytes_x
LABEL $F289 Do_Sound
LABEL $F28C Do_Sound_x
LABEL $F29D Intensity_1F
LABEL $F2A1 Intensity_3F
LABEL $F2A5 Intensity_5F
LABEL $F2A9 Intensity_7F
LABEL $F2AB Intensity_a
LABEL $F2BE Dot_ix_b
LABEL $F2C1 Dot_ix
LABEL $F2C3 Dot_d
LABEL $F2C5 Dot_here
LABEL $F2D5 Dot_List
LABEL $F2DE Dot_List_Reset
LABEL $F2E6 Recalibrate
LABEL $F2F2 Moveto_x_7F
LABEL $F2FC Moveto_d_7F
LABEL $F308 Moveto_ix_FF
LABEL $F30C Moveto_ix_7F
LABEL $F30E Moveto_ix_a
LABEL $F310 Moveto_ix
LABEL $F312 Moveto_d
LABEL $F34A Reset0Ref_D0
LABEL $F34F Check0Ref
LABEL $F354 Reset0Ref
LABEL $F35B Reset_Pen
LABEL $F36B Reset0Int
LABEL $F373 Print_Str_hwyx
LABEL $F378 Print_Str_yx
LABEL $F37A Print_Str_d
LABEL $F385 Print_List_hw
LABEL $F38A Print_List
LABEL $F38C Print_List_chk
LABEL $F391 Print_Ships_x
LABEL $F393 Print_Ships
LABEL $F3AD Mov_Draw_VLc_a
COMMENT_LABEL $F3AD count y x y x ...
LABEL $F3B1 Mov_Draw_VL_b
COMMENT_LABEL $F3B1 y x y x ...
LABEL $F3B5 Mov_Draw_VLcs
COMMENT_LABEL $F3B5 count scale y x y x ...
LABEL $F3B7 Mov_Draw_VL_ab
COMMENT_LABEL $F3B7 y x y x ...
LABEL $F3B9 Mov_Draw_VL_a
COMMENT_LABEL $F3B9 y x y x ...
LABEL $F3BC Mov_Draw_VL
COMMENT_LABEL $F3BC y x y x ...
LABEL $F3BE Mov_Draw_VL_d
COMMENT_LABEL $F3BE y x y x ...
LABEL $F3CE Draw_VLc
COMMENT_LABEL $F3CE count y x y x ...
LABEL $F3D2 Draw_VL_b
COMMENT_LABEL $F3D2 y x y x ...
LABEL $F3D6 Draw_VLcs
COMMENT_LABEL $F3D6 count scale y x y x ...
LABEL $F3D8 Draw_VL_ab
COMMENT_LABEL $F3D8 y x y x ...
LABEL $F3DA Draw_VL_a
COMMENT_LABEL $F3DA y x y x ...
LABEL $F3DD Draw_VL
COMMENT_LABEL $F3DD y x y x ...
LABEL $F3DF Draw_Line_d
COMMENT_LABEL $F3DF y x y x ...
LABEL $F404 Draw_VLp_FF
COMMENT_LABEL $F404 pattern y x pattern y x ... $01
LABEL $F408 Draw_VLp_7F
COMMENT_LABEL $F408 pattern y x pattern y x ... $01
LABEL $F40C Draw_VLp_scale
COMMENT_LABEL $F40C scale pattern y x pattern y x ... $01
LABEL $F40E Draw_VLp_b
COMMENT_LABEL $F40E pattern y x pattern y x ... $01
LABEL $F410 Draw_VLp
COMMENT_LABEL $F410 pattern y x pattern y x ... $01
LABEL $F434 Draw_Pat_VL_a
COMMENT_LABEL $F434 y x y x ...
LABEL $F437 Draw_Pat_VL
COMMENT_LABEL $F437 y x y x ...
LABEL $F439 Draw_Pat_VL_d
COMMENT_LABEL $F439 y x y x ...
LABEL $F46E Draw_VL_mode
COMMENT_LABEL $F46E mode y x mode y x ... $01
LABEL $F495 Print_Str
LABEL $F511 Random_3
LABEL $F517 Random
LABEL $F533 Init_Music_Buf
LABEL $F53F Clear_x_b
LABEL $F542 Clear_C8_RAM
COMMENT_LABEL $F542 never used by GCE carts?
LABEL $F545 Clear_x_256
LABEL $F548 Clear_x_d
LABEL $F550 Clear_x_b_80
LABEL $F552 Clear_x_b_a
LABEL $F55A Dec_3_Counters
LABEL $F55E Dec_6_Counters
LABEL $F563 Dec_Counters
LABEL $F56D Delay_3
COMMENT_LABEL $F56D 30 cycles
LABEL $F571 Delay_2
COMMENT_LABEL $F571 25 cycles
LABEL $F575 Delay_1
COMMENT_LABEL $F575 20 cycles
LABEL $F579 Delay_0
COMMENT_LABEL $F579 12 cycles
LABEL $F57A Delay_b
COMMENT_LABEL $F57A 5*B + 10 cycles
LABEL $F57D Delay_RTS
COMMENT_LABEL $F57D 5 cycles
LABEL $F57E Bitmask_a
LABEL $F584 Abs_a_b
LABEL $F58B Abs_b
LABEL $F593 Rise_Run_Angle
LABEL $F5D9 Get_Rise_Idx
LABEL $F5DB Get_Run_Idx
LABEL $F5EF Get_Rise_Run
LABEL $F5FF Rise_Run_X
LABEL $F601 Rise_Run_Y
LABEL $F603 Rise_Run_Len
LABEL $F610 Rot_VL_ab
LABEL $F616 Rot_VL
LABEL $F61F Rot_VL_Mode
LABEL $F62B Rot_VL_M_dft
LABEL $F65B Xform_Run_a
LABEL $F65D Xform_Run
LABEL $F661 Xform_Rise_a
LABEL $F663 Xform_Rise
LABEL $F67F Move_Mem_a_1
LABEL $F683 Move_Mem_a
LABEL $F687 Init_Music_chk
LABEL $F68D Init_Music
LABEL $F692 Init_Music_x
LABEL $F7A9 Select_Game
LABEL $F84F Clear_Score
LABEL $F85E Add_Score_a
LABEL $F87C Add_Score_d
LABEL $F8B7 Strip_Zeros
LABEL $F8C7 Compare_Score
LABEL $F8D8 New_High_Score
LABEL $F8E5 Obj_Will_Hit_u
LABEL $F8F3 Obj_Will_Hit
LABEL $F8FF Obj_Hit
LABEL $F92E Explosion_Snd
LABEL $FF9F Draw_Grid_VL
LABEL $FD0D music1
LABEL $FD1D music2
LABEL $FD81 music3
LABEL $FDD3 music4
LABEL $FE38 music5
LABEL $FE76 music6
LABEL $FEC6 music7
LABEL $FEF8 music8
LABEL $FF26 music9
LABEL $FF44 musica
LABEL $FF62 musicb
LABEL $FF7A musicc
LABEL $FF8F musicd
LABEL $F9F4 Char_Table
LABEL $FBD4 Char_Table_End
EQU $01 MACRO_I
LABEL $C880 user_ram
COMMENT_LABEL $C880 well start of our ram space
LABEL $C880 user_ram_start
LABEL $C880 music_active
COMMENT_LABEL $C880 pointer to music piece which is playing now
LABEL $C882 music_counter
COMMENT_LABEL $C882 pointer to weridos, used only in init screen
LABEL $C884 tmp1
COMMENT_LABEL $C884 two temporal storage variables
LABEL $C886 tmp2
COMMENT_LABEL $C886 ...
LABEL $C888 mul_tmp1
COMMENT_LABEL $C888 two variable used in MY_MUL only
LABEL $C88A mul_tmp2
LABEL $C88C morph_status
COMMENT_LABEL $C88C status---
LABEL $C88D morph_tmp
COMMENT_LABEL $C88D saves a few cycles... for the step counter only in one_morph_step
LABEL $C88E morph_sign
COMMENT_LABEL $C88E number of steps between 'from' and 'to' variable
LABEL $C88F morph_counter
COMMENT_LABEL $C88F number of steps between 'from' and 'to' variable
LABEL $C890 morph_steps
COMMENT_LABEL $C890 number of steps between 'from' and 'to' constant
LABEL $C891 morph_delay
COMMENT_LABEL $C891 delay between one step and another (variable)
LABEL $C893 morph_structure
COMMENT_LABEL $C893 pointer to morphstructure of current morphing
LABEL $C895 morph_div_jsr
COMMENT_LABEL $C895 pointer to indirectly JSR to a divide routine (for optimization)
LABEL $C897 kind_of_death
COMMENT_LABEL $C897 storage to text, what kind of death happened to frog
LABEL $C899 in_home_counter
COMMENT_LABEL $C899 number of free homes in the currently played level
LABEL $C89A game_level
COMMENT_LABEL $C89A what game level are we playing
LABEL $C89B current_frog_size_x
COMMENT_LABEL $C89B size of frog 'sprites' following (all the same for now)
LABEL $C89C current_frog_offset
COMMENT_LABEL $C89C offset to 'zero' of current frog sprite
LABEL $C89E current_frog_heading
COMMENT_LABEL $C89E what direction is karl looking at
LABEL $C89F last_joy_x
COMMENT_LABEL $C89F last joystick position X,
LABEL $C8A0 last_joy_y
COMMENT_LABEL $C8A0 and Y, for checking, we don't want an autorun feature...
LABEL $C8A1 current_frog_brightness
COMMENT_LABEL $C8A1 current brightness of karl,
LABEL $C8A2 high_check
COMMENT_LABEL $C8A2 checker variable for new life (every 10000 points)
LABEL $C8A3 frog_pos
COMMENT_LABEL $C8A3 position 16bit y,x of frog
LABEL $C8A3 frog_y
COMMENT_LABEL $C8A3 y pos of frog
LABEL $C8A4 frog_x
COMMENT_LABEL $C8A4 and the x
LABEL $C8A5 frog_pos_band
COMMENT_LABEL $C8A5 band information (ranging from 0-11), y,x
LABEL $C8A5 frog_y_band
COMMENT_LABEL $C8A5 band y information
LABEL $C8A6 frog_x_band
COMMENT_LABEL $C8A6 band y information
LABEL $C8A7 frog_pic
COMMENT_LABEL $C8A7 now used frog 'picture'
LABEL $C8A9 my_timer_start
COMMENT_LABEL $C8A9 reset value of level timer
LABEL $C8AB y_timer
COMMENT_LABEL $C8AB y value of my timer vector line
LABEL $C8AC my_timer
COMMENT_LABEL $C8AC x value of vector line (8bit) AND the timer variable itself (16bit) variable
LABEL $C8AE fly_timer
COMMENT_LABEL $C8AE timer variable for fly
LABEL $C8AE stringBufferTemp
COMMENT_LABEL $C8AE for option screen is never at the same time as game, so we can double use RAM
LABEL $C8B0 fly_timer_start
COMMENT_LABEL $C8B0 reset value of fly timer
LABEL $C8B2 fly_house
COMMENT_LABEL $C8B2 what house is the fly currently in
LABEL $C8B3 fly_status
COMMENT_LABEL $C8B3 what's the flys status?
LABEL $C8B4 croco_timer
COMMENT_LABEL $C8B4 croco (home) timer variable
LABEL $C8B6 croco_timer_start
COMMENT_LABEL $C8B6 croco timer reset
LABEL $C8B8 croco_house
COMMENT_LABEL $C8B8 what house is the croco currently 'visiting'
LABEL $C8B9 croco_status
COMMENT_LABEL $C8B9 what's the crocos status
LABEL $C8BA dive_timer
COMMENT_LABEL $C8BA (turtle) dive timer variable
LABEL $C8BC dive_timer_start
COMMENT_LABEL $C8BC reset value for the above
LABEL $C8BD frog_bonus
COMMENT_LABEL $C8BD what bonuses has frog collected? (girl, fly)
LABEL $C8BE otter_status
COMMENT_LABEL $C8BE what's the otters status
LABEL $C8BF otter_timer_start
COMMENT_LABEL $C8BF otter timer reset value
LABEL $C8C1 otter_timer
COMMENT_LABEL $C8C1 otter timer variable
LABEL $C8C1 current_highscore_gameMode
LABEL $C8C3 otter_log_pre
COMMENT_LABEL $C8C3 the 'logs' address of the 'log' BEFOR the otter
LABEL $C8C5 otter_log_past
COMMENT_LABEL $C8C5 the 'logs' address of the 'log' BEHIND the otter
LABEL $C8C7 otter_object
COMMENT_LABEL $C8C7 the object information address of current otter
LABEL $C8C9 otter_pos
COMMENT_LABEL $C8C9 current position of otter
LABEL $C8CB otter_anim_counter
COMMENT_LABEL $C8CB animation counter of otter
LABEL $C8CC otter_speed
COMMENT_LABEL $C8CC current speed of otter
LABEL $C8CD otter_band
COMMENT_LABEL $C8CD what band is otter swimming in?
LABEL $C8CF girl_status
COMMENT_LABEL $C8CF what's the girls status?
LABEL $C8D0 girl_round_counter
COMMENT_LABEL $C8D0 counter, for what round girl will be next displayed
LABEL $C8D1 girl_round_counter_reset
COMMENT_LABEL $C8D1 counter reset value
LABEL $C8D2 girl_log_object
COMMENT_LABEL $C8D2 log, the girl is on, allways first log on second river band
LABEL $C8D4 girl_object
COMMENT_LABEL $C8D4 pointer to current girl object information
LABEL $C8D6 girl_pos
COMMENT_LABEL $C8D6 current position of girl
LABEL $C8D8 girl_anim_counter
COMMENT_LABEL $C8D8 animation counter of girl
LABEL $C8D9 girl_zero
COMMENT_LABEL $C8D9 allways a 16 bit zero, to jump out of the loop...
LABEL $C8DB girl_speed
COMMENT_LABEL $C8DB speed of girl
LABEL $C8DC snake_status
COMMENT_LABEL $C8DC snake's status (only one snake on logs possible for now)
LABEL $C8DD snake_round_counter
COMMENT_LABEL $C8DD counter, for what round snake will be next displayed (variable)
LABEL $C8DE snake_round_counter_reset
COMMENT_LABEL $C8DE reset value for above
LABEL $C8DF snake_log_object
COMMENT_LABEL $C8DF 'log', the snake is on, allways first log on third river band!!!
LABEL $C8E1 snake_object
COMMENT_LABEL $C8E1 pointer to snake's object definition
LABEL $C8E1 eeprom_tmp
LABEL $C8E3 snake_pos
COMMENT_LABEL $C8E3 position of snake (y,x)
LABEL $C8E5 hs_reset_tmp
LABEL $C8E5 snake_anim_counter
COMMENT_LABEL $C8E5 animation counter for snake
LABEL $C8E6 snake_gone
COMMENT_LABEL $C8E6 number of steps a snake can make before turing arround
LABEL $C8E7 snake_speed_start
COMMENT_LABEL $C8E7 startspeed of snake (determined by 'log's' speed)
LABEL $C8E8 snake_speed
COMMENT_LABEL $C8E8 speed of snake now
LABEL $C8E9 i_jump
COMMENT_LABEL $C8E9 indirect jump for vector list drawing unlooped
LABEL $C8E9 current_eprom_blocksize
LABEL $C8EA current_eprom_blockadr
LABEL $C8EB nextMusic
COMMENT_LABEL $C8EB word
LABEL $C8ED currentPlayer
COMMENT_LABEL $C8ED 0 = player 1, 1 = player 2
LABEL $C8EE currentSelectedOption
COMMENT_LABEL $C8EE for the option menu, to know which one is hilighted
LABEL $C8EF P1_start
LABEL $C8EF P1_score_digit_front
COMMENT_LABEL $C8EF $81
LABEL $C8F0 P1_score_digit_5
LABEL $C8F1 P1_score_digit_4
LABEL $C8F2 P1_score_digit_3
LABEL $C8F3 P1_score_digit_2
LABEL $C8F4 P1_score_digit_1
LABEL $C8F5 P1_score_digit_SPACE1
LABEL $C8F6 P1_score_digit_LIFES
LABEL $C8F7 P1_score_digit_SPACE2
LABEL $C8F8 P1_score_digit_Level
LABEL $C8F9 P1_score_digit_back
COMMENT_LABEL $C8F9 $81
LABEL $C8FA P1_no_frogs
LABEL $C8FB P1_level
LABEL $C8FC P1_homes
LABEL $C8FD P1_in_home_counter
LABEL $C916 P1_end
LABEL $C916 P2_start
LABEL $C916 P2_score_digit_front
COMMENT_LABEL $C916 $81
LABEL $C917 P2_score_digit_5
LABEL $C918 P2_score_digit_4
LABEL $C919 P2_score_digit_3
LABEL $C91A P2_score_digit_2
LABEL $C91B P2_score_digit_1
LABEL $C91C P2_score_digit_SPACE1
LABEL $C91D P2_score_digit_LIFES
LABEL $C91E P2_score_digit_SPACE2
LABEL $C91F P2_score_digit_Level
LABEL $C920 P2_score_digit_back
COMMENT_LABEL $C920 $81
LABEL $C921 P2_no_frogs
LABEL $C922 P2_level
LABEL $C923 P2_homes
LABEL $C924 P2_in_home_counter
LABEL $C93D P2_end
LABEL $C93E timeLeft
COMMENT_LABEL $C93E ASCII - generated String "TIME xxx",$81
LABEL $C947 skipCount
COMMENT_LABEL $C947 I count the number of "sprites" to skip in each level, when level is initialized
LABEL $C948 skipCount_now
COMMENT_LABEL $C948 these "skipped" will not be displayed, when a frog reached home (and the time is display) - would be over 50Hz otherwise
LABEL $C949 levelFromOptions
LABEL $C94A startDataPos
COMMENT_LABEL $C94A used by ym player
LABEL $C94C nextDataPos
COMMENT_LABEL $C94C used by ym player
LABEL $C94E currentDataBitPos
COMMENT_LABEL $C94E used by ym player
LABEL $C94F currentDataByte
COMMENT_LABEL $C94F used by ym player
LABEL $C950 froggerInJump
COMMENT_LABEL $C950 a jump phase of the frog consists of 7 steps, countdown to 0, this is where current step is stored
LABEL $C951 froggerAnimPointer
COMMENT_LABEL $C951 pointer to the animation sprite object structure for the current frog animation step
LABEL $C953 inMovePointer
COMMENT_LABEL $C953 pointer to the subroutine that gets executed during a "move" - that is always one part of the ym unpacker
LABEL $C955 RecalCounter
COMMENT_LABEL $C955 similar var to BIOS Vec_Loop_Count, this gets increased ones every cycle (but also reseted),
LABEL $C955 RecalCounterHi
LABEL $C956 RecalCounterLow
LABEL $C957 my_random
LABEL $C958 frogDeath
COMMENT_LABEL $C958 indicator flag that we are in a death sequence intermission
LABEL $C959 ds2431Present
COMMENT_LABEL $C959 flag whether the eEprom was found or not
LABEL $C95A ignoreDs2431
COMMENT_LABEL $C95A flag whether to ignore eEprom altogether (button on startup), VecFlash gets irritated by PB6 access
EQU $0A HighScoreEntry
EQU $00 NAME
EQU $03 LEVEL
EQU $04 ASCIISCORE
LABEL $C95B optionsBlock
LABEL $C95B v4e_saveBlockStart
LABEL $C95B playerCountOption
COMMENT_LABEL $C95B 0 = 1 player, 1 = 2 player game
LABEL $C95C gameModeOption
COMMENT_LABEL $C95C 0 = tournament, 1 = training, 2 Hardcore
LABEL $C95D musicOption
COMMENT_LABEL $C95D 0 = on, 1 = off
LABEL $C95E levelEditAllowed
COMMENT_LABEL $C95E 0 = no, 1 = yes
LABEL $C963 optionsBlockEnd
COMMENT_LABEL $C963 8 byte at least for a block
LABEL $C963 highScoreCompetitionBlock
LABEL $C963 highScoreTable
LABEL $C995 highScoreTableEnd
COMMENT_LABEL $C995 5 entries
LABEL $C995 highScoreCompetitionBlockEnd
LABEL $C995 highScoreHardcoreBlock
LABEL $C995 highScoreHardTable
LABEL $C9C7 highScoreHardTableEnd
COMMENT_LABEL $C9C7 5 entries
LABEL $C9C7 highScoreHardcoreBlockEnd
LABEL $C9C7 v4e_saveBlockEnd
LABEL $C9C7 newEepromRAMStart
COMMENT_LABEL $C9C7 new save struct, straight 32 bytes
LABEL $C9E7 newEepromRAMEnd
COMMENT_LABEL $C9E7 of which only 28 bytes are used!
LABEL $C9E7 conversionBuffer
COMMENT_LABEL $C9E7 internal buffer used by conversion ASCII <-> 16 bit value (in D) vice/versa [values from 0 to 65536*10 + $80]
LABEL $C9EE highScoreTmpBuffer
COMMENT_LABEL $C9EE one "0" is added to achieve the tenfold length of 16 bit! (which cant be displayed - hahaha!)
LABEL $C9FC highScoreLevel
COMMENT_LABEL $C9FC the level of the highscore that was reached, a "transport" byte from death sequence to HighScore sequence
LABEL $C9FD currentHSEditPlace
COMMENT_LABEL $C9FD one of the three possible letters
LABEL $C9FE currentHSEditBlinkState
LABEL $C9FF hsEditLetter1
COMMENT_LABEL $C9FF three letters can be edited,
LABEL $CA00 hsEditLetter2
COMMENT_LABEL $CA00 these hold the actual ASCII values
LABEL $CA01 hsEditLetter3
LABEL $CA02 isAttractMode
COMMENT_LABEL $CA02 are we playing in attract mode? 0= no, 1 = yes (no score, no joystick, joystick recording is taken etc)
LABEL $CA03 attractMovePointer
COMMENT_LABEL $CA03 pointer to joystick data of the current attract mode setting
LABEL $CA05 buttonBlinker
COMMENT_LABEL $CA05 blink state of the "press button" in attract mode
LABEL $CA06 buttonBlinkerIntensity
LABEL $CA07 attractCount
COMMENT_LABEL $CA07 number of the next attract level to be displayed
LABEL $CA08 levelDoneTemp
COMMENT_LABEL $CA08 just a temp, that is not one of the above, which already were used
LABEL $CA09 highScorePlace
COMMENT_LABEL $CA09 more of above "transport" vars, what place did the high score reach?
LABEL $CA0A highScoreReached
COMMENT_LABEL $CA0A did we get a highscore at all?
LABEL $CA0B highScoreDone
COMMENT_LABEL $CA0B whatWAS the actual score?
LABEL $CA0D current_brightness
COMMENT_LABEL $CA0D currently = brightness (why didn't I use the vectrex's os variable???)
LABEL $CA0E initMoveTable
COMMENT_LABEL $CA0E current pointer to frog movement in title screen
LABEL $CA10 gimmickPossible
COMMENT_LABEL $CA10 1 = gimick not possible, 0 = possible
LABEL $CA12 gimmickActive
COMMENT_LABEL $CA12 1= active, 0 = not active
LABEL $CA13 gimmick_status
COMMENT_LABEL $CA13 what's the gimmick status?
LABEL $CA14 gimmick_object
COMMENT_LABEL $CA14 pointer to current gimmick object information
LABEL $CA16 gimmick_pos
COMMENT_LABEL $CA16 current position of gimmick
LABEL $CA18 gimmick_anim_counter
COMMENT_LABEL $CA18 animation counter of gimmick
LABEL $CA19 gimmick_speed
COMMENT_LABEL $CA19 speed of gimmick
LABEL $CA1A gimmick_countdown
COMMENT_LABEL $CA1A countdown, # of cycles this gimicks "plays"
LABEL $CA1B gimmick_pointer
COMMENT_LABEL $CA1B pointer to next gimmick in table of all gmmicks
LABEL $CA1D levelString
COMMENT_LABEL $CA1D "LEVEL 1",81
LABEL $CA26 did_rollOver
EQU $06 TWINKLE_COUNT
COMMENT_LABEL $06 six twinkle in title possible at the same time
LABEL $CA27 twinklers
COMMENT_LABEL $CA27 twinklers+TWINKLE_COUNT*(Twinkle) ; 6 structures of twinklers like (following)
EQU $07 Twinkle
EQU $00 TWINKEL_Y
COMMENT_LABEL $00 some data here is redundant, but I didn't change it - enough RAM :-)
EQU $01 TWINKEL_X
EQU $02 TWINKLE_ANGLE
EQU $03 TWINKLE_BRIGHTNESS
EQU $04 TWINKLE_LENGTH
EQU $05 TWINKLE_COUNTER
EQU $06 TWINKLE_WAIT
LABEL $CA27 twinkle1_y
LABEL $CA28 twinkle1_x
LABEL $CA29 twinkle1_angle
LABEL $CA2A twinkle1_brighness
LABEL $CA2B twinkle1_length
LABEL $CA2C twinkle1_counter
LABEL $CA2D twinkle1_wait
LABEL $CA27 user_ram_end
COMMENT_LABEL $CA27 end of user ram
EQU $05 HOME_OBJECT_SIZE
EQU $05 LIST_OBJECT_SIZE
LABEL $CA27 home_objects
LABEL $CA27 home_entry_1
LABEL $CA2C home_entry_2
LABEL $CA31 home_entry_3
LABEL $CA36 home_entry_4
LABEL $CA3B home_entry_5
LABEL $CA40 home_end
LABEL $CA40 object_list
LABEL $CAD8 object_list_end
LABEL $CAD8 band_list
LABEL $CB98 band_list_end
LABEL $CB98 t_list
COMMENT_LABEL $CB98 start of dive object list
LABEL $CBA6 t_list_end
COMMENT_LABEL $CBA6 note maximum of 6 dives per level
LABEL $CA40 current_morph_vectorlist_org
LABEL $003F MAX_VECTOR_MORPH
COMMENT_LABEL $003F this uses 128*3 bytes of RAM, maximum number of vectors for a morph
LABEL $CABF current_morph_vectorlist
LABEL $CB3E current_morph_vector_diffs
LABEL $C868 currentMusic
COMMENT_LABEL $C868 ym player used
LABEL $C86A currentYLenCount
COMMENT_LABEL $C86A ym player used
LABEL $C86E currentSFX
COMMENT_LABEL $C86E sfx player used
LABEL $C870 sfx_pointer_3
COMMENT_LABEL $C870 sfx player used
LABEL $C872 sfx_status_3
COMMENT_LABEL $C872 sfx player used
LABEL $C873 intermissionActive
COMMENT_LABEL $C873 flag whether an intermission is active ( see also "frogDeath")
LABEL $C874 no_frogs
COMMENT_LABEL $C874 current number of lives left to current player
LABEL $C875 bonusScore
COMMENT_LABEL $C875 flag whether to display a little "200" above the home sprite 0=none, 1 = "200", 2 = "200 200"
LABEL $C876 no_frogs2
COMMENT_LABEL $C876 number of frogs the previous active player had left after playing (in one player game same as no_frogs)
LABEL $C878 highScoreEditMode
COMMENT_LABEL $C878 is the high score "viewer" in editor mode?
LABEL $CBEB score_digit_front
COMMENT_LABEL $CBEB $81
LABEL $CBEC score_digit_5
LABEL $CBED score_digit_4
LABEL $CBEE score_digit_3
LABEL $CBEF score_digit_2
LABEL $CBF0 score_digit_1
LABEL $CBF1 score_digit_SPACE1
LABEL $CBF2 score_digit_LIFES
LABEL $CBF3 score_digit_SPACE2
LABEL $CBF4 score_digit_Level
LABEL $CBF5 score_digit_back
COMMENT_LABEL $CBF5 $81
LABEL $C884 loop1
COMMENT_LABEL $C884 loop1 counter in level setup
LABEL $C885 loop2
COMMENT_LABEL $C885 loop2 counter in level setup
LABEL $C888 divide_tmp
COMMENT_LABEL $C888 divide tmp variable, you don't divide while multiplying vice versa
LABEL $C888 tmp_band_offset
COMMENT_LABEL $C888 used in level setup and gameplay, but there is NO multiplication in game...
LABEL $C88A tmp_band_list
COMMENT_LABEL $C88A used in level setup
LABEL $C88A counter
COMMENT_LABEL $C88A counter used in intermissions
LABEL $C89B game_over_intensity
COMMENT_LABEL $C89B intensity of game over text
LABEL $C89C game_over_scaley
COMMENT_LABEL $C89C 16 bit ok scale y of game over string
LABEL $C89D game_over_scalex
COMMENT_LABEL $C89D scale x of game over string
LABEL $C89F game_over_ypos
COMMENT_LABEL $C89F 16 bit ok game over y position
LABEL $C8A0 game_over_xpos
COMMENT_LABEL $C8A0 game over x position
LABEL $C897 init_screen_mode
LABEL $C898 init_current_intensity
EQU $0A OTTER_X_LEN
COMMENT_LABEL $0A size of otter (x) for collision checking
EQU $37 SNAKE_GO_LIMIT
COMMENT_LABEL $37 number of 'pixels' a snake can go before turing arround
EQU $00 NOT_AVAILABLE
COMMENT_LABEL $00 not in this level at all (is not checked for, only via ZERO flag!!!)
EQU $01 IS_CARRIED
COMMENT_LABEL $01 the object (girl) is carried by frog
EQU $02 IS_DISPLAYED
COMMENT_LABEL $02 the object is currently visible
EQU $03 IS_WAITING
COMMENT_LABEL $03 the object is waiting to be displayed
EQU $00 NOT_DIVING
COMMENT_LABEL $00 turtle is not diving (under water) right now
EQU $01 IS_DIVING
COMMENT_LABEL $01 the turtle is under water (frog can drown)
EQU $01 FLY_BONUS
COMMENT_LABEL $01 if = a fly bonus is awarded
EQU $02 GIRL_BONUS
COMMENT_LABEL $02 if = a girl bonus is awarded
EQU $0A MORPHING_DONE
COMMENT_LABEL $0A this morphing structure finnished
EQU $0B MORPHING_WORKING
COMMENT_LABEL $0B is morphing
EQU $00 MORPHING_COMPLETE
COMMENT_LABEL $00 no more morphing
LABEL $CBBC end_of_my_ram
EQU $50 MORPH_STARTUP_DELAY
COMMENT_LABEL $50 constants used in init morph
EQU $0F MORPH_STEPS_INTRO
EQU $02 MORPH_DELAY_INIT
EQU $0F MORPH_STEPS_Z
COMMENT_LABEL $0F below is history, morphing is
EQU $7F SCREEN_TOP
LABEL $0080 SCREEN_BOTTOM
LABEL $0080 SCREEN_LEFT
EQU $7F SCREEN_RIGHT
EQU $00 SCREEN_CENTER
LABEL $F160 NORMAL_TEXT_SIZE
COMMENT_LABEL $F160 big text that is
LABEL $FB30 LITTLE_TEXT_SIZE
COMMENT_LABEL $FB30 fairly small text
LABEL $F530 SCORE_TEXT_SIZE
COMMENT_LABEL $F530 'middle' big text :-)
LABEL $0081 SPECIAL_CROCO_FULL
LABEL $0082 SPECIAL_CROCO_HALF
LABEL $0083 SPECIAL_HOME_FLY
LABEL $0084 SPECIAL_RIGHT_CROCO
LABEL $0085 SPECIAL_LEFT_CROCO
EQU $16 SPECIAL_RIGHT_SNAKE
EQU $17 SPECIAL_LEFT_SNAKE
EQU $20 SPECIAL_GIRL
COMMENT_LABEL $20 note: the $20 in this and the next two
EQU $20 SPECIAL_GIRL_RIGHT
COMMENT_LABEL $20 is ANDed and compared to...
EQU $21 SPECIAL_GIRL_LEFT
EQU $40 SPECIAL_DIVE
COMMENT_LABEL $40 note: the $40 in this and the next two
EQU $40 SPECIAL_DIVE_UP
COMMENT_LABEL $40 is ANDed and compared to...
EQU $41 SPECIAL_DIVE_DOWN
LABEL $00EA SCALE_FACTOR_GRID
COMMENT_LABEL $00EA the virtual grid, which everything is = in
LABEL $0091 SCALE_FACTOR_GAME
COMMENT_LABEL $0091 every (nearly) positioning is made with
EQU $1C SCALE_FACTOR_HOME
COMMENT_LABEL $1C scale factor for drawing the homes
LABEL $0083 SCALE_IN_HOME
COMMENT_LABEL $0083 scale factor for objects within an home
EQU $06 SCALE_FACTOR_SPRITE
COMMENT_LABEL $06 all sprites are drawn using this scale factor
EQU $70 SCALE_FACTOR_VECTOR_MORPH
COMMENT_LABEL $70 scale factor for morphing objects...
EQU $70 BOUNDARY_HI
COMMENT_LABEL $70 right boundary of playfield
LABEL $0086 BOUNDARY_LO
COMMENT_LABEL $0086 left boundary of playfield
EQU $05 MAX_SPRITE_OFFSET
COMMENT_LABEL $05 supposed to maximal sprite offset
EQU $19 SPRITE_BLOW_UP
COMMENT_LABEL $19 thru this sprites get a possible max of 5 * 25 = 125 (pretty near 127...)
EQU $08 HOME_BLOW_UP
COMMENT_LABEL $08 ...
EQU $0C VEC_BLOWUP
COMMENT_LABEL $0C max vector 5 for now, double == 10 times 12 = 120, max would be 128...
EQU $10 GRID_SIZE_GAME
COMMENT_LABEL $10 (10*($ea/$91)), for SCALE_FACTOR_GRID
EQU $0A GRID_SIZE
COMMENT_LABEL $0A for scale factor $ff
LABEL $00B2 HOME1_POS_LEFT
LABEL $00C1 HOME1_POS_RIGHT
LABEL $00D2 HOME2_POS_LEFT
LABEL $00E1 HOME2_POS_RIGHT
LABEL $00F3 HOME3_POS_LEFT
EQU $04 HOME3_POS_RIGHT
EQU $14 HOME4_POS_LEFT
EQU $25 HOME4_POS_RIGHT
EQU $35 HOME5_POS_LEFT
EQU $46 HOME5_POS_RIGHT
EQU $01 HEADING_RIGHT
EQU $02 HEADING_LEFT
EQU $03 HEADING_DOWN
EQU $04 HEADING_UP
LABEL $00A0 FROG_INIT_YPOS
EQU $06 FROG_INIT_XPOS
LABEL $A006 FROG_INIT_POS
EQU $0C FROG_INIT_YPOS_BAND
COMMENT_LABEL $0C home band is twelf (in memory)
EQU $07 FROG_INIT_XPOS_BAND
COMMENT_LABEL $07 six is middle
LABEL $0C07 FROG_INIT_POS_BAND
EQU $10 FROG_X_JUMP
EQU $10 FROG_Y_JUMP
EQU $09 FROG_SIZEX_RIGHT
EQU $09 FROG_SIZEX_LEFT
EQU $09 FROG_SIZEX_DOWN
EQU $09 FROG_SIZEX_UP
EQU $6E FROG_RIGHT_OUT
LABEL $0092 FROG_LEFT_OUT
EQU $77 SCORE_YPOS
LABEL $0088 SCORE_XPOS
EQU $77 LEVEL_YPOS
LABEL $00E2 LEVEL_XPOS
EQU $77 FROGS_YPOS
EQU $43 FROGS_XPOS
EQU $6A HOME_Y_POS
EQU -$50 HOME_X_POS
EQU $24 HOME_X_WIDTH
EQU $50 MY_PRINT_TEXT_WIDTH
EQU -$05 MY_PRINT_TEXT_HEIGHT
EQU $01 MY_MAKROS_I
EQU $19 MAX_LINE_NUM
LABEL $161C line_end
COMMENT_LABEL $161C #noDoubleWarn
LABEL $1608 line_start
COMMENT_LABEL $1608 #noDoubleWarn
EQU $11 MAX_LINE_NUM_16
EQU $11 game_name
LABEL $0097 entry_point
EQU $20 timeStringBASE
EQU $28 timeStringBASEEnd
EQU $28 backMainMenu
LABEL $0034 v4ecartversion
LABEL $0036 v4ecartflags
LABEL $0038 v4efontptr
LABEL $003A v4efontwidth
LABEL $003B v4efontlastchar
LABEL $003C v4estringlists
LABEL $003E v4eStorageArea
LABEL $7CC2 vec4SaveBuffer
LABEL $0040 v4eStorageSize
LABEL $0042 v4eStorageLoaded
EQU $44 v4eStorageID
COMMENT_LABEL $44 fcb      "MAL1"; ; 4 bytes storage identifier
EQU $48 levelStringBASE
EQU $51 levelStringBASEEnd
EQU $51 continue_string
EQU $51 pressButton
EQU $5E defaultValuesEeprom
LABEL $0068 copyDefaults
LABEL $0083 copyEvenMore
LABEL $0088 copyMore
LABEL $2D95 initMoveTable_addresses
LABEL $02DD gimickTable
LABEL $00B6 noignore
LABEL $00C5 noScoreDefaults
LABEL $00C5 nov4e
LABEL $7C7D COPY_RAM_TO_VECROM
LABEL $1CD4 checkEprom
LABEL $0008 EEPROM_STORESIZE_OPTIONS
COMMENT_LABEL $0008 8 only 7 bytes must be used, last byte is always a generated checksum
LABEL $0000 EEPROM_OPTION_BLOCK
LABEL $1D22 eeprom_load_option
LABEL $00F1 donotSaveagain
LABEL $0020 EEPROM_STORESIZE_HS
COMMENT_LABEL $0020 32 only 31 bytes must be used, last byte is always a generated checksum
LABEL $0008 EEPROM_HS1_BLOCK
LABEL $1D1C eeprom_load_highscore
LABEL $0028 EEPROM_HS2_BLOCK
LABEL $5CE0 emptyStreamInMove
LABEL $011B new_game
LABEL $0FEB init_vars
LABEL $1902 init_screen
LABEL $0124 attractEnter
LABEL $10C0 setup_level
LABEL $0144 NoSavecheckAndOut
LABEL $23B1 savePlayer
LABEL $0144 restart_game
LABEL $74C1 gameStartMusic
LABEL $5C9A init_ym_sound
LABEL $015A main_loop
LABEL $0164 LF19E4
LABEL $0189 noJoystickQueryNeeded
LABEL $16D2 query_joystick
LABEL $042D draw_objects
LABEL $0298 nogimickDisplay
LABEL $01ED nogimickInit
LABEL $01EA noGimickreset
LABEL $0227 gstillActive
LABEL $025F outOfGimick
LABEL $0253 no_anim_change_gimick
LABEL $141F move_wait_draw_vlc_unloop
LABEL $16A0 calibration
LABEL $7508 KarlGimmickSound
LABEL $166D play_sfx_x_if_nothing_else
LABEL $0298 no_change11
LABEL $02A5 noSnakeSound
LABEL $74F8 KarlSnakeNoise_Sound
LABEL $02B6 noWaveSound
LABEL $74FE KarlWaveNoise_Sound
LABEL $162D do_my_sound
LABEL $02B9 main_loop_enter
LABEL $02D5 attractOver
LABEL $0309 displayButton
COMMENT_LABEL $0309 takes 3700 cycles to display
LABEL $02EB pacman
LABEL $02F0 worm
LABEL $02F5 ghost
LABEL $02FA pacman2
LABEL $02FF worm2
LABEL $0304 ghost2
LABEL $378F pacman1a_object
LABEL $3881 worm1a_object
LABEL $3807 ghost1a_object
LABEL $0324 noblinkChange
LABEL $031F go60in
LABEL $566C sync_Print_Str_d
LABEL $0342 do_score
LABEL $0363 do_score_goon15
LABEL $0371 noMoveFrog
LABEL $59F5 move_frog
LABEL $541C zahlen2
LABEL $0382 noAtt315
LABEL $03EE noAttJmp315
LABEL $0384 score_draw_move15
LABEL $0395 LF4A518
LABEL $03B1 LF4CB18
LABEL $03AD LF4C718
LABEL $547B zahlen2_end
LABEL $0013 ZAHLEN_MAX
LABEL $03EA LF50A18
LABEL $03CE LF4EB18
LABEL $03D3 to9_318
LABEL $03EE no_score_print15
LABEL $03F3 timer_death
LABEL $03F5 draw_frog_move_timer
LABEL $007A DIE_TIME
LABEL $03FD die_set_2
LABEL $1E7A frog_dead
LABEL $040C not_lost_yet2
LABEL $12B5 game_lost
LABEL $1060 init_new_frog_vars
LABEL $0426 initNext22
LABEL $74C5 inGameMusic1
LABEL $042C doneHere22
LABEL $043D entry_timer_count_down
LABEL $0460 do_collision_check
LABEL $05C4 out_here
LABEL $0478 collision_loop
LABEL $0491 end_no_collision_detected
COMMENT_LABEL $0491 no collision detected, is that good?
LABEL $047C collision_loop1
LABEL $049A frog_lower
COMMENT_LABEL $049A frog is on the left
LABEL $0487 frog_higher
COMMENT_LABEL $0487 otherwise frog is on the right
LABEL $04A0 collision_detected
COMMENT_LABEL $04A0 ok, a collision happened, check if good or bad
LABEL $04FB die_drown
LABEL $0497 end_no_collision_detected_really
LABEL $050A transporting
COMMENT_LABEL $050A no we are 'riding' some object
LABEL $04C2 no_special_test_c
LABEL $04B8 no_right_snake
LABEL $0505 die_snake
LABEL $001F DIE_CAR
LABEL $04C4 die_set
LABEL $04C6 die
COMMENT_LABEL $04C6 the frog is lost
LABEL $04D8 not_lost_yet
LABEL $04ED initNext27
LABEL $04F3 doneHere27
LABEL $04F6 die_out
LABEL $002F DIE_OUT
LABEL $003E DIE_DROWN
LABEL $0500 die_croco
LABEL $005A DIE_CROCO
LABEL $004A DIE_SNAKE
LABEL $052E no_special_test
LABEL $051C no_left_croco
LABEL $0596 _no_snake_
LABEL $052A no_right_croco
LABEL $052E no_dived_turtle
LABEL $055A _no_girl_
LABEL $0541 Abs_b28
LABEL $0548 leave_here28
LABEL $054C girl_collision
LABEL $74F5 KarlGirlGot_Sound
LABEL $1672 play_sfx_x
LABEL $0581 no_log_right_snake
LABEL $0574 Abs_b30
LABEL $057B leave_here30
LABEL $0589 Abs_b31
LABEL $0590 leave_here31
LABEL $05BE band_minus_one
LABEL $05B6 band_plus_one
LABEL $2E8E homes
LABEL $05D1 home_draw_move
LABEL $05D7 _DRAW_VLA_home
LABEL $05F7 _DRAW_END_home
LABEL $05EE LF3F4_home1
LABEL $05FA LF3F4_home2
LABEL $0655 no_timer_change
LABEL $063C not_dive_timer_change
LABEL $0655 otter_no_timer_change
LABEL $0661 no_streaming_here
LABEL $5D11 STREAM_PART_1
LABEL $0666 pattern_line_move1
LABEL $0012 HARDMODE
LABEL $0699 hardModeDone_1n
LABEL $0696 no_new_life_1n
LABEL $7502 Karl_NewHigScoreSound
LABEL $06A3 line_1_LF3F4
LABEL $06BF pattern_line_move2
LABEL $06D8 line_2_LF3F4_e
LABEL $0718 die_not_time
LABEL $0709 go_on_timer1
LABEL $74FB KarlTimeOut_Sound
LABEL $0722 time_line_move
LABEL $0745 no_timerDraw
LABEL $073F line_3_LF3F4
LABEL $0757 nexthome
LABEL $074E no_object_in_1_house_org
LABEL $08F8 nonexthome
LABEL $0784 no_new_animation_phase_home_1
LABEL $077A new_animation_phase_home_1
LABEL $079F unloop_start_addressh1
LABEL $001E LENGTH_OF_HEADER
LABEL $079B home_object_move_1
EQU $14 ONE_LINE_LENGTH
LABEL $07BD JUMP_INTO_ALL49
LABEL $07BD JUMP_INTO_1649
LABEL $07D1 JUMP_INTO_1549
LABEL $07E5 JUMP_INTO_1449
LABEL $07F9 JUMP_INTO_1349
LABEL $080D JUMP_INTO_1249
LABEL $0821 JUMP_INTO_1149
LABEL $0835 JUMP_INTO_1049
LABEL $0849 JUMP_INTO_0949
LABEL $085D JUMP_INTO_0849
LABEL $0871 JUMP_INTO_0749
LABEL $0885 JUMP_INTO_0649
LABEL $0899 JUMP_INTO_0549
LABEL $08AD JUMP_INTO_0449
LABEL $08C1 JUMP_INTO_0349
LABEL $08D5 JUMP_INTO_0249
LABEL $08E9 JUMP_INTO_0149
LABEL $08F1 no_object_in_1_house
LABEL $08F8 all_home_objects_done
LABEL $09AD no_otter_in_level
LABEL $091E destroy_otter
LABEL $09AD finnished_otter_stuff
LABEL $090E otter_is_being_displayed
LABEL $092C display_otter
LABEL $0954 display_otter_1
LABEL $006A DIE_MOLE
LABEL $0978 onot_lower_out_of_bounds
LABEL $097E obound_test_done
LABEL $097E onot_higher_out_of_bounds
LABEL $09A4 no_anim_change_otter
LABEL $09AD otter_draw_done
LABEL $0A89 no_snake
LABEL $09ED snot_lower_out_of_bounds
LABEL $09E2 snake_wait
LABEL $09F4 snake_done_no_snake_next_round
LABEL $09F1 snot_higher_out_of_bounds
LABEL $0A55 go_on_snake
LABEL $0A2A switch_to_left_snake
LABEL $09FF switch_to_right_snake
LABEL $46CA snake1a_object
LABEL $0A71 snake_all_done
LABEL $47F2 snake3a_object
LABEL $0A7E goOnSnameDisplay
LABEL $0A78 LF33D_11
LABEL $0A85 no_snakeDisplay
LABEL $0A89 entry_level_done
LABEL $0A8C next_object
LABEL $0ABF not_lower_out_of_bounds
LABEL $0ACD now_check_for_girl
LABEL $0ACB higherOutOfBounds
LABEL $0B39 not_higher_out_of_bounds2
LABEL $0B02 no_girl_
LABEL $0AEB girl_might_be_displayed
COMMENT_LABEL $0AEB check if the girl will be displayed
LABEL $0AE5 is_currently_displayed
LABEL $3477 girl1a_object
LABEL $0B31 no_snake_
LABEL $0B02 now_check_for_snake
LABEL $0B31 nothingSpecial
LABEL $0B16 snake_might_be_displayed
COMMENT_LABEL $0B16 check if the snake will be displayed
LABEL $0B10 snake_is_currently_displayed
LABEL $0B37 bound_test_done
LABEL $0B37 not_higher_out_of_bounds
LABEL $0B4D noIntermissionNow
LABEL $0B48 noSnakeBla
LABEL $0B72 doNotDraw
LABEL $0B67 no_animation_move
LABEL $0B51 new_animation_phase
LABEL $0D7F anim_no_next
LABEL $0B7B goOnDraw
LABEL $0B8A unloop_start_address1
LABEL $0B86 objects_not_all_done_move
LABEL $0B86 move_sprite_1
LABEL $1432 header_start
COMMENT_LABEL $1432 #noDoubleWarn
LABEL $1450 header_end
COMMENT_LABEL $1450 #noDoubleWarn
LABEL $0BA8 JUMP_INTO_ALL81
LABEL $0BA8 JUMP_INTO_2481
LABEL $0BBC JUMP_INTO_2381
LABEL $0BD0 JUMP_INTO_2281
LABEL $0BE4 JUMP_INTO_2181
LABEL $0BF8 JUMP_INTO_2081
LABEL $0C0C JUMP_INTO_1981
LABEL $0C20 JUMP_INTO_1881
LABEL $0C34 JUMP_INTO_1781
LABEL $0C48 JUMP_INTO_1681
LABEL $0C5C JUMP_INTO_1581
LABEL $0C70 JUMP_INTO_1481
LABEL $0C84 JUMP_INTO_1381
LABEL $0C98 JUMP_INTO_1281
LABEL $0CAC JUMP_INTO_1181
LABEL $0CC0 JUMP_INTO_1081
LABEL $0CD4 JUMP_INTO_0981
LABEL $0CE8 JUMP_INTO_0881
LABEL $0CFC JUMP_INTO_0781
LABEL $0D10 JUMP_INTO_0681
LABEL $0D24 JUMP_INTO_0581
LABEL $0D38 JUMP_INTO_0481
LABEL $0D4C JUMP_INTO_0381
LABEL $0D60 JUMP_INTO_0281
LABEL $0D74 JUMP_INTO_0181
LABEL $0D82 objects_all_done
LABEL $0D8F do_girl_stuff
LABEL $0D8D no_girl
LABEL $0D8D girl_allready_done
LABEL $0DDF do_mainFrogDraw
LABEL $0DD8 no_animation_moveg
LABEL $0DC0 new_animation_phaseg
LABEL $0F94 finaly_done_draw
LABEL $0DFF keep_intensity
LABEL $0E22 no_timer_death
LABEL $0E79 no_fly_in_level
LABEL $0E79 finnished_fly_stuff2
LABEL $0E67 fly_is_being_displayed
LABEL $16C8 getMyRandom
LABEL $0E38 home_got
COMMENT_LABEL $0E38 now we have a random home...
LABEL $0E40 test_next_house
LABEL $0E52 home_is_empty
COMMENT_LABEL $0E52 now we got a 'random' empty home address in B,U
LABEL $0E4A not_last_home_yet
LABEL $0E75 finnished_fly_stuff
LABEL $38D6 fly1a_object
LABEL $0E65 home_ffull
LABEL $0ED2 no_croco_in_level
LABEL $0ED2 finnished_croco_stuff2
LABEL $0EC0 croco_is_being_displayed
LABEL $0E91 chome_got
COMMENT_LABEL $0E91 now we have a random home...
LABEL $0E99 ctest_next_house
LABEL $0EAB chome_is_empty
COMMENT_LABEL $0EAB now we got a 'random' empty home address in B,U
LABEL $0EA3 cnot_last_home_yet
LABEL $0ECE finnished_croco_stuff
LABEL $49EA crocoh1a_object
LABEL $0EBE home_cfull
LABEL $0F04 no_dive_change
LABEL $0EDE next_dive_object
LABEL $0F04 all_objects_done
LABEL $0F04 diving_done
LABEL $0F83 finnish_otter_timer_stuff
LABEL $0F1C band_got
COMMENT_LABEL $0F1C now we have a random river band...
LABEL $0F2A object_random_select_init
LABEL $0F2C object_random_select
LABEL $0F30 no_zero_object
LABEL $0F34 object_random_select_done
LABEL $0F3E got_second_log
LABEL $4AD6 otter1a_object
LABEL $0F7B destroy_timer_otter
LABEL $0F70 Abs_b115
LABEL $0F77 leave_here115
LABEL $0F81 timer_otter_ok
LABEL $0F8A draw_frog_move
LABEL $0F95 oneFrog_move_init
LABEL $0FC4 clearMyScore
LABEL $0011 SPACE
LABEL $101F nextHomeIni
LABEL $104C noTrainingMode
LABEL $104E continue_level
LABEL $1059 noHardMode
LABEL $2FD1 frogger_up
LABEL $2EBB frogger_up_offset
LABEL $003C FIRST7
LABEL $10DE no_reinit_level
LABEL $10DA reinit_level
LABEL $008B LEVEL_DATA_LENGTH
COMMENT_LABEL $008B length of one level in byte
LABEL $4B60 level1_data
COMMENT_LABEL $4B60 verified
LABEL $113D allData
LABEL $5410 level_done_data
LABEL $113F _loop1
LABEL $1147 _loop2
LABEL $11A5 move_on
LABEL $4B02 object_table
LABEL $117A this_is_no_dive_object
LABEL $11B9 doTheRest
LABEL $11C6 error_list_to_long
LABEL $1265 no_reinit_stuff
LABEL $11D6 fly_available
LABEL $11E2 fly_go_on
LABEL $11EC croco_available
LABEL $11F8 croco_go_on
LABEL $1221 snake_go_on
LABEL $1249 girl_go_on
LABEL $003A GIRL_SPRING_TIMER
COMMENT_LABEL $003A how often does the girl hop on her log
LABEL $1257 noroll1
LABEL $126D no_girl_on_this_level
LABEL $1277 no_snake_on_this_level
LABEL $1281 no_otter_on_this_level
LABEL $1293 countOn1
LABEL $129C nextBand1
LABEL $129F countOn2
LABEL $12A8 nextBand2
LABEL $12AB countOn3
LABEL $12B4 nextBand3
LABEL $12E9 checkDone
LABEL $12E4 wasDeadAlready
LABEL $12BE otherPlayerjustDied
LABEL $1317 gameOverLoop
LABEL $1A75 checkHS2
LABEL $12C3 died_too
LABEL $12DD initNext124
LABEL $12E3 doneHere124
LABEL $12E9 reallyOver
LABEL $12E9 no_new_high
LABEL $1312 new_game2
LABEL $1314 getOutToNewGame
LABEL $1317 end_of_end_of_game
LABEL $74E5 gameOverMusic
LABEL $1326 game_over_loop1
LABEL $168B do_csa_sound_startup
LABEL $5CE1 oneYMRound
LABEL $133F usethatintensity
LABEL $29DD game_over_string
LABEL $135F no_y_scale_now
LABEL $136A use_y
LABEL $1378 use_x
LABEL $13A2 noMorph1
LABEL $2E58 morph_countdown1
LABEL $24D9 set_up_morphing
LABEL $13A2 game_over_loop2
LABEL $1403 noMorph3
LABEL $141A new_game2_stack
LABEL $254B do_one_morph_step_16
LABEL $13FB noMorph2
LABEL $1402 gameoverDone
LABEL $1432 unloop_start_addressSub
LABEL $142C move_sprite_rest
LABEL $1450 JUMP_INTO_ALL135
LABEL $1450 JUMP_INTO_24135
LABEL $1464 JUMP_INTO_23135
LABEL $1478 JUMP_INTO_22135
LABEL $148C JUMP_INTO_21135
LABEL $14A0 JUMP_INTO_20135
LABEL $14B4 JUMP_INTO_19135
LABEL $14C8 JUMP_INTO_18135
LABEL $14DC JUMP_INTO_17135
LABEL $14F0 JUMP_INTO_16135
LABEL $1504 JUMP_INTO_15135
LABEL $1518 JUMP_INTO_14135
LABEL $152C JUMP_INTO_13135
LABEL $1540 JUMP_INTO_12135
LABEL $1554 JUMP_INTO_11135
LABEL $1568 JUMP_INTO_10135
LABEL $157C JUMP_INTO_09135
LABEL $1590 JUMP_INTO_08135
LABEL $15A4 JUMP_INTO_07135
LABEL $15B8 JUMP_INTO_06135
LABEL $15CC JUMP_INTO_05135
LABEL $15E0 JUMP_INTO_04135
LABEL $15F4 JUMP_INTO_03135
LABEL $1608 JUMP_INTO_02135
LABEL $161C JUMP_INTO_01135
LABEL $1E17 sfx_doframe_intern_3
LABEL $1638 next_reg160
LABEL $1656 inc_reg160
LABEL $166C doneSound160
LABEL $168A no_new_12
LABEL $167D storeO_12k
LABEL $168D do_csa_startup
LABEL $1697 LF19E161
LABEL $1779 my_move_to_d
LABEL $1718 queryHW163
LABEL $1778 attractDoneHere163
LABEL $1708 joyIsY163
LABEL $1703 xisnegative163
LABEL $1713 yisnegative163
EQU $08 DIGITAL_JOYTICK_LOOP_MIN
LABEL $1721 waitLoopV163
LABEL $1739 yReadDone163
LABEL $1749 noymove163
LABEL $1752 waitLoopH163
LABEL $176A xReadDone163
LABEL $1778 noxmove163
LABEL $178C LF33D164
LABEL $1791 shutup
LABEL $17A6 coords_list
LABEL $1820 oneTwinkleStep
LABEL $1895 twinkleDone
LABEL $186A noOverflow1
LABEL $1884 noOverflow2
LABEL $1896 initTwinkler
LABEL $18C1 noTwinkleInit
LABEL $18C2 twinklerpositions
LABEL $191C initNextTwinkle
LABEL $1938 douseit
LABEL $7BD3 messages
LABEL $1960 init_screen_loop_1
LABEL $1973 no_new_music_1
LABEL $7AA8 yankee
LABEL $1973 doNotPlayMusic172
LABEL $1981 doNotPlayMusic173
LABEL $1992 doNextTwinkle
LABEL $19BA noAttract
LABEL $19AB doAtta1
LABEL $1AF3 doAttractMode
LABEL $78D6 FroggerLogo_data
LABEL $25E6 draw_raster_image
LABEL $19F6 incInt
LABEL $19FE goOnInta
LABEL $19E2 changeStringPointer
LABEL $1A1F no_morph_display
LABEL $1A4C dooptionss_screen
LABEL $1A6E exit_init_screen_1
COMMENT_LABEL $1A6E otherwise proceed
LABEL $1A46 do_highscore_screen
LABEL $7C6C goback
LABEL $2656 highscores_screen
LABEL $577F option_screen
LABEL $1AE5 noHSOptio2n
LABEL $1A8C torunamentHSchs2
LABEL $1A96 compareNext
LABEL $1AA4 putHSToX
LABEL $1AE6 copyHSEntry
LABEL $28C7 convertDToAscii
LABEL $1AD9 tournamentSave
LABEL $1AD1 hardmodeSave
LABEL $1ADF doTheSave
LABEL $1CEA eeprom_save_highscore
LABEL $1AEA contcopyhs
LABEL $1AF9 reloadAt
LABEL $2A7B attractLevels
LABEL $1B0C alevelGot
EQU $00 GAMCRT
COMMENT_LABEL $00 Cartridge ROM ($0000-$7fff = 32k)
LABEL $C800 RAM
COMMENT_LABEL $C800 Internal RAM  ($c800-$cbff = 1k)
LABEL $C880 LASRAM
COMMENT_LABEL $C880 Free RAM      ($c880-stack)
LABEL $F000 PWRUP
COMMENT_LABEL $F000 Executive ROM ($f000-$ffff = 4k)
LABEL $D000 CNTRL
COMMENT_LABEL $D000 ORB / IRB - Output Register B / Input Register B
LABEL $D001 DAC
COMMENT_LABEL $D001 ORA / IRA - Output Register A / Input Register A
LABEL $D002 DCNTRL
COMMENT_LABEL $D002 DDRB      - Data Direction Register B
LABEL $D003 DDAC
COMMENT_LABEL $D003 DDRA      - Data Direction Register A
LABEL $D004 T1LOLC
COMMENT_LABEL $D004 T1C-L     - Timer 1 Counter/Latch Low byte
LABEL $D005 T1HOC
COMMENT_LABEL $D005 T1C-H     - Timer 1 Counter High byte
LABEL $D006 T1LOL
COMMENT_LABEL $D006 T1L-L     - Timer 1 Latch Low byte
LABEL $D007 T1HOL
COMMENT_LABEL $D007 T1L-H     - Timer 1 Latch High byte
LABEL $D008 T2LOLC
COMMENT_LABEL $D008 T2C-L     - Timer 2 Counter/Latch Low byte
LABEL $D009 T2HOC
COMMENT_LABEL $D009 T2C-H     - Timer 2 Counter High byte
LABEL $D00A SHIFT
COMMENT_LABEL $D00A SR        - Shift Register
LABEL $D00B ACNTRL
COMMENT_LABEL $D00B ACR       - Auxiliary Control Register
LABEL $D00C PCNTRL
COMMENT_LABEL $D00C PCR       - Peripheral Control Register
LABEL $D00D IFLAG
COMMENT_LABEL $D00D IFR       - Interrupt Flag Register
LABEL $D00E IENABL
COMMENT_LABEL $D00E IER       - Interrupt Enable Register
LABEL $2A03 DS1W_RESETDUR
COMMENT_LABEL $2A03 Reset Pulse duration
LABEL $D002 DS1W_PRESDUR
COMMENT_LABEL $D002 Presence Pulse duration
EQU $78 DS1W_TSLOTDUR
COMMENT_LABEL $78 Time Slot duration
EQU $33 DS1W_READROM
LABEL $00CC DS1W_SKIPROM
EQU $55 DS1W_MATCHROM
LABEL $00F0 DS1W_SEARCHROM
LABEL $1B21 ds1w_open
LABEL $1B29 ds1w_close
LABEL $1B2E ds1w_reset
LABEL $1B39 dsreset_loop1
LABEL $1B64 ds1w_notpresent
LABEL $1B4C dsreset_loop2
LABEL $1B56 dsreset_loop3
LABEL $1B5E ds1w_present
LABEL $1B67 ds1w_txbyte
LABEL $1B6B ds1w_txbits
LABEL $1B83 ds1w_txbit1
LABEL $1B6E ds1w_txbit0
LABEL $1B76 dstx0_loop
LABEL $1B8F dstx1_loop
LABEL $1B98 ds1w_rxbyte
LABEL $1B9C ds1w_rxbits
LABEL $1BAE dsrx_loop
EQU $0F DS2431_WRITESP
COMMENT_LABEL $0F Write bytes to Scratch Pad
EQU $55 DS2431_COPYSP
COMMENT_LABEL $55 Copy entire Scratch Pad to EEPROM
LABEL $00AA DS2431_READSP
COMMENT_LABEL $00AA Read bytes from Scratch Pad
LABEL $00F0 DS2431_READMEM
COMMENT_LABEL $00F0 As READSP, but copies EEPROM to SP first
LABEL $983A DS2431_COPYDUR
COMMENT_LABEL $983A $3a98 = 15000 cycles = 10ms (A1: 12.5ms, A2 and later: 10ms)
LABEL $1BB7 ds2431_load
LABEL $1BE0 ds2431load_exit
LABEL $1BD8 ds2431load_loop
LABEL $1BE5 ds2431_save
LABEL $1BEB ds2431_save_all
LABEL $1BF0 ds2431_scratchpadloop
LABEL $1C64 dssave_exit
LABEL $1C08 dssave_loop
LABEL $1C54 dssave_loop2
LABEL $1C69 ds2431_verify
LABEL $1C95 dsverify_exit
LABEL $1C8A dsverify_loop
LABEL $0087 EEPROM_CHECKSUM
COMMENT_LABEL $0087 any value other than $00 or $e0
LABEL $1C9A resetEprom
LABEL $1CD0 noDevice1
LABEL $1CC8 noDSDevice
LABEL $1CF1 eeprom_save_options
LABEL $7C88 store_score
LABEL $1CD1 cleanStart
LABEL $1CE7 notPresent
LABEL $1D56 toNewEeprom
LABEL $1D06 eepromSave_1
LABEL $1D0A eesave_loop
LABEL $1D22 eeprom_load_1
LABEL $1D37 eeprom_load_2
LABEL $1D3E eeload_loop
LABEL $1D55 doneEEL
LABEL $1D7A fromNewEeprom
LABEL $1D5E convertNextScore
LABEL $1DD7 Encode3chars
LABEL $2923 toConversion5
LABEL $298B convertAsciiToD
LABEL $1D84 convertNextScore2
LABEL $1DA8 Decode3chars
LABEL $1DB2 decode_zero
LABEL $1DC6 decode_one
LABEL $1DD2 decode_two
LABEL $1DDF encode_zero
LABEL $1DED encode_one
LABEL $1E02 encode_two
LABEL $C83F SHADOW_BASE
LABEL $1E07 sfx_endofeffect_3
LABEL $1E16 noay3
LABEL $1E2B sfx_checktonefreq_3
LABEL $1E34 sfx_checknoisefreq_3
LABEL $1E3D sfx_checkvolume_3
LABEL $1E44 sfx_checktonedisable_3
LABEL $1E5A sfx_enabletone_3
LABEL $1E4B sfx_disabletone_3
LABEL $1E69 sfx_enablenoise_3
LABEL $1E5C sfx_checknoisedisable_3
LABEL $1E60 sfx_disablenoise_3
LABEL $1E72 Death_BOX
LABEL $1EB4 notMoving
LABEL $1E96 continue_left_jump_d
LABEL $1E9E continue_right_jump_d
LABEL $1EA6 continue_up_jump_d
LABEL $1EAE continue_down_jump_d
LABEL $1ECA waterDeathSound
LABEL $1EC2 laneDeathSound
LABEL $74EC Karl_DeathLane_Sound
LABEL $1ED5 startDeathing
LABEL $74EF Karl_DeathWater_Sound
LABEL $34E5 frogDeathObject_0
LABEL $1EF4 death_screen_loop1
LABEL $1F09 no_streaming_4
LABEL $2325 drawBox
LABEL $29F2 cause_strings
LABEL $1F5B no_list
LABEL $1F8E animstagedone
LABEL $1F9C deathDone
LABEL $1F99 no_attract_2
LABEL $1F9C exit_to_reinit
LABEL $1FB4 no_girlyReset1
LABEL $205A exitDeathAtt
LABEL $2057 noHSOption
LABEL $296D scrollOneRight
LABEL $2938 addConversion0
LABEL $1FF2 notEditAllowed
LABEL $1FFD torunamentHS
LABEL $205B highScoreFound
LABEL $2055 noHSOptionPre
LABEL $2347 check2Player
LABEL $206A addHundred
LABEL $2085 no_change185
LABEL $2086 frog_in_home
LABEL $2096 initNext186
LABEL $74D1 reachedHomeMusicNormal
LABEL $209C doneHere186
LABEL $20BA no_fly_bonus
LABEL $74D9 reachedHomeMusicFly
LABEL $20D6 no_girl_bonus
LABEL $20D3 happy
LABEL $74D5 reachedHomeMusicGirl
LABEL $74DD reachedHomeHappyMusic
LABEL $20E2 initNext189
LABEL $20E5 doneHere189
LABEL $20F5 LF861
LABEL $2101 LF86D
LABEL $210C LF878
LABEL $2124 timer_bonus
LABEL $2131 scoreAdd
LABEL $215E noScoreAdd
LABEL $2158 no_change190
LABEL $7505 KarlTimerBonusSound
LABEL $2170 no_streaming_3
LABEL $223C noBonusDisplay
LABEL $2230 n200
LABEL $2199 nodoublebonus
LABEL $222C n200200
LABEL $21A6 noAdd
LABEL $21AC goOnScore
LABEL $21BD noXAdjust
LABEL $21CD LF4A5194
LABEL $21E9 LF4CB194
LABEL $21E5 LF4C7194
LABEL $2222 LF50A194
LABEL $2206 LF4EB194
LABEL $220B to9_3194
LABEL $2234 Timer_BOX
LABEL $2262 no_attract_1
LABEL $2295 no_girlyReset2
LABEL $2296 level_complete
LABEL $22A5 again100198
LABEL $74E1 levelDoneMusic
LABEL $22C4 level_loop
LABEL $22D1 no_streaming_21
LABEL $22DB overbox
LABEL $22D3 Level_BOX_1
LABEL $29E7 level_complete_text
LABEL $230D testmusic
LABEL $231C level_loop_done
LABEL $2315 testdondeon
LABEL $2321 no_new_life1
LABEL $239C checkAndOut
LABEL $236B savePlayerTwo
LABEL $239D stayWithPlayerOtherIsDead2
LABEL $2364 justDied_skip1
LABEL $247B startPlayer
LABEL $237D savePlayerDone
LABEL $23A7 stayWithPlayerOtherIsDead1
LABEL $2378 justDied_skip2
LABEL $2390 loadPlayerTwo
LABEL $241D loadPlayer
LABEL $2396 loadPlayerDone
LABEL $23CA crocoOk
LABEL $23E1 flyOk
LABEL $2415 copyHomeGoOn
LABEL $244F copyHomeGoOn_1
LABEL $245D Level_BOX
LABEL $2465 playerOne
LABEL $2470 playerTWO
LABEL $248F startPlayer_loop
LABEL $24BB usePlayerTwo
LABEL $24BE printStringOfPlayer
LABEL $24D4 outofPalyer
LABEL $24F4 A_is_high_vector_counter
LABEL $253C set_up_morphing_loop2
LABEL $2567 morphing_now_16
LABEL $2561 no_new_morph_structure
LABEL $256D delay_done_16
LABEL $25D0 no_morphing_is_last
LABEL $25CC no_morphing_is_first
LABEL $259F do_morph_loop2_16
COMMENT_LABEL $259F loop through all vector coordinates of list
LABEL $25A7 no_minus_morph_16
LABEL $25C2 no_minus_morph2_16
EQU $01 ZERO_DELAY
COMMENT_LABEL $01 delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d)
EQU $64 SCALE_MOVE
LABEL $25F0 next_line
LABEL $25F7 zeroLoop
LABEL $2621 m2d
LABEL $263F oneShiftOutForward
LABEL $2645 dummy1
LABEL $2687 highscores_screen_loop_1
LABEL $269A no_new_music_1hs
LABEL $269A doNotPlayMusic207
LABEL $26A8 doNotPlayMusic208
LABEL $2840 highscore_string
LABEL $566C sync_Print_Str_d_fixed
LABEL $26E4 viewTournamentHS
LABEL $5739 hardcore_string
LABEL $26ED goonhigm
LABEL $5724 competition_string
LABEL $2701 nextHSScore
LABEL $284B buildHighScoreTmp
LABEL $2745 noEdit
LABEL $2727 noBlinkChange
LABEL $2745 drawString
LABEL $27A0 dohseditMode
LABEL $278E hs_no_new_xpos_dis
LABEL $278B clrit
LABEL $280F exitHS
LABEL $27D5 hs_no_new_xpos
LABEL $27C6 pos_left_hse
LABEL $27B4 pos_right_hse
LABEL $280C positioning_done_hse
LABEL $280C hs_no_new_ypos
LABEL $27F8 pos_down_hse
LABEL $27E2 pos_up_hse
LABEL $27F4 letterOk_hse
LABEL $281B viewTournamentHS2
LABEL $281E goonhigm2
LABEL $2828 hsFound
LABEL $2823 addhsFound
LABEL $2869 smallerTen
LABEL $286D greater9
LABEL $2886 divide_d_by_tmp1
LABEL $2895 notZero
LABEL $28A8 divide_by_zero213
LABEL $28A0 divide_next213
LABEL $289A divide_by_zero1213
LABEL $28AB divide_end213
LABEL $28AC reduceX_by_b_timesU
LABEL $28C5 endreduce
LABEL $28BB nextreduce
LABEL $28CB convertDToAsciiInY
LABEL $2947 Yleading0ToSpace
LABEL $293D next0add
LABEL $294B nextLeady0
LABEL $2958 doneyl0
LABEL $295A YleadingSpaceTo0
LABEL $295E nextLeady
LABEL $296B doneyl
LABEL $2986 doneHeresor
LABEL $298F convertAsciiToDInY
LABEL $29C4 addToX_b_timesU
LABEL $29DC addDoneX
LABEL $29D0 anotherAddX
LABEL $29F2 home_full
LABEL $2A01 wall_jump
LABEL $2A11 car
LABEL $2A21 out
LABEL $2A30 drown
LABEL $2A3C snake
LABEL $2A4C croco
LABEL $2A5C mole
LABEL $2A6C time
LABEL $2C7E level_0Attract_1
LABEL $2C11 level_0Attract_3
LABEL $2A89 level_0Attract_8
LABEL $2B8A level_0Attract_9
LABEL $2B2F level_0Attract_13
LABEL $2AD6 level_0Attract_15
LABEL $2CF7 init_screen_move1
LABEL $2D21 init_screen_move2
LABEL $2D63 init_screen_move3
LABEL $2D9F init_screen_movea
LABEL $2DD9 _0
LABEL $2DF2 _1
LABEL $2E03 _2
LABEL $2E18 _3
LABEL $2E2D _4
LABEL $2E40 _5
LABEL $2E55 _dot
LABEL $2E61 morph_countdown2
LABEL $2E6A morph_countdown3
LABEL $2E73 morph_countdown4
LABEL $2E7C morph_countdown5
LABEL $2E85 morph_countdown6
EQU $00 GIRL_X_OFFSET
LABEL $2EB9 frogger_down_offset
LABEL $2EBD frogger_left_offset
LABEL $2EBF frogger_right_offset
EQU $14 BLOW_UP_VLISTS
LABEL $2EC1 froggerDownAnim
LABEL $2ED1 frogger_down_0
LABEL $2EF9 frogger_down_1
LABEL $2F21 frogger_down_2
LABEL $2F49 frogger_down_3
LABEL $2F71 frogger_down_4
LABEL $2F99 frogger_down_5
LABEL $2ED1 frogger_down
LABEL $2FC1 froggerUpAnim
LABEL $2FD1 frogger_up_0
LABEL $2FF9 frogger_up_1
LABEL $3021 frogger_up_2
LABEL $3049 frogger_up_3
LABEL $3071 frogger_up_4
LABEL $3099 frogger_up_5
LABEL $30C1 froggerLeftAnim
LABEL $30D1 frogger_left_0
LABEL $30F9 frogger_left_1
LABEL $3121 frogger_left_2
LABEL $3149 frogger_left_3
LABEL $3171 frogger_left_4
LABEL $3199 frogger_left_5
LABEL $31C1 froggerRightAnim
LABEL $31D1 frogger_right_0
LABEL $31F9 frogger_right_1
LABEL $3221 frogger_right_2
LABEL $3249 frogger_right_3
LABEL $3271 frogger_right_4
LABEL $3299 frogger_right_5
LABEL $32C1 frog1a_in_home_sprite
LABEL $32D3 frog1a_in_home_object
LABEL $32F0 frog1b_in_home_object
LABEL $32DE frog1b_in_home_sprite
LABEL $330D frog1c_in_home_object
LABEL $32FB frog1c_in_home_sprite
LABEL $3318 frog1d_in_home_object
LABEL $3323 froggerGirl_right_0
LABEL $3345 froggerGirl_right_1
LABEL $3367 froggerGirl_right_2
LABEL $3389 froggerGirl_right_3
LABEL $33AB froggerGirl_right_4
LABEL $33CD froggerGirl_left_0
LABEL $33EF froggerGirl_left_1
LABEL $3411 froggerGirl_left_2
LABEL $3433 froggerGirl_left_3
LABEL $3455 froggerGirl_left_4
LABEL $3482 girl1a1_object
LABEL $348D girl1a2_object
LABEL $3498 girl1a3_object
LABEL $34A3 girl1a4_object
LABEL $34AE girl1b_object
LABEL $34B9 girl1b1_object
LABEL $34C4 girl1b2_object
LABEL $34CF girl1b3_object
LABEL $34DA girl1b4_object
EQU $04 DEATH_DELAY
EQU $00 DEATH_Y
EQU $00 DEATH_X
LABEL $3563 FroggerDeathSprite_0
LABEL $34EC frogDeathObject_1
LABEL $358B FroggerDeathSprite_1
LABEL $34F3 frogDeathObject_2
LABEL $35B3 FroggerDeathSprite_2
LABEL $34FA frogDeathObject_3
LABEL $35D1 FroggerDeathSprite_3
LABEL $3501 frogDeathObject_4
LABEL $35E5 FroggerDeathSprite_4
LABEL $3508 frogDeathObject_5
LABEL $35EF FroggerDeathSprite_5
LABEL $350F frogDeathObject_6
EQU -$12 NEW_D_OFFSET_Y
EQU $02 NEW_D_OFFSET_X
LABEL $35F9 FroggerDeathSprite_6
LABEL $3516 frogDeathObject_7
LABEL $3603 FroggerDeathSprite_7
LABEL $351D frogDeathObject_8
LABEL $362B FroggerDeathSprite_8
LABEL $3524 frogDeathObject_9
LABEL $3653 FroggerDeathSprite_9
LABEL $352B frogDeathObject_10
LABEL $367D FroggerDeathSprite_10
LABEL $3532 frogDeathObject_11
LABEL $3539 frogDeathObject_12
LABEL $3540 frogDeathObject_13
LABEL $3547 frogDeathObject_14
LABEL $354E frogDeathObject_15
LABEL $3555 frogDeathObject_16
LABEL $355C frogDeathObject_17
LABEL $36A7 _l_sprite
LABEL $36AF _l_object
LABEL $36B8 _e_sprite
LABEL $36C8 _e_object
LABEL $36D1 _v_sprite
LABEL $36DB _v_object
LABEL $36E4 _d_sprite
LABEL $36FA _d_object
LABEL $3703 _o_sprite
LABEL $371D _o_object
LABEL $3728 _n_sprite
LABEL $3736 _n_object
EQU $0F BLOW_UP_PACMAN
EQU $00 PACMAN_Y_OFFSET
EQU $00 PACMAN_X_OFFSET
EQU $03 PACMAN_ANIM_SPEED
EQU $0C BLOW_UP_GHOST
EQU $00 GHOST_Y_OFFSET
EQU $00 GHOST_X_OFFSET
EQU $03 GHOST_ANIM_SPEED
EQU $00 GHOST_SPEED
EQU $0C BLOW_UP_WORM
EQU $00 WORM_Y_OFFSET
EQU $00 WORM_X_OFFSET
EQU $03 WORM_ANIM_SPEED
EQU $01 WORM_SPEED
LABEL $373F PacmanSmall_0
LABEL $3753 PacmanSmall_1
LABEL $3767 PacmanSmall_2
LABEL $377B PacmanSmall_3
LABEL $3798 pacman1b_object
LABEL $37A1 pacman1c_object
LABEL $37AA pacman1d_object
LABEL $37B3 pacman1e_object
LABEL $37BC pacman1f_object
LABEL $37C5 GhostSmall_0
LABEL $37DB GhostSmall_1
LABEL $37F1 GhostSmall_2
LABEL $3810 ghost1b_object
LABEL $3819 ghost1c_object
LABEL $3822 ghost1d_object
LABEL $382B WormSmall_0
LABEL $3833 WormSmall_1
LABEL $383F WormSmall_2
LABEL $384D WormSmall_3
LABEL $385B WormSmall_4
LABEL $3869 WormSmall_5
LABEL $3875 WormSmall_6
LABEL $388A worm1b_object
LABEL $3893 worm1c_object
LABEL $389C worm1d_object
LABEL $38A5 worm1e_object
LABEL $38AE worm1f_object
LABEL $38B7 worm1g_object
LABEL $38C0 fly1a_sprite
LABEL $38F7 fly1b_object
LABEL $38E1 fly1b_sprite
LABEL $3918 fly1c_object
LABEL $3902 fly1c_sprite
LABEL $3923 fly1d_object
EQU $06 CATER_Y_OFFSET
COMMENT_LABEL $06 7
EQU $00 CATER_X_OFFSET
EQU $1C CATER_LENGTH
EQU $03 CATER_Y_OFFSET_MINUS
COMMENT_LABEL $03 7
EQU $00 CATER_X_OFFSET_MINUS
EQU $1C CATER_LENGTH_MINUS
LABEL $392E car3a_sprite
LABEL $395C caterpillar_1a_object
LABEL $39A0 caterpillar_1b_object
LABEL $3967 caterpillar_2a_object
LABEL $39AB caterpillar_2b_object
LABEL $3972 car3b_sprite
LABEL $39E4 caterpillar_1c_object
LABEL $39EF caterpillar_2c_object
LABEL $39B6 car3c_sprite
LABEL $3A28 caterpillar_1d_object
LABEL $3A33 caterpillar_2d_object
LABEL $39FA car3d_sprite
LABEL $3A3E car3a_sprite_minus
LABEL $3A6C caterpillar_m1a_object
LABEL $3AB0 caterpillar_m1b_object
LABEL $3A77 caterpillar_m2a_object
LABEL $3ABB caterpillar_m2b_object
LABEL $3A82 car3b_sprite_minus
LABEL $3AF4 caterpillar_m1c_object
LABEL $3AFF caterpillar_m2c_object
LABEL $3AC6 car3c_sprite_minus
LABEL $3B38 caterpillar_m1d_object
LABEL $3B43 caterpillar_m2d_object
LABEL $3B0A car3d_sprite_minus
EQU $19 BLOW_UP
EQU -$01 CAR3_Y_OFFSET
COMMENT_LABEL -$01 -2
EQU $01 CAR3_X_OFFSET
EQU $14 CAR3_LENGTH
EQU $04 CAR3_Y_OFFSET_PLUS
EQU $01 CAR3_X_OFFSET_PLUS
EQU $14 CAR3_LENGTH_PLUS
LABEL $3B4E car1a_sprite
LABEL $3B72 carbig_m1a_object
LABEL $3BAC carbig_m1b_object
LABEL $3B7D carbig_m3a_object
LABEL $3BB7 carbig_m3b_object
LABEL $3B88 car1b_sprite
LABEL $3BE6 carbig_m1c_object
LABEL $3BFC carbig_m3c_object
LABEL $3BC2 car1c_sprite
LABEL $3BF1 carbig_m1d_object
LABEL $3C07 carbig_m3d_object
LABEL $3C12 car1a_sprite_plus
LABEL $3C36 carbig_1a_object
LABEL $3C70 carbig_1b_object
LABEL $3C41 carbig_2a_object
LABEL $3C7B carbig_2b_object
LABEL $3C4C car1b_sprite_plus
LABEL $3CAA carbig_1c_object
LABEL $3CC0 carbig_2c_object
LABEL $3C86 car1c_sprite_plus
LABEL $3CB5 carbig_1d_object
LABEL $3CCB carbig_2d_object
EQU $03 CAR4_Y_OFFSET
COMMENT_LABEL $03 5
EQU $01 CAR4_X_OFFSET
EQU $19 CAR4_X_LENGTH
LABEL $3CD6 truck1a_sprite
LABEL $3CFC carsmall_1a_object
LABEL $3D2D carsmall_1b_object
LABEL $3D07 truck1b_sprite
LABEL $3D5E carsmall_1c_object
LABEL $3D38 truck1c_sprite
LABEL $3D69 carsmall_2a_object
LABEL $3D74 carsmall_2b_object
LABEL $3D7F carsmall_2c_object
EQU $02 VAN_Y_OFFSET
EQU $00 VAN_X_OFFSET
EQU $26 VAN_LENGTH
EQU $06 VAN_ANIM_SLOW
EQU $05 VAN_ANIM_FAST
EQU $04 VAN_ANIM_FASTEST
LABEL $3D8A van1a_sprite
LABEL $3DAE van_m1a_object
LABEL $3DF3 van_m1b_object
LABEL $3DB9 van_m2a_object
LABEL $3DFE van_m2b_object
LABEL $3DC4 van_m3a_object
LABEL $3E09 van_m3b_object
LABEL $3DCF van1b_sprite
LABEL $3E38 van_m1c_object
LABEL $3E43 van_m2c_object
LABEL $3E4E van_m3c_object
LABEL $3E14 van1c_sprite
LABEL $3E59 van_m1d_object
LABEL $3E64 van_m2d_object
LABEL $3E6F van_m3d_object
EQU -$01 SPEEDCAR_Y_OFFSET
EQU -$01 SPEEDCAR_X_OFFSET
EQU $18 SPEEDCAR_LENGTH
LABEL $3E7A moped1a_sprite
LABEL $3E9E speeder_m1a_object
LABEL $3ECF speeder_m1b_object
LABEL $3EA9 moped1b_sprite
LABEL $3F00 speeder_m1c_object
LABEL $3EDA moped1c_sprite
LABEL $3F33 speeder_m1d_object
LABEL $3F0B moped1d_sprite
LABEL $3F3E speeder_m2a_object
LABEL $3F49 speeder_m2b_object
LABEL $3F54 speeder_m2c_object
LABEL $3F5F speeder_m2d_object
LABEL $3F6A speeder_m3a_object
EQU $00 SPEEDER_M3
EQU $22 LOG_SMALL_LENGTH
EQU $00 LOG_LEFT_Y_OFFSET
LABEL $3F6A log2a_sprite
LABEL $3F88 log2b_sprite
LABEL $3FA6 log2c_sprite
LABEL $3FC4 log1a_sprite
LABEL $3FE2 log1a_object
LABEL $400B log1b_object
LABEL $3FED log1b_sprite
LABEL $4034 log1c_object
LABEL $4016 log1c_sprite
LABEL $403F log1d_object
LABEL $404A log2a_object
LABEL $4055 log2b_object
LABEL $4060 log2c_object
LABEL $406B log2d_object
LABEL $4076 log7a_object
LABEL $4081 log7b_object
LABEL $408C log7c_object
LABEL $4097 log7d_object
LABEL $40A2 log8a_object
LABEL $40AD log8b_object
LABEL $40B8 log8c_object
LABEL $40C3 log8d_object
EQU $23 RIGHT_LOG_LENGTH
LABEL $40CE log3a_sprite
LABEL $40E8 log3a_object
LABEL $410D log3b_object
LABEL $40F3 log3b_sprite
LABEL $4132 log3c_object
LABEL $4118 log3c_sprite
LABEL $413D log3d_object
LABEL $4148 log4a_sprite
LABEL $4160 log4a_object
LABEL $4183 log4b_object
LABEL $416B log4b_sprite
LABEL $41A6 log4c_object
LABEL $418E log4c_sprite
LABEL $41B1 log4d_object
LABEL $41BC log9a_object
LABEL $41C7 log9b_object
LABEL $41D2 log9c_object
LABEL $41DD log9d_object
LABEL $41E8 log10a_object
LABEL $41F3 log10b_object
LABEL $41FE log10c_object
LABEL $4209 log10d_object
EQU $1B TURTLE_LENGTH
EQU $16 SPRITE_BLOW_UP_TURTLE
EQU $13 SPRITE_BLOW_UP_TURTLE_y
LABEL $4214 turtle1a_sprite
LABEL $422C turtle1a_object
LABEL $4253 turtle1b_object
LABEL $4237 turtle1b_sprite
LABEL $427A turtle1c_object
LABEL $425E turtle1c_sprite
LABEL $4285 turtle2a_sprite
LABEL $429D turtle2a_object
LABEL $42C4 turtle2b_object
LABEL $42A8 turtle2b_sprite
LABEL $42EB turtle2c_object
LABEL $42CF turtle2c_sprite
LABEL $42F6 turtle3a_object
LABEL $4301 turtle3b_object
LABEL $430C turtle3c_object
LABEL $4317 turtle4a_object
LABEL $4322 turtle4b_object
LABEL $432D turtle4c_object
LABEL $4338 turtled1a_object
LABEL $4345 turtled1b_object
LABEL $4446 turtlea1a_object
LABEL $4352 turtled1c_object
LABEL $435F turtled2a_object
LABEL $436C turtled2b_object
LABEL $45AE turtlea2a_object
LABEL $4379 turtled2c_object
LABEL $4386 turtled3a_object
LABEL $4393 turtled3b_object
LABEL $44C8 turtlea3a_object
LABEL $43A0 turtled3c_object
LABEL $43AD turtled4a_object
LABEL $43BA turtled4b_object
LABEL $4630 turtlea4a_object
LABEL $43C7 turtled4c_object
LABEL $43D4 turtlea1a_sprite
LABEL $43E8 turtlea1b_sprite
LABEL $43FC turtlea1c_sprite
LABEL $440A turtlea1d_sprite
LABEL $4428 turtlea1e_sprite
LABEL $443C turtlea1f_sprite
LABEL $4453 turtlea1b_object
LABEL $44A1 turtleb1a_object
LABEL $4460 turtlea1c_object
LABEL $446D turtlea1d_object
LABEL $447A turtlea1e_object
LABEL $4487 turtlea1f_object
LABEL $4494 turtlea1g_object
LABEL $44AE turtleb1b_object
LABEL $44BB turtleb1c_object
LABEL $44D5 turtlea3b_object
LABEL $4523 turtleb3a_object
LABEL $44E2 turtlea3c_object
LABEL $44EF turtlea3d_object
LABEL $44FC turtlea3e_object
LABEL $4509 turtlea3f_object
LABEL $4516 turtlea3g_object
LABEL $4530 turtleb3b_object
LABEL $453D turtleb3c_object
LABEL $454A turtlea2a_sprite
LABEL $455E turtlea2b_sprite
LABEL $4572 turtlea2d_sprite
LABEL $4590 turtlea2e_sprite
LABEL $45A4 turtlea2f_sprite
LABEL $45BB turtlea2b_object
LABEL $4609 turtleb2a_object
LABEL $45C8 turtlea2c_object
LABEL $45D5 turtlea2d_object
LABEL $45E2 turtlea2e_object
LABEL $45EF turtlea2f_object
LABEL $45FC turtlea2g_object
LABEL $4616 turtleb2b_object
LABEL $4623 turtleb2c_object
LABEL $463D turtlea4b_object
LABEL $468B turtleb4a_object
LABEL $464A turtlea4c_object
LABEL $4657 turtlea4d_object
LABEL $4664 turtlea4e_object
LABEL $4671 turtlea4f_object
LABEL $467E turtlea4g_object
LABEL $4698 turtleb4b_object
LABEL $46A5 turtleb4c_object
EQU -$05 Y_OFFSET_RIGHT
EQU -$04 Y_OFFSET_LEFT
LABEL $46B2 snake1a_sprite
LABEL $46ED snake1b_object
LABEL $46D5 snake1b_sprite
LABEL $4710 snake1c_object
LABEL $46F8 snake1c_sprite
LABEL $4733 snake1d_object
LABEL $471B snake1d_sprite
LABEL $4756 snake1e_object
LABEL $473E snake1e_sprite
LABEL $4761 snake1f_object
LABEL $476C snake1g_object
LABEL $4777 snake1h_object
LABEL $4782 snake2a_object
LABEL $478D snake2b_object
LABEL $4798 snake2c_object
LABEL $47A3 snake2d_object
LABEL $47AE snake2e_object
LABEL $47B9 snake2f_object
LABEL $47C4 snake2g_object
LABEL $47CF snake2h_object
LABEL $47DA snake3a_sprite
LABEL $4815 snake3b_object
LABEL $47FD snake3b_sprite
LABEL $4838 snake3c_object
LABEL $4820 snake3c_sprite
LABEL $485B snake3d_object
LABEL $4843 snake3d_sprite
LABEL $487E snake3e_object
LABEL $4866 snake3e_sprite
LABEL $4889 snake3f_object
LABEL $4894 snake3g_object
LABEL $489F snake3h_object
LABEL $48AA snake4a_object
LABEL $48B5 snake4b_object
LABEL $48C0 snake4c_object
LABEL $48CB snake4d_object
LABEL $48D6 snake4e_object
LABEL $48E1 snake4f_object
LABEL $48EC snake4g_object
LABEL $48F7 snake4h_object
EQU $22 CROCO_LENGTH
EQU $02 CROCO_X_OFFSET
EQU -$01 CROCO_Y_OFFSET
LABEL $4902 croco3a_sprite
LABEL $4920 croco3a_object
LABEL $4949 croco3b_object
LABEL $492B croco3b_sprite
LABEL $496E croco3c_object
LABEL $4954 croco3c_sprite
LABEL $4997 croco3d_object
LABEL $4979 croco3d_sprite
LABEL $49A2 croco4a_object
LABEL $49AD croco4b_object
LABEL $49B8 croco4c_object
LABEL $49C3 croco4d_object
LABEL $49CE crocoh1a_sprite
LABEL $4A17 crocoh1b_object
LABEL $49F5 crocoh1b_sprite
LABEL $4A48 crocoh1c_object
LABEL $4A22 crocoh1c_sprite
LABEL $4A79 crocoh1d_object
LABEL $4A53 crocoh1d_sprite
LABEL $4AAA crocoh1e_object
LABEL $4A84 crocoh1e_sprite
LABEL $4AB5 crocoh1f_object
LABEL $4AC0 otter1a_sprite
LABEL $4AF7 otter1b_object
LABEL $4AE1 otter1b_sprite
LABEL $4B60 levels
LABEL $4BEB level2_data
COMMENT_LABEL $4BEB verified
LABEL $4C76 level3_data
COMMENT_LABEL $4C76 verified
LABEL $4D01 level4_data
COMMENT_LABEL $4D01 verified
LABEL $4D8C level5_data
COMMENT_LABEL $4D8C verified
LABEL $4E17 level6_data
COMMENT_LABEL $4E17 verified
LABEL $4EA2 level7_data
COMMENT_LABEL $4EA2 verified
LABEL $4F2D level8_data
COMMENT_LABEL $4F2D verified
LABEL $4FB8 level9_data
COMMENT_LABEL $4FB8 ok       non arcade conform!
LABEL $5043 level10_data
COMMENT_LABEL $5043 ok       non arcade conform!
LABEL $50CE level11_data
COMMENT_LABEL $50CE ok       non arcade conform!
LABEL $5159 level12_data
COMMENT_LABEL $5159 ok       non arcade conform!
LABEL $51E4 level13_data
LABEL $526F level14_data
LABEL $52FA level15_data
COMMENT_LABEL $52FA ;;;;;;;;;;;;
LABEL $5385 level16_data
LABEL $547B FontRow1
LABEL $54C2 FontRow2
LABEL $5509 FontRow3
LABEL $5550 FontRow4
LABEL $5597 FontRow5
LABEL $55DE FontRow6
LABEL $5625 FontRow7
EQU $02 ZERO_DELAY_P
COMMENT_LABEL $02 delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d)
EQU $47 FONT_LENGTH
LABEL $545C FONT_START_A
COMMENT_LABEL $545C // space is 1
LABEL $5606 FONT_END
LABEL $567A zeroLoop_a2
LABEL $5688 next_line_a
LABEL $5691 zeroLoop_a
LABEL $56AD LF33D214
LABEL $56B1 Print_Str_a
LABEL $56B8 LF4A5_a
LABEL $56DA LF4CB_a
LABEL $56D6 LF4C7_a
LABEL $56F7 LF50A_a
LABEL $5700 options_string
LABEL $5708 no_players_string_0
LABEL $5714 no_players_string_1
LABEL $5716 no_players_string_2
LABEL $5718 mode_string_0
LABEL $5724 mode_string_1
LABEL $5730 mode_string_2
LABEL $5739 mode_string_3
LABEL $5742 music_string_0
LABEL $574E music_string_1
LABEL $5751 music_string_2
LABEL $5755 resetHS_0
LABEL $575C resetHS_1
LABEL $5764 resetHS_2
EQU $00 PLAYER_OPTION
EQU $01 MODE_OPTION
EQU $02 MUSIC_OPTION
EQU $03 LEVEL_OPTION
EQU $04 RESET_OPTION
EQU $05 BACK_OPTION
LABEL $5769 concatStrings
LABEL $576D nextLetter
LABEL $5775 nextString
LABEL $5775 nextLetter2
LABEL $5790 option_screen_loop
LABEL $57B5 no_x_change
LABEL $5826 joystickHandleDone
LABEL $59A3 selectLevel
LABEL $591A toggleOptions
LABEL $57F5 pos_down_o
LABEL $57C2 pos_up_o
LABEL $57E4 levelSelectOk
LABEL $57E1 previousNotReset
LABEL $5817 levelSelectOk2
LABEL $5814 previousNotReset2
EQU $50 DEFAULT_INTENSITY
EQU $60 TITLE_INTENSITY
LABEL $599C checkIntensity
LABEL $5855 pl2
LABEL $5858 pls
LABEL $586D normalIntensityLevelGO
LABEL $5875 noIntensityLevel2GO
LABEL $5882 mos2
LABEL $588E mos
LABEL $588B mos3
LABEL $58AC mus2
LABEL $58AF mus
LABEL $58C4 noIntensityLevel
LABEL $58CB normalIntensityLevel
LABEL $58D3 noIntensityLevel2
LABEL $58F1 res2
LABEL $58F4 res
LABEL $596C outOptions
LABEL $5936 nextOption1
LABEL $5933 playGoOn
LABEL $5949 nextOption2
LABEL $5943 optionOk1
LABEL $5959 nextOption3
LABEL $5969 nextOption4
LABEL $5977 nov4eback
LABEL $5983 lowerTen
LABEL $59D9 flashInt
LABEL $59A0 setintcheck
LABEL $59C3 decreaseLevel
LABEL $59BC lowLevel
LABEL $59BD IncDone
LABEL $59BD DecDone
LABEL $59D6 noBiggi
LABEL $59E5 intensityValues
LABEL $5A19 newJumpPossible
LABEL $5AA4 continue_left_jump
LABEL $5A5A continue_right_jump
LABEL $5B21 continue_up_jump
LABEL $5B97 continue_down_jump
LABEL $5ABB no_new_xpos
LABEL $5A71 pos_left
LABEL $5A25 pos_right
LABEL $5BAB positioning_done
LABEL $74E9 Karl_Jump_Sound
LABEL $5ABB new_xpos_exit
LABEL $5BAB no_new_ypos
LABEL $5B37 pos_down
LABEL $5AC7 pos_up
LABEL $5B04 no_change221
LABEL $5B7A no_change223
LABEL $5BAB new_ypos_exit
LABEL $5BB0 home_jump_tried
LABEL $000F DIE_WALL_JUMP
LABEL $5BB7 home1_test
LABEL $5BCB home2_test
LABEL $5C48 no_object_in_home
LABEL $5C1B object_in_home
LABEL $5BDF home3_test
LABEL $5BF3 home4_test
LABEL $5C07 home5_test
LABEL $5C2F no_home_fly
LABEL $5C48 init_with_bonus
LABEL $5C3B no_half_croco
LABEL $5C42 no_full_croco
LABEL $0000 DIE_HOME_FULL
LABEL $74F2 KarlHomeJump_Sound
LABEL $5C63 gimmickStillPossible
LABEL $5C95 no_new_level
LABEL $5C7D no_roll_over
LABEL $5C8B goingOutHere
EQU $01 HAS_VOICE0
EQU $01 HAS_VOICE1
EQU $01 HAS_TONE0
EQU $01 HAS_TONE1
LABEL $5CB4 playMusicOk
LABEL $5CE0 no_ym_music
LABEL $5D10 no_streaming_112
LABEL $5D26 bitPosOk228
LABEL $5D32 noChangeAtAllp
LABEL $5D39 STREAM_PART_2
LABEL $5D4E bitPosOk229
LABEL $5D5A noVoiceChange1
LABEL $5D61 STREAM_PART_3
LABEL $5F2C STREAM_PART_6
LABEL $5D76 bitPosOk230
LABEL $5DD6 voice0AmplitudedonePart
LABEL $5D90 bitPosOk231
LABEL $5DA4 bitPosOk232
LABEL $5DB8 bitPosOk233
LABEL $5DCC bitPosOk234
LABEL $5DE4 STREAM_PART_4
LABEL $5DDD voice0NoLowFreqPartFront
LABEL $5EB0 STREAM_PART_5
LABEL $5DF9 bitPosOk236
LABEL $5E13 bitPosOk237
LABEL $5E27 bitPosOk238
LABEL $5E3B bitPosOk239
LABEL $5E4F bitPosOk240
LABEL $5E63 bitPosOk241
LABEL $5E77 bitPosOk242
LABEL $5E8B bitPosOk243
LABEL $5E9F bitPosOk244
LABEL $5EA9 voice0NoLowFreqPart
LABEL $5EC5 bitPosOk246
LABEL $5F25 voice0NoHiFreqPart
LABEL $5EDF bitPosOk247
LABEL $5EF3 bitPosOk248
LABEL $5F07 bitPosOk249
LABEL $5F1B bitPosOk250
LABEL $5F41 bitPosOk252
LABEL $5F4D noVoiceChange2
LABEL $5F54 STREAM_PART_7
LABEL $5F69 bitPosOk253
LABEL $5FC9 voice1AmplitudedonePart
LABEL $5F83 bitPosOk254
LABEL $5F97 bitPosOk255
LABEL $5FAB bitPosOk256
LABEL $5FBF bitPosOk257
LABEL $5FD7 STREAM_PART_8
LABEL $5FD0 voice1NoLowFreqPartFront
LABEL $60A3 STREAM_PART_9
LABEL $5FEC bitPosOk259
LABEL $6006 bitPosOk260
LABEL $601A bitPosOk261
LABEL $602E bitPosOk262
LABEL $6042 bitPosOk263
LABEL $6056 bitPosOk264
LABEL $606A bitPosOk265
LABEL $607E bitPosOk266
LABEL $6092 bitPosOk267
LABEL $609C voice1NoLowFreqPart
LABEL $60B8 bitPosOk269
LABEL $6118 voice1NoHiFreqPart
LABEL $60D2 bitPosOk270
LABEL $60E6 bitPosOk271
LABEL $60FA bitPosOk272
LABEL $610E bitPosOk273
LABEL $611F levelDoneThemeLen
LABEL $6121 levelDoneTheme
LABEL $6309 gameStartThemeLen
LABEL $630B gameStartTheme
LABEL $6518 inGameTheme1Len
LABEL $651A inGameTheme1
LABEL $6AF9 inGameTheme2Len
LABEL $6AFB inGameTheme2
LABEL $6E48 inGameTheme3Len
LABEL $6E4A inGameTheme3
LABEL $7127 reachedHomeThemeLen
LABEL $7129 reachedHomeTheme
LABEL $7241 gameOverThemeLen
LABEL $7243 gameOverTheme
LABEL $7391 reachedHomeHappyThemeLen
LABEL $7393 reachedHomeHappyTheme
LABEL $74C9 inGameMusic2
LABEL $74CD inGameMusic3
LABEL $750B KarlJump_data
LABEL $7527 KarlDeathLane_data
LABEL $75BA KarlDeathWater_data
LABEL $764F KarlHomeJump_data
LABEL $766D KarlGirlGot_data
LABEL $7748 KarlSnakeNoise_data
LABEL $779C KarlTimeOut_data
LABEL $77EF KarlWaveNoise_data
LABEL $783F NewHighScoreJingle_data
LABEL $788D KarlTimerBonus_data
LABEL $78AC KarlGimmick_data
COMMENT_LABEL $78AC 7
LABEL $7A98 DFEE8
LABEL $7BE3 message1
LABEL $7BF9 message2
LABEL $7C36 message5
LABEL $7C10 message3
LABEL $7C23 message4
LABEL $7C49 message6
LABEL $7C5A message7
EQU $5A DIE_HOME_CROCO
LABEL $C9C7 ramfunction
LABEL $7CAA ramfunctiondata
LABEL $7CC2 ramfuncend
LABEL $7C9B StoreHiscoreFnc
LABEL $7CAA StoreHiscoreFncEnd
LABEL $7CA3 v4eloop
LABEL $7CB5 ramloop
LABEL $7CBC ramloop2
LABEL $7D2E PADDBYTES
LABEL $7FF0 vec4Register
LABEL $8011 *
LABEL $0097 *xfer
COMMENT_LINE $0000 hey dissi "watch RecalCounter 2"
COMMENT_LINE $0000 Karl Quappe
COMMENT_LINE $0000 1.0 Version was:
COMMENT_LINE $0000 written by Malban in March-April 1998, that version was called Vectrex Frogger
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 2.0 Version was done in 2016 by Malban
COMMENT_LINE $0000 comments and vectrex talk are welcome
COMMENT_LINE $0000 my email: malban@malban.de
COMMENT_LINE $0000 Stuff that might be subject to change/is not as a player would expect:
COMMENT_LINE $0000 - RecalCounter is not player dependend -> Wave sound
COMMENT_LINE $0000 start level - first level that will be played, level definitions in "level.i"
COMMENT_LINE $0000 see also if defs for HALFSPEED in other files (InMoves.i -> GENERAL_IN_MOVE_SPRITE e.g.)
COMMENT_LINE $0000 if included defined Bin > 32k
COMMENT_LINE $0000 if included defined Bin > 32k
COMMENT $0000 vectrex function includes
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains includes for vectrex BIOS functions and variables      ;
COMMENT_LINE $0000 it was written by Bruce Tomlin, slighte changed by Malban                 ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 $C839   ;Pointer to copyright string during startup
COMMENT_LINE $0000 $C83B   ;High score cold-start flag (=0 if valid)
COMMENT_LINE $0000 $C83C   ;temp byte
COMMENT_LINE $0000 $C843   ;        register 9
COMMENT_LINE $0000 $C844   ;        register 8
COMMENT_LINE $0000 $C848   ;        register 4
COMMENT_LINE $0000 $C849   ;        register 3
COMMENT_LINE $0000 $C84A   ;        register 2
COMMENT_LINE $0000 $C84C   ;        register 0
COMMENT_LINE $0000 $C85E   ;Scratch 'score' storage for Display_Option (7 bytes)
COMMENT_LINE $0000 $C868...$C876   ;Unused?
COMMENT_LINE $0000 $C878   ;Unused?
COMMENT_LINE $0000 $C880 - $CBEA is user RAM  ;
COMMENT_LINE $0000 0 sample/hold (0=enable  mux 1=disable mux)
COMMENT_LINE $0000 1 mux sel 0
COMMENT_LINE $0000 2 mux sel 1
COMMENT_LINE $0000 3 sound BC1
COMMENT_LINE $0000 4 sound BDIR
COMMENT_LINE $0000 5 comparator input
COMMENT_LINE $0000 6 external device (slot pin 35) initialized to input
COMMENT_LINE $0000 7 /RAMP
COMMENT_LINE $0000 0 PA latch enable
COMMENT_LINE $0000 1 PB latch enable
COMMENT_LINE $0000 2 \                     110=output to CB2 under control of phase 2 clock
COMMENT_LINE $0000 3  > shift register control     (110 is the only mode used by the Vectrex ROM)
COMMENT_LINE $0000 4 /
COMMENT_LINE $0000 5 0=t2 one shot                 1=t2 free running
COMMENT_LINE $0000 6 0=t1 one shot                 1=t1 free running
COMMENT_LINE $0000 7 0=t1 disable PB7 output       1=t1 enable PB7 output
COMMENT_LINE $0000 0 CA1 control     CA1 -> SW7    0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 1 \
COMMENT_LINE $0000 2  > CA2 control  CA2 -> /ZERO  110=low 111=high
COMMENT_LINE $0000 3 /
COMMENT_LINE $0000 4 CB1 control     CB1 -> NC     0=IRQ on low 1=IRQ on high
COMMENT_LINE $0000 5 \
COMMENT_LINE $0000 6  > CB2 control  CB2 -> /BLANK 110=low 111=high
COMMENT_LINE $0000 7 /
COMMENT_LINE $0000 bit                             cleared by
COMMENT_LINE $0000 0 CA2 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 1 CA1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 2 shift register interrupt flag reading or writing shift register
COMMENT_LINE $0000 3 CB2 interrupt flag            reading or writing port B I/O
COMMENT_LINE $0000 4 CB1 interrupt flag            reading or writing port A I/O
COMMENT_LINE $0000 5 timer 2 interrupt flag        read t2 low or write t2 high
COMMENT_LINE $0000 6 timer 1 interrupt flag        read t1 count low or write t1 high
COMMENT_LINE $0000 7 IRQ status flag               write logic 0 to IER or IFR bit
COMMENT_LINE $0000 0 CA2 interrupt enable
COMMENT_LINE $0000 1 CA1 interrupt enable
COMMENT_LINE $0000 2 shift register interrupt enable
COMMENT_LINE $0000 3 CB2 interrupt enable
COMMENT_LINE $0000 4 CB1 interrupt enable
COMMENT_LINE $0000 5 timer 2 interrupt enable
COMMENT_LINE $0000 6 timer 1 interrupt enable
COMMENT_LINE $0000 7 IER set/clear control
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT_LINE $0000 Rot_VL_ab       EQU     $F610   ;
COMMENT_LINE $0000 Rot_VL          EQU     $F616   ;
COMMENT_LINE $0000 Rot_VL_Mode_a   EQU     $F61F   ;
COMMENT_LINE $0000 Rot_VL_Mode     EQU     $F62B   ;
COMMENT_LINE $0000 Rot_VL_dft      EQU     $F637   ;
COMMENT $0000 vectrex functions as macros (some)
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains makro definitions of vectrex BIOS functions, these are ;
COMMENT_LINE $0000 sometimes exact clones of the BIOS functions                              ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 most of these macros are taken from the ROM to avoid
COMMENT_LINE $0000 all those JSR / RTS, in order to save time (over space)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 pretty for optimizing to use a makro :-)
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Store intensity in D/A
COMMENT $0000 mux disabled channel 2
COMMENT $0000 mux enabled channel 2
COMMENT $0000 turn off mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 scale for placing first point
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 point to shadow memory
COMMENT $0000 point to sound buffer
COMMENT $0000 init count for 14 registers
COMMENT $0000 get next register
COMMENT $0000 skip if unchanged
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off
COMMENT $0000 sound BDIR off, BC1 off, mux off
COMMENT $0000 go back for next register
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the RAM usage could be better organized and optimized
COMMENT_LINE $0000 as of now I still have a 100 bytes (or so) to spare, so there never was a need to optimize
COMMENT_LINE $0000 there are even some vars that are not used anymore but are leftovers that I didn't clean up from version 1
COMMENT_LINE $0000 user variable definitions
COMMENT_LINE $0000 $c880
COMMENT_LINE $0000 following are 'in game' variables, out of the game these can be reused
COMMENT_LINE $0000 scroll_variables_start  EQU  morph_div_jsr + 2            ; from here reuse scroll variables...
COMMENT_LINE $0000 from here only variables in game!!!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 a short note on the sprite offsets: all sprites have 'naturally' a starting
COMMENT_LINE $0000 point the offset is the space between that starting point and a 'virtual'
COMMENT_LINE $0000 grid position. the value of these offsets heavily depend on which scaling is used,
COMMENT_LINE $0000 so if you use a different 'resolution' these offsets must be changed also...
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 following is an exact list object structure... for girl
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 one complete = of player information
COMMENT_LINE $0000 this is copy to and from when the players switch
COMMENT_LINE $0000 there is RAM enough to spare, I just didn't want a 3 or 4 player game... (pl 3+4 scores could be on the bottom)
COMMENT_LINE $0000 player 1
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 one complete = of player information
COMMENT_LINE $0000 this is copy to and from when the players switch
COMMENT_LINE $0000 there is RAM enough to spare, I just didn't want a 3 or 4 player game... (pl 3+4 scores could be on the bottom)
COMMENT_LINE $0000 player 2
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;
COMMENT_LINE $0000 recoded movements are synced to that counter, also some intensity effects
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; -> 9*5 +3 = 48 byte
COMMENT_LINE $0000 this is the "old" save structure
COMMENT_LINE $0000 uses verbatim "bytes
COMMENT_LINE $0000 during a "save" this gets converted to "new save structure"
COMMENT_LINE $0000 which is reduced to use only 32 bytes
COMMENT_LINE $0000 if I wasn't so lazy, than I would have gotton rid
COMMENT_LINE $0000 of the old structure, as it is now it adds to confusion :-)
COMMENT_LINE $0000 anyways, in highscore editing and displaying - the "old" structure is used
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 save to eEprom Starts here!
COMMENT_LINE $0000 eepromRAMStart      EQU     optionsBlock
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 some data here is redundant, but I didn't change it - enough RAM :-)
COMMENT_LINE $0000 for easier debugging
COMMENT_LINE $0000 these are the addresses used in the game
COMMENT_LINE $0000 that ram is used during the game to keep track of sprite movement
COMMENT_LINE $0000 and house occupants
COMMENT_LINE $0000 morphing uses ram occupied by the game, therefor only be used
COMMENT_LINE $0000 as start, end or in between sequences
COMMENT_LINE $0000 end by current_morph_vector_diffs + 2*MAX_VECTOR_MORPH
COMMENT_LINE $0000 following vars use BIOS ram locations, these BIOS routines are not used by Karl Quappe and can thus
COMMENT_LINE $0000 be reused here!
COMMENT_LINE $0000 default BIOS highscore place
COMMENT_LINE $0000 using also IRQ spaces, which are not used by frogger
COMMENT_LINE $0000 following locations keep the entries that are displayed
COMMENT_LINE $0000 as the player score during game play
COMMENT_LINE $0000 following are some 'in' game variables which can be reused, they do not
COMMENT_LINE $0000 collide with the other side...
COMMENT_LINE $0000 variables that are only used on startup screen
COMMENT_LINE $0000 these use the same namespace as the above variables below
COMMENT_LINE $0000 see bottom of file for further addresses!
COMMENT_LINE $0000 following are a lot of constants which I declared for 'better'
COMMENT_LINE $0000 readability (and to keep things variable (constant<->variable!!!)) of the source...
COMMENT_LINE $0000 these are not really well sorted...
COMMENT_LINE $0000 following are some status constants used for turtle, snake, otter, fly, girl and croco
COMMENT_LINE $0000 bonus BIT MAPS, only two for now, these are AND or ORed
COMMENT_LINE $0000 morphing stati...
COMMENT_LINE $0000 and general morphing constants
COMMENT_LINE $0000 now fixed and allways done with
COMMENT_LINE $0000 16 steps!!!
COMMENT_LINE $0000 number of steps between first and second object
COMMENT_LINE $0000 this actually uses shift rights to implement 32 steps between vectors
COMMENT_LINE $0000 here allways the actual number of steps -1
COMMENT_LINE $0000 !!! all values supported, but only
COMMENT_LINE $0000 8, 16, 32, 64 are using shift as divs!!!
COMMENT_LINE $0000 other values will be SLOW
COMMENT_LINE $0000 (about 10000 cycles per round)
COMMENT_LINE $0000 they always appear somewhere... truth values :-)
COMMENT_LINE $0000 vectrex coordinates use range from -128 to +127
COMMENT_LINE $0000 these top and bottom values are for scale factor $ff
COMMENT_LINE $0000 different sizes of texts, in format yx, note: different ranges for y and x!
COMMENT_LINE $0000 following are SPECIAL definitions for special objects
COMMENT_LINE $0000 these must be = in the object definition
COMMENT_LINE $0000 scale factors used in the game (all different for optimization :-) :-( )
COMMENT_LINE $0000 these positions describe where the objects
COMMENT_LINE $0000 will appear/disappear on the screen
COMMENT_LINE $0000 this value is added to the repositioning of sprites
COMMENT_LINE $0000 if they move out of bounds and go to the other side
COMMENT_LINE $0000 to prevent going out of bounds right away again
COMMENT_LINE $0000 because of thei offset
COMMENT_LINE $0000 I'm not sure all sprites keep this maximum
COMMENT_LINE $0000 this may 'cause random repositioning of sprites
COMMENT_LINE $0000 a known problem, but I didin't increase this, since the
COMMENT_LINE $0000 actual playing area is already quite small as it is...
COMMENT_LINE $0000 following are some 'blowup' factors applied to various objects (for optimization)
COMMENT_LINE $0000 these factors must be = that the resulting coordinate is still below 127
COMMENT_LINE $0000 for optimization the resulting vectors should be pretty near 127
COMMENT_LINE $0000 and the scale factor be = that it is the smallest possible value!
COMMENT_LINE $0000 grid size of the virtal grid in different scale factors
COMMENT_LINE $0000 max 10, so that 12*GRID_SIZE still <= 127
COMMENT_LINE $0000 size can than be altered using scale factor
COMMENT_LINE $0000 I want to draw all lines in one
COMMENT_LINE $0000 go, so 10 is max here :-(
COMMENT_LINE $0000 otherwise I could scale the sprites
COMMENT_LINE $0000 with the same scaling value...
COMMENT_LINE $0000 frogger constants
COMMENT_LINE $0000 following are position information as to where the houses are located
COMMENT_LINE $0000 in SCALE_FACTOR_GAME
COMMENT_LINE $0000 following are for constants for checking which way frogger heads
COMMENT_LINE $0000 value of these is of no importance, just difference...
COMMENT_LINE $0000 start position of frog in GRID_SIZE GAME
COMMENT_LINE $0000 start band of frog in (0-12) in GRID POSITION
COMMENT_LINE $0000 number of 'pixels' one jump takes the frog...
COMMENT_LINE $0000 obviously in GRID_SIZE_GAME - for animation of frog, this should be divideable by 8!
COMMENT_LINE $0000 sizes of the different frog objects...
COMMENT_LINE $0000 since all the same, I don't use them anymore...
COMMENT_LINE $0000 positions of where frog will be considered to be out of bounds...
COMMENT_LINE $0000 in GAME position
COMMENT_LINE $0000 some positioning variables for the score information display...
COMMENT_LINE $0000 in screen coordinates
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 most of them have been splitted into the main source by now
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains private makros, some are taken from the BIOS of vectrex;
COMMENT_LINE $0000 and changed slightly to be more speedy, other were written alltogether by ;
COMMENT_LINE $0000 me, some of these are even obsolete... but all should be in a working     ;
COMMENT_LINE $0000 state                                                                     ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 this file contains macros that are used to print the score while in game  ;
COMMENT_LINE $0000 It is special in the way that it uses an own 5 line FONT                  ;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 High score in Karl Quappe - 3 parts
COMMENT_LINE $0000 1) HighScore while playing
COMMENT_LINE $0000 2) Highscore in HighscoreTable
COMMENT_LINE $0000 3) Highscore on Eprom
COMMENT_LINE $0000 1) While playing - is kept  in 5 seperate bytes
COMMENT_LINE $0000 score_digit_1 - score_digit_5
COMMENT_LINE $0000 each of these digits has a range from 0-9
COMMENT_LINE $0000 digit 5 (MSB) has a range from 0-16
COMMENT_LINE $0000 each digit is printed with a special font, 0-9 representing 0-9 and 10-16 representing 10-16 (in one character)
COMMENT_LINE $0000 so the highest score displayable is: 16 999 0 (last character is always a "0")
COMMENT_LINE $0000 2) Highscore table consists of 6 ascii characters representing the score in ascii nothing special here
COMMENT_LINE $0000 3) Highscore on the eprom is kept as a 16bit unsigned int (0-65535)
COMMENT_LINE $0000 upon conversion the score is shifted one position to the right (divided by 10), since the last position is always a 0
COMMENT_LINE $0000 Thus on the eprom a score up to 655350 can be stored.
COMMENT_LINE $0000 ergo: in game highscore is correct displayed up to a score of 169990
COMMENT_LINE $0000 highscore recording and displaying in HS table is correct up to a score of 655350
COMMENT_LINE $0000 after that the score starts from 0 again
COMMENT $0000 Save string pointer
COMMENT $0000 Point to start of chargen bitmaps
COMMENT $0000 a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
COMMENT $0000 Clear D/A output
COMMENT $0000 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
COMMENT_LINE $0000 first entry here, ramp is disabled
COMMENT_LINE $0000 if there was a jump from below
COMMENT_LINE $0000 ramp will be enabled by next line
COMMENT $0000 ramp off/on set mux to channel 1
COMMENT $0000 Enable mux
COMMENT $0000 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
COMMENT $0000 Disable mux
COMMENT $0000 Disable RAMP, set mux to channel 0, disable mux
COMMENT $0000 Enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 Note:
COMMENT_LINE $0000 doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $0000 Get text width
COMMENT $0000 Send it to the D/A
COMMENT $0000 [4]enable RAMP, disable mux
COMMENT $0000 [3]
COMMENT_LINE $0000 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $0000 13 cycles overhead
COMMENT_LINE $0000 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $0000 [+5]Get bitmap from chargen table
COMMENT $0000 [+4]rasterout of char bitmap "row" thru shift out in shift register
COMMENT $0000 [+6]Get next character
COMMENT $0000 [+3]Go back if not terminator
COMMENT $0000 [4]disable RAMP, disable mux
COMMENT $0000 Negate text width to D/A
COMMENT $0000 enable ramp, disable mux
COMMENT $0000 enable RAMP, disable mux
COMMENT $0000 [4]Check for last row
COMMENT $0000 [3]Branch if last row
COMMENT $0000 [3]Point to next chargen row
COMMENT $0000 [6]Get string length
COMMENT $0000 [7]
COMMENT $0000 [2] - 2
COMMENT $0000 [3]Delay a moment
COMMENT_LINE $0000 I think if the Macro was given the length of the string
COMMENT_LINE $0000 than another 2 cycles per line can be saved,
COMMENT_LINE $0000 since we probably could use leay -1,y bne...
COMMENT_LINE $0000 in the loop, and not only load "A", but also B with textheight!
COMMENT $0000 [6] Point to start of text string
COMMENT $0000 [3]Delay a moment
COMMENT $0000 [2]disable RAMP, disable mux
COMMENT $0000 [2]
COMMENT $0000 [2]
COMMENT $0000 [3]Delay some more in a loop
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Get text height
COMMENT $0000 Store text height in D/A [go down -> later]
COMMENT $0000 Enable mux
COMMENT $0000 disable RAMP, disable mux
COMMENT $0000 Clear D/A
COMMENT $0000 Go back for next scan line
COMMENT $0000 #$98 ;
COMMENT $0000 T1->PB7 enabled
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 end string with $81
COMMENT $0000 space betwwen score, and lives
COMMENT $0000 space betwwen lifes, and level
COMMENT $0000 end string with $81
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 move to score position
COMMENT $0000 this and the overnext instruction, zero the beam!
COMMENT $0000 /BLANK low and /ZERO low
COMMENT_LINE $0000 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT_LINE $0000 delay in zeroing + integrator reset makes display of score much nore stable
COMMENT $0000 reset integrator offset
COMMENT $0000 clear A, and scale to B
COMMENT $0000 patched for speed... /2
COMMENT_LINE $0000 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0000 still 0
COMMENT $0000 y,x
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Disable mux
COMMENT $0000 enable timer
COMMENT_LINE $0000 we load our X integrators AFTER we enable RAMP
COMMENT_LINE $0000 since this is a solidary move this is ok
COMMENT_LINE $0000 it saves a few cycles out of the timer wait
COMMENT_LINE $0000 but we have to offset the loss of ramp with a higher integration value
COMMENT $0000 player 1 first
COMMENT $0000 X pos relative to start
COMMENT $0000 Store X in D/A register
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE SCORE START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 125 cycles to spare
COMMENT_LINE $0000 do everything really slowly in here - we have time enough!!!
COMMENT_LINE $0000 following move frog takes abou 80 cycles
COMMENT_LINE $0000 ideal for another in move routine!
COMMENT $0000 get joystick stuff, and move frog, collision detection...
COMMENT $0000 Vec_Str_Ptr ;Point to start of text string
COMMENT $0000 Point to start of chargen bitmaps
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE SCORE END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 done with move?
COMMENT $0000 no, than go on waiting
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 special add routines. since there are only +-10 and 200 hundred
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the "large" adds are not cycle relevant since only used in intermissions
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys D
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 **************************************************************************
COMMENT_LINE $0000 following are some 'private' makro definitions
COMMENT_LINE $0000 some heavily optimized for speed :-(
COMMENT_LINE $0000 needs: DP = D0
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 a = reg, b = data
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 store data in reg a in an
COMMENT_LINE $0000 appropriate way to PSG register (here: BIOS working buffer)
COMMENT_LINE $0000 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $0000 sta      ,u
COMMENT_LINE $0000 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $0000 stb      ,u
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Karl Quappe $3c is default, all music is plaxed using channel 0+1
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is supposed to 'reset' the sound hardware,
COMMENT $0000 no music is playing ->0
COMMENT $0000 shadow regs
COMMENT_LINE $0000 in the next do sound call
COMMENT_LINE $0000 all regs are cleared automatically
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro should be called every round a music is to be played
COMMENT_LINE $0000 this does not play the sound, it initializes it only, but also every round!
COMMENT_LINE $0000 BIOS MUSIC
COMMENT_LINE $0000 leaves with DP = to C8
COMMENT_LINE $0000 expects music to be initialized
COMMENT_LINE $0000 and pointer in music_active
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) the 'Init_Music_chk' expects this
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT $0000 name of macro
COMMENT $0000 get active music
COMMENT $0000 and init new notes
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro initializes a new piece of music
COMMENT_LINE $0000 the above 'function' must be called every round in order for the music
COMMENT_LINE $0000 actually to be played
COMMENT_LINE $0000 BIOS MUSIC
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT_LINE $0000 the next instructions initialize a new sound
COMMENT_LINE $0000 load #1
COMMENT_LINE $0000 set this as marker for music start
COMMENT_LINE $0000 CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $0000 INC      Vec_Music_Flag               ; to do it that way
COMMENT $0000 load a music structure (piece_of_music)
COMMENT $0000 and store it to my own music active pointer
COMMENT_LINE $0000 next a do_my_sound and than do sound must be called
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 this makro is sort of the startup for every display round
COMMENT_LINE $0000 does all sound stuff and recalibration, leaves with
COMMENT_LINE $0000 DP = to D0
COMMENT_LINE $0000 destroyes pretty much every register...
COMMENT_LINE $0000 BIOS MUSIC
COMMENT $0000 name of macro
COMMENT $0000 (MAKRO) see above
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 sets dp to d0, and pos at 0, 0
COMMENT $0000 just for assembler optimization...
COMMENT $0000 ROM function that does the sound playing
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 offspring of the above, squized cycles :-)
COMMENT_LINE $0000 no MUSIC init
COMMENT $0000 name of macro
COMMENT $0000 just for assembler optimization...
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makros are for intensity setting
COMMENT_LINE $0000 to = a intensity the bios does use some (many) cycles, here a
COMMENT_LINE $0000 test really saves some cycles, if intensity is = many times per round
COMMENT_LINE $0000 (like differently shaded sprites)
COMMENT_LINE $0000 intensity = to value found in register A
COMMENT_LINE $0000 is compared/stored to 'current_brightness'
COMMENT_LINE $0000 if not equal the new brightness is set!
COMMENT $0000 name of macro, and variable name, can also be accessed with
COMMENT $0000 compare to last known value
COMMENT $0000 if the same, than jump
COMMENT $0000 otherwise store new value
COMMENT $0000 and than set the intensity
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 same as above, but allways sets the new brightness
COMMENT_LINE $0000 good for startup of new round, since intensity MUST be = at that point
COMMENT_LINE $0000 or after other functions which destroy brighness (print_str...)
COMMENT $0000 name of macro, and variable name, can also be accessed with \1
COMMENT $0000 load brightness to A
COMMENT $0000 store it
COMMENT $0000 and change the brightness
COMMENT $0000 end of macro
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 the following makro ...
COMMENT_LINE $0000 they search for a better (faster) scale/DAC relation and use
COMMENT_LINE $0000 the scaling thus found, it should be somewhat faster that way...
COMMENT_LINE $0000 per round we save approxematly: ? cycles
COMMENT_LINE $0000 both destroy X and D
COMMENT_LINE $0000 SCALE factor is changed
COMMENT_LINE $0000 forget it !!!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $0000 NOT DONE:
COMMENT_LINE $0000 what should be done:
COMMENT_LINE $0000 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $0000 a = a * s
COMMENT_LINE $0000 b = b * s
COMMENT_LINE $0000 scaling = scaling / s
COMMENT_LINE $0000 that would give the most efficient positioning
COMMENT_LINE $0000 bother it takes more time to calculate the above,
COMMENT_LINE $0000 than it saves
COMMENT_LINE $0000 with every positioning via this routine now,
COMMENT_LINE $0000 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $0000 to do one simple positioning!!!
COMMENT_LINE $0000 that is probably about 300 cycles per positioning
COMMENT_LINE $0000 this is done about 30-40 times per round
COMMENT_LINE $0000 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $0000 and we haven't drawn a single line yet!!!
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Clear shift regigster
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 there are many 16 bit operands missing, so is
COMMENT_LINE $0000 a LSRD
COMMENT_LINE $0000 this macro does a 16 bit LSR on register D
COMMENT $0000 LSR B
COMMENT $0000 LSR A
COMMENT $0000 if no carry, than exit
COMMENT $0000 otherwise underflow from A to 7bit of B
COMMENT $0000 done
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divides D by tmp1, result in B
COMMENT_LINE $0000 uses divide_tmp as storage
COMMENT_LINE $0000 only 8 bit in tmp1, but must be manually poked to tmp1 + 1
COMMENT_LINE $0000 sign is correctly handled
COMMENT_LINE $0000 can probably be optimized like hell
COMMENT_LINE $0000 perhaps only nearing the result
COMMENT_LINE $0000 using 2 shifts and a plus
COMMENT_LINE $0000 might be worth a try,
COMMENT_LINE $0000 see vectrex emulator for algorithm...
COMMENT_LINE $0000 could be implemented with a tabel, which in turn
COMMENT_LINE $0000 could be caclulated on the fly... (upon startup)
COMMENT_LINE $0000 this makro divides exact, but slow
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 Set scale factor
COMMENT $0000 blank low and zero low
COMMENT $0000 clear shift register
COMMENT $0000 /BLANK low and /ZERO low
COMMENT $0000 clear shift register
COMMENT $0000 clear D/A register
COMMENT $0000 mux=1, disable mux
COMMENT $0000 mux=1, enable mux
COMMENT $0000 disable mux
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 recal counter, about 21 Minutes befor roll over
COMMENT $0000 Wait for timer t2
COMMENT $0000 Store refresh value
COMMENT $0000 into timer t2
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is some kind of attract mode?
COMMENT $0000 if yes, do not query joystick, but look at our recorded data
COMMENT $0000 default > nothing moved
COMMENT $0000 14 bit of our recorded data is the time stamp
COMMENT $0000 reload data, and check the first 2 bits
COMMENT $0000 if msb is set, than joystick moved in X
COMMENT $0000 jump if else (than y)
COMMENT $0000 if MSB -1 is set, than movement as positive (negative - else)
COMMENT $0000 store it to our joystick result var
COMMENT $0000 negative movement, store...
COMMENT $0000 and out
COMMENT $0000 was an Y movement, reload data
COMMENT $0000 if MSB -1 is set, than movement as positive (negative - else)
COMMENT $0000 store it to our joystick result var
COMMENT $0000 and out
COMMENT $0000 negative movement, store...
COMMENT $0000 and out
COMMENT_LINE $0000 joytick pot readings are also switched by the (de)muliplexer (analog section)
COMMENT_LINE $0000 with joystick pots the switching is not done in regard of the output (in opposite to "input" switching of integrator logic)
COMMENT_LINE $0000 but with regard to input
COMMENT_LINE $0000 thus, the SEL part of the mux now selects which joystick pot is selected and send to the compare logic.
COMMENT_LINE $0000 mux sel:
COMMENT_LINE $0000 xxxx x00x: port 0 horizontal
COMMENT_LINE $0000 xxxx x01x: port 0 vertical
COMMENT_LINE $0000 xxxx x10x: port 1 horizontal
COMMENT_LINE $0000 xxxx x11x: port 1 vertical
COMMENT_LINE $0000 the result of the pot reading is compared to the
COMMENT_LINE $0000 value present in the dac and according to the comparisson the compare flag of VIA (bit 5 of port b) is set.
COMMENT_LINE $0000 (compare bit is = if contents of dac was "smaller" (signed) than the "pot" read)
COMMENT $0000 mux disabled, mux sel = 01 (vertical pot port 0)
COMMENT $0000 mux enabled, mux sel = 01
COMMENT $0000 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $0000 ...
COMMENT $0000 wait...
COMMENT $0000 disable mux
COMMENT $0000 load a with test value (positive y)
COMMENT $0000 test value to DAC
COMMENT $0000 default result value y was pushed UP
COMMENT $0000 test comparator
COMMENT $0000 if comparator cleared - joystick was moved up
COMMENT $0000 "load" with negative value
COMMENT $0000 also switch the possible result in A
COMMENT $0000 test comparator again
COMMENT $0000 if cleared the joystick was moved down
COMMENT $0000 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $0000 remember the result in "our" joystick data
COMMENT $0000 if y moved I assume no X move
COMMENT_LINE $0000 now the same for horizontal
COMMENT $0000 mux disabled, mux sel = 00 (horizontal pot port 0)
COMMENT $0000 mux enabled, mux sel = 01
COMMENT $0000 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
COMMENT $0000 ...
COMMENT $0000 wait...
COMMENT $0000 disable mux
COMMENT $0000 load a with test value (positive x)
COMMENT $0000 test value to DAC
COMMENT $0000 default result value x was pushed right
COMMENT $0000 test comparator
COMMENT $0000 if comparator cleared - joystick was moved right
COMMENT $0000 "load" with negative value
COMMENT $0000 also switch the possible result in A
COMMENT $0000 test comparator again
COMMENT $0000 if cleared the joystick was moved left
COMMENT $0000 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $0000 remember the result in "our" joystick data
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 copy all shadows
COMMENT $0000 number of regs to copy (+1)
COMMENT $0000 music players write here
COMMENT $0000 shadow of actual PSG
COMMENT_LINE $0000 no put to psg
COMMENT $0000 ensure shadow has copy
COMMENT_LINE $0000 a = register
COMMENT_LINE $0000 b = value
COMMENT $0000 store register select byte
COMMENT $0000 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0000 read sound chip status (?)
COMMENT $0000 store data byte
COMMENT $0000 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0000 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 expect DP = d0
COMMENT_LINE $0000 playes one piece of music, that is given as param
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT_LINE $0000 playes one piece of music, that is given as param (same as above *cough*)
COMMENT $0000 this piece of music
COMMENT $0000 must be played
COMMENT $0000 NOW
COMMENT_LINE $0000 if no music is playing, than play given piece,
COMMENT_LINE $0000 otherwise play the given piece as next music
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is there a current piece playing?
COMMENT $0000 if not
COMMENT $0000 play it now
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 is there a current piece playing?
COMMENT $0000 if not
COMMENT $0000 take that piece given and
COMMENT $0000 play it now
COMMENT $0000 otherwise, store it as next possible piece
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys X D
COMMENT_LINE $0000 tests if the given SFX has higher (or same) prio as currently playing
COMMENT_LINE $0000 if prio higher (or none playing)
COMMENT_LINE $0000 than playes the SFX (ignored otherwise)
COMMENT_LINE $0000 all effects are playing in PSG channel 3
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 load current sfx
COMMENT $0000 if none playing - jump
COMMENT $0000 load current prio to a
COMMENT $0000 compare to prio of new sfx
COMMENT $0000 if old prio is higher than go out
COMMENT $0000 new sfx is nice
COMMENT $0000 so we store it as current sfx
COMMENT $0000 and the actual sfx data store to our sfx player vars
COMMENT $0000 tell the player, that it should play!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 destroys D X
COMMENT_LINE $0000 play the given SFX, but only if nothing else is played (regardless of prio)
COMMENT_LINE $0000 hey dissi "b reak"
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 reset integrators
COMMENT $0000 integrator reset
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 divide (unsigned) D by 16 bit in TMP1
COMMENT_LINE $0000 result in B
COMMENT_LINE $0000 SLOW!
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 gimickTable:
COMMENT_LINE $0000 db 0 ; y
COMMENT_LINE $0000 db -70 ; x
COMMENT_LINE $0000 db 250 ; length
COMMENT_LINE $0000 db pacman1a_object
COMMENT_LINE $0000 gimmickPossible     equ      initMoveTable+2
COMMENT_LINE $0000 gimmickActive       equ      gimmickPossible+2
COMMENT_LINE $0000 gimmick_status      EQU      gimmickActive + 1            ; what's the gimmick status?
COMMENT_LINE $0000 gimmick_object      EQU      gimmick_status + 1           ; pointer to current gimmick object information
COMMENT_LINE $0000 gimmick_pos         EQU      gimmick_object + 2           ; current position of gimmick
COMMENT_LINE $0000 gimmick_anim_counter  EQU    gimmick_pos + 2              ; animation counter of gimmick
COMMENT_LINE $0000 gimmick_speed       EQU      gimmick_anim_counter + 1     ; speed of gimmick
COMMENT_LINE $0000 gimmick_countdown       EQU      gimmick_speed + 1     ; speed of gimmick
COMMENT $0000 go to 0,0
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 this is actually the same as the code used in the main sprite loop
COMMENT_LINE $0000 just fitted for gimick
COMMENT $0000 scale for game positioning
COMMENT $0000 load position
COMMENT_LINE $0000 move to
COMMENT $0000 Store Y in D/A register
COMMENT $0000 Blank low, zero high?
COMMENT $0000 Enable mux
COMMENT $0000 Disable mux
COMMENT $0000 Store X in D/A register
COMMENT $0000 enable timer
COMMENT_LINE $0000 in move stuff, since it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; IN MOVE GIMICK START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 and do the next
COMMENT_LINE $0000 in move stuff start
COMMENT $0000 load otter position
COMMENT $0000 add the speed
COMMENT $0000 store the new x position
COMMENT $0000 load the otter object to U
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 load object vector list to X,
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 22 cycles from switch on ZERO disabled, and BLANK enabled
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 COPY_VECROM_TO_RAM  macro
COMMENT_LINE $0000 ldu      #vec4SaveBuffer              ; Source copy the vec4ever switching function into place
COMMENT_LINE $0000 ldx      #v4e_saveBlockStart          ; destination
COMMENT_LINE $0000 lda      #1+(v4e_saveBlockEnd-v4e_saveBlockStart)
COMMENT_LINE $0000 jsr      Move_Mem_a
COMMENT_LINE $0000 endm
COMMENT_LINE $0000 ............................................................................
COMMENT_LINE $0000 ............................................................................
COMMENT $0000 load default text height & width
COMMENT $0000 poke it to ram location
COMMENT $0000 Sets the intensity of the
COMMENT $0000 get button status
COMMENT $0000 is a button pressed?
COMMENT $0000 no, than stay in init_screen_loop
COMMENT $0000 makros for unlooping
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 size similar to: SCALE_FACTOR_SPRITE 6
COMMENT_LINE $0000 "similar" since the drawing below does not use a shift register,
COMMENT_LINE $0000 so the timings are slightly different
COMMENT_LINE $0000 these routines are manualy tested using different vectrex systems
COMMENT_LINE $0000 they seem to defy cycle counting but work on the real machines rather well
COMMENT_LINE $0000 Emulators don' like it (Vide is ok'ish)
COMMENT_LINE $0000 ParaJVE: displayes only dashed
COMMENT_LINE $0000 Mess doesn't display anything
COMMENT_LINE $0000 one "inner line" of the vectorlist drawing routine
COMMENT_LINE $0000 ***************************************************************************
COMMENT $0000 cycles
COMMENT $0000 #noDoubleWarn
COMMENT $0000 [6] Send X to A/D
COMMENT $0000 [4] enable timer 1
COMMENT_LINE $0000 light on
COMMENT $0000 [4] ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0000 [8] load Y coordinate to A, X coordinate to B
COMMENT $0000 [4] Send Y to A/D
COMMENT $0000 [6]
COMMENT $0000 [2]
COMMENT_LINE $0000 light off
COMMENT $0000 [4] ZERO disabled, and BLANK enabled
COMMENT $0000 [6] Disable mux
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 repetition of the above macro
COMMENT_LINE $0000 27 times below
COMMENT_LINE $0000 this is a "counter" to calculate where to jump into the the unlooping!
COMMENT_LINE $0000 length of one of the vector drawing lines in ASM
COMMENT_LINE $0000 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0000 the callable unloop" macro
COMMENT_LINE $0000 must be followed after 22 cycles with a
COMMENT_LINE $0000 ldb      #$ce
COMMENT_LINE $0000 STB     <VIA_cntl         ;/BLANK low and /ZERO low
COMMENT_LINE $0000 for example look at the subroutine: "move_wait_draw_vlc_unloop" in the main file
COMMENT_LINE $0000 "y" must be = beforehand to the jump "table"
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 (x) length in bytes
COMMENT_LINE $0000 [x] duration in cycles
COMMENT_LINE $0000 do one "manual" starter line in advance
COMMENT $0000 get current coordinates
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 [6] Disable mux
COMMENT $0000 #noDoubleWarn
COMMENT_LINE $0000 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0000 JUMP_INTO_26\?:
COMMENT_LINE $0000 ONE_LINE_DRAW
COMMENT_LINE $0000 JUMP_INTO_25\?:
COMMENT_LINE $0000 ONE_LINE_DRAW
COMMENT $0000 [6] Send X to A/D
COMMENT_LINE $0000 light on
COMMENT $0000 [4] enable timer 1
COMMENT $0000 ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 light off
COMMENT_LINE $0000 there must the above mentioned "switch the light off"
COMMENT_LINE $0000 after 22 cycles still be manually done
COMMENT_LINE $0000 (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $0000 (x) length in bytes
COMMENT_LINE $0000 [x] duration in cycles
COMMENT_LINE $0000 do one "manual" starter line in advance
COMMENT $0000 get current coordinates
COMMENT $0000 (2) [4] Send Y to A/D
COMMENT $0000 (2) [4] enable mux, thus y integrators are set to Y
COMMENT $0000 [6] Disable mux
COMMENT $0000 [6] Send X to A/D
COMMENT_LINE $0000 light on
COMMENT $0000 [4] enable timer 1
COMMENT $0000 ZERO disabled, and BLANK disabled
COMMENT_LINE $0000 light off
COMMENT_LINE $0000 there must the above mentioned "switch the light off"
COMMENT_LINE $0000 after 22 cycles still be manually done
COMMENT_LINE $0000 (but the 22 cycles might be reused otherwise!)
COMMENT $0000 subroutines for "in move pauses"
COMMENT_LINE $0000 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $0000 in 2016
COMMENT_LINE $0000 all stuff contained here is public domain
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 all in moves are totally independend
COMMENT_LINE $0000 meaning all registers may be destroyed
COMMENT_LINE $0000 only thing - DP register should stay (or resetted) [Exception: GENERAL_IN_MOVE_SPRITE]
COMMENT_LINE $0000 this is stuff which takes time,
COMMENT_LINE $0000 but can be done anywhere, so we do it here
COMMENT_LINE $0000 in a 'pause', our pause lasts till GAME_SCALE ($91)
COMMENT_LINE $0000 timer is count down, that is our scale - timer...
COMMENT_LINE $0000 note:
COMMENT_LINE $0000 if levels are done well only a small fraction of these pauses will be done
COMMENT_LINE $0000 each round
COMMENT_LINE $0000 these macros are used only ONCE in the source
COMMENT_LINE $0000 this more a form of "code folding" than of macroing
COMMENT_LINE $0000 but since these macros are only used once I
COMMENT_LINE $0000 was abit lax about "local" jumps
COMMENT_LINE $0000 in general it is really dangerous to use non localized jumps in macros, but
COMMENT_LINE $0000 since all of them are used only once it does not realy matter
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 pause stuff start!
COMMENT $0000 load new vector (length was cut by timer :-))
COMMENT_LINE $0000 Bne      no_timer_death               ; if timer is zero, we are dead
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 let us look if we need to initiate/destroy a home object
COMMENT_LINE $0000 that is fly or crocodile
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 do timer stuff for fly
COMMENT_LINE $0000 insert/remove fly
COMMENT $0000 is there any fly stuff at all?
COMMENT $0000 no?, than go on
COMMENT $0000 is zero?
COMMENT $0000 if not zero, do nothing
COMMENT $0000 fly is waiting to be displayed
COMMENT $0000 no?, than it is allready displayed
COMMENT_LINE $0000 if zero... initiate new fly
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 4
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random home...
COMMENT $0000 must multiply by 5, length of home object
COMMENT $0000 times 5
COMMENT $0000 remember start address if all homes are occupied
COMMENT $0000 load the address to U, start of list of homes
COMMENT $0000 is this home empty (only checking upper byte, should be ok)
COMMENT $0000 if yes, than go on
COMMENT $0000 otherwise, compare to 20 (right most home)
COMMENT $0000 not last home?, than go on
COMMENT $0000 store -5, so that +5 is 0, leftmost home
COMMENT $0000 check next home (home object is 5 bytes long)
COMMENT $0000 checked all homes yet
COMMENT $0000 yes, than no home is free
COMMENT $0000 and check again if empty...
COMMENT $0000 now we got a 'random' empty home address in B,U
COMMENT $0000 remember offset to home for removal
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 load fly object
COMMENT $0000 store to the calculated home address
COMMENT $0000 load animation counter of object
COMMENT $0000 and store it to object in RAM
COMMENT $0000 IS DISPLAYED
COMMENT $0000 and finnished with fly stuff...
COMMENT_LINE $0000 fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $0000 now destroy fly
COMMENT $0000 load current fly offset
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 is WAITING
COMMENT $0000 reload the fly timer
COMMENT $0000 and store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 do timer stuff for croco (home)
COMMENT_LINE $0000 insert/remove croco
COMMENT $0000 is there any croco stuff at all?
COMMENT $0000 no?, than go on
COMMENT $0000 store it back
COMMENT $0000 if not zero, do nothing
COMMENT $0000 is there any croco stuff at all?
COMMENT $0000 croco is waiting to be displayed
COMMENT $0000 no?, than it is allready displayed
COMMENT_LINE $0000 if zero... initiate new croco
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 4
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random home...
COMMENT $0000 must multiply by 5, length of home object
COMMENT $0000 times 5
COMMENT $0000 remember start address if all homes are occupied
COMMENT $0000 load the address to U, start of list of homes
COMMENT $0000 is this home empty (only checking upper byte, should be ok)
COMMENT $0000 if yes, than go on
COMMENT $0000 otherwise, compate to 20 (right most home)
COMMENT $0000 not last home?, than go on
COMMENT $0000 store -5, so that +5 is 0, leftmost home
COMMENT $0000 check next home (home object is 5 bytes long)
COMMENT $0000 checked all homes yet
COMMENT $0000 yes, than no home is free
COMMENT $0000 and check again if empty...
COMMENT $0000 now we got a 'random' empty home address in B,U
COMMENT $0000 remember offset to home for removal
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 load croco object
COMMENT $0000 store to the calculated home address
COMMENT $0000 load animation counter of object
COMMENT $0000 and store it to object in RAM
COMMENT $0000 is DISPLAYED
COMMENT $0000 and finnished with croco stuff...
COMMENT_LINE $0000 croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $0000 now destroy croco
COMMENT $0000 load current croco offset
COMMENT $0000 get address of U and add the offset
COMMENT $0000 in U address of 'random' home
COMMENT $0000 IS WAITING
COMMENT $0000 reload the croco timer
COMMENT $0000 and store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 EXPECTS DP = C8!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 do timer stuff for diving turtles
COMMENT_LINE $0000 initiate alternate turtle sprites on
COMMENT_LINE $0000 timer...
COMMENT_LINE $0000 clean up stuff
COMMENT_LINE $0000 NOTE: turtles really suck
COMMENT_LINE $0000 sometimes turtles are torn appart due to
COMMENT_LINE $0000 huge sprite offsets
COMMENT_LINE $0000 higher than the (now used 5 maximum offset)
COMMENT $0000 should the turtles dive?
COMMENT $0000 if not zero, don't do anything
COMMENT $0000 first let us restore the timer
COMMENT $0000 store it HI
COMMENT_LINE $0000 go thru all sprites
COMMENT_LINE $0000 see if diving special is there,
COMMENT_LINE $0000 than change sprites to diving sprites
COMMENT $0000 load object address
COMMENT_LINE $0000 U pointer to object
COMMENT_LINE $0000 X pointer to this object list
COMMENT_LINE $0000 Y pointer to t_list
COMMENT_LINE $0000 from here we change the actual object in the object list
COMMENT_LINE $0000 these special objects (for now only turtles)
COMMENT_LINE $0000 have an extra entry in their object describtion
COMMENT_LINE $0000 this is the 'alternate' object describtion address
COMMENT_LINE $0000 this will be loaded and placed in the object list
COMMENT_LINE $0000 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0000 which allways switches back and forth between diving
COMMENT_LINE $0000 and non diving turtles (as we defined the object
COMMENT_LINE $0000 information as this)
COMMENT $0000 faster than a PSHS
COMMENT $0000 load alternate object to Y
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 store new object definition to object list
COMMENT $0000 faster than a PULS
COMMENT $0000 and go on
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 if not zero, do nothing
COMMENT $0000 if not zero, do nothing
COMMENT_LINE $0000 if zero... initiate new otter
COMMENT_LINE $0000 JSR      Random                       ; get a random number
COMMENT $0000 random in range of 0 - 15
COMMENT $0000 remember for lane offset
COMMENT $0000 only the lower three bits
COMMENT $0000 not higher than 5
COMMENT $0000 if lower than ok
COMMENT $0000 otherwise take only half of it
COMMENT $0000 now we have a random river band...
COMMENT $0000 this is the band we are on now
COMMENT $0000 multiply by band structure width
COMMENT $0000 which is 16 bytes
COMMENT $0000 copy A to B
COMMENT $0000 SEX B :-) but without sign
COMMENT $0000 add address start of band list
COMMENT_LINE $0000 now we try to get a pseudo random offset of objects within
COMMENT_LINE $0000 this lane, we use the same random number as for lane determination
COMMENT_LINE $0000 but this time ranging from 0 - 15, see above
COMMENT $0000 at least 1 in tmp1 so we don't loop to 255
COMMENT_LINE $0000 start address of this bandlist is in D (and remains there untouched...)
COMMENT $0000 copy start of lane list to X
COMMENT $0000 load object list address to U
COMMENT $0000 if zero than we have gone past the last object
COMMENT_LINE $0000 and jump to reinit X
COMMENT $0000 otherwise we decrement our random value by 1
COMMENT $0000 if not zero, get the next object list member
COMMENT $0000 store list object address of
COMMENT_LINE $0000 'log' pre otter
COMMENT $0000 load next list position
COMMENT $0000 if not zero jump
COMMENT $0000 if zero we have to use the first object in this band
COMMENT $0000 even if it is the same... as the pre object
COMMENT $0000 store list object address of
COMMENT_LINE $0000 'log' past otter
COMMENT $0000 load object address of first otter animation to X
COMMENT $0000 load pre otter object list address
COMMENT $0000 position of pre list object
COMMENT $0000 pre object
COMMENT $0000 modify for y offset of pre object
COMMENT $0000 modify for x offset of pre object
COMMENT $0000 add length of pre object
COMMENT $0000 modify y position with otter offset
COMMENT $0000 modify x position with otter offset
COMMENT $0000 add another 3 just for good measure...
COMMENT $0000 and store this as the new otter position
COMMENT $0000 are we to far to the right?
COMMENT $0000 if so, don't use this otter
COMMENT $0000 are we to far to the left?
COMMENT $0000 if so don't use this otter either
COMMENT_LINE $0000 the above is sort of needed, since I don't want to check
COMMENT_LINE $0000 all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $0000 that otter is quasi outside of the main screen and the
COMMENT_LINE $0000 log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $0000 befor the otter has a chance to realize it is allready near
COMMENT_LINE $0000 thus the otter might stay there forever...
COMMENT $0000 load speed of pre object
COMMENT $0000 otter allways + 1
COMMENT_LINE $0000 my otter allways moves from left to right
COMMENT_LINE $0000 or standstill
COMMENT $0000 store the new speed
COMMENT $0000 store otter anim A 1 object as the relevant otter object
COMMENT $0000 reset animation counter for otter
COMMENT $0000 and store it
COMMENT_LINE $0000 now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $0000 stupid 'log' object, like a midway turtle or a
COMMENT_LINE $0000 middle 'big' log...
COMMENT $0000 load object list address of object past otter
COMMENT $0000 and load the position of otter now
COMMENT $0000 subtract these two
COMMENT $0000 absolute that
COMMENT $0000 look if they are really near each other
COMMENT_LINE $0000 15 'includes' length of otter, hardcoded :-(
COMMENT $0000 if not near, go to end, otherwise destroy otter
COMMENT $0000 reload the otter timer
COMMENT $0000 and store it
COMMENT $0000 and go to done
COMMENT $0000 is displayed
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 IN MOVE 1 END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT $0000 test if we are in death timer loop
COMMENT $0000 frog is allready dead!
COMMENT $0000 load fly timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 load croco timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 load the timer value
COMMENT $0000 if $ff, than no turtle
COMMENT $0000 overstep the next two
COMMENT $0000 count it down by $20
COMMENT $0000 store it
COMMENT $0000 load the timer value
COMMENT_LINE $0000 SUBD #$20 ; count it down by $20
COMMENT $0000 count it down by $20
COMMENT $0000 store it
COMMENT $0000 is displayed
COMMENT $0000 load otter timer
COMMENT $0000 decrease it
COMMENT $0000 store it back
COMMENT $0000 if music is not playing
COMMENT $0000 jump, otherwise initialize "in move" subroutines for ym decode
COMMENT $0000 also sets up inMovePointer
COMMENT $0000 first and second is really small
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 independent code section
COMMENT_LINE $0000 decrease and check level timer
COMMENT_LINE $0000 warn if low
COMMENT $0000 load new vector (length was cut by timer :-))
COMMENT $0000 is it small yet?
COMMENT $0000 no, than jump
COMMENT $0000 is it really really small?
COMMENT $0000 nah, not that small yet
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 fourth is big
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 collosion only allowed when not already dead
COMMENT_LINE $0000 hey dissi "br eak"
COMMENT $0000 load band information
COMMENT_LINE $0000 first we must get the position of this band in the band list
COMMENT $0000 one less, since homes, don't have a band
COMMENT $0000 fixed to 16 byte,
COMMENT $0000 so we just use some LSL instead
COMMENT $0000 of MUL...
COMMENT $0000 load bandlist
COMMENT $0000 and go to current band in bandlist
COMMENT $0000 get pointer to next object_list element in this band
COMMENT $0000 if empty we are done
COMMENT_LINE $0000 ok, here we have an object_list entry we must check...
COMMENT_LINE $0000 U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $0000 X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $0000 Y pointer to object structure, points to speed of the current object
COMMENT_LINE $0000 now it gets tricky, we have to compare the position information,
COMMENT_LINE $0000 which is in SCALE_FACTOR_GAME
COMMENT_LINE $0000 with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $0000 we dismiss the difference here and just think that the
COMMENT_LINE $0000 value we find in 'length' in the object definition is
COMMENT_LINE $0000 also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT $0000 load frog position
COMMENT $0000 so that detection is not all THAT sharp
COMMENT $0000 so that detection is not all THAT sharp
COMMENT $0000 compare it to x postion of object
COMMENT $0000 if frog further left, jump
COMMENT $0000 otherwise frog is on the right
COMMENT $0000 subtract length of object
COMMENT $0000 subtract X position of object
COMMENT $0000 if we are now on 'the left' we hit it
COMMENT $0000 get pointer to next object_list element in this band
COMMENT $0000 if empty we are done
COMMENT $0000 no collision detected, is that good?
COMMENT $0000 load band, if in lower half
COMMENT $0000 not collision is good
COMMENT $0000 otherwise we die (drowning)
COMMENT $0000 frog is on the left
COMMENT $0000 add the size of the frog to A (position of frog)
COMMENT $0000 compare it to x postion of object
COMMENT $0000 still lower, than no collision
COMMENT $0000 ok, a collision happened, check if good or bad
COMMENT $0000 load band information
COMMENT $0000 if in upper half, than it is good
COMMENT $0000 than we are being transported
COMMENT $0000 SPECIAL...
COMMENT $0000 middle band is treated as a street
COMMENT $0000 if a snake is encountered
COMMENT $0000 jump if not
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 hardcoded length of snake :-(
COMMENT $0000 otherwise go on
COMMENT $0000 otherwise die a snake death
COMMENT_LINE $0000 must be left snake than (or something is wrong)
COMMENT_LINE $0000 there are no special cars!
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 hardcoded length of snake :-(
COMMENT $0000 otherwise go on
COMMENT $0000 if lower than bitten by snake
COMMENT_LINE $0000 NOTE: A should always be zero here
COMMENT $0000 otherwise we die a DIE_CAR
COMMENT $0000 type of death
COMMENT $0000 the frog is lost
COMMENT $0000 decrease number of available frogs
COMMENT $0000 do a frog_dead intermission, kind of death
COMMENT_LINE $0000 is correctly set in 'kind_of_death'
COMMENT $0000 attract mode does not lose
COMMENT_LINE $0000 LDA # '0' ; compare to '0'
COMMENT_LINE $0000 CMPA no_frogs ; the number of available frogs
COMMENT $0000 if not zero yet, go on
COMMENT $0000 do a game_lost intermission and return there
COMMENT $0000 init_new_frog_vars expects dp at c8
COMMENT $0000 clear the frog variables
COMMENT $0000 init_new_frog_vars expects dp at c8
COMMENT_LINE $0000 rts
COMMENT $0000 die a DIE_OUT kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_DROWN kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_CROCO kind of
COMMENT $0000 jump to die
COMMENT $0000 die a DIE_SNAKE kind of
COMMENT $0000 jump to die
COMMENT $0000 no we are 'riding' some object
COMMENT $0000 lets test the special flag...
COMMENT $0000 if no special go on
COMMENT $0000 test for left crocodile
COMMENT $0000 if not, jump
COMMENT $0000 load the frog postion
COMMENT $0000 subtract X position of object
COMMENT $0000 hardcoded length of croco :-(
COMMENT $0000 not eaten by croco, nothing else can be here
COMMENT $0000 if lower frogger was eaten by crocodile
COMMENT $0000 are we sitting on a right croco?
COMMENT $0000 no? than jump
COMMENT_LINE $0000 hey dissi "bre ak"
COMMENT $0000 load the frog postion
COMMENT $0000 subtract X position of object
COMMENT $0000 hardcoded length of croco :-(
COMMENT $0000 not eaten by croco, nothing else can be here
COMMENT $0000 if higher frogger was eaten by crocodile
COMMENT $0000 look if this is a dived turtle
COMMENT $0000 if yes... drown
COMMENT_LINE $0000 check if we 'capture' a girl
COMMENT $0000 what's the girls status?
COMMENT $0000 is it displayed
COMMENT $0000 no? than jump
COMMENT $0000 load log object address
COMMENT $0000 address + 3 is stored, correct it
COMMENT $0000 subtract the current object information
COMMENT $0000 if not the same, go to no_girl_
COMMENT_LINE $0000 check for collision
COMMENT $0000 load girl x pos
COMMENT $0000 subtract frog_x pos
COMMENT $0000 absolute it
COMMENT $0000 if not in the range of 10
COMMENT $0000 jump to no girl
COMMENT $0000 IS CARRIED
COMMENT $0000 load bonus state
COMMENT $0000 add a girl bonus
COMMENT $0000 store it
COMMENT_LINE $0000 check if we hit a 'log' snake
COMMENT $0000 what's the snake's status?
COMMENT $0000 is it displayed
COMMENT $0000 no? than jump
COMMENT $0000 what band are we on now ?
COMMENT $0000 compare with 'snake band'
COMMENT $0000 if not our band... go on
COMMENT $0000 which contains the log a objectlist address
COMMENT $0000 load special
COMMENT $0000 if a snake is encountered
COMMENT $0000 jump if not
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 real hardcoded length
COMMENT $0000 absolut it
COMMENT $0000 somewhere arround the snakes head?
COMMENT $0000 if higher, than not hit
COMMENT $0000 otherwise than bitten by snake
COMMENT $0000 now we look for left snake
COMMENT $0000 no?, than jump
COMMENT $0000 load the frog postion
COMMENT $0000 minus X position of object
COMMENT $0000 absolut it
COMMENT $0000 somewhere arround the snakes head?
COMMENT $0000 if lower than bitten by snake
COMMENT $0000 load the frog postion
COMMENT $0000 add the speed of the object
COMMENT $0000 and store it
COMMENT $0000 are we out of bounds right?
COMMENT $0000 than dead
COMMENT $0000 are we out of bounds left?
COMMENT $0000 than dead
COMMENT $0000 ok, for checking of 'normal' bounds
COMMENT_LINE $0000 we need to calculate the band_x
COMMENT_LINE $0000 coordinates, 'tmp_band_offset' is now
COMMENT_LINE $0000 used as a helper
COMMENT_LINE $0000 it counts from 0 to 9
COMMENT_LINE $0000 if below 0 band_x is decremented
COMMENT_LINE $0000 if 10 or high it is incremented...
COMMENT $0000 add the speed of the object
COMMENT $0000 if below zero, dec band_x 1
COMMENT $0000 if higher GRID_SIZE...
COMMENT $0000 ... add one to band_x
COMMENT $0000 otherwise just store it back
COMMENT $0000 for internal checking
COMMENT $0000 make it modulo 10
COMMENT $0000 store it
COMMENT $0000 for internal checking
COMMENT $0000 make it modulo 10
COMMENT $0000 store it
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 + 1
COMMENT $0000 do positioning, load pos here
COMMENT $0000 add the speed, got from log information earlier
COMMENT $0000 is on left side out of bounds?
COMMENT $0000 no, than no coordinate fiddling
COMMENT $0000 is waiting
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT $0000 check if we are out of bounds on the right
COMMENT $0000 and 're' store it
COMMENT $0000 decrease the number of steps a snake does befor turing arround
COMMENT $0000 if not turning... go on
COMMENT $0000 look at special in object definition for information...
COMMENT $0000 are we now left or right?
COMMENT $0000 if right... jump
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 now go to opposite direction +1 equal log speed
COMMENT $0000 plus another to be 1 step faster
COMMENT $0000 get the limit of snake movement before turing again
COMMENT $0000 and store it
COMMENT $0000 done with snake
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 now go to opposite direction -1 equal log speed
COMMENT $0000 minus another to be 1 step faster
COMMENT $0000 get the limit of snake movement before turing again
COMMENT $0000 and store it
COMMENT $0000 done with snake, on turn, no animation check is needed
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT_LINE $0000 snake animation change
COMMENT $0000 load old sprite offsets
COMMENT $0000 negate them (A)
COMMENT $0000 negate them (B)
COMMENT $0000 add y position to old sprite offset y
COMMENT $0000 add x position to old sprite offset x
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 in move action here!
COMMENT_LINE $0000 following code must be executed here for all
COMMENT_LINE $0000 in moves in the vectorlist,
COMMENT_LINE $0000 it is the preparation of the next object,
COMMENT_LINE $0000 so we leave it here...
COMMENT_LINE $0000 I go out of may way here to have y only localy used
COMMENT_LINE $0000 that way I can use y as a indirect jump variable for the unlooping
COMMENT_LINE $0000 jump ,y is 3 cycles
COMMENT_LINE $0000 jump [location] is 8 cycles!
COMMENT $0000 [3] Increment X by 5
COMMENT $0000 add to B (x coordinate that is)
COMMENT_LINE $0000 the speed value (in the list object,
COMMENT_LINE $0000 e.g. car_1), increment Y by 1
COMMENT_LINE $0000 ;;;; NOT USED NOW ;;;;;
COMMENT_LINE $0000 idea is to add speed only X cycles
COMMENT_LINE $0000 that way really slow speeds and differences can be done
COMMENT_LINE $0000 the main crux is girl and snake which
COMMENT_LINE $0000 depend on parents speeds
COMMENT_LINE $0000 this can be accomplished using two new variables - but
COMMENT_LINE $0000 i don't think it is NEEDED - really
COMMENT_LINE $0000 the below few lines do NOT make a speed difference since its completley in MOVE TO
COMMENT $0000 brightness
COMMENT_LINE $0000 ;;;; NOT USED NOW END ;;;;;
COMMENT $0000 is on left side out of bounds?
COMMENT $0000 no, than no coordinate fiddling
COMMENT $0000 don't check for right out of bounds now
COMMENT $0000 check if we are out of bounds on the right
COMMENT_LINE $0000 BLE not_higher_out_of_bounds ; no? than go on
COMMENT $0000 store the new x position
COMMENT_LINE $0000 (X points to animation)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE X START
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 about 20 - 30 cycles have already passed
COMMENT_LINE $0000 but neither girl nor snake was processed
COMMENT_LINE $0000 so we may do a short special in move here
COMMENT_LINE $0000 dp is c8 and does not need to be restored internally!
COMMENT $0000 [12] stream processing done in jsrs
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ;;;;;;;;; MOVE X END
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 on each out of bounds a girl check is made...
COMMENT $0000 save coordinates
COMMENT $0000 what's the girls status?
COMMENT $0000 no girl at all? than jump
COMMENT $0000 if not the same, go to no_girl_
COMMENT $0000 what's the girls status?
COMMENT $0000 we are waiting to be displayed
COMMENT $0000 than go to might be displayed routine
COMMENT $0000 if frogger carries girl,
COMMENT $0000 do nothing
COMMENT_LINE $0000 now IS_DISPLAYED, resetting counter and reset status
COMMENT $0000 IS WAITING
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT_LINE $0000 bra no_girl ; do not redisplay at once!
COMMENT $0000 check if the girl will be displayed
COMMENT $0000 count down the round counter
COMMENT $0000 if not zero, than no girl will be displayed
COMMENT $0000 IS DISPLAYED
COMMENT $0000 load girl object address
COMMENT $0000 store it as first object
COMMENT_LINE $0000 now do positioning...
COMMENT $0000 the position of the log is on the stack
COMMENT $0000 more in the middle of the log
COMMENT $0000 get and store the X position
COMMENT $0000 y position hardcoded, since sprites have different starting points
COMMENT $0000 store y position
COMMENT $0000 if we did girl, than no snake here!
COMMENT $0000 what's the snake's status?
COMMENT $0000 no snake at all? than jump
COMMENT $0000 if not the same, go to no_snake_
COMMENT $0000 what's the snake's status?
COMMENT $0000 we are waiting to be displayed
COMMENT $0000 than go to might be displayed routine
COMMENT $0000 IS WAITING
COMMENT $0000 initiate the round counter
COMMENT $0000 store it
COMMENT $0000 check if the snake will be displayed
COMMENT $0000 count down the round counter
COMMENT $0000 if not zero, than no snake will be displayed
COMMENT $0000 IS DISPLAYED
COMMENT $0000 load snake object address
COMMENT $0000 store it as first object
COMMENT_LINE $0000 now do positioning...
COMMENT $0000 the position of the log is on the stack
COMMENT $0000 get and store the X position
COMMENT $0000 y position hardcoded, since sprites have different starting points
COMMENT $0000 store y position
COMMENT $0000 get the speed of snake start
COMMENT $0000 store it
COMMENT $0000 get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0000 and store it
COMMENT $0000 restore coordinates
COMMENT $0000 store the new x position, and increment U
COMMENT_LINE $0000 (U points to animation)
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 now we do that animation checking
COMMENT $0000 load object vector list to u
COMMENT_LINE $0000 ;;;;;;;;;;; costs e.g. in level 8 18 cycles alltogether, we are still in "IN MOVE" range
COMMENT_LINE $0000 ;;;; DRAW no snakes in intermission
COMMENT $0000 get special flag
COMMENT $0000 no_sprite_draw
COMMENT_LINE $0000 ;;;; DRAW no snakes in intermission
COMMENT_LINE $0000 ;;;;;;;;;;;
COMMENT $0000 decrease animation counter
COMMENT $0000 if zero, we must initialize new animation phase
COMMENT_LINE $0000 4 cycles less than above -> if I weren't lazy I would do that switch in other places also...
COMMENT $0000 load new object definition
COMMENT $0000 add new sprite offset y
COMMENT $0000 add new sprite offset x
COMMENT $0000 and store the corrected position
COMMENT $0000 store new object definition to object list
COMMENT $0000 load new animation counter start
COMMENT $0000 and set it in object list
COMMENT $0000 just a test if next vectorlist is 0
COMMENT $0000 and do the next object (or jump away)
COMMENT $0000 no_sprite_draw
COMMENT_LINE $0000 stop moving forcably!
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 move to time 1 lo, this means scaling
COMMENT $0000 and do the next
COMMENT $0000 A= SCALE, B = Timer IRQ check
COMMENT_LINE $0000 the following is the position checking loop
COMMENT_LINE $0000 waiting till an interrupt occurs
COMMENT $0000 scale for sprite
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 it turns out, sorting the different displayed
COMMENT_LINE $0000 vector drawing parts influences the
COMMENT_LINE $0000 stability of the screen,
COMMENT_LINE $0000 so e.g. printing the score (a fixed display)
COMMENT_LINE $0000 after moving or blinking parts -> is a bad idea
COMMENT_LINE $0000 since the score is also slightly displaced...
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr      calibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 jsr smallCalibration
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 start of vectrex memory with cartridge name...
COMMENT $0000 'g' is copyright sign
COMMENT $000B music from the rom
COMMENT $000D hight, width, rel y, rel x (from 0,0)
COMMENT $0011 some game information, ending with $80
COMMENT $001D end of game header
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $001E here the cartridge program starts off
COMMENT_LINE $001E ***************************************************************************
COMMENT_LINE $002F ***************************************************************************
COMMENT_LINE $002F MAGIC CARTHEADER SECTION
COMMENT_LINE $002F DO NOT CHANGE THIS STRUCT
COMMENT_LINE $002F ***************************************************************************
COMMENT $0030 magic handshake marker
COMMENT $0034 I always have a version
COMMENT_LINE $0036 in comm. structs
COMMENT $0036 v4e flags:
COMMENT_LINE $0038 $8000 + always set by v4e
COMMENT_LINE $0038 $4000 - hiscore entry supported
COMMENT_LINE $0038 $2000 - enable cart as ram
COMMENT_LINE $0038 $1000 - supply default font
COMMENT_LINE $0038 $0800 - 1: fast menu switch supported
COMMENT_LINE $0038 set to 0 if hiscore entry
COMMENT_LINE $0038 $0700 + v4e timing bits:
COMMENT_LINE $0038 0 - heuristic
COMMENT_LINE $0038 1 - zero
COMMENT_LINE $0038 2 - one
COMMENT_LINE $0038 3 - two
COMMENT_LINE $0038 4 - three
COMMENT_LINE $0038 $0080 - populate storage upon start
COMMENT_LINE $0038 $0040 - 1: extension calls used
COMMENT_LINE $0038 $0020 - gpios used (@7ffe)
COMMENT_LINE $0038 $0010 - free for future use
COMMENT_LINE $0038 $0008 - 1:screensaver enabled
COMMENT_LINE $0038 $0003 - font size
COMMENT_LINE $0038 first the variables for the v4e font system
COMMENT $0038 supplied by app:
COMMENT_LINE $003A if != 0: the cart uses this
COMMENT_LINE $003A ptr to supply a font and to
COMMENT_LINE $003A optimize strings;
COMMENT $003A supplied by app:
COMMENT_LINE $003B the cart stores a system
COMMENT_LINE $003B font at v4efontptr+0x20 and
COMMENT_LINE $003B adds v4efontwidth per line
COMMENT_LINE $003B ..must be at least $3f
COMMENT $003B supplied by cart:($5e or $7e)
COMMENT_LINE $003C last char supplied by v4e
COMMENT_LINE $003C (first one is always 0x20)
COMMENT $003C if !=0 a ptr to a list of ptrs
COMMENT_LINE $003E containing lists of constant
COMMENT_LINE $003E strings that can be optimized
COMMENT_LINE $003E for a given font (0 == end
COMMENT_LINE $003E of lists)
COMMENT_LINE $003E now the variables for the v4e store/load area
COMMENT $003E pointer to the area - 0: unused
COMMENT $0040 and its size
COMMENT $0042 = by v4e: return size for a load
COMMENT_LINE $0044 e.g. if set to zero in compile an != 0
COMMENT_LINE $0044 at the start shows whether something was
COMMENT_LINE $0044 loaded via 'populate storage upon start'
COMMENT_LINE $0048 end of v4e cart header
COMMENT_LINE $005E db       0,0,0,0                      ; playerCountOption, gameModeOption, musicOption. levelEditAllowedOption
COMMENT_LINE $005E db       "MAL", 0, "  1000"
COMMENT_LINE $005E db       "MAL", 0, "   500"
COMMENT_LINE $005E db       "MAL", 0, "   400"
COMMENT_LINE $005E db       "MAL", 0, "   300"
COMMENT_LINE $0068 db       0                            ; filler
COMMENT_LINE $0068 db       0                            ; checksum
FORCE_NO_SYMBOL $0068
FORCE_SYMBOL $006B optionsBlock
FORCE_SYMBOL $0077 highScoreCompetitionBlock
FORCE_SYMBOL $007A highScoreHardcoreBlock
COMMENT $007E 5 * 10
FORCE_NO_SYMBOL $007E
FORCE_SYMBOL $0080 tmp1
COMMENT $0083 5 * 10
FORCE_NO_SYMBOL $0083
FORCE_SYMBOL $0085 defaultValuesEeprom
FORCE_SYMBOL $0091 tmp1
COMMENT_LINE $0097 debug_print
COMMENT_LINE $0097 DEBUG_PRINT__
COMMENT_LINE $0097 rts
COMMENT_LINE $0097 null db "000",$80
COMMENT_LINE $0097 eins db "111",$80
COMMENT_LINE $0097 zwei db "222",$80
COMMENT_LINE $0097 store db "STORE",$80
COMMENT_LINE $0097 vier db "444",$80
COMMENT_LINE $0097 viera db "4 A",$80
COMMENT_LINE $0097 fuenf db "555",$80
COMMENT_LINE $0097 sechs db "666",$80
COMMENT_LINE $0097 defaults db "DEFAULT",$80
COMMENT_LINE $0097 DEBUG_PRINT eins
COMMENT_LINE $0097 Do one time initializations
COMMENT_LINE $0097 DEBUG_PRINT eins
COMMENT $0097 number of first attract mode
FORCE_SYMBOL $0097 attractCount
COMMENT $009A not in highscore edit mode
FORCE_SYMBOL $009A highScoreEditMode
COMMENT $009D we assume a eEprom is available
FORCE_SYMBOL $009D ignoreDs2431
COMMENT $00A0 movement of frog in title screen default
FORCE_SYMBOL $00A0 initMoveTable_addresses
FORCE_SYMBOL $00A3 initMoveTable
FORCE_SYMBOL $00A6 gimickTable
FORCE_SYMBOL $00A9 gimmick_pointer
COMMENT_LINE $00AC check if we should ignore eEprom completly (Button press on startup)
COMMENT $00AC get button status
FORCE_SYMBOL $00AC Read_Btns
COMMENT $00AF is a button pressed?
FORCE_NO_SYMBOL $00AF
COMMENT $00B3 yes, than set ignore flag
FORCE_SYMBOL $00B3 ignoreDs2431
COMMENT $00B6 check if v4e did load bytes from storage area
FORCE_SYMBOL $00B6 v4eStorageLoaded
COMMENT $00B9 if != 0, than yes -> jump
COMMENT $00BB initiate eEprom Highscore defaults
COMMENT $00BD check if there is any v4e at all?
FORCE_SYMBOL $00BD v4ecartflags
COMMENT $00C0 if not (positive) jump
COMMENT $00C2 otherwise fill the (usual) ROM with default values (v4e this is RAM to!)
FORCE_SYMBOL $00C2 COPY_RAM_TO_VECROM
COMMENT $00C5 is there an eprom (ignore flag always checked in eeprom routines)
FORCE_SYMBOL $00C5 checkEprom
COMMENT_LINE $00C8 eprom saves valus in three stages, to keep times smaller (when only block save is needed)
FORCE_SYMBOL $00CB current_eprom_blocksize
FORCE_SYMBOL $00CE optionsBlock
COMMENT $00D1 load eprom data (also resets if no data found)
FORCE_SYMBOL $00D1 eeprom_load_option
COMMENT $00D4 check if there is any v4e at all?
FORCE_SYMBOL $00D4 v4ecartflags
COMMENT $00D7 if yes, than don't save the same stuff 3 times, poor Flash...
FORCE_SYMBOL $00DC current_eprom_blocksize
FORCE_SYMBOL $00DF highScoreCompetitionBlock
COMMENT $00E2 load eprom data (also resets if no data found)
FORCE_SYMBOL $00E2 eeprom_load_highscore
FORCE_SYMBOL $00E8 current_eprom_blocksize
FORCE_SYMBOL $00EB highScoreHardcoreBlock
COMMENT $00EE load eprom data (also resets if no data found)
FORCE_SYMBOL $00EE eeprom_load_highscore
FORCE_NO_SYMBOL $00F1
FORCE_SYMBOL $00F3 timeStringBASE
FORCE_SYMBOL $00F6 timeLeft
FORCE_SYMBOL $00F9 Move_Mem_a
FORCE_NO_SYMBOL $00FC
FORCE_SYMBOL $00FE levelStringBASE
FORCE_SYMBOL $0101 levelString
FORCE_SYMBOL $0104 Move_Mem_a
FORCE_NO_SYMBOL $0107
COMMENT $0109 default level 1
FORCE_SYMBOL $0109 levelFromOptions
COMMENT $010C first jumper of ym decoder -> direct RTS
FORCE_SYMBOL $010C emptyStreamInMove
FORCE_SYMBOL $010F inMovePointer
COMMENT $0112 no music is played
FORCE_NO_SYMBOL $0112
FORCE_SYMBOL $0115 nextMusic
COMMENT $0118 we are not in attract mode
FORCE_SYMBOL $0118 isAttractMode
COMMENT_LINE $011B done with one times
COMMENT_LINE $011B new game will always start here
COMMENT $011B initialize game variables
FORCE_SYMBOL $011B init_vars
COMMENT $011E startup screen
FORCE_SYMBOL $011E init_screen
COMMENT_LINE $0121 init_screen messes up variables,
COMMENT_LINE $0121 so init them again :-)
COMMENT $0121 initialize game variables
FORCE_SYMBOL $0121 init_vars
COMMENT_LINE $0124 entry point for attract mode from main menu
COMMENT $0124 starting attract mode resets counter
FORCE_SYMBOL $0124 RecalCounter
COMMENT $0127 otherwise joystick simulation would not sync
FORCE_SYMBOL $012A my_random
COMMENT $012D set up the first level
FORCE_SYMBOL $012D setup_level
COMMENT $0130 player 1 first
FORCE_SYMBOL $0130 currentPlayer
COMMENT $0133 if there are two players, we first must set up there
FORCE_SYMBOL $0133 playerCountOption
COMMENT $0136 RAM save structures
COMMENT $0138 init save structures
FORCE_SYMBOL $0138 P1_start
FORCE_SYMBOL $013B savePlayer
FORCE_SYMBOL $013E P2_start
FORCE_SYMBOL $0141 savePlayer
COMMENT $0144 round_startup_main expects dp set to d0
FORCE_NO_SYMBOL $0144
COMMENT $0148 no music is playing ->0
FORCE_SYMBOL $0148 Vec_Music_Flag
COMMENT $014B shadow regs
FORCE_SYMBOL $014B Init_Music_Buf
COMMENT $014E ROM function that does the sound playing
FORCE_SYMBOL $014E Do_Sound
COMMENT $0151 this piece of music
FORCE_SYMBOL $0151 gameStartMusic
COMMENT $0154 must be played
FORCE_SYMBOL $0154 currentMusic
COMMENT $0157 NOW
FORCE_SYMBOL $0157 init_ym_sound
COMMENT $015A well, this does the round initializing, main optimized special
COMMENT $015A just for assembler optimization...
FORCE_NO_SYMBOL $015A
COMMENT $015C recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $015C RecalCounter
FORCE_NO_SYMBOL $015F
FORCE_SYMBOL $0161 RecalCounter
COMMENT $0164 Wait for timer t2
FORCE_SYMBOL $0164 VIA_int_flags
COMMENT $0168 Store refresh value
FORCE_NO_SYMBOL $0168
COMMENT $016B into timer t2
FORCE_SYMBOL $016B VIA_t2_lo
FORCE_NO_SYMBOL $016D
COMMENT $0170 blank low and zero low
FORCE_SYMBOL $0170 VIA_cntl
COMMENT $0172 clear shift register
FORCE_SYMBOL $0172 VIA_shift_reg
COMMENT $0174 clear D/A register
FORCE_SYMBOL $0174 VIA_port_a
FORCE_NO_SYMBOL $0176
COMMENT $0179 mux=1, disable mux
FORCE_SYMBOL $0179 VIA_port_b
COMMENT $017B mux=1, enable mux
FORCE_SYMBOL $017B VIA_port_b
FORCE_NO_SYMBOL $017D
COMMENT $017F disable mux
FORCE_SYMBOL $017F VIA_port_b
COMMENT $0181 is a "old" jump still ongoing?
FORCE_SYMBOL $0181 froggerInJump
FORCE_SYMBOL $0186 query_joystick
COMMENT $0189 after draw objects, dp is set to d0
COMMENT_LINE $0189 splitted, saves one DP_TO_C8!
COMMENT $0189 draw all graphical elements (and does everything else, since everything else is "in move" now)
FORCE_SYMBOL $0189 draw_objects
COMMENT $018C only when not 1 level and only when 0 or 1 house is occupied
FORCE_SYMBOL $018C gimmickPossible
COMMENT $0193 no gimmick in intermission
FORCE_SYMBOL $0193 intermissionActive
COMMENT $019A no gimick in attrackt
FORCE_SYMBOL $019A isAttractMode
COMMENT $01A1 no gimick while training
FORCE_SYMBOL $01A1 gameModeOption
COMMENT $01A8 load new vector (length was cut by timer :-))
COMMENT $01AB is it small yet?
FORCE_NO_SYMBOL $01AB
FORCE_SYMBOL $01AF current_frog_heading
FORCE_SYMBOL $01B2 HEADING_DOWN
FORCE_SYMBOL $01B6 gimmickActive
FORCE_SYMBOL $01BB gimmick_pointer
FORCE_NO_SYMBOL $01BE
FORCE_NO_SYMBOL $01C0
FORCE_SYMBOL $01C2 gimmick_pos
FORCE_NO_SYMBOL $01C5
FORCE_SYMBOL $01C7 gimmick_object
FORCE_NO_SYMBOL $01CA
FORCE_SYMBOL $01CC gimmick_anim_counter
FORCE_NO_SYMBOL $01CF
FORCE_SYMBOL $01D1 gimmick_countdown
FORCE_NO_SYMBOL $01D4
FORCE_SYMBOL $01D6 gimmickActive
FORCE_NO_SYMBOL $01D9
FORCE_SYMBOL $01DB gimmick_speed
FORCE_SYMBOL $01DE gimmick_pointer
FORCE_NO_SYMBOL $01E1
FORCE_NO_SYMBOL $01E3
FORCE_SYMBOL $01E7 gimickTable
FORCE_SYMBOL $01EA gimmick_pointer
FORCE_SYMBOL $01ED gimmickActive
COMMENT $01F4 go to 0,0
FORCE_NO_SYMBOL $01F4
COMMENT $01F6 /BLANK low and /ZERO low
FORCE_SYMBOL $01F6 VIA_cntl
FORCE_NO_SYMBOL $01F8
FORCE_SYMBOL $01FA Intensity_a
COMMENT_LINE $01FD ............................................................................
COMMENT_LINE $01FD this is actually the same as the code used in the main sprite loop
COMMENT_LINE $01FD just fitted for gimick
COMMENT $01FD scale for game positioning
FORCE_SYMBOL $01FD SCALE_FACTOR_GAME
COMMENT $01FF move to time 1 lo, this means scaling
FORCE_SYMBOL $01FF VIA_t1_cnt_lo
COMMENT $0201 load position
FORCE_SYMBOL $0201 gimmick_pos
COMMENT_LINE $0204 move to
COMMENT $0204 Store Y in D/A register
FORCE_SYMBOL $0204 VIA_port_a
COMMENT $0206 Blank low, zero high?
FORCE_NO_SYMBOL $0206
FORCE_SYMBOL $0208 VIA_cntl
COMMENT $020B Enable mux
FORCE_SYMBOL $020B VIA_port_b
COMMENT $020D Disable mux
FORCE_SYMBOL $020D VIA_port_b
COMMENT $020F Store X in D/A register
FORCE_SYMBOL $020F VIA_port_a
COMMENT $0211 enable timer
FORCE_SYMBOL $0211 VIA_t1_cnt_hi
COMMENT_LINE $0213 in move stuff, since it
COMMENT_LINE $0213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0213 ;;;;;;;;; IN MOVE GIMICK START
COMMENT_LINE $0213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0213 gimmick_countdown
FORCE_NO_SYMBOL $0218
FORCE_SYMBOL $021A gimmickActive
COMMENT $021D move to time 1 lo, this means scaling
FORCE_SYMBOL $021D VIA_t1_cnt_lo
COMMENT $021F move to time 1 lo, this means scaling
FORCE_SYMBOL $021F VIA_t1_cnt_hi
FORCE_SYMBOL $0222 gimmickPossible
COMMENT $0225 and do the next
COMMENT_LINE $0227 in move stuff start
COMMENT $0227 load otter position
FORCE_SYMBOL $0227 gimmick_pos
COMMENT $022A add the speed
FORCE_SYMBOL $022A gimmick_speed
COMMENT $022D store the new x position
COMMENT $0230 load the otter object to U
FORCE_SYMBOL $0230 gimmick_object
COMMENT $0233 decrease animation counter
FORCE_SYMBOL $0233 gimmick_anim_counter
COMMENT $0236 if zero, we must initialize new animation phase
COMMENT $0238 load old sprite offsets
FORCE_NO_SYMBOL $0238
COMMENT $023A negate them (A)
COMMENT $023B negate them (B)
COMMENT $023C add y position to old sprite offset y
FORCE_SYMBOL $023C gimmick_pos
COMMENT $023F add x position to old sprite offset x
COMMENT $0242 load new object definition
FORCE_NO_SYMBOL $0242
COMMENT $0244 add new sprite offset y
FORCE_NO_SYMBOL $0244
COMMENT $0246 add new sprite offset x
FORCE_NO_SYMBOL $0246
COMMENT $0248 and store the corrected position
FORCE_SYMBOL $0248 gimmick_pos
COMMENT $024B store new object definition to object list
FORCE_SYMBOL $024B gimmick_object
COMMENT $024E load new animation counter start
FORCE_NO_SYMBOL $024E
COMMENT $0250 and set it in object list
FORCE_SYMBOL $0250 gimmick_anim_counter
COMMENT $0253 load object vector list to X,
FORCE_NO_SYMBOL $0253
COMMENT_LINE $0255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0255 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $0255 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0255 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0258
COMMENT $025A 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $025A VIA_cntl
FORCE_SYMBOL $025C calibration
FORCE_NO_SYMBOL $025F
FORCE_SYMBOL $0261 Intensity_a
FORCE_SYMBOL $0264 KarlGimmickSound
FORCE_SYMBOL $0267 play_sfx_x_if_nothing_else
COMMENT $026A otherwise joystick simulation would not sync
FORCE_NO_SYMBOL $026D
COMMENT $0271 Bonus score for gimmick!
FORCE_SYMBOL $0274 score_digit_2
FORCE_SYMBOL $0277 score_digit_2
FORCE_SYMBOL $027C score_digit_2
FORCE_SYMBOL $027F score_digit_3
FORCE_SYMBOL $0282 score_digit_3
FORCE_SYMBOL $0287 score_digit_3
FORCE_SYMBOL $028A score_digit_4
FORCE_SYMBOL $028D score_digit_4
FORCE_SYMBOL $0292 score_digit_4
FORCE_SYMBOL $0295 score_digit_5
COMMENT $0298 check if we have a snake on a log
FORCE_SYMBOL $0298 snake_status
COMMENT $029B if snake is displayed,
FORCE_SYMBOL $029B IS_DISPLAYED
COMMENT $029D we must make the "sname sound" (jump if not)
FORCE_SYMBOL $029F KarlSnakeNoise_Sound
FORCE_SYMBOL $02A2 play_sfx_x_if_nothing_else
COMMENT $02A5 check if quite some time has passed, if so
FORCE_SYMBOL $02A5 RecalCounter
COMMENT $02A8 12 ~ 1 Minute with WaitRecal 50 Hz
FORCE_NO_SYMBOL $02A8
COMMENT $02AA check if its is time for another of those sounds
FORCE_NO_SYMBOL $02AC
COMMENT $02AE if yes, make that "shhhh" sound (or jump out)
FORCE_SYMBOL $02B0 KarlWaveNoise_Sound
FORCE_SYMBOL $02B3 play_sfx_x_if_nothing_else
COMMENT_LINE $02B6 put all gathered sound chips and throw them at the PSG
FORCE_SYMBOL $02B6 do_my_sound
COMMENT $02B9 are we in attract mode?
FORCE_SYMBOL $02B9 isAttractMode
COMMENT $02BC no? -> than jump
FORCE_SYMBOL $02C0 calibration
COMMENT $02C3 otherwise check if our movement sim is over (== 0)
FORCE_SYMBOL $02C3 attractMovePointer
FORCE_NO_SYMBOL $02C6
COMMENT $02CA if not over, display our "press button" message and
COMMENT $02CC get button status
FORCE_SYMBOL $02CC Read_Btns
COMMENT $02CF is a button pressed?
FORCE_NO_SYMBOL $02CF
COMMENT $02D1 if not, start another round
COMMENT $02D5 correct current stack
FORCE_NO_SYMBOL $02D5
COMMENT $02D7 correct DP
FORCE_SYMBOL $02D7 DP_to_C8
COMMENT $02DA and jump out of here!
FORCE_SYMBOL $02DA init_screen
COMMENT_LINE $02DD ***************************************************************************
COMMENT $02EB y
COMMENT $02EC x
COMMENT $02ED length
COMMENT $02F0 y
COMMENT $02F1 x
COMMENT $02F2 length
COMMENT $02F5 y
COMMENT $02F6 x
COMMENT $02F7 length
COMMENT $02FA y
COMMENT $02FB x
COMMENT $02FC length
COMMENT $02FF y
COMMENT $0300 x
COMMENT $0301 length
COMMENT $0304 y
COMMENT $0305 x
COMMENT $0306 length
COMMENT_LINE $0309 print string "presss button to play"
FORCE_SYMBOL $0309 buttonBlinker
COMMENT $030E every 20 cylces the blink "changes" the state
FORCE_NO_SYMBOL $030E
FORCE_SYMBOL $0310 buttonBlinker
FORCE_SYMBOL $0313 buttonBlinkerIntensity
COMMENT $0318 0 intensity
FORCE_NO_SYMBOL $0318
FORCE_SYMBOL $031A buttonBlinkerIntensity
COMMENT $031F or 60 intensity
FORCE_NO_SYMBOL $031F
FORCE_SYMBOL $0321 buttonBlinkerIntensity
FORCE_SYMBOL $0324 buttonBlinkerIntensity
FORCE_SYMBOL $0327 Intensity_a
COMMENT $032A size of text in strength
FORCE_NO_SYMBOL $032A
FORCE_SYMBOL $032D Vec_Text_Height
COMMENT $0330 scale for movement
FORCE_NO_SYMBOL $0330
COMMENT $0332 move to time 1 lo, this means scaling
FORCE_SYMBOL $0332 VIA_t1_cnt_lo
FORCE_SYMBOL $0334 pressButton
FORCE_NO_SYMBOL $0337
FORCE_SYMBOL $033A sync_Print_Str_d
FORCE_NO_SYMBOL $033D
FORCE_SYMBOL $033F Intensity_a
COMMENT_LINE $0342 rts
COMMENT_LINE $0342 ***************************************************************************
COMMENT_LINE $0342 move to score position
COMMENT $0342 this and the overnext instruction, zero the beam!
COMMENT $0345 /BLANK low and /ZERO low
FORCE_SYMBOL $0345 VIA_cntl
COMMENT_LINE $0347 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT_LINE $0347 delay in zeroing + integrator reset makes display of score much nore stable
COMMENT $0347 reset integrator offset
FORCE_SYMBOL $0347 VIA_port_a
FORCE_SYMBOL $0349 VIA_port_b
COMMENT $034B clear A, and scale to B
FORCE_NO_SYMBOL $034B
COMMENT $034E patched for speed... /2
COMMENT $034E move to time 1 lo, this means scaling
FORCE_SYMBOL $034E VIA_t1_cnt_lo
COMMENT_LINE $0350 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0350 still 0
COMMENT $0350 y,x
FORCE_NO_SYMBOL $0350
FORCE_SYMBOL $0352 VIA_port_b
COMMENT $0354 Blank low, zero high?
FORCE_NO_SYMBOL $0354
FORCE_SYMBOL $0356 VIA_cntl
COMMENT $0358 Disable mux
FORCE_SYMBOL $0358 VIA_port_b
COMMENT $035A enable timer
FORCE_SYMBOL $035A VIA_t1_cnt_hi
COMMENT_LINE $035C we load our X integrators AFTER we enable RAMP
COMMENT_LINE $035C since this is a solidary move this is ok
COMMENT_LINE $035C it saves a few cycles out of the timer wait
COMMENT_LINE $035C but we have to offset the loss of ramp with a higher integration value
COMMENT $035C player 1 first
FORCE_SYMBOL $035C currentPlayer
COMMENT $0361 X pos relative to start
COMMENT $0363 Store X in D/A register
FORCE_SYMBOL $0363 VIA_port_a
COMMENT_LINE $0365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0365 ;;;;;;;;; MOVE SCORE START
COMMENT_LINE $0365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0365 125 cycles to spare
COMMENT_LINE $0365 do everything really slowly in here - we have time enough!!!
FORCE_SYMBOL $0365 intermissionActive
COMMENT_LINE $036A following move frog takes abou 80 cycles
COMMENT_LINE $036A ideal for another in move routine!
COMMENT $036A get joystick stuff, and move frog, collision detection...
FORCE_SYMBOL $036A move_frog
FORCE_NO_SYMBOL $036D
COMMENT $0371 Vec_Str_Ptr ;Point to start of text string
FORCE_SYMBOL $0371 score_digit_5
COMMENT $0374 Point to start of chargen bitmaps
FORCE_SYMBOL $0374 zahlen2
FORCE_SYMBOL $0377 isAttractMode
FORCE_SYMBOL $037C VIA_t1_cnt_lo
FORCE_SYMBOL $037E VIA_t1_cnt_hi
FORCE_NO_SYMBOL $0382
COMMENT_LINE $0384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0384 ;;;;;;;;; MOVE SCORE END
COMMENT_LINE $0384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0384 done with move?
FORCE_SYMBOL $0384 VIA_int_flags
COMMENT $0386 no, than go on waiting
COMMENT $0388 Save string pointer
FORCE_SYMBOL $0388 Vec_Str_Ptr
COMMENT $038B Point to start of chargen bitmaps
FORCE_SYMBOL $038B zahlen2
COMMENT $038E a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $038E
COMMENT $0391 Clear D/A output
FORCE_SYMBOL $0391 VIA_port_a
COMMENT $0393 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $0393 VIA_aux_cntl
COMMENT_LINE $0395 first entry here, ramp is disabled
COMMENT_LINE $0395 if there was a jump from below
COMMENT_LINE $0395 ramp will be enabled by next line
COMMENT $0395 ramp off/on set mux to channel 1
FORCE_SYMBOL $0395 VIA_port_b
COMMENT $0397 Enable mux
FORCE_SYMBOL $0397 VIA_port_b
COMMENT $0399 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
FORCE_NO_SYMBOL $0399
COMMENT $039C Disable mux
FORCE_SYMBOL $039C VIA_port_b
COMMENT $039E Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $039E VIA_port_b
COMMENT $03A0 Enable mux
FORCE_SYMBOL $03A0 VIA_port_b
COMMENT $03A2 disable mux
FORCE_SYMBOL $03A2 VIA_port_b
COMMENT_LINE $03A4 Note:
COMMENT_LINE $03A4 doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $03A4 Get text width
COMMENT $03A7 Send it to the D/A
FORCE_SYMBOL $03A7 VIA_port_a
COMMENT $03A9 [4]enable RAMP, disable mux
FORCE_SYMBOL $03A9 VIA_port_b
COMMENT $03AB [3]
COMMENT_LINE $03AD one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $03AD 13 cycles overhead
COMMENT_LINE $03AD ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $03AD [+5]Get bitmap from chargen table
COMMENT $03AF [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $03AF VIA_shift_reg
COMMENT $03B1 [+6]Get next character
COMMENT $03B3 [+3]Go back if not terminator
COMMENT $03B5 [4]disable RAMP, disable mux
FORCE_SYMBOL $03B5 VIA_port_b
COMMENT $03B7 Negate text width to D/A
FORCE_SYMBOL $03B7 VIA_port_a
COMMENT $03B9 enable ramp, disable mux
FORCE_NO_SYMBOL $03B9
COMMENT $03BB enable RAMP, disable mux
FORCE_SYMBOL $03BB VIA_port_b
COMMENT $03BD [4]Check for last row
COMMENT $03C0 [3]Branch if last row
COMMENT $03C2 [3]Point to next chargen row
FORCE_SYMBOL $03C2 ZAHLEN_MAX
COMMENT $03C5 [6]Get string length
COMMENT $03C7 [7]
FORCE_SYMBOL $03C7 Vec_Str_Ptr
COMMENT $03CA [2] - 2
FORCE_NO_SYMBOL $03CA
COMMENT $03CC [3]Delay a moment
COMMENT_LINE $03CE I think if the Macro was given the length of the string
COMMENT_LINE $03CE than another 2 cycles per line can be saved,
COMMENT_LINE $03CE since we probably could use leay -1,y bne...
COMMENT_LINE $03CE in the loop, and not only load "A", but also B with textheight!
COMMENT $03CE [6] Point to start of text string
FORCE_SYMBOL $03CE Vec_Str_Ptr
COMMENT $03D1 [3]Delay a moment
COMMENT $03D3 [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $03D3
COMMENT $03D5 [2]
COMMENT $03D6 [2]
COMMENT $03D7 [3]Delay some more in a loop
COMMENT $03D9 disable RAMP, disable mux
FORCE_SYMBOL $03D9 VIA_port_b
COMMENT $03DB Get text height
COMMENT $03DD Store text height in D/A [go down -> later]
FORCE_SYMBOL $03DD VIA_port_a
COMMENT $03DF Enable mux
FORCE_SYMBOL $03DF VIA_port_b
FORCE_NO_SYMBOL $03E1
COMMENT $03E4 disable RAMP, disable mux
FORCE_SYMBOL $03E4 VIA_port_b
COMMENT $03E6 Clear D/A
FORCE_SYMBOL $03E6 VIA_port_a
COMMENT $03E8 Go back for next scan line
COMMENT $03EA #$98 ;
FORCE_NO_SYMBOL $03EA
COMMENT $03EC T1->PB7 enabled
FORCE_SYMBOL $03EC VIA_aux_cntl
FORCE_NO_SYMBOL $03EE
COMMENT $03F0 /BLANK low and /ZERO low
FORCE_SYMBOL $03F0 VIA_cntl
COMMENT_LINE $03F2 jsr smallCalibration
COMMENT_LINE $03F3 ***************************************************************************
COMMENT_LINE $03F3 belongs to draw object below
COMMENT_LINE $03F3 is here because of short branch...
COMMENT $03F3 B timer 1 bit test
FORCE_NO_SYMBOL $03F3
COMMENT $03F5 done with move?
FORCE_SYMBOL $03F5 VIA_int_flags
COMMENT $03F8 no, than go on waiting
COMMENT $03FA die a DIE_TIME kind of
FORCE_SYMBOL $03FA DIE_TIME
COMMENT $03FD type of death
FORCE_SYMBOL $03FD kind_of_death
COMMENT $03FF decrease number of available frogs
FORCE_SYMBOL $03FF no_frogs
COMMENT $0401 do a frog_dead intermission, kind of death
FORCE_SYMBOL $0401 frog_dead
COMMENT_LINE $0404 is correctly set in 'kind_of_death'
FORCE_SYMBOL $0404 no_frogs2
COMMENT $0407 if not zero yet, go on
COMMENT $0409 otherwise do a game_lost intermission
FORCE_SYMBOL $0409 game_lost
FORCE_NO_SYMBOL $040C
COMMENT $0410 clear the frog variables
FORCE_SYMBOL $0410 init_new_frog_vars
FORCE_SYMBOL $0413 DP_to_D0
COMMENT $0416 is there a current piece playing?
FORCE_SYMBOL $0416 currentMusic
COMMENT $0419 if not
COMMENT $041B take that piece given and
FORCE_SYMBOL $041B inGameMusic1
COMMENT $041E play it now
FORCE_SYMBOL $041E currentMusic
FORCE_SYMBOL $0421 init_ym_sound
COMMENT $0426 otherwise, store it as next possible piece
FORCE_SYMBOL $0426 inGameMusic1
FORCE_SYMBOL $0429 nextMusic
COMMENT_LINE $042D ***************************************************************************
COMMENT_LINE $042D exits with dp to d0
COMMENT_LINE $042D nothing is returned
FORCE_NO_SYMBOL $042D
COMMENT $042F all following sprites have intensity of $60
COMMENT $042F Store intensity in D/A
FORCE_SYMBOL $042F VIA_port_a
COMMENT $0431 mux disabled channel 2
FORCE_NO_SYMBOL $0431
FORCE_SYMBOL $0434 VIA_port_b
COMMENT $0436 mux enabled channel 2
FORCE_SYMBOL $0436 VIA_port_b
COMMENT $0438 turn off mux
FORCE_SYMBOL $0438 VIA_port_b
COMMENT_LINE $043A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043A print the score, # of lives and # level, all in one "fast" draw String, takes pretty exactly 2000 cylces
COMMENT_LINE $043A in the move section all the frog move data handling from the joystick query is done
COMMENT_LINE $043A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $043A no jumper
FORCE_SYMBOL $043A do_score
COMMENT_LINE $043D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043D here is the entry point for the timer count down / intermissions / death
COMMENT_LINE $043D when frog reaches home...
COMMENT_LINE $043D first draw homes
COMMENT_LINE $043D than 2 lines in the middle
COMMENT_LINE $043D and last the timer line
COMMENT_LINE $043D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $043D independent code section
COMMENT_LINE $043D draw home, middway and timer line
FORCE_NO_SYMBOL $043D
COMMENT $0440 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0440 VIA_aux_cntl
COMMENT $0442 /BLANK low and /ZERO low
FORCE_SYMBOL $0442 VIA_cntl
COMMENT_LINE $0444 for positioning allways 'SCALE_FACTOR_GRID'
COMMENT $0444 clear A, and scale to B
COMMENT $0447 patched for speed... /2
COMMENT $0447 move to time 1 lo, this means scaling
FORCE_SYMBOL $0447 VIA_t1_cnt_lo
COMMENT_LINE $0449 this is again a move to D, this time D is splitted into two B, A is
COMMENT_LINE $0449 still 0
COMMENT $0449 B=Y pos
FORCE_SYMBOL $044B VIA_port_b
COMMENT $044D Blank low, zero high?
FORCE_NO_SYMBOL $044D
FORCE_SYMBOL $044F VIA_cntl
COMMENT $0451 Disable mux
FORCE_SYMBOL $0451 VIA_port_b
COMMENT $0453 X pos relative to start
COMMENT $0455 Store X in D/A register
FORCE_SYMBOL $0455 VIA_port_a
COMMENT $0457 enable timer
FORCE_SYMBOL $0457 VIA_t1_cnt_hi
COMMENT_LINE $0459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0459 ;;;;;;;;; MOVE 3 START
COMMENT_LINE $0459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0459 prepare hardcoded vectorlength for home draw (20)
COMMENT $0459 0 to shiftreg
FORCE_SYMBOL $0459 VIA_shift_reg
FORCE_NO_SYMBOL $045B
COMMENT $045D remember in counter
FORCE_NO_SYMBOL $045D
COMMENT $0460 no jumper
FORCE_NO_SYMBOL $0460
COMMENT_LINE $0464 collosion only allowed when not already dead
FORCE_SYMBOL $0464 frogDeath
COMMENT_LINE $046B hey dissi "br eak"
COMMENT $046B load band information
FORCE_SYMBOL $046B frog_y_band
COMMENT_LINE $046D first we must get the position of this band in the band list
COMMENT $046D one less, since homes, don't have a band
COMMENT $046E fixed to 16 byte,
COMMENT $046F so we just use some LSL instead
COMMENT $0470 of MUL...
COMMENT $0473 load bandlist
FORCE_SYMBOL $0473 band_list
COMMENT $0476 and go to current band in bandlist
COMMENT $0478 get pointer to next object_list element in this band
COMMENT $047A if empty we are done
COMMENT_LINE $047C ok, here we have an object_list entry we must check...
FORCE_NO_SYMBOL $047C
COMMENT_LINE $047F U pointer to object_list, points to position (y,x) information of current entry
COMMENT_LINE $047F X pointer to band_list, points to NEXT possible entry of object_list
COMMENT_LINE $047F Y pointer to object structure, points to speed of the current object
COMMENT_LINE $047F now it gets tricky, we have to compare the position information,
COMMENT_LINE $047F which is in SCALE_FACTOR_GAME
COMMENT_LINE $047F with the sprite length and width, which is in SCALE_FACTOR_SPRITE
COMMENT_LINE $047F we dismiss the difference here and just think that the
COMMENT_LINE $047F value we find in 'length' in the object definition is
COMMENT_LINE $047F also in SCALE_FACTOR_GAME, than we can do a normal compare!
COMMENT $047F load frog position
FORCE_SYMBOL $047F frog_x
COMMENT $0481 so that detection is not all THAT sharp
COMMENT $0482 so that detection is not all THAT sharp
COMMENT $0483 compare it to x postion of object
FORCE_NO_SYMBOL $0483
COMMENT $0485 if frog further left, jump
COMMENT $0487 subtract length of object
FORCE_NO_SYMBOL $0487
COMMENT $0489 subtract X position of object
FORCE_NO_SYMBOL $0489
COMMENT $048B if we are now on 'the left' we hit it
COMMENT $048D get pointer to next object_list element in this band
COMMENT $048F if empty we are done
COMMENT $0491 load band, if in lower half
FORCE_SYMBOL $0491 frog_y_band
COMMENT $0493 not collision is good
FORCE_NO_SYMBOL $0493
COMMENT $0495 otherwise we die (drowning)
FORCE_SYMBOL $0497 out_here
COMMENT $049A add the size of the frog to A (position of frog)
FORCE_SYMBOL $049A current_frog_size_x
COMMENT $049C compare it to x postion of object
FORCE_NO_SYMBOL $049C
COMMENT $049E still lower, than no collision
COMMENT $04A0 load band information
FORCE_SYMBOL $04A0 frog_y_band
COMMENT $04A2 if in upper half, than it is good
FORCE_NO_SYMBOL $04A2
COMMENT $04A4 than we are being transported
COMMENT $04A6 SPECIAL...
FORCE_NO_SYMBOL $04A6
COMMENT $04A8 middle band is treated as a street
COMMENT $04AA if a snake is encountered
FORCE_SYMBOL $04AA SPECIAL_RIGHT_SNAKE
COMMENT $04AC jump if not
COMMENT $04AE load the frog postion
FORCE_SYMBOL $04AE frog_x
COMMENT $04B0 minus X position of object
FORCE_NO_SYMBOL $04B0
COMMENT $04B2 hardcoded length of snake :-(
FORCE_NO_SYMBOL $04B2
COMMENT $04B4 otherwise go on
COMMENT $04B6 otherwise die a snake death
COMMENT_LINE $04B8 must be left snake than (or something is wrong)
COMMENT_LINE $04B8 there are no special cars!
COMMENT $04B8 load the frog postion
FORCE_SYMBOL $04B8 frog_x
COMMENT $04BA minus X position of object
FORCE_NO_SYMBOL $04BA
COMMENT $04BC hardcoded length of snake :-(
FORCE_NO_SYMBOL $04BC
COMMENT $04BE otherwise go on
COMMENT $04C0 if lower than bitten by snake
COMMENT_LINE $04C2 NOTE: A should always be zero here
COMMENT $04C2 otherwise we die a DIE_CAR
FORCE_SYMBOL $04C2 DIE_CAR
COMMENT $04C4 type of death
FORCE_SYMBOL $04C4 kind_of_death
COMMENT $04C6 decrease number of available frogs
FORCE_SYMBOL $04C6 no_frogs
COMMENT $04C8 do a frog_dead intermission, kind of death
FORCE_SYMBOL $04C8 frog_dead
COMMENT_LINE $04CB is correctly set in 'kind_of_death'
FORCE_SYMBOL $04CB isAttractMode
COMMENT $04CE attract mode does not lose
COMMENT_LINE $04D0 LDA # '0' ; compare to '0'
COMMENT_LINE $04D0 CMPA no_frogs ; the number of available frogs
FORCE_SYMBOL $04D0 no_frogs2
COMMENT $04D3 if not zero yet, go on
COMMENT $04D5 do a game_lost intermission and return there
FORCE_SYMBOL $04D5 game_lost
COMMENT $04D8 init_new_frog_vars expects dp at c8
FORCE_SYMBOL $04D8 DP_to_C8
COMMENT $04DB clear the frog variables
FORCE_SYMBOL $04DB init_new_frog_vars
COMMENT $04DE is there a current piece playing?
FORCE_SYMBOL $04DE currentMusic
COMMENT $04E0 if not
COMMENT $04E2 take that piece given and
FORCE_SYMBOL $04E2 inGameMusic1
COMMENT $04E5 play it now
FORCE_SYMBOL $04E5 currentMusic
FORCE_SYMBOL $04E8 init_ym_sound
COMMENT $04ED otherwise, store it as next possible piece
FORCE_SYMBOL $04ED inGameMusic1
FORCE_SYMBOL $04F0 nextMusic
COMMENT $04F3 init_new_frog_vars expects dp at c8
FORCE_SYMBOL $04F3 DP_to_D0
COMMENT_LINE $04F6 rts
COMMENT $04F6 die a DIE_OUT kind of
FORCE_SYMBOL $04F6 DIE_OUT
COMMENT $04F9 jump to die
COMMENT $04FB die a DIE_DROWN kind of
FORCE_SYMBOL $04FB DIE_DROWN
COMMENT $04FE jump to die
COMMENT $0500 die a DIE_CROCO kind of
FORCE_SYMBOL $0500 DIE_CROCO
COMMENT $0503 jump to die
COMMENT $0505 die a DIE_SNAKE kind of
FORCE_SYMBOL $0505 DIE_SNAKE
COMMENT $0508 jump to die
COMMENT $050A lets test the special flag...
FORCE_NO_SYMBOL $050A
COMMENT $050C if no special go on
COMMENT $050E test for left crocodile
FORCE_SYMBOL $050E SPECIAL_LEFT_CROCO
COMMENT $0510 if not, jump
COMMENT $0512 load the frog postion
FORCE_SYMBOL $0512 frog_x
COMMENT $0514 subtract X position of object
FORCE_NO_SYMBOL $0514
COMMENT $0516 hardcoded length of croco :-(
FORCE_NO_SYMBOL $0516
COMMENT $0518 not eaten by croco, nothing else can be here
COMMENT $051A if lower frogger was eaten by crocodile
COMMENT $051C are we sitting on a right croco?
FORCE_SYMBOL $051C SPECIAL_RIGHT_CROCO
COMMENT $051E no? than jump
COMMENT_LINE $0520 hey dissi "bre ak"
COMMENT $0520 load the frog postion
FORCE_SYMBOL $0520 frog_x
COMMENT $0522 subtract X position of object
FORCE_NO_SYMBOL $0522
COMMENT $0524 hardcoded length of croco :-(
FORCE_NO_SYMBOL $0524
COMMENT $0526 not eaten by croco, nothing else can be here
COMMENT $0528 if higher frogger was eaten by crocodile
COMMENT $052A look if this is a dived turtle
FORCE_SYMBOL $052A SPECIAL_DIVE_DOWN
COMMENT $052C if yes... drown
COMMENT_LINE $052E check if we 'capture' a girl
COMMENT $052E what's the girls status?
FORCE_SYMBOL $052E girl_status
COMMENT $0530 is it displayed
FORCE_SYMBOL $0530 IS_DISPLAYED
COMMENT $0532 no? than jump
COMMENT $0534 load log object address
FORCE_SYMBOL $0534 girl_log_object
COMMENT $0536 address + 3 is stored, correct it
FORCE_NO_SYMBOL $0536
COMMENT $0539 subtract the current object information
COMMENT $053B if not the same, go to no_girl_
COMMENT_LINE $053D check for collision
COMMENT $053D load girl x pos
COMMENT $053F subtract frog_x pos
FORCE_SYMBOL $053F frog_x
COMMENT $0541 absolute it
COMMENT $0548 if not in the range of 10
FORCE_NO_SYMBOL $0548
COMMENT $054A jump to no girl
COMMENT $054C IS CARRIED
FORCE_SYMBOL $054C girl_status
COMMENT $054E load bonus state
FORCE_SYMBOL $054E frog_bonus
COMMENT $0550 add a girl bonus
FORCE_SYMBOL $0550 GIRL_BONUS
COMMENT $0552 store it
FORCE_SYMBOL $0552 frog_bonus
FORCE_SYMBOL $0554 KarlGirlGot_Sound
FORCE_SYMBOL $0557 play_sfx_x
COMMENT_LINE $055A check if we hit a 'log' snake
COMMENT $055A what's the snake's status?
FORCE_SYMBOL $055A snake_status
COMMENT $055C is it displayed
FORCE_SYMBOL $055C IS_DISPLAYED
COMMENT $055E no? than jump
COMMENT $0560 what band are we on now ?
FORCE_SYMBOL $0560 frog_y_band
COMMENT $0562 compare with 'snake band'
FORCE_NO_SYMBOL $0562
COMMENT $0564 if not our band... go on
COMMENT $0566 which contains the log a objectlist address
FORCE_SYMBOL $0566 snake_object
COMMENT $0568 load special
FORCE_NO_SYMBOL $0568
COMMENT $056A if a snake is encountered
FORCE_SYMBOL $056A SPECIAL_RIGHT_SNAKE
COMMENT $056C jump if not
COMMENT $056E load the frog postion
FORCE_SYMBOL $056E frog_x
COMMENT $0570 minus X position of object
COMMENT $0572 real hardcoded length
FORCE_NO_SYMBOL $0572
COMMENT $0574 absolut it
COMMENT $057B somewhere arround the snakes head?
FORCE_NO_SYMBOL $057B
COMMENT $057D if higher, than not hit
COMMENT $057F otherwise than bitten by snake
COMMENT $0581 now we look for left snake
FORCE_SYMBOL $0581 SPECIAL_LEFT_SNAKE
COMMENT $0583 no?, than jump
COMMENT $0585 load the frog postion
FORCE_SYMBOL $0585 frog_x
COMMENT $0587 minus X position of object
COMMENT $0589 absolut it
COMMENT $0590 somewhere arround the snakes head?
FORCE_NO_SYMBOL $0590
COMMENT $0592 if lower than bitten by snake
COMMENT $0596 load the frog postion
FORCE_SYMBOL $0596 frog_x
COMMENT $0598 add the speed of the object
FORCE_NO_SYMBOL $0598
COMMENT $059A and store it
FORCE_SYMBOL $059A frog_x
COMMENT $059C are we out of bounds right?
FORCE_SYMBOL $059C FROG_RIGHT_OUT
COMMENT $059E than dead
COMMENT $05A2 are we out of bounds left?
FORCE_SYMBOL $05A2 FROG_LEFT_OUT
COMMENT $05A4 than dead
COMMENT $05A8 ok, for checking of 'normal' bounds
FORCE_SYMBOL $05A8 tmp_band_offset
COMMENT_LINE $05AA we need to calculate the band_x
COMMENT_LINE $05AA coordinates, 'tmp_band_offset' is now
COMMENT_LINE $05AA used as a helper
COMMENT_LINE $05AA it counts from 0 to 9
COMMENT_LINE $05AA if below 0 band_x is decremented
COMMENT_LINE $05AA if 10 or high it is incremented...
COMMENT $05AA add the speed of the object
FORCE_NO_SYMBOL $05AA
COMMENT $05AC if below zero, dec band_x 1
COMMENT $05AE if higher GRID_SIZE...
FORCE_SYMBOL $05AE GRID_SIZE_GAME
COMMENT $05B0 ... add one to band_x
COMMENT $05B2 otherwise just store it back
FORCE_SYMBOL $05B2 tmp_band_offset
COMMENT $05B6 for internal checking
FORCE_SYMBOL $05B6 frog_x_band
COMMENT $05B8 make it modulo 10
FORCE_SYMBOL $05B8 GRID_SIZE_GAME
COMMENT $05BA store it
FORCE_SYMBOL $05BA tmp_band_offset
COMMENT $05BE for internal checking
FORCE_SYMBOL $05BE frog_x_band
COMMENT $05C0 make it modulo 10
FORCE_SYMBOL $05C0 GRID_SIZE_GAME
COMMENT $05C2 store it
FORCE_SYMBOL $05C2 tmp_band_offset
FORCE_NO_SYMBOL $05C4
COMMENT $05C8 address of home vector list
COMMENT $05CB A = Scale factor, B Bit for timer test #$1c40
COMMENT_LINE $05CE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $05CE ;;;;;;;;; MOVE 3 END
COMMENT_LINE $05CE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $05CE scale factor can be set while in move!
COMMENT_LINE $05CE own scale factor to homes, since they are drawn in an individually fitted scale
COMMENT $05CE move to time 1 lo, this means scaling
FORCE_SYMBOL $05CE VIA_t1_cnt_lo
COMMENT $05D0 clear A
COMMENT $05D1 done with move?
FORCE_SYMBOL $05D1 VIA_int_flags
COMMENT $05D3 no, than go on waiting
COMMENT_LINE $05D5 done with move
COMMENT_LINE $05D5 now a MY_DRAW_VLC
COMMENT $05D5 A= how many vectors?, B = Y coordinate
FORCE_SYMBOL $05D7 VIA_port_b
COMMENT $05D9 load next coordinate (X)
FORCE_NO_SYMBOL $05D9
COMMENT $05DB Disable mux
FORCE_SYMBOL $05DB VIA_port_b
COMMENT $05DD Send X to A/D
FORCE_SYMBOL $05DD VIA_port_a
COMMENT $05DF Put pattern in shift register ($ff)
FORCE_SYMBOL $05DF VIA_shift_reg
COMMENT $05E1 enable timer 1
FORCE_SYMBOL $05E1 VIA_t1_cnt_hi
COMMENT $05E3 [5] next coordinate (Y)
FORCE_NO_SYMBOL $05E3
COMMENT $05E5 [7] more vectors?
FORCE_NO_SYMBOL $05E5
COMMENT $05E8 [3] Go back for more points
COMMENT $05EA [2] B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $05EA
COMMENT $05EC [3]
FORCE_NO_SYMBOL $05EC
COMMENT $05EE [4] Wait for T1 to time out
FORCE_SYMBOL $05EE VIA_int_flags
COMMENT $05F0 [3]
COMMENT $05F2 [2] Wait a moment more
COMMENT $05F3 [4] Clear shift register (blank output)
FORCE_SYMBOL $05F3 VIA_shift_reg
COMMENT_LINE $05F5 28 cycles - exactly $1c scale factor
COMMENT_LINE $05F5 instead of flag testing we should just do 4 nops
COMMENT $05F7 A-reg = T1 interrupt bit, B = zero vector byte
COMMENT $05FA Wait for T1 to time out
FORCE_SYMBOL $05FA VIA_int_flags
COMMENT $05FE Wait a moment more
FORCE_SYMBOL $05FF VIA_shift_reg
COMMENT_LINE $0601 DRAW THE LINES IN BETWEEN
COMMENT $0601 /BLANK low and /ZERO low
FORCE_SYMBOL $0601 VIA_cntl
COMMENT $0603 patched for speed... /2
COMMENT $0603 scale for placing first point
COMMENT $0605 move to time 1 lo, this means scaling
FORCE_SYMBOL $0605 VIA_t1_cnt_lo
COMMENT $0607 Y pos, A=0
COMMENT_LINE $060A move to D
FORCE_SYMBOL $060A VIA_port_b
COMMENT $060C Blank low, zero high?
FORCE_NO_SYMBOL $060C
COMMENT $060E Disable mux
FORCE_SYMBOL $060E VIA_port_b
COMMENT $0610 zero high!
FORCE_SYMBOL $0610 VIA_cntl
COMMENT $0612 X pos relative to start
COMMENT $0614 Store X in D/A register
FORCE_SYMBOL $0614 VIA_port_a
COMMENT $0616 enable timer
FORCE_SYMBOL $0616 VIA_t1_cnt_hi
COMMENT_LINE $0618 cycles wasted in below wait for TI1
COMMENT_LINE $0618 we use the time and do some stuff in here...
COMMENT_LINE $0618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0618 ;;;;;;;;; MOVE 4 START
COMMENT_LINE $0618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0618 test if we are in death timer loop
COMMENT $061B frog is allready dead!
COMMENT $061D load fly timer
FORCE_SYMBOL $061D fly_timer
COMMENT $0620 decrease it
FORCE_NO_SYMBOL $0620
COMMENT $0623 store it back
FORCE_SYMBOL $0623 fly_timer
COMMENT $0626 load croco timer
FORCE_SYMBOL $0626 croco_timer
COMMENT $0629 decrease it
FORCE_NO_SYMBOL $0629
COMMENT $062C store it back
FORCE_SYMBOL $062C croco_timer
COMMENT $062F load the timer value
FORCE_SYMBOL $062F dive_timer
COMMENT $0632 if $ff, than no turtle
FORCE_NO_SYMBOL $0632
COMMENT $0634 overstep the next two
COMMENT $0636 count it down by $20
FORCE_NO_SYMBOL $0636
COMMENT $0639 store it
FORCE_SYMBOL $0639 dive_timer
COMMENT $063C load the timer value
FORCE_SYMBOL $063C my_timer
COMMENT_LINE $063F SUBD #$20 ; count it down by $20
COMMENT $063F count it down by $20
FORCE_NO_SYMBOL $063F
COMMENT $0642 store it
FORCE_SYMBOL $0642 my_timer
FORCE_SYMBOL $0645 otter_status
COMMENT $0648 is displayed
FORCE_SYMBOL $0648 IS_WAITING
COMMENT $064C load otter timer
FORCE_SYMBOL $064C otter_timer
COMMENT $064F decrease it
FORCE_NO_SYMBOL $064F
COMMENT $0652 store it back
FORCE_SYMBOL $0652 otter_timer
COMMENT $0655 if music is not playing
FORCE_SYMBOL $0655 currentMusic
COMMENT $0658 jump, otherwise initialize "in move" subroutines for ym decode
COMMENT $065A also sets up inMovePointer
FORCE_SYMBOL $065A STREAM_PART_1
COMMENT $065D first and second is really small
FORCE_SYMBOL $065D inMovePointer
COMMENT $0661 A is scale, B is bit test $40
COMMENT $0664 move to time 1 lo, this means scaling
FORCE_SYMBOL $0664 VIA_t1_cnt_lo
COMMENT_LINE $0666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0666 ;;;;;;;;; MOVE 4 START
COMMENT_LINE $0666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0666 Wait for T1 to time out
FORCE_SYMBOL $0666 VIA_int_flags
COMMENT_LINE $066A move to done
COMMENT_LINE $066A draw line...
COMMENT $066A A=0, B=X
COMMENT $066D Send Y to A/D
FORCE_SYMBOL $066D VIA_port_a
COMMENT $066F Enable mux
FORCE_SYMBOL $066F VIA_port_b
COMMENT $0671 Disable mux
FORCE_SYMBOL $0671 VIA_port_b
COMMENT $0673 Send X to A/D
FORCE_SYMBOL $0673 VIA_port_a
COMMENT $0675 enable T1H
FORCE_SYMBOL $0675 VIA_t1_cnt_hi
FORCE_SYMBOL $0677 VIA_shift_reg
COMMENT_LINE $0679 this waits for $ea cycles to finish drawing
COMMENT_LINE $0679 *shudder*
COMMENT_LINE $0679 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0679 in move DRAW
COMMENT_LINE $0679 following CAN be done, since the routine is sort of stable!
COMMENT_LINE $0679 the changes in cycles are really seldom,
COMMENT_LINE $0679 otherwise the length of the drawn vector would be shaky
FORCE_SYMBOL $0679 gameModeOption
FORCE_SYMBOL $067C HARDMODE
FORCE_NO_SYMBOL $067E
FORCE_SYMBOL $0682 score_digit_5
FORCE_SYMBOL $0685 high_check
COMMENT $068A and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $068A high_check
COMMENT $068D incraese frog lifes
FORCE_SYMBOL $068D no_frogs
FORCE_SYMBOL $0690 Karl_NewHigScoreSound
FORCE_SYMBOL $0693 play_sfx_x
COMMENT $0696 is in
FORCE_SYMBOL $0696 no_frogs
FORCE_SYMBOL $0699 score_digit_LIFES
COMMENT $069F move to time 1 lo, this means scaling
FORCE_SYMBOL $069F VIA_t1_cnt_lo
COMMENT_LINE $06A1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $06A1 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $06A1
COMMENT $06A3 Wait for T1 to time out
FORCE_SYMBOL $06A3 VIA_int_flags
COMMENT_LINE $06A7 line draw done
COMMENT_LINE $06A7 move start
COMMENT $06A7 a small Y offset down
COMMENT $06A9 Clear shift register (blank output)
FORCE_SYMBOL $06A9 VIA_shift_reg
COMMENT $06AB Store Y in D/A register
FORCE_SYMBOL $06AB VIA_port_a
COMMENT $06AD Enable mux
FORCE_SYMBOL $06AD VIA_port_b
COMMENT $06AF Blank low, zero high?
FORCE_NO_SYMBOL $06AF
FORCE_SYMBOL $06B1 VIA_cntl
COMMENT $06B3 Disable mux
FORCE_SYMBOL $06B3 VIA_port_b
COMMENT $06B5 Store X in D/A register
FORCE_SYMBOL $06B5 VIA_port_a
COMMENT $06B7 enable timer
FORCE_SYMBOL $06B7 VIA_t1_cnt_hi
COMMENT_LINE $06B9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06B9 ;;;;;;;;; MOVE 5 START
COMMENT_LINE $06B9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06B9 this is a "small" move, we do not use
COMMENT_LINE $06B9 move is "only" (SCALE_FACTOR_GRID/12)
COMMENT $06B9 A is scale, B is bit test $40
COMMENT $06BC move to time 1 lo, this means scaling
FORCE_SYMBOL $06BC VIA_t1_cnt_lo
COMMENT_LINE $06BF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06BF ;;;;;;;;; MOVE 5 END
COMMENT_LINE $06BF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $06BF Wait for T1 to time out
FORCE_SYMBOL $06BF VIA_int_flags
COMMENT_LINE $06C3 move end
COMMENT_LINE $06C3 draw start
COMMENT $06C3 A=0, B=X
COMMENT $06C5 Send Y to A/D
FORCE_SYMBOL $06C5 VIA_port_a
COMMENT $06C7 Enable mux
FORCE_SYMBOL $06C7 VIA_port_b
COMMENT $06C9 Disable mux
FORCE_SYMBOL $06C9 VIA_port_b
COMMENT $06CB Send X to A/D
FORCE_SYMBOL $06CB VIA_port_a
COMMENT $06CD Set T1H (scale factor?)
FORCE_SYMBOL $06CD VIA_t1_cnt_hi
FORCE_SYMBOL $06CF VIA_shift_reg
COMMENT_LINE $06D1 this waits for $ea cycles to finish drawing
COMMENT_LINE $06D1 *shudder*
COMMENT_LINE $06D1 Seeking - what could be donein this $ea cycles?
COMMENT_LINE $06D1 haven't found more stuff todo in waiting *grml*
COMMENT_LINE $06D1 new:
COMMENT_LINE $06D1 just doing both JSR "earlier" than later in a move
COMMENT_LINE $06D1 seems to save (level 1) about 100 cycles, so I do it here
COMMENT_LINE $06D1 vide measurements - hurray!
COMMENT_LINE $06D1 jsr      [inMovePointer]              ; first is really small
COMMENT_LINE $06D1 jsr      [inMovePointer]              ; first is really small
COMMENT_LINE $06D1 I can not use the above two EVEN though they fit perfectly
COMMENT_LINE $06D1 because they use different cycles each call
COMMENT_LINE $06D1 because of that the blank is switched on on a different cycle count
COMMENT_LINE $06D1 and the end of the vector "wiggles" - thats vectrex
COMMENT_LINE $06D1 if I find a routine with a fixed cycle count - I can put it in here and
COMMENT_LINE $06D1 save them!
COMMENT $06D3 move to time 1 lo, this means scaling
FORCE_SYMBOL $06D3 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $06D5
COMMENT $06D8 Wait for T1 to time out
FORCE_SYMBOL $06D8 VIA_int_flags
COMMENT $06DD Clear shift register (blank output)
FORCE_SYMBOL $06DD VIA_shift_reg
COMMENT_LINE $06DF draw end
COMMENT_LINE $06DF notice!
COMMENT_LINE $06DF the timer line length could also be altered using the scale factor,
COMMENT_LINE $06DF in fact that would save some cycles, especially
COMMENT_LINE $06DF when time goes low...
COMMENT_LINE $06DF also the timer line would not grow "brighter" the shorter it gets...
COMMENT $06DF /BLANK low and /ZERO low
FORCE_SYMBOL $06DF VIA_cntl
COMMENT_LINE $06E1 move to
COMMENT $06E1 y offset
COMMENT $06E3 Store Y in D/A register
FORCE_SYMBOL $06E3 VIA_port_a
COMMENT $06E5 Enable mux
FORCE_SYMBOL $06E5 VIA_port_b
COMMENT $06E7 Blank low, zero high?
FORCE_NO_SYMBOL $06E7
COMMENT $06E9 Disable mux
FORCE_SYMBOL $06E9 VIA_port_b
COMMENT $06EB zero high, this is really a few cycles to early!
FORCE_SYMBOL $06EB VIA_cntl
COMMENT $06ED X pos relative to start
COMMENT $06EF Store X in D/A register
FORCE_SYMBOL $06EF VIA_port_a
COMMENT $06F1 enable timer
FORCE_SYMBOL $06F1 VIA_t1_cnt_hi
COMMENT_LINE $06F3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06F3 ;;;;;;;;; MOVE 6 START
COMMENT_LINE $06F3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $06F3 this is a "small" move, we do not use extensivly
COMMENT_LINE $06F3 move is "only" (SCALE_FACTOR_GRID/2) - which is still large and might be used
COMMENT_LINE $06F3 jsr emptyInMove
COMMENT $06F3 load new vector (length was cut by timer :-))
COMMENT $06F6 is it small yet?
FORCE_NO_SYMBOL $06F6
COMMENT $06FA no, than jump
FORCE_SYMBOL $06FC intermissionActive
FORCE_SYMBOL $0701 KarlTimeOut_Sound
FORCE_SYMBOL $0704 play_sfx_x
COMMENT $0709 is it really really small?
FORCE_NO_SYMBOL $0709
COMMENT $070B nah, not that small yet
FORCE_SYMBOL $070D intermissionActive
FORCE_SYMBOL $0712 KarlTimeOut_Sound
FORCE_SYMBOL $0715 play_sfx_x
COMMENT_LINE $0718 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0718 fourth is big
FORCE_SYMBOL $0718 inMovePointer
COMMENT $071C A= scale, B-reg = T1 interrupt bit
COMMENT $071F move to time 1 lo, this means scaling
FORCE_SYMBOL $071F VIA_t1_cnt_lo
COMMENT_LINE $0722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0722 ;;;;;;;;; MOVE 6 END
COMMENT_LINE $0722 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0722 Wait for T1 to time out
FORCE_SYMBOL $0722 VIA_int_flags
COMMENT_LINE $0726 move done
COMMENT $0726 load new vector (length was cut by timer :-)), y is always 0
COMMENT $0729 skip null timer (from intermissions)
COMMENT_LINE $072B draw line
COMMENT $072B Send Y to A/D
FORCE_SYMBOL $072B VIA_port_a
COMMENT $072D Enable mux
FORCE_SYMBOL $072D VIA_port_b
COMMENT $072F Disable mux
FORCE_SYMBOL $072F VIA_port_b
COMMENT $0731 Send X to A/D
FORCE_SYMBOL $0731 VIA_port_a
COMMENT $0733 Set T1H (scale factor?)
FORCE_SYMBOL $0733 VIA_t1_cnt_hi
FORCE_SYMBOL $0735 VIA_shift_reg
COMMENT $0737 B-reg = T1 interrupt bit
FORCE_NO_SYMBOL $0737
COMMENT $0739 clear temporal
FORCE_SYMBOL $0739 tmp1
COMMENT $073C storage for offset
COMMENT $073F Wait for T1 to time out
FORCE_SYMBOL $073F VIA_int_flags
COMMENT $0743 Clear shift register (blank output)
FORCE_SYMBOL $0743 VIA_shift_reg
COMMENT_LINE $0745 draw end
COMMENT_LINE $0745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0745 jsr smallCalibration
COMMENT_LINE $0745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0745 independent code section
COMMENT_LINE $0745 draw all 'home' sprites
COMMENT $0745 load the address to x, start of list of homes
FORCE_SYMBOL $0745 home_objects
FORCE_NO_SYMBOL $0748
COMMENT $074A Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $074A VIA_aux_cntl
FORCE_SYMBOL $074E HOME_OBJECT_SIZE
COMMENT $0757 prepare for zero below - SCAL_HOME = $83
COMMENT $075A 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $075A VIA_cntl
COMMENT $075C load object to u
FORCE_NO_SYMBOL $075C
COMMENT $075E if zero, than anothing to do
COMMENT_LINE $0760 do 1 house object here!
COMMENT_LINE $0760 zero here for following homes
COMMENT $0760 for first house
COMMENT $0760 move to time 1 lo, this means scaling
FORCE_SYMBOL $0760 VIA_t1_cnt_lo
COMMENT $0762 load object position
FORCE_NO_SYMBOL $0762
COMMENT $0764 korrect with sprite offset Y
FORCE_NO_SYMBOL $0764
COMMENT $0766 korrect with sprite offset X
FORCE_NO_SYMBOL $0766
COMMENT_LINE $0768 move to
COMMENT $0768 Store Y in D/A register
FORCE_SYMBOL $0768 VIA_port_a
COMMENT $076A Enable mux
FORCE_SYMBOL $076A VIA_port_b
COMMENT $076C Blank low, zero high?
FORCE_NO_SYMBOL $076C
FORCE_SYMBOL $076E VIA_cntl
COMMENT $0770 Disable mux
FORCE_SYMBOL $0770 VIA_port_b
COMMENT $0772 Store X in D/A register
FORCE_SYMBOL $0772 VIA_port_a
COMMENT $0774 enable timer
FORCE_SYMBOL $0774 VIA_t1_cnt_hi
COMMENT_LINE $0776 ;;;;; IN MOVE HERE
COMMENT $0776 decrease animation counter
FORCE_NO_SYMBOL $0776
COMMENT $0778 if zero, we must initialize new animation phase
COMMENT $077A load new object definition
FORCE_NO_SYMBOL $077A
COMMENT $077D store new object definition to object list
FORCE_NO_SYMBOL $077D
COMMENT $0780 load new animation counter start
FORCE_NO_SYMBOL $0780
COMMENT $0782 and set it in object list
FORCE_NO_SYMBOL $0782
COMMENT $0784 load object vector list to , (save u in y register)
FORCE_NO_SYMBOL $0784
COMMENT_LINE $0787 in this move (if it happens) we can do some ym decoding....
COMMENT $0787 do ym decode "in move"
FORCE_SYMBOL $0787 inMovePointer
COMMENT $078B restore and u
FORCE_NO_SYMBOL $078B
COMMENT $078D load offset of vector list draw
FORCE_NO_SYMBOL $078D
COMMENT $0794 A= scale, B= Timer flag
COMMENT $0797 do it
COMMENT $0797 move to time 1 lo, this means scaling
FORCE_SYMBOL $0797 VIA_t1_cnt_lo
FORCE_SYMBOL $0799 HOME_OBJECT_SIZE
COMMENT $079B Wait for T1 to time out
FORCE_SYMBOL $079B VIA_int_flags
COMMENT_LINE $079F move to done
COMMENT_LINE $079F in X vector list now!
COMMENT_LINE $079F U still untouched, pointer to first home!
COMMENT_LINE $079F display the vector list
COMMENT_LINE $079F since there can actually be 5 sprites displayed at once I do not use a subroutine, but the
COMMENT_LINE $079F direct unlooping via a macro (this costs nearly 600 bytes)
COMMENT_LINE $079F (x) length in bytes
COMMENT_LINE $079F [x] duration in cycles
COMMENT_LINE $079F do one "manual" starter line in advance
COMMENT $079F get current coordinates
COMMENT $07A1 (2) [4] Send Y to A/D
FORCE_SYMBOL $07A1 VIA_port_a
COMMENT $07A3 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $07A3 VIA_port_b
COMMENT $07A5 [6] Disable mux
FORCE_SYMBOL $07A5 VIA_port_b
COMMENT $07A7 [6] Send X to A/D
FORCE_SYMBOL $07A7 VIA_port_a
FORCE_NO_SYMBOL $07A9
COMMENT $07AB [4] enable timer 1
FORCE_SYMBOL $07AB VIA_t1_cnt_hi
COMMENT_LINE $07AD light on
COMMENT $07AD [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07AD VIA_cntl
COMMENT_LINE $07AF pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07AF [8] load Y coordinate to A, X coordinate to B
COMMENT $07B1 [4] Send Y to A/D
FORCE_SYMBOL $07B1 VIA_port_a
COMMENT $07B3 [6]
FORCE_SYMBOL $07B3 VIA_port_b
COMMENT $07B5 [2]
FORCE_NO_SYMBOL $07B5
COMMENT_LINE $07B7 light off
COMMENT $07B7 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07B7 VIA_cntl
COMMENT $07B9 [6] Disable mux
FORCE_SYMBOL $07B9 VIA_port_b
FORCE_NO_SYMBOL $07BB
COMMENT $07BD [6] Send X to A/D
FORCE_SYMBOL $07BD VIA_port_a
FORCE_NO_SYMBOL $07BF
COMMENT $07C1 [4] enable timer 1
FORCE_SYMBOL $07C1 VIA_t1_cnt_hi
COMMENT_LINE $07C3 light on
COMMENT $07C3 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07C3 VIA_cntl
COMMENT_LINE $07C5 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07C5 [8] load Y coordinate to A, X coordinate to B
COMMENT $07C7 [4] Send Y to A/D
FORCE_SYMBOL $07C7 VIA_port_a
COMMENT $07C9 [6]
FORCE_SYMBOL $07C9 VIA_port_b
COMMENT $07CB [2]
FORCE_NO_SYMBOL $07CB
COMMENT_LINE $07CD light off
COMMENT $07CD [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07CD VIA_cntl
COMMENT $07CF [6] Disable mux
FORCE_SYMBOL $07CF VIA_port_b
COMMENT $07D1 [6] Send X to A/D
FORCE_SYMBOL $07D1 VIA_port_a
FORCE_NO_SYMBOL $07D3
COMMENT $07D5 [4] enable timer 1
FORCE_SYMBOL $07D5 VIA_t1_cnt_hi
COMMENT_LINE $07D7 light on
COMMENT $07D7 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07D7 VIA_cntl
COMMENT_LINE $07D9 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07D9 [8] load Y coordinate to A, X coordinate to B
COMMENT $07DB [4] Send Y to A/D
FORCE_SYMBOL $07DB VIA_port_a
COMMENT $07DD [6]
FORCE_SYMBOL $07DD VIA_port_b
COMMENT $07DF [2]
FORCE_NO_SYMBOL $07DF
COMMENT_LINE $07E1 light off
COMMENT $07E1 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07E1 VIA_cntl
COMMENT $07E3 [6] Disable mux
FORCE_SYMBOL $07E3 VIA_port_b
COMMENT $07E5 [6] Send X to A/D
FORCE_SYMBOL $07E5 VIA_port_a
FORCE_NO_SYMBOL $07E7
COMMENT $07E9 [4] enable timer 1
FORCE_SYMBOL $07E9 VIA_t1_cnt_hi
COMMENT_LINE $07EB light on
COMMENT $07EB [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07EB VIA_cntl
COMMENT_LINE $07ED pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $07ED [8] load Y coordinate to A, X coordinate to B
COMMENT $07EF [4] Send Y to A/D
FORCE_SYMBOL $07EF VIA_port_a
COMMENT $07F1 [6]
FORCE_SYMBOL $07F1 VIA_port_b
COMMENT $07F3 [2]
FORCE_NO_SYMBOL $07F3
COMMENT_LINE $07F5 light off
COMMENT $07F5 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $07F5 VIA_cntl
COMMENT $07F7 [6] Disable mux
FORCE_SYMBOL $07F7 VIA_port_b
COMMENT $07F9 [6] Send X to A/D
FORCE_SYMBOL $07F9 VIA_port_a
FORCE_NO_SYMBOL $07FB
COMMENT $07FD [4] enable timer 1
FORCE_SYMBOL $07FD VIA_t1_cnt_hi
COMMENT_LINE $07FF light on
COMMENT $07FF [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $07FF VIA_cntl
COMMENT_LINE $0801 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0801 [8] load Y coordinate to A, X coordinate to B
COMMENT $0803 [4] Send Y to A/D
FORCE_SYMBOL $0803 VIA_port_a
COMMENT $0805 [6]
FORCE_SYMBOL $0805 VIA_port_b
COMMENT $0807 [2]
FORCE_NO_SYMBOL $0807
COMMENT_LINE $0809 light off
COMMENT $0809 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0809 VIA_cntl
COMMENT $080B [6] Disable mux
FORCE_SYMBOL $080B VIA_port_b
COMMENT $080D [6] Send X to A/D
FORCE_SYMBOL $080D VIA_port_a
FORCE_NO_SYMBOL $080F
COMMENT $0811 [4] enable timer 1
FORCE_SYMBOL $0811 VIA_t1_cnt_hi
COMMENT_LINE $0813 light on
COMMENT $0813 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0813 VIA_cntl
COMMENT_LINE $0815 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0815 [8] load Y coordinate to A, X coordinate to B
COMMENT $0817 [4] Send Y to A/D
FORCE_SYMBOL $0817 VIA_port_a
COMMENT $0819 [6]
FORCE_SYMBOL $0819 VIA_port_b
COMMENT $081B [2]
FORCE_NO_SYMBOL $081B
COMMENT_LINE $081D light off
COMMENT $081D [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $081D VIA_cntl
COMMENT $081F [6] Disable mux
FORCE_SYMBOL $081F VIA_port_b
COMMENT $0821 [6] Send X to A/D
FORCE_SYMBOL $0821 VIA_port_a
FORCE_NO_SYMBOL $0823
COMMENT $0825 [4] enable timer 1
FORCE_SYMBOL $0825 VIA_t1_cnt_hi
COMMENT_LINE $0827 light on
COMMENT $0827 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0827 VIA_cntl
COMMENT_LINE $0829 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0829 [8] load Y coordinate to A, X coordinate to B
COMMENT $082B [4] Send Y to A/D
FORCE_SYMBOL $082B VIA_port_a
COMMENT $082D [6]
FORCE_SYMBOL $082D VIA_port_b
COMMENT $082F [2]
FORCE_NO_SYMBOL $082F
COMMENT_LINE $0831 light off
COMMENT $0831 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0831 VIA_cntl
COMMENT $0833 [6] Disable mux
FORCE_SYMBOL $0833 VIA_port_b
COMMENT $0835 [6] Send X to A/D
FORCE_SYMBOL $0835 VIA_port_a
FORCE_NO_SYMBOL $0837
COMMENT $0839 [4] enable timer 1
FORCE_SYMBOL $0839 VIA_t1_cnt_hi
COMMENT_LINE $083B light on
COMMENT $083B [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $083B VIA_cntl
COMMENT_LINE $083D pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $083D [8] load Y coordinate to A, X coordinate to B
COMMENT $083F [4] Send Y to A/D
FORCE_SYMBOL $083F VIA_port_a
COMMENT $0841 [6]
FORCE_SYMBOL $0841 VIA_port_b
COMMENT $0843 [2]
FORCE_NO_SYMBOL $0843
COMMENT_LINE $0845 light off
COMMENT $0845 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0845 VIA_cntl
COMMENT $0847 [6] Disable mux
FORCE_SYMBOL $0847 VIA_port_b
COMMENT $0849 [6] Send X to A/D
FORCE_SYMBOL $0849 VIA_port_a
FORCE_NO_SYMBOL $084B
COMMENT $084D [4] enable timer 1
FORCE_SYMBOL $084D VIA_t1_cnt_hi
COMMENT_LINE $084F light on
COMMENT $084F [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $084F VIA_cntl
COMMENT_LINE $0851 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0851 [8] load Y coordinate to A, X coordinate to B
COMMENT $0853 [4] Send Y to A/D
FORCE_SYMBOL $0853 VIA_port_a
COMMENT $0855 [6]
FORCE_SYMBOL $0855 VIA_port_b
COMMENT $0857 [2]
FORCE_NO_SYMBOL $0857
COMMENT_LINE $0859 light off
COMMENT $0859 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0859 VIA_cntl
COMMENT $085B [6] Disable mux
FORCE_SYMBOL $085B VIA_port_b
COMMENT $085D [6] Send X to A/D
FORCE_SYMBOL $085D VIA_port_a
FORCE_NO_SYMBOL $085F
COMMENT $0861 [4] enable timer 1
FORCE_SYMBOL $0861 VIA_t1_cnt_hi
COMMENT_LINE $0863 light on
COMMENT $0863 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0863 VIA_cntl
COMMENT_LINE $0865 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0865 [8] load Y coordinate to A, X coordinate to B
COMMENT $0867 [4] Send Y to A/D
FORCE_SYMBOL $0867 VIA_port_a
COMMENT $0869 [6]
FORCE_SYMBOL $0869 VIA_port_b
COMMENT $086B [2]
FORCE_NO_SYMBOL $086B
COMMENT_LINE $086D light off
COMMENT $086D [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $086D VIA_cntl
COMMENT $086F [6] Disable mux
FORCE_SYMBOL $086F VIA_port_b
COMMENT $0871 [6] Send X to A/D
FORCE_SYMBOL $0871 VIA_port_a
FORCE_NO_SYMBOL $0873
COMMENT $0875 [4] enable timer 1
FORCE_SYMBOL $0875 VIA_t1_cnt_hi
COMMENT_LINE $0877 light on
COMMENT $0877 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0877 VIA_cntl
COMMENT_LINE $0879 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0879 [8] load Y coordinate to A, X coordinate to B
COMMENT $087B [4] Send Y to A/D
FORCE_SYMBOL $087B VIA_port_a
COMMENT $087D [6]
FORCE_SYMBOL $087D VIA_port_b
COMMENT $087F [2]
FORCE_NO_SYMBOL $087F
COMMENT_LINE $0881 light off
COMMENT $0881 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0881 VIA_cntl
COMMENT $0883 [6] Disable mux
FORCE_SYMBOL $0883 VIA_port_b
COMMENT $0885 [6] Send X to A/D
FORCE_SYMBOL $0885 VIA_port_a
FORCE_NO_SYMBOL $0887
COMMENT $0889 [4] enable timer 1
FORCE_SYMBOL $0889 VIA_t1_cnt_hi
COMMENT_LINE $088B light on
COMMENT $088B [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $088B VIA_cntl
COMMENT_LINE $088D pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $088D [8] load Y coordinate to A, X coordinate to B
COMMENT $088F [4] Send Y to A/D
FORCE_SYMBOL $088F VIA_port_a
COMMENT $0891 [6]
FORCE_SYMBOL $0891 VIA_port_b
COMMENT $0893 [2]
FORCE_NO_SYMBOL $0893
COMMENT_LINE $0895 light off
COMMENT $0895 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0895 VIA_cntl
COMMENT $0897 [6] Disable mux
FORCE_SYMBOL $0897 VIA_port_b
COMMENT $0899 [6] Send X to A/D
FORCE_SYMBOL $0899 VIA_port_a
FORCE_NO_SYMBOL $089B
COMMENT $089D [4] enable timer 1
FORCE_SYMBOL $089D VIA_t1_cnt_hi
COMMENT_LINE $089F light on
COMMENT $089F [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $089F VIA_cntl
COMMENT_LINE $08A1 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08A1 [8] load Y coordinate to A, X coordinate to B
COMMENT $08A3 [4] Send Y to A/D
FORCE_SYMBOL $08A3 VIA_port_a
COMMENT $08A5 [6]
FORCE_SYMBOL $08A5 VIA_port_b
COMMENT $08A7 [2]
FORCE_NO_SYMBOL $08A7
COMMENT_LINE $08A9 light off
COMMENT $08A9 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08A9 VIA_cntl
COMMENT $08AB [6] Disable mux
FORCE_SYMBOL $08AB VIA_port_b
COMMENT $08AD [6] Send X to A/D
FORCE_SYMBOL $08AD VIA_port_a
FORCE_NO_SYMBOL $08AF
COMMENT $08B1 [4] enable timer 1
FORCE_SYMBOL $08B1 VIA_t1_cnt_hi
COMMENT_LINE $08B3 light on
COMMENT $08B3 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08B3 VIA_cntl
COMMENT_LINE $08B5 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08B5 [8] load Y coordinate to A, X coordinate to B
COMMENT $08B7 [4] Send Y to A/D
FORCE_SYMBOL $08B7 VIA_port_a
COMMENT $08B9 [6]
FORCE_SYMBOL $08B9 VIA_port_b
COMMENT $08BB [2]
FORCE_NO_SYMBOL $08BB
COMMENT_LINE $08BD light off
COMMENT $08BD [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08BD VIA_cntl
COMMENT $08BF [6] Disable mux
FORCE_SYMBOL $08BF VIA_port_b
COMMENT $08C1 [6] Send X to A/D
FORCE_SYMBOL $08C1 VIA_port_a
FORCE_NO_SYMBOL $08C3
COMMENT $08C5 [4] enable timer 1
FORCE_SYMBOL $08C5 VIA_t1_cnt_hi
COMMENT_LINE $08C7 light on
COMMENT $08C7 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08C7 VIA_cntl
COMMENT_LINE $08C9 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08C9 [8] load Y coordinate to A, X coordinate to B
COMMENT $08CB [4] Send Y to A/D
FORCE_SYMBOL $08CB VIA_port_a
COMMENT $08CD [6]
FORCE_SYMBOL $08CD VIA_port_b
COMMENT $08CF [2]
FORCE_NO_SYMBOL $08CF
COMMENT_LINE $08D1 light off
COMMENT $08D1 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08D1 VIA_cntl
COMMENT $08D3 [6] Disable mux
FORCE_SYMBOL $08D3 VIA_port_b
COMMENT $08D5 [6] Send X to A/D
FORCE_SYMBOL $08D5 VIA_port_a
FORCE_NO_SYMBOL $08D7
COMMENT $08D9 [4] enable timer 1
FORCE_SYMBOL $08D9 VIA_t1_cnt_hi
COMMENT_LINE $08DB light on
COMMENT $08DB [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08DB VIA_cntl
COMMENT_LINE $08DD pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $08DD [8] load Y coordinate to A, X coordinate to B
COMMENT $08DF [4] Send Y to A/D
FORCE_SYMBOL $08DF VIA_port_a
COMMENT $08E1 [6]
FORCE_SYMBOL $08E1 VIA_port_b
COMMENT $08E3 [2]
FORCE_NO_SYMBOL $08E3
COMMENT_LINE $08E5 light off
COMMENT $08E5 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $08E5 VIA_cntl
COMMENT $08E7 [6] Disable mux
FORCE_SYMBOL $08E7 VIA_port_b
COMMENT $08E9 [6] Send X to A/D
FORCE_SYMBOL $08E9 VIA_port_a
COMMENT_LINE $08EB light on
FORCE_NO_SYMBOL $08EB
COMMENT $08ED [4] enable timer 1
FORCE_SYMBOL $08ED VIA_t1_cnt_hi
COMMENT $08EF ZERO disabled, and BLANK disabled
FORCE_SYMBOL $08EF VIA_cntl
COMMENT_LINE $08F1 light off
COMMENT_LINE $08F1 there must the above mentioned "switch the light off"
COMMENT_LINE $08F1 after 22 cycles still be manually done
COMMENT_LINE $08F1 (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $08F1 loop thru all five homes
COMMENT_LINE $08F8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $08F8 print the score, # of lives and # level, all in one "fast" draw String, takes pretty exactly 2000 cylces
COMMENT_LINE $08F8 in the move section all the frog move data handling from the joystick query is done
FORCE_NO_SYMBOL $08F8
COMMENT $08FA /BLANK low and /ZERO low
FORCE_SYMBOL $08FA VIA_cntl
COMMENT_LINE $08FC jsr smallCalibration
COMMENT_LINE $08FC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $08FC independent code section
COMMENT_LINE $08FC remove/display otter
COMMENT $08FC is there any otter stuff at all?
FORCE_SYMBOL $08FC otter_status
COMMENT $08FF no?, than go on
FORCE_SYMBOL $0903 intermissionActive
COMMENT $0908 croco is waiting to be displayed
FORCE_SYMBOL $0908 IS_WAITING
COMMENT $090A if zero, do nothing
COMMENT_LINE $090E otter is already displayed, must check if we should destroy it...
COMMENT $090E load object list address of object past otter
FORCE_SYMBOL $090E otter_log_past
COMMENT $0911 and load the position of otter now
COMMENT $0914 compare to log pos
FORCE_NO_SYMBOL $0914
COMMENT $0916 go to display if otter higher log
COMMENT_LINE $0918 here when otter pos smaller log pos
COMMENT $0918 now add the hardcoded length plus some (5) extra 'pixel'
COMMENT $091A compare to log pos
FORCE_NO_SYMBOL $091A
COMMENT $091C if still lower, than display
COMMENT_LINE $091E otherwise if now greater, than a 'collision' with log happened
COMMENT_LINE $091E now destroy otter
FORCE_SYMBOL $091E IS_WAITING
FORCE_SYMBOL $0920 otter_status
COMMENT $0923 reload the otter timer
FORCE_SYMBOL $0923 otter_timer_start
COMMENT $0926 and store it
FORCE_SYMBOL $0926 otter_timer
COMMENT $0929 and go to done
FORCE_SYMBOL $0929 finnished_otter_stuff
COMMENT_LINE $092C ok, otter is available and still displayed...
COMMENT_LINE $092C first let us look if there is afrog to be eaten... :-)
COMMENT $092C go to 0,0
FORCE_NO_SYMBOL $092C
COMMENT $092E /BLANK low and /ZERO low
FORCE_SYMBOL $092E VIA_cntl
COMMENT $0930 what band are we on now ?
FORCE_SYMBOL $0930 otter_band
COMMENT $0933 plus one to compare with frog band
COMMENT $0934 compare with frog band
FORCE_SYMBOL $0934 frog_y_band
COMMENT $0937 if not equal... do a simple otter display
COMMENT $0939 load otter position
COMMENT $093C subtract frog position
FORCE_SYMBOL $093C frog_x
COMMENT $093F if positive no collision is possible -> jump to display
COMMENT $0941 near 20
COMMENT $0943 if lower, than everything OK
COMMENT $0945 test if we are in death timer loop
COMMENT $0948 frog is allready dead!
FORCE_NO_SYMBOL $094A
COMMENT $094E die a DIE_MOLE kind of
FORCE_SYMBOL $094E DIE_MOLE
FORCE_SYMBOL $0951 die_set_2
COMMENT_LINE $0954 ............................................................................
COMMENT_LINE $0954 this is actually the same as the code used in the main sprite loop
COMMENT_LINE $0954 just fitted for otter only...
COMMENT $0954 scale for game positioning
FORCE_SYMBOL $0954 SCALE_FACTOR_GAME
COMMENT $0956 move to time 1 lo, this means scaling
FORCE_SYMBOL $0956 VIA_t1_cnt_lo
COMMENT $0958 load otter position
FORCE_SYMBOL $0958 otter_pos
COMMENT_LINE $095B move to
COMMENT $095B Store Y in D/A register
FORCE_SYMBOL $095B VIA_port_a
COMMENT $095D Blank low, zero high?
FORCE_NO_SYMBOL $095D
FORCE_SYMBOL $095F VIA_cntl
COMMENT $0962 Enable mux
FORCE_SYMBOL $0962 VIA_port_b
COMMENT $0964 Disable mux
FORCE_SYMBOL $0964 VIA_port_b
COMMENT $0966 Store X in D/A register
FORCE_SYMBOL $0966 VIA_port_a
COMMENT $0968 enable timer
FORCE_SYMBOL $0968 VIA_t1_cnt_hi
COMMENT_LINE $096A this is a "special"
COMMENT_LINE $096A in move stuff, since it
COMMENT_LINE $096A is only relevant if there realy is an otter
COMMENT_LINE $096A and we do not even get to this code
COMMENT_LINE $096A if there is no otter,
COMMENT_LINE $096A for that reason no subroutine is called - but left here directly
COMMENT_LINE $096A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $096A ;;;;;;;;; IN MOVE OTTER START
COMMENT_LINE $096A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $096A in move stuff start
COMMENT $096A load otter position
FORCE_SYMBOL $096A otter_pos
COMMENT $096D add the speed
FORCE_SYMBOL $096D otter_speed
COMMENT $0970 is on left side out of bounds?
FORCE_SYMBOL $0970 BOUNDARY_LO
COMMENT $0972 no, than no coordinate fiddling
COMMENT $0976 don't check for right out of bounds now
COMMENT $0978 check if we are out of bounds on the right
FORCE_SYMBOL $0978 BOUNDARY_HI
COMMENT $097A no? than go on
COMMENT $097E store the new x position
COMMENT $0981 load the otter object to U
FORCE_SYMBOL $0981 otter_object
COMMENT $0984 decrease animation counter
FORCE_SYMBOL $0984 otter_anim_counter
COMMENT $0987 if zero, we must initialize new animation phase
COMMENT $0989 load old sprite offsets
FORCE_NO_SYMBOL $0989
COMMENT $098B negate them (A)
COMMENT $098C negate them (B)
COMMENT $098D add y position to old sprite offset y
FORCE_SYMBOL $098D otter_pos
COMMENT $0990 add x position to old sprite offset x
COMMENT $0993 load new object definition
FORCE_NO_SYMBOL $0993
COMMENT $0995 add new sprite offset y
FORCE_NO_SYMBOL $0995
COMMENT $0997 add new sprite offset x
FORCE_NO_SYMBOL $0997
COMMENT $0999 and store the corrected position
FORCE_SYMBOL $0999 otter_pos
COMMENT $099C store new object definition to object list
FORCE_SYMBOL $099C otter_object
COMMENT $099F load new animation counter start
FORCE_NO_SYMBOL $099F
COMMENT $09A1 and set it in object list
FORCE_SYMBOL $09A1 otter_anim_counter
COMMENT $09A4 load object vector list to X,
FORCE_NO_SYMBOL $09A4
COMMENT_LINE $09A6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09A6 ;;;;;;;;; IN MOVE OTTER END
COMMENT_LINE $09A6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $09A6 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $09A9
COMMENT $09AB 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $09AB VIA_cntl
COMMENT_LINE $09AD ............................................................................
COMMENT_LINE $09AD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09AD now look if there is a snake on some log
COMMENT $09AD get the status
FORCE_SYMBOL $09AD snake_status
COMMENT $09B0 if zero, than no snake on level
COMMENT $09B4 if waiting
FORCE_SYMBOL $09B4 IS_DISPLAYED
COMMENT $09B6 go to no snake
COMMENT_LINE $09BA now we set the new coordinates
COMMENT $09BA a different scale again... still very high :-(
FORCE_SYMBOL $09BA SCALE_FACTOR_GAME
COMMENT $09BC move to time 1 lo, this means scaling
FORCE_SYMBOL $09BC VIA_t1_cnt_lo
COMMENT $09BE do positioning, load pos here
FORCE_SYMBOL $09BE snake_pos
COMMENT_LINE $09C1 move to start
COMMENT $09C1 Store Y in D/A register
FORCE_SYMBOL $09C1 VIA_port_a
COMMENT $09C3 Blank low, zero high?
FORCE_NO_SYMBOL $09C3
FORCE_SYMBOL $09C5 VIA_cntl
COMMENT $09C8 Enable mux
FORCE_SYMBOL $09C8 VIA_port_b
COMMENT $09CA Disable mux
FORCE_SYMBOL $09CA VIA_port_b
COMMENT $09CC Store X in D/A register
FORCE_SYMBOL $09CC VIA_port_a
COMMENT $09CE enable timer
FORCE_SYMBOL $09CE VIA_t1_cnt_hi
COMMENT_LINE $09D0 this is a "special"
COMMENT_LINE $09D0 in move stuff, since it
COMMENT_LINE $09D0 is only relevant if there realy is a snake
COMMENT_LINE $09D0 and we do not even get to this code
COMMENT_LINE $09D0 if there is no snake,
COMMENT_LINE $09D0 for that reason no subroutine is called - but left here directly
COMMENT_LINE $09D0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $09D0 ;;;;;;;;; IN MOVE SNAKE START
COMMENT_LINE $09D0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $09D0 X to snake_anim_counter
FORCE_SYMBOL $09D0 snake_anim_counter
COMMENT $09D3 U to snake object
FORCE_SYMBOL $09D3 snake_object
COMMENT $09D6 + 1
FORCE_NO_SYMBOL $09D6
COMMENT $09D8 do positioning, load pos here
FORCE_SYMBOL $09D8 snake_pos
COMMENT $09DB add the speed, got from log information earlier
FORCE_SYMBOL $09DB snake_speed
COMMENT $09DE is on left side out of bounds?
FORCE_SYMBOL $09DE BOUNDARY_LO
COMMENT $09E0 no, than no coordinate fiddling
COMMENT $09E2 is waiting
FORCE_SYMBOL $09E2 snake_status
COMMENT $09E5 initiate the round counter
FORCE_SYMBOL $09E5 snake_round_counter_reset
COMMENT $09E8 store it
FORCE_SYMBOL $09E8 snake_round_counter
COMMENT $09ED check if we are out of bounds on the right
FORCE_SYMBOL $09ED BOUNDARY_HI
COMMENT $09F1 and 're' store it
FORCE_SYMBOL $09F1 snake_pos
COMMENT $09F4 decrease the number of steps a snake does befor turing arround
FORCE_SYMBOL $09F4 snake_gone
COMMENT $09F7 if not turning... go on
COMMENT $09F9 look at special in object definition for information...
FORCE_NO_SYMBOL $09F9
COMMENT $09FB are we now left or right?
FORCE_SYMBOL $09FB SPECIAL_RIGHT_SNAKE
COMMENT $09FD if right... jump
COMMENT $09FF load old sprite offsets
FORCE_NO_SYMBOL $09FF
COMMENT $0A01 negate them (A)
COMMENT $0A02 negate them (B)
COMMENT $0A03 add y position to old sprite offset y
FORCE_SYMBOL $0A03 snake_pos
COMMENT $0A06 add x position to old sprite offset x
COMMENT $0A09 load new object definition
FORCE_SYMBOL $0A09 snake1a_object
COMMENT $0A0D add new sprite offset y
FORCE_NO_SYMBOL $0A0D
COMMENT $0A0F add new sprite offset x
FORCE_NO_SYMBOL $0A0F
COMMENT $0A11 and store the corrected position
FORCE_SYMBOL $0A11 snake_pos
COMMENT $0A14 store new object definition
FORCE_SYMBOL $0A14 snake_object
COMMENT $0A18 load new animation counter start
FORCE_NO_SYMBOL $0A18
COMMENT $0A1A and set it in object list
FORCE_SYMBOL $0A1A snake_anim_counter
COMMENT $0A1D now go to opposite direction +1 equal log speed
FORCE_SYMBOL $0A1D snake_speed
COMMENT $0A20 plus another to be 1 step faster
FORCE_SYMBOL $0A20 snake_speed
COMMENT $0A23 get the limit of snake movement before turing again
FORCE_SYMBOL $0A23 SNAKE_GO_LIMIT
COMMENT $0A25 and store it
FORCE_SYMBOL $0A25 snake_gone
COMMENT $0A28 done with snake
COMMENT $0A2A load old sprite offsets
FORCE_NO_SYMBOL $0A2A
COMMENT $0A2C negate them (A)
COMMENT $0A2D negate them (B)
COMMENT $0A2E add y position to old sprite offset y
FORCE_SYMBOL $0A2E snake_pos
COMMENT $0A31 add x position to old sprite offset x
COMMENT $0A34 load new object definition
FORCE_SYMBOL $0A34 snake3a_object
COMMENT $0A38 add new sprite offset y
FORCE_NO_SYMBOL $0A38
COMMENT $0A3A add new sprite offset x
FORCE_NO_SYMBOL $0A3A
COMMENT $0A3C and store the corrected position
FORCE_SYMBOL $0A3C snake_pos
COMMENT $0A3F store new object definition
FORCE_SYMBOL $0A3F snake_object
COMMENT $0A43 load new animation counter start
FORCE_NO_SYMBOL $0A43
COMMENT $0A45 and set it in object list
FORCE_SYMBOL $0A45 snake_anim_counter
COMMENT $0A48 now go to opposite direction -1 equal log speed
FORCE_SYMBOL $0A48 snake_speed
COMMENT $0A4B minus another to be 1 step faster
FORCE_SYMBOL $0A4B snake_speed
COMMENT $0A4E get the limit of snake movement before turing again
FORCE_SYMBOL $0A4E SNAKE_GO_LIMIT
COMMENT $0A50 and store it
FORCE_SYMBOL $0A50 snake_gone
COMMENT $0A53 done with snake, on turn, no animation check is needed
COMMENT $0A55 decrease animation counter
COMMENT $0A57 if zero, we must initialize new animation phase
COMMENT_LINE $0A59 snake animation change
COMMENT $0A59 load old sprite offsets
FORCE_NO_SYMBOL $0A59
COMMENT $0A5B negate them (A)
COMMENT $0A5C negate them (B)
COMMENT $0A5D add y position to old sprite offset y
COMMENT $0A5F add x position to old sprite offset x
COMMENT $0A61 load new object definition
FORCE_NO_SYMBOL $0A61
COMMENT $0A64 add new sprite offset y
FORCE_NO_SYMBOL $0A64
COMMENT $0A66 add new sprite offset x
FORCE_NO_SYMBOL $0A66
COMMENT $0A68 and store the corrected position
COMMENT $0A6A store new object definition to object list
COMMENT $0A6D load new animation counter start
FORCE_NO_SYMBOL $0A6D
COMMENT $0A6F and set it in object list
FORCE_SYMBOL $0A71 intermissionActive
FORCE_NO_SYMBOL $0A76
COMMENT $0A78 wait for timer to finnish move to
FORCE_SYMBOL $0A78 VIA_int_flags
COMMENT_LINE $0A7E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A7E ;;;;;;;;; IN MOVE SNAKE END
COMMENT_LINE $0A7E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0A7E load object vector list to X,
FORCE_NO_SYMBOL $0A7E
COMMENT $0A80 scale for sprite
COMMENT $0A80 move to time 1 lo, this means scaling
FORCE_SYMBOL $0A80 VIA_t1_cnt_lo
COMMENT_LINE $0A82 unloop_start_address10:
FORCE_SYMBOL $0A82 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0A85
COMMENT $0A87 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0A87 VIA_cntl
COMMENT_LINE $0A89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A89 entry for 'LEVEL DONE' display
COMMENT_LINE $0A89 only the 'sprites' are displayed (and moved) below...
COMMENT_LINE $0A89 (new: collosion check
COMMENT_LINE $0A89 is inlined now as well, but wrapped with a "death"/intermission check)
COMMENT_LINE $0A89 jsr smallCalibration
COMMENT_LINE $0A89 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0A89 independent code section
COMMENT_LINE $0A89 setup independend code section jumper
COMMENT_LINE $0A89 DRAW ALL LEVEL SPRITES
COMMENT_LINE $0A89 now drawing all sprites (or object, whatever you call them)
COMMENT_LINE $0A89 routine, to draw all sprites,
COMMENT_LINE $0A89 move them, do an out of bounds checking,
COMMENT_LINE $0A89 intensity changing, and initializing
COMMENT_LINE $0A89 new animation sequences?
COMMENT_LINE $0A89 actually the animation initialization takes most of the code
COMMENT $0A89 load the address to X, start of list of
COMMENT_LINE $0A8C all objects (sprites) for this level
COMMENT_LINE $0A8C and their position
COMMENT_LINE $0A8C -2 and offsets are chose, that we adjust X only once in the GENERAL MACRO
COMMENT_LINE $0A8C moved to "in move" LDY      object_list                 ; load new list object
COMMENT_LINE $0A8C X pointing to Y coordinate now
COMMENT_LINE $0A8C Y pointing to object structure AND
COMMENT_LINE $0A8C Y pointing to x-speed in object structure
COMMENT $0A8C [5] load y, x coordinate from object_list to
COMMENT_LINE $0A8E A,B=D,
COMMENT_LINE $0A8E intensities of all sprites are the same, so no
COMMENT_LINE $0A8E setting is really needed!
COMMENT_LINE $0A8E since game positioning is done with a 'huge' scale factor ($91) there
COMMENT_LINE $0A8E is a whole lot of empty space in here, and that at EACH sprite.
COMMENT_LINE $0A8E anyway, the thing done in (befor!) that loop is the
COMMENT_LINE $0A8E checking whether an animation occurs or not.
COMMENT_LINE $0A8E and now if the sprite is out of bounds
COMMENT_LINE $0A8E and girl and snake checking!!!
COMMENT_LINE $0A8E another 1000 cycles saved.
COMMENT_LINE $0A8E ;;;;;;;;;;;; NOW MOVE_TO_D
COMMENT_LINE $0A8E note: there are 2 or 3 cycles more that could be saved here
COMMENT_LINE $0A8E by optimizing, but the vectrex zeroing is NOT
COMMENT_LINE $0A8E fast enough, vectors are not positioned correctly than!!!
COMMENT $0A8E [4]Store Y in D/A register
FORCE_SYMBOL $0A8E VIA_port_a
FORCE_NO_SYMBOL $0A91
COMMENT $0A93 /BLANK low and /ZERO low -> move cursor to zero
FORCE_SYMBOL $0A93 VIA_cntl
FORCE_SYMBOL $0A95 SCALE_FACTOR_GAME
COMMENT $0A97 move to time 1 lo, this means scaling
FORCE_SYMBOL $0A97 VIA_t1_cnt_lo
COMMENT_LINE $0A99 [8] a different scale again... still very high :-(
COMMENT_LINE $0A99 wait for zeroing to take effect
COMMENT_LINE $0A99 if we do not wait here, the zeroing is not 100% completed, and some sprites are
COMMENT_LINE $0A99 a little bit off in their positioning
COMMENT $0A99 wait with buffer for bad vectrex to finish zeroing, this nops takes about 600 cycles!
COMMENT $0AA4 Enable mux, this sets the Y integrator
FORCE_SYMBOL $0AA4 VIA_port_b
COMMENT $0AA6 Disable mux
FORCE_SYMBOL $0AA6 VIA_port_b
COMMENT $0AA8 Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $0AA8 VIA_port_a
COMMENT $0AAA enable timer, by accessing it!
FORCE_SYMBOL $0AAA VIA_t1_cnt_hi
COMMENT $0AAC Blank low, zero high?
FORCE_NO_SYMBOL $0AAC
COMMENT $0AAE Now zero is off... we can integrate!
FORCE_SYMBOL $0AAE VIA_cntl
COMMENT_LINE $0AB0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AB0 ;;;;;;;;; MOVE 7 START
COMMENT_LINE $0AB0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AB0 in move action here!
COMMENT_LINE $0AB0 following code must be executed here for all
COMMENT_LINE $0AB0 in moves in the vectorlist,
COMMENT_LINE $0AB0 it is the preparation of the next object,
COMMENT_LINE $0AB0 so we leave it here...
COMMENT_LINE $0AB0 I go out of may way here to have y only localy used
COMMENT_LINE $0AB0 that way I can use y as a indirect jump variable for the unlooping
COMMENT_LINE $0AB0 jump ,y is 3 cycles
COMMENT_LINE $0AB0 jump [location] is 8 cycles!
FORCE_NO_SYMBOL $0AB0
COMMENT $0AB3 [3] Increment X by 5
FORCE_NO_SYMBOL $0AB3
COMMENT $0AB5 add to B (x coordinate that is)
FORCE_NO_SYMBOL $0AB5
COMMENT_LINE $0AB7 the speed value (in the list object,
COMMENT_LINE $0AB7 e.g. car_1), increment Y by 1
COMMENT_LINE $0AB7 ;;;; NOT USED NOW ;;;;;
COMMENT_LINE $0AB7 idea is to add speed only X cycles
COMMENT_LINE $0AB7 that way really slow speeds and differences can be done
COMMENT_LINE $0AB7 the main crux is girl and snake which
COMMENT_LINE $0AB7 depend on parents speeds
COMMENT_LINE $0AB7 this can be accomplished using two new variables - but
COMMENT_LINE $0AB7 i don't think it is NEEDED - really
COMMENT_LINE $0AB7 the below few lines do NOT make a speed difference since its completley in MOVE TO
COMMENT_LINE $0000 ;;;; NOT USED NOW END ;;;;;
COMMENT $0AB7 is on left side out of bounds?
FORCE_SYMBOL $0AB7 BOUNDARY_LO
COMMENT $0AB9 no, than no coordinate fiddling
COMMENT $0ABD don't check for right out of bounds now
COMMENT $0ABF check if we are out of bounds on the right
FORCE_SYMBOL $0ABF BOUNDARY_HI
COMMENT_LINE $0AC1 BLE not_higher_out_of_bounds ; no? than go on
COMMENT $0AC3 store the new x position
FORCE_NO_SYMBOL $0AC3
COMMENT_LINE $0AC5 (X points to animation)
COMMENT_LINE $0AC5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AC5 ;;;;;;;;; MOVE X START
COMMENT_LINE $0AC5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AC5 about 20 - 30 cycles have already passed
COMMENT_LINE $0AC5 but neither girl nor snake was processed
COMMENT_LINE $0AC5 so we may do a short special in move here
COMMENT_LINE $0AC5 dp is c8 and does not need to be restored internally!
COMMENT $0AC5 [12] stream processing done in jsrs
FORCE_SYMBOL $0AC5 inMovePointer
COMMENT_LINE $0AC9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0AC9 ;;;;;;;;; MOVE X END
COMMENT_LINE $0AC9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ACD on each out of bounds a girl check is made...
COMMENT $0ACD save coordinates
FORCE_NO_SYMBOL $0ACF
COMMENT $0AD3 what's the girls status?
FORCE_SYMBOL $0AD3 girl_status
COMMENT $0AD5 no girl at all? than jump
FORCE_SYMBOL $0AD7 girl_log_object
COMMENT $0AD9 if not the same, go to no_girl_
COMMENT $0ADB what's the girls status?
FORCE_SYMBOL $0ADB girl_status
COMMENT $0ADD we are waiting to be displayed
FORCE_SYMBOL $0ADD IS_WAITING
COMMENT $0ADF than go to might be displayed routine
COMMENT $0AE1 if frogger carries girl,
FORCE_SYMBOL $0AE1 IS_CARRIED
COMMENT $0AE3 do nothing
COMMENT_LINE $0AE5 now IS_DISPLAYED, resetting counter and reset status
COMMENT $0AE5 IS WAITING
FORCE_SYMBOL $0AE5 girl_status
COMMENT $0AE7 initiate the round counter
FORCE_SYMBOL $0AE7 girl_round_counter_reset
COMMENT $0AE9 store it
FORCE_SYMBOL $0AE9 girl_round_counter
COMMENT_LINE $0AEB bra no_girl ; do not redisplay at once!
COMMENT $0AEB count down the round counter
FORCE_SYMBOL $0AEB girl_round_counter
COMMENT $0AED if not zero, than no girl will be displayed
COMMENT $0AEF IS DISPLAYED
FORCE_SYMBOL $0AEF girl_status
COMMENT $0AF1 load girl object address
FORCE_SYMBOL $0AF1 girl1a_object
COMMENT $0AF4 store it as first object
FORCE_SYMBOL $0AF4 girl_object
COMMENT_LINE $0AF6 now do positioning...
COMMENT $0AF6 the position of the log is on the stack
FORCE_NO_SYMBOL $0AF6
COMMENT $0AF8 more in the middle of the log
FORCE_NO_SYMBOL $0AF8
COMMENT $0AFA get and store the X position
COMMENT $0AFC y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0AFC
COMMENT $0AFE store y position
FORCE_SYMBOL $0AFE girl_pos
COMMENT $0B00 if we did girl, than no snake here!
COMMENT $0B02 what's the snake's status?
FORCE_SYMBOL $0B02 snake_status
COMMENT $0B04 no snake at all? than jump
FORCE_SYMBOL $0B06 snake_log_object
COMMENT $0B08 if not the same, go to no_snake_
COMMENT $0B0A what's the snake's status?
FORCE_SYMBOL $0B0A snake_status
COMMENT $0B0C we are waiting to be displayed
FORCE_SYMBOL $0B0C IS_WAITING
COMMENT $0B0E than go to might be displayed routine
COMMENT $0B10 IS WAITING
FORCE_SYMBOL $0B10 snake_status
COMMENT $0B12 initiate the round counter
FORCE_SYMBOL $0B12 snake_round_counter_reset
COMMENT $0B14 store it
FORCE_SYMBOL $0B14 snake_round_counter
COMMENT $0B16 count down the round counter
FORCE_SYMBOL $0B16 snake_round_counter
COMMENT $0B18 if not zero, than no snake will be displayed
COMMENT $0B1A IS DISPLAYED
FORCE_SYMBOL $0B1A snake_status
COMMENT $0B1C load snake object address
FORCE_SYMBOL $0B1C snake1a_object
COMMENT $0B1F store it as first object
FORCE_SYMBOL $0B1F snake_object
COMMENT_LINE $0B21 now do positioning...
COMMENT $0B21 the position of the log is on the stack
FORCE_NO_SYMBOL $0B21
COMMENT $0B23 get and store the X position
COMMENT $0B25 y position hardcoded, since sprites have different starting points
FORCE_NO_SYMBOL $0B25
COMMENT $0B27 store y position
FORCE_SYMBOL $0B27 snake_pos
COMMENT $0B29 get the speed of snake start
FORCE_SYMBOL $0B29 snake_speed_start
COMMENT $0B2B store it
FORCE_SYMBOL $0B2B snake_speed
COMMENT $0B2D get the number of steps a snake can take befor turning arround (hardcoded :-()
COMMENT $0B2F and store it
FORCE_SYMBOL $0B2F snake_gone
FORCE_NO_SYMBOL $0B31
COMMENT $0B35 restore coordinates
COMMENT $0B37 store the new x position, and increment U
FORCE_NO_SYMBOL $0B37
COMMENT_LINE $0B39 (U points to animation)
COMMENT_LINE $0B39 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B39 now we do that animation checking
COMMENT $0B39 load object vector list to u
FORCE_NO_SYMBOL $0B39
COMMENT_LINE $0B3B ;;;;;;;;;;; costs e.g. in level 8 18 cycles alltogether, we are still in "IN MOVE" range
COMMENT_LINE $0B3B ;;;; DRAW no snakes in intermission
FORCE_SYMBOL $0B3B intermissionActive
FORCE_NO_SYMBOL $0B40
COMMENT $0B42 get special flag
FORCE_NO_SYMBOL $0B42
FORCE_SYMBOL $0B48 skipCount_now
COMMENT $0B4B no_sprite_draw
COMMENT_LINE $0B4D ;;;; DRAW no snakes in intermission
COMMENT_LINE $0B4D ;;;;;;;;;;;
COMMENT $0B4D decrease animation counter
FORCE_NO_SYMBOL $0B4D
COMMENT $0B4F if zero, we must initialize new animation phase
COMMENT_LINE $0B51 4 cycles less than above -> if I weren't lazy I would do that switch in other places also...
FORCE_NO_SYMBOL $0B53
FORCE_NO_SYMBOL $0B55
COMMENT $0B57 load new object definition
FORCE_NO_SYMBOL $0B57
COMMENT $0B5A add new sprite offset y
FORCE_NO_SYMBOL $0B5A
COMMENT $0B5C add new sprite offset x
FORCE_NO_SYMBOL $0B5C
COMMENT $0B5E and store the corrected position
COMMENT $0B60 store new object definition to object list
COMMENT $0B63 load new animation counter start
FORCE_NO_SYMBOL $0B63
COMMENT $0B65 and set it in object list
FORCE_NO_SYMBOL $0B65
COMMENT $0B67 just a test if next vectorlist is 0
FORCE_NO_SYMBOL $0B67
COMMENT $0B69 and do the next object (or jump away)
FORCE_SYMBOL $0B6D skipCount_now
COMMENT $0B70 no_sprite_draw
COMMENT_LINE $0B72 stop moving forcably!
FORCE_NO_SYMBOL $0B72
COMMENT $0B74 move to time 1 lo, this means scaling
FORCE_SYMBOL $0B74 VIA_t1_cnt_lo
COMMENT $0B76 move to time 1 lo, this means scaling
FORCE_SYMBOL $0B76 VIA_t1_cnt_hi
COMMENT $0B78 and do the next
FORCE_SYMBOL $0B78 next_object
COMMENT $0B81 A= SCALE, B = Timer IRQ check
COMMENT_LINE $0B84 the following is the position checking loop
COMMENT_LINE $0B84 waiting till an interrupt occurs
COMMENT $0B84 scale for sprite
COMMENT $0B84 move to time 1 lo, this means scaling
FORCE_SYMBOL $0B84 VIA_t1_cnt_lo
COMMENT_LINE $0B86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B86 ;;;;;;;;; MOVE 7 END
COMMENT_LINE $0B86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0B86 in move action done
COMMENT $0B86 test the bit
FORCE_SYMBOL $0B86 VIA_int_flags
COMMENT $0B88 if not zero, than loop
COMMENT_LINE $0B8A (x) length in bytes
COMMENT_LINE $0B8A [x] duration in cycles
COMMENT_LINE $0B8A do one "manual" starter line in advance
COMMENT $0B8A get current coordinates
COMMENT $0B8C (2) [4] Send Y to A/D
FORCE_SYMBOL $0B8C VIA_port_a
COMMENT $0B8E (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $0B8E VIA_port_b
COMMENT $0B90 [6] Disable mux
FORCE_SYMBOL $0B90 VIA_port_b
COMMENT $0B92 [6] Send X to A/D
FORCE_SYMBOL $0B92 VIA_port_a
FORCE_NO_SYMBOL $0B94
COMMENT $0B96 [4] enable timer 1
FORCE_SYMBOL $0B96 VIA_t1_cnt_hi
COMMENT_LINE $0B98 light on
COMMENT $0B98 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0B98 VIA_cntl
COMMENT_LINE $0B9A pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0B9A [8] load Y coordinate to A, X coordinate to B
COMMENT $0B9C [4] Send Y to A/D
FORCE_SYMBOL $0B9C VIA_port_a
COMMENT $0B9E [6]
FORCE_SYMBOL $0B9E VIA_port_b
COMMENT $0BA0 [2]
FORCE_NO_SYMBOL $0BA0
COMMENT_LINE $0BA2 light off
COMMENT $0BA2 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BA2 VIA_cntl
COMMENT $0BA4 [6] Disable mux
FORCE_SYMBOL $0BA4 VIA_port_b
FORCE_NO_SYMBOL $0BA6
COMMENT_LINE $0BA8 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $0BA8 JUMP_INTO_26\?:
COMMENT_LINE $0BA8 ONE_LINE_DRAW
COMMENT_LINE $0BA8 JUMP_INTO_25\?:
COMMENT_LINE $0BA8 ONE_LINE_DRAW
COMMENT $0BA8 [6] Send X to A/D
FORCE_SYMBOL $0BA8 VIA_port_a
FORCE_NO_SYMBOL $0BAA
COMMENT $0BAC [4] enable timer 1
FORCE_SYMBOL $0BAC VIA_t1_cnt_hi
COMMENT_LINE $0BAE light on
COMMENT $0BAE [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BAE VIA_cntl
COMMENT_LINE $0BB0 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BB0 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BB2 [4] Send Y to A/D
FORCE_SYMBOL $0BB2 VIA_port_a
COMMENT $0BB4 [6]
FORCE_SYMBOL $0BB4 VIA_port_b
COMMENT $0BB6 [2]
FORCE_NO_SYMBOL $0BB6
COMMENT_LINE $0BB8 light off
COMMENT $0BB8 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BB8 VIA_cntl
COMMENT $0BBA [6] Disable mux
FORCE_SYMBOL $0BBA VIA_port_b
COMMENT $0BBC [6] Send X to A/D
FORCE_SYMBOL $0BBC VIA_port_a
FORCE_NO_SYMBOL $0BBE
COMMENT $0BC0 [4] enable timer 1
FORCE_SYMBOL $0BC0 VIA_t1_cnt_hi
COMMENT_LINE $0BC2 light on
COMMENT $0BC2 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BC2 VIA_cntl
COMMENT_LINE $0BC4 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BC4 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BC6 [4] Send Y to A/D
FORCE_SYMBOL $0BC6 VIA_port_a
COMMENT $0BC8 [6]
FORCE_SYMBOL $0BC8 VIA_port_b
COMMENT $0BCA [2]
FORCE_NO_SYMBOL $0BCA
COMMENT_LINE $0BCC light off
COMMENT $0BCC [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BCC VIA_cntl
COMMENT $0BCE [6] Disable mux
FORCE_SYMBOL $0BCE VIA_port_b
COMMENT $0BD0 [6] Send X to A/D
FORCE_SYMBOL $0BD0 VIA_port_a
FORCE_NO_SYMBOL $0BD2
COMMENT $0BD4 [4] enable timer 1
FORCE_SYMBOL $0BD4 VIA_t1_cnt_hi
COMMENT_LINE $0BD6 light on
COMMENT $0BD6 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BD6 VIA_cntl
COMMENT_LINE $0BD8 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BD8 [8] load Y coordinate to A, X coordinate to B
COMMENT $0BDA [4] Send Y to A/D
FORCE_SYMBOL $0BDA VIA_port_a
COMMENT $0BDC [6]
FORCE_SYMBOL $0BDC VIA_port_b
COMMENT $0BDE [2]
FORCE_NO_SYMBOL $0BDE
COMMENT_LINE $0BE0 light off
COMMENT $0BE0 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BE0 VIA_cntl
COMMENT $0BE2 [6] Disable mux
FORCE_SYMBOL $0BE2 VIA_port_b
COMMENT $0BE4 [6] Send X to A/D
FORCE_SYMBOL $0BE4 VIA_port_a
FORCE_NO_SYMBOL $0BE6
COMMENT $0BE8 [4] enable timer 1
FORCE_SYMBOL $0BE8 VIA_t1_cnt_hi
COMMENT_LINE $0BEA light on
COMMENT $0BEA [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BEA VIA_cntl
COMMENT_LINE $0BEC pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0BEC [8] load Y coordinate to A, X coordinate to B
COMMENT $0BEE [4] Send Y to A/D
FORCE_SYMBOL $0BEE VIA_port_a
COMMENT $0BF0 [6]
FORCE_SYMBOL $0BF0 VIA_port_b
COMMENT $0BF2 [2]
FORCE_NO_SYMBOL $0BF2
COMMENT_LINE $0BF4 light off
COMMENT $0BF4 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0BF4 VIA_cntl
COMMENT $0BF6 [6] Disable mux
FORCE_SYMBOL $0BF6 VIA_port_b
COMMENT $0BF8 [6] Send X to A/D
FORCE_SYMBOL $0BF8 VIA_port_a
FORCE_NO_SYMBOL $0BFA
COMMENT $0BFC [4] enable timer 1
FORCE_SYMBOL $0BFC VIA_t1_cnt_hi
COMMENT_LINE $0BFE light on
COMMENT $0BFE [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0BFE VIA_cntl
COMMENT_LINE $0C00 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C00 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C02 [4] Send Y to A/D
FORCE_SYMBOL $0C02 VIA_port_a
COMMENT $0C04 [6]
FORCE_SYMBOL $0C04 VIA_port_b
COMMENT $0C06 [2]
FORCE_NO_SYMBOL $0C06
COMMENT_LINE $0C08 light off
COMMENT $0C08 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C08 VIA_cntl
COMMENT $0C0A [6] Disable mux
FORCE_SYMBOL $0C0A VIA_port_b
COMMENT $0C0C [6] Send X to A/D
FORCE_SYMBOL $0C0C VIA_port_a
FORCE_NO_SYMBOL $0C0E
COMMENT $0C10 [4] enable timer 1
FORCE_SYMBOL $0C10 VIA_t1_cnt_hi
COMMENT_LINE $0C12 light on
COMMENT $0C12 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C12 VIA_cntl
COMMENT_LINE $0C14 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C14 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C16 [4] Send Y to A/D
FORCE_SYMBOL $0C16 VIA_port_a
COMMENT $0C18 [6]
FORCE_SYMBOL $0C18 VIA_port_b
COMMENT $0C1A [2]
FORCE_NO_SYMBOL $0C1A
COMMENT_LINE $0C1C light off
COMMENT $0C1C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C1C VIA_cntl
COMMENT $0C1E [6] Disable mux
FORCE_SYMBOL $0C1E VIA_port_b
COMMENT $0C20 [6] Send X to A/D
FORCE_SYMBOL $0C20 VIA_port_a
FORCE_NO_SYMBOL $0C22
COMMENT $0C24 [4] enable timer 1
FORCE_SYMBOL $0C24 VIA_t1_cnt_hi
COMMENT_LINE $0C26 light on
COMMENT $0C26 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C26 VIA_cntl
COMMENT_LINE $0C28 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C28 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C2A [4] Send Y to A/D
FORCE_SYMBOL $0C2A VIA_port_a
COMMENT $0C2C [6]
FORCE_SYMBOL $0C2C VIA_port_b
COMMENT $0C2E [2]
FORCE_NO_SYMBOL $0C2E
COMMENT_LINE $0C30 light off
COMMENT $0C30 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C30 VIA_cntl
COMMENT $0C32 [6] Disable mux
FORCE_SYMBOL $0C32 VIA_port_b
COMMENT $0C34 [6] Send X to A/D
FORCE_SYMBOL $0C34 VIA_port_a
FORCE_NO_SYMBOL $0C36
COMMENT $0C38 [4] enable timer 1
FORCE_SYMBOL $0C38 VIA_t1_cnt_hi
COMMENT_LINE $0C3A light on
COMMENT $0C3A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C3A VIA_cntl
COMMENT_LINE $0C3C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C3C [8] load Y coordinate to A, X coordinate to B
COMMENT $0C3E [4] Send Y to A/D
FORCE_SYMBOL $0C3E VIA_port_a
COMMENT $0C40 [6]
FORCE_SYMBOL $0C40 VIA_port_b
COMMENT $0C42 [2]
FORCE_NO_SYMBOL $0C42
COMMENT_LINE $0C44 light off
COMMENT $0C44 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C44 VIA_cntl
COMMENT $0C46 [6] Disable mux
FORCE_SYMBOL $0C46 VIA_port_b
COMMENT $0C48 [6] Send X to A/D
FORCE_SYMBOL $0C48 VIA_port_a
FORCE_NO_SYMBOL $0C4A
COMMENT $0C4C [4] enable timer 1
FORCE_SYMBOL $0C4C VIA_t1_cnt_hi
COMMENT_LINE $0C4E light on
COMMENT $0C4E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C4E VIA_cntl
COMMENT_LINE $0C50 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C50 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C52 [4] Send Y to A/D
FORCE_SYMBOL $0C52 VIA_port_a
COMMENT $0C54 [6]
FORCE_SYMBOL $0C54 VIA_port_b
COMMENT $0C56 [2]
FORCE_NO_SYMBOL $0C56
COMMENT_LINE $0C58 light off
COMMENT $0C58 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C58 VIA_cntl
COMMENT $0C5A [6] Disable mux
FORCE_SYMBOL $0C5A VIA_port_b
COMMENT $0C5C [6] Send X to A/D
FORCE_SYMBOL $0C5C VIA_port_a
FORCE_NO_SYMBOL $0C5E
COMMENT $0C60 [4] enable timer 1
FORCE_SYMBOL $0C60 VIA_t1_cnt_hi
COMMENT_LINE $0C62 light on
COMMENT $0C62 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C62 VIA_cntl
COMMENT_LINE $0C64 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C64 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C66 [4] Send Y to A/D
FORCE_SYMBOL $0C66 VIA_port_a
COMMENT $0C68 [6]
FORCE_SYMBOL $0C68 VIA_port_b
COMMENT $0C6A [2]
FORCE_NO_SYMBOL $0C6A
COMMENT_LINE $0C6C light off
COMMENT $0C6C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C6C VIA_cntl
COMMENT $0C6E [6] Disable mux
FORCE_SYMBOL $0C6E VIA_port_b
COMMENT $0C70 [6] Send X to A/D
FORCE_SYMBOL $0C70 VIA_port_a
FORCE_NO_SYMBOL $0C72
COMMENT $0C74 [4] enable timer 1
FORCE_SYMBOL $0C74 VIA_t1_cnt_hi
COMMENT_LINE $0C76 light on
COMMENT $0C76 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C76 VIA_cntl
COMMENT_LINE $0C78 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C78 [8] load Y coordinate to A, X coordinate to B
COMMENT $0C7A [4] Send Y to A/D
FORCE_SYMBOL $0C7A VIA_port_a
COMMENT $0C7C [6]
FORCE_SYMBOL $0C7C VIA_port_b
COMMENT $0C7E [2]
FORCE_NO_SYMBOL $0C7E
COMMENT_LINE $0C80 light off
COMMENT $0C80 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C80 VIA_cntl
COMMENT $0C82 [6] Disable mux
FORCE_SYMBOL $0C82 VIA_port_b
COMMENT $0C84 [6] Send X to A/D
FORCE_SYMBOL $0C84 VIA_port_a
FORCE_NO_SYMBOL $0C86
COMMENT $0C88 [4] enable timer 1
FORCE_SYMBOL $0C88 VIA_t1_cnt_hi
COMMENT_LINE $0C8A light on
COMMENT $0C8A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C8A VIA_cntl
COMMENT_LINE $0C8C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0C8C [8] load Y coordinate to A, X coordinate to B
COMMENT $0C8E [4] Send Y to A/D
FORCE_SYMBOL $0C8E VIA_port_a
COMMENT $0C90 [6]
FORCE_SYMBOL $0C90 VIA_port_b
COMMENT $0C92 [2]
FORCE_NO_SYMBOL $0C92
COMMENT_LINE $0C94 light off
COMMENT $0C94 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0C94 VIA_cntl
COMMENT $0C96 [6] Disable mux
FORCE_SYMBOL $0C96 VIA_port_b
COMMENT $0C98 [6] Send X to A/D
FORCE_SYMBOL $0C98 VIA_port_a
FORCE_NO_SYMBOL $0C9A
COMMENT $0C9C [4] enable timer 1
FORCE_SYMBOL $0C9C VIA_t1_cnt_hi
COMMENT_LINE $0C9E light on
COMMENT $0C9E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0C9E VIA_cntl
COMMENT_LINE $0CA0 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CA0 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CA2 [4] Send Y to A/D
FORCE_SYMBOL $0CA2 VIA_port_a
COMMENT $0CA4 [6]
FORCE_SYMBOL $0CA4 VIA_port_b
COMMENT $0CA6 [2]
FORCE_NO_SYMBOL $0CA6
COMMENT_LINE $0CA8 light off
COMMENT $0CA8 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CA8 VIA_cntl
COMMENT $0CAA [6] Disable mux
FORCE_SYMBOL $0CAA VIA_port_b
COMMENT $0CAC [6] Send X to A/D
FORCE_SYMBOL $0CAC VIA_port_a
FORCE_NO_SYMBOL $0CAE
COMMENT $0CB0 [4] enable timer 1
FORCE_SYMBOL $0CB0 VIA_t1_cnt_hi
COMMENT_LINE $0CB2 light on
COMMENT $0CB2 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CB2 VIA_cntl
COMMENT_LINE $0CB4 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CB4 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CB6 [4] Send Y to A/D
FORCE_SYMBOL $0CB6 VIA_port_a
COMMENT $0CB8 [6]
FORCE_SYMBOL $0CB8 VIA_port_b
COMMENT $0CBA [2]
FORCE_NO_SYMBOL $0CBA
COMMENT_LINE $0CBC light off
COMMENT $0CBC [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CBC VIA_cntl
COMMENT $0CBE [6] Disable mux
FORCE_SYMBOL $0CBE VIA_port_b
COMMENT $0CC0 [6] Send X to A/D
FORCE_SYMBOL $0CC0 VIA_port_a
FORCE_NO_SYMBOL $0CC2
COMMENT $0CC4 [4] enable timer 1
FORCE_SYMBOL $0CC4 VIA_t1_cnt_hi
COMMENT_LINE $0CC6 light on
COMMENT $0CC6 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CC6 VIA_cntl
COMMENT_LINE $0CC8 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CC8 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CCA [4] Send Y to A/D
FORCE_SYMBOL $0CCA VIA_port_a
COMMENT $0CCC [6]
FORCE_SYMBOL $0CCC VIA_port_b
COMMENT $0CCE [2]
FORCE_NO_SYMBOL $0CCE
COMMENT_LINE $0CD0 light off
COMMENT $0CD0 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CD0 VIA_cntl
COMMENT $0CD2 [6] Disable mux
FORCE_SYMBOL $0CD2 VIA_port_b
COMMENT $0CD4 [6] Send X to A/D
FORCE_SYMBOL $0CD4 VIA_port_a
FORCE_NO_SYMBOL $0CD6
COMMENT $0CD8 [4] enable timer 1
FORCE_SYMBOL $0CD8 VIA_t1_cnt_hi
COMMENT_LINE $0CDA light on
COMMENT $0CDA [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CDA VIA_cntl
COMMENT_LINE $0CDC pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CDC [8] load Y coordinate to A, X coordinate to B
COMMENT $0CDE [4] Send Y to A/D
FORCE_SYMBOL $0CDE VIA_port_a
COMMENT $0CE0 [6]
FORCE_SYMBOL $0CE0 VIA_port_b
COMMENT $0CE2 [2]
FORCE_NO_SYMBOL $0CE2
COMMENT_LINE $0CE4 light off
COMMENT $0CE4 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CE4 VIA_cntl
COMMENT $0CE6 [6] Disable mux
FORCE_SYMBOL $0CE6 VIA_port_b
COMMENT $0CE8 [6] Send X to A/D
FORCE_SYMBOL $0CE8 VIA_port_a
FORCE_NO_SYMBOL $0CEA
COMMENT $0CEC [4] enable timer 1
FORCE_SYMBOL $0CEC VIA_t1_cnt_hi
COMMENT_LINE $0CEE light on
COMMENT $0CEE [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0CEE VIA_cntl
COMMENT_LINE $0CF0 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0CF0 [8] load Y coordinate to A, X coordinate to B
COMMENT $0CF2 [4] Send Y to A/D
FORCE_SYMBOL $0CF2 VIA_port_a
COMMENT $0CF4 [6]
FORCE_SYMBOL $0CF4 VIA_port_b
COMMENT $0CF6 [2]
FORCE_NO_SYMBOL $0CF6
COMMENT_LINE $0CF8 light off
COMMENT $0CF8 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0CF8 VIA_cntl
COMMENT $0CFA [6] Disable mux
FORCE_SYMBOL $0CFA VIA_port_b
COMMENT $0CFC [6] Send X to A/D
FORCE_SYMBOL $0CFC VIA_port_a
FORCE_NO_SYMBOL $0CFE
COMMENT $0D00 [4] enable timer 1
FORCE_SYMBOL $0D00 VIA_t1_cnt_hi
COMMENT_LINE $0D02 light on
COMMENT $0D02 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D02 VIA_cntl
COMMENT_LINE $0D04 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D04 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D06 [4] Send Y to A/D
FORCE_SYMBOL $0D06 VIA_port_a
COMMENT $0D08 [6]
FORCE_SYMBOL $0D08 VIA_port_b
COMMENT $0D0A [2]
FORCE_NO_SYMBOL $0D0A
COMMENT_LINE $0D0C light off
COMMENT $0D0C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D0C VIA_cntl
COMMENT $0D0E [6] Disable mux
FORCE_SYMBOL $0D0E VIA_port_b
COMMENT $0D10 [6] Send X to A/D
FORCE_SYMBOL $0D10 VIA_port_a
FORCE_NO_SYMBOL $0D12
COMMENT $0D14 [4] enable timer 1
FORCE_SYMBOL $0D14 VIA_t1_cnt_hi
COMMENT_LINE $0D16 light on
COMMENT $0D16 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D16 VIA_cntl
COMMENT_LINE $0D18 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D18 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D1A [4] Send Y to A/D
FORCE_SYMBOL $0D1A VIA_port_a
COMMENT $0D1C [6]
FORCE_SYMBOL $0D1C VIA_port_b
COMMENT $0D1E [2]
FORCE_NO_SYMBOL $0D1E
COMMENT_LINE $0D20 light off
COMMENT $0D20 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D20 VIA_cntl
COMMENT $0D22 [6] Disable mux
FORCE_SYMBOL $0D22 VIA_port_b
COMMENT $0D24 [6] Send X to A/D
FORCE_SYMBOL $0D24 VIA_port_a
FORCE_NO_SYMBOL $0D26
COMMENT $0D28 [4] enable timer 1
FORCE_SYMBOL $0D28 VIA_t1_cnt_hi
COMMENT_LINE $0D2A light on
COMMENT $0D2A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D2A VIA_cntl
COMMENT_LINE $0D2C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D2C [8] load Y coordinate to A, X coordinate to B
COMMENT $0D2E [4] Send Y to A/D
FORCE_SYMBOL $0D2E VIA_port_a
COMMENT $0D30 [6]
FORCE_SYMBOL $0D30 VIA_port_b
COMMENT $0D32 [2]
FORCE_NO_SYMBOL $0D32
COMMENT_LINE $0D34 light off
COMMENT $0D34 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D34 VIA_cntl
COMMENT $0D36 [6] Disable mux
FORCE_SYMBOL $0D36 VIA_port_b
COMMENT $0D38 [6] Send X to A/D
FORCE_SYMBOL $0D38 VIA_port_a
FORCE_NO_SYMBOL $0D3A
COMMENT $0D3C [4] enable timer 1
FORCE_SYMBOL $0D3C VIA_t1_cnt_hi
COMMENT_LINE $0D3E light on
COMMENT $0D3E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D3E VIA_cntl
COMMENT_LINE $0D40 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D40 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D42 [4] Send Y to A/D
FORCE_SYMBOL $0D42 VIA_port_a
COMMENT $0D44 [6]
FORCE_SYMBOL $0D44 VIA_port_b
COMMENT $0D46 [2]
FORCE_NO_SYMBOL $0D46
COMMENT_LINE $0D48 light off
COMMENT $0D48 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D48 VIA_cntl
COMMENT $0D4A [6] Disable mux
FORCE_SYMBOL $0D4A VIA_port_b
COMMENT $0D4C [6] Send X to A/D
FORCE_SYMBOL $0D4C VIA_port_a
FORCE_NO_SYMBOL $0D4E
COMMENT $0D50 [4] enable timer 1
FORCE_SYMBOL $0D50 VIA_t1_cnt_hi
COMMENT_LINE $0D52 light on
COMMENT $0D52 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D52 VIA_cntl
COMMENT_LINE $0D54 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D54 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D56 [4] Send Y to A/D
FORCE_SYMBOL $0D56 VIA_port_a
COMMENT $0D58 [6]
FORCE_SYMBOL $0D58 VIA_port_b
COMMENT $0D5A [2]
FORCE_NO_SYMBOL $0D5A
COMMENT_LINE $0D5C light off
COMMENT $0D5C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D5C VIA_cntl
COMMENT $0D5E [6] Disable mux
FORCE_SYMBOL $0D5E VIA_port_b
COMMENT $0D60 [6] Send X to A/D
FORCE_SYMBOL $0D60 VIA_port_a
FORCE_NO_SYMBOL $0D62
COMMENT $0D64 [4] enable timer 1
FORCE_SYMBOL $0D64 VIA_t1_cnt_hi
COMMENT_LINE $0D66 light on
COMMENT $0D66 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D66 VIA_cntl
COMMENT_LINE $0D68 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $0D68 [8] load Y coordinate to A, X coordinate to B
COMMENT $0D6A [4] Send Y to A/D
FORCE_SYMBOL $0D6A VIA_port_a
COMMENT $0D6C [6]
FORCE_SYMBOL $0D6C VIA_port_b
COMMENT $0D6E [2]
FORCE_NO_SYMBOL $0D6E
COMMENT_LINE $0D70 light off
COMMENT $0D70 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0D70 VIA_cntl
COMMENT $0D72 [6] Disable mux
FORCE_SYMBOL $0D72 VIA_port_b
COMMENT $0D74 [6] Send X to A/D
FORCE_SYMBOL $0D74 VIA_port_a
COMMENT_LINE $0D76 light on
FORCE_NO_SYMBOL $0D76
COMMENT $0D78 [4] enable timer 1
FORCE_SYMBOL $0D78 VIA_t1_cnt_hi
COMMENT $0D7A ZERO disabled, and BLANK disabled
FORCE_SYMBOL $0D7A VIA_cntl
COMMENT_LINE $0D7C light off
COMMENT_LINE $0D7C there must the above mentioned "switch the light off"
COMMENT_LINE $0D7C after 22 cycles still be manually done
COMMENT_LINE $0D7C (but the 22 cycles might be reused otherwise!)
COMMENT $0D7C and do the next
FORCE_SYMBOL $0D7C next_object
COMMENT_LINE $0D7F here if no new animation is to be done
COMMENT_LINE $0D7F the last object is done via a JSR, for easier loop exiting
FORCE_SYMBOL $0D7F move_wait_draw_vlc_unloop
COMMENT_LINE $0D82 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0D82 now look if there is a girl on some log
COMMENT $0D82 get the status
FORCE_SYMBOL $0D82 girl_status
COMMENT $0D85 if waiting
FORCE_SYMBOL $0D85 IS_DISPLAYED
COMMENT $0D87 go to girl stuff
COMMENT $0D89 go to zero
FORCE_NO_SYMBOL $0D89
COMMENT $0D8B /BLANK low and /ZERO low
FORCE_SYMBOL $0D8B VIA_cntl
COMMENT_LINE $0D8F girl stuff below main function for short branches...
COMMENT_LINE $0D8F now we set the new coordinates and jump into the object
COMMENT_LINE $0D8F display loop again
COMMENT_LINE $0D8F setup all registers for a jump into the object loop
COMMENT $0D8F a different scale again... still very high :-(
FORCE_SYMBOL $0D8F SCALE_FACTOR_GAME
COMMENT $0D91 move to time 1 lo, this means scaling
FORCE_SYMBOL $0D91 VIA_t1_cnt_lo
COMMENT_LINE $0D93 todo check with real hardare
COMMENT_LINE $0D93 here the game scale is done befor -> should be 4 nops less (8) cycles
COMMENT_LINE $0D93 nop      (10-4)                      ; wait till abou 22 cycles passed from light sitch on to off
COMMENT $0D93 go allways to zero, is sort of bad,
FORCE_NO_SYMBOL $0D93
COMMENT $0D95 /BLANK low and /ZERO low
FORCE_SYMBOL $0D95 VIA_cntl
COMMENT $0D97 do positioning, load pos here
FORCE_SYMBOL $0D97 girl_pos
COMMENT $0D9A Store Y in D/A register
FORCE_SYMBOL $0D9A VIA_port_a
COMMENT $0D9C Enable mux, this sets the Y integrator
FORCE_SYMBOL $0D9C VIA_port_b
COMMENT $0D9E Disable mux
FORCE_SYMBOL $0D9E VIA_port_b
COMMENT $0DA0 Store X in D/A register this goes to the X integrator
FORCE_SYMBOL $0DA0 VIA_port_a
COMMENT $0DA2 Blank low, zero high?
FORCE_NO_SYMBOL $0DA2
COMMENT $0DA4 Now zero is of... we can integrate!
FORCE_SYMBOL $0DA4 VIA_cntl
COMMENT $0DA6 enable timer, by accessing it!
FORCE_SYMBOL $0DA6 VIA_t1_cnt_hi
COMMENT_LINE $0DA8 this is a "special"
COMMENT_LINE $0DA8 in move stuff, since it
COMMENT_LINE $0DA8 is only relevant if there realy is an girl
COMMENT_LINE $0DA8 and we do not even get to this code
COMMENT_LINE $0DA8 if there is no girl,
COMMENT_LINE $0DA8 for that reason no subroutine is called - but left here directly
COMMENT_LINE $0DA8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DA8 ;;;;;;;;; IN MOVE GIRL START
COMMENT_LINE $0DA8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DA8 here we have more than SCALE_FACTOR_GAME ($91) cycles time!
COMMENT_LINE $0DA8 nothing is now done here!
COMMENT $0DA8 x to girl_anim_counter
FORCE_SYMBOL $0DA8 girl_anim_counter
COMMENT $0DAB Y to girl object
FORCE_SYMBOL $0DAB girl_object
COMMENT $0DAF + 1
FORCE_NO_SYMBOL $0DAF
COMMENT $0DB1 do positioning, load pos here
FORCE_SYMBOL $0DB1 girl_pos
COMMENT $0DB4 add the speed, got from log information earlier
FORCE_SYMBOL $0DB4 girl_speed
COMMENT $0DB7 and 're' store it
FORCE_SYMBOL $0DB7 girl_pos
COMMENT_LINE $0DBA now we do that animation checking
COMMENT $0DBA load object vector list to u,
FORCE_NO_SYMBOL $0DBA
COMMENT $0DBC decrease animation counter
COMMENT $0DBE if zero, we must initialize new animation phase
COMMENT $0DC0 load old sprite offsets
FORCE_NO_SYMBOL $0DC0
COMMENT $0DC2 negate them (A)
COMMENT $0DC3 negate them (B)
COMMENT $0DC4 add y position to old sprite offset y
COMMENT $0DC6 add x position to old sprite offset x
COMMENT $0DC8 load new object definition
FORCE_NO_SYMBOL $0DC8
COMMENT $0DCB add new sprite offset y
FORCE_NO_SYMBOL $0DCB
COMMENT $0DCD add new sprite offset x
FORCE_NO_SYMBOL $0DCD
COMMENT $0DCF and store the corrected position
COMMENT $0DD1 store new object definition to object list
COMMENT $0DD4 load new animation counter start
FORCE_NO_SYMBOL $0DD4
COMMENT $0DD6 and set it in object list
COMMENT_LINE $0DD8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0DD8 ;;;;;;;;; IN MOVE GIRL END
COMMENT_LINE $0DD8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0DD8 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0DDB
COMMENT $0DDD 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $0DDD VIA_cntl
FORCE_SYMBOL $0DDF intermissionActive
COMMENT_LINE $0DE6 independent code section
COMMENT_LINE $0DE6 draw frog
COMMENT_LINE $0DE6 intensity is "default" at $60 now
FORCE_SYMBOL $0DE6 girl_status
COMMENT $0DE9 if girl is carried - flicker slightly!
FORCE_SYMBOL $0DE9 IS_CARRIED
COMMENT $0DED lsb of counter is used as "flicker" "counter"
FORCE_NO_SYMBOL $0DF0
FORCE_NO_SYMBOL $0DF2
COMMENT $0DF4 Store intensity in D/A
FORCE_SYMBOL $0DF4 VIA_port_a
COMMENT $0DF6 mux disabled channel 2
FORCE_NO_SYMBOL $0DF6
FORCE_SYMBOL $0DF9 VIA_port_b
COMMENT $0DFB mux enabled channel 2
FORCE_SYMBOL $0DFB VIA_port_b
COMMENT $0DFD turn off mux
FORCE_SYMBOL $0DFD VIA_port_b
COMMENT $0DFF set game scaling
FORCE_SYMBOL $0DFF SCALE_FACTOR_GAME
COMMENT $0E01 move to time 1 lo, this means scaling
FORCE_SYMBOL $0E01 VIA_t1_cnt_lo
COMMENT $0E03 load current frog position to D
FORCE_SYMBOL $0E03 frog_pos
COMMENT_LINE $0E06 following passage is a move_to_d derivat
COMMENT $0E06 Store Y in D/A register
FORCE_SYMBOL $0E06 VIA_port_a
COMMENT $0E08 Blank low, zero high?
FORCE_NO_SYMBOL $0E08
FORCE_SYMBOL $0E0A VIA_cntl
COMMENT $0E0D Enable mux
FORCE_SYMBOL $0E0D VIA_port_b
COMMENT $0E0F Disable mux
FORCE_SYMBOL $0E0F VIA_port_b
COMMENT $0E11 Store X in D/A register
FORCE_SYMBOL $0E11 VIA_port_a
COMMENT $0E13 enable timer
FORCE_SYMBOL $0E13 VIA_t1_cnt_hi
COMMENT_LINE $0E15 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E15 ;;;;;;;;; MOVE 1 START
COMMENT_LINE $0E15 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0E15 clear the count of currently skipped sprites each round (used in intermissions to switch of first 3 lanes)
FORCE_SYMBOL $0E15 skipCount_now
COMMENT $0E18 no jumper
COMMENT_LINE $0E18 pause stuff start!
FORCE_NO_SYMBOL $0E18
COMMENT $0E1C load new vector (length was cut by timer :-))
COMMENT_LINE $0E1E Bne      no_timer_death               ; if timer is zero, we are dead
COMMENT_LINE $0E22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E22 let us look if we need to initiate/destroy a home object
COMMENT_LINE $0E22 that is fly or crocodile
COMMENT_LINE $0E22 independent code section
COMMENT_LINE $0E22 do timer stuff for fly
COMMENT_LINE $0E22 insert/remove fly
COMMENT $0E22 is there any fly stuff at all?
FORCE_SYMBOL $0E22 fly_status
COMMENT $0E24 no?, than go on
COMMENT $0E26 is zero?
FORCE_SYMBOL $0E26 fly_timer
COMMENT $0E28 if not zero, do nothing
COMMENT $0E2A fly is waiting to be displayed
FORCE_SYMBOL $0E2A IS_WAITING
COMMENT $0E2C no?, than it is allready displayed
COMMENT_LINE $0E2E if zero... initiate new fly
COMMENT_LINE $0E2E JSR      Random                       ; get a random number
FORCE_SYMBOL $0E2E getMyRandom
COMMENT $0E31 only the lower three bits
FORCE_NO_SYMBOL $0E31
COMMENT $0E33 not higher than 4
FORCE_NO_SYMBOL $0E33
COMMENT $0E35 if lower than ok
COMMENT $0E37 otherwise take only half of it
COMMENT $0E38 must multiply by 5, length of home object
FORCE_NO_SYMBOL $0E38
COMMENT $0E3A times 5
COMMENT $0E3B remember start address if all homes are occupied
FORCE_SYMBOL $0E3B tmp1
COMMENT $0E3D load the address to U, start of list of homes
FORCE_SYMBOL $0E3D home_objects
COMMENT $0E40 is this home empty (only checking upper byte, should be ok)
COMMENT $0E42 if yes, than go on
COMMENT $0E44 otherwise, compare to 20 (right most home)
COMMENT $0E46 not last home?, than go on
COMMENT $0E48 store -5, so that +5 is 0, leftmost home
COMMENT $0E4A check next home (home object is 5 bytes long)
FORCE_SYMBOL $0E4A HOME_OBJECT_SIZE
COMMENT $0E4C checked all homes yet
FORCE_SYMBOL $0E4C tmp1
COMMENT $0E4E yes, than no home is free
COMMENT $0E50 and check again if empty...
COMMENT $0E52 remember offset to home for removal
FORCE_SYMBOL $0E52 fly_house
COMMENT $0E54 get address of U and add the offset
FORCE_SYMBOL $0E54 home_objects
COMMENT $0E57 in U address of 'random' home
COMMENT $0E59 load fly object
FORCE_SYMBOL $0E59 fly1a_object
COMMENT $0E5C store to the calculated home address
FORCE_NO_SYMBOL $0E5C
COMMENT $0E5E load animation counter of object
COMMENT $0E61 and store it to object in RAM
FORCE_NO_SYMBOL $0E61
COMMENT $0E63 IS DISPLAYED
FORCE_SYMBOL $0E63 fly_status
COMMENT $0E65 and finnished with fly stuff...
COMMENT_LINE $0E67 fly is allready displayed, must check if we should destroy it...
COMMENT_LINE $0E67 now destroy fly
COMMENT $0E67 load current fly offset
FORCE_SYMBOL $0E67 fly_house
COMMENT $0E69 get address of U and add the offset
FORCE_SYMBOL $0E69 home_objects
COMMENT $0E6C in U address of 'random' home
FORCE_NO_SYMBOL $0E6E
FORCE_NO_SYMBOL $0E71
COMMENT $0E73 is WAITING
FORCE_SYMBOL $0E73 fly_status
COMMENT $0E75 reload the fly timer
FORCE_SYMBOL $0E75 fly_timer_start
COMMENT $0E77 and store it
FORCE_SYMBOL $0E77 fly_timer
COMMENT_LINE $0E79 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0E79 do timer stuff for croco (home)
COMMENT_LINE $0E79 insert/remove croco
COMMENT $0E79 is there any croco stuff at all?
FORCE_SYMBOL $0E79 croco_status
COMMENT $0E7B no?, than go on
COMMENT $0E7D store it back
FORCE_SYMBOL $0E7D croco_timer
COMMENT $0E7F if not zero, do nothing
COMMENT $0E81 is there any croco stuff at all?
FORCE_SYMBOL $0E81 croco_status
COMMENT $0E83 croco is waiting to be displayed
FORCE_SYMBOL $0E83 IS_WAITING
COMMENT $0E85 no?, than it is allready displayed
COMMENT_LINE $0E87 if zero... initiate new croco
COMMENT_LINE $0E87 JSR      Random                       ; get a random number
FORCE_SYMBOL $0E87 getMyRandom
COMMENT $0E8A only the lower three bits
FORCE_NO_SYMBOL $0E8A
COMMENT $0E8C not higher than 4
FORCE_NO_SYMBOL $0E8C
COMMENT $0E8E if lower than ok
COMMENT $0E90 otherwise take only half of it
COMMENT $0E91 must multiply by 5, length of home object
FORCE_NO_SYMBOL $0E91
COMMENT $0E93 times 5
COMMENT $0E94 remember start address if all homes are occupied
FORCE_SYMBOL $0E94 tmp1
COMMENT $0E96 load the address to U, start of list of homes
FORCE_SYMBOL $0E96 home_objects
COMMENT $0E99 is this home empty (only checking upper byte, should be ok)
COMMENT $0E9B if yes, than go on
COMMENT $0E9D otherwise, compate to 20 (right most home)
COMMENT $0E9F not last home?, than go on
COMMENT $0EA1 store -5, so that +5 is 0, leftmost home
COMMENT $0EA3 check next home (home object is 5 bytes long)
FORCE_SYMBOL $0EA3 HOME_OBJECT_SIZE
COMMENT $0EA5 checked all homes yet
FORCE_SYMBOL $0EA5 tmp1
COMMENT $0EA7 yes, than no home is free
COMMENT $0EA9 and check again if empty...
COMMENT $0EAB remember offset to home for removal
FORCE_SYMBOL $0EAB croco_house
COMMENT $0EAD get address of U and add the offset
FORCE_SYMBOL $0EAD home_objects
COMMENT $0EB0 in U address of 'random' home
COMMENT $0EB2 load croco object
FORCE_SYMBOL $0EB2 crocoh1a_object
COMMENT $0EB5 store to the calculated home address
FORCE_NO_SYMBOL $0EB5
COMMENT $0EB7 load animation counter of object
COMMENT $0EBA and store it to object in RAM
FORCE_NO_SYMBOL $0EBA
COMMENT $0EBC is DISPLAYED
FORCE_SYMBOL $0EBC croco_status
COMMENT $0EBE and finnished with croco stuff...
COMMENT_LINE $0EC0 croco is allready displayed, must check if we should destroy it...
COMMENT_LINE $0EC0 now destroy croco
COMMENT $0EC0 load current croco offset
FORCE_SYMBOL $0EC0 croco_house
COMMENT $0EC2 get address of U and add the offset
FORCE_SYMBOL $0EC2 home_objects
COMMENT $0EC5 in U address of 'random' home
FORCE_NO_SYMBOL $0EC7
FORCE_NO_SYMBOL $0ECA
COMMENT $0ECC IS WAITING
FORCE_SYMBOL $0ECC croco_status
COMMENT $0ECE reload the croco timer
FORCE_SYMBOL $0ECE croco_timer_start
COMMENT $0ED0 and store it
FORCE_SYMBOL $0ED0 croco_timer
COMMENT_LINE $0ED2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ED2 EXPECTS DP = C8!
COMMENT_LINE $0ED2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0ED2 independent code section
COMMENT_LINE $0ED2 do timer stuff for diving turtles
COMMENT_LINE $0ED2 initiate alternate turtle sprites on
COMMENT_LINE $0ED2 timer...
COMMENT_LINE $0ED2 clean up stuff
COMMENT_LINE $0ED2 NOTE: turtles really suck
COMMENT_LINE $0ED2 sometimes turtles are torn appart due to
COMMENT_LINE $0ED2 huge sprite offsets
COMMENT_LINE $0ED2 higher than the (now used 5 maximum offset)
COMMENT $0ED2 should the turtles dive?
FORCE_SYMBOL $0ED2 dive_timer
COMMENT $0ED4 if not zero, don't do anything
COMMENT $0ED6 first let us restore the timer
FORCE_SYMBOL $0ED6 dive_timer_start
COMMENT $0ED8 store it HI
FORCE_SYMBOL $0ED8 dive_timer
COMMENT_LINE $0EDA go thru all sprites
COMMENT_LINE $0EDA see if diving special is there,
COMMENT_LINE $0EDA than change sprites to diving sprites
FORCE_SYMBOL $0EDA t_list
COMMENT $0EE2 load object address
FORCE_NO_SYMBOL $0EE2
COMMENT_LINE $0EE4 U pointer to object
COMMENT_LINE $0EE4 X pointer to this object list
COMMENT_LINE $0EE4 Y pointer to t_list
COMMENT_LINE $0EE4 from here we change the actual object in the object list
COMMENT_LINE $0EE4 these special objects (for now only turtles)
COMMENT_LINE $0EE4 have an extra entry in their object describtion
COMMENT_LINE $0EE4 this is the 'alternate' object describtion address
COMMENT_LINE $0EE4 this will be loaded and placed in the object list
COMMENT_LINE $0EE4 on each timer 0 we just change to the alternate sprite
COMMENT_LINE $0EE4 which allways switches back and forth between diving
COMMENT_LINE $0EE4 and non diving turtles (as we defined the object
COMMENT_LINE $0EE4 information as this)
COMMENT $0EE4 faster than a PSHS
FORCE_SYMBOL $0EE4 tmp1
COMMENT $0EE7 load alternate object to Y
FORCE_NO_SYMBOL $0EE7
COMMENT $0EEA load old sprite offsets
FORCE_NO_SYMBOL $0EEA
COMMENT $0EEC negate them (A)
COMMENT $0EED negate them (B)
COMMENT $0EEE add y position to old sprite offset y
FORCE_NO_SYMBOL $0EEE
COMMENT $0EF0 add x position to old sprite offset x
FORCE_NO_SYMBOL $0EF0
COMMENT $0EF2 add new sprite offset y
FORCE_NO_SYMBOL $0EF2
COMMENT $0EF4 add new sprite offset x
FORCE_NO_SYMBOL $0EF4
COMMENT $0EF6 and store the corrected position
FORCE_NO_SYMBOL $0EF6
COMMENT $0EF8 load new animation counter start
FORCE_NO_SYMBOL $0EF8
COMMENT $0EFA and set it in object list
FORCE_NO_SYMBOL $0EFA
COMMENT $0EFC store new object definition to object list
FORCE_NO_SYMBOL $0EFC
COMMENT $0EFF faster than a PULS
FORCE_SYMBOL $0EFF tmp1
COMMENT $0F02 and go on
COMMENT_LINE $0F04 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0F04 otter_status
FORCE_SYMBOL $0F06 IS_WAITING
COMMENT $0F08 if not zero, do nothing
FORCE_SYMBOL $0F0A otter_timer
COMMENT $0F0C if not zero, do nothing
COMMENT_LINE $0F0E if zero... initiate new otter
COMMENT_LINE $0F0E JSR      Random                       ; get a random number
FORCE_SYMBOL $0F0E getMyRandom
COMMENT $0F11 random in range of 0 - 15
FORCE_NO_SYMBOL $0F11
COMMENT $0F13 remember for lane offset
FORCE_SYMBOL $0F13 tmp1
COMMENT $0F15 only the lower three bits
FORCE_NO_SYMBOL $0F15
COMMENT $0F17 not higher than 5
FORCE_NO_SYMBOL $0F17
COMMENT $0F19 if lower than ok
COMMENT $0F1B otherwise take only half of it
COMMENT $0F1C this is the band we are on now
FORCE_SYMBOL $0F1C otter_band
COMMENT $0F1E multiply by band structure width
COMMENT $0F1F which is 16 bytes
COMMENT $0F22 copy A to B
COMMENT $0F24 SEX B :-) but without sign
COMMENT $0F25 add address start of band list
FORCE_SYMBOL $0F25 band_list
COMMENT_LINE $0F28 now we try to get a pseudo random offset of objects within
COMMENT_LINE $0F28 this lane, we use the same random number as for lane determination
COMMENT_LINE $0F28 but this time ranging from 0 - 15, see above
COMMENT $0F28 at least 1 in tmp1 so we don't loop to 255
FORCE_SYMBOL $0F28 tmp1
COMMENT_LINE $0F2A start address of this bandlist is in D (and remains there untouched...)
COMMENT $0F2A copy start of lane list to X
COMMENT $0F2C load object list address to U
COMMENT $0F2E if zero than we have gone past the last object
COMMENT_LINE $0F30 and jump to reinit X
COMMENT $0F30 otherwise we decrement our random value by 1
FORCE_SYMBOL $0F30 tmp1
COMMENT $0F32 if not zero, get the next object list member
COMMENT $0F34 store list object address of
FORCE_SYMBOL $0F34 otter_log_pre
COMMENT_LINE $0F36 'log' pre otter
COMMENT $0F36 load next list position
FORCE_NO_SYMBOL $0F36
COMMENT $0F38 if not zero jump
COMMENT $0F3A if zero we have to use the first object in this band
COMMENT $0F3C even if it is the same... as the pre object
FORCE_NO_SYMBOL $0F3C
COMMENT $0F3E store list object address of
FORCE_SYMBOL $0F3E otter_log_past
COMMENT_LINE $0F40 'log' past otter
COMMENT $0F40 load object address of first otter animation to X
FORCE_SYMBOL $0F40 otter1a_object
COMMENT $0F43 load pre otter object list address
FORCE_SYMBOL $0F43 otter_log_pre
COMMENT $0F45 position of pre list object
FORCE_NO_SYMBOL $0F45
COMMENT $0F47 pre object
FORCE_NO_SYMBOL $0F47
COMMENT $0F49 modify for y offset of pre object
FORCE_NO_SYMBOL $0F49
COMMENT $0F4B modify for x offset of pre object
FORCE_NO_SYMBOL $0F4B
COMMENT $0F4D add length of pre object
FORCE_NO_SYMBOL $0F4D
COMMENT $0F4F modify y position with otter offset
FORCE_NO_SYMBOL $0F4F
COMMENT $0F51 modify x position with otter offset
FORCE_NO_SYMBOL $0F51
COMMENT $0F53 add another 3 just for good measure...
FORCE_NO_SYMBOL $0F53
COMMENT $0F55 and store this as the new otter position
FORCE_SYMBOL $0F55 otter_pos
COMMENT $0F57 are we to far to the right?
FORCE_NO_SYMBOL $0F57
COMMENT $0F59 if so, don't use this otter
COMMENT $0F5B are we to far to the left?
COMMENT $0F5D if so don't use this otter either
COMMENT_LINE $0F5F the above is sort of needed, since I don't want to check
COMMENT_LINE $0F5F all fancy cases... there e.g. might be some weird positioning
COMMENT_LINE $0F5F that otter is quasi outside of the main screen and the
COMMENT_LINE $0F5F log it is looking for reaches the out of bounds boundary allways
COMMENT_LINE $0F5F befor the otter has a chance to realize it is allready near
COMMENT_LINE $0F5F thus the otter might stay there forever...
COMMENT $0F5F load speed of pre object
FORCE_NO_SYMBOL $0F5F
COMMENT $0F61 otter allways + 1
COMMENT_LINE $0F62 my otter allways moves from left to right
COMMENT_LINE $0F62 or standstill
COMMENT $0F62 store the new speed
FORCE_SYMBOL $0F62 otter_speed
COMMENT $0F64 store otter anim A 1 object as the relevant otter object
FORCE_SYMBOL $0F64 otter_object
COMMENT $0F66 reset animation counter for otter
FORCE_NO_SYMBOL $0F66
COMMENT $0F68 and store it
FORCE_SYMBOL $0F68 otter_anim_counter
COMMENT_LINE $0F6A now we do some checking if we haven't gotten ourself a real
COMMENT_LINE $0F6A stupid 'log' object, like a midway turtle or a
COMMENT_LINE $0F6A middle 'big' log...
COMMENT $0F6A load object list address of object past otter
FORCE_SYMBOL $0F6A otter_log_past
COMMENT $0F6C and load the position of otter now
COMMENT $0F6E subtract these two
FORCE_NO_SYMBOL $0F6E
COMMENT $0F70 absolute that
COMMENT $0F77 look if they are really near each other
FORCE_NO_SYMBOL $0F77
COMMENT_LINE $0F79 15 'includes' length of otter, hardcoded :-(
COMMENT $0F79 if not near, go to end, otherwise destroy otter
COMMENT $0F7B reload the otter timer
FORCE_SYMBOL $0F7B otter_timer_start
COMMENT $0F7D and store it
FORCE_SYMBOL $0F7D otter_timer
COMMENT $0F7F and go to done
COMMENT $0F81 is displayed
FORCE_SYMBOL $0F81 otter_status
COMMENT_LINE $0F83 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0F83
COMMENT $0F87 load current frog sprite
FORCE_SYMBOL $0F87 frog_pic
COMMENT_LINE $0F8A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0F8A ;;;;;;;;; MOVE 1 END
COMMENT_LINE $0F8A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0F8A done with our in 'pause' move stuff!
FORCE_SYMBOL $0F8A move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $0F8D
COMMENT $0F90 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0F90 VIA_aux_cntl
COMMENT $0F92 /BLANK low and /ZERO low
FORCE_SYMBOL $0F92 VIA_cntl
COMMENT $0F94 and finnished drawing even the girl
COMMENT_LINE $0F95 ***************************************************************************
COMMENT_LINE $0F95 this darling moves the frog on the title screen
COMMENT_LINE $0F95 query joystick handles the actual move information via recorded data given
FORCE_SYMBOL $0F95 query_joystick
FORCE_SYMBOL $0F98 move_frog
FORCE_NO_SYMBOL $0F9B
FORCE_SYMBOL $0FA0 Intensity_a
COMMENT $0FA3 set game scaling
FORCE_SYMBOL $0FA3 SCALE_FACTOR_GAME
COMMENT $0FA5 move to time 1 lo, this means scaling
FORCE_SYMBOL $0FA5 VIA_t1_cnt_lo
COMMENT $0FA7 load current frog position to D
FORCE_SYMBOL $0FA7 frog_pos
COMMENT_LINE $0FAA following passage is a move_to_d derivat
COMMENT $0FAA Store Y in D/A register
FORCE_SYMBOL $0FAA VIA_port_a
COMMENT $0FAC Blank low, zero high?
FORCE_NO_SYMBOL $0FAC
FORCE_SYMBOL $0FAE VIA_cntl
COMMENT $0FB1 Enable mux
FORCE_SYMBOL $0FB1 VIA_port_b
COMMENT $0FB3 Disable mux
FORCE_SYMBOL $0FB3 VIA_port_b
COMMENT $0FB5 Store X in D/A register
FORCE_SYMBOL $0FB5 VIA_port_a
COMMENT $0FB7 enable timer
FORCE_SYMBOL $0FB7 VIA_t1_cnt_hi
COMMENT_LINE $0FB9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0FB9 ;;;;;;;;; MOVE 1 START
COMMENT_LINE $0FB9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0FB9 load current frog sprite
FORCE_SYMBOL $0FB9 frog_pic
COMMENT_LINE $0FBC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0FBC ;;;;;;;;; MOVE 1 END
COMMENT_LINE $0FBC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $0FBC move_wait_draw_vlc_unloop
COMMENT_LINE $0FBF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $0FBF
COMMENT $0FC1 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $0FC1 VIA_aux_cntl
COMMENT_LINE $0FC4 ***************************************************************************
FORCE_NO_SYMBOL $0FC4
FORCE_SYMBOL $0FC7 score_digit_5
FORCE_SYMBOL $0FCA score_digit_3
FORCE_SYMBOL $0FCD score_digit_1
COMMENT $0FD0 end string with $81
FORCE_SYMBOL $0FD0 SPACE
COMMENT $0FD2 space betwwen score, and lives
FORCE_SYMBOL $0FD2 score_digit_SPACE1
COMMENT $0FD5 space betwwen lifes, and level
FORCE_SYMBOL $0FD5 score_digit_SPACE2
FORCE_NO_SYMBOL $0FD8
FORCE_SYMBOL $0FDA score_digit_LIFES
FORCE_NO_SYMBOL $0FDD
FORCE_SYMBOL $0FDF score_digit_Level
COMMENT $0FE2 end string with $81
FORCE_NO_SYMBOL $0FE2
FORCE_SYMBOL $0FE4 score_digit_front
FORCE_SYMBOL $0FE7 score_digit_back
COMMENT_LINE $0FEB ***************************************************************************
COMMENT_LINE $0FEB this routine initializes the game variables
COMMENT_LINE $0FEB nothing is expected and nothing is returned
COMMENT_LINE $0FEB leaves DP to C8
FORCE_SYMBOL $0FEB DP_to_C8
COMMENT $0FEE for attract mode to work properly - we need a not so random seed!
FORCE_NO_SYMBOL $0FEE
FORCE_SYMBOL $0FF1 Vec_Random_Seed
COMMENT $0FF7 these set up the joystick
FORCE_NO_SYMBOL $0FF7
FORCE_SYMBOL $0FFA Vec_Joy_Mux_1_X
COMMENT $0FFC not on startup = 1
FORCE_SYMBOL $0FFC gimmickPossible
COMMENT_LINE $0FFF enquiries
COMMENT_LINE $0FFF allowing only all directions for
COMMENT_LINE $0FFF for joystick one
COMMENT $0FFF this setting up saves a few hundred
FORCE_NO_SYMBOL $0FFF
FORCE_SYMBOL $1002 did_rollOver
FORCE_SYMBOL $1005 gimmickActive
COMMENT $1008 cycles
FORCE_SYMBOL $1008 Vec_Joy_Mux_2_X
COMMENT_LINE $100A don't miss it, if you don't need the
COMMENT_LINE $100A second joystick!
COMMENT $100C address to clear
FORCE_SYMBOL $100C home_objects
COMMENT $100F number of bytes - 1 to clear
COMMENT $1012 clear sub routine in ROM
FORCE_SYMBOL $1012 Clear_x_d
FORCE_NO_SYMBOL $1015
FORCE_SYMBOL $1017 tmp1
COMMENT $1019 pointer to y pos
FORCE_SYMBOL $101F HOME_X_WIDTH
FORCE_NO_SYMBOL $1021
FORCE_NO_SYMBOL $1023
FORCE_SYMBOL $1025 tmp1
COMMENT_LINE $1029 ;;;;;;;;;
COMMENT $1029 address to clear
FORCE_SYMBOL $1029 object_list
COMMENT $102C number of bytes - 1 to clear
COMMENT $102F clear sub routine in ROM
FORCE_SYMBOL $102F Clear_x_d
COMMENT $1032 address to clear
FORCE_SYMBOL $1032 band_list
COMMENT $1035 number of bytes - 1 to clear
COMMENT $1038 clear sub routine in ROM
FORCE_SYMBOL $1038 Clear_x_d
COMMENT $103B initial game level
FORCE_SYMBOL $103B START_LEVEL
COMMENT $103D upon startup
FORCE_SYMBOL $103D game_level
FORCE_SYMBOL $103F gameModeOption
FORCE_NO_SYMBOL $1042
COMMENT $1046 one based
FORCE_SYMBOL $1046 levelFromOptions
FORCE_SYMBOL $104A game_level
COMMENT $104C no y change for timer line...
FORCE_SYMBOL $104C y_timer
COMMENT_LINE $104E entry point for continue with current level
COMMENT $104E balls 5
FORCE_SYMBOL $104E FROGS_PER_GAME
FORCE_SYMBOL $1050 gameModeOption
FORCE_NO_SYMBOL $1053
FORCE_NO_SYMBOL $1057
COMMENT $1059 and store five balls
FORCE_SYMBOL $1059 no_frogs
FORCE_SYMBOL $105B score_digit_5
COMMENT $105E and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $105E high_check
COMMENT_LINE $1060 entry point for each new frog
FORCE_NO_SYMBOL $1060
COMMENT $1063 sta currentSFX+1
FORCE_SYMBOL $1063 currentSFX
COMMENT $1065 sta Vec_Joy_1_Y
FORCE_SYMBOL $1065 Vec_Joy_1_X
FORCE_SYMBOL $1067 froggerInJump
COMMENT_LINE $106B ensure no autojump!
COMMENT $106B only jump if last joy pos was zero
FORCE_SYMBOL $106B last_joy_x
COMMENT $106D only jump if last joy pos was zero
FORCE_SYMBOL $106D last_joy_y
COMMENT $106F frogger faces up
FORCE_SYMBOL $106F frogger_up
COMMENT $1072 upon startup
FORCE_SYMBOL $1072 frog_pic
COMMENT $1074 adjust sizing information
FORCE_SYMBOL $1074 FROG_SIZEX_UP
COMMENT $1076 store it
FORCE_SYMBOL $1076 current_frog_size_x
COMMENT $1078 first frog is looking up
FORCE_SYMBOL $1078 HEADING_UP
COMMENT $107A store that
FORCE_SYMBOL $107A current_frog_heading
COMMENT $107C load the offset of the currently used pic
FORCE_SYMBOL $107C frogger_up_offset
COMMENT $107F and store it for later use
FORCE_SYMBOL $107F current_frog_offset
COMMENT $1081 load init values
FORCE_SYMBOL $1081 FROG_INIT_POS
COMMENT $1084 and evalute the new pos
FORCE_SYMBOL $1084 frogger_up_offset
COMMENT $1087 corresponding to the offset
COMMENT $108A and store them...
FORCE_SYMBOL $108A frog_pos
COMMENT $108C load init values
FORCE_SYMBOL $108C FROG_INIT_POS_BAND
COMMENT $108F and store them...
FORCE_SYMBOL $108F frog_pos_band
COMMENT $1091 initialize timer
FORCE_SYMBOL $1091 my_timer_start
COMMENT $1093 store it
FORCE_SYMBOL $1093 my_timer
COMMENT $1095 always clear, for double death check
FORCE_NO_SYMBOL $1099
COMMENT $109D Karl Quappe $3c is default, all music is plaxed using channel 0+1
FORCE_NO_SYMBOL $10A0
COMMENT_LINE $10A3 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $10A3 stb      ,u
COMMENT $10A5 store register select byte
FORCE_SYMBOL $10A5 VIA_port_a
COMMENT $10A7 sound BDIR on, BC1 on, mux off _ LATCH
FORCE_NO_SYMBOL $10A7
FORCE_SYMBOL $10A9 VIA_port_b
COMMENT $10AB sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $10AB
FORCE_SYMBOL $10AD VIA_port_b
COMMENT $10AF read sound chip status (?)
FORCE_SYMBOL $10AF VIA_port_a
COMMENT $10B1 store data byte
FORCE_SYMBOL $10B1 VIA_port_a
COMMENT $10B3 sound BDIR on, BC1 off, mux off - WRITE
FORCE_NO_SYMBOL $10B3
FORCE_SYMBOL $10B5 VIA_port_b
COMMENT $10B7 sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $10B7
FORCE_SYMBOL $10B9 VIA_port_b
COMMENT $10BD sign for calling "score print" to NOT print score
FORCE_NO_SYMBOL $10BD
COMMENT_LINE $10C0 expects DP to $C8
COMMENT_LINE $10C0 mainly this routine sets up the sprite information which are
COMMENT_LINE $10C0 stored in the simple level structure
COMMENT_LINE $10C0 sprites are arranged in a fixed length list
COMMENT_LINE $10C0 a maximum of currently 30 sprites (should be enough) can be
COMMENT_LINE $10C0 stored in that list
COMMENT_LINE $10C0 though it depends on the size and position of these sprites if
COMMENT_LINE $10C0 vectrex is capable of drawing them in a way which doesn't hurt the eyes
COMMENT_LINE $10C0 the 'playfield' is divided into a 12*12 grid
COMMENT_LINE $10C0 the lowest position cannot contain any sprites, since
COMMENT_LINE $10C0 that's where frogger starts of
COMMENT_LINE $10C0 the level (see levels.i for an example) is constructed of a field of
COMMENT_LINE $10C0 bytes. If a byte differs from 0 a sprite is assumed
COMMENT_LINE $10C0 in that position
COMMENT_LINE $10C0 the position in screen coordinates is calculated from the byte position
COMMENT_LINE $10C0 in the field.
COMMENT_LINE $10C0 the byte itself is used as information what kind of sprite is to be
COMMENT_LINE $10C0 used
COMMENT_LINE $10C0 the position and the address where the sprite data is stored is
COMMENT_LINE $10C0 copied to an object_list in vectrex ram
COMMENT_LINE $10C0 this list will be repainted every round
COMMENT_LINE $10C0 for easier collision detection a second list is used
COMMENT_LINE $10C0 one for each band, a maximum of 7 sprites per band is currently supported
COMMENT_LINE $10C0 that way I don't have to check every single sprite, only those
COMMENT_LINE $10C0 in the band which interests me (still a few sprites to check)
COMMENT_LINE $10C0 the length of the sprite is stored in it's data structure, only the
COMMENT_LINE $10C0 length is relevant for collision detection,
COMMENT_LINE $10C0 since it is assumed that frogger allways hops over a whole band
COMMENT_LINE $10C0 sprites are allways assumed to start at 0 and than have a width of
COMMENT_LINE $10C0 'length'
COMMENT_LINE $10C0 if frogger 'touches' such a length it dies (or swims)
COMMENT_LINE $10C0 actually I think this is a very nasty collision detection
COMMENT_LINE $10C0 for the road, since the mearest scratch kills frogger,
COMMENT_LINE $10C0 on the other hand, he can get hold of only a 'pixel' of log
COMMENT_LINE $10C0 and still hold on to it :-)
COMMENT $10C0 five homes exist
FORCE_NO_SYMBOL $10C0
COMMENT $10C2 store it
FORCE_SYMBOL $10C2 in_home_counter
COMMENT_LINE $10C4 this means 5 empty homes
COMMENT $10C4 clear all homes
FORCE_NO_SYMBOL $10C4
COMMENT $10C7 first home
FORCE_SYMBOL $10C7 home_objects
COMMENT $10CB store the clear to home 1
FORCE_NO_SYMBOL $10CB
COMMENT $10CD store the clear to home 2
FORCE_NO_SYMBOL $10CD
COMMENT $10CF store the clear to home 3
FORCE_NO_SYMBOL $10CF
COMMENT $10D1 store the clear to home 4
FORCE_NO_SYMBOL $10D1
COMMENT $10D3 store the clear to home 5
FORCE_NO_SYMBOL $10D3
COMMENT $10D6 this is a helper if we reinit the
FORCE_SYMBOL $10D6 tmp2
COMMENT $10D8 level or start a new one
COMMENT_LINE $10DA this sets it to new level
COMMENT_LINE $10DA entry point for level reinit
COMMENT_LINE $10DA must allways be done after a morph, since a morph uses
COMMENT_LINE $10DA the same ram as the level information
COMMENT_LINE $10DA damn only 1 K (or less that is)
COMMENT $10DA otherwise set tmp2
FORCE_SYMBOL $10DA tmp2
COMMENT $10DC to 1, which means reinit
FORCE_SYMBOL $10DC tmp2
FORCE_SYMBOL $10DE SPACE
COMMENT $10E0 space betwwen score, and lives
FORCE_SYMBOL $10E0 score_digit_SPACE1
COMMENT $10E3 space betwwen lifes, and level
FORCE_SYMBOL $10E3 score_digit_SPACE2
COMMENT $10E6 look at level
FORCE_SYMBOL $10E6 game_level
COMMENT $10E8 start at 1 not 0
COMMENT $10E9 high "level" is per default a space
FORCE_SYMBOL $10E9 score_digit_Level
COMMENT $10EC end string with $81
FORCE_NO_SYMBOL $10EC
FORCE_SYMBOL $10EE score_digit_front
FORCE_SYMBOL $10F1 score_digit_back
COMMENT $10F4 != 0
FORCE_SYMBOL $10F4 frogDeath
COMMENT $10F7 != 0
FORCE_SYMBOL $10F7 intermissionActive
COMMENT $10FB clear all homes
FORCE_NO_SYMBOL $10FB
COMMENT_LINE $10FE clear static dive turtle list
COMMENT $10FE load start address
FORCE_SYMBOL $10FE t_list
COMMENT $1101 load length of structure
FORCE_NO_SYMBOL $1101
COMMENT $1104 clear object structure
FORCE_SYMBOL $1104 Clear_x_d
COMMENT_LINE $1107 first clear the current level
COMMENT_LINE $1107 this clears the last level band list
COMMENT $1107 load start address
FORCE_SYMBOL $1107 band_list
COMMENT $110A savety copy to tmp_band_list
FORCE_SYMBOL $110A tmp_band_list
COMMENT $110C load length of structure
COMMENT $110F clear band_list
FORCE_SYMBOL $110F Clear_x_d
COMMENT_LINE $1112 this clears the level object list
COMMENT $1112 load start address
FORCE_SYMBOL $1112 object_list
COMMENT $1115 load length of structure
COMMENT $1118 clear object structure
FORCE_SYMBOL $1118 Clear_x_d
COMMENT $111B load the address to U
FORCE_SYMBOL $111B object_list
COMMENT_LINE $111E than we go to current level
COMMENT $111E load length of level
FORCE_SYMBOL $111E LEVEL_DATA_LENGTH
COMMENT $1120 load level number
FORCE_SYMBOL $1120 game_level
COMMENT $1122 multiply these two
COMMENT $1123 and add to start address of level data
FORCE_SYMBOL $1123 level1_data
COMMENT $1126 and in X register for easier access (indexed)
COMMENT_LINE $1128 now we will loop a while, first thru all bands (11)
COMMENT $1128 11 bands (10+ middle)
FORCE_NO_SYMBOL $1128
COMMENT $112A if the level ist the "LEVEL DONE" level, only the middle band is loaded, all other
FORCE_SYMBOL $112A game_level
COMMENT $112C data is ignored
FORCE_NO_SYMBOL $112C
FORCE_SYMBOL $1130 band_list
FORCE_SYMBOL $1136 tmp_band_list
FORCE_SYMBOL $1138 level_done_data
FORCE_NO_SYMBOL $113B
COMMENT $113D initialize counter for loop1
FORCE_SYMBOL $113D loop1
COMMENT_LINE $113F and than the inner loop thru all band positions (12)
COMMENT $113F band list (x) offset for each new
FORCE_SYMBOL $113F tmp_band_offset
COMMENT $1141 band = 0
COMMENT $1143 fixed GRID_WIDTH
FORCE_NO_SYMBOL $1143
COMMENT $1145 initialize counter for loop2
FORCE_SYMBOL $1145 loop2
COMMENT $1147 load level information (one byte each pass), increment X by 1
COMMENT $1149 than move on
COMMENT_LINE $114B if we encounter something different than 0
COMMENT_LINE $114B we have a sprite which we will place in the
COMMENT_LINE $114B object structure,
COMMENT_LINE $114B this object structur will be updated all thru the
COMMENT_LINE $114B game...
COMMENT $114B clear A
COMMENT $114C since it starts at 1 not 0
COMMENT $114D multiply B by 2
COMMENT $114E add object table address
FORCE_SYMBOL $114E object_table
COMMENT $1151 move to index register Y
COMMENT $1153 and load the the sprite object structure to D
FORCE_NO_SYMBOL $1153
COMMENT_LINE $1155 first lets save this object list position to the current band_list
COMMENT_LINE $1155 pointer
COMMENT_LINE $1155 in the band_list are all object_list positions stored, sorted
COMMENT_LINE $1155 by each band
COMMENT_LINE $1155 band list provides storage for a maximum of 7 sprites per band
COMMENT_LINE $1155 this is NOT checked, make the levels good!!!
COMMENT $1155 save X,D register
COMMENT $1157 load current band list 'band' (y) position
FORCE_SYMBOL $1157 tmp_band_list
COMMENT $1159 add the current (x) position (how many objects on this band)
FORCE_SYMBOL $1159 tmp_band_offset
COMMENT $115B increment the offset
COMMENT $115D by two
COMMENT $115F store that in X index register
COMMENT $1161 save the current object_list position to band_list
FORCE_NO_SYMBOL $1161
COMMENT $1163 and restore the pointer to level information
COMMENT_LINE $1165 in D still the current object
COMMENT_LINE $1165 init dive turtle start
COMMENT_LINE $1165 a list with a max of 6, not checked!
COMMENT $1165 save D and X
COMMENT $1167 transfer D to index Y, get the object pointer to Y
COMMENT $1169 load special to A
FORCE_NO_SYMBOL $1169
COMMENT $116B look if it is a DIVE_SPECIAL
FORCE_SYMBOL $116B SPECIAL_DIVE
COMMENT $116D if not, go on
COMMENT $116F counter for number of divers
COMMENT $1171 position to store divers
FORCE_SYMBOL $1171 t_list
COMMENT $1174 store object_list position to t_list plus offset
COMMENT $1176 and increment list pointer by 2
COMMENT $1178 and store it back
COMMENT $117A restore D and X
COMMENT_LINE $117C init dive turtle end
COMMENT_LINE $117C now store the object definition address to the object_list
COMMENT_LINE $117C and initialize all variables...
COMMENT $117C and store it to object_list increment U by two
COMMENT $117E transfer D to index Y
COMMENT $1180 load the offsets from Y pointer
FORCE_NO_SYMBOL $1180
COMMENT $1182 y offset (these are offset in the sprite)
FORCE_NO_SYMBOL $1182
COMMENT $1184 x offset itself, an offset to the starting vector
FORCE_NO_SYMBOL $1184
COMMENT $1186 now get the y pos
FORCE_SYMBOL $1186 loop1
COMMENT $1188 make it signed
FORCE_NO_SYMBOL $1188
COMMENT $118A in game pos relation
FORCE_SYMBOL $118A GRID_SIZE_GAME
COMMENT $118C should be a byte value
COMMENT $118D add to offset
FORCE_NO_SYMBOL $118D
COMMENT $118F and store it to object... increment U by one
COMMENT $1191 now get the x pos
FORCE_SYMBOL $1191 loop2
COMMENT $1193 reverse the X coordinate
COMMENT $1194 make it signed
FORCE_NO_SYMBOL $1194
COMMENT $1196 in game pos relation
FORCE_SYMBOL $1196 GRID_SIZE_GAME
COMMENT $1198 should be a byte value
COMMENT $1199 add to offset
FORCE_NO_SYMBOL $1199
COMMENT $119B and store it to object... increment U by one
COMMENT $119D randomize the animation startup
FORCE_SYMBOL $119D Random
COMMENT_LINE $11A0 so that not all sprites are animated
COMMENT_LINE $11A0 in the same round...
COMMENT $11A0 maximum of 15
FORCE_NO_SYMBOL $11A0
COMMENT $11A2 at least one
COMMENT $11A3 store it to anim counter
COMMENT $11A5 dec loop2
FORCE_SYMBOL $11A5 loop2
COMMENT $11A7 end check if finnished
FORCE_SYMBOL $11A9 game_level
FORCE_NO_SYMBOL $11AB
COMMENT $11B0 store to status, this means no girl on screen
FORCE_SYMBOL $11B0 girl_status
FORCE_SYMBOL $11B2 girl_log_object
COMMENT $11B4 default girl_object = 0
COMMENT $11B6 if !=0 than it is the round_counter
FORCE_SYMBOL $11B6 girl_round_counter_reset
COMMENT_LINE $11B9 lbeq     no_reinit_stuff
COMMENT $11B9 fixed band list len
FORCE_NO_SYMBOL $11B9
COMMENT $11BC go one band list element further
FORCE_SYMBOL $11BC tmp_band_list
COMMENT $11BE and store it
FORCE_SYMBOL $11BE tmp_band_list
COMMENT $11C0 dec loop1
FORCE_SYMBOL $11C0 loop1
COMMENT $11C2 end check if finnished
COMMENT $11C6 we don't won't to reinit
FORCE_SYMBOL $11C6 tmp2
COMMENT $11C8 the next stuff
COMMENT $11CC fly
FORCE_SYMBOL $11CE NOT_AVAILABLE
COMMENT $11D0 if fly available , jump
COMMENT $11D2 store to status, this means no fly on screen
FORCE_SYMBOL $11D2 fly_status
COMMENT $11D4 and go on
COMMENT $11D6 otherwise use A as timer information HI
FORCE_SYMBOL $11D6 fly_timer_start
COMMENT $11D8 clear LO
COMMENT $11DA reload
FORCE_SYMBOL $11DA fly_timer_start
COMMENT $11DC and set the used timer to it
FORCE_SYMBOL $11DC fly_timer
COMMENT $11DE fly is waiting to be displayed
FORCE_SYMBOL $11DE IS_WAITING
COMMENT $11E0 store it
FORCE_SYMBOL $11E0 fly_status
COMMENT $11E2 crocodile
FORCE_SYMBOL $11E4 NOT_AVAILABLE
COMMENT $11E6 if croco available , jump
COMMENT $11E8 store to status, this means no croco on screen
FORCE_SYMBOL $11E8 croco_status
COMMENT $11EA and go on
COMMENT $11EC otherwise use A as timer information HI
FORCE_SYMBOL $11EC croco_timer_start
COMMENT $11EE clear LO
COMMENT $11F0 reload
FORCE_SYMBOL $11F0 croco_timer_start
COMMENT $11F2 and set the used timer to it
FORCE_SYMBOL $11F2 croco_timer
COMMENT $11F4 croco is waiting to be displayed
FORCE_SYMBOL $11F4 IS_WAITING
COMMENT $11F6 store it
FORCE_SYMBOL $11F6 croco_status
COMMENT $11F8 reset LO of otter timer allways
COMMENT $11FA otter
COMMENT $11FC store to status, this means no otter on screen if zero
FORCE_SYMBOL $11FC otter_status
COMMENT $11FE otherwise use A as timer information HI
FORCE_SYMBOL $11FE otter_timer_start
COMMENT_LINE $1200 rest of otter is initialized below in the 'always' section
COMMENT $1200 snake on log
COMMENT $1202 store to status, this means no snake on log
FORCE_SYMBOL $1202 snake_status
COMMENT $1204 if !=0 than it is the round_counter
FORCE_SYMBOL $1204 snake_round_counter_reset
COMMENT $1206 and go on
COMMENT_LINE $1208 x, y pos will be set in sprite draw loop
COMMENT_LINE $1208 speed will also be taken from host (log) object
COMMENT $1208 and store it to object
FORCE_SYMBOL $1208 snake_round_counter
COMMENT $120A reasonably small value
FORCE_NO_SYMBOL $120A
COMMENT $120C and store it to object
FORCE_SYMBOL $120C snake_anim_counter
COMMENT $120E align snake to first object in band 3
COMMENT $1212 remember the object list position of that object
FORCE_NO_SYMBOL $1212
COMMENT $1215 get the object address
FORCE_NO_SYMBOL $1215
COMMENT $1217 get the speed of the object
FORCE_NO_SYMBOL $1217
COMMENT $1219 allways go from left to right on startup...
COMMENT $121A store it
FORCE_SYMBOL $121A snake_speed_start
COMMENT $121C add three to object list position for easier checking in
FORCE_NO_SYMBOL $121C
COMMENT_LINE $121E draw object routine
COMMENT $121E save the objectlist address...
FORCE_SYMBOL $121E snake_log_object
COMMENT $1221 female
COMMENT $1223 store to status, this means no girl on screen
FORCE_SYMBOL $1223 girl_status
FORCE_SYMBOL $1225 girl_log_object
COMMENT $1227 default girl_object = 0
COMMENT $1229 if !=0 than it is the round_counter
FORCE_SYMBOL $1229 girl_round_counter_reset
COMMENT $122B and go on
COMMENT_LINE $122D x, y pos will be set in sprite draw loop
COMMENT_LINE $122D speed will also be taken from host (log) object
COMMENT $122D and store it to object
FORCE_SYMBOL $122D girl_round_counter
COMMENT $122F reasonable value for wait of first girl jump
FORCE_SYMBOL $122F GIRL_SPRING_TIMER
FORCE_SYMBOL $1231 girl_anim_counter
COMMENT $1233 clear the girl zero vector
FORCE_SYMBOL $1233 girl_zero
COMMENT $1235 so that we jump out of the display loop
COMMENT $1237 align girl to first object in band 4
COMMENT $123B remember the object list position of that object
FORCE_NO_SYMBOL $123B
COMMENT $123E get the object address
FORCE_NO_SYMBOL $123E
COMMENT $1240 get the speed of the object
FORCE_NO_SYMBOL $1240
COMMENT $1242 store it
FORCE_SYMBOL $1242 girl_speed
COMMENT $1244 add three to object list position for easier checking in
FORCE_NO_SYMBOL $1244
COMMENT_LINE $1246 draw object routine
COMMENT $1246 save the objectlist address...
FORCE_SYMBOL $1246 girl_log_object
COMMENT $1249 timer
FORCE_SYMBOL $124B did_rollOver
FORCE_NO_SYMBOL $1251
FORCE_NO_SYMBOL $1255
COMMENT $1257 store time for level information
FORCE_SYMBOL $1257 my_timer_start
COMMENT $1259 and set low timer
FORCE_NO_SYMBOL $1259
COMMENT_LINE $125B this now has the same length as the middway
COMMENT_LINE $125B (if timer in level is set correctly that is)
COMMENT $125B store it
COMMENT $125D turtle timer
COMMENT $125F load the diving counter
FORCE_SYMBOL $125F dive_timer_start
COMMENT $1261 and set the timer for diving HI
FORCE_SYMBOL $1261 dive_timer
COMMENT $1263 clear LO
COMMENT_LINE $1265 from here on again some 'allways init' stuff
COMMENT $1265 if !=0 than it is the round_counter
FORCE_SYMBOL $1265 girl_round_counter_reset
COMMENT $1267 if !=0 than it is the round_counter
FORCE_SYMBOL $1267 girl_round_counter
COMMENT $126B girl is waiting to be displayed
FORCE_SYMBOL $126B IS_WAITING
COMMENT $126D store it
FORCE_SYMBOL $126D girl_status
COMMENT $126F if !=0 than it is the round_counter
FORCE_SYMBOL $126F snake_round_counter_reset
COMMENT $1271 if !=0 than it is the round_counter
FORCE_SYMBOL $1271 snake_round_counter
COMMENT $1275 snake is waiting to be displayed
FORCE_SYMBOL $1275 IS_WAITING
COMMENT $1277 store it
FORCE_SYMBOL $1277 snake_status
COMMENT $1279 reload the otter timer
FORCE_SYMBOL $1279 otter_timer_start
COMMENT $127B and store it
FORCE_SYMBOL $127B otter_timer
COMMENT $127F otter status now is 'is waiting'
FORCE_SYMBOL $127F IS_WAITING
COMMENT $1281 store the status
FORCE_SYMBOL $1281 otter_status
COMMENT $1283 no bonus collected for this frog
FORCE_SYMBOL $1283 frog_bonus
COMMENT $1285 reset timer
FORCE_SYMBOL $1285 my_timer_start
COMMENT $1287 store it
FORCE_SYMBOL $1287 my_timer
COMMENT $1289 needed for band information calculation
COMMENT $128B when frog 'rides' an object
FORCE_SYMBOL $128B tmp_band_offset
COMMENT_LINE $128D calculate skip count
FORCE_SYMBOL $128D skipCount
COMMENT $1290 band 0
FORCE_SYMBOL $1290 band_list
FORCE_SYMBOL $1297 skipCount
COMMENT $129C band 1
FORCE_SYMBOL $12A3 skipCount
COMMENT $12A8 band 2
FORCE_SYMBOL $12AF skipCount
COMMENT_LINE $12B5 ***************************************************************************
FORCE_SYMBOL $12B5 playerCountOption
COMMENT $12BA last played player lives
FORCE_SYMBOL $12BA no_frogs2
FORCE_SYMBOL $12C0 checkHS2
FORCE_NO_SYMBOL $12C3
COMMENT $12C7 clear the frog variables
FORCE_SYMBOL $12C7 init_new_frog_vars
FORCE_SYMBOL $12CA DP_to_D0
COMMENT $12CD is there a current piece playing?
FORCE_SYMBOL $12CD currentMusic
COMMENT $12D0 if not
COMMENT $12D2 take that piece given and
FORCE_SYMBOL $12D2 inGameMusic1
COMMENT $12D5 play it now
FORCE_SYMBOL $12D5 currentMusic
FORCE_SYMBOL $12D8 init_ym_sound
COMMENT $12DD otherwise, store it as next possible piece
FORCE_SYMBOL $12DD inGameMusic1
FORCE_SYMBOL $12E0 nextMusic
COMMENT_LINE $12E4 check if current player is also dead
COMMENT $12E4 last played player lives
FORCE_SYMBOL $12E4 no_frogs
COMMENT $12E9 not speed optimized, but space!
FORCE_SYMBOL $12E9 DP_to_C8
COMMENT_LINE $12EC do some extro
COMMENT $12EC clear A
FORCE_NO_SYMBOL $12EC
COMMENT $12EF and store in intensity
FORCE_SYMBOL $12EF game_over_intensity
COMMENT $12F1 scale y
FORCE_SYMBOL $12F1 game_over_scaley
COMMENT $12F3 pos y
FORCE_SYMBOL $12F3 game_over_ypos
FORCE_SYMBOL $12F7 checkHS2
FORCE_SYMBOL $12FA DP_to_C8
FORCE_SYMBOL $12FD gameModeOption
FORCE_NO_SYMBOL $1300
FORCE_SYMBOL $1304 clearMyScore
FORCE_SYMBOL $1307 reinit_level
COMMENT $130A clear the frog variables
FORCE_SYMBOL $130A continue_level
COMMENT_LINE $130D correct stack, since we came here from a subroutine "jsr draw_objects"
FORCE_NO_SYMBOL $130D
FORCE_SYMBOL $130F restart_game
COMMENT $1312 correct stack
FORCE_SYMBOL $1314 new_game
COMMENT_LINE $1317 BRA new_game ; start a new game
COMMENT_LINE $1317 ***************************************************************************
COMMENT $1317 default
COMMENT $1317 this piece of music
FORCE_SYMBOL $1317 gameOverMusic
COMMENT $131A must be played
FORCE_SYMBOL $131A currentMusic
COMMENT $131D NOW
FORCE_SYMBOL $131D init_ym_sound
FORCE_SYMBOL $1320 RecalCounter
FORCE_NO_SYMBOL $1326
FORCE_SYMBOL $132A do_csa_sound_startup
FORCE_SYMBOL $132D oneYMRound
COMMENT $1330 prepare drawing of game over string , load scaling stuff
FORCE_SYMBOL $1330 game_over_scaley
COMMENT $1333 poke it to ram location
FORCE_SYMBOL $1333 Vec_Text_HW
COMMENT $1336 load intensity
FORCE_SYMBOL $1336 game_over_intensity
FORCE_NO_SYMBOL $1339
FORCE_NO_SYMBOL $133D
COMMENT $133F set intensity
FORCE_SYMBOL $133F Intensity_a
COMMENT $1342 load position, to D (A,B) register
FORCE_SYMBOL $1342 game_over_ypos
COMMENT $1345 and the address of the string itself
FORCE_SYMBOL $1345 game_over_string
COMMENT $1348 and draw it
FORCE_SYMBOL $1348 Print_Str_d
COMMENT_LINE $134B calculate new appearence
COMMENT $134B increase intensity
FORCE_SYMBOL $134B game_over_intensity
COMMENT $134E three per step
FORCE_NO_SYMBOL $134E
COMMENT $1350 store it
FORCE_SYMBOL $1350 game_over_intensity
COMMENT_LINE $1353 ANDA     #$1                          ; every second step increase
COMMENT $1353 every second step increase
FORCE_NO_SYMBOL $1353
COMMENT $1355 y scale of string
COMMENT $1357 load it
FORCE_SYMBOL $1357 game_over_scaley
COMMENT $135A increase it
FORCE_NO_SYMBOL $135A
COMMENT $135C save it
FORCE_SYMBOL $135C game_over_scaley
COMMENT $135F now look at the position of the
FORCE_SYMBOL $135F game_over_ypos
COMMENT $1362 string, first y pos
FORCE_NO_SYMBOL $1362
COMMENT $1364 increase it by two, but not to much
FORCE_NO_SYMBOL $1364
COMMENT $1368 maximum at $70
FORCE_NO_SYMBOL $1368
COMMENT $136A store it
FORCE_SYMBOL $136A game_over_ypos
COMMENT $136D likewise treat x pos load it
FORCE_SYMBOL $136D game_over_xpos
COMMENT $1370 decrease it
FORCE_NO_SYMBOL $1370
COMMENT $1372 till -$70
COMMENT $1376 or use minimum of -$70
COMMENT $1378 store it
FORCE_SYMBOL $1378 game_over_xpos
COMMENT $137B now do the x scaling
FORCE_SYMBOL $137B game_over_scalex
COMMENT $137E every round add 3
FORCE_NO_SYMBOL $137E
COMMENT $1380 and store it
FORCE_SYMBOL $1380 game_over_scalex
COMMENT $1383 do all this
FORCE_SYMBOL $1383 game_over_intensity
COMMENT $1386 till intensity is full
FORCE_NO_SYMBOL $1386
COMMENT $1388 do the game loop
COMMENT $138A get button status once, since only
FORCE_SYMBOL $138A Read_Btns
COMMENT_LINE $138D differences are noticed
COMMENT $138D now correct x scaling
FORCE_SYMBOL $138D game_over_scalex
COMMENT $1390 since it just rolled over, sub 3
FORCE_NO_SYMBOL $1390
COMMENT $1392 and store it
FORCE_SYMBOL $1392 game_over_scalex
FORCE_SYMBOL $1395 gameModeOption
FORCE_NO_SYMBOL $1398
COMMENT $139C load address of morph structure
FORCE_SYMBOL $139C morph_countdown1
COMMENT $139F and initialize a new morphing
FORCE_SYMBOL $139F set_up_morphing
FORCE_NO_SYMBOL $13A2
FORCE_SYMBOL $13A6 do_csa_sound_startup
FORCE_SYMBOL $13A9 oneYMRound
COMMENT $13AC and do it
FORCE_SYMBOL $13AC Intensity_5F
COMMENT $13AF prepare drawing of game over string , load scaling stuff
FORCE_SYMBOL $13AF game_over_scaley
COMMENT $13B2 poke it to ram location
FORCE_SYMBOL $13B2 Vec_Text_HW
COMMENT $13B5 load position, to D (A,B) register
FORCE_SYMBOL $13B5 game_over_ypos
COMMENT $13B8 and the address of the string itself
FORCE_SYMBOL $13B8 game_over_string
COMMENT $13BB and draw it
FORCE_SYMBOL $13BB Print_Str_d
COMMENT $13BE and do it
FORCE_SYMBOL $13BE Intensity_5F
COMMENT $13C1 back to zero
FORCE_NO_SYMBOL $13C1
COMMENT $13C3 /BLANK low and /ZERO low
FORCE_SYMBOL $13C3 VIA_cntl
FORCE_SYMBOL $13C5 gameModeOption
FORCE_NO_SYMBOL $13C8
COMMENT $13CC look of morphing is complete
FORCE_SYMBOL $13CC morph_status
COMMENT $13CF don't morph anymore
COMMENT $13D1 does one morph step, changing of vectors
FORCE_SYMBOL $13D1 do_one_morph_step_16
COMMENT $13D4 scale for placing first point
COMMENT $13D6 move to time 1 lo, this means scaling
FORCE_SYMBOL $13D6 VIA_t1_cnt_lo
COMMENT $13D8 y=0, X = '5'
COMMENT $13DB and move there
FORCE_SYMBOL $13DB Moveto_d
COMMENT $13DE load the morph vector list to X
FORCE_SYMBOL $13DE current_morph_vectorlist
COMMENT $13E1 scale it correctly
COMMENT $13E1 scale for placing first point
FORCE_SYMBOL $13E1 SCALE_FACTOR_VECTOR_MORPH
COMMENT $13E3 move to time 1 lo, this means scaling
FORCE_SYMBOL $13E3 VIA_t1_cnt_lo
COMMENT $13E5 and draw the vectorlist
FORCE_SYMBOL $13E5 Draw_VLc
COMMENT $13E8 back to zero
FORCE_NO_SYMBOL $13E8
COMMENT $13EA /BLANK low and /ZERO low
FORCE_SYMBOL $13EA VIA_cntl
COMMENT $13EC load score text size
FORCE_SYMBOL $13EC LITTLE_TEXT_SIZE
COMMENT $13EF poke it to ram location
FORCE_SYMBOL $13EF Vec_Text_HW
COMMENT $13F2 load position, to D (A,B) register
COMMENT $13F5 get address of string
FORCE_SYMBOL $13F5 continue_string
COMMENT $13F8 and draw it
FORCE_SYMBOL $13F8 Print_Str_d
COMMENT_LINE $13FB morph_complete:
COMMENT $13FB get button status
FORCE_SYMBOL $13FB Read_Btns
COMMENT $13FE is a button pressed?
FORCE_NO_SYMBOL $13FE
COMMENT $1400 no, than stay in game_over_loop2
COMMENT_LINE $1402 here continue...
COMMENT $1403 if music is playing, the length of the game over music determins the
FORCE_SYMBOL $1403 currentYLenCount
COMMENT $1406 length of the game over sign that is displayed
FORCE_NO_SYMBOL $1406
COMMENT $140B if music is not playing
FORCE_SYMBOL $140B musicOption
FORCE_SYMBOL $1410 RecalCounter
COMMENT $1413 than show it for 3 seconds
FORCE_NO_SYMBOL $1413
FORCE_NO_SYMBOL $141A
FORCE_SYMBOL $141C getOutToNewGame
COMMENT_LINE $141F ***************************************************************************
COMMENT $141F load offset of vector list draw
COMMENT $1425 A= SCALE, B = Timer IRQ check
COMMENT_LINE $1428 the following is the position checking loop
COMMENT_LINE $1428 waiting till an interrupt occurs
COMMENT $1428 scale for sprite
COMMENT $1428 move to time 1 lo, this means scaling
FORCE_SYMBOL $1428 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $142A
COMMENT $142C test the bit
FORCE_SYMBOL $142C VIA_int_flags
COMMENT $142E if not zero, than loop
COMMENT $1430 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $1430 VIA_aux_cntl
COMMENT_LINE $1432 (x) length in bytes
COMMENT_LINE $1432 [x] duration in cycles
COMMENT_LINE $1432 do one "manual" starter line in advance
COMMENT $1432 get current coordinates
COMMENT $1434 (2) [4] Send Y to A/D
FORCE_SYMBOL $1434 VIA_port_a
COMMENT $1436 (2) [4] enable mux, thus y integrators are set to Y
FORCE_SYMBOL $1436 VIA_port_b
COMMENT $1438 [6] Disable mux
FORCE_SYMBOL $1438 VIA_port_b
COMMENT $143A [6] Send X to A/D
FORCE_SYMBOL $143A VIA_port_a
FORCE_NO_SYMBOL $143C
COMMENT $143E [4] enable timer 1
FORCE_SYMBOL $143E VIA_t1_cnt_hi
COMMENT_LINE $1440 light on
COMMENT $1440 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1440 VIA_cntl
COMMENT_LINE $1442 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1442 [8] load Y coordinate to A, X coordinate to B
COMMENT $1444 [4] Send Y to A/D
FORCE_SYMBOL $1444 VIA_port_a
COMMENT $1446 [6]
FORCE_SYMBOL $1446 VIA_port_b
COMMENT $1448 [2]
FORCE_NO_SYMBOL $1448
COMMENT_LINE $144A light off
COMMENT $144A [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $144A VIA_cntl
COMMENT $144C [6] Disable mux
FORCE_SYMBOL $144C VIA_port_b
FORCE_NO_SYMBOL $144E
COMMENT_LINE $1450 definition must come after the above, otherwise calculation would be false
COMMENT_LINE $1450 JUMP_INTO_26\?:
COMMENT_LINE $1450 ONE_LINE_DRAW
COMMENT_LINE $1450 JUMP_INTO_25\?:
COMMENT_LINE $1450 ONE_LINE_DRAW
COMMENT $1450 [6] Send X to A/D
FORCE_SYMBOL $1450 VIA_port_a
FORCE_NO_SYMBOL $1452
COMMENT $1454 [4] enable timer 1
FORCE_SYMBOL $1454 VIA_t1_cnt_hi
COMMENT_LINE $1456 light on
COMMENT $1456 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1456 VIA_cntl
COMMENT_LINE $1458 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1458 [8] load Y coordinate to A, X coordinate to B
COMMENT $145A [4] Send Y to A/D
FORCE_SYMBOL $145A VIA_port_a
COMMENT $145C [6]
FORCE_SYMBOL $145C VIA_port_b
COMMENT $145E [2]
FORCE_NO_SYMBOL $145E
COMMENT_LINE $1460 light off
COMMENT $1460 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1460 VIA_cntl
COMMENT $1462 [6] Disable mux
FORCE_SYMBOL $1462 VIA_port_b
COMMENT $1464 [6] Send X to A/D
FORCE_SYMBOL $1464 VIA_port_a
FORCE_NO_SYMBOL $1466
COMMENT $1468 [4] enable timer 1
FORCE_SYMBOL $1468 VIA_t1_cnt_hi
COMMENT_LINE $146A light on
COMMENT $146A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $146A VIA_cntl
COMMENT_LINE $146C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $146C [8] load Y coordinate to A, X coordinate to B
COMMENT $146E [4] Send Y to A/D
FORCE_SYMBOL $146E VIA_port_a
COMMENT $1470 [6]
FORCE_SYMBOL $1470 VIA_port_b
COMMENT $1472 [2]
FORCE_NO_SYMBOL $1472
COMMENT_LINE $1474 light off
COMMENT $1474 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1474 VIA_cntl
COMMENT $1476 [6] Disable mux
FORCE_SYMBOL $1476 VIA_port_b
COMMENT $1478 [6] Send X to A/D
FORCE_SYMBOL $1478 VIA_port_a
FORCE_NO_SYMBOL $147A
COMMENT $147C [4] enable timer 1
FORCE_SYMBOL $147C VIA_t1_cnt_hi
COMMENT_LINE $147E light on
COMMENT $147E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $147E VIA_cntl
COMMENT_LINE $1480 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1480 [8] load Y coordinate to A, X coordinate to B
COMMENT $1482 [4] Send Y to A/D
FORCE_SYMBOL $1482 VIA_port_a
COMMENT $1484 [6]
FORCE_SYMBOL $1484 VIA_port_b
COMMENT $1486 [2]
FORCE_NO_SYMBOL $1486
COMMENT_LINE $1488 light off
COMMENT $1488 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1488 VIA_cntl
COMMENT $148A [6] Disable mux
FORCE_SYMBOL $148A VIA_port_b
COMMENT $148C [6] Send X to A/D
FORCE_SYMBOL $148C VIA_port_a
FORCE_NO_SYMBOL $148E
COMMENT $1490 [4] enable timer 1
FORCE_SYMBOL $1490 VIA_t1_cnt_hi
COMMENT_LINE $1492 light on
COMMENT $1492 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1492 VIA_cntl
COMMENT_LINE $1494 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1494 [8] load Y coordinate to A, X coordinate to B
COMMENT $1496 [4] Send Y to A/D
FORCE_SYMBOL $1496 VIA_port_a
COMMENT $1498 [6]
FORCE_SYMBOL $1498 VIA_port_b
COMMENT $149A [2]
FORCE_NO_SYMBOL $149A
COMMENT_LINE $149C light off
COMMENT $149C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $149C VIA_cntl
COMMENT $149E [6] Disable mux
FORCE_SYMBOL $149E VIA_port_b
COMMENT $14A0 [6] Send X to A/D
FORCE_SYMBOL $14A0 VIA_port_a
FORCE_NO_SYMBOL $14A2
COMMENT $14A4 [4] enable timer 1
FORCE_SYMBOL $14A4 VIA_t1_cnt_hi
COMMENT_LINE $14A6 light on
COMMENT $14A6 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14A6 VIA_cntl
COMMENT_LINE $14A8 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14A8 [8] load Y coordinate to A, X coordinate to B
COMMENT $14AA [4] Send Y to A/D
FORCE_SYMBOL $14AA VIA_port_a
COMMENT $14AC [6]
FORCE_SYMBOL $14AC VIA_port_b
COMMENT $14AE [2]
FORCE_NO_SYMBOL $14AE
COMMENT_LINE $14B0 light off
COMMENT $14B0 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14B0 VIA_cntl
COMMENT $14B2 [6] Disable mux
FORCE_SYMBOL $14B2 VIA_port_b
COMMENT $14B4 [6] Send X to A/D
FORCE_SYMBOL $14B4 VIA_port_a
FORCE_NO_SYMBOL $14B6
COMMENT $14B8 [4] enable timer 1
FORCE_SYMBOL $14B8 VIA_t1_cnt_hi
COMMENT_LINE $14BA light on
COMMENT $14BA [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14BA VIA_cntl
COMMENT_LINE $14BC pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14BC [8] load Y coordinate to A, X coordinate to B
COMMENT $14BE [4] Send Y to A/D
FORCE_SYMBOL $14BE VIA_port_a
COMMENT $14C0 [6]
FORCE_SYMBOL $14C0 VIA_port_b
COMMENT $14C2 [2]
FORCE_NO_SYMBOL $14C2
COMMENT_LINE $14C4 light off
COMMENT $14C4 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14C4 VIA_cntl
COMMENT $14C6 [6] Disable mux
FORCE_SYMBOL $14C6 VIA_port_b
COMMENT $14C8 [6] Send X to A/D
FORCE_SYMBOL $14C8 VIA_port_a
FORCE_NO_SYMBOL $14CA
COMMENT $14CC [4] enable timer 1
FORCE_SYMBOL $14CC VIA_t1_cnt_hi
COMMENT_LINE $14CE light on
COMMENT $14CE [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14CE VIA_cntl
COMMENT_LINE $14D0 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14D0 [8] load Y coordinate to A, X coordinate to B
COMMENT $14D2 [4] Send Y to A/D
FORCE_SYMBOL $14D2 VIA_port_a
COMMENT $14D4 [6]
FORCE_SYMBOL $14D4 VIA_port_b
COMMENT $14D6 [2]
FORCE_NO_SYMBOL $14D6
COMMENT_LINE $14D8 light off
COMMENT $14D8 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14D8 VIA_cntl
COMMENT $14DA [6] Disable mux
FORCE_SYMBOL $14DA VIA_port_b
COMMENT $14DC [6] Send X to A/D
FORCE_SYMBOL $14DC VIA_port_a
FORCE_NO_SYMBOL $14DE
COMMENT $14E0 [4] enable timer 1
FORCE_SYMBOL $14E0 VIA_t1_cnt_hi
COMMENT_LINE $14E2 light on
COMMENT $14E2 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14E2 VIA_cntl
COMMENT_LINE $14E4 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14E4 [8] load Y coordinate to A, X coordinate to B
COMMENT $14E6 [4] Send Y to A/D
FORCE_SYMBOL $14E6 VIA_port_a
COMMENT $14E8 [6]
FORCE_SYMBOL $14E8 VIA_port_b
COMMENT $14EA [2]
FORCE_NO_SYMBOL $14EA
COMMENT_LINE $14EC light off
COMMENT $14EC [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $14EC VIA_cntl
COMMENT $14EE [6] Disable mux
FORCE_SYMBOL $14EE VIA_port_b
COMMENT $14F0 [6] Send X to A/D
FORCE_SYMBOL $14F0 VIA_port_a
FORCE_NO_SYMBOL $14F2
COMMENT $14F4 [4] enable timer 1
FORCE_SYMBOL $14F4 VIA_t1_cnt_hi
COMMENT_LINE $14F6 light on
COMMENT $14F6 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $14F6 VIA_cntl
COMMENT_LINE $14F8 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $14F8 [8] load Y coordinate to A, X coordinate to B
COMMENT $14FA [4] Send Y to A/D
FORCE_SYMBOL $14FA VIA_port_a
COMMENT $14FC [6]
FORCE_SYMBOL $14FC VIA_port_b
COMMENT $14FE [2]
FORCE_NO_SYMBOL $14FE
COMMENT_LINE $1500 light off
COMMENT $1500 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1500 VIA_cntl
COMMENT $1502 [6] Disable mux
FORCE_SYMBOL $1502 VIA_port_b
COMMENT $1504 [6] Send X to A/D
FORCE_SYMBOL $1504 VIA_port_a
FORCE_NO_SYMBOL $1506
COMMENT $1508 [4] enable timer 1
FORCE_SYMBOL $1508 VIA_t1_cnt_hi
COMMENT_LINE $150A light on
COMMENT $150A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $150A VIA_cntl
COMMENT_LINE $150C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $150C [8] load Y coordinate to A, X coordinate to B
COMMENT $150E [4] Send Y to A/D
FORCE_SYMBOL $150E VIA_port_a
COMMENT $1510 [6]
FORCE_SYMBOL $1510 VIA_port_b
COMMENT $1512 [2]
FORCE_NO_SYMBOL $1512
COMMENT_LINE $1514 light off
COMMENT $1514 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1514 VIA_cntl
COMMENT $1516 [6] Disable mux
FORCE_SYMBOL $1516 VIA_port_b
COMMENT $1518 [6] Send X to A/D
FORCE_SYMBOL $1518 VIA_port_a
FORCE_NO_SYMBOL $151A
COMMENT $151C [4] enable timer 1
FORCE_SYMBOL $151C VIA_t1_cnt_hi
COMMENT_LINE $151E light on
COMMENT $151E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $151E VIA_cntl
COMMENT_LINE $1520 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1520 [8] load Y coordinate to A, X coordinate to B
COMMENT $1522 [4] Send Y to A/D
FORCE_SYMBOL $1522 VIA_port_a
COMMENT $1524 [6]
FORCE_SYMBOL $1524 VIA_port_b
COMMENT $1526 [2]
FORCE_NO_SYMBOL $1526
COMMENT_LINE $1528 light off
COMMENT $1528 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1528 VIA_cntl
COMMENT $152A [6] Disable mux
FORCE_SYMBOL $152A VIA_port_b
COMMENT $152C [6] Send X to A/D
FORCE_SYMBOL $152C VIA_port_a
FORCE_NO_SYMBOL $152E
COMMENT $1530 [4] enable timer 1
FORCE_SYMBOL $1530 VIA_t1_cnt_hi
COMMENT_LINE $1532 light on
COMMENT $1532 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1532 VIA_cntl
COMMENT_LINE $1534 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1534 [8] load Y coordinate to A, X coordinate to B
COMMENT $1536 [4] Send Y to A/D
FORCE_SYMBOL $1536 VIA_port_a
COMMENT $1538 [6]
FORCE_SYMBOL $1538 VIA_port_b
COMMENT $153A [2]
FORCE_NO_SYMBOL $153A
COMMENT_LINE $153C light off
COMMENT $153C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $153C VIA_cntl
COMMENT $153E [6] Disable mux
FORCE_SYMBOL $153E VIA_port_b
COMMENT $1540 [6] Send X to A/D
FORCE_SYMBOL $1540 VIA_port_a
FORCE_NO_SYMBOL $1542
COMMENT $1544 [4] enable timer 1
FORCE_SYMBOL $1544 VIA_t1_cnt_hi
COMMENT_LINE $1546 light on
COMMENT $1546 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1546 VIA_cntl
COMMENT_LINE $1548 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1548 [8] load Y coordinate to A, X coordinate to B
COMMENT $154A [4] Send Y to A/D
FORCE_SYMBOL $154A VIA_port_a
COMMENT $154C [6]
FORCE_SYMBOL $154C VIA_port_b
COMMENT $154E [2]
FORCE_NO_SYMBOL $154E
COMMENT_LINE $1550 light off
COMMENT $1550 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1550 VIA_cntl
COMMENT $1552 [6] Disable mux
FORCE_SYMBOL $1552 VIA_port_b
COMMENT $1554 [6] Send X to A/D
FORCE_SYMBOL $1554 VIA_port_a
FORCE_NO_SYMBOL $1556
COMMENT $1558 [4] enable timer 1
FORCE_SYMBOL $1558 VIA_t1_cnt_hi
COMMENT_LINE $155A light on
COMMENT $155A [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $155A VIA_cntl
COMMENT_LINE $155C pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $155C [8] load Y coordinate to A, X coordinate to B
COMMENT $155E [4] Send Y to A/D
FORCE_SYMBOL $155E VIA_port_a
COMMENT $1560 [6]
FORCE_SYMBOL $1560 VIA_port_b
COMMENT $1562 [2]
FORCE_NO_SYMBOL $1562
COMMENT_LINE $1564 light off
COMMENT $1564 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1564 VIA_cntl
COMMENT $1566 [6] Disable mux
FORCE_SYMBOL $1566 VIA_port_b
COMMENT $1568 [6] Send X to A/D
FORCE_SYMBOL $1568 VIA_port_a
FORCE_NO_SYMBOL $156A
COMMENT $156C [4] enable timer 1
FORCE_SYMBOL $156C VIA_t1_cnt_hi
COMMENT_LINE $156E light on
COMMENT $156E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $156E VIA_cntl
COMMENT_LINE $1570 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1570 [8] load Y coordinate to A, X coordinate to B
COMMENT $1572 [4] Send Y to A/D
FORCE_SYMBOL $1572 VIA_port_a
COMMENT $1574 [6]
FORCE_SYMBOL $1574 VIA_port_b
COMMENT $1576 [2]
FORCE_NO_SYMBOL $1576
COMMENT_LINE $1578 light off
COMMENT $1578 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1578 VIA_cntl
COMMENT $157A [6] Disable mux
FORCE_SYMBOL $157A VIA_port_b
COMMENT $157C [6] Send X to A/D
FORCE_SYMBOL $157C VIA_port_a
FORCE_NO_SYMBOL $157E
COMMENT $1580 [4] enable timer 1
FORCE_SYMBOL $1580 VIA_t1_cnt_hi
COMMENT_LINE $1582 light on
COMMENT $1582 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1582 VIA_cntl
COMMENT_LINE $1584 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1584 [8] load Y coordinate to A, X coordinate to B
COMMENT $1586 [4] Send Y to A/D
FORCE_SYMBOL $1586 VIA_port_a
COMMENT $1588 [6]
FORCE_SYMBOL $1588 VIA_port_b
COMMENT $158A [2]
FORCE_NO_SYMBOL $158A
COMMENT_LINE $158C light off
COMMENT $158C [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $158C VIA_cntl
COMMENT $158E [6] Disable mux
FORCE_SYMBOL $158E VIA_port_b
COMMENT $1590 [6] Send X to A/D
FORCE_SYMBOL $1590 VIA_port_a
FORCE_NO_SYMBOL $1592
COMMENT $1594 [4] enable timer 1
FORCE_SYMBOL $1594 VIA_t1_cnt_hi
COMMENT_LINE $1596 light on
COMMENT $1596 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1596 VIA_cntl
COMMENT_LINE $1598 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1598 [8] load Y coordinate to A, X coordinate to B
COMMENT $159A [4] Send Y to A/D
FORCE_SYMBOL $159A VIA_port_a
COMMENT $159C [6]
FORCE_SYMBOL $159C VIA_port_b
COMMENT $159E [2]
FORCE_NO_SYMBOL $159E
COMMENT_LINE $15A0 light off
COMMENT $15A0 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15A0 VIA_cntl
COMMENT $15A2 [6] Disable mux
FORCE_SYMBOL $15A2 VIA_port_b
COMMENT $15A4 [6] Send X to A/D
FORCE_SYMBOL $15A4 VIA_port_a
FORCE_NO_SYMBOL $15A6
COMMENT $15A8 [4] enable timer 1
FORCE_SYMBOL $15A8 VIA_t1_cnt_hi
COMMENT_LINE $15AA light on
COMMENT $15AA [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15AA VIA_cntl
COMMENT_LINE $15AC pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15AC [8] load Y coordinate to A, X coordinate to B
COMMENT $15AE [4] Send Y to A/D
FORCE_SYMBOL $15AE VIA_port_a
COMMENT $15B0 [6]
FORCE_SYMBOL $15B0 VIA_port_b
COMMENT $15B2 [2]
FORCE_NO_SYMBOL $15B2
COMMENT_LINE $15B4 light off
COMMENT $15B4 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15B4 VIA_cntl
COMMENT $15B6 [6] Disable mux
FORCE_SYMBOL $15B6 VIA_port_b
COMMENT $15B8 [6] Send X to A/D
FORCE_SYMBOL $15B8 VIA_port_a
FORCE_NO_SYMBOL $15BA
COMMENT $15BC [4] enable timer 1
FORCE_SYMBOL $15BC VIA_t1_cnt_hi
COMMENT_LINE $15BE light on
COMMENT $15BE [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15BE VIA_cntl
COMMENT_LINE $15C0 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15C0 [8] load Y coordinate to A, X coordinate to B
COMMENT $15C2 [4] Send Y to A/D
FORCE_SYMBOL $15C2 VIA_port_a
COMMENT $15C4 [6]
FORCE_SYMBOL $15C4 VIA_port_b
COMMENT $15C6 [2]
FORCE_NO_SYMBOL $15C6
COMMENT_LINE $15C8 light off
COMMENT $15C8 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15C8 VIA_cntl
COMMENT $15CA [6] Disable mux
FORCE_SYMBOL $15CA VIA_port_b
COMMENT $15CC [6] Send X to A/D
FORCE_SYMBOL $15CC VIA_port_a
FORCE_NO_SYMBOL $15CE
COMMENT $15D0 [4] enable timer 1
FORCE_SYMBOL $15D0 VIA_t1_cnt_hi
COMMENT_LINE $15D2 light on
COMMENT $15D2 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15D2 VIA_cntl
COMMENT_LINE $15D4 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15D4 [8] load Y coordinate to A, X coordinate to B
COMMENT $15D6 [4] Send Y to A/D
FORCE_SYMBOL $15D6 VIA_port_a
COMMENT $15D8 [6]
FORCE_SYMBOL $15D8 VIA_port_b
COMMENT $15DA [2]
FORCE_NO_SYMBOL $15DA
COMMENT_LINE $15DC light off
COMMENT $15DC [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15DC VIA_cntl
COMMENT $15DE [6] Disable mux
FORCE_SYMBOL $15DE VIA_port_b
COMMENT $15E0 [6] Send X to A/D
FORCE_SYMBOL $15E0 VIA_port_a
FORCE_NO_SYMBOL $15E2
COMMENT $15E4 [4] enable timer 1
FORCE_SYMBOL $15E4 VIA_t1_cnt_hi
COMMENT_LINE $15E6 light on
COMMENT $15E6 [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15E6 VIA_cntl
COMMENT_LINE $15E8 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15E8 [8] load Y coordinate to A, X coordinate to B
COMMENT $15EA [4] Send Y to A/D
FORCE_SYMBOL $15EA VIA_port_a
COMMENT $15EC [6]
FORCE_SYMBOL $15EC VIA_port_b
COMMENT $15EE [2]
FORCE_NO_SYMBOL $15EE
COMMENT_LINE $15F0 light off
COMMENT $15F0 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $15F0 VIA_cntl
COMMENT $15F2 [6] Disable mux
FORCE_SYMBOL $15F2 VIA_port_b
COMMENT $15F4 [6] Send X to A/D
FORCE_SYMBOL $15F4 VIA_port_a
FORCE_NO_SYMBOL $15F6
COMMENT $15F8 [4] enable timer 1
FORCE_SYMBOL $15F8 VIA_t1_cnt_hi
COMMENT_LINE $15FA light on
COMMENT $15FA [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $15FA VIA_cntl
COMMENT_LINE $15FC pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $15FC [8] load Y coordinate to A, X coordinate to B
COMMENT $15FE [4] Send Y to A/D
FORCE_SYMBOL $15FE VIA_port_a
COMMENT $1600 [6]
FORCE_SYMBOL $1600 VIA_port_b
COMMENT $1602 [2]
FORCE_NO_SYMBOL $1602
COMMENT_LINE $1604 light off
COMMENT $1604 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1604 VIA_cntl
COMMENT $1606 [6] Disable mux
FORCE_SYMBOL $1606 VIA_port_b
COMMENT $1608 [6] Send X to A/D
FORCE_SYMBOL $1608 VIA_port_a
FORCE_NO_SYMBOL $160A
COMMENT $160C [4] enable timer 1
FORCE_SYMBOL $160C VIA_t1_cnt_hi
COMMENT_LINE $160E light on
COMMENT $160E [4] ZERO disabled, and BLANK disabled
FORCE_SYMBOL $160E VIA_cntl
COMMENT_LINE $1610 pulu d ;[7] ; saves one cycle, which is nice -> about 350 cycles in the game, but the vectors are not connected anymore
COMMENT $1610 [8] load Y coordinate to A, X coordinate to B
COMMENT $1612 [4] Send Y to A/D
FORCE_SYMBOL $1612 VIA_port_a
COMMENT $1614 [6]
FORCE_SYMBOL $1614 VIA_port_b
COMMENT $1616 [2]
FORCE_NO_SYMBOL $1616
COMMENT_LINE $1618 light off
COMMENT $1618 [4] ZERO disabled, and BLANK enabled
FORCE_SYMBOL $1618 VIA_cntl
COMMENT $161A [6] Disable mux
FORCE_SYMBOL $161A VIA_port_b
COMMENT $161C [6] Send X to A/D
FORCE_SYMBOL $161C VIA_port_a
COMMENT_LINE $161E light on
FORCE_NO_SYMBOL $161E
COMMENT $1620 [4] enable timer 1
FORCE_SYMBOL $1620 VIA_t1_cnt_hi
COMMENT $1622 ZERO disabled, and BLANK disabled
FORCE_SYMBOL $1622 VIA_cntl
COMMENT_LINE $1624 light off
COMMENT_LINE $1624 there must the above mentioned "switch the light off"
COMMENT_LINE $1624 after 22 cycles still be manually done
COMMENT_LINE $1624 (but the 22 cycles might be reused otherwise!)
COMMENT_LINE $162D ***************************************************************************
FORCE_SYMBOL $162D sfx_doframe_intern_3
COMMENT_LINE $1630 copy all shadows
COMMENT $1630 number of regs to copy (+1)
FORCE_NO_SYMBOL $1630
COMMENT $1632 music players write here
FORCE_SYMBOL $1632 Vec_Music_Work
COMMENT $1635 shadow of actual PSG
FORCE_SYMBOL $1635 Vec_Snd_Shadow
COMMENT_LINE $163E no put to psg
COMMENT $163E ensure shadow has copy
COMMENT_LINE $1640 a = register
COMMENT_LINE $1640 b = value
COMMENT $1640 store register select byte
FORCE_SYMBOL $1640 VIA_port_a
COMMENT $1642 sound BDIR on, BC1 on, mux off _ LATCH
FORCE_NO_SYMBOL $1642
FORCE_SYMBOL $1644 VIA_port_b
COMMENT $1646 sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $1646
FORCE_SYMBOL $1648 VIA_port_b
COMMENT $164A read sound chip status (?)
FORCE_SYMBOL $164A VIA_port_a
COMMENT $164C store data byte
FORCE_SYMBOL $164C VIA_port_a
COMMENT $164E sound BDIR on, BC1 off, mux off - WRITE
FORCE_NO_SYMBOL $164E
FORCE_SYMBOL $1650 VIA_port_b
COMMENT $1652 sound BDIR off, BC1 off, mux off - INACTIVE
FORCE_NO_SYMBOL $1652
FORCE_SYMBOL $1654 VIA_port_b
FORCE_SYMBOL $1659 currentYLenCount
FORCE_SYMBOL $165E currentYLenCount
FORCE_SYMBOL $1663 nextMusic
FORCE_SYMBOL $1666 currentMusic
FORCE_SYMBOL $1669 init_ym_sound
COMMENT_LINE $166D ***************************************************************************
COMMENT_LINE $166D destroys D X U
COMMENT_LINE $166D play the given SFX, but only if nothing else is played (regardless of prio)
FORCE_SYMBOL $166D currentSFX
COMMENT $1672 load current sfx
FORCE_SYMBOL $1672 currentSFX
COMMENT $1675 if none playing - jump
COMMENT $1677 load current prio to a
FORCE_NO_SYMBOL $1677
COMMENT $1679 compare to prio of new sfx
FORCE_NO_SYMBOL $1679
COMMENT $167B if old prio is higher than go out
COMMENT $167D so we store it as current sfx
FORCE_SYMBOL $167D currentSFX
COMMENT $1680 and the actual sfx data store to our sfx player vars
FORCE_NO_SYMBOL $1680
FORCE_SYMBOL $1682 sfx_pointer_3
COMMENT $1685 tell the player, that it should play!
FORCE_NO_SYMBOL $1685
FORCE_SYMBOL $1687 sfx_status_3
COMMENT_LINE $168B ***************************************************************************
FORCE_NO_SYMBOL $168D
COMMENT $168F recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $168F RecalCounter
FORCE_NO_SYMBOL $1692
FORCE_SYMBOL $1694 RecalCounter
COMMENT $1697 Wait for timer t2
FORCE_SYMBOL $1697 VIA_int_flags
COMMENT $169B Store refresh value
FORCE_NO_SYMBOL $169B
COMMENT $169E into timer t2
FORCE_SYMBOL $169E VIA_t2_lo
FORCE_NO_SYMBOL $16A0
COMMENT $16A2 Set scale factor
FORCE_SYMBOL $16A2 VIA_t1_cnt_lo
FORCE_NO_SYMBOL $16A4
FORCE_SYMBOL $16A7 my_move_to_d
FORCE_NO_SYMBOL $16AA
COMMENT $16AC blank low and zero low
FORCE_SYMBOL $16AC VIA_cntl
COMMENT $16AE clear shift register
FORCE_SYMBOL $16AE VIA_shift_reg
FORCE_NO_SYMBOL $16B0
FORCE_SYMBOL $16B3 my_move_to_d
FORCE_NO_SYMBOL $16B6
COMMENT $16B8 /BLANK low and /ZERO low
FORCE_SYMBOL $16B8 VIA_cntl
COMMENT $16BA clear shift register
FORCE_SYMBOL $16BA VIA_shift_reg
FORCE_NO_SYMBOL $16BC
COMMENT $16BF clear D/A register
FORCE_SYMBOL $16BF VIA_port_a
COMMENT $16C1 mux=1, disable mux
FORCE_SYMBOL $16C1 VIA_port_b
COMMENT $16C3 mux=1, enable mux
FORCE_SYMBOL $16C3 VIA_port_b
COMMENT $16C5 disable mux
FORCE_SYMBOL $16C5 VIA_port_b
COMMENT_LINE $16C8 ***************************************************************************
FORCE_SYMBOL $16C8 RecalCounterLow
FORCE_SYMBOL $16CB my_random
FORCE_SYMBOL $16CE my_random
COMMENT_LINE $16D2 ***************************************************************************
COMMENT $16D2 is some kind of attract mode?
FORCE_SYMBOL $16D2 isAttractMode
COMMENT $16D7 if yes, do not query joystick, but look at our recorded data
FORCE_SYMBOL $16D7 attractMovePointer
COMMENT $16DA default > nothing moved
FORCE_NO_SYMBOL $16DA
FORCE_SYMBOL $16DD Vec_Joy_1_X
FORCE_SYMBOL $16E0 last_joy_x
COMMENT $16E5 14 bit of our recorded data is the time stamp
FORCE_NO_SYMBOL $16E5
FORCE_SYMBOL $16E7 RecalCounter
COMMENT $16EF reload data, and check the first 2 bits
FORCE_SYMBOL $16EF attractMovePointer
COMMENT $16F4 if msb is set, than joystick moved in X
FORCE_NO_SYMBOL $16F4
COMMENT $16F6 jump if else (than y)
COMMENT $16FA if MSB -1 is set, than movement as positive (negative - else)
FORCE_NO_SYMBOL $16FA
COMMENT $16FE store it to our joystick result var
FORCE_SYMBOL $16FE Vec_Joy_1_X
COMMENT $1703 negative movement, store...
FORCE_SYMBOL $1703 Vec_Joy_1_X
COMMENT $1706 and out
COMMENT $1708 was an Y movement, reload data
COMMENT $170A if MSB -1 is set, than movement as positive (negative - else)
FORCE_NO_SYMBOL $170A
COMMENT $170E store it to our joystick result var
FORCE_SYMBOL $170E Vec_Joy_1_Y
COMMENT $1711 and out
COMMENT $1713 negative movement, store...
FORCE_SYMBOL $1713 Vec_Joy_1_Y
COMMENT $1716 and out
COMMENT_LINE $1718 joytick pot readings are also switched by the (de)muliplexer (analog section)
COMMENT_LINE $1718 with joystick pots the switching is not done in regard of the output (in opposite to "input" switching of integrator logic)
COMMENT_LINE $1718 but with regard to input
COMMENT_LINE $1718 thus, the SEL part of the mux now selects which joystick pot is selected and send to the compare logic.
COMMENT_LINE $1718 mux sel:
COMMENT_LINE $1718 xxxx x00x: port 0 horizontal
COMMENT_LINE $1718 xxxx x01x: port 0 vertical
COMMENT_LINE $1718 xxxx x10x: port 1 horizontal
COMMENT_LINE $1718 xxxx x11x: port 1 vertical
COMMENT_LINE $1718 the result of the pot reading is compared to the
COMMENT_LINE $1718 value present in the dac and according to the comparisson the compare flag of VIA (bit 5 of port b) is set.
COMMENT_LINE $1718 (compare bit is = if contents of dac was "smaller" (signed) than the "pot" read)
COMMENT $1718 mux disabled, mux sel = 01 (vertical pot port 0)
FORCE_NO_SYMBOL $1718
FORCE_SYMBOL $171B VIA_port_b
COMMENT $171D mux enabled, mux sel = 01
FORCE_SYMBOL $171D VIA_port_b
COMMENT $171F a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
FORCE_SYMBOL $171F DIGITAL_JOYTICK_LOOP_MIN
COMMENT $1721 ...
COMMENT $1722 wait...
COMMENT $1724 disable mux
FORCE_SYMBOL $1724 VIA_port_b
COMMENT $1726 load a with test value (positive y)
FORCE_NO_SYMBOL $1726
COMMENT $1729 test value to DAC
FORCE_SYMBOL $1729 VIA_port_a
COMMENT $172B default result value y was pushed UP
FORCE_NO_SYMBOL $172B
COMMENT $172D test comparator
FORCE_SYMBOL $172D VIA_port_b
COMMENT $172F if comparator cleared - joystick was moved up
COMMENT $1731 "load" with negative value
FORCE_SYMBOL $1731 VIA_port_a
COMMENT $1733 also switch the possible result in A
COMMENT $1734 test comparator again
FORCE_SYMBOL $1734 VIA_port_b
COMMENT $1736 if cleared the joystick was moved down
COMMENT $1738 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $1739 remember the result in "our" joystick data
FORCE_SYMBOL $1739 Vec_Joy_1_Y
FORCE_SYMBOL $173E RecalCounterLow
FORCE_SYMBOL $1741 my_random
FORCE_SYMBOL $1744 my_random
COMMENT $1747 if y moved I assume no X move
COMMENT_LINE $1749 now the same for horizontal
COMMENT $1749 mux disabled, mux sel = 00 (horizontal pot port 0)
FORCE_NO_SYMBOL $1749
FORCE_SYMBOL $174C VIA_port_b
COMMENT $174E mux enabled, mux sel = 01
FORCE_SYMBOL $174E VIA_port_b
COMMENT $1750 a wait loop 32 times a loop (waiting for the pots to "read" values, and feed to compare logic)
FORCE_SYMBOL $1750 DIGITAL_JOYTICK_LOOP_MIN
COMMENT $1752 ...
COMMENT $1753 wait...
COMMENT $1755 disable mux
FORCE_SYMBOL $1755 VIA_port_b
COMMENT $1757 load a with test value (positive x)
FORCE_NO_SYMBOL $1757
COMMENT $175A test value to DAC
FORCE_SYMBOL $175A VIA_port_a
COMMENT $175C default result value x was pushed right
FORCE_NO_SYMBOL $175C
COMMENT $175E test comparator
FORCE_SYMBOL $175E VIA_port_b
COMMENT $1760 if comparator cleared - joystick was moved right
COMMENT $1762 "load" with negative value
FORCE_SYMBOL $1762 VIA_port_a
COMMENT $1764 also switch the possible result in A
COMMENT $1765 test comparator again
FORCE_SYMBOL $1765 VIA_port_b
COMMENT $1767 if cleared the joystick was moved left
COMMENT $1769 if still not cleared, we clear a as the final vertical test result (no move at all)
COMMENT $176A remember the result in "our" joystick data
FORCE_SYMBOL $176A Vec_Joy_1_X
FORCE_SYMBOL $176F RecalCounterLow
FORCE_SYMBOL $1772 my_random
FORCE_SYMBOL $1775 my_random
COMMENT_LINE $1779 ***************************************************************************
COMMENT_LINE $1779 optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $1779 NOT DONE:
COMMENT_LINE $1779 what should be done:
COMMENT_LINE $1779 s = $ff / max(abs(a),abs(b))
COMMENT_LINE $1779 a = a * s
COMMENT_LINE $1779 b = b * s
COMMENT_LINE $1779 scaling = scaling / s
COMMENT_LINE $1779 that would give the most efficient positioning
COMMENT_LINE $1779 bother it takes more time to calculate the above,
COMMENT_LINE $1779 than it saves
COMMENT_LINE $1779 with every positioning via this routine now,
COMMENT_LINE $1779 it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $1779 to do one simple positioning!!!
COMMENT_LINE $1779 that is probably about 300 cycles per positioning
COMMENT_LINE $1779 this is done about 30-40 times per round
COMMENT_LINE $1779 alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $1779 and we haven't drawn a single line yet!!!
COMMENT $1779 Store Y in D/A register
FORCE_SYMBOL $1779 VIA_port_a
COMMENT $177B Blank low, zero high?
FORCE_NO_SYMBOL $177B
FORCE_SYMBOL $177D VIA_cntl
COMMENT $1780 Enable mux
FORCE_SYMBOL $1780 VIA_port_b
COMMENT $1782 Clear shift regigster
FORCE_SYMBOL $1782 VIA_shift_reg
COMMENT $1784 Disable mux
FORCE_SYMBOL $1784 VIA_port_b
COMMENT $1786 Store X in D/A register
FORCE_SYMBOL $1786 VIA_port_a
COMMENT $1788 enable timer
FORCE_SYMBOL $1788 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $178A
FORCE_SYMBOL $178C VIA_int_flags
COMMENT_LINE $1791 ***************************************************************************
COMMENT $1791 no music is playing ->0
FORCE_SYMBOL $1791 Vec_Music_Flag
COMMENT $1794 shadow regs
FORCE_SYMBOL $1794 Init_Music_Buf
COMMENT_LINE $1797 in the next do sound call
COMMENT_LINE $1797 all regs are cleared automatically
COMMENT $1797 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1797
COMMENT $179B get active music
FORCE_SYMBOL $179B music_active
COMMENT $179D and init new notes
FORCE_SYMBOL $179D Init_Music_chk
FORCE_SYMBOL $17A0 DP_to_D0
COMMENT $17A3 ROM function that does the sound playing
FORCE_SYMBOL $17A3 Do_Sound
COMMENT_LINE $17A6 rts
COMMENT_LINE $17A6 ***************************************************************************
COMMENT_LINE $17A6 smallCalibration
COMMENT_LINE $17A6 RESET_INT
COMMENT_LINE $17A6 _ZERO_VECTOR_BEAM
COMMENT_LINE $17A6 rts
COMMENT_LINE $17A6 ***************************************************************************
COMMENT_LINE $17A6 rotation coords, actually X = -sin, Y = cos
COMMENT_LINE $17A6 BIOS also has a sin table, but that one is one 1/4 of a full wave
COMMENT_LINE $17A6 and it is called so weirdly (Rise/Run)
COMMENT_LINE $17A6 this is straight forward and I don't have to check in what quarter I am or whether I am cos or sin...
COMMENT_LINE $17A6 thank god we have the space :-)
COMMENT $17A6 draw to y, x
COMMENT $17A8 draw to y, x
COMMENT $17AA draw to y, x
COMMENT $17AC draw to y, x
COMMENT $17AE draw to y, x
COMMENT $17B0 draw to y, x
COMMENT $17B2 draw to y, x
COMMENT $17B4 draw to y, x
COMMENT $17B6 draw to y, x
COMMENT $17B8 draw to y, x
COMMENT $17BA draw to y, x
COMMENT $17BC draw to y, x
COMMENT $17BE draw to y, x
COMMENT $17C0 draw to y, x
COMMENT $17C2 draw to y, x
COMMENT $17C4 draw to y, x
COMMENT $17C6 draw to y, x
COMMENT $17C8 draw to y, x
COMMENT $17CA draw to y, x
COMMENT $17CC draw to y, x
COMMENT $17CE draw to y, x
COMMENT $17D0 draw to y, x
COMMENT $17D2 draw to y, x
COMMENT $17D4 draw to y, x
COMMENT $17D6 draw to y, x
COMMENT $17D8 draw to y, x
COMMENT $17DA draw to y, x
COMMENT $17DC draw to y, x
COMMENT $17DE draw to y, x
COMMENT $17E0 draw to y, x
COMMENT $17E2 draw to y, x
COMMENT $17E4 draw to y, x
COMMENT $17E6 draw to y, x
COMMENT $17E8 draw to y, x
COMMENT $17EA draw to y, x
COMMENT $17EC draw to y, x
COMMENT $17EE draw to y, x
COMMENT $17F0 draw to y, x
COMMENT $17F2 draw to y, x
COMMENT $17F4 draw to y, x
COMMENT $17F6 draw to y, x
COMMENT $17F8 draw to y, x
COMMENT $17FA draw to y, x
COMMENT $17FC draw to y, x
COMMENT $17FE draw to y, x
COMMENT $1800 draw to y, x
COMMENT $1802 draw to y, x
COMMENT $1804 draw to y, x
COMMENT $1806 draw to y, x
COMMENT $1808 draw to y, x
COMMENT $180A draw to y, x
COMMENT $180C draw to y, x
COMMENT $180E draw to y, x
COMMENT $1810 draw to y, x
COMMENT $1812 draw to y, x
COMMENT $1814 draw to y, x
COMMENT $1816 draw to y, x
COMMENT $1818 draw to y, x
COMMENT $181A draw to y, x
COMMENT $181C draw to y, x
COMMENT $181E draw to y, x
COMMENT_LINE $1820 ***************************************************************************
COMMENT_LINE $1820 twinklers = current_brightness+1 ;
COMMENT_LINE $1820 struct   Twinkle
COMMENT_LINE $1820 ds       TWINKEL_Y,1                       ;
COMMENT_LINE $1820 ds       TWINKEL_X,1                       ;
COMMENT_LINE $1820 ds       TWINKLE_ANGLE,1                      ;
COMMENT_LINE $1820 ds       TWINKLE_BRIGHTNESS,1                 ;
COMMENT_LINE $1820 ds       TWINKLE_LENGTH,1                 ; scale
COMMENT_LINE $1820 ds       TWINKLE_COUNTER,1                 ;
COMMENT_LINE $1820 end struct
COMMENT_LINE $1820 d0 needed
COMMENT_LINE $1820 in X twinkler
COMMENT_LINE $1820 moves to position, draws an arm, negates "arm" and moves back to pos
COMMENT_LINE $1820 that three times for a full three armed "twinkler"
COMMENT_LINE $1820 ***************************************************************************
COMMENT $1820 still twinkling?
FORCE_SYMBOL $1820 TWINKLE_COUNTER
COMMENT $1822 no - than we are waiting - jump to done
COMMENT $1824 remember counter (for easier acces to S, one might argue that also saves one cycle - hahaha, wasted by puls, push
FORCE_NO_SYMBOL $1826
FORCE_SYMBOL $182A coords_list
FORCE_SYMBOL $182E Reset0Ref
COMMENT $1831 scale to do positioning
FORCE_SYMBOL $1831 SCALE_FACTOR_GAME
COMMENT $1833 move to time 1 lo, this means scaling
FORCE_SYMBOL $1833 VIA_t1_cnt_lo
FORCE_SYMBOL $1835 TWINKEL_Y
FORCE_SYMBOL $1837 Moveto_d
COMMENT $183A brightness and scale is increased decreased with sin (from coordinates)
FORCE_SYMBOL $183A TWINKLE_BRIGHTNESS
COMMENT $183C only acces sin of coords
FORCE_NO_SYMBOL $183C
COMMENT $1844 scale is only on 16ths of sine value
COMMENT $1845 and set scale
COMMENT $1845 move to time 1 lo, this means scaling
FORCE_SYMBOL $1845 VIA_t1_cnt_lo
COMMENT $1847 only acces sin of coords
FORCE_NO_SYMBOL $1847
COMMENT_LINE $184B _INTENSITY_A ; and set intensity
FORCE_SYMBOL $184B Intensity_a
COMMENT_LINE $184E first "arm"
FORCE_NO_SYMBOL $184E
FORCE_SYMBOL $1852 Draw_Line_d
COMMENT $1855 drawLine_d add 2
COMMENT_LINE $1857 go back to center
FORCE_NO_SYMBOL $1857
FORCE_SYMBOL $185D Moveto_d
COMMENT_LINE $1860 second "arm"
FORCE_NO_SYMBOL $1860
COMMENT $1862 one third
FORCE_NO_SYMBOL $1862
FORCE_NO_SYMBOL $1864
FORCE_NO_SYMBOL $1868
FORCE_SYMBOL $186E Draw_Line_d
COMMENT $1871 drawLine_d add 2
COMMENT_LINE $1873 go back to center
FORCE_SYMBOL $1877 Moveto_d
COMMENT_LINE $187A third "arm"
FORCE_NO_SYMBOL $187A
COMMENT $187C one third
FORCE_NO_SYMBOL $187C
FORCE_NO_SYMBOL $187E
FORCE_NO_SYMBOL $1882
FORCE_SYMBOL $1886 Draw_Line_d
COMMENT $1889 drawLine_d add 2
FORCE_SYMBOL $188B TWINKLE_LENGTH
FORCE_SYMBOL $188D TWINKLE_BRIGHTNESS
COMMENT $188F counter decreased twice, since positions are word pointers
FORCE_SYMBOL $188F TWINKLE_COUNTER
FORCE_SYMBOL $1891 TWINKLE_COUNTER
COMMENT_LINE $1896 ***************************************************************************
COMMENT_LINE $1896 in x twinler struct
COMMENT $1896 should we init this twinkler?
FORCE_SYMBOL $1896 TWINKLE_COUNTER
COMMENT $1898 no than jump
COMMENT $189A wait for next init over?
FORCE_SYMBOL $189A TWINKLE_WAIT
COMMENT $189C no - jump
COMMENT_LINE $189E reset all values
FORCE_NO_SYMBOL $189E
FORCE_SYMBOL $18A1 TWINKEL_Y
COMMENT $18A3 120 to brightness and scale, pointer to "sine" data actually
FORCE_NO_SYMBOL $18A3
FORCE_SYMBOL $18A6 TWINKLE_ANGLE
FORCE_SYMBOL $18A8 TWINKLE_LENGTH
COMMENT $18AA one twinkle round is also 120, since 120 = 360°, that is one full circle of our "arms"
FORCE_SYMBOL $18AA TWINKLE_COUNTER
COMMENT $18AC find the position of our twinkle in the position table
FORCE_SYMBOL $18AC Random
COMMENT $18AF 0 - 31
FORCE_NO_SYMBOL $18AF
COMMENT $18B1 *2
FORCE_SYMBOL $18B2 twinklerpositions
FORCE_SYMBOL $18B7 TWINKEL_Y
FORCE_SYMBOL $18B9 TWINKEL_X
COMMENT $18BB when that twinkle is finished - how long to restart the next init? -> random
FORCE_SYMBOL $18BB Random
COMMENT $18BE values from 0 - 127
FORCE_SYMBOL $18BF TWINKLE_WAIT
COMMENT_LINE $18C1 ***************************************************************************
COMMENT_LINE $18C2 Possible "twinkle" positions, all on an edge of the "KARL QUAPPE" bitmap
COMMENT_LINE $1902 ***************************************************************************
COMMENT_LINE $1902 this routine draws the initial screen
COMMENT_LINE $1902 with information about the game
COMMENT_LINE $1902 nothing is expected and nothing is returned
COMMENT_LINE $1902 leaves dp pointing d0 expected
COMMENT $1902 since a frog moves - we init all frog vars
FORCE_SYMBOL $1902 init_new_frog_vars
FORCE_NO_SYMBOL $1905
FORCE_SYMBOL $1908 frog_pos
COMMENT $190B starting pos of frog on init screen
FORCE_NO_SYMBOL $190B
FORCE_SYMBOL $190E frog_pos_band
COMMENT $1911 do our twinklings first, call init for all of them,
FORCE_SYMBOL $1911 TWINKLE_COUNT
COMMENT $1913 counter for init
FORCE_SYMBOL $1913 tmp1
COMMENT $1916 RAM position of twinkle data
FORCE_SYMBOL $1916 twinklers
FORCE_NO_SYMBOL $1919
FORCE_SYMBOL $191C TWINKLE_COUNTER
FORCE_SYMBOL $191E TWINKLE_WAIT
COMMENT $1920 first twinklers are 0.5 seconds apart, (next will be random)
FORCE_NO_SYMBOL $1920
COMMENT $1922 next entry
FORCE_SYMBOL $1922 Twinkle
FORCE_SYMBOL $1924 tmp1
COMMENT $1927 loop thru all entries
COMMENT $1929 here the table for our different frog move data is loaded
FORCE_SYMBOL $1929 initMoveTable
COMMENT $192C select move data
FORCE_NO_SYMBOL $192C
COMMENT $192E if zero, than end of table reached - reset table pos
FORCE_SYMBOL $1930 initMoveTable_addresses
FORCE_SYMBOL $1933 initMoveTable
COMMENT $1936 and use the "first entry (this must be != 0)
FORCE_NO_SYMBOL $1936
COMMENT $1938 and save the froge movement pointer to its "used" location
FORCE_SYMBOL $1938 attractMovePointer
COMMENT $193B increase movement table for next "round"
FORCE_NO_SYMBOL $193B
FORCE_SYMBOL $193D initMoveTable
COMMENT $1940 switch to atttract mode, other wise frog movement routine does "in game" stuff as well (jump into a house or so)
FORCE_SYMBOL $1940 isAttractMode
FORCE_SYMBOL $1943 DP_to_D0
FORCE_SYMBOL $1946 RecalCounter
COMMENT $194C get button status once, since only
FORCE_SYMBOL $194C Read_Btns
COMMENT_LINE $194F differences are noticed
FORCE_SYMBOL $194F DP_to_C8
COMMENT $1952 startup intensity
FORCE_NO_SYMBOL $1952
COMMENT $1954 store it to current intensity
FORCE_SYMBOL $1954 init_current_intensity
COMMENT $1956 tmp2 = 0 dec , 1 = inc
FORCE_SYMBOL $1956 tmp2
COMMENT $1958 setup messages to display at the botom - start with message 0
FORCE_SYMBOL $1958 messages
FORCE_SYMBOL $195B tmp1
FORCE_SYMBOL $195D shutup
COMMENT $1960 is music still playing?
FORCE_SYMBOL $1960 Vec_Music_Flag
COMMENT $1963 than jump
COMMENT $1965 load adddress of music structure
FORCE_SYMBOL $1965 yankee
COMMENT $1968 and play the tune again...
COMMENT_LINE $1968 the next instructions initialize a new sound
COMMENT_LINE $1968 load #1
COMMENT_LINE $1968 set this as marker for music start
COMMENT_LINE $1968 CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $1968 INC      Vec_Music_Flag               ; to do it that way
FORCE_NO_SYMBOL $1968
FORCE_SYMBOL $196A Vec_Music_Flag
COMMENT $196D load a music structure (piece_of_music)
FORCE_SYMBOL $196D yankee
COMMENT $1970 and store it to my own music active pointer
FORCE_SYMBOL $1970 music_active
COMMENT_LINE $1973 next a do_my_sound and than do sound must be called
COMMENT $1973 well, the startup...
FORCE_SYMBOL $1973 musicOption
COMMENT $1978 (MAKRO) see above
COMMENT $1978 (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $1978
COMMENT $197C get active music
FORCE_SYMBOL $197C music_active
COMMENT $197E and init new notes
FORCE_SYMBOL $197E Init_Music_chk
COMMENT $1981 recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $1981 RecalCounter
FORCE_NO_SYMBOL $1984
FORCE_SYMBOL $1986 RecalCounter
COMMENT $1989 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $1989 Wait_Recal
COMMENT $198C just for assembler optimization...
COMMENT $198C ROM function that does the sound playing
FORCE_SYMBOL $198C Do_Sound
COMMENT $198F do twinklers first, for all of the do
FORCE_SYMBOL $198F twinklers
COMMENT $1994 check if new twinkle should start, and sets it up
FORCE_SYMBOL $1994 initTwinkler
COMMENT $1997 and do one twinkling step (or increase waiter)
FORCE_SYMBOL $1997 oneTwinkleStep
FORCE_SYMBOL $199C Twinkle
COMMENT $19A3 load "timer"
FORCE_SYMBOL $19A3 RecalCounter
COMMENT $19A6 50 = 1 second, when 50 Hz
FORCE_NO_SYMBOL $19A6
COMMENT $19AB if timer readed about 10 seconds (all messages were displyed ones)
FORCE_SYMBOL $19AB Vec_Music_Flag
COMMENT $19AE call the attract mode "game"
FORCE_SYMBOL $19AE doAttractMode
FORCE_SYMBOL $19B1 RecalCounter
COMMENT $19B7 and start anew from the beginning of init screen
FORCE_SYMBOL $19B7 init_screen
FORCE_SYMBOL $19BA calibration
COMMENT_LINE $19BD print bitmap
COMMENT $19BD load default text height & width
FORCE_NO_SYMBOL $19BD
COMMENT $19C0 poke it to ram location
FORCE_SYMBOL $19C0 Vec_Text_HW
COMMENT $19C3 Sets the intensity of the
FORCE_SYMBOL $19C3 Intensity_5F
FORCE_NO_SYMBOL $19C6
FORCE_SYMBOL $19C9 FroggerLogo_data
COMMENT $19CC print routine
FORCE_SYMBOL $19CC draw_raster_image
FORCE_SYMBOL $19CF calibration
COMMENT_LINE $19D2 print messages
COMMENT_LINE $19D2 the fade in and out (different directions of intensity increase/decrease are handled in the next
COMMENT_LINE $19D2 couple of lines
COMMENT $19D2 messages fade in and out
FORCE_SYMBOL $19D2 init_current_intensity
COMMENT $19D5 indicator to increase / decrease intensity (1= increase, 0 = decrease)
FORCE_SYMBOL $19D5 tmp2
COMMENT $19DB on intensity of 10 (decreasing) the message is changed to next
FORCE_NO_SYMBOL $19DB
COMMENT $19DD otherwise go on
COMMENT $19DF switch to intensity increase
FORCE_SYMBOL $19DF tmp2
COMMENT $19E2 message pointer + "1"
FORCE_SYMBOL $19E2 tmp1
FORCE_NO_SYMBOL $19E5
FORCE_SYMBOL $19E7 tmp1
FORCE_NO_SYMBOL $19EA
COMMENT $19EE store current message pointer to tmp1
FORCE_SYMBOL $19EE messages
FORCE_SYMBOL $19F1 tmp1
COMMENT $19F7 maximum message brighness
FORCE_NO_SYMBOL $19F7
COMMENT $19FB switch to brightness decrease
FORCE_SYMBOL $19FB tmp2
COMMENT $19FE set the intensity we got currently
FORCE_SYMBOL $19FE init_current_intensity
FORCE_SYMBOL $1A01 Intensity_a
FORCE_NO_SYMBOL $1A04
FORCE_SYMBOL $1A07 Vec_Text_Height
FORCE_NO_SYMBOL $1A0A
COMMENT $1A0C move to time 1 lo, this means scaling
FORCE_SYMBOL $1A0C VIA_t1_cnt_lo
FORCE_SYMBOL $1A0E tmp1
COMMENT $1A12 y = -114, x = -107 ; location of message
FORCE_NO_SYMBOL $1A12
FORCE_SYMBOL $1A15 sync_Print_Str_d
FORCE_NO_SYMBOL $1A18
COMMENT $1A1A reset to 0
FORCE_SYMBOL $1A1A VIA_cntl
FORCE_SYMBOL $1A1C calibration
FORCE_SYMBOL $1A1F oneFrog_move_init
COMMENT $1A22 get button status
FORCE_SYMBOL $1A22 Read_Btns
COMMENT $1A25 is a button pressed?
FORCE_NO_SYMBOL $1A25
COMMENT $1A27 no, than stay in init_screen_loop
FORCE_NO_SYMBOL $1A2B
FORCE_NO_SYMBOL $1A2F
COMMENT $1A31 starting a game is actualy only "exiting" the init screen
FORCE_NO_SYMBOL $1A33
FORCE_NO_SYMBOL $1A37
FORCE_NO_SYMBOL $1A3D
FORCE_SYMBOL $1A43 init_screen_loop_1
FORCE_SYMBOL $1A46 highscores_screen
FORCE_SYMBOL $1A49 init_screen_loop_1
FORCE_SYMBOL $1A4C tmp2
FORCE_SYMBOL $1A50 tmp1
FORCE_SYMBOL $1A55 RecalCounter
FORCE_SYMBOL $1A5A option_screen
FORCE_SYMBOL $1A5F RecalCounter
FORCE_SYMBOL $1A64 tmp2
FORCE_SYMBOL $1A68 tmp1
FORCE_SYMBOL $1A6B init_screen_loop_1
FORCE_SYMBOL $1A6E isAttractMode
FORCE_SYMBOL $1A71 Vec_Music_Flag
COMMENT_LINE $1A75 ***************************************************************************
COMMENT_LINE $1A75 check whether current game score (of a "game over" game)
COMMENT_LINE $1A75 is worthy of high score table
COMMENT_LINE $1A75 if so the highscore screen will be "called" in editor mode, and the player
COMMENT_LINE $1A75 can enter his 3 letters
FORCE_SYMBOL $1A75 gameModeOption
FORCE_NO_SYMBOL $1A78
COMMENT $1A7A Training = no HS
COMMENT $1A7C no - noHs
FORCE_SYMBOL $1A7C highScoreReached
COMMENT $1A7F Training = no HS
COMMENT_LINE $1A81 in 'highScorePlace' is our place and
COMMENT_LINE $1A81 in 'highScoreDone' is the hex value of our score
COMMENT_LINE $1A81 in 'highScoreLevel' is our current level (-1)
FORCE_SYMBOL $1A81 highScoreTable
FORCE_SYMBOL $1A84 gameModeOption
FORCE_SYMBOL $1A89 highScoreHardTable
COMMENT $1A8E last hs entry + 1
COMMENT $1A91 last hs entry
COMMENT $1A94 highscore place to compare with - from last to first
FORCE_NO_SYMBOL $1A94
COMMENT $1A96 from previous testings we now (if we achieved highscore - the place of the entry (sounds redundant...)
FORCE_SYMBOL $1A96 highScorePlace
COMMENT $1A99 if place was found - put the current values in there
COMMENT $1A9B otherwise we copy the score form one entry above to this entry, since the high score list "scrolls" down one entry
COMMENT $1A9C 10 (HighScoreEntry) = length of a highscore entry
COMMENT $1AA0 copy the selected data downwards
COMMENT $1AA2 and do next entry if our place was not reached
COMMENT_LINE $1AA4 convert score to ascii
COMMENT $1AA4 load score to D
FORCE_SYMBOL $1AA4 highScoreDone
COMMENT $1AA7 save X
COMMENT $1AA9 convert to ascii
FORCE_SYMBOL $1AA9 convertDToAscii
COMMENT $1AAE result is in conversion buffer
FORCE_SYMBOL $1AAE conversionBuffer
COMMENT $1AB1 copy conversion buffer ascii data
COMMENT $1AB3 to our current place in the highscore table
FORCE_NO_SYMBOL $1AB3
FORCE_NO_SYMBOL $1AB7
FORCE_NO_SYMBOL $1ABB
COMMENT $1ABD also copy the level we achieved
FORCE_SYMBOL $1ABD highScoreLevel
COMMENT $1AC0 plus one, since the levels are 0 based
FORCE_NO_SYMBOL $1AC1
COMMENT $1AC3 switch to high score editor mode
FORCE_SYMBOL $1AC3 highScoreEditMode
COMMENT $1AC6 and call the high score screen
FORCE_SYMBOL $1AC6 highscores_screen
COMMENT $1AC9 switch editor mode off
FORCE_SYMBOL $1AC9 highScoreEditMode
FORCE_SYMBOL $1ACC gameModeOption
FORCE_SYMBOL $1AD4 highScoreHardcoreBlock
FORCE_SYMBOL $1ADC highScoreCompetitionBlock
FORCE_SYMBOL $1ADF current_eprom_blocksize
FORCE_SYMBOL $1AE2 eeprom_save_highscore
COMMENT_LINE $1AE6 ***************************************************************************
COMMENT_LINE $1AE6 copy HS entry from x to y - without destroying register
COMMENT $1AE8 length of one entry
FORCE_SYMBOL $1AE8 HighScoreEntry
COMMENT_LINE $1AF3 rts
COMMENT_LINE $1AF3 ***************************************************************************
COMMENT $1AF3 set flag that we "play" in attract mode
FORCE_SYMBOL $1AF3 isAttractMode
COMMENT $1AF6 initialize game variables
FORCE_SYMBOL $1AF6 init_vars
COMMENT $1AF9 which attract level do we "play"
FORCE_SYMBOL $1AF9 attractCount
FORCE_SYMBOL $1AFC attractCount
COMMENT $1AFF times two since its a word pointer
COMMENT $1B00 leval data table
FORCE_SYMBOL $1B00 attractLevels
COMMENT $1B03 load calculated entry
COMMENT $1B05 if not 0 than we got a correct entry
COMMENT $1B07 attract rollover
FORCE_SYMBOL $1B07 attractCount
COMMENT $1B0C first byte indicates level number
COMMENT $1B0E store this as current level
FORCE_SYMBOL $1B0E game_level
COMMENT $1B11 store x as current attract level "movement" pointer, accessing "joystick" subroutine read this
FORCE_SYMBOL $1B11 attractMovePointer
COMMENT $1B14 and setup the blinking "press button"
FORCE_NO_SYMBOL $1B14
FORCE_SYMBOL $1B17 buttonBlinker
COMMENT $1B1A enter the main loop at the "attract" enter point, from here on it is a "normal" game
FORCE_SYMBOL $1B1A attractEnter
COMMENT $1B1D once the game finishes - clear attract mode,
FORCE_SYMBOL $1B1D isAttractMode
COMMENT $1B20 and go back to init screen
COMMENT_LINE $1B21 ***************************************************************************
COMMENT_LINE $1B21 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1B21 Most parts were written by:
COMMENT_LINE $1B21 2016 Thomas G. Sontowski:
COMMENT_LINE $1B21 based on Alex Herbert's ds2430 driver
COMMENT_LINE $1B21 if 32 byte save is enabled only a dirty "translation" of bigger data is done, much redundancy!
COMMENT_LINE $1B21 ***************************************************************************
COMMENT_LINE $1B21 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1B21 DS1W - Dallas Semiconductor 1-Wire Driver
COMMENT_LINE $1B21 Copyright (c) 2002 Alex Herbert
COMMENT_LINE $1B21 Memory Base Addresses
COMMENT_LINE $1B21 PIA Registers
COMMENT_LINE $1B21 Direct Page Macros
COMMENT_LINE $0000 1-Wire Timing constants
COMMENT_LINE $1B21 $032a = 810 cycles = 540us
COMMENT_LINE $1B21 $02d0 = 720 cycles = 480us
COMMENT_LINE $1B21 $78 = 120cycles = 80us
COMMENT_LINE $1B21 Note:
COMMENT_LINE $1B21 For reliability DS1W_RESETDUR and DS1W_TSLOTDUR are = above the
COMMENT_LINE $1B21 minimums specified by the datasheet. To improve performance, values
COMMENT_LINE $1B21 closer to the specified minimums may be used.
COMMENT_LINE $1B21 DS1W_RESETDUR minimum = 480us
COMMENT_LINE $1B21 DS1W_TSLOTDUR minimum = 60us
COMMENT_LINE $1B21 1-Wire ROM commands
COMMENT_LINE $1B21 Subroutines
COMMENT_LINE $1B21 ds1w_open
COMMENT_LINE $1B21 function:
COMMENT_LINE $1B21 Prepares Vectrex I/O hardware (6522) for 1-Wire communication.
COMMENT_LINE $1B21 on entry:
COMMENT_LINE $1B21 dp = $d0
COMMENT_LINE $1B21 on exit:
COMMENT_LINE $1B21 d  = undefined
FORCE_NO_SYMBOL $1B21
COMMENT $1B24 make sure PB7 is set, PB6 is cleared
FORCE_SYMBOL $1B24 CNTRL
COMMENT $1B26 Disable T1 output on PB7 (RAMP)
FORCE_SYMBOL $1B26 ACNTRL
COMMENT_LINE $1B29 ds1w_close
COMMENT_LINE $1B29 function:
COMMENT_LINE $1B29 Restores Vectrex I/O hardware (6522) defaults.
COMMENT_LINE $1B29 on entry:
COMMENT_LINE $1B29 dp = $d0
COMMENT_LINE $1B29 on exit:
COMMENT_LINE $1B29 b  = undefined
FORCE_NO_SYMBOL $1B29
COMMENT $1B2B Enable T1 output on PB7 (RAMP)
FORCE_SYMBOL $1B2B ACNTRL
COMMENT_LINE $1B2E ds1w_reset
COMMENT_LINE $1B2E function:
COMMENT_LINE $1B2E Reset 1-Wire device(s), and detect if device is present.
COMMENT_LINE $1B2E on entry:
COMMENT_LINE $1B2E dp = $d0
COMMENT_LINE $1B2E on exit:
COMMENT_LINE $1B2E a  = 0 if device is present, -1 if not.
COMMENT_LINE $1B2E b  = undefined
COMMENT_LINE $1B2E cc = z=1 and n=0 if device present,
COMMENT_LINE $1B2E z=0 and n=1 if device not present.
COMMENT $1B2E reset pulse duration
FORCE_SYMBOL $1B2E DS1W_RESETDUR
COMMENT $1B31 start timer
FORCE_SYMBOL $1B31 T1LOLC
COMMENT_LINE $1B33 generate reset pulse
FORCE_NO_SYMBOL $1B33
COMMENT $1B35 PB6 direction = output
FORCE_SYMBOL $1B35 DCNTRL
FORCE_NO_SYMBOL $1B37
FORCE_SYMBOL $1B39 IFLAG
COMMENT $1B3B wait for timer
FORCE_NO_SYMBOL $1B3D
COMMENT $1B3F PB6 direction = input
FORCE_SYMBOL $1B3F DCNTRL
COMMENT_LINE $1B41 check for presence pulse
COMMENT $1B41 test PB6
FORCE_SYMBOL $1B41 CNTRL
COMMENT $1B43 PB6 was low too early (emulator?)
COMMENT $1B45 presence pulse detect duration
FORCE_SYMBOL $1B45 DS1W_PRESDUR
COMMENT $1B48 start timer
FORCE_SYMBOL $1B48 T1LOLC
FORCE_NO_SYMBOL $1B4A
COMMENT $1B4C test PB6
FORCE_SYMBOL $1B4C CNTRL
COMMENT $1B50 timeout?
FORCE_SYMBOL $1B50 IFLAG
COMMENT $1B54 PB6 didn't go low (no device attached?)
FORCE_SYMBOL $1B56 IFLAG
COMMENT $1B58 wait for timer
FORCE_SYMBOL $1B5A CNTRL
COMMENT $1B5C PB6 stayed low too long (fault?)
COMMENT $1B5E time slot duration
FORCE_SYMBOL $1B5E DS1W_TSLOTDUR
COMMENT $1B60 load timer latch
FORCE_SYMBOL $1B60 T1LOLC
COMMENT $1B62 return "no error"
COMMENT $1B64 return "device not present"
COMMENT_LINE $1B67 ds1w_txbyte
COMMENT_LINE $1B67 function:
COMMENT_LINE $1B67 Transmit byte to 1-Wire device.
COMMENT_LINE $1B67 on entry:
COMMENT_LINE $1B67 a  = byte to send
COMMENT_LINE $1B67 dp = $d0
COMMENT_LINE $1B67 on exit:
COMMENT_LINE $1B67 d  = undefined
COMMENT $1B67 bits in byte
FORCE_NO_SYMBOL $1B67
COMMENT $1B69 put loop counter 'above' stack
COMMENT $1B6B shift data into carry
COMMENT $1B6E start timer
FORCE_SYMBOL $1B6E T1HOC
COMMENT_LINE $1B70 long pulse low  ~~\________/~~
FORCE_NO_SYMBOL $1B70
COMMENT $1B72 PB6 direction = output
FORCE_SYMBOL $1B72 DCNTRL
FORCE_NO_SYMBOL $1B74
FORCE_SYMBOL $1B76 IFLAG
COMMENT $1B78 wait for end of time slot
FORCE_NO_SYMBOL $1B7A
COMMENT $1B7C PB6 direction = input
FORCE_SYMBOL $1B7C DCNTRL
COMMENT $1B83 start timer
FORCE_SYMBOL $1B83 T1HOC
COMMENT_LINE $1B85 short pulse low  ~~\_/~~~~~~~~~
FORCE_NO_SYMBOL $1B85
COMMENT $1B87 PB6 direction = output
FORCE_SYMBOL $1B87 DCNTRL
FORCE_NO_SYMBOL $1B89
COMMENT $1B8B PB6 direction = input
FORCE_SYMBOL $1B8B DCNTRL
FORCE_NO_SYMBOL $1B8D
FORCE_SYMBOL $1B8F IFLAG
COMMENT $1B91 wait for end of time slot
COMMENT_LINE $1B98 ds1w_rxbyte
COMMENT_LINE $1B98 function:
COMMENT_LINE $1B98 Receive byte from 1-Wire device.
COMMENT_LINE $1B98 on entry:
COMMENT_LINE $1B98 dp = $d0
COMMENT_LINE $1B98 on exit:
COMMENT_LINE $1B98 a  = received byte
COMMENT_LINE $1B98 b  = undefined
COMMENT $1B98 bits in byte
FORCE_NO_SYMBOL $1B98
COMMENT $1B9A put loop counter 'above' stack
COMMENT $1B9C start timer
FORCE_SYMBOL $1B9C T1HOC
COMMENT_LINE $1B9E short pulse low  ~~\_xxxxxx~~~~
FORCE_NO_SYMBOL $1B9E
COMMENT $1BA0 PB6 direction = output
FORCE_SYMBOL $1BA0 DCNTRL
FORCE_NO_SYMBOL $1BA2
COMMENT $1BA4 PB6 direction = input
FORCE_SYMBOL $1BA4 DCNTRL
COMMENT_LINE $1BA6 read response
COMMENT $1BA6 timing
COMMENT $1BA7 read PB
FORCE_SYMBOL $1BA7 CNTRL
COMMENT $1BA9 shift PB6...
COMMENT $1BAA ...into carry...
COMMENT $1BAB ...and rotate into result byte
FORCE_NO_SYMBOL $1BAC
FORCE_SYMBOL $1BAE IFLAG
COMMENT $1BB0 wait for end of time slot
COMMENT_LINE $1BB7 this file is part of Karl Quappe, written by Malban in 2016
COMMENT_LINE $1BB7 2016 Thomas G. Sontowski:
COMMENT_LINE $1BB7 based on Alex Herbert's ds2430 driver
COMMENT_LINE $1BB7 DS2431 Commands
COMMENT_LINE $1BB7 DS2430_LOCKAR   equ     $5a     ; Lock Application Register
COMMENT_LINE $1BB7 DS2430_READSR   equ     $66     ; Read Status Register
COMMENT_LINE $1BB7 DS2430_WRITEAR  equ     $99     ; Write bytes to Application Register
COMMENT_LINE $1BB7 DS2430_READAR   equ     $c3     ; Read bytes from Application Register
COMMENT_LINE $1BB7 DS2430_VALKEY   equ     $a5     ; Validation byte for COPYSP and LOCKAR
COMMENT_LINE $1BB7 DS2431 Timings
COMMENT_LINE $1BB7 Subroutines
COMMENT_LINE $1BB7 ds2431_load
COMMENT_LINE $1BB7 function:
COMMENT_LINE $1BB7 load DS2431 EEPROM to RAM
COMMENT_LINE $1BB7 on entry:
COMMENT_LINE $1BB7 x = load address
COMMENT_LINE $1BB7 on exit:
COMMENT_LINE $1BB7 a = 0 if no error,
COMMENT_LINE $1BB7 non-zero if error
COMMENT $1BB7 number of bytes to save (loop counter)
FORCE_SYMBOL $1BB7 current_eprom_blocksize
COMMENT_LINE $1BBA lda     #EEPROM_STORESIZE ; number of bytes to save (loop counter)
COMMENT $1BBA stack used registers
COMMENT $1BC0 open 1-wire port
FORCE_SYMBOL $1BC0 ds1w_open
COMMENT $1BC3 reset device
FORCE_SYMBOL $1BC3 ds1w_reset
COMMENT $1BC6 exit if no device present
COMMENT $1BC8 no need to access rom, non-overdrive version
FORCE_SYMBOL $1BC8 DS1W_SKIPROM
COMMENT $1BCA send command
COMMENT $1BCC read memory
FORCE_SYMBOL $1BCC DS2431_READMEM
COMMENT $1BCE send command
FORCE_SYMBOL $1BD0 current_eprom_blockadr
COMMENT_LINE $1BD3 clra                    ; address of first byte to load
COMMENT $1BD3 send address
COMMENT $1BD5 address of first byte to load
COMMENT $1BD6 send address
COMMENT $1BD8 read byte from scratch pad
COMMENT $1BDA save to ram
COMMENT $1BDC decrement loop counter
FORCE_NO_SYMBOL $1BDC
COMMENT $1BDE until all bytes are read
COMMENT $1BE0 close port
FORCE_SYMBOL $1BE0 ds1w_close
COMMENT $1BE3 restore registers from stack and return
COMMENT_LINE $1BE5 ds2430_save
COMMENT_LINE $1BE5 function:
COMMENT_LINE $1BE5 save RAM to DS2430 EEPROM
COMMENT_LINE $1BE5 on entry:
COMMENT_LINE $1BE5 x = address of data to save
COMMENT_LINE $1BE5 on exit:
COMMENT_LINE $1BE5 a = 0 if no error,
COMMENT_LINE $1BE5 non-zero if error
COMMENT $1BE5 number of bytes to save (loop counter)
FORCE_SYMBOL $1BE5 current_eprom_blocksize
FORCE_SYMBOL $1BE8 current_eprom_blockadr
COMMENT_LINE $1BEB clrb
COMMENT $1BEB stack used registers
COMMENT $1BED open 1-wire port
FORCE_SYMBOL $1BED ds1w_open
COMMENT $1BF0 reset device
FORCE_SYMBOL $1BF0 ds1w_reset
COMMENT $1BF3 exit if no device present
COMMENT $1BF5 no need to access rom
FORCE_SYMBOL $1BF5 DS1W_SKIPROM
COMMENT $1BF7 send command
FORCE_SYMBOL $1BF7 ds1w_txbyte
COMMENT $1BFA write bytes to scratch pad
FORCE_SYMBOL $1BFA DS2431_WRITESP
COMMENT $1BFC send command
FORCE_SYMBOL $1BFC ds1w_txbyte
COMMENT $1BFF address
FORCE_NO_SYMBOL $1BFF
COMMENT $1C01 send address
FORCE_SYMBOL $1C01 ds1w_txbyte
FORCE_SYMBOL $1C05 ds1w_txbyte
COMMENT $1C08 get byte from ram
COMMENT $1C0A send byte
FORCE_SYMBOL $1C0A ds1w_txbyte
COMMENT $1C0D decrement loop counter
FORCE_NO_SYMBOL $1C0D
FORCE_NO_SYMBOL $1C0F
FORCE_NO_SYMBOL $1C11
COMMENT $1C13 until 8 bytes are sent
COMMENT $1C15 reset device
FORCE_SYMBOL $1C15 ds1w_reset
COMMENT $1C18 no need to access rom
FORCE_SYMBOL $1C18 DS1W_SKIPROM
COMMENT $1C1A send command
FORCE_SYMBOL $1C1A ds1w_txbyte
FORCE_SYMBOL $1C1D DS2431_READSP
COMMENT $1C1F send command
FORCE_SYMBOL $1C1F ds1w_txbyte
COMMENT_LINE $1C22 read the authorization code
COMMENT $1C22 read byte from scratch pad
FORCE_SYMBOL $1C22 ds1w_rxbyte
COMMENT $1C25 TA1
COMMENT $1C27 read byte from scratch pad
FORCE_SYMBOL $1C27 ds1w_rxbyte
COMMENT $1C2A TA2
COMMENT $1C2C read byte from scratch pad
FORCE_SYMBOL $1C2C ds1w_rxbyte
COMMENT $1C2F E/S
COMMENT $1C31 reset device
FORCE_SYMBOL $1C31 ds1w_reset
COMMENT $1C34 no need to access rom
FORCE_SYMBOL $1C34 DS1W_SKIPROM
COMMENT $1C36 send command
FORCE_SYMBOL $1C36 ds1w_txbyte
COMMENT $1C39 copy scratch pad to eeprom
FORCE_SYMBOL $1C39 DS2431_COPYSP
COMMENT $1C3B send command
FORCE_SYMBOL $1C3B ds1w_txbyte
COMMENT $1C40 send validation
FORCE_SYMBOL $1C40 ds1w_txbyte
COMMENT $1C45 send validation
FORCE_SYMBOL $1C45 ds1w_txbyte
COMMENT $1C4A send validation
FORCE_SYMBOL $1C4A ds1w_txbyte
COMMENT $1C4D eeprom write (scratch pad copy) duration
FORCE_SYMBOL $1C4D DS2431_COPYDUR
COMMENT $1C50 start timer
FORCE_SYMBOL $1C50 T1LOLC
FORCE_NO_SYMBOL $1C52
FORCE_SYMBOL $1C54 IFLAG
COMMENT $1C56 wait for timer
FORCE_NO_SYMBOL $1C58
FORCE_NO_SYMBOL $1C5C
FORCE_NO_SYMBOL $1C5E
FORCE_NO_SYMBOL $1C60
COMMENT $1C64 close port
FORCE_SYMBOL $1C64 ds1w_close
COMMENT $1C67 restore registers from stack and return
COMMENT_LINE $1C69 ds2431_verify
COMMENT_LINE $1C69 function:
COMMENT_LINE $1C69 compare DS2431 EEPROM to RAM
COMMENT_LINE $1C69 on entry:
COMMENT_LINE $1C69 x = data address
COMMENT_LINE $1C69 on exit:
COMMENT_LINE $1C69 a = 0 if same,
COMMENT_LINE $1C69 non-zero if different
COMMENT $1C69 number of bytes to save (loop counter)
FORCE_SYMBOL $1C69 current_eprom_blocksize
COMMENT_LINE $1C6C lda     #EEPROM_STORESIZE ; number of bytes to verify (loop counter)
COMMENT $1C6C stack used registers
COMMENT $1C6E open 1-wire port
FORCE_SYMBOL $1C6E ds1w_open
COMMENT $1C71 reset device
FORCE_SYMBOL $1C71 ds1w_reset
COMMENT $1C74 exit if no device present
COMMENT $1C76 no need to access rom
FORCE_SYMBOL $1C76 DS1W_SKIPROM
COMMENT $1C78 send command
FORCE_SYMBOL $1C78 ds1w_txbyte
COMMENT $1C7B copy eeprom to scratch pad
FORCE_SYMBOL $1C7B DS2431_READMEM
COMMENT $1C7D send command
FORCE_SYMBOL $1C7D ds1w_txbyte
COMMENT_LINE $1C80 clra                    ; address of first byte to verify
FORCE_SYMBOL $1C80 current_eprom_blockadr
COMMENT $1C83 send address
FORCE_SYMBOL $1C83 ds1w_txbyte
COMMENT $1C86 address of first byte to verify
COMMENT $1C87 send address
FORCE_SYMBOL $1C87 ds1w_txbyte
COMMENT $1C8A read byte from scratch pad
FORCE_SYMBOL $1C8A ds1w_rxbyte
COMMENT $1C8D compare to ram
COMMENT $1C8F exit if not same
COMMENT $1C91 decrement loop counter
FORCE_NO_SYMBOL $1C91
COMMENT $1C93 until all bytes are read
COMMENT $1C95 close port
FORCE_SYMBOL $1C95 ds1w_close
COMMENT $1C98 restore registers from stack and return
COMMENT_LINE $1C9A direct  -1
COMMENT_LINE $1C9A ***************************************************************************
COMMENT_LINE $1C9A ;;;;;;;;;;;;
COMMENT_LINE $1C9A ;;;;;;;;;;;;
FORCE_SYMBOL $1C9A copyDefaults
FORCE_SYMBOL $1C9D ignoreDs2431
FORCE_SYMBOL $1CA2 ds2431Present
FORCE_SYMBOL $1CAA current_eprom_blocksize
FORCE_SYMBOL $1CAD optionsBlock
FORCE_SYMBOL $1CB5 current_eprom_blocksize
FORCE_SYMBOL $1CB8 highScoreCompetitionBlock
FORCE_SYMBOL $1CC0 current_eprom_blocksize
FORCE_SYMBOL $1CC3 highScoreHardcoreBlock
FORCE_SYMBOL $1CC8 v4ecartflags
FORCE_SYMBOL $1CCD store_score
FORCE_SYMBOL $1CD1 copyDefaults
COMMENT_LINE $1CD4 ***************************************************************************
FORCE_SYMBOL $1CD4 ignoreDs2431
FORCE_SYMBOL $1CD9 ds2431Present
COMMENT $1CDC open 1-wire port
FORCE_SYMBOL $1CDC ds1w_open
COMMENT $1CDF reset device
FORCE_SYMBOL $1CDF ds1w_reset
COMMENT_LINE $1CE2 tsta
FORCE_SYMBOL $1CE4 ds2431Present
COMMENT $1CE7 close port
FORCE_SYMBOL $1CE7 ds1w_close
COMMENT_LINE $1CEA ***************************************************************************
COMMENT_LINE $1CEA current_eprom_blocksize = blocksize
COMMENT_LINE $1CEA current_eprom_blockadr = block address in eeprom
COMMENT_LINE $1CEA x = address to save
FORCE_SYMBOL $1CEE newEepromRAMStart
FORCE_NO_SYMBOL $1CF1
FORCE_SYMBOL $1CF5 current_eprom_blocksize
FORCE_SYMBOL $1CF9 ignoreDs2431
FORCE_SYMBOL $1CFE v4ecartflags
FORCE_SYMBOL $1D03 store_score
COMMENT $1D08 <<8)+(EEPROM_STORESIZE-1) ;
FORCE_SYMBOL $1D08 EEPROM_CHECKSUM
COMMENT $1D0A create checksum byte
FORCE_NO_SYMBOL $1D0F
COMMENT $1D13 compare ram to eeprom
COMMENT $1D17 if different, then update eeprom
COMMENT_LINE $1D1C ***************************************************************************
COMMENT_LINE $1D1C current_eprom_blocksize = blocksize
COMMENT_LINE $1D1C current_eprom_blockadr = block address in eeprom
COMMENT_LINE $1D1C x = address to load To
FORCE_SYMBOL $1D1C eeprom_tmp
FORCE_SYMBOL $1D1F newEepromRAMStart
FORCE_SYMBOL $1D22 ignoreDs2431
FORCE_SYMBOL $1D27 v4ecartflags
COMMENT_LINE $1D2C COPY_VECROM_TO_RAM
COMMENT $1D2C Source copy the vec4ever switching function into place
FORCE_SYMBOL $1D2C vec4SaveBuffer
COMMENT $1D2F destination
FORCE_SYMBOL $1D2F v4e_saveBlockStart
FORCE_SYMBOL $1D34 Move_Mem_a
COMMENT_LINE $1D37 rts
COMMENT $1D37 load 32 byte eeprom to ram
FORCE_SYMBOL $1D37 ds2431_load
FORCE_SYMBOL $1D3A current_eprom_blocksize
COMMENT $1D3E sum the bytes
COMMENT $1D43 equal to checksum?
FORCE_SYMBOL $1D43 EEPROM_CHECKSUM
COMMENT $1D45 if not, then format the eeprom
FORCE_SYMBOL $1D49 current_eprom_blocksize
FORCE_NO_SYMBOL $1D4C
FORCE_SYMBOL $1D50 eeprom_tmp
COMMENT $1D55 otherwise, return
COMMENT_LINE $1D56 struct   HighScoreEntry
COMMENT_LINE $1D56 ds       NAME,3                       ;
COMMENT_LINE $1D56 ds       LEVEL,1                      ;
COMMENT_LINE $1D56 ds       ASCIISCORE,6                 ;
COMMENT_LINE $1D56 end      struct
COMMENT_LINE $1D56 ***************************************************************************
COMMENT_LINE $1D56 from address in y
COMMENT_LINE $1D56 to address always new eeprom
COMMENT_LINE $1D56 d + x trashed,
COMMENT_LINE $1D56 y at the end of the copying
FORCE_NO_SYMBOL $1D56
FORCE_SYMBOL $1D58 levelDoneTemp
COMMENT_LINE $1D5B handle name 3 chars
FORCE_SYMBOL $1D5B newEepromRAMStart
COMMENT_LINE $1D60 handle level 5 bits
COMMENT $1D60 load level
COMMENT $1D62 store level
COMMENT_LINE $1D64 handle score
COMMENT $1D68 put current score to conversion buffer
FORCE_SYMBOL $1D68 toConversion5
COMMENT $1D6B current score as "number" in D
FORCE_SYMBOL $1D6B convertAsciiToD
FORCE_NO_SYMBOL $1D70
COMMENT $1D72 store score
FORCE_SYMBOL $1D74 levelDoneTemp
COMMENT_LINE $1D79 conversion done
COMMENT_LINE $1D79 bytes in newEepromRAMStart
COMMENT_LINE $1D79 = 3 + 5*5 = 28
COMMENT_LINE $1D7A ***************************************************************************
COMMENT_LINE $1D7A x address to copy to
FORCE_NO_SYMBOL $1D7A
FORCE_SYMBOL $1D7C levelDoneTemp
COMMENT_LINE $1D7F handle name 3 chars
COMMENT_LINE $1D81 ldy      #eepromRAMStart
FORCE_SYMBOL $1D81 newEepromRAMStart
COMMENT_LINE $1D86 handle level 5 bits
COMMENT $1D86 load level
COMMENT $1D88 store level
COMMENT_LINE $1D8A handle score
COMMENT $1D8A get 16bit score
FORCE_SYMBOL $1D8E convertDToAscii
FORCE_SYMBOL $1D93 conversionBuffer
COMMENT $1D96 copy 6 ascii bytes
FORCE_SYMBOL $1DA2 levelDoneTemp
COMMENT_LINE $1DA8 ***************************************************************************
COMMENT_LINE $1DA8 input : y = output string pointer
COMMENT_LINE $1DA8 x = input pointer to uint16
COMMENT $1DA8 byte 0: 1aaaaabb
FORCE_NO_SYMBOL $1DA8
FORCE_NO_SYMBOL $1DAC
COMMENT $1DB4 char 0
COMMENT $1DB6 byte 0: 1aaaaabb
COMMENT $1DB8 byte 1: bbbccccc
FORCE_NO_SYMBOL $1DB8
FORCE_NO_SYMBOL $1DC0
COMMENT $1DC8 char 1
COMMENT $1DCA byte 1: bbbccccc
FORCE_NO_SYMBOL $1DCC
COMMENT $1DD4 char 2
COMMENT_LINE $1DD7 ***************************************************************************
COMMENT_LINE $1DD7 routines from thomas encode/decode
COMMENT_LINE $1DD7 input : y = string pointer
COMMENT_LINE $1DD7 x = output pointer to uint16
COMMENT $1DD7 char 0
COMMENT $1DE1 the flag bit
FORCE_NO_SYMBOL $1DE1
COMMENT $1DE3 byte 0: 1aaaaa00
FORCE_NO_SYMBOL $1DE3
COMMENT $1DE5 char 1
COMMENT $1DF4 byte 0: 1aaaaabb
FORCE_NO_SYMBOL $1DF4
COMMENT $1DF8 byte 1: bbb00000
FORCE_NO_SYMBOL $1DF8
COMMENT $1DFA char 2
COMMENT $1E02 byte 1: bbbccccc
FORCE_NO_SYMBOL $1E02
COMMENT_LINE $1E07 ***************************************************************************
COMMENT_LINE $1E07 ;;;;;;;;;;;;
COMMENT_LINE $1E07 ***************************************************************************
COMMENT_LINE $1E07 ***************************************************************************
COMMENT_LINE $1E07 Theoretically this can also be called from a "MOVE" - but I was actually to lazy to do and test that
COMMENT_LINE $1E07 should bring a few cycles - between 12 - 170! (tested ???)
COMMENT_LINE $1E07 but some sounds in music were off - havent examined it - wasn't worth the trouble!
COMMENT_LINE $1E07 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $1E07 in 2016
COMMENT_LINE $1E07 all stuff contained here is public domain
COMMENT_LINE $1E07 wait_recal
COMMENT_LINE $1E07 original vectrex routine were written by Richard Chadd
COMMENT_LINE $1E07 (optimized version!)
COMMENT_LINE $1E07 regs used by below implementation
COMMENT_LINE $1E07 U and D
COMMENT_LINE $1E07 X is also used, but can be spared - see below comments
COMMENT_LINE $1E07 only channel 3 is implemented
COMMENT_LINE $1E07 ;;;;;;;;;;;;;;;
COMMENT_LINE $1E07 ;;;;;;;;;;;;;;;
COMMENT_LINE $1E07 set volume off channel 3
COMMENT_LINE $1E07 set reg1sf0
COMMENT_LINE $1E07 Set volume
COMMENT $1E07 reset sfx
FORCE_NO_SYMBOL $1E07
FORCE_SYMBOL $1E0D sfx_pointer_3
FORCE_SYMBOL $1E10 sfx_status_3
FORCE_SYMBOL $1E13 currentSFX
COMMENT $1E17 check if sfx to play
FORCE_SYMBOL $1E17 sfx_status_3
COMMENT $1E1C get current frame pointer
FORCE_SYMBOL $1E1C sfx_pointer_3
COMMENT $1E21 check first flag byte D0
FORCE_NO_SYMBOL $1E21
COMMENT $1E23 no match - continue to process frame
FORCE_NO_SYMBOL $1E25
COMMENT $1E27 check second flag byte 20
FORCE_NO_SYMBOL $1E27
COMMENT $1E29 match - end of effect found so stop playing
COMMENT $1E2B if bit 5 of B is set
FORCE_NO_SYMBOL $1E2B
COMMENT $1E2D skip as no tone freq data
COMMENT $1E2F alternative to destroying d load any 2 byte reg,
COMMENT $1E31 here I destroy d
COMMENT_LINE $1E34 or if x mus be preserved
COMMENT_LINE $1E34 ldd      ,u++ ; alternative to destroying d load any 2 byte reg,
COMMENT_LINE $1E34 std      SHADOW_BASE+04 ; here I destroy d
COMMENT_LINE $1E34 ldb -3,u ; and load b anew - one instruction to many,
COMMENT $1E34 if bit 6 of B is only set
FORCE_NO_SYMBOL $1E34
COMMENT $1E36 skip as no noise freq data
COMMENT $1E38 get next data byte and copy to noise freq reg
COMMENT $1E3A set tone freq
COMMENT $1E3F get volume from bits 0-3
FORCE_NO_SYMBOL $1E3F
COMMENT $1E41 set tone freq
COMMENT $1E44 in the following reg 7 will be altered - load once
COMMENT $1E47 if bit 4 of B is set disable the tone
FORCE_NO_SYMBOL $1E47
FORCE_NO_SYMBOL $1E4B
COMMENT $1E4D if bit7 of B is set disable noise
FORCE_NO_SYMBOL $1E4D
FORCE_NO_SYMBOL $1E51
COMMENT $1E53 set tone freq
COMMENT $1E56 update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E56 sfx_pointer_3
FORCE_NO_SYMBOL $1E5A
COMMENT $1E5C if bit7 of B is set disable noise
FORCE_NO_SYMBOL $1E5C
FORCE_NO_SYMBOL $1E60
COMMENT $1E62 set tone freq
COMMENT $1E65 update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E65 sfx_pointer_3
FORCE_NO_SYMBOL $1E69
COMMENT $1E6B set tone freq
COMMENT $1E6E update frame pointer to next flag byte in Y
FORCE_SYMBOL $1E6E sfx_pointer_3
COMMENT_LINE $1E72 ***************************************************************************
COMMENT_LINE $1E72 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $1E72 in 2016
COMMENT_LINE $1E72 all stuff contained here is public domain
COMMENT_LINE $1E72 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1E72 this file contains subroutines declared as 'intermissions', like          ;
COMMENT_LINE $1E72 game over, level done, new life...                                        ;
COMMENT_LINE $1E72 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $1E72 death intermission
COMMENT $1E7A gimmick is always switched of with a death!
FORCE_SYMBOL $1E7A gimmickActive
COMMENT_LINE $1E7D finish last move
COMMENT $1E7D is an "old" jump still ongoing?
FORCE_SYMBOL $1E7D froggerInJump
FORCE_SYMBOL $1E82 current_frog_heading
COMMENT $1E84 than the last left?
FORCE_SYMBOL $1E84 HEADING_LEFT
COMMENT $1E88 than the last right
FORCE_SYMBOL $1E88 HEADING_RIGHT
COMMENT $1E8C than the last up
FORCE_SYMBOL $1E8C HEADING_UP
COMMENT $1E90 than the last down?
FORCE_SYMBOL $1E90 HEADING_DOWN
COMMENT $1E96 load old pos to B
FORCE_SYMBOL $1E96 frog_x
COMMENT $1E98 decrease position with speed faktor
COMMENT $1E9A and store new position
FORCE_SYMBOL $1E9A frog_x
COMMENT $1E9E load old pos to B
FORCE_SYMBOL $1E9E frog_x
COMMENT $1EA0 decrease position with speed faktor
COMMENT $1EA2 and store new position
FORCE_SYMBOL $1EA2 frog_x
COMMENT $1EA6 load old pos to B
FORCE_SYMBOL $1EA6 frog_y
COMMENT $1EA8 decrease position with speed faktor
COMMENT $1EAA and store new position
FORCE_SYMBOL $1EAA frog_y
COMMENT $1EAE load old pos to B
FORCE_SYMBOL $1EAE frog_y
COMMENT $1EB0 decrease position with speed faktor
COMMENT $1EB2 and store new position
FORCE_SYMBOL $1EB2 frog_y
COMMENT $1EB4 any value != 0 will do
FORCE_NO_SYMBOL $1EB4
COMMENT $1EB6 != 0
FORCE_SYMBOL $1EB6 frogDeath
COMMENT $1EB9 != 0
FORCE_SYMBOL $1EB9 intermissionActive
FORCE_SYMBOL $1EBB kind_of_death
FORCE_SYMBOL $1EBD DIE_CAR
FORCE_SYMBOL $1EC2 Karl_DeathLane_Sound
FORCE_SYMBOL $1EC5 play_sfx_x
FORCE_SYMBOL $1ECA DIE_TIME
FORCE_SYMBOL $1ECF Karl_DeathWater_Sound
FORCE_SYMBOL $1ED2 play_sfx_x
COMMENT_LINE $1ED5 prepare first animation step
FORCE_SYMBOL $1ED5 frogDeathObject_0
COMMENT $1ED8 load old pos to B
FORCE_SYMBOL $1ED8 frog_pos
COMMENT $1EDA korrekt the old offset y
FORCE_SYMBOL $1EDA current_frog_offset
COMMENT $1EDC korrekt the old offset x
COMMENT $1EDE y offset
FORCE_NO_SYMBOL $1EDE
COMMENT $1EE0 x offset, of current death animation object
FORCE_NO_SYMBOL $1EE0
COMMENT $1EE2 store it back
FORCE_SYMBOL $1EE2 frog_pos
COMMENT $1EE4 load the current offset
FORCE_NO_SYMBOL $1EE4
COMMENT $1EE6 and remember it
FORCE_SYMBOL $1EE6 current_frog_offset
COMMENT $1EE8 animation delay counter
FORCE_NO_SYMBOL $1EE8
COMMENT $1EEA frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1EEA froggerInJump
FORCE_SYMBOL $1EED froggerAnimPointer
FORCE_NO_SYMBOL $1EF0
FORCE_SYMBOL $1EF2 frog_pic
FORCE_NO_SYMBOL $1EF4
FORCE_SYMBOL $1EF8 skipCount_now
FORCE_SYMBOL $1EFB do_csa_sound_startup
FORCE_SYMBOL $1EFE currentMusic
COMMENT_LINE $1F03 initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $1F03 first jumper of ym decoder
FORCE_SYMBOL $1F03 STREAM_PART_1
FORCE_SYMBOL $1F06 inMovePointer
FORCE_SYMBOL $1F09 skipCount
FORCE_SYMBOL $1F0C skipCount_now
COMMENT_LINE $1F0F ;;;; DEATH MESSAGE start
FORCE_NO_SYMBOL $1F0F
COMMENT $1F11 move to time 1 lo, this means scaling
FORCE_SYMBOL $1F11 VIA_t1_cnt_lo
FORCE_SYMBOL $1F16 Death_BOX
FORCE_SYMBOL $1F19 drawBox
COMMENT_LINE $1F1C BOX END
FORCE_NO_SYMBOL $1F1C
FORCE_SYMBOL $1F1F Vec_Text_Height
FORCE_NO_SYMBOL $1F22
COMMENT $1F24 move to time 1 lo, this means scaling
FORCE_SYMBOL $1F24 VIA_t1_cnt_lo
FORCE_SYMBOL $1F26 kind_of_death
FORCE_SYMBOL $1F29 cause_strings
FORCE_NO_SYMBOL $1F2E
FORCE_SYMBOL $1F31 sync_Print_Str_d
COMMENT $1F34 Blank low, zero high?
FORCE_NO_SYMBOL $1F34
FORCE_SYMBOL $1F36 VIA_cntl
COMMENT_LINE $1F38 ;;;; DEATH MESSAGE END
COMMENT_LINE $1F38 here display frog death anim
COMMENT_LINE $1F38 *** OUTPUT Frog DEATH
COMMENT $1F38 set game scaling
FORCE_SYMBOL $1F38 SCALE_FACTOR_GAME
COMMENT $1F3A move to time 1 lo, this means scaling
FORCE_SYMBOL $1F3A VIA_t1_cnt_lo
COMMENT $1F3C load current frog position to D
FORCE_SYMBOL $1F3C frog_pos
COMMENT_LINE $1F3F following passage is a move_to_d derivat
COMMENT $1F3F Store Y in D/A register
FORCE_SYMBOL $1F3F VIA_port_a
COMMENT $1F41 Blank low, zero high?
FORCE_NO_SYMBOL $1F41
FORCE_SYMBOL $1F43 VIA_cntl
COMMENT $1F46 Enable mux
FORCE_SYMBOL $1F46 VIA_port_b
COMMENT $1F48 Disable mux
FORCE_SYMBOL $1F48 VIA_port_b
COMMENT $1F4A Store X in D/A register
FORCE_SYMBOL $1F4A VIA_port_a
COMMENT $1F4C enable timer
FORCE_SYMBOL $1F4C VIA_t1_cnt_hi
COMMENT $1F4E load current frog sprite
FORCE_SYMBOL $1F4E frog_pic
FORCE_SYMBOL $1F51 move_wait_draw_vlc_unloop
FORCE_NO_SYMBOL $1F54
COMMENT $1F57 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $1F57 VIA_aux_cntl
COMMENT $1F59 /BLANK low and /ZERO low
FORCE_SYMBOL $1F59 VIA_cntl
COMMENT_LINE $1F5B *** OUT Frog Death done
COMMENT_LINE $1F5B handle animation
COMMENT $1F5B frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1F5B froggerInJump
FORCE_SYMBOL $1F60 froggerAnimPointer
FORCE_NO_SYMBOL $1F63
COMMENT $1F67 next anim pointer
FORCE_NO_SYMBOL $1F67
COMMENT $1F69 load old pos to D
FORCE_SYMBOL $1F69 frog_y
COMMENT $1F6C load old pos to B
FORCE_SYMBOL $1F6C frog_x
COMMENT $1F6F korrekt the old offset y
FORCE_SYMBOL $1F6F current_frog_offset
COMMENT $1F72 korrekt the old offset x
COMMENT $1F75 y offset
FORCE_NO_SYMBOL $1F75
COMMENT $1F77 x offset, of current death animation object
FORCE_NO_SYMBOL $1F77
COMMENT $1F79 store it back
FORCE_SYMBOL $1F79 frog_pos
COMMENT $1F7C load the current offset
FORCE_NO_SYMBOL $1F7C
COMMENT $1F7E and remember it
FORCE_SYMBOL $1F7E current_frog_offset
COMMENT $1F81 animation delay counter
FORCE_NO_SYMBOL $1F81
COMMENT $1F83 frogger in jump gets reusead as death animation counter
FORCE_SYMBOL $1F83 froggerInJump
FORCE_SYMBOL $1F86 froggerAnimPointer
FORCE_NO_SYMBOL $1F89
FORCE_SYMBOL $1F8B frog_pic
COMMENT_LINE $1F8E here display frog death anim done
COMMENT $1F8E draw_objects, same as on timer countdown
FORCE_SYMBOL $1F8E entry_timer_count_down
FORCE_SYMBOL $1F91 isAttractMode
FORCE_SYMBOL $1F96 displayButton
COMMENT $1F99 and loop until when not zero yet
FORCE_SYMBOL $1F99 death_screen_loop1
FORCE_SYMBOL $1F9C DP_to_C8
COMMENT $1F9F != 0
FORCE_SYMBOL $1F9F frogDeath
COMMENT $1FA2 != 0
FORCE_SYMBOL $1FA2 intermissionActive
COMMENT $1FA4 no bonus collected for this frog
FORCE_SYMBOL $1FA4 frog_bonus
COMMENT_LINE $1FA6 correct girl carried
COMMENT $1FA6 what's the girls status?
FORCE_SYMBOL $1FA6 girl_status
COMMENT $1FA8 is it displayed
FORCE_SYMBOL $1FA8 IS_CARRIED
COMMENT $1FAC is displayed
FORCE_SYMBOL $1FAC girl_status
COMMENT $1FAE is waiting
FORCE_SYMBOL $1FAE girl_status
COMMENT $1FB0 initiate the round counter
FORCE_SYMBOL $1FB0 girl_round_counter_reset
COMMENT $1FB2 store it
FORCE_SYMBOL $1FB2 girl_round_counter
COMMENT $1FB4 no highscore = default
FORCE_SYMBOL $1FB4 highScoreReached
FORCE_SYMBOL $1FB7 no_frogs
FORCE_SYMBOL $1FB9 no_frogs2
FORCE_SYMBOL $1FBB isAttractMode
FORCE_SYMBOL $1FC2 no_frogs
COMMENT_LINE $1FC8 check if death is game over
COMMENT_LINE $1FC8 check if score is highscore relevant
FORCE_SYMBOL $1FC8 gameModeOption
FORCE_NO_SYMBOL $1FCB
COMMENT $1FCD Training = no HS
COMMENT $1FD1 default 1 place!
FORCE_SYMBOL $1FD1 highScorePlace
COMMENT_LINE $1FD4 lazy - build
FORCE_SYMBOL $1FD4 score_digit_5
COMMENT $1FD7 put current score to conversion buffer
FORCE_SYMBOL $1FD7 toConversion5
FORCE_SYMBOL $1FDA scrollOneRight
COMMENT $1FDD put current score to conversion buffer
FORCE_SYMBOL $1FDD addConversion0
COMMENT $1FE0 current score as "number" in D
FORCE_SYMBOL $1FE0 convertAsciiToD
COMMENT $1FE3 remember it
COMMENT $1FE5 if player reached a "saveable" score of 30000 than level edit mode is switched on!
FORCE_NO_SYMBOL $1FE5
FORCE_NO_SYMBOL $1FEB
FORCE_SYMBOL $1FED levelEditAllowed
FORCE_NO_SYMBOL $1FF0
COMMENT_LINE $1FF2 load top score
FORCE_SYMBOL $1FF5 gameModeOption
COMMENT $1FFF put score to conversion buffer
FORCE_SYMBOL $1FFF toConversion5
COMMENT $2002 score as "number" in D
FORCE_SYMBOL $2002 convertAsciiToD
FORCE_NO_SYMBOL $2005
FORCE_SYMBOL $200A highScorePlace
FORCE_NO_SYMBOL $200D
COMMENT $200F 2. place high score 5 ascii
FORCE_SYMBOL $200F HighScoreEntry
COMMENT $2011 put score to conversion buffer
FORCE_SYMBOL $2011 toConversion5
COMMENT $2014 score as "number" in D
FORCE_SYMBOL $2014 convertAsciiToD
FORCE_NO_SYMBOL $2017
FORCE_SYMBOL $201C highScorePlace
FORCE_NO_SYMBOL $201F
COMMENT $2021 3. place high score 5 ascii
COMMENT $2024 put score to conversion buffer
FORCE_SYMBOL $2024 toConversion5
COMMENT $2027 score as "number" in D
FORCE_SYMBOL $2027 convertAsciiToD
FORCE_NO_SYMBOL $202A
FORCE_SYMBOL $202F highScorePlace
FORCE_NO_SYMBOL $2032
COMMENT $2034 4. place high score 5 ascii
COMMENT $2037 put score to conversion buffer
FORCE_SYMBOL $2037 toConversion5
COMMENT $203A score as "number" in D
FORCE_SYMBOL $203A convertAsciiToD
FORCE_NO_SYMBOL $203D
FORCE_SYMBOL $2042 highScorePlace
FORCE_NO_SYMBOL $2045
COMMENT $2047 5. place high score 5 ascii
COMMENT $204A put score to conversion buffer
FORCE_SYMBOL $204A toConversion5
COMMENT $204D score as "number" in D
FORCE_SYMBOL $204D convertAsciiToD
FORCE_NO_SYMBOL $2050
COMMENT_LINE $2055 no highscore found
FORCE_NO_SYMBOL $2055
FORCE_SYMBOL $2057 check2Player
COMMENT_LINE $205B in highScorePlace place we reached (0 based)
COMMENT_LINE $205B in ,s the number score
COMMENT $205B we reached a highscore
FORCE_SYMBOL $205B highScoreReached
FORCE_SYMBOL $205E game_level
FORCE_SYMBOL $2060 highScoreLevel
FORCE_NO_SYMBOL $2063
FORCE_SYMBOL $2065 highScoreDone
COMMENT_LINE $206A ***************************************************************************
FORCE_NO_SYMBOL $206A
FORCE_SYMBOL $206C score_digit_3
FORCE_SYMBOL $206F score_digit_3
FORCE_SYMBOL $2074 score_digit_3
FORCE_SYMBOL $2077 score_digit_4
FORCE_SYMBOL $207A score_digit_4
FORCE_SYMBOL $207F score_digit_4
FORCE_SYMBOL $2082 score_digit_5
COMMENT_LINE $2086 ***************************************************************************
COMMENT_LINE $2086 frog reached home intermission
COMMENT_LINE $2086 MY_QUIT ; be quiet
COMMENT $2086 default
COMMENT $2086 is there a current piece playing?
FORCE_SYMBOL $2086 currentMusic
COMMENT $2089 if not
COMMENT $208B take that piece given and
FORCE_SYMBOL $208B reachedHomeMusicNormal
COMMENT $208E play it now
FORCE_SYMBOL $208E currentMusic
FORCE_SYMBOL $2091 init_ym_sound
COMMENT $2096 otherwise, store it as next possible piece
FORCE_SYMBOL $2096 reachedHomeMusicNormal
FORCE_SYMBOL $2099 nextMusic
FORCE_SYMBOL $209C bonusScore
COMMENT $209F must be zero for Add_Score_a (left to $ff in vector routine)
FORCE_SYMBOL $209F Vec_Misc_Count
FORCE_NO_SYMBOL $20A1
FORCE_SYMBOL $20A3 tmp1
COMMENT $20A5 != 0
FORCE_SYMBOL $20A5 intermissionActive
FORCE_SYMBOL $20A7 counter
COMMENT $20A9 load bonus state
FORCE_SYMBOL $20A9 frog_bonus
COMMENT $20AB is there a fly bonus
FORCE_SYMBOL $20AB FLY_BONUS
COMMENT $20AD if no jump
FORCE_SYMBOL $20AF tmp1
FORCE_SYMBOL $20B5 bonusScore
COMMENT_LINE $20B7 LDA #200 ; otherwise load 200
COMMENT_LINE $20B7 LDX #no_score_string ; load score address
COMMENT_LINE $20B7 JSR Add_Score_a ; add to score
COMMENT $20B7 default
FORCE_SYMBOL $20B7 reachedHomeMusicFly
FORCE_SYMBOL $20BA tmp1
COMMENT $20BC load bonus state
FORCE_SYMBOL $20BC frog_bonus
COMMENT $20BE is there a girl bonus
FORCE_SYMBOL $20BE GIRL_BONUS
COMMENT $20C0 if no jump
FORCE_SYMBOL $20C2 bonusScore
COMMENT_LINE $20C8 LDA #200 ; otherwise load 200
COMMENT_LINE $20C8 LDX #no_score_string ; load score address
COMMENT_LINE $20C8 JSR Add_Score_a ; add to score
FORCE_NO_SYMBOL $20C8
FORCE_SYMBOL $20CA tmp1
FORCE_SYMBOL $20CE reachedHomeMusicGirl
FORCE_SYMBOL $20D3 reachedHomeHappyMusic
COMMENT $20D6 is there a current piece playing?
FORCE_SYMBOL $20D6 currentMusic
COMMENT $20D8 if not
COMMENT $20DA play it now
FORCE_SYMBOL $20DA currentMusic
FORCE_SYMBOL $20DD init_ym_sound
FORCE_SYMBOL $20E2 nextMusic
FORCE_NO_SYMBOL $20E5
COMMENT $20E7 != 0
FORCE_SYMBOL $20E7 frogDeath
COMMENT $20EA != 0
FORCE_SYMBOL $20EA intermissionActive
FORCE_SYMBOL $20EC tmp2
COMMENT_LINE $20EE ***************************************************************************
COMMENT_LINE $20EE sets the current level "timer" of the home reached
COMMENT_LINE $20EE to the RAM string that is displayed in the "Box" when a home was reached
COMMENT_LINE $20EE 16bit uInt in "my_timer" to 2*8 bit ascii data in "timeLeft"+5
COMMENT_LINE $20EE ***************************************************************************
COMMENT_LINE $20EE start                    jsr      setTimerToString
COMMENT $20EE load the timer value
FORCE_SYMBOL $20EE my_timer
COMMENT $20F1 divide by two
COMMENT_LINE $20F2 value should defenitly be in B
COMMENT $20F2 Initialize BCD result to zero
FORCE_NO_SYMBOL $20F2
COMMENT $20F5 Add in the hundreds
FORCE_NO_SYMBOL $20F5
FORCE_NO_SYMBOL $20F9
FORCE_NO_SYMBOL $20FB
COMMENT $2101 Add in the tens
FORCE_NO_SYMBOL $2101
FORCE_NO_SYMBOL $2105
FORCE_NO_SYMBOL $2107
COMMENT $210C Add in the ones
COMMENT $210E Move it to the D-register
COMMENT $2110 only the high timer counts
COMMENT $2112 High nibble of the byte
COMMENT $2116 Number+'0' = Number as ASCII
FORCE_NO_SYMBOL $2116
COMMENT $211B Low nibble
FORCE_NO_SYMBOL $211B
FORCE_NO_SYMBOL $211D
COMMENT_LINE $2122 end                    jsr      setTimerToString
COMMENT_LINE $2122 ***************************************************************************
COMMENT $2122 load the timer value
FORCE_SYMBOL $2122 my_timer
COMMENT_LINE $2124 here starts the timer count down loop
COMMENT $2124 store the timer value
FORCE_SYMBOL $2124 my_timer
FORCE_NO_SYMBOL $2129
FORCE_SYMBOL $212C my_timer
FORCE_SYMBOL $2134 score_digit_2
FORCE_SYMBOL $2137 score_digit_2
FORCE_SYMBOL $213C score_digit_2
FORCE_SYMBOL $213F score_digit_3
FORCE_SYMBOL $2142 score_digit_3
FORCE_SYMBOL $2147 score_digit_3
FORCE_SYMBOL $214A score_digit_4
FORCE_SYMBOL $214D score_digit_4
FORCE_SYMBOL $2152 score_digit_4
FORCE_SYMBOL $2155 score_digit_5
FORCE_SYMBOL $2158 KarlTimerBonusSound
FORCE_SYMBOL $215B play_sfx_x_if_nothing_else
FORCE_NO_SYMBOL $215E
FORCE_SYMBOL $2162 do_csa_sound_startup
FORCE_SYMBOL $2165 currentMusic
COMMENT_LINE $216A initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $216A first jumper of ym decoder
FORCE_SYMBOL $216A STREAM_PART_1
FORCE_SYMBOL $216D inMovePointer
FORCE_SYMBOL $2170 skipCount
FORCE_SYMBOL $2173 skipCount_now
FORCE_SYMBOL $2176 do_score
FORCE_NO_SYMBOL $2179
COMMENT $217C blank low and zero low
FORCE_SYMBOL $217C VIA_cntl
FORCE_SYMBOL $217E Intensity_a
COMMENT $2181 draw_objects
FORCE_SYMBOL $2181 entry_timer_count_down
FORCE_NO_SYMBOL $2184
COMMENT $2186 blank low and zero low
FORCE_SYMBOL $2186 VIA_cntl
FORCE_SYMBOL $2188 bonusScore
FORCE_SYMBOL $218F n200
FORCE_NO_SYMBOL $2192
FORCE_SYMBOL $2196 n200200
FORCE_SYMBOL $2199 frog_y
FORCE_NO_SYMBOL $219D
FORCE_SYMBOL $21A1 frog_y
FORCE_SYMBOL $21A6 bonusScore
FORCE_SYMBOL $21A9 noBonusDisplay
COMMENT $21AC set game scaling
FORCE_SYMBOL $21AC SCALE_FACTOR_GAME
COMMENT $21AE move to time 1 lo, this means scaling
FORCE_SYMBOL $21AE VIA_t1_cnt_lo
COMMENT $21B0 load current frog position to D
FORCE_SYMBOL $21B0 frog_pos
COMMENT_LINE $21B3 slight offset to frog Pos
COMMENT_LINE $21B3 adda #20
FORCE_NO_SYMBOL $21B3
FORCE_SYMBOL $21B5 n200200
FORCE_NO_SYMBOL $21BB
FORCE_SYMBOL $21BD my_move_to_d
COMMENT_LINE $21C0 PRINT_STR_5 zahlen2,zahlen2_end, 18
COMMENT $21C0 Save string pointer
FORCE_SYMBOL $21C0 Vec_Str_Ptr
COMMENT $21C3 Point to start of chargen bitmaps
FORCE_SYMBOL $21C3 zahlen2
COMMENT $21C6 a->AUX: b->ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $21C6
COMMENT $21C9 Clear D/A output
FORCE_SYMBOL $21C9 VIA_port_a
COMMENT $21CB Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $21CB VIA_aux_cntl
COMMENT_LINE $21CD first entry here, ramp is disabled
COMMENT_LINE $21CD if there was a jump from below
COMMENT_LINE $21CD ramp will be enabled by next line
COMMENT $21CD ramp off/on set mux to channel 1
FORCE_SYMBOL $21CD VIA_port_b
COMMENT $21CF Enable mux
FORCE_SYMBOL $21CF VIA_port_b
COMMENT $21D1 both to ORB, both disable ram, mux sel = 0 (y int), a:->enable mux: b:->disable mux
FORCE_NO_SYMBOL $21D1
COMMENT $21D4 Disable mux
FORCE_SYMBOL $21D4 VIA_port_b
COMMENT $21D6 Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $21D6 VIA_port_b
COMMENT $21D8 Enable mux
FORCE_SYMBOL $21D8 VIA_port_b
COMMENT $21DA disable mux
FORCE_SYMBOL $21DA VIA_port_b
COMMENT_LINE $21DC Note:
COMMENT_LINE $21DC doing another "STB      <VIA_port_b" does not work due to timing issues!
COMMENT $21DC Get text width
COMMENT $21DF Send it to the D/A
FORCE_SYMBOL $21DF VIA_port_a
COMMENT $21E1 [4]enable RAMP, disable mux
FORCE_SYMBOL $21E1 VIA_port_b
COMMENT $21E3 [3]
COMMENT_LINE $21E5 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $21E5 13 cycles overhead
COMMENT_LINE $21E5 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $21E5 [+5]Get bitmap from chargen table
COMMENT $21E7 [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $21E7 VIA_shift_reg
COMMENT $21E9 [+6]Get next character
COMMENT $21EB [+3]Go back if not terminator
COMMENT $21ED [4]disable RAMP, disable mux
FORCE_SYMBOL $21ED VIA_port_b
COMMENT $21EF Negate text width to D/A
FORCE_SYMBOL $21EF VIA_port_a
COMMENT $21F1 enable ramp, disable mux
FORCE_NO_SYMBOL $21F1
COMMENT $21F3 enable RAMP, disable mux
FORCE_SYMBOL $21F3 VIA_port_b
COMMENT $21F5 [4]Check for last row
COMMENT $21F8 [3]Branch if last row
COMMENT $21FA [3]Point to next chargen row
FORCE_SYMBOL $21FA ZAHLEN_MAX
COMMENT $21FD [6]Get string length
COMMENT $21FF [7]
FORCE_SYMBOL $21FF Vec_Str_Ptr
COMMENT $2202 [2] - 2
FORCE_NO_SYMBOL $2202
COMMENT $2204 [3]Delay a moment
COMMENT_LINE $2206 I think if the Macro was given the length of the string
COMMENT_LINE $2206 than another 2 cycles per line can be saved,
COMMENT_LINE $2206 since we probably could use leay -1,y bne...
COMMENT_LINE $2206 in the loop, and not only load "A", but also B with textheight!
COMMENT $2206 [6] Point to start of text string
FORCE_SYMBOL $2206 Vec_Str_Ptr
COMMENT $2209 [3]Delay a moment
COMMENT $220B [2]disable RAMP, disable mux
FORCE_NO_SYMBOL $220B
COMMENT $220D [2]
COMMENT $220E [2]
COMMENT $220F [3]Delay some more in a loop
COMMENT $2211 disable RAMP, disable mux
FORCE_SYMBOL $2211 VIA_port_b
COMMENT $2213 Get text height
COMMENT $2215 Store text height in D/A [go down -> later]
FORCE_SYMBOL $2215 VIA_port_a
COMMENT $2217 Enable mux
FORCE_SYMBOL $2217 VIA_port_b
FORCE_NO_SYMBOL $2219
COMMENT $221C disable RAMP, disable mux
FORCE_SYMBOL $221C VIA_port_b
COMMENT $221E Clear D/A
FORCE_SYMBOL $221E VIA_port_a
COMMENT $2220 Go back for next scan line
COMMENT $2222 #$98 ;
FORCE_NO_SYMBOL $2222
COMMENT $2224 T1->PB7 enabled
FORCE_SYMBOL $2224 VIA_aux_cntl
FORCE_NO_SYMBOL $2226
COMMENT $2228 22 cycles from switch on ZERO disabled, and BLANK enabled
FORCE_SYMBOL $2228 VIA_cntl
COMMENT_LINE $223C below timer as String display takes 4500 cycles
COMMENT_LINE $223C look very nice - what to "drop"?
COMMENT_LINE $223C ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_NO_SYMBOL $223C
COMMENT $223E move to time 1 lo, this means scaling
FORCE_SYMBOL $223E VIA_t1_cnt_lo
FORCE_SYMBOL $2243 Timer_BOX
FORCE_SYMBOL $2246 drawBox
FORCE_NO_SYMBOL $2249
FORCE_SYMBOL $224C Vec_Text_Height
COMMENT $224F move to time 1 lo, this means scaling
FORCE_SYMBOL $224F VIA_t1_cnt_lo
FORCE_SYMBOL $2251 timeLeft
FORCE_NO_SYMBOL $2254
FORCE_SYMBOL $2257 sync_Print_Str_d
COMMENT_LINE $225A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $225A isAttractMode
FORCE_SYMBOL $225F displayButton
COMMENT $2262 load the timer value
FORCE_SYMBOL $2262 my_timer
COMMENT $2265 count it down by $20
FORCE_NO_SYMBOL $2265
COMMENT $2267 if not minus... go on
FORCE_SYMBOL $226B tmp2
COMMENT_LINE $2272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FORCE_SYMBOL $2272 DP_to_C8
FORCE_SYMBOL $2276 bonusScore
COMMENT $2279 != 0
FORCE_SYMBOL $2279 intermissionActive
COMMENT $227C != 0
FORCE_SYMBOL $227C frogDeath
COMMENT $227F no bonus collected for this frog
FORCE_SYMBOL $227F frog_bonus
COMMENT $2282 what's the girls status?
FORCE_SYMBOL $2282 girl_status
COMMENT $2285 is it displayed
FORCE_SYMBOL $2285 IS_CARRIED
COMMENT $2289 is displayed
FORCE_SYMBOL $2289 girl_status
COMMENT $228C is waiting
FORCE_SYMBOL $228C girl_status
COMMENT $228F initiate the round counter
FORCE_SYMBOL $228F girl_round_counter_reset
COMMENT $2292 store it
FORCE_SYMBOL $2292 girl_round_counter
COMMENT_LINE $2296 JMP reinit_level ; last JSR can allways be a jump
COMMENT_LINE $2296 ***************************************************************************
COMMENT $2296 possible if 0 or negative
FORCE_SYMBOL $2296 gimmickPossible
FORCE_NO_SYMBOL $2299
FORCE_SYMBOL $229B levelDoneTemp
COMMENT $229E be quiet
COMMENT $229E no music is playing ->0
FORCE_SYMBOL $229E Vec_Music_Flag
COMMENT $22A0 shadow regs
FORCE_SYMBOL $22A0 Init_Music_Buf
COMMENT_LINE $22A3 in the next do sound call
COMMENT_LINE $22A3 all regs are cleared automatically
FORCE_NO_SYMBOL $22A3
FORCE_SYMBOL $22A5 addHundred
COMMENT $22AB load this level to A
FORCE_SYMBOL $22AB game_level
COMMENT $22AD remember it...
COMMENT_LINE $22AF load 'LEVEL DONE' level number
COMMENT $22B1 and store it to game level
FORCE_SYMBOL $22B1 game_level
COMMENT $22B3 set this level up
FORCE_SYMBOL $22B3 setup_level
COMMENT $22B6 and init it
FORCE_SYMBOL $22B6 init_new_frog_vars
COMMENT_LINE $22B9 display till button pressed
COMMENT $22B9 this piece of music
FORCE_SYMBOL $22B9 levelDoneMusic
COMMENT $22BC must be played
FORCE_SYMBOL $22BC currentMusic
COMMENT $22BF NOW
FORCE_SYMBOL $22BF init_ym_sound
FORCE_SYMBOL $22C2 intermissionActive
FORCE_NO_SYMBOL $22C4
FORCE_SYMBOL $22C8 skipCount_now
FORCE_SYMBOL $22CB do_csa_sound_startup
FORCE_SYMBOL $22CE oneYMRound
COMMENT_LINE $22DB below timer as String display takes 4500 cycles
COMMENT_LINE $22DB look very nice - what to "drop"?
COMMENT_LINE $22DB ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $22DB BOX
FORCE_NO_SYMBOL $22DB
COMMENT $22DD move to time 1 lo, this means scaling
FORCE_SYMBOL $22DD VIA_t1_cnt_lo
FORCE_SYMBOL $22E2 Level_BOX_1
FORCE_NO_SYMBOL $22E7
FORCE_SYMBOL $22EA Vec_Text_Height
FORCE_NO_SYMBOL $22ED
COMMENT $22EF move to time 1 lo, this means scaling
FORCE_SYMBOL $22EF VIA_t1_cnt_lo
FORCE_SYMBOL $22F1 level_complete_text
FORCE_NO_SYMBOL $22F4
FORCE_SYMBOL $22F7 sync_Print_Str_d
FORCE_NO_SYMBOL $22FA
COMMENT $22FC Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $22FC VIA_aux_cntl
COMMENT $22FE draw this 'level'
FORCE_SYMBOL $22FE entry_level_done
FORCE_SYMBOL $2301 musicOption
FORCE_SYMBOL $2306 levelDoneTemp
FORCE_SYMBOL $230D currentYLenCount
FORCE_NO_SYMBOL $2310
COMMENT $2315 get button status
FORCE_SYMBOL $2315 Read_Btns
COMMENT $2318 is a button pressed?
FORCE_NO_SYMBOL $2318
COMMENT $231A no, than stay in init_screen_loop
COMMENT $231C restore old game level
COMMENT $231E and set it
FORCE_SYMBOL $231E game_level
FORCE_SYMBOL $2321 intermissionActive
COMMENT_LINE $2325 ***************************************************************************
FORCE_NO_SYMBOL $2327
COMMENT $2329 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $2329 VIA_aux_cntl
FORCE_SYMBOL $232E Vec_0Ref_Enable
COMMENT $2331 Get line pattern from table
FORCE_NO_SYMBOL $2332
FORCE_NO_SYMBOL $2334
COMMENT $233A Store pattern
FORCE_SYMBOL $233A Vec_Pattern
FORCE_SYMBOL $233F my_move_to_d
COMMENT $2342 Draw 4 lines
FORCE_NO_SYMBOL $2342
FORCE_SYMBOL $2344 Draw_Pat_VL_a
COMMENT_LINE $2347 rts
COMMENT_LINE $2347 ***************************************************************************
COMMENT_LINE $2347 and some 'small' intermissions...
COMMENT_LINE $2347 just text, nothing fancy
COMMENT_LINE $2347 the following functions could as well be only one with a
COMMENT_LINE $2347 index pointer to the text to be displayed...
COMMENT_LINE $2347 well, we got space enough, haven't we?
COMMENT_LINE $2347 roll_over_intermission:
COMMENT_LINE $2347 direct   $d0
COMMENT_LINE $2347 MY_QUIT                               ; be quiet
COMMENT_LINE $2347 JSR      Read_Btns                    ; get button status
COMMENT_LINE $2347 LDA      #$ff                         ; load a timer, how long the following
COMMENT_LINE $2347 STA      tmp1                         ; text will be displayed
COMMENT_LINE $2347 roll_over_intermission_loop:
COMMENT_LINE $2347 JSR      print_score
COMMENT_LINE $2347 LDD      #LITTLE_TEXT_SIZE            ; load score text size
COMMENT_LINE $2347 STD      Vec_Text_HW                  ; poke it to ram location
COMMENT_LINE $2347 LDU      #roll_over_string            ; string to be printed
COMMENT_LINE $2347 LDD      #(-$10*256)+(lo(-$50))
COMMENT_LINE $2347 JSR      Print_Str_d                  ; Print the string
COMMENT_LINE $2347 DEC      tmp1                         ; decreas timer,
COMMENT_LINE $2347 BEQ      roll_over_intermission_end   ; if zero, than we are done
COMMENT_LINE $2347 TST      Vec_Music_Flag               ; test the music flag
COMMENT_LINE $2347 BNE      roll_over_sound_is_playing   ; if music done, get out of loop
COMMENT_LINE $2347 ;         PLAY_SOUND  ta_ta_ta1
COMMENT_LINE $2347 roll_over_sound_is_playing:
COMMENT_LINE $2347 JSR      Read_Btns                    ; get button status
COMMENT_LINE $2347 CMPA     #$00                         ; is a button pressed?
COMMENT_LINE $2347 BEQ      roll_over_intermission_loop  ; start another round
COMMENT_LINE $2347 roll_over_intermission_end:
COMMENT_LINE $2347 RTS
COMMENT_LINE $2347 ***************************************************************************
COMMENT_LINE $2347 check if 2 player game
COMMENT_LINE $2347 if so switch to other player, in case he is already dead - stay at same player
COMMENT_LINE $2347 decreases no_frogs2 of other player in case he is already dead - each round
FORCE_SYMBOL $2347 no_frogs
FORCE_SYMBOL $234A no_frogs2
FORCE_SYMBOL $234D playerCountOption
FORCE_SYMBOL $2352 currentPlayer
COMMENT_LINE $2357 check if other player is dead
FORCE_SYMBOL $2357 P2_no_frogs
FORCE_SYMBOL $235C no_frogs
FORCE_SYMBOL $2361 startPlayer
FORCE_SYMBOL $2364 P1_start
COMMENT_LINE $236B check if other player is dead
FORCE_SYMBOL $236B P1_no_frogs
FORCE_SYMBOL $2370 no_frogs
FORCE_SYMBOL $2375 startPlayer
FORCE_SYMBOL $2378 P2_start
COMMENT_LINE $237D now load other player
FORCE_SYMBOL $237D currentPlayer
FORCE_NO_SYMBOL $2381
FORCE_SYMBOL $2383 currentPlayer
FORCE_SYMBOL $2388 P1_start
FORCE_SYMBOL $238B loadPlayer
FORCE_SYMBOL $2390 P2_start
FORCE_SYMBOL $2393 loadPlayer
FORCE_SYMBOL $2396 tmp2
FORCE_SYMBOL $2399 no_reinit_level
FORCE_SYMBOL $239D P2_no_frogs
FORCE_SYMBOL $23A0 P2_no_frogs
FORCE_SYMBOL $23A3 no_frogs2
FORCE_SYMBOL $23A7 P1_no_frogs
FORCE_SYMBOL $23AA P1_no_frogs
FORCE_SYMBOL $23AD no_frogs2
COMMENT_LINE $23B1 ***************************************************************************
COMMENT_LINE $23B1 writes data from current active variables to
COMMENT_LINE $23B1 player variables pointed to by U register
COMMENT_LINE $23B3 ensure befr save that houses are clean from temporary stuff
COMMENT $23B3 is there any croco stuff at all?
FORCE_SYMBOL $23B3 croco_status
COMMENT $23B6 croco is displayed
FORCE_SYMBOL $23B6 IS_DISPLAYED
COMMENT $23BA load current croco offset
FORCE_SYMBOL $23BA croco_house
COMMENT $23BD get address of U and add the offset
FORCE_SYMBOL $23BD home_objects
COMMENT $23C0 in U address of 'random' home
FORCE_NO_SYMBOL $23C2
FORCE_NO_SYMBOL $23C5
COMMENT $23C7 IS WAITING
FORCE_SYMBOL $23C7 croco_status
COMMENT $23CA is there any croco stuff at all?
FORCE_SYMBOL $23CA fly_status
COMMENT $23CD fly is displayed
FORCE_SYMBOL $23CD IS_DISPLAYED
COMMENT $23D1 load current fly offset
FORCE_SYMBOL $23D1 fly_house
COMMENT $23D4 get address of U and add the offset
FORCE_SYMBOL $23D4 home_objects
COMMENT $23D7 in U address of 'random' home
FORCE_NO_SYMBOL $23D9
FORCE_NO_SYMBOL $23DC
COMMENT $23DE is WAITING
FORCE_SYMBOL $23DE fly_status
FORCE_SYMBOL $23E3 score_digit_front
FORCE_SYMBOL $23E8 score_digit_4
FORCE_SYMBOL $23ED score_digit_2
FORCE_SYMBOL $23F2 score_digit_SPACE1
FORCE_SYMBOL $23F7 score_digit_SPACE2
FORCE_SYMBOL $23FC score_digit_back
FORCE_SYMBOL $2401 no_frogs
FORCE_SYMBOL $2406 game_level
FORCE_SYMBOL $240B in_home_counter
FORCE_SYMBOL $2410 home_objects
FORCE_NO_SYMBOL $2413
COMMENT_LINE $241D ***************************************************************************
COMMENT_LINE $241D writes data from player var (pointer U) to current active variables
FORCE_SYMBOL $241F score_digit_front
FORCE_SYMBOL $2424 score_digit_4
FORCE_SYMBOL $2429 score_digit_2
FORCE_SYMBOL $242E score_digit_SPACE1
FORCE_SYMBOL $2433 score_digit_SPACE2
FORCE_SYMBOL $2438 score_digit_back
FORCE_SYMBOL $243D no_frogs
FORCE_SYMBOL $2442 game_level
FORCE_SYMBOL $2447 in_home_counter
FORCE_SYMBOL $244A home_objects
FORCE_NO_SYMBOL $244D
COMMENT_LINE $2456 correct highscore checking
FORCE_SYMBOL $2456 score_digit_5
COMMENT $2459 and store it, for new life at change... (every 10000 points)
FORCE_SYMBOL $2459 high_check
COMMENT_LINE $245D ***************************************************************************
COMMENT $247B no music is played
FORCE_NO_SYMBOL $247B
FORCE_SYMBOL $247E nextMusic
FORCE_SYMBOL $2481 currentMusic
FORCE_SYMBOL $2484 sfx_status_3
COMMENT_LINE $2487 display till button pressed
FORCE_SYMBOL $2487 shutup
FORCE_NO_SYMBOL $248A
FORCE_SYMBOL $248C tmp1
COMMENT $248F recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $248F RecalCounter
FORCE_NO_SYMBOL $2492
FORCE_SYMBOL $2494 RecalCounter
COMMENT $2497 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $2497 Wait_Recal
COMMENT $249A just for assembler optimization...
COMMENT_LINE $249A below timer as String display takes 4500 cycles
COMMENT_LINE $249A look very nice - what to "drop"?
COMMENT_LINE $249A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $249A BOX
FORCE_NO_SYMBOL $249A
COMMENT $249C move to time 1 lo, this means scaling
FORCE_SYMBOL $249C VIA_t1_cnt_lo
FORCE_SYMBOL $24A1 Level_BOX
FORCE_SYMBOL $24A4 drawBox
FORCE_NO_SYMBOL $24A7
FORCE_SYMBOL $24AA Vec_Text_Height
FORCE_NO_SYMBOL $24AD
COMMENT $24AF move to time 1 lo, this means scaling
FORCE_SYMBOL $24AF VIA_t1_cnt_lo
FORCE_SYMBOL $24B1 currentPlayer
FORCE_SYMBOL $24B6 playerOne
FORCE_SYMBOL $24BB playerTWO
FORCE_NO_SYMBOL $24BE
FORCE_SYMBOL $24C1 sync_Print_Str_d
FORCE_NO_SYMBOL $24C4
COMMENT $24C6 Shift reg mode = 000 free disable, T1 PB7 enabled
FORCE_SYMBOL $24C6 VIA_aux_cntl
FORCE_SYMBOL $24C8 tmp1
COMMENT $24CD get button status
FORCE_SYMBOL $24CD Read_Btns
COMMENT $24D0 is a button pressed?
FORCE_NO_SYMBOL $24D0
COMMENT $24D2 no, than stay in init_screen_loop
FORCE_NO_SYMBOL $24D4
COMMENT_LINE $24D9 pauseGame
COMMENT_LINE $24D9 andcc #$ff-$40 ; clear firq
COMMENT_LINE $24D9 pshs     d,y,u,cc,dp
COMMENT_LINE $24D9 loopi
COMMENT_LINE $24D9 jsr      do_csa_startup
COMMENT_LINE $24D9 LDD      #NORMAL_TEXT_SIZE            ; load default text height & width
COMMENT_LINE $24D9 STD      Vec_Text_HW                  ; poke it to ram location
COMMENT_LINE $24D9 JSR      Intensity_5F                 ; Sets the intensity of the
COMMENT_LINE $24D9 ldd      #$ff3c
COMMENT_LINE $24D9 std      Vec_Text_Height
COMMENT_LINE $24D9 _SCALE_B
COMMENT_LINE $24D9 ldu      Vec_Str_Ptr
COMMENT_LINE $24D9 ldd      #0
COMMENT_LINE $24D9 jsr      Print_Str_d
COMMENT_LINE $24D9 JSR      Read_Btns                    ; get button status
COMMENT_LINE $24D9 CMPA     #$00                         ; is a button pressed?
COMMENT_LINE $24D9 BEQ     loopi                      ; no, than stay in init_screen_loop
COMMENT_LINE $24D9 puls     d,y,u,cc,dp, pc
COMMENT_LINE $24D9 ***************************************************************************
COMMENT_LINE $24D9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $24D9 in 2016
COMMENT_LINE $24D9 all stuff contained here is public domain
COMMENT_LINE $24D9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24D9 morphing subroutines                                                      ;
COMMENT_LINE $24D9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $24D9 ***************************************************************************
COMMENT_LINE $24D9 below are all subroutines for morphing
COMMENT_LINE $24D9 (only two) set_up_morphing(), do_one_morph_step()
COMMENT_LINE $24D9 ***************************************************************************
COMMENT_LINE $24D9 this sets up a morph
COMMENT_LINE $24D9 in U a pointer to a morph structure is expected,
COMMENT_LINE $24D9 structure:
COMMENT_LINE $24D9 DW               ; morph from vector list
COMMENT_LINE $24D9 DW               ; morph to vector list
COMMENT_LINE $24D9 DB               ; morph steps
COMMENT_LINE $24D9 DB               ; delay between one morph step
COMMENT_LINE $24D9 DW               ; optional (0 or structure)
COMMENT_LINE $24D9 ; pointer to next morph structure
COMMENT_LINE $24D9 DB               ; startup delay
COMMENT_LINE $24D9 vector list must have (as usual with my routines) the following style
COMMENT_LINE $24D9 count, rel y, rel x, rel y, rel x, ...
COMMENT_LINE $24D9 maximal vectors for morphing is now 63 (127/2)
COMMENT_LINE $24D9 if more are needed than something below cries for a 16 bit change...
COMMENT_LINE $24D9 vector list don't need to have the same length anymore
COMMENT_LINE $24D9 for optimal performance use a power of two step counter (-1)
COMMENT_LINE $24D9 (8, 16, 32, 64 are supported with fast DIV routines)
COMMENT_LINE $24D9 this routine sets up three vector lists (sort of) in RAM
COMMENT_LINE $24D9 current_morph_vectorlist_org
COMMENT_LINE $24D9 current_morph_vectorlist
COMMENT_LINE $24D9 current_morph_vector_diffs
COMMENT_LINE $24D9 current_morph_vectorlist_org
COMMENT_LINE $24D9 is the original startlist, but possibly lengthened to the
COMMENT_LINE $24D9 max vectorlist length of the two passed vectors (filled with 0,0 coordinates)
COMMENT_LINE $24D9 current_morph_vectorlist
COMMENT_LINE $24D9 is the storage area for the next to be drawn vectorlist
COMMENT_LINE $24D9 is = to the original vector list (not max length)
COMMENT_LINE $24D9 current_morph_vector_diffs
COMMENT_LINE $24D9 not a real vector list, this contains the difference between the
COMMENT_LINE $24D9 points of the two passed vector lists
COMMENT_LINE $24D9 used in 'do_one_morph_step' to calculate the next vector
COMMENT_LINE $24D9 further some variables are set, like delay, div routine, and morph_structure...
FORCE_SYMBOL $24D9 DP_to_C8
COMMENT $24DC remember current morph structure
FORCE_SYMBOL $24DC morph_structure
COMMENT_LINE $24DE first clear all current stuff, since we
COMMENT_LINE $24DE don't know how long all vectors will be
COMMENT_LINE $24DE could be optimized to a later fill
COMMENT_LINE $24DE with only the fills we need,
COMMENT_LINE $24DE but at this point vectrex should be fast enough
COMMENT_LINE $24DE so it doesn't matter to waste a bit time here...
COMMENT_LINE $24DE since current_morph_vectorlist_org, current_morph_vectorlist and current_morph_vector_diffs
COMMENT_LINE $24DE are neighbours one Clear_x_d should be enough...
COMMENT $24DE address to clear
FORCE_SYMBOL $24DE current_morph_vectorlist_org
COMMENT $24E1 number of bytes - 1 to clear
COMMENT $24E4 clear sub routine in ROM
FORCE_SYMBOL $24E4 Clear_x_d
COMMENT $24E7 X = pointer to 'from'
FORCE_NO_SYMBOL $24E7
COMMENT $24E9 Y = pointer to 'to'
FORCE_NO_SYMBOL $24E9
COMMENT $24EC load number of vectors
FORCE_NO_SYMBOL $24EC
COMMENT $24EE compare number of vectors
FORCE_NO_SYMBOL $24EE
COMMENT $24F0 which vector list is longer ?
COMMENT $24F2 load number of vectors 'to', the second...
FORCE_NO_SYMBOL $24F2
COMMENT_LINE $24F4 in A is the higher vector count
COMMENT $24F4 set high value in vector lists
FORCE_SYMBOL $24F4 current_morph_vectorlist_org
COMMENT $24F7 add 1
COMMENT $24F8 multiply by two, since every vector has two coordinates
COMMENT $24F9 remember in tmp2
FORCE_SYMBOL $24F9 tmp2
COMMENT_LINE $24FB copy 'from' to original
COMMENT $24FB destination pointer
COMMENT $24FE source pointer
FORCE_NO_SYMBOL $24FE
COMMENT $2500 load length and step over length byte
COMMENT $2502 increase 1, since one is missing
COMMENT $2503 times two, since there are two coordinates
COMMENT $2504 and copy it
FORCE_SYMBOL $2504 Move_Mem_a
COMMENT $2507 load current morph structure
FORCE_SYMBOL $2507 morph_structure
COMMENT_LINE $2509 copy 'from' to current
COMMENT $2509 destination pointer
FORCE_SYMBOL $2509 current_morph_vectorlist
COMMENT $250C source pointer
FORCE_NO_SYMBOL $250C
COMMENT $250E load length
FORCE_NO_SYMBOL $250E
COMMENT $2510 increase 1, since one is missing
COMMENT $2511 times two, since there are two coordinates
COMMENT $2512 add 1 since counter is also copied
COMMENT $2513 and copy it
FORCE_SYMBOL $2513 Move_Mem_a
COMMENT $2516 load current morph structure
FORCE_SYMBOL $2516 morph_structure
COMMENT_LINE $2518 copy 'to' to 'buffer' (buffer is now 'current_morph_vector_diffs')
COMMENT_LINE $2518 destination pointer
COMMENT $2518 no +1 here, since in diffs only the offsets are relevant anyway
FORCE_SYMBOL $2518 current_morph_vector_diffs
COMMENT $251B source pointer
FORCE_NO_SYMBOL $251B
COMMENT $251D load length and step over length byte
COMMENT $251F increase 1, since one is missing
COMMENT $2520 times two, since there are two coordinates
COMMENT $2521 and copy it
FORCE_SYMBOL $2521 Move_Mem_a
COMMENT $2524 load current morph structure
FORCE_SYMBOL $2524 morph_structure
COMMENT $2526 load morph steps to A
FORCE_NO_SYMBOL $2526
COMMENT $2528 plus one
COMMENT $2529 and save it this is variable
FORCE_SYMBOL $2529 morph_counter
COMMENT $252B and again not variable
FORCE_SYMBOL $252B morph_steps
COMMENT $252D load morph delay A
FORCE_NO_SYMBOL $252D
COMMENT $252F and save it
FORCE_SYMBOL $252F morph_delay
COMMENT $2531 and mark the whole thing as active
FORCE_SYMBOL $2531 MORPHING_WORKING
COMMENT $2533 and store it
FORCE_SYMBOL $2533 morph_status
COMMENT_LINE $2535 now we must calculate the current_morph_vector_diffs
COMMENT_LINE $2535 we must determine the difference between the two sets of coordinates
COMMENT_LINE $2535 use tmp2 as loop counter
COMMENT_LINE $2535 number of vectors to process * 2
COMMENT $2538 Y = pointer to 'to' (buffer)
FORCE_SYMBOL $2538 current_morph_vector_diffs
COMMENT_LINE $253C and Y = pointer to vector diffs
COMMENT $253C load the second's vector coordinate
FORCE_NO_SYMBOL $253C
COMMENT $253E neg it, since we actually want a 'a=a-b' style
COMMENT_LINE $253F what we do is
COMMENT_LINE $253F invert b and do a b=-b+a
COMMENT $253F and add the source coordinate
COMMENT $2541 store is (back) to vector diffs
COMMENT $2543 decrease vector counter by 1
FORCE_SYMBOL $2543 tmp2
COMMENT $2545 and continue with next vector if not done
FORCE_SYMBOL $2547 DP_to_D0
COMMENT $254A all done now, return
COMMENT_LINE $254B ***************************************************************************
COMMENT_LINE $254B uses tmp1 and tmp2
COMMENT_LINE $254B destroys everything
COMMENT_LINE $254B what it does:
COMMENT_LINE $254B current_morph_vectorlist is = to a (possibly) newly calculated vector
COMMENT_LINE $254B but hardcoded
COMMENT_LINE $254B 16 steps,
COMMENT_LINE $254B not using JSR for DIV
COMMENT_LINE $254B saves 1000 cycles on intro screen!!!
COMMENT $254B load the status
FORCE_SYMBOL $254B morph_status
COMMENT $254E and look what there is to do
FORCE_SYMBOL $254E MORPHING_WORKING
COMMENT $2550 morphing now?
COMMENT $2552 or complete?
FORCE_SYMBOL $2552 MORPHING_COMPLETE
COMMENT $2554 should a new morph be initialized?
COMMENT_LINE $2556 here we come with MORPHING_DONE
COMMENT $2556 load the current morph structure
FORCE_SYMBOL $2556 morph_structure
COMMENT $2559 look if there is a next structure
FORCE_NO_SYMBOL $2559
COMMENT $255B no? than go out
COMMENT $255D yes? than initialize it
FORCE_SYMBOL $255D set_up_morphing
COMMENT $2560 go back
COMMENT $2561 load completeness flag to A
FORCE_SYMBOL $2561 MORPHING_COMPLETE
COMMENT $2563 and store it
FORCE_SYMBOL $2563 morph_status
COMMENT $2566 go back
COMMENT $2567 decrease delay value
FORCE_SYMBOL $2567 morph_delay
COMMENT $256A only morph when zero
COMMENT $256C otherise go back
COMMENT $256D in the current morph structure
FORCE_SYMBOL $256D morph_structure
COMMENT $2570 look for the next delay value
FORCE_NO_SYMBOL $2570
COMMENT $2572 and set it
FORCE_SYMBOL $2572 morph_delay
COMMENT $2575 load counter of morph steps
FORCE_SYMBOL $2575 morph_counter
COMMENT $2578 are we done ?
COMMENT $257A no, than calculate offset to number of steps
FORCE_SYMBOL $257A morph_steps
COMMENT $257D is it the beginning?
COMMENT_LINE $257F no, than we go on
COMMENT $257F pointer to original vectorlist
FORCE_SYMBOL $257F current_morph_vectorlist_org
COMMENT_LINE $2582 (RAM), but the (maybe) longer version
COMMENT $2582 load length of vectorlist and increment X
COMMENT $2584 only needed the first time we are in here...
FORCE_SYMBOL $2584 current_morph_vectorlist
COMMENT_LINE $2587 A current number of vectors in (RAM) vectorlist
COMMENT $2587 since it misses allways one, add one
COMMENT $2588 multiply by two, since every vector has
COMMENT_LINE $2589 start and end point
COMMENT $2589 use tmp2 as loop counter see below
FORCE_SYMBOL $2589 tmp2
COMMENT $258C U = pointer to vector diffs (RAM)
FORCE_SYMBOL $258C current_morph_vector_diffs
COMMENT $258F target memory pointer (RAM)
COMMENT_LINE $2593 plus one, since we don't need the vector counter
COMMENT $2593 load number of steps to B
FORCE_SYMBOL $2593 morph_steps
COMMENT $2596 invert the morph counter
FORCE_SYMBOL $2596 morph_counter
COMMENT $2599 store..., so we don't have to calculate in the loop
FORCE_SYMBOL $2599 morph_tmp
COMMENT $259C clear signess... (that's positiv)
FORCE_SYMBOL $259C morph_sign
COMMENT $259F load the difference between the 'to' coordinates to A
COMMENT $25A1 check if negative sign
COMMENT $25A3 mark as negative
FORCE_SYMBOL $25A3 morph_sign
COMMENT $25A6 and make positiv
COMMENT $25A7 initiated above..., this is the
FORCE_SYMBOL $25A7 morph_tmp
COMMENT_LINE $25AA 'morph step' of number of morph_steps we are makeing
COMMENT $25AA multiply, B should be smaller
COMMENT_LINE $25AB than A (B is cycle relevant)
FORCE_SYMBOL $25B3 divide_tmp
FORCE_SYMBOL $25B6 divide_tmp
COMMENT $25B9 is it signed?
FORCE_SYMBOL $25B9 morph_sign
COMMENT $25BC no, than go on
COMMENT $25BE otherwise restore the 'minus'
COMMENT $25BF and reset sign memory
FORCE_SYMBOL $25BF morph_sign
COMMENT $25C2 negate the div value
COMMENT_LINE $25C3 this is again a formal a=a-b
COMMENT_LINE $25C3 what we do is
COMMENT_LINE $25C3 invert b and do a b=-b+a
COMMENT $25C3 add the resulting difference to original coordinate
COMMENT $25C5 and store it to the current vectorlist
COMMENT $25C7 decrement the vectorlist loop counter by one
FORCE_SYMBOL $25C7 tmp2
COMMENT $25CA and if not done,.. repeat
COMMENT_LINE $25CC on first entry vectorlist is allready set
COMMENT $25CC decrement morph step counter
FORCE_SYMBOL $25CC morph_counter
COMMENT $25CF and go back
COMMENT $25D0 load current morph structure
FORCE_SYMBOL $25D0 morph_structure
COMMENT_LINE $25D3 copy 'to' to current_morph_vectorlist
COMMENT $25D3 destination pointer
FORCE_SYMBOL $25D3 current_morph_vectorlist
COMMENT $25D6 source pointer
FORCE_NO_SYMBOL $25D6
COMMENT $25D8 load length
FORCE_NO_SYMBOL $25D8
COMMENT $25DA increase 1, since one is missing
COMMENT $25DB times two, since there are two coordinates
COMMENT $25DC increase 1, since now we also copy the counter
COMMENT $25DD and copy it
FORCE_SYMBOL $25DD Move_Mem_a
COMMENT $25E0 no we are done with morphing...
FORCE_SYMBOL $25E0 MORPHING_DONE
COMMENT $25E2 and store it
FORCE_SYMBOL $25E2 morph_status
COMMENT $25E5 go back...
COMMENT_LINE $25E6 ***************************************************************************
COMMENT_LINE $25E6 end of morph routine section
COMMENT_LINE $25E6 ***************************************************************************
COMMENT_LINE $25E6 ***************************************************************************
COMMENT_LINE $25E6 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $25E6 in 2016
COMMENT_LINE $25E6 all stuff contained here is public domain
COMMENT_LINE $25E6 expects width strength to be = to the default bios location Vec_Text_Width
COMMENT_LINE $25E6 expects height strength to be = to the default bios location Vec_Text_Height
COMMENT_LINE $25E6 address of raster data is expected in U
COMMENT_LINE $25E6 print is done to current screen location
COMMENT_LINE $25E6 uses bios ram-locations  Vec_Counter_1,  Vec_Counter_2,  Vec_Counter_3
COMMENT_LINE $25E6 as temporary storages
COMMENT_LINE $25E6 zero delay is needed for zeroing to work correctly
COMMENT_LINE $25E6 depends on the distance of the current integrator position to actual zero point
COMMENT_LINE $25E6 experiment with my vectri:
COMMENT_LINE $25E6 ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
COMMENT_LINE $25E6 If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
COMMENT_LINE $25E6 - scale $ff -> zero 110 cycles
COMMENT_LINE $25E6 - scale $7f -> zero 75 cycles
COMMENT_LINE $25E6 - scale $40 -> zero 57 cycles
COMMENT_LINE $25E6 - scale $20 -> zero 53 cycles
COMMENT_LINE $25E6 put move position on stack put it so, that we can load "d" directly from stack
COMMENT $25E8 load line counter
COMMENT $25EA height counter +width counter +
FORCE_SYMBOL $25EA Vec_Counter_1
COMMENT $25ED width counter (work)
FORCE_SYMBOL $25ED Vec_Counter_3
COMMENT_LINE $25F0 setup VIA raster routine
COMMENT_LINE $25F0 setup rampin with auxControl
COMMENT_LINE $25F0 zero
COMMENT $25F0 zero the integrators
COMMENT $25F3 store zeroing values to cntl
FORCE_SYMBOL $25F3 VIA_cntl
COMMENT_LINE $25F5 ldb      #ZERO_DELAY                  ; and wait for zeroing to be actually done
COMMENT_LINE $25F5 reset integrators
COMMENT $25F5 reset integrator offset
FORCE_SYMBOL $25F5 VIA_port_a
COMMENT_LINE $25F7 wait that zeroing surely has the desired effect!
COMMENT $25F7 while waiting, zero offsets
FORCE_SYMBOL $25F7 VIA_port_b
COMMENT_LINE $25F9 decb
COMMENT_LINE $25F9 bne      zeroLoop
FORCE_SYMBOL $25F9 VIA_port_b
COMMENT_LINE $25FB unzero is done by moveto_d
FORCE_SYMBOL $25FB SCALE_MOVE
FORCE_SYMBOL $25FD VIA_t1_cnt_lo
FORCE_NO_SYMBOL $25FF
COMMENT_LINE $2601 ;;;;; move to d as direct code start
COMMENT $2601 Store Y in D/A register
FORCE_SYMBOL $2601 VIA_port_a
COMMENT $2603 Blank low, zero high?
FORCE_NO_SYMBOL $2603
FORCE_SYMBOL $2605 VIA_cntl
COMMENT $2608 Enable mux
FORCE_SYMBOL $2608 VIA_port_b
COMMENT $260A Clear shift regigster
FORCE_SYMBOL $260A VIA_shift_reg
COMMENT $260C Disable mux
FORCE_SYMBOL $260C VIA_port_b
COMMENT $260E Store X in D/A register
FORCE_SYMBOL $260E VIA_port_a
COMMENT $2610 enable timer
FORCE_SYMBOL $2610 VIA_t1_cnt_hi
COMMENT $2612 reload line width
FORCE_SYMBOL $2612 Vec_Counter_2
FORCE_SYMBOL $2615 Vec_Counter_3
COMMENT $2618 optimized correct adder for next scan line
COMMENT $261A done befor wait loop of move to d
FORCE_NO_SYMBOL $261A
FORCE_NO_SYMBOL $261C
COMMENT $261E mux disabled, mux sel = y int
FORCE_SYMBOL $2621 VIA_int_flags
COMMENT_LINE $2625 ;;;;; move to d as direct code end
COMMENT_LINE $2625 ensure y int does nothing
COMMENT $2625 to via b
FORCE_SYMBOL $2625 VIA_port_b
COMMENT $2627 ensure dac is 0
FORCE_SYMBOL $2627 VIA_port_a
COMMENT $2629 enable mux
FORCE_SYMBOL $2629 VIA_port_b
COMMENT_LINE $262B nop ; delay
COMMENT $262B disable mux
FORCE_SYMBOL $262B VIA_port_b
COMMENT $262D a = $18,
FORCE_NO_SYMBOL $262D
COMMENT $262F $18: T1 OneSHotMode WITHOUT Ramp control, Shift out under System clock
FORCE_SYMBOL $262F VIA_aux_cntl
COMMENT $2631 get width
FORCE_SYMBOL $2631 Vec_Text_Width
COMMENT $2634 Send it to the D/A
FORCE_SYMBOL $2634 VIA_port_a
COMMENT $2636 a = $01
FORCE_NO_SYMBOL $2636
COMMENT $2638 Enable RAMP, disable mux
FORCE_SYMBOL $2638 VIA_port_b
COMMENT_LINE $263A output is ongoing! (RAMP is enabled)
COMMENT $263A [5]
FORCE_SYMBOL $263A Vec_Counter_3
COMMENT $263D [2] wait
COMMENT $263E [2] wait
COMMENT $263F [6] get bitmap (shiftreg-data) from raster table
COMMENT $2641 [4] This loop needs to have exactly 18 cycles (8*2+2)
FORCE_SYMBOL $2641 VIA_shift_reg
COMMENT_LINE $2643 one complete shiftreg output takes 16 cycles (8*2) + 2 cycles since VIA needs some rest
COMMENT $2643 [3]
COMMENT $2645 [2]
COMMENT $2646 [3] go back if not done for line
COMMENT $2648 [2] delay 2 to finish last shiftout
COMMENT $2649 [4] b is 0 now, switch of shift
FORCE_SYMBOL $2649 VIA_shift_reg
COMMENT_LINE $264B don't bother about ramp and dac, in the next round all will be resetted
COMMENT $264B EXIT routine
FORCE_NO_SYMBOL $264B
COMMENT $264D T1->PB7 enabled
FORCE_SYMBOL $264D VIA_aux_cntl
COMMENT $264F check for last row
FORCE_SYMBOL $264F Vec_Counter_1
COMMENT $2652 branch if not last row
COMMENT $2654 all done, correct stack
COMMENT_LINE $2656 rts
COMMENT_LINE $2656 ***************************************************************************
COMMENT_LINE $2656 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2656 in 2016
COMMENT_LINE $2656 all stuff contained here is public domain
COMMENT_LINE $2656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2656 this file contains macros that are used to print the score while in game  ;
COMMENT_LINE $2656 It is special in the way that it uses an own 5 line FONT                  ;
COMMENT_LINE $2656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2656 High score in Karl Quappe - 3 parts
COMMENT_LINE $2656 1) HighScore while playing
COMMENT_LINE $2656 2) Highscore in HighscoreTable
COMMENT_LINE $2656 3) Highscore on Eprom
COMMENT_LINE $2656 1) While playing - is kept  in 5 seperate bytes
COMMENT_LINE $2656 score_digit_1 - score_digit_5
COMMENT_LINE $2656 each of these digits has a range from 0-9
COMMENT_LINE $2656 digit 5 (MSB) has a range from 0-16
COMMENT_LINE $2656 each digit is printed with a special font, 0-9 representing 0-9 and 10-16 representing 10-16 (in one character)
COMMENT_LINE $2656 so the highest score displayable is: 16 999 0 (last character is always a "0")
COMMENT_LINE $2656 2) Highscore table consists of 6 ascii characters representing the score in ascii nothing special here
COMMENT_LINE $2656 3) Highscore on the eprom is kept as a 16bit unsigned int (0-65535)
COMMENT_LINE $2656 upon conversion the score is shifted one position to the right (divided by 10), since the last position is always a 0
COMMENT_LINE $2656 Thus on the eprom a score up to 655350 can be stored.
COMMENT_LINE $2656 ergo: in game highscore is correct displayed up to a score of 169990
COMMENT_LINE $2656 highscore recording and displaying in HS table is correct up to a score of 655350
COMMENT_LINE $2656 after that the score starts from 0 again
COMMENT_LINE $2656 ***************************************************************************
FORCE_SYMBOL $2656 gameModeOption
FORCE_SYMBOL $2659 current_highscore_gameMode
FORCE_SYMBOL $265C isAttractMode
COMMENT $265F save recal counter, since
FORCE_SYMBOL $265F RecalCounter
FORCE_SYMBOL $2664 isAttractMode
FORCE_SYMBOL $2667 DP_to_D0
COMMENT_LINE $266A setup high score editing stuff, like cursor pos and blinking
FORCE_SYMBOL $266A currentHSEditPlace
FORCE_SYMBOL $266D currentHSEditBlinkState
COMMENT $2670 all letters in editor start with A-position
FORCE_SYMBOL $2672 hsEditLetter1
FORCE_SYMBOL $2675 hsEditLetter2
FORCE_SYMBOL $2678 hsEditLetter3
FORCE_SYMBOL $267B shutup
COMMENT $267E recal counter is used as blinking "counter"
FORCE_SYMBOL $267E RecalCounter
COMMENT $2684 get button status once, since only
FORCE_SYMBOL $2684 Read_Btns
COMMENT_LINE $2687 differences are noticed
COMMENT $2687 is music still playing?
FORCE_SYMBOL $2687 Vec_Music_Flag
COMMENT $268A than jump
COMMENT $268C load adddress of music structure
FORCE_SYMBOL $268C yankee
COMMENT $268F and play the tune again...
COMMENT_LINE $268F the next instructions initialize a new sound
COMMENT_LINE $268F load #1
COMMENT_LINE $268F set this as marker for music start
COMMENT_LINE $268F CLR      Vec_Music_Flag               ; doesn'T destroy a register
COMMENT_LINE $268F INC      Vec_Music_Flag               ; to do it that way
FORCE_NO_SYMBOL $268F
FORCE_SYMBOL $2691 Vec_Music_Flag
COMMENT $2694 load a music structure (piece_of_music)
FORCE_SYMBOL $2694 yankee
COMMENT $2697 and store it to my own music active pointer
FORCE_SYMBOL $2697 music_active
COMMENT_LINE $269A next a do_my_sound and than do sound must be called
COMMENT $269A well, the startup...
FORCE_SYMBOL $269A musicOption
COMMENT $269F (MAKRO) see above
COMMENT $269F (MAKRO) the 'Init_Music_chk' expects this
FORCE_NO_SYMBOL $269F
COMMENT $26A3 get active music
FORCE_SYMBOL $26A3 music_active
COMMENT $26A5 and init new notes
FORCE_SYMBOL $26A5 Init_Music_chk
COMMENT $26A8 recal counter, about 21 Minutes befor roll over
FORCE_SYMBOL $26A8 RecalCounter
FORCE_NO_SYMBOL $26AB
FORCE_SYMBOL $26AD RecalCounter
COMMENT $26B0 sets dp to d0, and pos at 0, 0
FORCE_SYMBOL $26B0 Wait_Recal
COMMENT $26B3 just for assembler optimization...
COMMENT $26B3 ROM function that does the sound playing
FORCE_SYMBOL $26B3 Do_Sound
COMMENT $26B6 load default text height & width
FORCE_SYMBOL $26B6 NORMAL_TEXT_SIZE
COMMENT $26B9 poke it to ram location
FORCE_SYMBOL $26B9 Vec_Text_HW
COMMENT $26BC Sets the intensity of the
FORCE_SYMBOL $26BC Intensity_5F
COMMENT_LINE $26BF ldd      #$ff3c
FORCE_NO_SYMBOL $26BF
FORCE_SYMBOL $26C2 Vec_Text_Height
FORCE_NO_SYMBOL $26C5
COMMENT $26C7 move to time 1 lo, this means scaling
FORCE_SYMBOL $26C7 VIA_t1_cnt_lo
COMMENT $26C9 max, since -2 in each step
FORCE_NO_SYMBOL $26C9
COMMENT $26CC high score title
FORCE_SYMBOL $26CC highscore_string
FORCE_SYMBOL $26CF sync_Print_Str_d_fixed
FORCE_SYMBOL $26D2 current_highscore_gameMode
FORCE_NO_SYMBOL $26D5
FORCE_SYMBOL $26D9 hardcore_string
FORCE_SYMBOL $26DC highScoreHardTable
COMMENT $26DF max, since -2 in each step
FORCE_NO_SYMBOL $26DF
FORCE_SYMBOL $26E4 competition_string
FORCE_SYMBOL $26E7 highScoreTable
COMMENT $26EA max, since -2 in each step
FORCE_NO_SYMBOL $26EA
FORCE_SYMBOL $26EF sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $26F4
FORCE_SYMBOL $26F6 tmp2
FORCE_NO_SYMBOL $26F9
COMMENT $26FE counter of highscores handled
FORCE_SYMBOL $26FE mul_tmp2
COMMENT $2701 build one highscore line (X is scoretable entry parameter)
FORCE_SYMBOL $2701 buildHighScoreTmp
COMMENT_LINE $2704 change string to appear edited!
FORCE_SYMBOL $2704 highScoreEditMode
COMMENT $2709 Sets the intensity of the
FORCE_SYMBOL $2709 Intensity_5F
FORCE_SYMBOL $270C highScorePlace
FORCE_SYMBOL $270F mul_tmp2
COMMENT $2714 Sets the intensity of the
FORCE_SYMBOL $2714 Intensity_7F
COMMENT_LINE $2717 the current score string is the one we are editing currently
COMMENT_LINE $2717 that high score takes its "name" letters from the special editor positions
COMMENT_LINE $2717 the following code replaces in the tmp line the 3 letters,
COMMENT_LINE $2717 in relation to the blink state also exchanges a letter with an underscore
FORCE_NO_SYMBOL $271A
FORCE_SYMBOL $271E currentHSEditBlinkState
FORCE_NO_SYMBOL $2722
FORCE_SYMBOL $2724 currentHSEditBlinkState
FORCE_SYMBOL $2727 highScoreTmpBuffer
FORCE_SYMBOL $272A hsEditLetter1
FORCE_NO_SYMBOL $272D
FORCE_SYMBOL $272F hsEditLetter2
FORCE_NO_SYMBOL $2732
FORCE_SYMBOL $2734 hsEditLetter3
FORCE_NO_SYMBOL $2737
FORCE_SYMBOL $2739 currentHSEditBlinkState
COMMENT_LINE $273E here place cursor instead of Letter
FORCE_SYMBOL $2740 currentHSEditPlace
COMMENT_LINE $2745 each line of the high score is printed out, regardless of editing
FORCE_SYMBOL $2745 mul_tmp2
FORCE_SYMBOL $2748 HighScoreEntry
FORCE_NO_SYMBOL $274A
COMMENT $274C move to time 1 lo, this means scaling
FORCE_SYMBOL $274C VIA_t1_cnt_lo
FORCE_SYMBOL $274E highScoreTmpBuffer
FORCE_NO_SYMBOL $2751
COMMENT $2753 save x pointer
FORCE_SYMBOL $2755 sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $275A
COMMENT $275C next highscore entry is 30 "pixels" down
FORCE_NO_SYMBOL $275C
FORCE_NO_SYMBOL $275E
FORCE_SYMBOL $2760 tmp2
FORCE_SYMBOL $2767 query_joystick
COMMENT $276A if in edit mode - do question the joystick... and stuff
FORCE_SYMBOL $276A highScoreEditMode
COMMENT_LINE $276D hey dissi "bre ak once"
COMMENT $276D otherwise stay here and "return" to main screen on button press
COMMENT $276F only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $276F last_joy_x
COMMENT $2772 load joystick 1 position X to A
FORCE_SYMBOL $2772 Vec_Joy_1_X
COMMENT $2775 store this joystick position
FORCE_SYMBOL $2775 last_joy_x
FORCE_SYMBOL $277D current_highscore_gameMode
FORCE_NO_SYMBOL $2780
FORCE_NO_SYMBOL $2784
FORCE_SYMBOL $2786 current_highscore_gameMode
FORCE_SYMBOL $278B current_highscore_gameMode
COMMENT $278E get button status
FORCE_SYMBOL $278E Read_Btns
COMMENT $2791 is a button pressed?
FORCE_NO_SYMBOL $2791
COMMENT $2793 no, than stay in init_screen_loop
COMMENT $2797 restore counter
FORCE_SYMBOL $2799 RecalCounter
FORCE_SYMBOL $279C isAttractMode
COMMENT_LINE $27A0 ***************************************************************************
COMMENT_LINE $27A0 get joystick
COMMENT_LINE $27A0 left right change cursor pos
COMMENT_LINE $27A0 up down, change letters
COMMENT_LINE $27A0 any button finish editing
COMMENT $27A0 get button status
FORCE_SYMBOL $27A0 Read_Btns
COMMENT $27A3 is a button pressed?
FORCE_NO_SYMBOL $27A3
COMMENT $27A5 no, than stay in init_screen_loop
COMMENT_LINE $27A7 X POS TESTS
COMMENT $27A7 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $27A7 last_joy_x
COMMENT $27AA load joystick 1 position X to A
FORCE_SYMBOL $27AA Vec_Joy_1_X
COMMENT $27AD store this joystick position
FORCE_SYMBOL $27AD last_joy_x
COMMENT $27B2 joystick moved to left
COMMENT $27B4 test the old joystick position
COMMENT $27B5 was center
COMMENT_LINE $27B7 move right, letterpos =  letterpos +1
FORCE_SYMBOL $27B7 currentHSEditPlace
FORCE_SYMBOL $27BA currentHSEditPlace
FORCE_NO_SYMBOL $27BD
FORCE_SYMBOL $27C1 currentHSEditPlace
COMMENT $27C6 test the old joystick position
COMMENT $27C7 was center
FORCE_SYMBOL $27C9 currentHSEditPlace
FORCE_NO_SYMBOL $27CE
FORCE_SYMBOL $27D0 currentHSEditPlace
COMMENT_LINE $27D5 Y POS TESTS
COMMENT $27D5 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $27D5 last_joy_y
COMMENT $27D8 load joystick 1 position X to A
FORCE_SYMBOL $27D8 Vec_Joy_1_Y
COMMENT $27DB store this joystick position
FORCE_SYMBOL $27DB last_joy_y
COMMENT $27E0 joystick moved to left
COMMENT $27E2 test the old joystick position
COMMENT $27E3 was center
COMMENT_LINE $27E5 move up, letter =  letter -1
FORCE_SYMBOL $27E5 currentHSEditPlace
FORCE_SYMBOL $27E8 hsEditLetter1
COMMENT $27F8 test the old joystick position
COMMENT $27F9 was center
FORCE_SYMBOL $27FB currentHSEditPlace
FORCE_SYMBOL $27FE hsEditLetter1
FORCE_SYMBOL $280C highscores_screen_loop_1
COMMENT_LINE $280F write letters to HS and exit
FORCE_SYMBOL $280F current_highscore_gameMode
FORCE_NO_SYMBOL $2812
FORCE_SYMBOL $2816 highScoreHardTable
FORCE_SYMBOL $281B highScoreTable
COMMENT_LINE $281E LDU #highScoreTable
FORCE_SYMBOL $281E highScorePlace
FORCE_SYMBOL $2823 HighScoreEntry
FORCE_SYMBOL $2828 hsEditLetter1
FORCE_NO_SYMBOL $282B
FORCE_SYMBOL $282D hsEditLetter2
FORCE_NO_SYMBOL $2830
FORCE_SYMBOL $2832 hsEditLetter3
FORCE_NO_SYMBOL $2835
FORCE_SYMBOL $2839 RecalCounter
FORCE_SYMBOL $283C isAttractMode
COMMENT_LINE $2840 ***************************************************************************
COMMENT_LINE $284B score table entry in x
COMMENT_LINE $284B destroys D, y
COMMENT_LINE $284B this builds one "highscore" line, that can be printed in the highscore screen
FORCE_SYMBOL $284B highScoreTmpBuffer
COMMENT $284F name
FORCE_NO_SYMBOL $284F
COMMENT $2853 name
FORCE_NO_SYMBOL $2853
COMMENT $285B and level
FORCE_NO_SYMBOL $285B
FORCE_NO_SYMBOL $285D
FORCE_NO_SYMBOL $2865
COMMENT $2869 space
COMMENT $2873 space
FORCE_NO_SYMBOL $2875
COMMENT $2877 2 byte of score
FORCE_NO_SYMBOL $2879
COMMENT $287B 2 byte of score
FORCE_NO_SYMBOL $287D
COMMENT $287F 2 byte of score
FORCE_NO_SYMBOL $2881
COMMENT $2883 score done
COMMENT_LINE $2886 ***************************************************************************
COMMENT_LINE $2886 ***************************************************************************
COMMENT_LINE $2886 divide 16 bit number in D by 16 bit number in tmp1, result must fit in 8 bit, result in b
COMMENT_LINE $2886 UNSIGNED
FORCE_SYMBOL $2886 divide_tmp
FORCE_SYMBOL $2889 tmp1
FORCE_SYMBOL $2895 divide_tmp
FORCE_SYMBOL $289A divide_tmp
FORCE_SYMBOL $28A0 divide_tmp
FORCE_SYMBOL $28A3 tmp1
FORCE_SYMBOL $28A8 divide_tmp
COMMENT_LINE $28AC ***************************************************************************
COMMENT_LINE $28AC destroys tmp1 tmp2, alters X
FORCE_SYMBOL $28AE tmp2
FORCE_SYMBOL $28B1 tmp1
FORCE_SYMBOL $28B6 tmp2
FORCE_SYMBOL $28BB tmp1
FORCE_SYMBOL $28BE tmp2
COMMENT_LINE $28C7 rts
COMMENT_LINE $28C7 ***************************************************************************
COMMENT_LINE $28C7 SLOW but straight forward, no need for speed!
COMMENT_LINE $28C7 input number in D
COMMENT_LINE $28C7 output number * 10 as ascii in conversionBuffer (with $80)
COMMENT_LINE $28C7 max result -> 655350
COMMENT_LINE $28C7 destroys u,x,y,d, tmp1 (16bit), tmp2 (16bit), divide_tmp
FORCE_SYMBOL $28C7 conversionBuffer
FORCE_NO_SYMBOL $28CD
FORCE_SYMBOL $28D0 tmp1
FORCE_NO_SYMBOL $28D9
FORCE_NO_SYMBOL $28DD
FORCE_SYMBOL $28E0 tmp1
FORCE_NO_SYMBOL $28E9
FORCE_NO_SYMBOL $28ED
FORCE_SYMBOL $28F0 tmp1
FORCE_NO_SYMBOL $28F9
FORCE_NO_SYMBOL $28FD
FORCE_SYMBOL $2900 tmp1
FORCE_NO_SYMBOL $2909
FORCE_NO_SYMBOL $290D
FORCE_SYMBOL $2910 tmp1
FORCE_NO_SYMBOL $291A
FORCE_NO_SYMBOL $291F
COMMENT_LINE $2923 rts
COMMENT_LINE $2923 ***************************************************************************
COMMENT_LINE $2923 loads the 5 ascii score pointed by x to
COMMENT_LINE $2923 the 6 bcd score conversion buffer
COMMENT_LINE $2923 destroys d
FORCE_SYMBOL $2923 conversionBuffer
FORCE_NO_SYMBOL $2927
FORCE_NO_SYMBOL $2929
FORCE_NO_SYMBOL $292B
FORCE_NO_SYMBOL $292D
FORCE_NO_SYMBOL $292F
FORCE_NO_SYMBOL $2931
FORCE_NO_SYMBOL $2933
FORCE_NO_SYMBOL $2935
COMMENT_LINE $2938 ***************************************************************************
COMMENT_LINE $2938 add to all values in conversion buffer a '0'
COMMENT_LINE $2938 destroys d, x
FORCE_NO_SYMBOL $2938
FORCE_SYMBOL $293A conversionBuffer
FORCE_NO_SYMBOL $293F
COMMENT_LINE $2947 ***************************************************************************
COMMENT_LINE $2947 destroys d
FORCE_NO_SYMBOL $2949
COMMENT_LINE $295A ***************************************************************************
COMMENT_LINE $295A destroys d
FORCE_NO_SYMBOL $295C
COMMENT_LINE $296D scrolls position of score one to the right
COMMENT_LINE $296D up to a max score of 199990 -> 19999
COMMENT_LINE $296D "bcd" values expected in conversion buffer
FORCE_SYMBOL $296D conversionBuffer
FORCE_NO_SYMBOL $2971
FORCE_NO_SYMBOL $2973
FORCE_NO_SYMBOL $2975
FORCE_NO_SYMBOL $2977
FORCE_NO_SYMBOL $2979
FORCE_NO_SYMBOL $297D
FORCE_NO_SYMBOL $297F
FORCE_NO_SYMBOL $2981
FORCE_NO_SYMBOL $2983
FORCE_NO_SYMBOL $2986
FORCE_NO_SYMBOL $2988
COMMENT_LINE $298B ***************************************************************************
COMMENT_LINE $298B SLOW but straight forward, no need for speed!
COMMENT_LINE $298B input asccii in conversionBuffer 6 bytes + $80
COMMENT_LINE $298B last zero is discarded!
COMMENT_LINE $298B max input 655350
COMMENT_LINE $298B destroys x,y,d, tmp1 (16bit), tmp2 (16bit)
FORCE_SYMBOL $298B conversionBuffer
FORCE_NO_SYMBOL $2991
FORCE_NO_SYMBOL $2994
FORCE_NO_SYMBOL $2998
FORCE_NO_SYMBOL $299D
FORCE_NO_SYMBOL $29A1
FORCE_NO_SYMBOL $29A6
FORCE_NO_SYMBOL $29AA
FORCE_NO_SYMBOL $29AF
FORCE_NO_SYMBOL $29B3
FORCE_NO_SYMBOL $29B8
FORCE_NO_SYMBOL $29BC
COMMENT_LINE $29C4 ***************************************************************************
FORCE_SYMBOL $29C4 tmp1
FORCE_SYMBOL $29CD tmp2
FORCE_SYMBOL $29D0 tmp2
FORCE_SYMBOL $29D3 tmp1
COMMENT_LINE $29DD ***************************************************************************
COMMENT_LINE $29DD ***************************************************************************
COMMENT_LINE $2A7B ***************************************************************************
COMMENT_LINE $2A7B include vector sprite definitions
COMMENT_LINE $2A7B ***************************************************************************
COMMENT_LINE $2A89 ***************************************************************************
COMMENT_LINE $2A89 db level
COMMENT_LINE $2A89 following repeat
COMMENT_LINE $2A89 dw time - 0 means attract over
COMMENT_LINE $2A89 db y,x (joystick queries)
COMMENT $2A8A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A8C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A8E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A90 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A92 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A94 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A96 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A98 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2A9E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA4 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA6 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AA8 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAA DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAC DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AAE DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB4 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB6 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AB8 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABA DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABC DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ABE DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC4 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC6 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AC8 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACA DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACC DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ACE DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD0 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD2 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2AD6 ***************************************************************************
COMMENT_LINE $2AD6 db level
COMMENT_LINE $2AD6 following repeat
COMMENT_LINE $2AD6 dw time - 0 means attract over
COMMENT_LINE $2AD6 db y,x (joystick queries)
COMMENT $2AD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2ADF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2AFF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B01 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B03 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B05 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B07 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B09 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B0F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B11 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B13 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B15 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B17 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B19 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B1B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B1D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B1F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B21 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B23 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B25 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B27 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B29 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B2B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $45A0                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $45E6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $45F6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $8604                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $8611                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $861D                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $8628                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $464F                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C664                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C678                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C686                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C691                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C69B                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $46A8                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $46B2                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $46D3                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $46E5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $46F2                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4705                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $475B                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4798                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C850                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $48A5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $88D5                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $48E6                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C8EE                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4900                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $8910                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4922                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C92D                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $C939                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4943                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $494C                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4962                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4975                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4988                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $499F                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $49EF                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2D dw       $4A1C                        ; DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B2F ***************************************************************************
COMMENT_LINE $2B2F db level
COMMENT_LINE $2B2F following repeat
COMMENT_LINE $2B2F dw time - 0 means attract over
COMMENT_LINE $2B2F db y,x (joystick queries)
COMMENT $2B30 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B32 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B34 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B36 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B38 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B3E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B40 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B42 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B44 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B46 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B48 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B4E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B50 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B52 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B54 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B56 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B58 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B5E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B60 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B62 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B64 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B66 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B68 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B6E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B70 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B72 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B74 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B76 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B78 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B7A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B7C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B7E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B80 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B82 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B84 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B86 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2B8A ***************************************************************************
COMMENT_LINE $2B8A db level
COMMENT_LINE $2B8A following repeat
COMMENT_LINE $2B8A dw time - 0 means attract over
COMMENT_LINE $2B8A db y,x (joystick queries)
COMMENT $2B8B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B8D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B93 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B95 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B97 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B99 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2B9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BCF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BDF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2BFF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C01 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C03 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C05 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C07 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C09 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C0B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C0D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2C11 ***************************************************************************
COMMENT_LINE $2C11 db level
COMMENT_LINE $2C11 following repeat
COMMENT_LINE $2C11 dw time - 0 means attract over
COMMENT_LINE $2C11 db y,x (joystick queries)
COMMENT $2C12 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C14 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C16 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C18 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C1E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C20 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C22 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C24 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C26 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C28 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C2E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C30 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C32 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C34 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C36 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C38 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C3E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C40 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C42 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C44 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C46 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C48 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C4E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C50 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C52 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C54 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C56 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C58 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C5E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C60 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C62 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C64 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C66 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C68 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C6A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C6C DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C6E DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C70 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C72 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C74 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C76 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C78 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C7A DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2C7E ***************************************************************************
COMMENT_LINE $2C7E db level
COMMENT_LINE $2C7E following repeat
COMMENT_LINE $2C7E dw time - 0 means attract over
COMMENT_LINE $2C7E db y,x (joystick queries)
COMMENT $2C7F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C81 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C83 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C85 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C87 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C89 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C93 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C95 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C97 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C99 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2C9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CCF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CD9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CDF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CE9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CEB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CED DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CEF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2CF7 one data = of screen movings in title
COMMENT $2CF7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CF9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2CFF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D01 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D03 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D05 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D07 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D09 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D0B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D0D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D0F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D11 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D13 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D15 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D17 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D19 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D1B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D1D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2D21 one data = of screen movings in title
COMMENT $2D21 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D23 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D25 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D27 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D29 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D2F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D31 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D33 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D35 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D37 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D39 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D3F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D41 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D43 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D45 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D47 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D49 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D4F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D51 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D53 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D55 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D57 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D59 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D5F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2D63 one data = of screen movings in title
COMMENT $2D63 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D65 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D67 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D69 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D6F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D71 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D73 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D75 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D77 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D79 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D7F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D81 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D83 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D85 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D87 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D89 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D8B DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D8D DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D8F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D91 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2D9D zero terminate
COMMENT $2D9F DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DA9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DAF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DB9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DBF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC7 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DC9 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DCB DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DCD DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DCF DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DD1 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DD3 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT $2DD5 DVaa aaaa aaaa aaaa , a=RecalCounter, D=1->X (Y else), V=1->1 (-1 else)
COMMENT_LINE $2DD9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2DD9 in 2016
COMMENT_LINE $2DD9 all stuff contained here is public domain
COMMENT_LINE $2DD9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2DD9 this file contains all definitions for morphing objects used throughout   ;
COMMENT_LINE $2DD9 vectrex frogger                                                           ;
COMMENT_LINE $2DD9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2E58 only one morphing at a time supported for now!!!
COMMENT $2E58 morph from
COMMENT $2E5A morph to
COMMENT $2E5C morph steps
COMMENT $2E5D delay between one morph step
COMMENT $2E5E optional (0 or structure)
COMMENT_LINE $2E60 pointer to next morph structure
COMMENT $2E60 startup delay
COMMENT $2E61 morph from
COMMENT $2E63 morph to
COMMENT $2E65 morph steps
COMMENT $2E66 delay between one morph step
COMMENT $2E67 optional (0 or structure)
COMMENT_LINE $2E69 pointer to next morph structure
COMMENT $2E69 startup delay
COMMENT $2E6A morph from
COMMENT $2E6C morph to
COMMENT $2E6E morph steps
COMMENT $2E6F delay between one morph step
COMMENT $2E70 optional (0 or structure)
COMMENT_LINE $2E72 pointer to next morph structure
COMMENT $2E72 startup delay
COMMENT $2E73 morph from
COMMENT $2E75 morph to
COMMENT $2E77 morph steps
COMMENT $2E78 delay between one morph step
COMMENT $2E79 optional (0 or structure)
COMMENT_LINE $2E7B pointer to next morph structure
COMMENT $2E7B startup delay
COMMENT $2E7C morph from
COMMENT $2E7E morph to
COMMENT $2E80 morph steps
COMMENT $2E81 delay between one morph step
COMMENT $2E82 optional (0 or structure)
COMMENT_LINE $2E84 pointer to next morph structure
COMMENT $2E84 startup delay
COMMENT $2E85 morph from
COMMENT $2E87 morph to
COMMENT $2E89 morph steps
COMMENT $2E8A delay between one morph step
COMMENT $2E8B optional (0 or structure)
COMMENT_LINE $2E8D pointer to next morph structure
COMMENT $2E8D startup delay
COMMENT_LINE $2E8E ***************************************************************************
COMMENT_LINE $2E8E this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2E8E in 2016
COMMENT_LINE $2E8E all stuff contained here is public domain
COMMENT_LINE $2E8E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2E8E this file contains the vector list for the home of frogger                ;
COMMENT_LINE $2E8E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $2E8E 21 vectors are drawn
COMMENT $2E99 _ _ _ _ _
COMMENT $2E9B __I I_I I_I I_I I_I I__
COMMENT_LINE $2EB9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $2EB9 in 2016
COMMENT_LINE $2EB9 all stuff contained here is public domain
COMMENT_LINE $2EB9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2EB9 this file contains 'sprite' definition data for all frogs (non morphing)  ;
COMMENT_LINE $2EB9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $2EB9 These are manual values, that respresent the
COMMENT_LINE $2EB9 visual offset the current frog sprite has in relation to its
COMMENT_LINE $2EB9 position
COMMENT_LINE $2EB9 the offset is neccesary, since not all vectorlists of the sprite
COMMENT_LINE $2EB9 start at the same "grid position"
COMMENT $2EB9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EBA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EBB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EBC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EBD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EBE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $2EBF -1 ; offsets y in 'SCALE_FACTOR_GAME'
COMMENT $2EC0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT_LINE $2ED1 DB +$17 ; number of lines to draw
COMMENT $2ED3 draw to y, x
COMMENT $2ED5 draw to y, x
COMMENT $2ED7 draw to y, x
COMMENT $2ED9 draw to y, x
COMMENT $2EDB draw to y, x
COMMENT $2EDD draw to y, x
COMMENT $2EDF draw to y, x
COMMENT $2EE1 draw to y, x
COMMENT $2EE3 draw to y, x
COMMENT $2EE5 draw to y, x
COMMENT $2EE7 draw to y, x
COMMENT $2EE9 draw to y, x
COMMENT $2EEB draw to y, x
COMMENT $2EED draw to y, x
COMMENT $2EEF draw to y, x
COMMENT $2EF1 draw to y, x
COMMENT $2EF3 draw to y, x
COMMENT $2EF5 draw to y, x
COMMENT $2EF7 draw to y, x
COMMENT_LINE $2EF9 DB +$17 ; number of lines to draw
COMMENT $2EFB draw to y, x
COMMENT $2EFD draw to y, x
COMMENT $2EFF draw to y, x
COMMENT $2F01 draw to y, x
COMMENT $2F03 draw to y, x
COMMENT $2F05 draw to y, x
COMMENT $2F07 draw to y, x
COMMENT $2F09 draw to y, x
COMMENT $2F0B draw to y, x
COMMENT $2F0D draw to y, x
COMMENT $2F0F draw to y, x
COMMENT $2F11 draw to y, x
COMMENT $2F13 draw to y, x
COMMENT $2F15 draw to y, x
COMMENT $2F17 draw to y, x
COMMENT $2F19 draw to y, x
COMMENT $2F1B draw to y, x
COMMENT $2F1D draw to y, x
COMMENT $2F1F draw to y, x
COMMENT_LINE $2F21 DB +$17 ; number of lines to draw
COMMENT $2F23 draw to y, x
COMMENT $2F25 draw to y, x
COMMENT $2F27 draw to y, x
COMMENT $2F29 draw to y, x
COMMENT $2F2B draw to y, x
COMMENT $2F2D draw to y, x
COMMENT $2F2F draw to y, x
COMMENT $2F31 draw to y, x
COMMENT $2F33 draw to y, x
COMMENT $2F35 draw to y, x
COMMENT $2F37 draw to y, x
COMMENT $2F39 draw to y, x
COMMENT $2F3B draw to y, x
COMMENT $2F3D draw to y, x
COMMENT $2F3F draw to y, x
COMMENT $2F41 draw to y, x
COMMENT $2F43 draw to y, x
COMMENT $2F45 draw to y, x
COMMENT $2F47 draw to y, x
COMMENT_LINE $2F49 DB +$17 ; number of lines to draw
COMMENT $2F4B draw to y, x
COMMENT $2F4D draw to y, x
COMMENT $2F4F draw to y, x
COMMENT $2F51 draw to y, x
COMMENT $2F53 draw to y, x
COMMENT $2F55 draw to y, x
COMMENT $2F57 draw to y, x
COMMENT $2F59 draw to y, x
COMMENT $2F5B draw to y, x
COMMENT $2F5D draw to y, x
COMMENT $2F5F draw to y, x
COMMENT $2F61 draw to y, x
COMMENT $2F63 draw to y, x
COMMENT $2F65 draw to y, x
COMMENT $2F67 draw to y, x
COMMENT $2F69 draw to y, x
COMMENT $2F6B draw to y, x
COMMENT $2F6D draw to y, x
COMMENT $2F6F draw to y, x
COMMENT_LINE $2F71 DB +$17 ; number of lines to draw
COMMENT $2F73 draw to y, x
COMMENT $2F75 draw to y, x
COMMENT $2F77 draw to y, x
COMMENT $2F79 draw to y, x
COMMENT $2F7B draw to y, x
COMMENT $2F7D draw to y, x
COMMENT $2F7F draw to y, x
COMMENT $2F81 draw to y, x
COMMENT $2F83 draw to y, x
COMMENT $2F85 draw to y, x
COMMENT $2F87 draw to y, x
COMMENT $2F89 draw to y, x
COMMENT $2F8B draw to y, x
COMMENT $2F8D draw to y, x
COMMENT $2F8F draw to y, x
COMMENT $2F91 draw to y, x
COMMENT $2F93 draw to y, x
COMMENT $2F95 draw to y, x
COMMENT $2F97 draw to y, x
COMMENT_LINE $2F99 DB +$17 ; number of lines to draw
COMMENT $2F9B draw to y, x
COMMENT $2F9D draw to y, x
COMMENT $2F9F draw to y, x
COMMENT $2FA1 draw to y, x
COMMENT $2FA3 draw to y, x
COMMENT $2FA5 draw to y, x
COMMENT $2FA7 draw to y, x
COMMENT $2FA9 draw to y, x
COMMENT $2FAB draw to y, x
COMMENT $2FAD draw to y, x
COMMENT $2FAF draw to y, x
COMMENT $2FB1 draw to y, x
COMMENT $2FB3 draw to y, x
COMMENT $2FB5 draw to y, x
COMMENT $2FB7 draw to y, x
COMMENT $2FB9 draw to y, x
COMMENT $2FBB draw to y, x
COMMENT $2FBD draw to y, x
COMMENT $2FBF draw to y, x
COMMENT_LINE $2FD1 DB +$17 ; number of lines to draw
COMMENT $2FD3 draw to y, x
COMMENT $2FD5 draw to y, x
COMMENT $2FD7 draw to y, x
COMMENT $2FD9 draw to y, x
COMMENT $2FDB draw to y, x
COMMENT $2FDD draw to y, x
COMMENT $2FDF draw to y, x
COMMENT $2FE1 draw to y, x
COMMENT $2FE3 draw to y, x
COMMENT $2FE5 draw to y, x
COMMENT $2FE7 draw to y, x
COMMENT $2FE9 draw to y, x
COMMENT $2FEB draw to y, x
COMMENT $2FED draw to y, x
COMMENT $2FEF draw to y, x
COMMENT $2FF1 draw to y, x
COMMENT $2FF3 draw to y, x
COMMENT $2FF5 draw to y, x
COMMENT $2FF7 draw to y, x
COMMENT_LINE $2FF9 DB +$17 ; number of lines to draw
COMMENT $2FFB draw to y, x
COMMENT $2FFD draw to y, x
COMMENT $2FFF draw to y, x
COMMENT $3001 draw to y, x
COMMENT $3003 draw to y, x
COMMENT $3005 draw to y, x
COMMENT $3007 draw to y, x
COMMENT $3009 draw to y, x
COMMENT $300B draw to y, x
COMMENT $300D draw to y, x
COMMENT $300F draw to y, x
COMMENT $3011 draw to y, x
COMMENT $3013 draw to y, x
COMMENT $3015 draw to y, x
COMMENT $3017 draw to y, x
COMMENT $3019 draw to y, x
COMMENT $301B draw to y, x
COMMENT $301D draw to y, x
COMMENT $301F draw to y, x
COMMENT_LINE $3021 DB +$17 ; number of lines to draw
COMMENT $3023 draw to y, x
COMMENT $3025 draw to y, x
COMMENT $3027 draw to y, x
COMMENT $3029 draw to y, x
COMMENT $302B draw to y, x
COMMENT $302D draw to y, x
COMMENT $302F draw to y, x
COMMENT $3031 draw to y, x
COMMENT $3033 draw to y, x
COMMENT $3035 draw to y, x
COMMENT $3037 draw to y, x
COMMENT $3039 draw to y, x
COMMENT $303B draw to y, x
COMMENT $303D draw to y, x
COMMENT $303F draw to y, x
COMMENT $3041 draw to y, x
COMMENT $3043 draw to y, x
COMMENT $3045 draw to y, x
COMMENT $3047 draw to y, x
COMMENT_LINE $3049 DB +$17 ; number of lines to draw
COMMENT $304B draw to y, x
COMMENT $304D draw to y, x
COMMENT $304F draw to y, x
COMMENT $3051 draw to y, x
COMMENT $3053 draw to y, x
COMMENT $3055 draw to y, x
COMMENT $3057 draw to y, x
COMMENT $3059 draw to y, x
COMMENT $305B draw to y, x
COMMENT $305D draw to y, x
COMMENT $305F draw to y, x
COMMENT $3061 draw to y, x
COMMENT $3063 draw to y, x
COMMENT $3065 draw to y, x
COMMENT $3067 draw to y, x
COMMENT $3069 draw to y, x
COMMENT $306B draw to y, x
COMMENT $306D draw to y, x
COMMENT $306F draw to y, x
COMMENT_LINE $3071 DB +$17 ; number of lines to draw
COMMENT $3073 draw to y, x
COMMENT $3075 draw to y, x
COMMENT $3077 draw to y, x
COMMENT $3079 draw to y, x
COMMENT $307B draw to y, x
COMMENT $307D draw to y, x
COMMENT $307F draw to y, x
COMMENT $3081 draw to y, x
COMMENT $3083 draw to y, x
COMMENT $3085 draw to y, x
COMMENT $3087 draw to y, x
COMMENT $3089 draw to y, x
COMMENT $308B draw to y, x
COMMENT $308D draw to y, x
COMMENT $308F draw to y, x
COMMENT $3091 draw to y, x
COMMENT $3093 draw to y, x
COMMENT $3095 draw to y, x
COMMENT $3097 draw to y, x
COMMENT_LINE $3099 DB +$17 ; number of lines to draw
COMMENT $309B draw to y, x
COMMENT $309D draw to y, x
COMMENT $309F draw to y, x
COMMENT $30A1 draw to y, x
COMMENT $30A3 draw to y, x
COMMENT $30A5 draw to y, x
COMMENT $30A7 draw to y, x
COMMENT $30A9 draw to y, x
COMMENT $30AB draw to y, x
COMMENT $30AD draw to y, x
COMMENT $30AF draw to y, x
COMMENT $30B1 draw to y, x
COMMENT $30B3 draw to y, x
COMMENT $30B5 draw to y, x
COMMENT $30B7 draw to y, x
COMMENT $30B9 draw to y, x
COMMENT $30BB draw to y, x
COMMENT $30BD draw to y, x
COMMENT $30BF draw to y, x
COMMENT_LINE $30D1 DB +$17 ; number of lines to draw
COMMENT $30D3 draw to y, x
COMMENT $30D5 draw to y, x
COMMENT $30D7 draw to y, x
COMMENT $30D9 draw to y, x
COMMENT $30DB draw to y, x
COMMENT $30DD draw to y, x
COMMENT $30DF draw to y, x
COMMENT $30E1 draw to y, x
COMMENT $30E3 draw to y, x
COMMENT $30E5 draw to y, x
COMMENT $30E7 draw to y, x
COMMENT $30E9 draw to y, x
COMMENT $30EB draw to y, x
COMMENT $30ED draw to y, x
COMMENT $30EF draw to y, x
COMMENT $30F1 draw to y, x
COMMENT $30F3 draw to y, x
COMMENT $30F5 draw to y, x
COMMENT $30F7 draw to y, x
COMMENT_LINE $30F9 DB +$17 ; number of lines to draw
COMMENT $30FB draw to y, x
COMMENT $30FD draw to y, x
COMMENT $30FF draw to y, x
COMMENT $3101 draw to y, x
COMMENT $3103 draw to y, x
COMMENT $3105 draw to y, x
COMMENT $3107 draw to y, x
COMMENT $3109 draw to y, x
COMMENT $310B draw to y, x
COMMENT $310D draw to y, x
COMMENT $310F draw to y, x
COMMENT $3111 draw to y, x
COMMENT $3113 draw to y, x
COMMENT $3115 draw to y, x
COMMENT $3117 draw to y, x
COMMENT $3119 draw to y, x
COMMENT $311B draw to y, x
COMMENT $311D draw to y, x
COMMENT $311F draw to y, x
COMMENT_LINE $3121 DB +$17 ; number of lines to draw
COMMENT $3123 draw to y, x
COMMENT $3125 draw to y, x
COMMENT $3127 draw to y, x
COMMENT $3129 draw to y, x
COMMENT $312B draw to y, x
COMMENT $312D draw to y, x
COMMENT $312F draw to y, x
COMMENT $3131 draw to y, x
COMMENT $3133 draw to y, x
COMMENT $3135 draw to y, x
COMMENT $3137 draw to y, x
COMMENT $3139 draw to y, x
COMMENT $313B draw to y, x
COMMENT $313D draw to y, x
COMMENT $313F draw to y, x
COMMENT $3141 draw to y, x
COMMENT $3143 draw to y, x
COMMENT $3145 draw to y, x
COMMENT $3147 draw to y, x
COMMENT_LINE $3149 DB +$17 ; number of lines to draw
COMMENT $314B draw to y, x
COMMENT $314D draw to y, x
COMMENT $314F draw to y, x
COMMENT $3151 draw to y, x
COMMENT $3153 draw to y, x
COMMENT $3155 draw to y, x
COMMENT $3157 draw to y, x
COMMENT $3159 draw to y, x
COMMENT $315B draw to y, x
COMMENT $315D draw to y, x
COMMENT $315F draw to y, x
COMMENT $3161 draw to y, x
COMMENT $3163 draw to y, x
COMMENT $3165 draw to y, x
COMMENT $3167 draw to y, x
COMMENT $3169 draw to y, x
COMMENT $316B draw to y, x
COMMENT $316D draw to y, x
COMMENT $316F draw to y, x
COMMENT_LINE $3171 DB +$17 ; number of lines to draw
COMMENT $3173 draw to y, x
COMMENT $3175 draw to y, x
COMMENT $3177 draw to y, x
COMMENT $3179 draw to y, x
COMMENT $317B draw to y, x
COMMENT $317D draw to y, x
COMMENT $317F draw to y, x
COMMENT $3181 draw to y, x
COMMENT $3183 draw to y, x
COMMENT $3185 draw to y, x
COMMENT $3187 draw to y, x
COMMENT $3189 draw to y, x
COMMENT $318B draw to y, x
COMMENT $318D draw to y, x
COMMENT $318F draw to y, x
COMMENT $3191 draw to y, x
COMMENT $3193 draw to y, x
COMMENT $3195 draw to y, x
COMMENT $3197 draw to y, x
COMMENT_LINE $3199 DB +$17 ; number of lines to draw
COMMENT $319B draw to y, x
COMMENT $319D draw to y, x
COMMENT $319F draw to y, x
COMMENT $31A1 draw to y, x
COMMENT $31A3 draw to y, x
COMMENT $31A5 draw to y, x
COMMENT $31A7 draw to y, x
COMMENT $31A9 draw to y, x
COMMENT $31AB draw to y, x
COMMENT $31AD draw to y, x
COMMENT $31AF draw to y, x
COMMENT $31B1 draw to y, x
COMMENT $31B3 draw to y, x
COMMENT $31B5 draw to y, x
COMMENT $31B7 draw to y, x
COMMENT $31B9 draw to y, x
COMMENT $31BB draw to y, x
COMMENT $31BD draw to y, x
COMMENT $31BF draw to y, x
COMMENT_LINE $31D1 DB +$17 ; number of lines to draw
COMMENT $31D3 draw to y, x
COMMENT $31D5 draw to y, x
COMMENT $31D7 draw to y, x
COMMENT $31D9 draw to y, x
COMMENT $31DB draw to y, x
COMMENT $31DD draw to y, x
COMMENT $31DF draw to y, x
COMMENT $31E1 draw to y, x
COMMENT $31E3 draw to y, x
COMMENT $31E5 draw to y, x
COMMENT $31E7 draw to y, x
COMMENT $31E9 draw to y, x
COMMENT $31EB draw to y, x
COMMENT $31ED draw to y, x
COMMENT $31EF draw to y, x
COMMENT $31F1 draw to y, x
COMMENT $31F3 draw to y, x
COMMENT $31F5 draw to y, x
COMMENT $31F7 draw to y, x
COMMENT_LINE $31F9 DB +$17 ; number of lines to draw
COMMENT $31FB draw to y, x
COMMENT $31FD draw to y, x
COMMENT $31FF draw to y, x
COMMENT $3201 draw to y, x
COMMENT $3203 draw to y, x
COMMENT $3205 draw to y, x
COMMENT $3207 draw to y, x
COMMENT $3209 draw to y, x
COMMENT $320B draw to y, x
COMMENT $320D draw to y, x
COMMENT $320F draw to y, x
COMMENT $3211 draw to y, x
COMMENT $3213 draw to y, x
COMMENT $3215 draw to y, x
COMMENT $3217 draw to y, x
COMMENT $3219 draw to y, x
COMMENT $321B draw to y, x
COMMENT $321D draw to y, x
COMMENT $321F draw to y, x
COMMENT_LINE $3221 DB +$17 ; number of lines to draw
COMMENT $3223 draw to y, x
COMMENT $3225 draw to y, x
COMMENT $3227 draw to y, x
COMMENT $3229 draw to y, x
COMMENT $322B draw to y, x
COMMENT $322D draw to y, x
COMMENT $322F draw to y, x
COMMENT $3231 draw to y, x
COMMENT $3233 draw to y, x
COMMENT $3235 draw to y, x
COMMENT $3237 draw to y, x
COMMENT $3239 draw to y, x
COMMENT $323B draw to y, x
COMMENT $323D draw to y, x
COMMENT $323F draw to y, x
COMMENT $3241 draw to y, x
COMMENT $3243 draw to y, x
COMMENT $3245 draw to y, x
COMMENT $3247 draw to y, x
COMMENT_LINE $3249 DB +$17 ; number of lines to draw
COMMENT $324B draw to y, x
COMMENT $324D draw to y, x
COMMENT $324F draw to y, x
COMMENT $3251 draw to y, x
COMMENT $3253 draw to y, x
COMMENT $3255 draw to y, x
COMMENT $3257 draw to y, x
COMMENT $3259 draw to y, x
COMMENT $325B draw to y, x
COMMENT $325D draw to y, x
COMMENT $325F draw to y, x
COMMENT $3261 draw to y, x
COMMENT $3263 draw to y, x
COMMENT $3265 draw to y, x
COMMENT $3267 draw to y, x
COMMENT $3269 draw to y, x
COMMENT $326B draw to y, x
COMMENT $326D draw to y, x
COMMENT $326F draw to y, x
COMMENT_LINE $3271 DB +$17 ; number of lines to draw
COMMENT $3273 draw to y, x
COMMENT $3275 draw to y, x
COMMENT $3277 draw to y, x
COMMENT $3279 draw to y, x
COMMENT $327B draw to y, x
COMMENT $327D draw to y, x
COMMENT $327F draw to y, x
COMMENT $3281 draw to y, x
COMMENT $3283 draw to y, x
COMMENT $3285 draw to y, x
COMMENT $3287 draw to y, x
COMMENT $3289 draw to y, x
COMMENT $328B draw to y, x
COMMENT $328D draw to y, x
COMMENT $328F draw to y, x
COMMENT $3291 draw to y, x
COMMENT $3293 draw to y, x
COMMENT $3295 draw to y, x
COMMENT $3297 draw to y, x
COMMENT_LINE $3299 DB +$17 ; number of lines to draw
COMMENT $329B draw to y, x
COMMENT $329D draw to y, x
COMMENT $329F draw to y, x
COMMENT $32A1 draw to y, x
COMMENT $32A3 draw to y, x
COMMENT $32A5 draw to y, x
COMMENT $32A7 draw to y, x
COMMENT $32A9 draw to y, x
COMMENT $32AB draw to y, x
COMMENT $32AD draw to y, x
COMMENT $32AF draw to y, x
COMMENT $32B1 draw to y, x
COMMENT $32B3 draw to y, x
COMMENT $32B5 draw to y, x
COMMENT $32B7 draw to y, x
COMMENT $32B9 draw to y, x
COMMENT $32BB draw to y, x
COMMENT $32BD draw to y, x
COMMENT $32BF draw to y, x
COMMENT_LINE $32C1 DB 7
COMMENT $32D3 speed + direction
COMMENT $32D4 graphic definition
COMMENT $32D6 length in SCALE_FACTOR_GAME
COMMENT $32D7 anim delay value
COMMENT $32D8 pointer to next anim object
COMMENT $32DA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32DB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32DC brightness
COMMENT $32DD special flag
COMMENT_LINE $32DE DB 7
COMMENT $32F0 speed + direction
COMMENT $32F1 graphic definition
COMMENT $32F3 length in SCALE_FACTOR_GAME
COMMENT $32F4 anim delay value
COMMENT $32F5 pointer to next anim object
COMMENT $32F7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $32F8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $32F9 brightness
COMMENT $32FA special flag
COMMENT $330D speed + direction
COMMENT $330E graphic definition
COMMENT $3310 length in SCALE_FACTOR_GAME
COMMENT $3311 anim delay value
COMMENT $3312 pointer to next anim object
COMMENT $3314 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3315 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3316 brightness
COMMENT $3317 special flag
COMMENT $3318 speed + direction
COMMENT $3319 graphic definition
COMMENT $331B length in SCALE_FACTOR_GAME
COMMENT $331C anim delay value
COMMENT $331D pointer to next anim object
COMMENT $331F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3320 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3321 brightness
COMMENT $3322 special flag
COMMENT $3325 draw to y, x
COMMENT $3327 draw to y, x
COMMENT $3329 draw to y, x
COMMENT $332B draw to y, x
COMMENT $332D draw to y, x
COMMENT $332F draw to y, x
COMMENT $3331 draw to y, x
COMMENT $3333 draw to y, x
COMMENT $3335 draw to y, x
COMMENT $3337 draw to y, x
COMMENT $3339 draw to y, x
COMMENT $333B draw to y, x
COMMENT $333D draw to y, x
COMMENT $333F draw to y, x
COMMENT $3341 draw to y, x
COMMENT $3343 draw to y, x
COMMENT $3347 draw to y, x
COMMENT $3349 draw to y, x
COMMENT $334B draw to y, x
COMMENT $334D draw to y, x
COMMENT $334F draw to y, x
COMMENT $3351 draw to y, x
COMMENT $3353 draw to y, x
COMMENT $3355 draw to y, x
COMMENT $3357 draw to y, x
COMMENT $3359 draw to y, x
COMMENT $335B draw to y, x
COMMENT $335D draw to y, x
COMMENT $335F draw to y, x
COMMENT $3361 draw to y, x
COMMENT $3363 draw to y, x
COMMENT $3365 draw to y, x
COMMENT $3369 draw to y, x
COMMENT $336B draw to y, x
COMMENT $336D draw to y, x
COMMENT $336F draw to y, x
COMMENT $3371 draw to y, x
COMMENT $3373 draw to y, x
COMMENT $3375 draw to y, x
COMMENT $3377 draw to y, x
COMMENT $3379 draw to y, x
COMMENT $337B draw to y, x
COMMENT $337D draw to y, x
COMMENT $337F draw to y, x
COMMENT $3381 draw to y, x
COMMENT $3383 draw to y, x
COMMENT $3385 draw to y, x
COMMENT $3387 draw to y, x
COMMENT $338B draw to y, x
COMMENT $338D draw to y, x
COMMENT $338F draw to y, x
COMMENT $3391 draw to y, x
COMMENT $3393 draw to y, x
COMMENT $3395 draw to y, x
COMMENT $3397 draw to y, x
COMMENT $3399 draw to y, x
COMMENT $339B draw to y, x
COMMENT $339D draw to y, x
COMMENT $339F draw to y, x
COMMENT $33A1 draw to y, x
COMMENT $33A3 draw to y, x
COMMENT $33A5 draw to y, x
COMMENT $33A7 draw to y, x
COMMENT $33A9 draw to y, x
COMMENT $33AD draw to y, x
COMMENT $33AF draw to y, x
COMMENT $33B1 draw to y, x
COMMENT $33B3 draw to y, x
COMMENT $33B5 draw to y, x
COMMENT $33B7 draw to y, x
COMMENT $33B9 draw to y, x
COMMENT $33BB draw to y, x
COMMENT $33BD draw to y, x
COMMENT $33BF draw to y, x
COMMENT $33C1 draw to y, x
COMMENT $33C3 draw to y, x
COMMENT $33C5 draw to y, x
COMMENT $33C7 draw to y, x
COMMENT $33C9 draw to y, x
COMMENT $33CB draw to y, x
COMMENT $33CF draw to y, x
COMMENT $33D1 draw to y, x
COMMENT $33D3 draw to y, x
COMMENT $33D5 draw to y, x
COMMENT $33D7 draw to y, x
COMMENT $33D9 draw to y, x
COMMENT $33DB draw to y, x
COMMENT $33DD draw to y, x
COMMENT $33DF draw to y, x
COMMENT $33E1 draw to y, x
COMMENT $33E3 draw to y, x
COMMENT $33E5 draw to y, x
COMMENT $33E7 draw to y, x
COMMENT $33E9 draw to y, x
COMMENT $33EB draw to y, x
COMMENT $33ED draw to y, x
COMMENT $33F1 draw to y, x
COMMENT $33F3 draw to y, x
COMMENT $33F5 draw to y, x
COMMENT $33F7 draw to y, x
COMMENT $33F9 draw to y, x
COMMENT $33FB draw to y, x
COMMENT $33FD draw to y, x
COMMENT $33FF draw to y, x
COMMENT $3401 draw to y, x
COMMENT $3403 draw to y, x
COMMENT $3405 draw to y, x
COMMENT $3407 draw to y, x
COMMENT $3409 draw to y, x
COMMENT $340B draw to y, x
COMMENT $340D draw to y, x
COMMENT $340F draw to y, x
COMMENT $3413 draw to y, x
COMMENT $3415 draw to y, x
COMMENT $3417 draw to y, x
COMMENT $3419 draw to y, x
COMMENT $341B draw to y, x
COMMENT $341D draw to y, x
COMMENT $341F draw to y, x
COMMENT $3421 draw to y, x
COMMENT $3423 draw to y, x
COMMENT $3425 draw to y, x
COMMENT $3427 draw to y, x
COMMENT $3429 draw to y, x
COMMENT $342B draw to y, x
COMMENT $342D draw to y, x
COMMENT $342F draw to y, x
COMMENT $3431 draw to y, x
COMMENT $3435 draw to y, x
COMMENT $3437 draw to y, x
COMMENT $3439 draw to y, x
COMMENT $343B draw to y, x
COMMENT $343D draw to y, x
COMMENT $343F draw to y, x
COMMENT $3441 draw to y, x
COMMENT $3443 draw to y, x
COMMENT $3445 draw to y, x
COMMENT $3447 draw to y, x
COMMENT $3449 draw to y, x
COMMENT $344B draw to y, x
COMMENT $344D draw to y, x
COMMENT $344F draw to y, x
COMMENT $3451 draw to y, x
COMMENT $3453 draw to y, x
COMMENT $3457 draw to y, x
COMMENT $3459 draw to y, x
COMMENT $345B draw to y, x
COMMENT $345D draw to y, x
COMMENT $345F draw to y, x
COMMENT $3461 draw to y, x
COMMENT $3463 draw to y, x
COMMENT $3465 draw to y, x
COMMENT $3467 draw to y, x
COMMENT $3469 draw to y, x
COMMENT $346B draw to y, x
COMMENT $346D draw to y, x
COMMENT $346F draw to y, x
COMMENT $3471 draw to y, x
COMMENT $3473 draw to y, x
COMMENT $3475 draw to y, x
COMMENT $3477 speed + direction
COMMENT $3478 graphic definition
COMMENT $347A length in SCALE_FACTOR_GAME
COMMENT $347B anim delay value
COMMENT $347C pointer to next anim object
COMMENT $347E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $347F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3480 brightness
COMMENT $3481 special flag
COMMENT $3482 speed + direction
COMMENT $3483 graphic definition
COMMENT $3485 length in SCALE_FACTOR_GAME
COMMENT $3486 anim delay value
COMMENT $3487 pointer to next anim object
COMMENT $3489 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $348A offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $348B brightness
COMMENT $348C special flag
COMMENT $348D speed + direction
COMMENT $348E graphic definition
COMMENT $3490 length in SCALE_FACTOR_GAME
COMMENT $3491 anim delay value
COMMENT $3492 pointer to next anim object
COMMENT $3494 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3495 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3496 brightness
COMMENT $3497 special flag
COMMENT $3498 speed + direction
COMMENT $3499 graphic definition
COMMENT $349B length in SCALE_FACTOR_GAME
COMMENT $349C anim delay value
COMMENT $349D pointer to next anim object
COMMENT $349F offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34A1 brightness
COMMENT $34A2 special flag
COMMENT $34A3 speed + direction
COMMENT $34A4 graphic definition
COMMENT $34A6 length in SCALE_FACTOR_GAME
COMMENT $34A7 anim delay value
COMMENT $34A8 pointer to next anim object
COMMENT $34AA offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34AB offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34AC brightness
COMMENT $34AD special flag
COMMENT $34AE speed + direction
COMMENT $34AF graphic definition
COMMENT $34B1 length in SCALE_FACTOR_GAME
COMMENT $34B2 anim delay value
COMMENT $34B3 pointer to next anim object
COMMENT $34B5 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34B6 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34B7 brightness
COMMENT $34B8 special flag
COMMENT $34B9 speed + direction
COMMENT $34BA graphic definition
COMMENT $34BC length in SCALE_FACTOR_GAME
COMMENT $34BD anim delay value
COMMENT $34BE pointer to next anim object
COMMENT $34C0 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34C1 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34C2 brightness
COMMENT $34C3 special flag
COMMENT $34C4 speed + direction
COMMENT $34C5 graphic definition
COMMENT $34C7 length in SCALE_FACTOR_GAME
COMMENT $34C8 anim delay value
COMMENT $34C9 pointer to next anim object
COMMENT $34CB offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34CC offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34CD brightness
COMMENT $34CE special flag
COMMENT $34CF speed + direction
COMMENT $34D0 graphic definition
COMMENT $34D2 length in SCALE_FACTOR_GAME
COMMENT $34D3 anim delay value
COMMENT $34D4 pointer to next anim object
COMMENT $34D6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34D8 brightness
COMMENT $34D9 special flag
COMMENT $34DA speed + direction
COMMENT $34DB graphic definition
COMMENT $34DD length in SCALE_FACTOR_GAME
COMMENT $34DE anim delay value
COMMENT $34DF pointer to next anim object
COMMENT $34E1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $34E2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $34E3 brightness
COMMENT $34E4 special flag
COMMENT $34E5 graphic definition
COMMENT $34E7 anim delay value
COMMENT $34E8 pointer to next anim object
COMMENT $34EA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34EB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34EC graphic definition
COMMENT $34EE anim delay value
COMMENT $34EF pointer to next anim object
COMMENT $34F1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34F2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34F3 graphic definition
COMMENT $34F5 anim delay value
COMMENT $34F6 pointer to next anim object
COMMENT $34F8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $34F9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $34FA graphic definition
COMMENT $34FC anim delay value
COMMENT $34FD pointer to next anim object
COMMENT $34FF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3500 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3501 graphic definition
COMMENT $3503 anim delay value
COMMENT $3504 pointer to next anim object
COMMENT $3506 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3507 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3508 graphic definition
COMMENT $350A anim delay value
COMMENT $350B pointer to next anim object
COMMENT $350D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $350E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $350F graphic definition
COMMENT $3511 anim delay value
COMMENT $3512 pointer to next anim object
COMMENT $3514 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3515 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3516 graphic definition
COMMENT $3518 anim delay value
COMMENT $3519 pointer to next anim object
COMMENT $351B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $351C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $351D graphic definition
COMMENT $351F anim delay value
COMMENT $3520 pointer to next anim object
COMMENT $3522 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3523 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3524 graphic definition
COMMENT $3526 anim delay value
COMMENT $3527 pointer to next anim object
COMMENT $3529 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $352A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $352B graphic definition
COMMENT $352D anim delay value
COMMENT $352E pointer to next anim object
COMMENT $3530 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3531 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3532 graphic definition
COMMENT $3534 anim delay value
COMMENT $3535 pointer to next anim object
COMMENT $3537 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3538 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3539 graphic definition
COMMENT $353B anim delay value
COMMENT $353C pointer to next anim object
COMMENT $353E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $353F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3540 graphic definition
COMMENT $3542 anim delay value
COMMENT $3543 pointer to next anim object
COMMENT $3545 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3546 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3547 graphic definition
COMMENT $3549 anim delay value
COMMENT $354A pointer to next anim object
COMMENT $354C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $354D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $354E graphic definition
COMMENT $3550 anim delay value
COMMENT $3551 pointer to next anim object
COMMENT $3553 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3554 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3555 graphic definition
COMMENT $3557 anim delay value
COMMENT $3558 pointer to next anim object
COMMENT $355A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $355B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $355C graphic definition
COMMENT $355E anim delay value
COMMENT $355F pointer to next anim object
COMMENT $3561 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3562 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3565 draw to y, x
COMMENT $3567 draw to y, x
COMMENT $3569 draw to y, x
COMMENT $356B draw to y, x
COMMENT $356D draw to y, x
COMMENT $356F draw to y, x
COMMENT $3571 draw to y, x
COMMENT $3573 draw to y, x
COMMENT $3575 draw to y, x
COMMENT $3577 draw to y, x
COMMENT $3579 draw to y, x
COMMENT $357B draw to y, x
COMMENT $357D draw to y, x
COMMENT $357F draw to y, x
COMMENT $3581 draw to y, x
COMMENT $3583 draw to y, x
COMMENT $3585 draw to y, x
COMMENT $3587 draw to y, x
COMMENT $3589 draw to y, x
COMMENT $358D draw to y, x
COMMENT $358F draw to y, x
COMMENT $3591 draw to y, x
COMMENT $3593 draw to y, x
COMMENT $3595 draw to y, x
COMMENT $3597 draw to y, x
COMMENT $3599 draw to y, x
COMMENT $359B draw to y, x
COMMENT $359D draw to y, x
COMMENT $359F draw to y, x
COMMENT $35A1 draw to y, x
COMMENT $35A3 draw to y, x
COMMENT $35A5 draw to y, x
COMMENT $35A7 draw to y, x
COMMENT $35A9 draw to y, x
COMMENT $35AB draw to y, x
COMMENT $35AD draw to y, x
COMMENT $35AF draw to y, x
COMMENT $35B1 draw to y, x
COMMENT $35B5 draw to y, x
COMMENT $35B7 draw to y, x
COMMENT $35B9 draw to y, x
COMMENT $35BB draw to y, x
COMMENT $35BD draw to y, x
COMMENT $35BF draw to y, x
COMMENT $35C1 draw to y, x
COMMENT $35C3 draw to y, x
COMMENT $35C5 draw to y, x
COMMENT $35C7 draw to y, x
COMMENT $35C9 draw to y, x
COMMENT $35CB draw to y, x
COMMENT $35CD draw to y, x
COMMENT $35CF draw to y, x
COMMENT $35D3 draw to y, x
COMMENT $35D5 draw to y, x
COMMENT $35D7 draw to y, x
COMMENT $35D9 draw to y, x
COMMENT $35DB draw to y, x
COMMENT $35DD draw to y, x
COMMENT $35DF draw to y, x
COMMENT $35E1 draw to y, x
COMMENT $35E3 draw to y, x
COMMENT $35E7 draw to y, x
COMMENT $35E9 draw to y, x
COMMENT $35EB draw to y, x
COMMENT $35ED draw to y, x
COMMENT $35F1 draw to y, x
COMMENT $35F3 draw to y, x
COMMENT $35F5 draw to y, x
COMMENT $35F7 draw to y, x
COMMENT $35FB draw to y, x
COMMENT $35FD draw to y, x
COMMENT $35FF draw to y, x
COMMENT $3601 draw to y, x
COMMENT $3605 draw to y, x
COMMENT $3607 draw to y, x
COMMENT $3609 draw to y, x
COMMENT $360B draw to y, x
COMMENT $360D draw to y, x
COMMENT $360F draw to y, x
COMMENT $3611 draw to y, x
COMMENT $3613 draw to y, x
COMMENT $3615 draw to y, x
COMMENT $3617 draw to y, x
COMMENT $3619 draw to y, x
COMMENT $361B draw to y, x
COMMENT $361D draw to y, x
COMMENT $361F draw to y, x
COMMENT $3621 draw to y, x
COMMENT $3623 draw to y, x
COMMENT $3625 draw to y, x
COMMENT $3627 draw to y, x
COMMENT $3629 draw to y, x
COMMENT $362D draw to y, x
COMMENT $362F draw to y, x
COMMENT $3631 draw to y, x
COMMENT $3633 draw to y, x
COMMENT $3635 draw to y, x
COMMENT $3637 draw to y, x
COMMENT $3639 draw to y, x
COMMENT $363B draw to y, x
COMMENT $363D draw to y, x
COMMENT $363F draw to y, x
COMMENT $3641 draw to y, x
COMMENT $3643 draw to y, x
COMMENT $3645 draw to y, x
COMMENT $3647 draw to y, x
COMMENT $3649 draw to y, x
COMMENT $364B draw to y, x
COMMENT $364D draw to y, x
COMMENT $364F draw to y, x
COMMENT $3651 draw to y, x
COMMENT $3655 draw to y, x
COMMENT $3657 draw to y, x
COMMENT $3659 draw to y, x
COMMENT $365B draw to y, x
COMMENT $365D draw to y, x
COMMENT $365F draw to y, x
COMMENT $3661 draw to y, x
COMMENT $3663 draw to y, x
COMMENT $3665 draw to y, x
COMMENT $3667 draw to y, x
COMMENT $3669 draw to y, x
COMMENT $366B draw to y, x
COMMENT $366D draw to y, x
COMMENT $366F draw to y, x
COMMENT $3671 draw to y, x
COMMENT $3673 draw to y, x
COMMENT $3675 draw to y, x
COMMENT $3677 draw to y, x
COMMENT $3679 draw to y, x
COMMENT $367B draw to y, x
COMMENT $367F draw to y, x
COMMENT $3681 draw to y, x
COMMENT $3683 draw to y, x
COMMENT $3685 draw to y, x
COMMENT $3687 draw to y, x
COMMENT $3689 draw to y, x
COMMENT $368B draw to y, x
COMMENT $368D draw to y, x
COMMENT $368F draw to y, x
COMMENT $3691 draw to y, x
COMMENT $3693 draw to y, x
COMMENT $3695 draw to y, x
COMMENT $3697 draw to y, x
COMMENT $3699 draw to y, x
COMMENT $369B draw to y, x
COMMENT $369D draw to y, x
COMMENT $369F draw to y, x
COMMENT $36A1 draw to y, x
COMMENT $36A3 draw to y, x
COMMENT $36A5 draw to y, x
COMMENT_LINE $36A7 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $36A7 in 2016
COMMENT_LINE $36A7 all stuff contained here is public domain
COMMENT_LINE $36A7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $36A7 this file contains 'sprite' definition data for letters (level done)      ;
COMMENT_LINE $36A7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $36AF speed + direction
COMMENT $36B0 graphic definition
COMMENT $36B2 length in SCALE_FACTOR_GAME
COMMENT $36B3 anim delay value
COMMENT $36B4 pointer to next anim object
COMMENT $36B6 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36B7 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36C8 speed + direction
COMMENT $36C9 graphic definition
COMMENT $36CB length in SCALE_FACTOR_GAME
COMMENT $36CC anim delay value
COMMENT $36CD pointer to next anim object
COMMENT $36CF offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36D0 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36DB speed + direction
COMMENT $36DC graphic definition
COMMENT $36DE length in SCALE_FACTOR_GAME
COMMENT $36DF anim delay value
COMMENT $36E0 pointer to next anim object
COMMENT $36E2 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $36E3 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $36FA speed + direction
COMMENT $36FB graphic definition
COMMENT $36FD length in SCALE_FACTOR_GAME
COMMENT $36FE anim delay value
COMMENT $36FF pointer to next anim object
COMMENT $3701 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3702 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $371D speed + direction
COMMENT $371E graphic definition
COMMENT $3720 length in SCALE_FACTOR_GAME
COMMENT $3721 anim delay value
COMMENT $3722 pointer to next anim object
COMMENT $3724 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3725 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3736 speed + direction
COMMENT $3737 graphic definition
COMMENT $3739 length in SCALE_FACTOR_GAME
COMMENT $373A anim delay value
COMMENT $373B pointer to next anim object
COMMENT $373D offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $373E offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT_LINE $373F this file is part of Karl Quappe, written by Malban
COMMENT_LINE $373F in 2016
COMMENT_LINE $373F all stuff contained here is public domain
COMMENT_LINE $373F Following are the 3 gimmick definitions
COMMENT_LINE $373F Gimmick - a sprite is displayed in places "just for fun"
COMMENT_LINE $373F there is a Pacman, a ghost and a little worm crawling
COMMENT_LINE $373F To show a gimmick following must be true:
COMMENT_LINE $373F not in intermission, not in attract mode, not in training mode
COMMENT_LINE $373F not on the first level
COMMENT_LINE $373F at most one house is occupied
COMMENT_LINE $373F timer must be below 20ticks
COMMENT_LINE $373F frogger must be heading down
COMMENT_LINE $373F only once per level
COMMENT_LINE $373F player independend - the enable flag is resetted upon a level complete,
COMMENT_LINE $373F if one player saw a gimmick the next gimmick is only enabled by viewing a "level done" screen
COMMENT $3741 draw to y, x
COMMENT $3743 draw to y, x
COMMENT $3745 draw to y, x
COMMENT $3747 draw to y, x
COMMENT $3749 draw to y, x
COMMENT $374B draw to y, x
COMMENT $374D draw to y, x
COMMENT $374F draw to y, x
COMMENT $3751 draw to y, x
COMMENT $3755 draw to y, x
COMMENT $3757 draw to y, x
COMMENT $3759 draw to y, x
COMMENT $375B draw to y, x
COMMENT $375D draw to y, x
COMMENT $375F draw to y, x
COMMENT $3761 draw to y, x
COMMENT $3763 draw to y, x
COMMENT $3765 draw to y, x
COMMENT $3769 draw to y, x
COMMENT $376B draw to y, x
COMMENT $376D draw to y, x
COMMENT $376F draw to y, x
COMMENT $3771 draw to y, x
COMMENT $3773 draw to y, x
COMMENT $3775 draw to y, x
COMMENT $3777 draw to y, x
COMMENT $3779 draw to y, x
COMMENT $377D draw to y, x
COMMENT $377F draw to y, x
COMMENT $3781 draw to y, x
COMMENT $3783 draw to y, x
COMMENT $3785 draw to y, x
COMMENT $3787 draw to y, x
COMMENT $3789 draw to y, x
COMMENT $378B draw to y, x
COMMENT $378D draw to y, x
COMMENT $378F speed + direction
COMMENT $3790 graphic definition
COMMENT $3792 length in SCALE_FACTOR_GAME
COMMENT $3793 anim delay value
COMMENT $3794 pointer to next anim object
COMMENT $3796 offsets y
COMMENT $3797 offsets x
COMMENT $3798 speed + direction
COMMENT $3799 graphic definition
COMMENT $379B length in SCALE_FACTOR_GAME
COMMENT $379C anim delay value
COMMENT $379D pointer to next anim object
COMMENT $379F offsets y
COMMENT $37A0 offsets x
COMMENT $37A1 speed + direction
COMMENT $37A2 graphic definition
COMMENT $37A4 length in SCALE_FACTOR_GAME
COMMENT $37A5 anim delay value
COMMENT $37A6 pointer to next anim object
COMMENT $37A8 offsets y
COMMENT $37A9 offsets x
COMMENT $37AA speed + direction
COMMENT $37AB graphic definition
COMMENT $37AD length in SCALE_FACTOR_GAME
COMMENT $37AE anim delay value
COMMENT $37AF pointer to next anim object
COMMENT $37B1 offsets y
COMMENT $37B2 offsets x
COMMENT $37B3 speed + direction
COMMENT $37B4 graphic definition
COMMENT $37B6 length in SCALE_FACTOR_GAME
COMMENT $37B7 anim delay value
COMMENT $37B8 pointer to next anim object
COMMENT $37BA offsets y
COMMENT $37BB offsets x
COMMENT $37BC speed + direction
COMMENT $37BD graphic definition
COMMENT $37BF length in SCALE_FACTOR_GAME
COMMENT $37C0 anim delay value
COMMENT $37C1 pointer to next anim object
COMMENT $37C3 offsets y
COMMENT $37C4 offsets x
COMMENT_LINE $37C5 ***************************************************************************************
COMMENT $37C7 draw to y, x
COMMENT $37C9 draw to y, x
COMMENT $37CB draw to y, x
COMMENT $37CD draw to y, x
COMMENT $37CF draw to y, x
COMMENT $37D1 draw to y, x
COMMENT $37D3 draw to y, x
COMMENT $37D5 draw to y, x
COMMENT $37D7 draw to y, x
COMMENT $37D9 draw to y, x
COMMENT $37DD draw to y, x
COMMENT $37DF draw to y, x
COMMENT $37E1 draw to y, x
COMMENT $37E3 draw to y, x
COMMENT $37E5 draw to y, x
COMMENT $37E7 draw to y, x
COMMENT $37E9 draw to y, x
COMMENT $37EB draw to y, x
COMMENT $37ED draw to y, x
COMMENT $37EF draw to y, x
COMMENT $37F3 draw to y, x
COMMENT $37F5 draw to y, x
COMMENT $37F7 draw to y, x
COMMENT $37F9 draw to y, x
COMMENT $37FB draw to y, x
COMMENT $37FD draw to y, x
COMMENT $37FF draw to y, x
COMMENT $3801 draw to y, x
COMMENT $3803 draw to y, x
COMMENT $3805 draw to y, x
COMMENT $3807 speed + direction
COMMENT $3808 graphic definition
COMMENT $380A length in SCALE_FACTOR_GAME
COMMENT $380B anim delay value
COMMENT $380C pointer to next anim object
COMMENT $380E offsets y
COMMENT $380F offsets x
COMMENT $3810 speed + direction
COMMENT $3811 graphic definition
COMMENT $3813 length in SCALE_FACTOR_GAME
COMMENT $3814 anim delay value
COMMENT $3815 pointer to next anim object
COMMENT $3817 offsets y
COMMENT $3818 offsets x
COMMENT $3819 speed + direction
COMMENT $381A graphic definition
COMMENT $381C length in SCALE_FACTOR_GAME
COMMENT $381D anim delay value
COMMENT $381E pointer to next anim object
COMMENT $3820 offsets y
COMMENT $3821 offsets x
COMMENT $3822 speed + direction
COMMENT $3823 graphic definition
COMMENT $3825 length in SCALE_FACTOR_GAME
COMMENT $3826 anim delay value
COMMENT $3827 pointer to next anim object
COMMENT $3829 offsets y
COMMENT $382A offsets x
COMMENT $382D draw to y, x
COMMENT $382F draw to y, x
COMMENT $3831 draw to y, x
COMMENT $3835 draw to y, x
COMMENT $3837 draw to y, x
COMMENT $3839 draw to y, x
COMMENT $383B draw to y, x
COMMENT $383D draw to y, x
COMMENT $3841 draw to y, x
COMMENT $3843 draw to y, x
COMMENT $3845 draw to y, x
COMMENT $3847 draw to y, x
COMMENT $3849 draw to y, x
COMMENT $384B draw to y, x
COMMENT $384F draw to y, x
COMMENT $3851 draw to y, x
COMMENT $3853 draw to y, x
COMMENT $3855 draw to y, x
COMMENT $3857 draw to y, x
COMMENT $3859 draw to y, x
COMMENT $385D draw to y, x
COMMENT $385F draw to y, x
COMMENT $3861 draw to y, x
COMMENT $3863 draw to y, x
COMMENT $3865 draw to y, x
COMMENT $3867 draw to y, x
COMMENT $386B draw to y, x
COMMENT $386D draw to y, x
COMMENT $386F draw to y, x
COMMENT $3871 draw to y, x
COMMENT $3873 draw to y, x
COMMENT $3877 draw to y, x
COMMENT $3879 draw to y, x
COMMENT $387B draw to y, x
COMMENT $387D draw to y, x
COMMENT $387F draw to y, x
COMMENT $3881 speed + direction
COMMENT $3882 graphic definition
COMMENT $3884 length in SCALE_FACTOR_GAME
COMMENT $3885 anim delay value
COMMENT $3886 pointer to next anim object
COMMENT $3888 offsets y
COMMENT $3889 offsets x
COMMENT $388A speed + direction
COMMENT $388B graphic definition
COMMENT $388D length in SCALE_FACTOR_GAME
COMMENT $388E anim delay value
COMMENT $388F pointer to next anim object
COMMENT $3891 offsets y
COMMENT $3892 offsets x
COMMENT $3893 speed + direction
COMMENT $3894 graphic definition
COMMENT $3896 length in SCALE_FACTOR_GAME
COMMENT $3897 anim delay value
COMMENT $3898 pointer to next anim object
COMMENT $389A offsets y
COMMENT $389B offsets x
COMMENT $389C speed + direction
COMMENT $389D graphic definition
COMMENT $389F length in SCALE_FACTOR_GAME
COMMENT $38A0 anim delay value
COMMENT $38A1 pointer to next anim object
COMMENT $38A3 offsets y
COMMENT $38A4 offsets x
COMMENT $38A5 speed + direction
COMMENT $38A6 graphic definition
COMMENT $38A8 length in SCALE_FACTOR_GAME
COMMENT $38A9 anim delay value
COMMENT $38AA pointer to next anim object
COMMENT $38AC offsets y
COMMENT $38AD offsets x
COMMENT $38AE speed + direction
COMMENT $38AF graphic definition
COMMENT $38B1 length in SCALE_FACTOR_GAME
COMMENT $38B2 anim delay value
COMMENT $38B3 pointer to next anim object
COMMENT $38B5 offsets y
COMMENT $38B6 offsets x
COMMENT $38B7 speed + direction
COMMENT $38B8 graphic definition
COMMENT $38BA length in SCALE_FACTOR_GAME
COMMENT $38BB anim delay value
COMMENT $38BC pointer to next anim object
COMMENT $38BE offsets y
COMMENT $38BF offsets x
COMMENT_LINE $38C0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $38C0 in 2016
COMMENT_LINE $38C0 all stuff contained here is public domain
COMMENT_LINE $38C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38C0 this file contains contains includes for all graphic definitions          ;
COMMENT_LINE $38C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38C0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $38C0 in 2016
COMMENT_LINE $38C0 all stuff contained here is public domain
COMMENT_LINE $38C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38C0 this file contains 'sprite' definition data for the fly                   ;
COMMENT_LINE $38C0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $38C0 fly1 is not moving
COMMENT $38D6 speed + direction
COMMENT $38D7 graphic definition
COMMENT $38D9 length in SCALE_FACTOR_GAME
COMMENT $38DA anim delay value
COMMENT $38DB pointer to next anim object
COMMENT $38DD offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $38DE offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $38E0 special flag
COMMENT $38F7 speed + direction
COMMENT $38F8 graphic definition
COMMENT $38FA length in SCALE_FACTOR_GAME
COMMENT $38FB anim delay value
COMMENT $38FC pointer to next anim object
COMMENT $38FE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $38FF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3901 special flag
COMMENT $3918 speed + direction
COMMENT $3919 graphic definition
COMMENT $391B length in SCALE_FACTOR_GAME
COMMENT $391C anim delay value
COMMENT $391D pointer to next anim object
COMMENT $391F offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $3920 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $3922 special flag
COMMENT $3923 speed + direction
COMMENT $3924 graphic definition
COMMENT $3926 length in SCALE_FACTOR_GAME
COMMENT $3927 anim delay value
COMMENT $3928 pointer to next anim object
COMMENT $392A offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $392B offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $392D special flag
COMMENT_LINE $392E this file is part of Karl Quappe, written by Malban
COMMENT_LINE $392E in 2016
COMMENT_LINE $392E all stuff contained here is public domain
COMMENT_LINE $392E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $392E this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $392E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $392E for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $392E car1 is moving left with a speed of -1
COMMENT_LINE $392E for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $392E car3 is moving right with a speed of 1
COMMENT_LINE $392E sprite definition
COMMENT $3930 draw to y, x
COMMENT $3932 draw to y, x
COMMENT $3934 draw to y, x
COMMENT $3936 draw to y, x
COMMENT $3938 draw to y, x
COMMENT $393A draw to y, x
COMMENT $393C draw to y, x
COMMENT $393E draw to y, x
COMMENT $3940 draw to y, x
COMMENT $3942 draw to y, x
COMMENT $3944 draw to y, x
COMMENT $3946 draw to y, x
COMMENT $3948 draw to y, x
COMMENT $394A draw to y, x
COMMENT $394C draw to y, x
COMMENT $394E draw to y, x
COMMENT $3950 draw to y, x
COMMENT $3952 draw to y, x
COMMENT $3954 draw to y, x
COMMENT $3956 draw to y, x
COMMENT $3958 draw to y, x
COMMENT $395A draw to y, x
COMMENT $395C speed + direction
COMMENT $395D graphic definition
COMMENT $395F length in SCALE_FACTOR_GAME
COMMENT $3960 anim delay value
COMMENT $3961 pointer to next anim object
COMMENT $3963 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3964 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3965 halfspeed value
COMMENT $3966 special flag
COMMENT $3967 speed + direction
COMMENT $3968 graphic definition
COMMENT $396A length in SCALE_FACTOR_GAME
COMMENT $396B anim delay value
COMMENT $396C pointer to next anim object
COMMENT $396E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $396F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3970 halfspeed value
COMMENT $3971 special flag
COMMENT_LINE $3972 sprite definition
COMMENT $3974 draw to y, x
COMMENT $3976 draw to y, x
COMMENT $3978 draw to y, x
COMMENT $397A draw to y, x
COMMENT $397C draw to y, x
COMMENT $397E draw to y, x
COMMENT $3980 draw to y, x
COMMENT $3982 draw to y, x
COMMENT $3984 draw to y, x
COMMENT $3986 draw to y, x
COMMENT $3988 draw to y, x
COMMENT $398A draw to y, x
COMMENT $398C draw to y, x
COMMENT $398E draw to y, x
COMMENT $3990 draw to y, x
COMMENT $3992 draw to y, x
COMMENT $3994 draw to y, x
COMMENT $3996 draw to y, x
COMMENT $3998 draw to y, x
COMMENT $399A draw to y, x
COMMENT $399C draw to y, x
COMMENT $399E draw to y, x
COMMENT $39A0 speed + direction
COMMENT $39A1 graphic definition
COMMENT $39A3 length in SCALE_FACTOR_GAME
COMMENT $39A4 anim delay value
COMMENT $39A5 pointer to next anim object
COMMENT $39A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39A9 halfspeed value
COMMENT $39AA special flag
COMMENT $39AB speed + direction
COMMENT $39AC graphic definition
COMMENT $39AE length in SCALE_FACTOR_GAME
COMMENT $39AF anim delay value
COMMENT $39B0 pointer to next anim object
COMMENT $39B2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39B3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39B4 halfspeed value
COMMENT $39B5 special flag
COMMENT_LINE $39B6 sprite definition
COMMENT $39B8 draw to y, x
COMMENT $39BA draw to y, x
COMMENT $39BC draw to y, x
COMMENT $39BE draw to y, x
COMMENT $39C0 draw to y, x
COMMENT $39C2 draw to y, x
COMMENT $39C4 draw to y, x
COMMENT $39C6 draw to y, x
COMMENT $39C8 draw to y, x
COMMENT $39CA draw to y, x
COMMENT $39CC draw to y, x
COMMENT $39CE draw to y, x
COMMENT $39D0 draw to y, x
COMMENT $39D2 draw to y, x
COMMENT $39D4 draw to y, x
COMMENT $39D6 draw to y, x
COMMENT $39D8 draw to y, x
COMMENT $39DA draw to y, x
COMMENT $39DC draw to y, x
COMMENT $39DE draw to y, x
COMMENT $39E0 draw to y, x
COMMENT $39E2 draw to y, x
COMMENT $39E4 speed + direction
COMMENT $39E5 graphic definition
COMMENT $39E7 length in SCALE_FACTOR_GAME
COMMENT $39E8 anim delay value
COMMENT $39E9 pointer to next anim object
COMMENT $39EB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39EC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39ED halfspeed value
COMMENT $39EE special flag
COMMENT $39EF speed + direction
COMMENT $39F0 graphic definition
COMMENT $39F2 length in SCALE_FACTOR_GAME
COMMENT $39F3 anim delay value
COMMENT $39F4 pointer to next anim object
COMMENT $39F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $39F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $39F8 halfspeed value
COMMENT $39F9 special flag
COMMENT_LINE $39FA sprite definition
COMMENT $39FC draw to y, x
COMMENT $39FE draw to y, x
COMMENT $3A00 draw to y, x
COMMENT $3A02 draw to y, x
COMMENT $3A04 draw to y, x
COMMENT $3A06 draw to y, x
COMMENT $3A08 draw to y, x
COMMENT $3A0A draw to y, x
COMMENT $3A0C draw to y, x
COMMENT $3A0E draw to y, x
COMMENT $3A10 draw to y, x
COMMENT $3A12 draw to y, x
COMMENT $3A14 draw to y, x
COMMENT $3A16 draw to y, x
COMMENT $3A18 draw to y, x
COMMENT $3A1A draw to y, x
COMMENT $3A1C draw to y, x
COMMENT $3A1E draw to y, x
COMMENT $3A20 draw to y, x
COMMENT $3A22 draw to y, x
COMMENT $3A24 draw to y, x
COMMENT $3A26 draw to y, x
COMMENT $3A28 speed + direction
COMMENT $3A29 graphic definition
COMMENT $3A2B length in SCALE_FACTOR_GAME
COMMENT $3A2C anim delay value
COMMENT $3A2D pointer to next anim object
COMMENT $3A2F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A30 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A31 halfspeed value
COMMENT $3A32 special flag
COMMENT $3A33 speed + direction
COMMENT $3A34 graphic definition
COMMENT $3A36 length in SCALE_FACTOR_GAME
COMMENT $3A37 anim delay value
COMMENT $3A38 pointer to next anim object
COMMENT $3A3A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A3B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A3C halfspeed value
COMMENT $3A3D special flag
COMMENT_LINE $3A3E ;; back
COMMENT $3A40 draw to y, x
COMMENT $3A42 draw to y, x
COMMENT $3A44 draw to y, x
COMMENT $3A46 draw to y, x
COMMENT $3A48 draw to y, x
COMMENT $3A4A draw to y, x
COMMENT $3A4C draw to y, x
COMMENT $3A4E draw to y, x
COMMENT $3A50 draw to y, x
COMMENT $3A52 draw to y, x
COMMENT $3A54 draw to y, x
COMMENT $3A56 draw to y, x
COMMENT $3A58 draw to y, x
COMMENT $3A5A draw to y, x
COMMENT $3A5C draw to y, x
COMMENT $3A5E draw to y, x
COMMENT $3A60 draw to y, x
COMMENT $3A62 draw to y, x
COMMENT $3A64 draw to y, x
COMMENT $3A66 draw to y, x
COMMENT $3A68 draw to y, x
COMMENT $3A6A draw to y, x
COMMENT $3A6C speed + direction
COMMENT $3A6D graphic definition
COMMENT $3A6F length in SCALE_FACTOR_GAME
COMMENT $3A70 anim delay value
COMMENT $3A71 pointer to next anim object
COMMENT $3A73 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A74 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A75 halfspeed value
COMMENT $3A76 special flag
COMMENT $3A77 speed + direction
COMMENT $3A78 graphic definition
COMMENT $3A7A length in SCALE_FACTOR_GAME
COMMENT $3A7B anim delay value
COMMENT $3A7C pointer to next anim object
COMMENT $3A7E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3A7F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3A80 halfspeed value
COMMENT $3A81 special flag
COMMENT_LINE $3A82 sprite definition
COMMENT $3A84 draw to y, x
COMMENT $3A86 draw to y, x
COMMENT $3A88 draw to y, x
COMMENT $3A8A draw to y, x
COMMENT $3A8C draw to y, x
COMMENT $3A8E draw to y, x
COMMENT $3A90 draw to y, x
COMMENT $3A92 draw to y, x
COMMENT $3A94 draw to y, x
COMMENT $3A96 draw to y, x
COMMENT $3A98 draw to y, x
COMMENT $3A9A draw to y, x
COMMENT $3A9C draw to y, x
COMMENT $3A9E draw to y, x
COMMENT $3AA0 draw to y, x
COMMENT $3AA2 draw to y, x
COMMENT $3AA4 draw to y, x
COMMENT $3AA6 draw to y, x
COMMENT $3AA8 draw to y, x
COMMENT $3AAA draw to y, x
COMMENT $3AAC draw to y, x
COMMENT $3AAE draw to y, x
COMMENT $3AB0 speed + direction
COMMENT $3AB1 graphic definition
COMMENT $3AB3 length in SCALE_FACTOR_GAME
COMMENT $3AB4 anim delay value
COMMENT $3AB5 pointer to next anim object
COMMENT $3AB7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AB8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AB9 halfspeed value
COMMENT $3ABA special flag
COMMENT $3ABB speed + direction
COMMENT $3ABC graphic definition
COMMENT $3ABE length in SCALE_FACTOR_GAME
COMMENT $3ABF anim delay value
COMMENT $3AC0 pointer to next anim object
COMMENT $3AC2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AC3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AC4 halfspeed value
COMMENT $3AC5 special flag
COMMENT_LINE $3AC6 sprite definition
COMMENT $3AC8 draw to y, x
COMMENT $3ACA draw to y, x
COMMENT $3ACC draw to y, x
COMMENT $3ACE draw to y, x
COMMENT $3AD0 draw to y, x
COMMENT $3AD2 draw to y, x
COMMENT $3AD4 draw to y, x
COMMENT $3AD6 draw to y, x
COMMENT $3AD8 draw to y, x
COMMENT $3ADA draw to y, x
COMMENT $3ADC draw to y, x
COMMENT $3ADE draw to y, x
COMMENT $3AE0 draw to y, x
COMMENT $3AE2 draw to y, x
COMMENT $3AE4 draw to y, x
COMMENT $3AE6 draw to y, x
COMMENT $3AE8 draw to y, x
COMMENT $3AEA draw to y, x
COMMENT $3AEC draw to y, x
COMMENT $3AEE draw to y, x
COMMENT $3AF0 draw to y, x
COMMENT $3AF2 draw to y, x
COMMENT $3AF4 speed + direction
COMMENT $3AF5 graphic definition
COMMENT $3AF7 length in SCALE_FACTOR_GAME
COMMENT $3AF8 anim delay value
COMMENT $3AF9 pointer to next anim object
COMMENT $3AFB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3AFC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3AFD halfspeed value
COMMENT $3AFE special flag
COMMENT $3AFF speed + direction
COMMENT $3B00 graphic definition
COMMENT $3B02 length in SCALE_FACTOR_GAME
COMMENT $3B03 anim delay value
COMMENT $3B04 pointer to next anim object
COMMENT $3B06 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B07 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B08 halfspeed value
COMMENT $3B09 special flag
COMMENT_LINE $3B0A sprite definition
COMMENT $3B0C draw to y, x
COMMENT $3B0E draw to y, x
COMMENT $3B10 draw to y, x
COMMENT $3B12 draw to y, x
COMMENT $3B14 draw to y, x
COMMENT $3B16 draw to y, x
COMMENT $3B18 draw to y, x
COMMENT $3B1A draw to y, x
COMMENT $3B1C draw to y, x
COMMENT $3B1E draw to y, x
COMMENT $3B20 draw to y, x
COMMENT $3B22 draw to y, x
COMMENT $3B24 draw to y, x
COMMENT $3B26 draw to y, x
COMMENT $3B28 draw to y, x
COMMENT $3B2A draw to y, x
COMMENT $3B2C draw to y, x
COMMENT $3B2E draw to y, x
COMMENT $3B30 draw to y, x
COMMENT $3B32 draw to y, x
COMMENT $3B34 draw to y, x
COMMENT $3B36 draw to y, x
COMMENT $3B38 speed + direction
COMMENT $3B39 graphic definition
COMMENT $3B3B length in SCALE_FACTOR_GAME
COMMENT $3B3C anim delay value
COMMENT $3B3D pointer to next anim object
COMMENT $3B3F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B40 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B41 halfspeed value
COMMENT $3B42 special flag
COMMENT $3B43 speed + direction
COMMENT $3B44 graphic definition
COMMENT $3B46 length in SCALE_FACTOR_GAME
COMMENT $3B47 anim delay value
COMMENT $3B48 pointer to next anim object
COMMENT $3B4A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B4B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B4C halfspeed value
COMMENT $3B4D special flag
COMMENT_LINE $3B4E this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3B4E in 2016
COMMENT_LINE $3B4E all stuff contained here is public domain
COMMENT_LINE $3B4E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3B4E this file contains 'sprite' definition data for all cars                  ;
COMMENT_LINE $3B4E ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3B4E for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3B4E car1 is moving left with a speed of -1
COMMENT_LINE $3B4E for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3B4E car3 is moving right with a speed of 1
COMMENT_LINE $3B4E sprite definition
COMMENT $3B50 draw to y, x
COMMENT $3B52 draw to y, x
COMMENT $3B54 draw to y, x
COMMENT $3B56 draw to y, x
COMMENT $3B58 draw to y, x
COMMENT $3B5A draw to y, x
COMMENT $3B5C draw to y, x
COMMENT $3B5E draw to y, x
COMMENT $3B60 draw to y, x
COMMENT $3B62 draw to y, x
COMMENT $3B64 draw to y, x
COMMENT $3B66 draw to y, x
COMMENT $3B68 draw to y, x
COMMENT $3B6A draw to y, x
COMMENT $3B6C draw to y, x
COMMENT $3B6E draw to y, x
COMMENT $3B70 draw to y, x
COMMENT $3B72 speed + direction
COMMENT $3B73 graphic definition
COMMENT $3B75 length in SCALE_FACTOR_GAME
COMMENT $3B76 anim delay value
COMMENT $3B77 pointer to next anim object
COMMENT $3B79 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B7A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B7B halfspeed value
COMMENT $3B7C special flag
COMMENT $3B7D speed + direction
COMMENT $3B7E graphic definition
COMMENT $3B80 length in SCALE_FACTOR_GAME
COMMENT $3B81 anim delay value
COMMENT $3B82 pointer to next anim object
COMMENT $3B84 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3B85 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3B86 halfspeed value
COMMENT $3B87 special flag
COMMENT_LINE $3B88 sprite definition
COMMENT $3B8A draw to y, x
COMMENT $3B8C draw to y, x
COMMENT $3B8E draw to y, x
COMMENT $3B90 draw to y, x
COMMENT $3B92 draw to y, x
COMMENT $3B94 draw to y, x
COMMENT $3B96 draw to y, x
COMMENT $3B98 draw to y, x
COMMENT $3B9A draw to y, x
COMMENT $3B9C draw to y, x
COMMENT $3B9E draw to y, x
COMMENT $3BA0 draw to y, x
COMMENT $3BA2 draw to y, x
COMMENT $3BA4 draw to y, x
COMMENT $3BA6 draw to y, x
COMMENT $3BA8 draw to y, x
COMMENT $3BAA draw to y, x
COMMENT $3BAC speed + direction
COMMENT $3BAD graphic definition
COMMENT $3BAF length in SCALE_FACTOR_GAME
COMMENT $3BB0 anim delay value
COMMENT $3BB1 pointer to next anim object
COMMENT $3BB3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BB4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BB5 halfspeed value
COMMENT $3BB6 special flag
COMMENT $3BB7 speed + direction
COMMENT $3BB8 graphic definition
COMMENT $3BBA length in SCALE_FACTOR_GAME
COMMENT $3BBB anim delay value
COMMENT $3BBC pointer to next anim object
COMMENT $3BBE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BBF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BC0 halfspeed value
COMMENT $3BC1 special flag
COMMENT_LINE $3BC2 sprite definition
COMMENT $3BC4 draw to y, x
COMMENT $3BC6 draw to y, x
COMMENT $3BC8 draw to y, x
COMMENT $3BCA draw to y, x
COMMENT $3BCC draw to y, x
COMMENT $3BCE draw to y, x
COMMENT $3BD0 draw to y, x
COMMENT $3BD2 draw to y, x
COMMENT $3BD4 draw to y, x
COMMENT $3BD6 draw to y, x
COMMENT $3BD8 draw to y, x
COMMENT $3BDA draw to y, x
COMMENT $3BDC draw to y, x
COMMENT $3BDE draw to y, x
COMMENT $3BE0 draw to y, x
COMMENT $3BE2 draw to y, x
COMMENT $3BE4 draw to y, x
COMMENT $3BE6 speed + direction
COMMENT $3BE7 graphic definition
COMMENT $3BE9 length in SCALE_FACTOR_GAME
COMMENT $3BEA anim delay value
COMMENT $3BEB pointer to next anim object
COMMENT $3BED offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BEE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BEF halfspeed value
COMMENT $3BF0 special flag
COMMENT $3BF1 speed + direction
COMMENT $3BF2 graphic definition
COMMENT $3BF4 length in SCALE_FACTOR_GAME
COMMENT $3BF5 anim delay value
COMMENT $3BF6 pointer to next anim object
COMMENT $3BF8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3BF9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3BFA halfspeed value
COMMENT $3BFB special flag
COMMENT $3BFC speed + direction
COMMENT $3BFD graphic definition
COMMENT $3BFF length in SCALE_FACTOR_GAME
COMMENT $3C00 anim delay value
COMMENT $3C01 pointer to next anim object
COMMENT $3C03 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C04 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C05 halfspeed value
COMMENT $3C06 special flag
COMMENT $3C07 speed + direction
COMMENT $3C08 graphic definition
COMMENT $3C0A length in SCALE_FACTOR_GAME
COMMENT $3C0B anim delay value
COMMENT $3C0C pointer to next anim object
COMMENT $3C0E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C0F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C10 halfspeed value
COMMENT $3C11 special flag
COMMENT_LINE $3C12 ; back from here
COMMENT $3C14 draw to y, x
COMMENT $3C16 draw to y, x
COMMENT $3C18 draw to y, x
COMMENT $3C1A draw to y, x
COMMENT $3C1C draw to y, x
COMMENT $3C1E draw to y, x
COMMENT $3C20 draw to y, x
COMMENT $3C22 draw to y, x
COMMENT $3C24 draw to y, x
COMMENT $3C26 draw to y, x
COMMENT $3C28 draw to y, x
COMMENT $3C2A draw to y, x
COMMENT $3C2C draw to y, x
COMMENT $3C2E draw to y, x
COMMENT $3C30 draw to y, x
COMMENT $3C32 draw to y, x
COMMENT $3C34 draw to y, x
COMMENT $3C36 speed + direction
COMMENT $3C37 graphic definition
COMMENT $3C39 length in SCALE_FACTOR_GAME
COMMENT $3C3A anim delay value
COMMENT $3C3B pointer to next anim object
COMMENT $3C3D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C3E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C3F halfspeed value
COMMENT $3C40 special flag
COMMENT $3C41 speed + direction
COMMENT $3C42 graphic definition
COMMENT $3C44 length in SCALE_FACTOR_GAME
COMMENT $3C45 anim delay value
COMMENT $3C46 pointer to next anim object
COMMENT $3C48 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C49 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C4A halfspeed value
COMMENT $3C4B special flag
COMMENT_LINE $3C4C sprite definition
COMMENT $3C4E draw to y, x
COMMENT $3C50 draw to y, x
COMMENT $3C52 draw to y, x
COMMENT $3C54 draw to y, x
COMMENT $3C56 draw to y, x
COMMENT $3C58 draw to y, x
COMMENT $3C5A draw to y, x
COMMENT $3C5C draw to y, x
COMMENT $3C5E draw to y, x
COMMENT $3C60 draw to y, x
COMMENT $3C62 draw to y, x
COMMENT $3C64 draw to y, x
COMMENT $3C66 draw to y, x
COMMENT $3C68 draw to y, x
COMMENT $3C6A draw to y, x
COMMENT $3C6C draw to y, x
COMMENT $3C6E draw to y, x
COMMENT $3C70 speed + direction
COMMENT $3C71 graphic definition
COMMENT $3C73 length in SCALE_FACTOR_GAME
COMMENT $3C74 anim delay value
COMMENT $3C75 pointer to next anim object
COMMENT $3C77 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C78 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C79 halfspeed value
COMMENT $3C7A special flag
COMMENT $3C7B speed + direction
COMMENT $3C7C graphic definition
COMMENT $3C7E length in SCALE_FACTOR_GAME
COMMENT $3C7F anim delay value
COMMENT $3C80 pointer to next anim object
COMMENT $3C82 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3C83 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3C84 halfspeed value
COMMENT $3C85 special flag
COMMENT_LINE $3C86 sprite definition
COMMENT $3C88 draw to y, x
COMMENT $3C8A draw to y, x
COMMENT $3C8C draw to y, x
COMMENT $3C8E draw to y, x
COMMENT $3C90 draw to y, x
COMMENT $3C92 draw to y, x
COMMENT $3C94 draw to y, x
COMMENT $3C96 draw to y, x
COMMENT $3C98 draw to y, x
COMMENT $3C9A draw to y, x
COMMENT $3C9C draw to y, x
COMMENT $3C9E draw to y, x
COMMENT $3CA0 draw to y, x
COMMENT $3CA2 draw to y, x
COMMENT $3CA4 draw to y, x
COMMENT $3CA6 draw to y, x
COMMENT $3CA8 draw to y, x
COMMENT $3CAA speed + direction
COMMENT $3CAB graphic definition
COMMENT $3CAD length in SCALE_FACTOR_GAME
COMMENT $3CAE anim delay value
COMMENT $3CAF pointer to next anim object
COMMENT $3CB1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CB2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CB3 halfspeed value
COMMENT $3CB4 special flag
COMMENT $3CB5 speed + direction
COMMENT $3CB6 graphic definition
COMMENT $3CB8 length in SCALE_FACTOR_GAME
COMMENT $3CB9 anim delay value
COMMENT $3CBA pointer to next anim object
COMMENT $3CBC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CBD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CBE halfspeed value
COMMENT $3CBF special flag
COMMENT $3CC0 speed + direction
COMMENT $3CC1 graphic definition
COMMENT $3CC3 length in SCALE_FACTOR_GAME
COMMENT $3CC4 anim delay value
COMMENT $3CC5 pointer to next anim object
COMMENT $3CC7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CC8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CC9 halfspeed value
COMMENT $3CCA special flag
COMMENT $3CCB speed + direction
COMMENT $3CCC graphic definition
COMMENT $3CCE length in SCALE_FACTOR_GAME
COMMENT $3CCF anim delay value
COMMENT $3CD0 pointer to next anim object
COMMENT $3CD2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3CD3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3CD4 halfspeed value
COMMENT $3CD5 special flag
COMMENT_LINE $3CD6 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3CD6 in 2016
COMMENT_LINE $3CD6 all stuff contained here is public domain
COMMENT_LINE $3CD6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3CD6 this file contains the 'sprite' definition for a truck                    ;
COMMENT_LINE $3CD6 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $3CD8 draw to y, x
COMMENT $3CDA draw to y, x
COMMENT $3CDC draw to y, x
COMMENT $3CDE draw to y, x
COMMENT $3CE0 draw to y, x
COMMENT $3CE2 draw to y, x
COMMENT $3CE4 draw to y, x
COMMENT $3CE6 draw to y, x
COMMENT $3CE8 draw to y, x
COMMENT $3CEA draw to y, x
COMMENT $3CEC draw to y, x
COMMENT $3CEE draw to y, x
COMMENT $3CF0 draw to y, x
COMMENT $3CF2 draw to y, x
COMMENT $3CF4 draw to y, x
COMMENT $3CF6 draw to y, x
COMMENT $3CF8 draw to y, x
COMMENT $3CFA draw to y, x
COMMENT $3CFC speed + direction
COMMENT $3CFD graphic definition
COMMENT $3CFF length in SCALE_FACTOR_GAME
COMMENT $3D00 anim delay value
COMMENT $3D01 pointer to next anim object
COMMENT $3D03 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D04 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D06 special flag
COMMENT $3D09 draw to y, x
COMMENT $3D0B draw to y, x
COMMENT $3D0D draw to y, x
COMMENT $3D0F draw to y, x
COMMENT $3D11 draw to y, x
COMMENT $3D13 draw to y, x
COMMENT $3D15 draw to y, x
COMMENT $3D17 draw to y, x
COMMENT $3D19 draw to y, x
COMMENT $3D1B draw to y, x
COMMENT $3D1D draw to y, x
COMMENT $3D1F draw to y, x
COMMENT $3D21 draw to y, x
COMMENT $3D23 draw to y, x
COMMENT $3D25 draw to y, x
COMMENT $3D27 draw to y, x
COMMENT $3D29 draw to y, x
COMMENT $3D2B draw to y, x
COMMENT $3D2D speed + direction
COMMENT $3D2E graphic definition
COMMENT $3D30 length in SCALE_FACTOR_GAME
COMMENT $3D31 anim delay value
COMMENT $3D32 pointer to next anim object
COMMENT $3D34 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D35 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D37 special flag
COMMENT $3D3A draw to y, x
COMMENT $3D3C draw to y, x
COMMENT $3D3E draw to y, x
COMMENT $3D40 draw to y, x
COMMENT $3D42 draw to y, x
COMMENT $3D44 draw to y, x
COMMENT $3D46 draw to y, x
COMMENT $3D48 draw to y, x
COMMENT $3D4A draw to y, x
COMMENT $3D4C draw to y, x
COMMENT $3D4E draw to y, x
COMMENT $3D50 draw to y, x
COMMENT $3D52 draw to y, x
COMMENT $3D54 draw to y, x
COMMENT $3D56 draw to y, x
COMMENT $3D58 draw to y, x
COMMENT $3D5A draw to y, x
COMMENT $3D5C draw to y, x
COMMENT $3D5E speed + direction
COMMENT $3D5F graphic definition
COMMENT $3D61 length in SCALE_FACTOR_GAME
COMMENT $3D62 anim delay value
COMMENT $3D63 pointer to next anim object
COMMENT $3D65 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D66 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D68 special flag
COMMENT $3D69 speed + direction
COMMENT $3D6A graphic definition
COMMENT $3D6C length in SCALE_FACTOR_GAME
COMMENT $3D6D anim delay value
COMMENT $3D6E pointer to next anim object
COMMENT $3D70 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D71 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D73 special flag
COMMENT $3D74 speed + direction
COMMENT $3D75 graphic definition
COMMENT $3D77 length in SCALE_FACTOR_GAME
COMMENT $3D78 anim delay value
COMMENT $3D79 pointer to next anim object
COMMENT $3D7B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D7C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D7E special flag
COMMENT $3D7F speed + direction
COMMENT $3D80 graphic definition
COMMENT $3D82 length in SCALE_FACTOR_GAME
COMMENT $3D83 anim delay value
COMMENT $3D84 pointer to next anim object
COMMENT $3D86 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3D87 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3D89 special flag
COMMENT_LINE $3D8A this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3D8A in 2016
COMMENT_LINE $3D8A all stuff contained here is public domain
COMMENT_LINE $3D8A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3D8A this file contains 'sprite' definition data for the van                  ;
COMMENT_LINE $3D8A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3D8A for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3D8A van1 is moving to the left with a speed of -1
COMMENT_LINE $3D8A sprite definition
COMMENT $3D8C draw to y, x
COMMENT $3D8E draw to y, x
COMMENT $3D90 draw to y, x
COMMENT $3D92 draw to y, x
COMMENT $3D94 draw to y, x
COMMENT $3D96 draw to y, x
COMMENT $3D98 draw to y, x
COMMENT $3D9A draw to y, x
COMMENT $3D9C draw to y, x
COMMENT $3D9E draw to y, x
COMMENT $3DA0 draw to y, x
COMMENT $3DA2 draw to y, x
COMMENT $3DA4 draw to y, x
COMMENT $3DA6 draw to y, x
COMMENT $3DA8 draw to y, x
COMMENT $3DAA draw to y, x
COMMENT $3DAC draw to y, x
COMMENT $3DAE speed + direction
COMMENT $3DAF graphic definition
COMMENT $3DB1 length in SCALE_FACTOR_GAME
COMMENT $3DB2 anim delay value
COMMENT $3DB3 pointer to next anim object
COMMENT $3DB5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DB6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DB7 halfspeed value
COMMENT $3DB8 special flag
COMMENT $3DB9 speed + direction
COMMENT $3DBA graphic definition
COMMENT $3DBC length in SCALE_FACTOR_GAME
COMMENT $3DBD anim delay value
COMMENT $3DBE pointer to next anim object
COMMENT $3DC0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DC1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DC2 halfspeed value
COMMENT $3DC3 special flag
COMMENT $3DC4 speed + direction
COMMENT $3DC5 graphic definition
COMMENT $3DC7 length in SCALE_FACTOR_GAME
COMMENT $3DC8 anim delay value
COMMENT $3DC9 pointer to next anim object
COMMENT $3DCB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DCC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DCD halfspeed value
COMMENT $3DCE special flag
COMMENT_LINE $3DCF sprite definition
COMMENT $3DD1 draw to y, x
COMMENT $3DD3 draw to y, x
COMMENT $3DD5 draw to y, x
COMMENT $3DD7 draw to y, x
COMMENT $3DD9 draw to y, x
COMMENT $3DDB draw to y, x
COMMENT $3DDD draw to y, x
COMMENT $3DDF draw to y, x
COMMENT $3DE1 draw to y, x
COMMENT $3DE3 draw to y, x
COMMENT $3DE5 draw to y, x
COMMENT $3DE7 draw to y, x
COMMENT $3DE9 draw to y, x
COMMENT $3DEB draw to y, x
COMMENT $3DED draw to y, x
COMMENT $3DEF draw to y, x
COMMENT $3DF1 draw to y, x
COMMENT $3DF3 speed + direction
COMMENT $3DF4 graphic definition
COMMENT $3DF6 length in SCALE_FACTOR_GAME
COMMENT $3DF7 anim delay value
COMMENT $3DF8 pointer to next anim object
COMMENT $3DFA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3DFB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3DFC halfspeed value
COMMENT $3DFD special flag
COMMENT $3DFE speed + direction
COMMENT $3DFF graphic definition
COMMENT $3E01 length in SCALE_FACTOR_GAME
COMMENT $3E02 anim delay value
COMMENT $3E03 pointer to next anim object
COMMENT $3E05 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E06 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E07 halfspeed value
COMMENT $3E08 special flag
COMMENT $3E09 speed + direction
COMMENT $3E0A graphic definition
COMMENT $3E0C length in SCALE_FACTOR_GAME
COMMENT $3E0D anim delay value
COMMENT $3E0E pointer to next anim object
COMMENT $3E10 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E11 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E12 halfspeed value
COMMENT $3E13 special flag
COMMENT $3E16 draw to y, x
COMMENT $3E18 draw to y, x
COMMENT $3E1A draw to y, x
COMMENT $3E1C draw to y, x
COMMENT $3E1E draw to y, x
COMMENT $3E20 draw to y, x
COMMENT $3E22 draw to y, x
COMMENT $3E24 draw to y, x
COMMENT $3E26 draw to y, x
COMMENT $3E28 draw to y, x
COMMENT $3E2A draw to y, x
COMMENT $3E2C draw to y, x
COMMENT $3E2E draw to y, x
COMMENT $3E30 draw to y, x
COMMENT $3E32 draw to y, x
COMMENT $3E34 draw to y, x
COMMENT $3E36 draw to y, x
COMMENT $3E38 speed + direction
COMMENT $3E39 graphic definition
COMMENT $3E3B length in SCALE_FACTOR_GAME
COMMENT $3E3C anim delay value
COMMENT $3E3D pointer to next anim object
COMMENT $3E3F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E40 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E41 halfspeed value
COMMENT $3E42 special flag
COMMENT $3E43 speed + direction
COMMENT $3E44 graphic definition
COMMENT $3E46 length in SCALE_FACTOR_GAME
COMMENT $3E47 anim delay value
COMMENT $3E48 pointer to next anim object
COMMENT $3E4A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E4B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E4C halfspeed value
COMMENT $3E4D special flag
COMMENT $3E4E speed + direction
COMMENT $3E4F graphic definition
COMMENT $3E51 length in SCALE_FACTOR_GAME
COMMENT $3E52 anim delay value
COMMENT $3E53 pointer to next anim object
COMMENT $3E55 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E56 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E57 halfspeed value
COMMENT $3E58 special flag
COMMENT $3E59 speed + direction
COMMENT $3E5A graphic definition
COMMENT $3E5C length in SCALE_FACTOR_GAME
COMMENT $3E5D anim delay value
COMMENT $3E5E pointer to next anim object
COMMENT $3E60 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E61 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E62 halfspeed value
COMMENT $3E63 special flag
COMMENT $3E64 speed + direction
COMMENT $3E65 graphic definition
COMMENT $3E67 length in SCALE_FACTOR_GAME
COMMENT $3E68 anim delay value
COMMENT $3E69 pointer to next anim object
COMMENT $3E6B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E6C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E6D halfspeed value
COMMENT $3E6E special flag
COMMENT $3E6F speed + direction
COMMENT $3E70 graphic definition
COMMENT $3E72 length in SCALE_FACTOR_GAME
COMMENT $3E73 anim delay value
COMMENT $3E74 pointer to next anim object
COMMENT $3E76 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3E77 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3E78 halfspeed value
COMMENT $3E79 special flag
COMMENT_LINE $3E7A this file is part of Karl Quappe, written by Malban
COMMENT_LINE $3E7A in 2016
COMMENT_LINE $3E7A all stuff contained here is public domain
COMMENT_LINE $3E7A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3E7A this file contains 'sprite' definition data for a motorcycle              ;
COMMENT_LINE $3E7A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3E7A for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3E7A moped1 is moving to the left with a speed of -1
COMMENT $3E7C draw to y, x
COMMENT $3E7E draw to y, x
COMMENT $3E80 draw to y, x
COMMENT $3E82 draw to y, x
COMMENT $3E84 draw to y, x
COMMENT $3E86 draw to y, x
COMMENT $3E88 draw to y, x
COMMENT $3E8A draw to y, x
COMMENT $3E8C draw to y, x
COMMENT $3E8E draw to y, x
COMMENT $3E90 draw to y, x
COMMENT $3E92 draw to y, x
COMMENT $3E94 draw to y, x
COMMENT $3E96 draw to y, x
COMMENT $3E98 draw to y, x
COMMENT $3E9A draw to y, x
COMMENT $3E9C draw to y, x
COMMENT $3E9E speed + direction
COMMENT $3E9F graphic definition
COMMENT $3EA1 length in SCALE_FACTOR_GAME
COMMENT $3EA2 anim delay value
COMMENT $3EA3 pointer to next anim object
COMMENT $3EA5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3EA6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3EA7 halfspeed value
COMMENT $3EA8 special flag
COMMENT $3EAB draw to y, x
COMMENT $3EAD draw to y, x
COMMENT $3EAF draw to y, x
COMMENT $3EB1 draw to y, x
COMMENT $3EB3 draw to y, x
COMMENT $3EB5 draw to y, x
COMMENT $3EB7 draw to y, x
COMMENT $3EB9 draw to y, x
COMMENT $3EBB draw to y, x
COMMENT $3EBD draw to y, x
COMMENT $3EBF draw to y, x
COMMENT $3EC1 draw to y, x
COMMENT $3EC3 draw to y, x
COMMENT $3EC5 draw to y, x
COMMENT $3EC7 draw to y, x
COMMENT $3EC9 draw to y, x
COMMENT $3ECB draw to y, x
COMMENT $3ECD draw to y, x
COMMENT $3ECF speed + direction
COMMENT $3ED0 graphic definition
COMMENT $3ED2 length in SCALE_FACTOR_GAME
COMMENT $3ED3 anim delay value
COMMENT $3ED4 pointer to next anim object
COMMENT $3ED6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3ED7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3ED8 halfspeed value
COMMENT $3ED9 special flag
COMMENT $3EDC draw to y, x
COMMENT $3EDE draw to y, x
COMMENT $3EE0 draw to y, x
COMMENT $3EE2 draw to y, x
COMMENT $3EE4 draw to y, x
COMMENT $3EE6 draw to y, x
COMMENT $3EE8 draw to y, x
COMMENT $3EEA draw to y, x
COMMENT $3EEC draw to y, x
COMMENT $3EEE draw to y, x
COMMENT $3EF0 draw to y, x
COMMENT $3EF2 draw to y, x
COMMENT $3EF4 draw to y, x
COMMENT $3EF6 draw to y, x
COMMENT $3EF8 draw to y, x
COMMENT $3EFA draw to y, x
COMMENT $3EFC draw to y, x
COMMENT $3EFE draw to y, x
COMMENT $3F00 speed + direction
COMMENT $3F01 graphic definition
COMMENT $3F03 length in SCALE_FACTOR_GAME
COMMENT $3F04 anim delay value
COMMENT $3F05 pointer to next anim object
COMMENT $3F07 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F08 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F09 halfspeed value
COMMENT $3F0A special flag
COMMENT $3F0D draw to y, x
COMMENT $3F0F draw to y, x
COMMENT $3F11 draw to y, x
COMMENT $3F13 draw to y, x
COMMENT $3F15 draw to y, x
COMMENT $3F17 draw to y, x
COMMENT $3F19 draw to y, x
COMMENT $3F1B draw to y, x
COMMENT $3F1D draw to y, x
COMMENT $3F1F draw to y, x
COMMENT $3F21 draw to y, x
COMMENT $3F23 draw to y, x
COMMENT $3F25 draw to y, x
COMMENT $3F27 draw to y, x
COMMENT $3F29 draw to y, x
COMMENT $3F2B draw to y, x
COMMENT $3F2D draw to y, x
COMMENT $3F2F draw to y, x
COMMENT $3F31 draw to y, x
COMMENT $3F33 speed + direction
COMMENT $3F34 graphic definition
COMMENT $3F36 length in SCALE_FACTOR_GAME
COMMENT $3F37 anim delay value
COMMENT $3F38 pointer to next anim object
COMMENT $3F3A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F3B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F3C halfspeed value
COMMENT $3F3D special flag
COMMENT $3F3E speed + direction
COMMENT $3F3F graphic definition
COMMENT $3F41 length in SCALE_FACTOR_GAME
COMMENT $3F42 anim delay value
COMMENT $3F43 pointer to next anim object
COMMENT $3F45 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F46 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F47 halfspeed value
COMMENT $3F48 special flag
COMMENT $3F49 speed + direction
COMMENT $3F4A graphic definition
COMMENT $3F4C length in SCALE_FACTOR_GAME
COMMENT $3F4D anim delay value
COMMENT $3F4E pointer to next anim object
COMMENT $3F50 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F51 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F52 halfspeed value
COMMENT $3F53 special flag
COMMENT $3F54 speed + direction
COMMENT $3F55 graphic definition
COMMENT $3F57 length in SCALE_FACTOR_GAME
COMMENT $3F58 anim delay value
COMMENT $3F59 pointer to next anim object
COMMENT $3F5B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F5C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F5D halfspeed value
COMMENT $3F5E special flag
COMMENT $3F5F speed + direction
COMMENT $3F60 graphic definition
COMMENT $3F62 length in SCALE_FACTOR_GAME
COMMENT $3F63 anim delay value
COMMENT $3F64 pointer to next anim object
COMMENT $3F66 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3F67 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3F68 halfspeed value
COMMENT $3F69 special flag
COMMENT_LINE $3F6A this file is part of vectrex frogger, written by Malban
COMMENT_LINE $3F6A in March-April 1998
COMMENT_LINE $3F6A all stuff contained here is public domain
COMMENT_LINE $3F6A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3F6A this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $3F6A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $3F6A for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $3F6A log1 is moving right with a speed of 1
COMMENT_LINE $3F6A log2 is moving left with a speed of -1
COMMENT $3F6C draw to y, x
COMMENT $3F6E draw to y, x
COMMENT $3F70 draw to y, x
COMMENT $3F72 draw to y, x
COMMENT $3F74 draw to y, x
COMMENT $3F76 draw to y, x
COMMENT $3F78 draw to y, x
COMMENT $3F7A draw to y, x
COMMENT $3F7C draw to y, x
COMMENT $3F7E draw to y, x
COMMENT $3F80 draw to y, x
COMMENT $3F82 draw to y, x
COMMENT $3F84 draw to y, x
COMMENT $3F86 draw to y, x
COMMENT $3F8A draw to y, x
COMMENT $3F8C draw to y, x
COMMENT $3F8E draw to y, x
COMMENT $3F90 draw to y, x
COMMENT $3F92 draw to y, x
COMMENT $3F94 draw to y, x
COMMENT $3F96 draw to y, x
COMMENT $3F98 draw to y, x
COMMENT $3F9A draw to y, x
COMMENT $3F9C draw to y, x
COMMENT $3F9E draw to y, x
COMMENT $3FA0 draw to y, x
COMMENT $3FA2 draw to y, x
COMMENT $3FA4 draw to y, x
COMMENT $3FA8 draw to y, x
COMMENT $3FAA draw to y, x
COMMENT $3FAC draw to y, x
COMMENT $3FAE draw to y, x
COMMENT $3FB0 draw to y, x
COMMENT $3FB2 draw to y, x
COMMENT $3FB4 draw to y, x
COMMENT $3FB6 draw to y, x
COMMENT $3FB8 draw to y, x
COMMENT $3FBA draw to y, x
COMMENT $3FBC draw to y, x
COMMENT $3FBE draw to y, x
COMMENT $3FC0 draw to y, x
COMMENT $3FC2 draw to y, x
COMMENT $3FC6 draw to y, x
COMMENT $3FC8 draw to y, x
COMMENT $3FCA draw to y, x
COMMENT $3FCC draw to y, x
COMMENT $3FCE draw to y, x
COMMENT $3FD0 draw to y, x
COMMENT $3FD2 draw to y, x
COMMENT $3FD4 draw to y, x
COMMENT $3FD6 draw to y, x
COMMENT $3FD8 draw to y, x
COMMENT $3FDA draw to y, x
COMMENT $3FDC draw to y, x
COMMENT $3FDE draw to y, x
COMMENT $3FE0 draw to y, x
COMMENT $3FE2 speed + direction
COMMENT $3FE3 graphic definition
COMMENT $3FE5 length in SCALE_FACTOR_GAME
COMMENT $3FE6 anim delay value
COMMENT $3FE7 pointer to next anim object
COMMENT $3FE9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $3FEA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $3FEB halfspeed value
COMMENT $3FEC special flag
COMMENT $3FEF draw to y, x
COMMENT $3FF1 draw to y, x
COMMENT $3FF3 draw to y, x
COMMENT $3FF5 draw to y, x
COMMENT $3FF7 draw to y, x
COMMENT $3FF9 draw to y, x
COMMENT $3FFB draw to y, x
COMMENT $3FFD draw to y, x
COMMENT $3FFF draw to y, x
COMMENT $4001 draw to y, x
COMMENT $4003 draw to y, x
COMMENT $4005 draw to y, x
COMMENT $4007 draw to y, x
COMMENT $4009 draw to y, x
COMMENT $400B speed + direction
COMMENT $400C graphic definition
COMMENT $400E length in SCALE_FACTOR_GAME
COMMENT $400F anim delay value
COMMENT $4010 pointer to next anim object
COMMENT $4012 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4013 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4014 halfspeed value
COMMENT $4015 special flag
COMMENT $4018 draw to y, x
COMMENT $401A draw to y, x
COMMENT $401C draw to y, x
COMMENT $401E draw to y, x
COMMENT $4020 draw to y, x
COMMENT $4022 draw to y, x
COMMENT $4024 draw to y, x
COMMENT $4026 draw to y, x
COMMENT $4028 draw to y, x
COMMENT $402A draw to y, x
COMMENT $402C draw to y, x
COMMENT $402E draw to y, x
COMMENT $4030 draw to y, x
COMMENT $4032 draw to y, x
COMMENT $4034 speed + direction
COMMENT $4035 graphic definition
COMMENT $4037 length in SCALE_FACTOR_GAME
COMMENT $4038 anim delay value
COMMENT $4039 pointer to next anim object
COMMENT $403B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $403C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $403D halfspeed value
COMMENT $403E special flag
COMMENT $403F speed + direction
COMMENT $4040 graphic definition
COMMENT $4042 length in SCALE_FACTOR_GAME
COMMENT $4043 anim delay value
COMMENT $4044 pointer to next anim object
COMMENT $4046 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4047 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4048 halfspeed value
COMMENT $4049 special flag
COMMENT $404A speed + direction
COMMENT $404B graphic definition
COMMENT $404D length in SCALE_FACTOR_GAME
COMMENT $404E anim delay value
COMMENT $404F pointer to next anim object
COMMENT $4051 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4052 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4053 halfspeed value
COMMENT $4054 special flag
COMMENT $4055 speed + direction
COMMENT $4056 graphic definition
COMMENT $4058 length in SCALE_FACTOR_GAME
COMMENT $4059 anim delay value
COMMENT $405A pointer to next anim object
COMMENT $405C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $405D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $405E halfspeed value
COMMENT $405F special flag
COMMENT $4060 speed + direction
COMMENT $4061 graphic definition
COMMENT $4063 length in SCALE_FACTOR_GAME
COMMENT $4064 anim delay value
COMMENT $4065 pointer to next anim object
COMMENT $4067 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4068 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4069 halfspeed value
COMMENT $406A special flag
COMMENT $406B speed + direction
COMMENT $406C graphic definition
COMMENT $406E length in SCALE_FACTOR_GAME
COMMENT $406F anim delay value
COMMENT $4070 pointer to next anim object
COMMENT $4072 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4073 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4074 halfspeed value
COMMENT $4075 special flag
COMMENT $4076 speed + direction
COMMENT $4077 graphic definition
COMMENT $4079 length in SCALE_FACTOR_GAME
COMMENT $407A anim delay value
COMMENT $407B pointer to next anim object
COMMENT $407D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $407E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $407F halfspeed value
COMMENT $4080 special flag
COMMENT $4081 speed + direction
COMMENT $4082 graphic definition
COMMENT $4084 length in SCALE_FACTOR_GAME
COMMENT $4085 anim delay value
COMMENT $4086 pointer to next anim object
COMMENT $4088 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4089 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $408A halfspeed value
COMMENT $408B special flag
COMMENT $408C speed + direction
COMMENT $408D graphic definition
COMMENT $408F length in SCALE_FACTOR_GAME
COMMENT $4090 anim delay value
COMMENT $4091 pointer to next anim object
COMMENT $4093 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4094 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4095 halfspeed value
COMMENT $4096 special flag
COMMENT $4097 speed + direction
COMMENT $4098 graphic definition
COMMENT $409A length in SCALE_FACTOR_GAME
COMMENT $409B anim delay value
COMMENT $409C pointer to next anim object
COMMENT $409E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $409F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40A0 halfspeed value
COMMENT $40A1 special flag
COMMENT $40A2 speed + direction
COMMENT $40A3 graphic definition
COMMENT $40A5 length in SCALE_FACTOR_GAME
COMMENT $40A6 anim delay value
COMMENT $40A7 pointer to next anim object
COMMENT $40A9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40AA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40AB halfspeed value
COMMENT $40AC special flag
COMMENT $40AD speed + direction
COMMENT $40AE graphic definition
COMMENT $40B0 length in SCALE_FACTOR_GAME
COMMENT $40B1 anim delay value
COMMENT $40B2 pointer to next anim object
COMMENT $40B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40B6 halfspeed value
COMMENT $40B7 special flag
COMMENT $40B8 speed + direction
COMMENT $40B9 graphic definition
COMMENT $40BB length in SCALE_FACTOR_GAME
COMMENT $40BC anim delay value
COMMENT $40BD pointer to next anim object
COMMENT $40BF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40C0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40C1 halfspeed value
COMMENT $40C2 special flag
COMMENT $40C3 speed + direction
COMMENT $40C4 graphic definition
COMMENT $40C6 length in SCALE_FACTOR_GAME
COMMENT $40C7 anim delay value
COMMENT $40C8 pointer to next anim object
COMMENT $40CA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40CB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40CC halfspeed value
COMMENT $40CD special flag
COMMENT_LINE $40CE this file is part of Karl Quappe, written by Malban
COMMENT_LINE $40CE in 2016
COMMENT_LINE $40CE all stuff contained here is public domain
COMMENT_LINE $40CE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $40CE this file contains 'sprite' definition data for logs                      ;
COMMENT_LINE $40CE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $40CE for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $40CE log1 is moving right with a speed of 1
COMMENT_LINE $40CE log2 is moving left with a speed of -1
COMMENT $40D0 draw to y, x
COMMENT $40D2 draw to y, x
COMMENT $40D4 draw to y, x
COMMENT $40D6 draw to y, x
COMMENT $40D8 draw to y, x
COMMENT $40DA draw to y, x
COMMENT $40DC draw to y, x
COMMENT $40DE draw to y, x
COMMENT $40E0 draw to y, x
COMMENT $40E2 draw to y, x
COMMENT $40E4 draw to y, x
COMMENT $40E6 draw to y, x
COMMENT $40E8 speed + direction
COMMENT $40E9 graphic definition
COMMENT $40EB length in SCALE_FACTOR_GAME
COMMENT $40EC anim delay value
COMMENT $40ED pointer to next anim object
COMMENT $40EF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $40F0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $40F2 special flag
COMMENT $40F5 draw to y, x
COMMENT $40F7 draw to y, x
COMMENT $40F9 draw to y, x
COMMENT $40FB draw to y, x
COMMENT $40FD draw to y, x
COMMENT $40FF draw to y, x
COMMENT $4101 draw to y, x
COMMENT $4103 draw to y, x
COMMENT $4105 draw to y, x
COMMENT $4107 draw to y, x
COMMENT $4109 draw to y, x
COMMENT $410B draw to y, x
COMMENT $410D speed + direction
COMMENT $410E graphic definition
COMMENT $4110 length in SCALE_FACTOR_GAME
COMMENT $4111 anim delay value
COMMENT $4112 pointer to next anim object
COMMENT $4114 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4115 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4117 special flag
COMMENT $411A draw to y, x
COMMENT $411C draw to y, x
COMMENT $411E draw to y, x
COMMENT $4120 draw to y, x
COMMENT $4122 draw to y, x
COMMENT $4124 draw to y, x
COMMENT $4126 draw to y, x
COMMENT $4128 draw to y, x
COMMENT $412A draw to y, x
COMMENT $412C draw to y, x
COMMENT $412E draw to y, x
COMMENT $4130 draw to y, x
COMMENT $4132 speed + direction
COMMENT $4133 graphic definition
COMMENT $4135 length in SCALE_FACTOR_GAME
COMMENT $4136 anim delay value
COMMENT $4137 pointer to next anim object
COMMENT $4139 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $413A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $413C special flag
COMMENT $413D speed + direction
COMMENT $413E graphic definition
COMMENT $4140 length in SCALE_FACTOR_GAME
COMMENT $4141 anim delay value
COMMENT $4142 pointer to next anim object
COMMENT $4144 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4145 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4147 special flag
COMMENT $414A draw to y, x
COMMENT $414C draw to y, x
COMMENT $414E draw to y, x
COMMENT $4150 draw to y, x
COMMENT $4152 draw to y, x
COMMENT $4154 draw to y, x
COMMENT $4156 draw to y, x
COMMENT $4158 draw to y, x
COMMENT $415A draw to y, x
COMMENT $415C draw to y, x
COMMENT $415E draw to y, x
COMMENT $4160 speed + direction
COMMENT $4161 graphic definition
COMMENT $4163 length in SCALE_FACTOR_GAME
COMMENT $4164 anim delay value
COMMENT $4165 pointer to next anim object
COMMENT $4167 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4168 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $416A special flag
COMMENT $416D draw to y, x
COMMENT $416F draw to y, x
COMMENT $4171 draw to y, x
COMMENT $4173 draw to y, x
COMMENT $4175 draw to y, x
COMMENT $4177 draw to y, x
COMMENT $4179 draw to y, x
COMMENT $417B draw to y, x
COMMENT $417D draw to y, x
COMMENT $417F draw to y, x
COMMENT $4181 draw to y, x
COMMENT $4183 speed + direction
COMMENT $4184 graphic definition
COMMENT $4186 length in SCALE_FACTOR_GAME
COMMENT $4187 anim delay value
COMMENT $4188 pointer to next anim object
COMMENT $418A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $418B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $418D special flag
COMMENT $4190 draw to y, x
COMMENT $4192 draw to y, x
COMMENT $4194 draw to y, x
COMMENT $4196 draw to y, x
COMMENT $4198 draw to y, x
COMMENT $419A draw to y, x
COMMENT $419C draw to y, x
COMMENT $419E draw to y, x
COMMENT $41A0 draw to y, x
COMMENT $41A2 draw to y, x
COMMENT $41A4 draw to y, x
COMMENT $41A6 speed + direction
COMMENT $41A7 graphic definition
COMMENT $41A9 length in SCALE_FACTOR_GAME
COMMENT $41AA anim delay value
COMMENT $41AB pointer to next anim object
COMMENT $41AD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41AE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41B0 special flag
COMMENT $41B1 speed + direction
COMMENT $41B2 graphic definition
COMMENT $41B4 length in SCALE_FACTOR_GAME
COMMENT $41B5 anim delay value
COMMENT $41B6 pointer to next anim object
COMMENT $41B8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41B9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41BB special flag
COMMENT $41BC speed + direction
COMMENT $41BD graphic definition
COMMENT $41BF length in SCALE_FACTOR_GAME
COMMENT $41C0 anim delay value
COMMENT $41C1 pointer to next anim object
COMMENT $41C3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41C4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41C6 special flag
COMMENT $41C7 speed + direction
COMMENT $41C8 graphic definition
COMMENT $41CA length in SCALE_FACTOR_GAME
COMMENT $41CB anim delay value
COMMENT $41CC pointer to next anim object
COMMENT $41CE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41CF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41D1 special flag
COMMENT $41D2 speed + direction
COMMENT $41D3 graphic definition
COMMENT $41D5 length in SCALE_FACTOR_GAME
COMMENT $41D6 anim delay value
COMMENT $41D7 pointer to next anim object
COMMENT $41D9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41DA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41DC special flag
COMMENT $41DD speed + direction
COMMENT $41DE graphic definition
COMMENT $41E0 length in SCALE_FACTOR_GAME
COMMENT $41E1 anim delay value
COMMENT $41E2 pointer to next anim object
COMMENT $41E4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41E5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41E7 special flag
COMMENT $41E8 speed + direction
COMMENT $41E9 graphic definition
COMMENT $41EB length in SCALE_FACTOR_GAME
COMMENT $41EC anim delay value
COMMENT $41ED pointer to next anim object
COMMENT $41EF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41F0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41F2 special flag
COMMENT $41F3 speed + direction
COMMENT $41F4 graphic definition
COMMENT $41F6 length in SCALE_FACTOR_GAME
COMMENT $41F7 anim delay value
COMMENT $41F8 pointer to next anim object
COMMENT $41FA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $41FB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $41FD special flag
COMMENT $41FE speed + direction
COMMENT $41FF graphic definition
COMMENT $4201 length in SCALE_FACTOR_GAME
COMMENT $4202 anim delay value
COMMENT $4203 pointer to next anim object
COMMENT $4205 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4206 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4208 special flag
COMMENT $4209 speed + direction
COMMENT $420A graphic definition
COMMENT $420C length in SCALE_FACTOR_GAME
COMMENT $420D anim delay value
COMMENT $420E pointer to next anim object
COMMENT $4210 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4211 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4213 special flag
COMMENT_LINE $4214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4214 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4214 in 2016
COMMENT_LINE $4214 all stuff contained here is public domain
COMMENT_LINE $4214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4214 this file contains all 'sprite' definitions for turtles used in           ;
COMMENT_LINE $4214 vectrex frogger (excluding the '0')                                       ;
COMMENT_LINE $4214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4214 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $4214 turtle1 is moving to the right with a speed of 1
COMMENT_LINE $4214 turtle2 is moving to the left with a speed of -1
COMMENT_LINE $4214 turtle3 is moving to the right with a speed of 2
COMMENT_LINE $4214 turtle4 is moving to the left with a speed of -2
COMMENT $422C speed + direction
COMMENT $422D graphic definition
COMMENT $422F length in SCALE_FACTOR_GAME
COMMENT $4230 anim delay value
COMMENT $4231 pointer to next anim object
COMMENT $4233 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4234 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4235 halfspeed value
COMMENT $4236 special flag
COMMENT $4253 speed + direction
COMMENT $4254 graphic definition
COMMENT $4256 length in SCALE_FACTOR_GAME
COMMENT $4257 anim delay value
COMMENT $4258 pointer to next anim object
COMMENT $425A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $425B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $425C halfspeed value
COMMENT $425D special flag
COMMENT $427A speed + direction
COMMENT $427B graphic definition
COMMENT $427D length in SCALE_FACTOR_GAME
COMMENT $427E anim delay value
COMMENT $427F pointer to next anim object
COMMENT $4281 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4282 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4283 halfspeed value
COMMENT $4284 special flag
COMMENT $429D speed + direction
COMMENT $429E graphic definition
COMMENT $42A0 length in SCALE_FACTOR_GAME
COMMENT $42A1 anim delay value
COMMENT $42A2 pointer to next anim object
COMMENT $42A4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42A5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42A6 halfspeed value
COMMENT $42A7 special flag
COMMENT $42C4 speed + direction
COMMENT $42C5 graphic definition
COMMENT $42C7 length in SCALE_FACTOR_GAME
COMMENT $42C8 anim delay value
COMMENT $42C9 pointer to next anim object
COMMENT $42CB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42CC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42CD halfspeed value
COMMENT $42CE special flag
COMMENT $42EB speed + direction
COMMENT $42EC graphic definition
COMMENT $42EE length in SCALE_FACTOR_GAME
COMMENT $42EF anim delay value
COMMENT $42F0 pointer to next anim object
COMMENT $42F2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42F3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42F4 halfspeed value
COMMENT $42F5 special flag
COMMENT $42F6 speed + direction
COMMENT $42F7 graphic definition
COMMENT $42F9 length in SCALE_FACTOR_GAME
COMMENT $42FA anim delay value
COMMENT $42FB pointer to next anim object
COMMENT $42FD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $42FE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $42FF halfspeed value
COMMENT $4300 special flag
COMMENT $4301 speed + direction
COMMENT $4302 graphic definition
COMMENT $4304 length in SCALE_FACTOR_GAME
COMMENT $4305 anim delay value
COMMENT $4306 pointer to next anim object
COMMENT $4308 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4309 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $430A halfspeed value
COMMENT $430B special flag
COMMENT $430C speed + direction
COMMENT $430D graphic definition
COMMENT $430F length in SCALE_FACTOR_GAME
COMMENT $4310 anim delay value
COMMENT $4311 pointer to next anim object
COMMENT $4313 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4314 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4315 halfspeed value
COMMENT $4316 special flag
COMMENT $4317 speed + direction
COMMENT $4318 graphic definition
COMMENT $431A length in SCALE_FACTOR_GAME
COMMENT $431B anim delay value
COMMENT $431C pointer to next anim object
COMMENT $431E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $431F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4320 halfspeed value
COMMENT $4321 special flag
COMMENT $4322 speed + direction
COMMENT $4323 graphic definition
COMMENT $4325 length in SCALE_FACTOR_GAME
COMMENT $4326 anim delay value
COMMENT $4327 pointer to next anim object
COMMENT $4329 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $432A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $432B halfspeed value
COMMENT $432C special flag
COMMENT $432D speed + direction
COMMENT $432E graphic definition
COMMENT $4330 length in SCALE_FACTOR_GAME
COMMENT $4331 anim delay value
COMMENT $4332 pointer to next anim object
COMMENT $4334 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4335 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4336 halfspeed value
COMMENT $4337 special flag
COMMENT $4338 speed + direction
COMMENT $4339 graphic definition
COMMENT $433B length in SCALE_FACTOR_GAME
COMMENT $433C anim delay value
COMMENT $433D pointer to next anim object
COMMENT $433F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4340 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4341 halfspeed value
COMMENT $4342 special flag
COMMENT $4343 alternate object for diving
COMMENT $4345 speed + direction
COMMENT $4346 graphic definition
COMMENT $4348 length in SCALE_FACTOR_GAME
COMMENT $4349 anim delay value
COMMENT $434A pointer to next anim object
COMMENT $434C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $434D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $434E halfspeed value
COMMENT $434F special flag
COMMENT $4350 alternate object for diving
COMMENT $4352 speed + direction
COMMENT $4353 graphic definition
COMMENT $4355 length in SCALE_FACTOR_GAME
COMMENT $4356 anim delay value
COMMENT $4357 pointer to next anim object
COMMENT $4359 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $435A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $435B halfspeed value
COMMENT $435C special flag
COMMENT $435D alternate object for diving
COMMENT $435F speed + direction
COMMENT $4360 graphic definition
COMMENT $4362 length in SCALE_FACTOR_GAME
COMMENT $4363 anim delay value
COMMENT $4364 pointer to next anim object
COMMENT $4366 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4367 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4368 halfspeed value
COMMENT $4369 special flag
COMMENT $436A alternate object for diving
COMMENT $436C speed + direction
COMMENT $436D graphic definition
COMMENT $436F length in SCALE_FACTOR_GAME
COMMENT $4370 anim delay value
COMMENT $4371 pointer to next anim object
COMMENT $4373 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4374 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4375 halfspeed value
COMMENT $4376 special flag
COMMENT $4377 alternate object for diving
COMMENT $4379 speed + direction
COMMENT $437A graphic definition
COMMENT $437C length in SCALE_FACTOR_GAME
COMMENT $437D anim delay value
COMMENT $437E pointer to next anim object
COMMENT $4380 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4381 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4382 halfspeed value
COMMENT $4383 special flag
COMMENT $4384 alternate object for diving
COMMENT $4386 speed + direction
COMMENT $4387 graphic definition
COMMENT $4389 length in SCALE_FACTOR_GAME
COMMENT $438A anim delay value
COMMENT $438B pointer to next anim object
COMMENT $438D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $438E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $438F halfspeed value
COMMENT $4390 special flag
COMMENT $4391 alternate object for diving
COMMENT $4393 speed + direction
COMMENT $4394 graphic definition
COMMENT $4396 length in SCALE_FACTOR_GAME
COMMENT $4397 anim delay value
COMMENT $4398 pointer to next anim object
COMMENT $439A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $439B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $439C halfspeed value
COMMENT $439D special flag
COMMENT $439E alternate object for diving
COMMENT $43A0 speed + direction
COMMENT $43A1 graphic definition
COMMENT $43A3 length in SCALE_FACTOR_GAME
COMMENT $43A4 anim delay value
COMMENT $43A5 pointer to next anim object
COMMENT $43A7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43A8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43A9 halfspeed value
COMMENT $43AA special flag
COMMENT $43AB alternate object for diving
COMMENT $43AD speed + direction
COMMENT $43AE graphic definition
COMMENT $43B0 length in SCALE_FACTOR_GAME
COMMENT $43B1 anim delay value
COMMENT $43B2 pointer to next anim object
COMMENT $43B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43B6 halfspeed value
COMMENT $43B7 special flag
COMMENT $43B8 alternate object for diving
COMMENT $43BA speed + direction
COMMENT $43BB graphic definition
COMMENT $43BD length in SCALE_FACTOR_GAME
COMMENT $43BE anim delay value
COMMENT $43BF pointer to next anim object
COMMENT $43C1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43C2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43C3 halfspeed value
COMMENT $43C4 special flag
COMMENT $43C5 alternate object for diving
COMMENT $43C7 speed + direction
COMMENT $43C8 graphic definition
COMMENT $43CA length in SCALE_FACTOR_GAME
COMMENT $43CB anim delay value
COMMENT $43CC pointer to next anim object
COMMENT $43CE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $43CF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $43D0 halfspeed value
COMMENT $43D1 special flag
COMMENT $43D2 alternate object for diving
COMMENT_LINE $43D4 sprite definition
COMMENT_LINE $43E8 sprite definition
COMMENT_LINE $43FC sprite definition
COMMENT_LINE $440A sprite definition
COMMENT_LINE $4428 sprite definition
COMMENT_LINE $443C sprite definition
COMMENT $4446 speed + direction
COMMENT $4447 graphic definition
COMMENT $4449 length in SCALE_FACTOR_GAME
COMMENT $444A anim delay value
COMMENT $444B pointer to next anim object
COMMENT $444D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $444E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $444F halfspeed value
COMMENT $4450 special flag
COMMENT $4451 alternate object for diving
COMMENT $4453 speed + direction
COMMENT $4454 graphic definition
COMMENT $4456 length in SCALE_FACTOR_GAME
COMMENT $4457 anim delay value
COMMENT $4458 pointer to next anim object
COMMENT $445A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $445B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $445C halfspeed value
COMMENT $445D special flag
COMMENT $445E alternate object for diving
COMMENT $4460 speed + direction
COMMENT $4461 graphic definition
COMMENT $4463 length in SCALE_FACTOR_GAME
COMMENT $4464 anim delay value
COMMENT $4465 pointer to next anim object
COMMENT $4467 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4468 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4469 halfspeed value
COMMENT $446A special flag
COMMENT $446B alternate object for diving
COMMENT $446D speed + direction
COMMENT $446E graphic definition
COMMENT $4470 length in SCALE_FACTOR_GAME
COMMENT $4471 anim delay value
COMMENT $4472 pointer to next anim object
COMMENT $4474 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4475 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4476 halfspeed value
COMMENT $4477 special flag
COMMENT $4478 alternate object for diving
COMMENT $447A speed + direction
COMMENT $447B graphic definition
COMMENT $447D length in SCALE_FACTOR_GAME
COMMENT $447E anim delay value
COMMENT $447F pointer to next anim object
COMMENT $4481 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4482 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4483 halfspeed value
COMMENT $4484 special flag
COMMENT $4485 alternate object for diving
COMMENT $4487 speed + direction
COMMENT $4488 graphic definition
COMMENT $448A length in SCALE_FACTOR_GAME
COMMENT $448B anim delay value
COMMENT $448C pointer to next anim object
COMMENT $448E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $448F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4490 halfspeed value
COMMENT $4491 special flag
COMMENT $4492 alternate object for diving
COMMENT $4494 speed + direction
COMMENT $4495 graphic definition
COMMENT $4497 length in SCALE_FACTOR_GAME
COMMENT $4498 anim delay value
COMMENT $4499 pointer to next anim object
COMMENT $449B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $449C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $449D halfspeed value
COMMENT $449E special flag
COMMENT $449F alternate object for diving
COMMENT $44A1 speed + direction
COMMENT $44A2 graphic definition
COMMENT $44A4 length in SCALE_FACTOR_GAME
COMMENT $44A5 anim delay value
COMMENT $44A6 pointer to next anim object
COMMENT $44A8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44A9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44AA halfspeed value
COMMENT $44AB special flag
COMMENT $44AC alternate object for diving
COMMENT $44AE speed + direction
COMMENT $44AF graphic definition
COMMENT $44B1 length in SCALE_FACTOR_GAME
COMMENT $44B2 anim delay value
COMMENT $44B3 pointer to next anim object
COMMENT $44B5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44B6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44B7 halfspeed value
COMMENT $44B8 special flag
COMMENT $44B9 alternate object for diving
COMMENT $44BB speed + direction
COMMENT $44BC graphic definition
COMMENT $44BE length in SCALE_FACTOR_GAME
COMMENT $44BF anim delay value
COMMENT $44C0 pointer to next anim object
COMMENT $44C2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44C3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44C4 halfspeed value
COMMENT $44C5 special flag
COMMENT $44C6 alternate object for diving
COMMENT $44C8 speed + direction
COMMENT $44C9 graphic definition
COMMENT $44CB length in SCALE_FACTOR_GAME
COMMENT $44CC anim delay value
COMMENT $44CD pointer to next anim object
COMMENT $44CF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44D0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44D1 halfspeed value
COMMENT $44D2 special flag
COMMENT $44D3 alternate object for diving
COMMENT $44D5 speed + direction
COMMENT $44D6 graphic definition
COMMENT $44D8 length in SCALE_FACTOR_GAME
COMMENT $44D9 anim delay value
COMMENT $44DA pointer to next anim object
COMMENT $44DC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44DD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44DE halfspeed value
COMMENT $44DF special flag
COMMENT $44E0 alternate object for diving
COMMENT $44E2 speed + direction
COMMENT $44E3 graphic definition
COMMENT $44E5 length in SCALE_FACTOR_GAME
COMMENT $44E6 anim delay value
COMMENT $44E7 pointer to next anim object
COMMENT $44E9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44EA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44EB halfspeed value
COMMENT $44EC special flag
COMMENT $44ED alternate object for diving
COMMENT $44EF speed + direction
COMMENT $44F0 graphic definition
COMMENT $44F2 length in SCALE_FACTOR_GAME
COMMENT $44F3 anim delay value
COMMENT $44F4 pointer to next anim object
COMMENT $44F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $44F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $44F8 halfspeed value
COMMENT $44F9 special flag
COMMENT $44FA alternate object for diving
COMMENT $44FC speed + direction
COMMENT $44FD graphic definition
COMMENT $44FF length in SCALE_FACTOR_GAME
COMMENT $4500 anim delay value
COMMENT $4501 pointer to next anim object
COMMENT $4503 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4504 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4505 halfspeed value
COMMENT $4506 special flag
COMMENT $4507 alternate object for diving
COMMENT $4509 speed + direction
COMMENT $450A graphic definition
COMMENT $450C length in SCALE_FACTOR_GAME
COMMENT $450D anim delay value
COMMENT $450E pointer to next anim object
COMMENT $4510 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4511 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4512 halfspeed value
COMMENT $4513 special flag
COMMENT $4514 alternate object for diving
COMMENT $4516 speed + direction
COMMENT $4517 graphic definition
COMMENT $4519 length in SCALE_FACTOR_GAME
COMMENT $451A anim delay value
COMMENT $451B pointer to next anim object
COMMENT $451D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $451E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $451F halfspeed value
COMMENT $4520 special flag
COMMENT $4521 alternate object for diving
COMMENT $4523 speed + direction
COMMENT $4524 graphic definition
COMMENT $4526 length in SCALE_FACTOR_GAME
COMMENT $4527 anim delay value
COMMENT $4528 pointer to next anim object
COMMENT $452A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $452B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $452C halfspeed value
COMMENT $452D special flag
COMMENT $452E alternate object for diving
COMMENT $4530 speed + direction
COMMENT $4531 graphic definition
COMMENT $4533 length in SCALE_FACTOR_GAME
COMMENT $4534 anim delay value
COMMENT $4535 pointer to next anim object
COMMENT $4537 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4538 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4539 halfspeed value
COMMENT $453A special flag
COMMENT $453B alternate object for diving
COMMENT $453D speed + direction
COMMENT $453E graphic definition
COMMENT $4540 length in SCALE_FACTOR_GAME
COMMENT $4541 anim delay value
COMMENT $4542 pointer to next anim object
COMMENT $4544 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4545 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4546 halfspeed value
COMMENT $4547 special flag
COMMENT $4548 alternate object for diving
COMMENT_LINE $454A sprite definition
COMMENT_LINE $455E sprite definition
COMMENT_LINE $4572 sprite definition
COMMENT_LINE $4590 sprite definition
COMMENT_LINE $45A4 sprite definition
COMMENT $45AE speed + direction
COMMENT $45AF graphic definition
COMMENT $45B1 length in SCALE_FACTOR_GAME
COMMENT $45B2 anim delay value
COMMENT $45B3 pointer to next anim object
COMMENT $45B5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45B6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45B7 halfspeed value
COMMENT $45B8 special flag
COMMENT $45B9 alternate object for diving
COMMENT $45BB speed + direction
COMMENT $45BC graphic definition
COMMENT $45BE length in SCALE_FACTOR_GAME
COMMENT $45BF anim delay value
COMMENT $45C0 pointer to next anim object
COMMENT $45C2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45C3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45C4 halfspeed value
COMMENT $45C5 special flag
COMMENT $45C6 alternate object for diving
COMMENT $45C8 speed + direction
COMMENT $45C9 graphic definition
COMMENT $45CB length in SCALE_FACTOR_GAME
COMMENT $45CC anim delay value
COMMENT $45CD pointer to next anim object
COMMENT $45CF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45D0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45D1 halfspeed value
COMMENT $45D2 special flag
COMMENT $45D3 alternate object for diving
COMMENT $45D5 speed + direction
COMMENT $45D6 graphic definition
COMMENT $45D8 length in SCALE_FACTOR_GAME
COMMENT $45D9 anim delay value
COMMENT $45DA pointer to next anim object
COMMENT $45DC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45DD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45DE halfspeed value
COMMENT $45DF special flag
COMMENT $45E0 alternate object for diving
COMMENT $45E2 speed + direction
COMMENT $45E3 graphic definition
COMMENT $45E5 length in SCALE_FACTOR_GAME
COMMENT $45E6 anim delay value
COMMENT $45E7 pointer to next anim object
COMMENT $45E9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45EA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45EB halfspeed value
COMMENT $45EC special flag
COMMENT $45ED alternate object for diving
COMMENT $45EF speed + direction
COMMENT $45F0 graphic definition
COMMENT $45F2 length in SCALE_FACTOR_GAME
COMMENT $45F3 anim delay value
COMMENT $45F4 pointer to next anim object
COMMENT $45F6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $45F7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $45F8 halfspeed value
COMMENT $45F9 special flag
COMMENT $45FA alternate object for diving
COMMENT $45FC speed + direction
COMMENT $45FD graphic definition
COMMENT $45FF length in SCALE_FACTOR_GAME
COMMENT $4600 anim delay value
COMMENT $4601 pointer to next anim object
COMMENT $4603 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4604 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4605 halfspeed value
COMMENT $4606 special flag
COMMENT $4607 alternate object for diving
COMMENT $4609 speed + direction
COMMENT $460A graphic definition
COMMENT $460C length in SCALE_FACTOR_GAME
COMMENT $460D anim delay value
COMMENT $460E pointer to next anim object
COMMENT $4610 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4611 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4612 halfspeed value
COMMENT $4613 special flag
COMMENT $4614 alternate object for diving
COMMENT $4616 speed + direction
COMMENT $4617 graphic definition
COMMENT $4619 length in SCALE_FACTOR_GAME
COMMENT $461A anim delay value
COMMENT $461B pointer to next anim object
COMMENT $461D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $461E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $461F halfspeed value
COMMENT $4620 special flag
COMMENT $4621 alternate object for diving
COMMENT $4623 speed + direction
COMMENT $4624 graphic definition
COMMENT $4626 length in SCALE_FACTOR_GAME
COMMENT $4627 anim delay value
COMMENT $4628 pointer to next anim object
COMMENT $462A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $462B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $462C halfspeed value
COMMENT $462D special flag
COMMENT $462E alternate object for diving
COMMENT $4630 speed + direction
COMMENT $4631 graphic definition
COMMENT $4633 length in SCALE_FACTOR_GAME
COMMENT $4634 anim delay value
COMMENT $4635 pointer to next anim object
COMMENT $4637 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4638 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4639 halfspeed value
COMMENT $463A special flag
COMMENT $463B alternate object for diving
COMMENT $463D speed + direction
COMMENT $463E graphic definition
COMMENT $4640 length in SCALE_FACTOR_GAME
COMMENT $4641 anim delay value
COMMENT $4642 pointer to next anim object
COMMENT $4644 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4645 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4646 halfspeed value
COMMENT $4647 special flag
COMMENT $4648 alternate object for diving
COMMENT $464A speed + direction
COMMENT $464B graphic definition
COMMENT $464D length in SCALE_FACTOR_GAME
COMMENT $464E anim delay value
COMMENT $464F pointer to next anim object
COMMENT $4651 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4652 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4653 halfspeed value
COMMENT $4654 special flag
COMMENT $4655 alternate object for diving
COMMENT $4657 speed + direction
COMMENT $4658 graphic definition
COMMENT $465A length in SCALE_FACTOR_GAME
COMMENT $465B anim delay value
COMMENT $465C pointer to next anim object
COMMENT $465E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $465F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4660 halfspeed value
COMMENT $4661 special flag
COMMENT $4662 alternate object for diving
COMMENT $4664 speed + direction
COMMENT $4665 graphic definition
COMMENT $4667 length in SCALE_FACTOR_GAME
COMMENT $4668 anim delay value
COMMENT $4669 pointer to next anim object
COMMENT $466B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $466C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $466D halfspeed value
COMMENT $466E special flag
COMMENT $466F alternate object for diving
COMMENT $4671 speed + direction
COMMENT $4672 graphic definition
COMMENT $4674 length in SCALE_FACTOR_GAME
COMMENT $4675 anim delay value
COMMENT $4676 pointer to next anim object
COMMENT $4678 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4679 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $467A halfspeed value
COMMENT $467B special flag
COMMENT $467C alternate object for diving
COMMENT $467E speed + direction
COMMENT $467F graphic definition
COMMENT $4681 length in SCALE_FACTOR_GAME
COMMENT $4682 anim delay value
COMMENT $4683 pointer to next anim object
COMMENT $4685 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4686 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4687 halfspeed value
COMMENT $4688 special flag
COMMENT $4689 alternate object for diving
COMMENT $468B speed + direction
COMMENT $468C graphic definition
COMMENT $468E length in SCALE_FACTOR_GAME
COMMENT $468F anim delay value
COMMENT $4690 pointer to next anim object
COMMENT $4692 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4693 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4694 halfspeed value
COMMENT $4695 special flag
COMMENT $4696 alternate object for diving
COMMENT $4698 speed + direction
COMMENT $4699 graphic definition
COMMENT $469B length in SCALE_FACTOR_GAME
COMMENT $469C anim delay value
COMMENT $469D pointer to next anim object
COMMENT $469F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46A0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46A1 halfspeed value
COMMENT $46A2 special flag
COMMENT $46A3 alternate object for diving
COMMENT $46A5 speed + direction
COMMENT $46A6 graphic definition
COMMENT $46A8 length in SCALE_FACTOR_GAME
COMMENT $46A9 anim delay value
COMMENT $46AA pointer to next anim object
COMMENT $46AC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46AD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46AE halfspeed value
COMMENT $46AF special flag
COMMENT $46B0 alternate object for diving
COMMENT_LINE $46B2 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $46B2 in 2016
COMMENT_LINE $46B2 all stuff contained here is public domain
COMMENT_LINE $46B2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $46B2 this file contains 'sprite' definition data for snakes                    ;
COMMENT_LINE $46B2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $46B2 for collision checking: SPRITES MUST HAVE THE LEFTMOST POINT AS STARTVECTOR (*)
COMMENT_LINE $46B2 snake1 is moving to the right with a speed of 1
COMMENT_LINE $46B2 snake2 is moving to the right with a speed of 2
COMMENT_LINE $46B2 snake3 is moving to the left with a speed of -1
COMMENT_LINE $46B2 snake4 is moving to the left with a speed of -2
COMMENT $46B4 draw to y, x
COMMENT $46B6 draw to y, x
COMMENT $46B8 draw to y, x
COMMENT $46BA draw to y, x
COMMENT $46BC draw to y, x
COMMENT $46BE draw to y, x
COMMENT $46C0 draw to y, x
COMMENT $46C2 draw to y, x
COMMENT $46C4 draw to y, x
COMMENT $46C6 draw to y, x
COMMENT $46C8 draw to y, x
COMMENT $46CA speed + direction
COMMENT $46CB graphic definition
COMMENT $46CD length in SCALE_FACTOR_GAME
COMMENT $46CE anim delay value
COMMENT $46CF pointer to next anim object
COMMENT $46D1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46D2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46D3 halfspeed value
COMMENT $46D4 special flag
COMMENT $46D7 draw to y, x
COMMENT $46D9 draw to y, x
COMMENT $46DB draw to y, x
COMMENT $46DD draw to y, x
COMMENT $46DF draw to y, x
COMMENT $46E1 draw to y, x
COMMENT $46E3 draw to y, x
COMMENT $46E5 draw to y, x
COMMENT $46E7 draw to y, x
COMMENT $46E9 draw to y, x
COMMENT $46EB draw to y, x
COMMENT $46ED speed + direction
COMMENT $46EE graphic definition
COMMENT $46F0 length in SCALE_FACTOR_GAME
COMMENT $46F1 anim delay value
COMMENT $46F2 pointer to next anim object
COMMENT $46F4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $46F5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $46F6 halfspeed value
COMMENT $46F7 special flag
COMMENT $46FA draw to y, x
COMMENT $46FC draw to y, x
COMMENT $46FE draw to y, x
COMMENT $4700 draw to y, x
COMMENT $4702 draw to y, x
COMMENT $4704 draw to y, x
COMMENT $4706 draw to y, x
COMMENT $4708 draw to y, x
COMMENT $470A draw to y, x
COMMENT $470C draw to y, x
COMMENT $470E draw to y, x
COMMENT $4710 speed + direction
COMMENT $4711 graphic definition
COMMENT $4713 length in SCALE_FACTOR_GAME
COMMENT $4714 anim delay value
COMMENT $4715 pointer to next anim object
COMMENT $4717 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4718 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4719 halfspeed value
COMMENT $471A special flag
COMMENT $471D draw to y, x
COMMENT $471F draw to y, x
COMMENT $4721 draw to y, x
COMMENT $4723 draw to y, x
COMMENT $4725 draw to y, x
COMMENT $4727 draw to y, x
COMMENT $4729 draw to y, x
COMMENT $472B draw to y, x
COMMENT $472D draw to y, x
COMMENT $472F draw to y, x
COMMENT $4731 draw to y, x
COMMENT $4733 speed + direction
COMMENT $4734 graphic definition
COMMENT $4736 length in SCALE_FACTOR_GAME
COMMENT $4737 anim delay value
COMMENT $4738 pointer to next anim object
COMMENT $473A offsets y in 'SCALE_FACTOR_GAME'
COMMENT $473B offsets x in 'SCALE_FACTOR_GAME'
COMMENT $473C halfspeed value
COMMENT $473D special flag
COMMENT $4740 draw to y, x
COMMENT $4742 draw to y, x
COMMENT $4744 draw to y, x
COMMENT $4746 draw to y, x
COMMENT $4748 draw to y, x
COMMENT $474A draw to y, x
COMMENT $474C draw to y, x
COMMENT $474E draw to y, x
COMMENT $4750 draw to y, x
COMMENT $4752 draw to y, x
COMMENT $4754 draw to y, x
COMMENT $4756 speed + direction
COMMENT $4757 graphic definition
COMMENT $4759 length in SCALE_FACTOR_GAME
COMMENT $475A anim delay value
COMMENT $475B pointer to next anim object
COMMENT $475D offsets y in 'SCALE_FACTOR_GAME'
COMMENT $475E offsets x in 'SCALE_FACTOR_GAME'
COMMENT $475F halfspeed value
COMMENT $4760 special flag
COMMENT $4761 speed + direction
COMMENT $4762 graphic definition
COMMENT $4764 length in SCALE_FACTOR_GAME
COMMENT $4765 anim delay value
COMMENT $4766 pointer to next anim object
COMMENT $4768 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4769 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $476A halfspeed value
COMMENT $476B special flag
COMMENT $476C speed + direction
COMMENT $476D graphic definition
COMMENT $476F length in SCALE_FACTOR_GAME
COMMENT $4770 anim delay value
COMMENT $4771 pointer to next anim object
COMMENT $4773 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4774 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4775 halfspeed value
COMMENT $4776 special flag
COMMENT $4777 speed + direction
COMMENT $4778 graphic definition
COMMENT $477A length in SCALE_FACTOR_GAME
COMMENT $477B anim delay value
COMMENT $477C pointer to next anim object
COMMENT $477E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $477F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4780 halfspeed value
COMMENT $4781 special flag
COMMENT $4782 speed + direction
COMMENT $4783 graphic definition
COMMENT $4785 length in SCALE_FACTOR_GAME
COMMENT $4786 anim delay value
COMMENT $4787 pointer to next anim object
COMMENT $4789 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $478A offsets x in 'SCALE_FACTOR_GAME'
COMMENT $478B halfspeed value
COMMENT $478C special flag
COMMENT $478D speed + direction
COMMENT $478E graphic definition
COMMENT $4790 length in SCALE_FACTOR_GAME
COMMENT $4791 anim delay value
COMMENT $4792 pointer to next anim object
COMMENT $4794 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4795 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4796 halfspeed value
COMMENT $4797 special flag
COMMENT $4798 speed + direction
COMMENT $4799 graphic definition
COMMENT $479B length in SCALE_FACTOR_GAME
COMMENT $479C anim delay value
COMMENT $479D pointer to next anim object
COMMENT $479F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47A0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47A1 halfspeed value
COMMENT $47A2 special flag
COMMENT $47A3 speed + direction
COMMENT $47A4 graphic definition
COMMENT $47A6 length in SCALE_FACTOR_GAME
COMMENT $47A7 anim delay value
COMMENT $47A8 pointer to next anim object
COMMENT $47AA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47AB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47AC halfspeed value
COMMENT $47AD special flag
COMMENT $47AE speed + direction
COMMENT $47AF graphic definition
COMMENT $47B1 length in SCALE_FACTOR_GAME
COMMENT $47B2 anim delay value
COMMENT $47B3 pointer to next anim object
COMMENT $47B5 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47B6 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47B7 halfspeed value
COMMENT $47B8 special flag
COMMENT $47B9 speed + direction
COMMENT $47BA graphic definition
COMMENT $47BC length in SCALE_FACTOR_GAME
COMMENT $47BD anim delay value
COMMENT $47BE pointer to next anim object
COMMENT $47C0 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47C1 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47C2 halfspeed value
COMMENT $47C3 special flag
COMMENT $47C4 speed + direction
COMMENT $47C5 graphic definition
COMMENT $47C7 length in SCALE_FACTOR_GAME
COMMENT $47C8 anim delay value
COMMENT $47C9 pointer to next anim object
COMMENT $47CB offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47CC offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47CD halfspeed value
COMMENT $47CE special flag
COMMENT $47CF speed + direction
COMMENT $47D0 graphic definition
COMMENT $47D2 length in SCALE_FACTOR_GAME
COMMENT $47D3 anim delay value
COMMENT $47D4 pointer to next anim object
COMMENT $47D6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47D7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47D8 halfspeed value
COMMENT $47D9 special flag
COMMENT $47DC draw to y, x
COMMENT $47DE draw to y, x
COMMENT $47E0 draw to y, x
COMMENT $47E2 draw to y, x
COMMENT $47E4 draw to y, x
COMMENT $47E6 draw to y, x
COMMENT $47E8 draw to y, x
COMMENT $47EA draw to y, x
COMMENT $47EC draw to y, x
COMMENT $47EE draw to y, x
COMMENT $47F0 draw to y, x
COMMENT $47F2 speed + direction
COMMENT $47F3 graphic definition
COMMENT $47F5 length in SCALE_FACTOR_GAME
COMMENT $47F6 anim delay value
COMMENT $47F7 pointer to next anim object
COMMENT $47F9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $47FA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $47FB halfspeed value
COMMENT $47FC special flag
COMMENT $47FF draw to y, x
COMMENT $4801 draw to y, x
COMMENT $4803 draw to y, x
COMMENT $4805 draw to y, x
COMMENT $4807 draw to y, x
COMMENT $4809 draw to y, x
COMMENT $480B draw to y, x
COMMENT $480D draw to y, x
COMMENT $480F draw to y, x
COMMENT $4811 draw to y, x
COMMENT $4813 draw to y, x
COMMENT $4815 speed + direction
COMMENT $4816 graphic definition
COMMENT $4818 length in SCALE_FACTOR_GAME
COMMENT $4819 anim delay value
COMMENT $481A pointer to next anim object
COMMENT $481C offsets y in 'SCALE_FACTOR_GAME'
COMMENT $481D offsets x in 'SCALE_FACTOR_GAME'
COMMENT $481E halfspeed value
COMMENT $481F special flag
COMMENT $4822 draw to y, x
COMMENT $4824 draw to y, x
COMMENT $4826 draw to y, x
COMMENT $4828 draw to y, x
COMMENT $482A draw to y, x
COMMENT $482C draw to y, x
COMMENT $482E draw to y, x
COMMENT $4830 draw to y, x
COMMENT $4832 draw to y, x
COMMENT $4834 draw to y, x
COMMENT $4836 draw to y, x
COMMENT $4838 speed + direction
COMMENT $4839 graphic definition
COMMENT $483B length in SCALE_FACTOR_GAME
COMMENT $483C anim delay value
COMMENT $483D pointer to next anim object
COMMENT $483F offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4840 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4841 halfspeed value
COMMENT $4842 special flag
COMMENT $4845 draw to y, x
COMMENT $4847 draw to y, x
COMMENT $4849 draw to y, x
COMMENT $484B draw to y, x
COMMENT $484D draw to y, x
COMMENT $484F draw to y, x
COMMENT $4851 draw to y, x
COMMENT $4853 draw to y, x
COMMENT $4855 draw to y, x
COMMENT $4857 draw to y, x
COMMENT $4859 draw to y, x
COMMENT $485B speed + direction
COMMENT $485C graphic definition
COMMENT $485E length in SCALE_FACTOR_GAME
COMMENT $485F anim delay value
COMMENT $4860 pointer to next anim object
COMMENT $4862 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4863 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4864 halfspeed value
COMMENT $4865 special flag
COMMENT $4868 draw to y, x
COMMENT $486A draw to y, x
COMMENT $486C draw to y, x
COMMENT $486E draw to y, x
COMMENT $4870 draw to y, x
COMMENT $4872 draw to y, x
COMMENT $4874 draw to y, x
COMMENT $4876 draw to y, x
COMMENT $4878 draw to y, x
COMMENT $487A draw to y, x
COMMENT $487C draw to y, x
COMMENT $487E speed + direction
COMMENT $487F graphic definition
COMMENT $4881 length in SCALE_FACTOR_GAME
COMMENT $4882 anim delay value
COMMENT $4883 pointer to next anim object
COMMENT $4885 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4886 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4887 halfspeed value
COMMENT $4888 special flag
COMMENT $4889 speed + direction
COMMENT $488A graphic definition
COMMENT $488C length in SCALE_FACTOR_GAME
COMMENT $488D anim delay value
COMMENT $488E pointer to next anim object
COMMENT $4890 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4891 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4892 halfspeed value
COMMENT $4893 special flag
COMMENT $4894 speed + direction
COMMENT $4895 graphic definition
COMMENT $4897 length in SCALE_FACTOR_GAME
COMMENT $4898 anim delay value
COMMENT $4899 pointer to next anim object
COMMENT $489B offsets y in 'SCALE_FACTOR_GAME'
COMMENT $489C offsets x in 'SCALE_FACTOR_GAME'
COMMENT $489D halfspeed value
COMMENT $489E special flag
COMMENT $489F speed + direction
COMMENT $48A0 graphic definition
COMMENT $48A2 length in SCALE_FACTOR_GAME
COMMENT $48A3 anim delay value
COMMENT $48A4 pointer to next anim object
COMMENT $48A6 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48A7 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48A8 halfspeed value
COMMENT $48A9 special flag
COMMENT $48AA speed + direction
COMMENT $48AB graphic definition
COMMENT $48AD length in SCALE_FACTOR_GAME
COMMENT $48AE anim delay value
COMMENT $48AF pointer to next anim object
COMMENT $48B1 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48B2 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48B3 halfspeed value
COMMENT $48B4 special flag
COMMENT $48B5 speed + direction
COMMENT $48B6 graphic definition
COMMENT $48B8 length in SCALE_FACTOR_GAME
COMMENT $48B9 anim delay value
COMMENT $48BA pointer to next anim object
COMMENT $48BC offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48BD offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48BE halfspeed value
COMMENT $48BF special flag
COMMENT $48C0 speed + direction
COMMENT $48C1 graphic definition
COMMENT $48C3 length in SCALE_FACTOR_GAME
COMMENT $48C4 anim delay value
COMMENT $48C5 pointer to next anim object
COMMENT $48C7 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48C8 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48C9 halfspeed value
COMMENT $48CA special flag
COMMENT $48CB speed + direction
COMMENT $48CC graphic definition
COMMENT $48CE length in SCALE_FACTOR_GAME
COMMENT $48CF anim delay value
COMMENT $48D0 pointer to next anim object
COMMENT $48D2 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48D3 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48D4 halfspeed value
COMMENT $48D5 special flag
COMMENT $48D6 speed + direction
COMMENT $48D7 graphic definition
COMMENT $48D9 length in SCALE_FACTOR_GAME
COMMENT $48DA anim delay value
COMMENT $48DB pointer to next anim object
COMMENT $48DD offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48DE offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48DF halfspeed value
COMMENT $48E0 special flag
COMMENT $48E1 speed + direction
COMMENT $48E2 graphic definition
COMMENT $48E4 length in SCALE_FACTOR_GAME
COMMENT $48E5 anim delay value
COMMENT $48E6 pointer to next anim object
COMMENT $48E8 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48E9 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48EA halfspeed value
COMMENT $48EB special flag
COMMENT $48EC speed + direction
COMMENT $48ED graphic definition
COMMENT $48EF length in SCALE_FACTOR_GAME
COMMENT $48F0 anim delay value
COMMENT $48F1 pointer to next anim object
COMMENT $48F3 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48F4 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $48F5 halfspeed value
COMMENT $48F6 special flag
COMMENT $48F7 speed + direction
COMMENT $48F8 graphic definition
COMMENT $48FA length in SCALE_FACTOR_GAME
COMMENT $48FB anim delay value
COMMENT $48FC pointer to next anim object
COMMENT $48FE offsets y in 'SCALE_FACTOR_GAME'
COMMENT $48FF offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4900 halfspeed value
COMMENT $4901 special flag
COMMENT_LINE $4902 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4902 in 2016
COMMENT_LINE $4902 all stuff contained here is public domain
COMMENT_LINE $4902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4902 this file contains 'sprite' definition data for crocodiles                ;
COMMENT_LINE $4902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $4904 draw to y, x
COMMENT $4906 draw to y, x
COMMENT $4908 draw to y, x
COMMENT $490A draw to y, x
COMMENT $490C draw to y, x
COMMENT $490E draw to y, x
COMMENT $4910 draw to y, x
COMMENT $4912 draw to y, x
COMMENT $4914 draw to y, x
COMMENT $4916 draw to y, x
COMMENT $4918 draw to y, x
COMMENT $491A draw to y, x
COMMENT $491C draw to y, x
COMMENT $491E draw to y, x
COMMENT $4920 speed + direction
COMMENT $4921 graphic definition
COMMENT $4923 length in SCALE_FACTOR_GAME
COMMENT $4924 anim delay value
COMMENT $4925 pointer to next anim object
COMMENT $4927 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4928 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4929 halfspeed value
COMMENT $492A special flag
COMMENT $492D draw to y, x
COMMENT $492F draw to y, x
COMMENT $4931 draw to y, x
COMMENT $4933 draw to y, x
COMMENT $4935 draw to y, x
COMMENT $4937 draw to y, x
COMMENT $4939 draw to y, x
COMMENT $493B draw to y, x
COMMENT $493D draw to y, x
COMMENT $493F draw to y, x
COMMENT $4941 draw to y, x
COMMENT $4943 draw to y, x
COMMENT $4945 draw to y, x
COMMENT $4947 draw to y, x
COMMENT $4949 speed + direction
COMMENT $494A graphic definition
COMMENT $494C length in SCALE_FACTOR_GAME
COMMENT $494D anim delay value
COMMENT $494E pointer to next anim object
COMMENT $4950 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4951 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4952 halfspeed value
COMMENT $4953 special flag
COMMENT $4956 draw to y, x
COMMENT $4958 draw to y, x
COMMENT $495A draw to y, x
COMMENT $495C draw to y, x
COMMENT $495E draw to y, x
COMMENT $4960 draw to y, x
COMMENT $4962 draw to y, x
COMMENT $4964 draw to y, x
COMMENT $4966 draw to y, x
COMMENT $4968 draw to y, x
COMMENT $496A draw to y, x
COMMENT $496C draw to y, x
COMMENT $496E speed + direction
COMMENT $496F graphic definition
COMMENT $4971 length in SCALE_FACTOR_GAME
COMMENT $4972 anim delay value
COMMENT $4973 pointer to next anim object
COMMENT $4975 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $4976 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $4977 halfspeed value
COMMENT $4978 special flag
COMMENT $497B draw to y, x
COMMENT $497D draw to y, x
COMMENT $497F draw to y, x
COMMENT $4981 draw to y, x
COMMENT $4983 draw to y, x
COMMENT $4985 draw to y, x
COMMENT $4987 draw to y, x
COMMENT $4989 draw to y, x
COMMENT $498B draw to y, x
COMMENT $498D draw to y, x
COMMENT $498F draw to y, x
COMMENT $4991 draw to y, x
COMMENT $4993 draw to y, x
COMMENT $4995 draw to y, x
COMMENT $4997 speed + direction
COMMENT $4998 graphic definition
COMMENT $499A length in SCALE_FACTOR_GAME
COMMENT $499B anim delay value
COMMENT $499C pointer to next anim object
COMMENT $499E offsets y in 'SCALE_FACTOR_GAME'
COMMENT $499F offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49A0 halfspeed value
COMMENT $49A1 special flag
COMMENT $49A2 speed + direction
COMMENT $49A3 graphic definition
COMMENT $49A5 length in SCALE_FACTOR_GAME
COMMENT $49A6 anim delay value
COMMENT $49A7 pointer to next anim object
COMMENT $49A9 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49AA offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49AB halfspeed value
COMMENT $49AC special flag
COMMENT $49AD speed + direction
COMMENT $49AE graphic definition
COMMENT $49B0 length in SCALE_FACTOR_GAME
COMMENT $49B1 anim delay value
COMMENT $49B2 pointer to next anim object
COMMENT $49B4 offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49B5 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49B6 halfspeed value
COMMENT $49B7 special flag
COMMENT $49B8 speed + direction
COMMENT $49B9 graphic definition
COMMENT $49BB length in SCALE_FACTOR_GAME
COMMENT $49BC anim delay value
COMMENT $49BD pointer to next anim object
COMMENT $49BF offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49C0 offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49C1 halfspeed value
COMMENT $49C2 special flag
COMMENT $49C3 speed + direction
COMMENT $49C4 graphic definition
COMMENT $49C6 length in SCALE_FACTOR_GAME
COMMENT $49C7 anim delay value
COMMENT $49C8 pointer to next anim object
COMMENT $49CA offsets y in 'SCALE_FACTOR_GAME'
COMMENT $49CB offsets x in 'SCALE_FACTOR_GAME'
COMMENT $49CC halfspeed value
COMMENT $49CD special flag
COMMENT $49EA speed + direction
COMMENT $49EB graphic definition
COMMENT $49ED length in SCALE_FACTOR_GAME
COMMENT $49EE anim delay value
COMMENT $49EF pointer to next anim object
COMMENT $49F1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $49F2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $49F3 halfspeed value
COMMENT $49F4 special flag
COMMENT $4A17 speed + direction
COMMENT $4A18 graphic definition
COMMENT $4A1A length in SCALE_FACTOR_GAME
COMMENT $4A1B anim delay value
COMMENT $4A1C pointer to next anim object
COMMENT $4A1E offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A1F offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A20 halfspeed value
COMMENT $4A21 special flag
COMMENT $4A48 speed + direction
COMMENT $4A49 graphic definition
COMMENT $4A4B length in SCALE_FACTOR_GAME
COMMENT $4A4C anim delay value
COMMENT $4A4D pointer to next anim object
COMMENT $4A4F offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A50 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A51 halfspeed value
COMMENT $4A52 special flag
COMMENT $4A79 speed + direction
COMMENT $4A7A graphic definition
COMMENT $4A7C length in SCALE_FACTOR_GAME
COMMENT $4A7D anim delay value
COMMENT $4A7E pointer to next anim object
COMMENT $4A80 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A81 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4A82 halfspeed value
COMMENT $4A83 special flag
COMMENT $4AAA speed + direction
COMMENT $4AAB graphic definition
COMMENT $4AAD length in SCALE_FACTOR_GAME
COMMENT $4AAE anim delay value
COMMENT $4AAF pointer to next anim object
COMMENT $4AB1 offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AB2 offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AB3 halfspeed value
COMMENT $4AB4 special flag
COMMENT $4AB5 speed + direction
COMMENT $4AB6 graphic definition
COMMENT $4AB8 length in SCALE_FACTOR_GAME
COMMENT $4AB9 anim delay value
COMMENT $4ABA pointer to next anim object
COMMENT $4ABC offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4ABD offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4ABE halfspeed value
COMMENT $4ABF special flag
COMMENT_LINE $4AC0 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4AC0 in 2016
COMMENT_LINE $4AC0 all stuff contained here is public domain
COMMENT_LINE $4AC0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4AC0 this file contains 'sprite' definition data for otter                     ;
COMMENT_LINE $4AC0 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $4AC2 draw to y, x
COMMENT $4AC4 draw to y, x
COMMENT $4AC6 draw to y, x
COMMENT $4AC8 draw to y, x
COMMENT $4ACA draw to y, x
COMMENT $4ACC draw to y, x
COMMENT $4ACE draw to y, x
COMMENT $4AD0 draw to y, x
COMMENT $4AD2 draw to y, x
COMMENT $4AD4 draw to y, x
COMMENT $4AD6 speed + direction
COMMENT $4AD7 graphic definition
COMMENT $4AD9 length in SCALE_FACTOR_GAME
COMMENT $4ADA anim delay value
COMMENT $4ADB pointer to next anim object
COMMENT $4ADD offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4ADE offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4ADF halfspeed value
COMMENT $4AE0 special flag
COMMENT $4AE3 draw to y, x
COMMENT $4AE5 draw to y, x
COMMENT $4AE7 draw to y, x
COMMENT $4AE9 draw to y, x
COMMENT $4AEB draw to y, x
COMMENT $4AED draw to y, x
COMMENT $4AEF draw to y, x
COMMENT $4AF1 draw to y, x
COMMENT $4AF3 draw to y, x
COMMENT $4AF5 draw to y, x
COMMENT $4AF7 speed + direction
COMMENT $4AF8 graphic definition
COMMENT $4AFA length in SCALE_FACTOR_GAME
COMMENT $4AFB anim delay value
COMMENT $4AFC pointer to next anim object
COMMENT $4AFE offsets y in 'SCALE_IN_HOME', since this is a home object
COMMENT $4AFF offsets x in 'SCALE_IN_HOME', since this is a home object
COMMENT $4B00 halfspeed value
COMMENT $4B01 special flag
COMMENT_LINE $4B02 ***************************************************************************
COMMENT_LINE $4B02 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $4B02 in 2016
COMMENT_LINE $4B02 all stuff contained here is public domain
COMMENT_LINE $4B02 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4B02 this file contains all level definitions (16 levels) and the object table ;
COMMENT_LINE $4B02 of sprites which can be used for levels                                   ;
COMMENT_LINE $4B02 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $4B02 Note:
COMMENT_LINE $4B02 The levels are optimized as they are. All levels can even under worst case
COMMENT_LINE $4B02 conditions be played with 50Hz display.
COMMENT_LINE $4B02 They all take less than 30000 cycles to draw.
COMMENT_LINE $4B02 If you make other levels, please be sure that each level takes
COMMENT_LINE $4B02 less than 30000 cycles to be drawn. It's easy to go above, since 30 sprites
COMMENT_LINE $4B02 can be drawn at maximum (not counting otter, log snakes, girls and
COMMENT_LINE $4B02 home sprites). Be carfull, display will 'WOBBLE'!
COMMENT_LINE $4B02 actually these levels could probably be 'packed' than we would probably
COMMENT_LINE $4B02 have space for 30-40-50??? levels...
COMMENT_LINE $4B02 1
COMMENT_LINE $4B02 well, it is not all THAT interesting to make levels...
COMMENT_LINE $4B02 ****************************************************************************
COMMENT_LINE $4B02 some objects are not used...
COMMENT_LINE $4B02 if you make new objects... comment them here...
COMMENT_LINE $4B02 for how to make objects look at any object include file
COMMENT $4B02 moving left -1 '01'
COMMENT $4B04 moving left -1 '02'
COMMENT $4B06 moving right 1 '03'
COMMENT $4B08 moving left -1 '04'
COMMENT $4B0A moving right 1 '05'
COMMENT $4B0C moving left -1 '06'
COMMENT $4B0E moving right 1 '07'
COMMENT $4B10 moving right 1 '08'
COMMENT $4B12 moving right 2 '09'
COMMENT $4B14 moving left -1 '10'
COMMENT $4B16 moving left -2 '11'
COMMENT $4B18 moving left -1 '12'
COMMENT $4B1A moving right 2 '13'
COMMENT $4B1C moving left -2 '14'
COMMENT $4B1E moving left -1 '15' left of big
COMMENT $4B20 moving left -1 '16' right of big
COMMENT $4B22 moving left -1 '17'
COMMENT $4B24 moving left -1 '18'
COMMENT $4B26 moving left -1 '19'
COMMENT $4B28 moving left -1 '20'
COMMENT $4B2A moving left -1 '21'
COMMENT $4B2C moving left -1 '22'
COMMENT $4B2E moving right 1 '23'
COMMENT $4B30 moving left -1 '24'
COMMENT $4B32 moving left -1 '25'
COMMENT $4B34 moving left -2 '26'
COMMENT $4B36 moving right 1 '27'
COMMENT $4B38 moving left -1 '28'
COMMENT $4B3A moving right 2 '29'
COMMENT $4B3C moving left -2 '30'
COMMENT $4B3E moving right 2 '31'
COMMENT $4B40 log6a_object ; moving right 1 '32' right of big
COMMENT $4B42 moving left -1 '33'
COMMENT $4B44 moving right 1 '34'
COMMENT $4B46 moving right 2 '35'
COMMENT $4B48 moving right 2 '36'
COMMENT $4B4A moving left -2 '37'
COMMENT $4B4C moving left -2 '38' left of big
COMMENT $4B4E moving left -2 '39' right of big
COMMENT $4B50 log11a_object ; moving right 2 '40' left of big
COMMENT $4B52 moving right 3 '41' right of big
COMMENT $4B54 moving left -2 '42'
COMMENT $4B56 moving left -3 '43'
COMMENT $4B58 moving right 1 '44'
COMMENT $4B5A moving right 2 '45'
COMMENT $4B5C moving left -1 '46'
COMMENT $4B5E moving left -2 '47'
COMMENT_LINE $4B60 per level 11 bands (5 river + middle band + 5 street)
COMMENT_LINE $4B60 7 objects per band MAX
COMMENT_LINE $4B60 30 objects absolut MAX
COMMENT_LINE $4B60 not more than 6 dive objects (changing after dive timer)
COMMENT_LINE $4B60 objects not in adjacents positions
COMMENT_LINE $4B60 ...........................................................................
COMMENT $4B60 per band 12 pos, river
COMMENT $4B6C per band 12 pos, river
COMMENT $4B78 per band 12 pos, river
COMMENT $4B84 per band 12 pos, river
COMMENT $4B90 per band 12 pos, river
COMMENT $4B9C middle band
COMMENT $4BA8 per band 12 pos, street
COMMENT $4BB4 per band 12 pos, street
COMMENT $4BC0 per band 12 pos, street
COMMENT $4BCC per band 12 pos, street
COMMENT $4BD8 per band 12 pos, street
COMMENT $4BE4 fly timer, after how many ticks
COMMENT $4BE5 crocodile will appear and disappear
COMMENT $4BE6 mole timer $ 10
COMMENT $4BE7 snake on log after what rounds
COMMENT $4BE8 female 1 every round
COMMENT $4BE9 must be dividable by 2, 120 max!
COMMENT $4BEA turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4BEB ...........................................................................
COMMENT $4BEB per band 12 pos, river
COMMENT $4BF7 per band 12 pos, river
COMMENT $4C03 per band 12 pos, river
COMMENT $4C0F per band 12 pos, river
COMMENT $4C1B per band 12 pos, river
COMMENT $4C27 middle band
COMMENT $4C33 per band 12 pos, street
COMMENT $4C3F per band 12 pos, street
COMMENT $4C4B per band 12 pos, street
COMMENT $4C57 per band 12 pos, street
COMMENT $4C63 per band 12 pos, street
COMMENT $4C6F fly timer, after how many ticks
COMMENT $4C70 crocodile will appear and disappear
COMMENT $4C71 mole
COMMENT $4C72 snake on log
COMMENT $4C73 female
COMMENT $4C74 timer muss durch 2 teilbar sein
COMMENT_LINE $4C75 120 max!
COMMENT $4C75 turtle dive timer at least 6 $a is ok!!!
COMMENT_LINE $4C76 ...........................................................................
COMMENT $4C76 per band 12 pos, river
COMMENT $4C82 per band 12 pos, river
COMMENT $4C8E per band 12 pos, river
COMMENT $4C9A per band 12 pos, river
COMMENT $4CA6 per band 12 pos, river
COMMENT $4CB2 middle band
COMMENT $4CBE per band 12 pos, street
COMMENT $4CCA per band 12 pos, street
COMMENT $4CD6 per band 12 pos, street
COMMENT $4CE2 per band 12 pos, street
COMMENT $4CEE per band 12 pos, street
COMMENT $4CFA fly timer, after how many ticks
COMMENT $4CFB crocodile will appear and disappear
COMMENT $4CFC mole
COMMENT $4CFD snake on log
COMMENT $4CFE female
COMMENT $4CFF timer muss durch 2 teilbar sein, 120 max!
COMMENT $4D00 turtle dive timer
COMMENT_LINE $4D01 ...........................................................................
COMMENT $4D01 per band 12 pos, river
COMMENT $4D0D per band 12 pos, river
COMMENT $4D19 per band 12 pos, river
COMMENT $4D25 per band 12 pos, river
COMMENT $4D31 per band 12 pos, river
COMMENT $4D3D middle band
COMMENT $4D49 per band 12 pos, street
COMMENT $4D55 per band 12 pos, street
COMMENT $4D61 per band 12 pos, street
COMMENT $4D6D per band 12 pos, street
COMMENT $4D79 per band 12 pos, street
COMMENT $4D85 fly timer, after how many ticks
COMMENT $4D86 crocodile will appear and disappear
COMMENT $4D87 mole
COMMENT $4D88 snake on log
COMMENT $4D89 female
COMMENT $4D8A timer muss durch 2 teilbar sein, 120 max!
COMMENT $4D8B turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4D8C ...........................................................................
COMMENT $4D8C per band 12 pos, river
COMMENT $4D98 per band 12 pos, river
COMMENT $4DA4 per band 12 pos, river
COMMENT $4DB0 per band 12 pos, river
COMMENT $4DBC per band 12 pos, river
COMMENT $4DC8 middle band
COMMENT $4DD4 per band 12 pos, street
COMMENT $4DE0 per band 12 pos, street
COMMENT $4DEC per band 12 pos, street
COMMENT $4DF8 per band 12 pos, street
COMMENT $4E04 per band 12 pos, street
COMMENT $4E10 fly timer, after how many ticks
COMMENT $4E11 crocodile will appear and disappear
COMMENT $4E12 mole
COMMENT $4E13 snake on log
COMMENT $4E14 female
COMMENT $4E15 timer muss durch 2 teilbar sein, 120 max!
COMMENT $4E16 turtle dive timer
COMMENT_LINE $4E17 ...........................................................................
COMMENT $4E17 per band 12 pos, river
COMMENT $4E23 per band 12 pos, river
COMMENT $4E2F per band 12 pos, river
COMMENT $4E3B per band 12 pos, river
COMMENT $4E47 per band 12 pos, river
COMMENT $4E53 middle band
COMMENT $4E5F per band 12 pos, street
COMMENT $4E6B per band 12 pos, street
COMMENT $4E77 per band 12 pos, street
COMMENT $4E83 per band 12 pos, street
COMMENT $4E8F per band 12 pos, street
COMMENT $4E9B fly timer, after how many ticks
COMMENT $4E9C crocodile will appear and disappear
COMMENT $4E9D mole
COMMENT $4E9E snake on log
COMMENT $4E9F female
COMMENT $4EA0 timer muss durch 2 teilbar sein, 120 max!
COMMENT $4EA1 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4EA2 ...........................................................................
COMMENT $4EA2 per band 12 pos, river
COMMENT $4EAE per band 12 pos, river
COMMENT $4EBA per band 12 pos, river
COMMENT $4EC6 per band 12 pos, river
COMMENT $4ED2 per band 12 pos, river
COMMENT $4EDE middle band
COMMENT $4EEA per band 12 pos, street
COMMENT $4EF6 per band 12 pos, street
COMMENT $4F02 per band 12 pos, street
COMMENT $4F0E per band 12 pos, street
COMMENT $4F1A per band 12 pos, street
COMMENT $4F26 fly timer, after how many ticks
COMMENT $4F27 crocodile will appear and disappear
COMMENT $4F28 mole
COMMENT $4F29 snake on log
COMMENT $4F2A female
COMMENT $4F2B 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $4F2C turtle dive timer, $ff = not diving turtle
COMMENT_LINE $4F2D ...........................................................................
COMMENT $4F2D per band 12 pos, river
COMMENT $4F39 per band 12 pos, river
COMMENT $4F45 per band 12 pos, river
COMMENT $4F51 per band 12 pos, river
COMMENT $4F5D per band 12 pos, river
COMMENT $4F69 middle band
COMMENT $4F75 per band 12 pos, street
COMMENT $4F81 per band 12 pos, street
COMMENT $4F8D per band 12 pos, street
COMMENT $4F99 per band 12 pos, street
COMMENT $4FA5 per band 12 pos, street
COMMENT $4FB1 fly timer, after how many ticks
COMMENT $4FB2 crocodile will appear and disappear
COMMENT $4FB3 mole
COMMENT $4FB4 snake on log
COMMENT $4FB5 female
COMMENT $4FB6 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $4FB7 turtle dive timer
COMMENT_LINE $4FB8 ...........................................................................
COMMENT $4FB8 per band 12 pos, river
COMMENT $4FC4 per band 12 pos, river
COMMENT $4FD0 per band 12 pos, river
COMMENT $4FDC per band 12 pos, river
COMMENT $4FE8 per band 12 pos, river
COMMENT $4FF4 middle band
COMMENT $5000 per band 12 pos, street
COMMENT $500C per band 12 pos, street
COMMENT $5018 per band 12 pos, street
COMMENT $5024 per band 12 pos, street
COMMENT $5030 per band 12 pos, street
COMMENT $503C fly timer, after how many ticks
COMMENT $503D crocodile will appear and disappear
COMMENT $503E mole
COMMENT $503F snake on log
COMMENT $5040 female
COMMENT $5041 timer muss durch 2 teilbar sein, 120 max!
COMMENT $5042 turtle dive timer
COMMENT_LINE $5043 ...........................................................................
COMMENT $5043 per band 12 pos, river
COMMENT $504F per band 12 pos, river
COMMENT $505B per band 12 pos, river
COMMENT $5067 per band 12 pos, river
COMMENT $5073 per band 12 pos, river
COMMENT $507F middle band
COMMENT $508B per band 12 pos, street
COMMENT $5097 per band 12 pos, street
COMMENT $50A3 per band 12 pos, street
COMMENT $50AF per band 12 pos, street
COMMENT $50BB per band 12 pos, street
COMMENT $50C7 fly timer, after how many ticks
COMMENT $50C8 crocodile will appear and disappear
COMMENT $50C9 mole
COMMENT $50CA snake on log
COMMENT $50CB female
COMMENT $50CC 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $50CD turtle dive timer, $ff = not diving turtle
COMMENT_LINE $50CE ...........................................................................
COMMENT $50CE per band 12 pos, river
COMMENT $50DA per band 12 pos, river
COMMENT $50E6 per band 12 pos, river
COMMENT $50F2 per band 12 pos, river
COMMENT $50FE per band 12 pos, river
COMMENT $510A middle band
COMMENT $5116 per band 12 pos, street
COMMENT $5122 per band 12 pos, street
COMMENT $512E per band 12 pos, street
COMMENT $513A per band 12 pos, street
COMMENT $5146 per band 12 pos, street
COMMENT $5152 fly timer, after how many ticks
COMMENT $5153 crocodile will appear and disappear
COMMENT $5154 mole
COMMENT $5155 snake on log
COMMENT $5156 female
COMMENT $5157 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $5158 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $5159 ...........................................................................
COMMENT $5159 per band 12 pos, river
COMMENT $5165 per band 12 pos, river
COMMENT $5171 per band 12 pos, river
COMMENT $517D per band 12 pos, river
COMMENT $5189 per band 12 pos, river
COMMENT $5195 middle band
COMMENT $51A1 per band 12 pos, street
COMMENT $51AD per band 12 pos, street
COMMENT $51B9 per band 12 pos, street
COMMENT $51C5 per band 12 pos, street
COMMENT $51D1 per band 12 pos, street
COMMENT $51DD fly timer, after how many ticks
COMMENT $51DE crocodile will appear and disappear
COMMENT $51DF mole
COMMENT $51E0 snake on log
COMMENT $51E1 female
COMMENT $51E2 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $51E3 turtle dive timer, $ff = not diving turtle
COMMENT_LINE $51E4 ...........................................................................
COMMENT $51E4 per band 12 pos, river
COMMENT $51F0 per band 12 pos, river
COMMENT $51FC per band 12 pos, river
COMMENT $5208 per band 12 pos, river
COMMENT $5214 per band 12 pos, river
COMMENT $5220 middle band
COMMENT $522C per band 12 pos, street
COMMENT $5238 per band 12 pos, street
COMMENT $5244 per band 12 pos, street
COMMENT $5250 per band 12 pos, street
COMMENT $525C per band 12 pos, street
COMMENT $5268 fly timer, after how many ticks
COMMENT $5269 crocodile will appear and disappear
COMMENT $526A mole
COMMENT $526B snake on log
COMMENT $526C female
COMMENT $526D 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $526E turtle dive timer
COMMENT_LINE $526F ...........................................................................
COMMENT $526F per band 12 pos, river
COMMENT $527B per band 12 pos, river
COMMENT $5287 per band 12 pos, river
COMMENT $5293 per band 12 pos, river
COMMENT $529F per band 12 pos, river
COMMENT $52AB middle band
COMMENT $52B7 per band 12 pos, street
COMMENT $52C3 per band 12 pos, street
COMMENT $52CF per band 12 pos, street
COMMENT $52DB per band 12 pos, street
COMMENT $52E7 per band 12 pos, street
COMMENT $52F3 fly timer, after how many ticks
COMMENT $52F4 crocodile will appear and disappear
COMMENT $52F5 mole
COMMENT $52F6 snake on log
COMMENT $52F7 female
COMMENT $52F8 100                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $52F9 turtle dive timer
COMMENT_LINE $52FA ...........................................................................
COMMENT $52FA per band 12 pos, river
COMMENT $5306 per band 12 pos, river
COMMENT $5312 per band 12 pos, river
COMMENT $531E per band 12 pos, river
COMMENT $532A per band 12 pos, river
COMMENT $5336 middle band
COMMENT $5342 per band 12 pos, street
COMMENT $534E per band 12 pos, street
COMMENT $535A per band 12 pos, street
COMMENT $5366 per band 12 pos, street
COMMENT $5372 per band 12 pos, street
COMMENT $537E fly timer, after how many ticks
COMMENT $537F crocodile will appear and disappear
COMMENT $5380 mole
COMMENT $5381 snake on log
COMMENT $5382 female
COMMENT $5383 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $5384 turtle dive timer
COMMENT_LINE $5385 ...........................................................................
COMMENT $5385 per band 12 pos, river
COMMENT $5391 per band 12 pos, river
COMMENT $539D per band 12 pos, river
COMMENT $53A9 per band 12 pos, river
COMMENT $53B5 per band 12 pos, river
COMMENT $53C1 middle band
COMMENT $53CD per band 12 pos, street
COMMENT $53D9 per band 12 pos, street
COMMENT $53E5 per band 12 pos, street
COMMENT $53F1 per band 12 pos, street
COMMENT $53FD per band 12 pos, street
COMMENT $5409 fly timer, after how many ticks
COMMENT $540A crocodile will appear and disappear
COMMENT $540B mole
COMMENT $540C snake on log
COMMENT $540D female
COMMENT $540E 120                          ; timer muss durch 2 teilbar sein, 120 max!
COMMENT $540F turtle dive timer
COMMENT_LINE $5410 ...........................................................................
COMMENT_LINE $5410 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5410 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5410 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT_LINE $5410 DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, river
COMMENT $5410 per band 12 pos, river
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; middle band
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $541C DB       00,00,00,00,00,00,00,00,00,00,00,00 ; per band 12 pos, street
COMMENT_LINE $541C DB       0                            ; fly
COMMENT_LINE $541C DB       0                            ; crocodile
COMMENT_LINE $541C DB       0                            ; mole
COMMENT_LINE $541C DB       0                            ; snake on log
COMMENT_LINE $541C DB       0                            ; female
COMMENT_LINE $541C DB       0                            ; timer
COMMENT_LINE $541C DB       $ff                          ; turtle dive timer
COMMENT_LINE $541C ...........................................................................
COMMENT_LINE $541C ***************************************************************************
COMMENT_LINE $541C this file is part of Karl Quappe, written by Malban
COMMENT_LINE $541C in 2016
COMMENT_LINE $541C all stuff contained here is public domain
COMMENT_LINE $541C 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SPACE M
COMMENT_LINE $547B C !"#$%&´()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_
COMMENT_LINE $566C zero delay is needed for zeroing to work correctly
COMMENT_LINE $566C depends on the distance of the current integrator position to actual zero point
COMMENT_LINE $566C experiment with my vectri:
COMMENT_LINE $566C ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
COMMENT_LINE $566C If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
COMMENT_LINE $566C - scale $ff -> zero 110 cycles
COMMENT_LINE $566C - scale $7f -> zero 75 cycles
COMMENT_LINE $566C - scale $40 -> zero 57 cycles
COMMENT_LINE $566C - scale $20 -> zero 53 cycles
COMMENT_LINE $566C put move position on stack put it so, that we can load "d" directly from stack
COMMENT $566E Save string pointer
FORCE_SYMBOL $566E Vec_Str_Ptr
COMMENT_LINE $5671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $5671 POSITION "EXACT" PATCH assuming x pos is midle alligned,
COMMENT_LINE $5671 if that is a case we can use neg x pos as "opposite" string pos
COMMENT_LINE $5671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $5671 zero the integrators
COMMENT $5674 store zeroing values to cntl
FORCE_SYMBOL $5674 VIA_cntl
COMMENT $5676 and wait for zeroing to be actually done
FORCE_SYMBOL $5676 ZERO_DELAY
COMMENT_LINE $5678 reset integrators
COMMENT $5678 reset integrator offset
FORCE_SYMBOL $5678 VIA_port_a
COMMENT_LINE $567A lda      #%10000010
COMMENT_LINE $567A wait that zeroing surely has the desired effect!
COMMENT $567A while waiting, zero offsets
FORCE_SYMBOL $567A VIA_port_b
FORCE_NO_SYMBOL $567F
FORCE_SYMBOL $5682 my_move_to_d
COMMENT_LINE $5685 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $5685 Point to start of chargen bitmaps
FORCE_SYMBOL $5685 FONT_START_A
COMMENT_LINE $5688 zero
COMMENT $5688 zero the integrators
COMMENT $568B store zeroing values to cntl
FORCE_SYMBOL $568B VIA_cntl
COMMENT $568D and wait for zeroing to be actually done
FORCE_SYMBOL $568D ZERO_DELAY_P
COMMENT_LINE $568F reset integrators
COMMENT $568F reset integrator offset
FORCE_SYMBOL $568F VIA_port_a
COMMENT_LINE $5691 lda      #%10000010
COMMENT_LINE $5691 wait that zeroing surely has the desired effect!
COMMENT $5691 while waiting, zero offsets
FORCE_SYMBOL $5691 VIA_port_b
FORCE_SYMBOL $5696 VIA_port_b
FORCE_NO_SYMBOL $5698
COMMENT_LINE $569A ;;;;;;
COMMENT_LINE $569A optimzed, tweaked not perfect... 'MOVE TO D' makro
COMMENT_LINE $569A NOT DONE:
COMMENT_LINE $569A what should be done:
COMMENT_LINE $569A s = $ff / max(abs(a),abs(b))
COMMENT_LINE $569A a = a * s
COMMENT_LINE $569A b = b * s
COMMENT_LINE $569A scaling = scaling / s
COMMENT_LINE $569A that would give the most efficient positioning
COMMENT_LINE $569A bother it takes more time to calculate the above,
COMMENT_LINE $569A than it saves
COMMENT_LINE $569A with every positioning via this routine now,
COMMENT_LINE $569A it takes SCALE_FACTOR_GAME + const (of another 100+) cycles
COMMENT_LINE $569A to do one simple positioning!!!
COMMENT_LINE $569A that is probably about 300 cycles per positioning
COMMENT_LINE $569A this is done about 30-40 times per round
COMMENT_LINE $569A alone the positioning takes thus about over 10000 cycles
COMMENT_LINE $569A and we haven't drawn a single line yet!!!
COMMENT $569A Store Y in D/A register
FORCE_SYMBOL $569A VIA_port_a
COMMENT $569C Blank low, zero high?
FORCE_NO_SYMBOL $569C
FORCE_SYMBOL $569E VIA_cntl
COMMENT $56A1 Enable mux
FORCE_SYMBOL $56A1 VIA_port_b
COMMENT $56A3 Clear shift regigster
FORCE_SYMBOL $56A3 VIA_shift_reg
COMMENT $56A5 Disable mux
FORCE_SYMBOL $56A5 VIA_port_b
COMMENT $56A7 Store X in D/A register
FORCE_SYMBOL $56A7 VIA_port_a
COMMENT $56A9 enable timer
FORCE_SYMBOL $56A9 VIA_t1_cnt_hi
FORCE_NO_SYMBOL $56AB
FORCE_SYMBOL $56AD VIA_int_flags
COMMENT_LINE $56B1 ;;;;;;
COMMENT $56B1 a→AUX: b→ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets)
FORCE_NO_SYMBOL $56B1
COMMENT $56B4 Clear D/A output
FORCE_SYMBOL $56B4 VIA_port_a
COMMENT $56B6 Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode
FORCE_SYMBOL $56B6 VIA_aux_cntl
COMMENT_LINE $56B8 first entry here, ramp is disabled
COMMENT_LINE $56B8 if there was a jump from below
COMMENT_LINE $56B8 ramp will be enabled by next line
COMMENT $56B8 ramp off/on set mux to channel 1
FORCE_SYMBOL $56B8 VIA_port_b
COMMENT $56BA Enable mux
FORCE_SYMBOL $56BA VIA_port_b
COMMENT $56BC both to ORB, both disable ram, mux sel = 0 (y int), a:→enable mux: b:→disable mux
FORCE_NO_SYMBOL $56BC
COMMENT_LINE $56BF NOP                                   ;Wait a moment
COMMENT $56BF Disable mux
FORCE_SYMBOL $56BF VIA_port_b
COMMENT $56C1 Disable RAMP, set mux to channel 0, disable mux
FORCE_SYMBOL $56C1 VIA_port_b
COMMENT $56C3 Enable mux
FORCE_SYMBOL $56C3 VIA_port_b
COMMENT_LINE $56C5 TST      $C800                        ;I think this is a delay only
COMMENT $56C5 disable mux
FORCE_SYMBOL $56C5 VIA_port_b
COMMENT $56C7 Get text width
FORCE_SYMBOL $56C7 Vec_Text_Width
COMMENT $56CA Send it to the D/A
FORCE_SYMBOL $56CA VIA_port_a
COMMENT $56CC both to ORB, both ENABLE RAMP, a:→ disable mux, b:→ enable mux
FORCE_NO_SYMBOL $56CC
COMMENT $56CF Point to start of text string
FORCE_SYMBOL $56CF Vec_Str_Ptr
COMMENT $56D2 [4]enable RAMP, disable mux
FORCE_SYMBOL $56D2 VIA_port_b
COMMENT $56D4 [3]
COMMENT_LINE $56D6 one letter is drawn (one row that is) in 18 cycles
COMMENT_LINE $56D6 13 cycles overhead
COMMENT_LINE $56D6 ramp is thus active for #ofLetters*18 + 13 cycles
COMMENT $56D6 [+5]Get bitmap from chargen table
COMMENT $56D8 [+4]rasterout of char bitmap "row" thru shift out in shift register
FORCE_SYMBOL $56D8 VIA_shift_reg
COMMENT $56DA [+6]Get next character
COMMENT $56DC [+3]Go back if not terminator
COMMENT $56DE [2]disable mux, disable ramp
FORCE_NO_SYMBOL $56DE
COMMENT $56E0 [4]disable RAMP, disable mux
FORCE_SYMBOL $56E0 VIA_port_b
COMMENT $56E2 [4]Check for last row
FORCE_SYMBOL $56E2 FONT_END
COMMENT $56E5 [3]Branch if last row
COMMENT $56E7 [3]Point to next chargen row
FORCE_SYMBOL $56E7 FONT_LENGTH
FORCE_NO_SYMBOL $56EA
COMMENT $56EC T1→PB7 enabled
FORCE_SYMBOL $56EC VIA_aux_cntl
FORCE_SYMBOL $56EE Vec_Text_Height
FORCE_NO_SYMBOL $56F1
FORCE_NO_SYMBOL $56F3
COMMENT_LINE $56F5 dec      0,s
COMMENT $56F5 Go back for next scan line
FORCE_NO_SYMBOL $56F7
COMMENT_LINE $56FA clra
FORCE_SYMBOL $56FA VIA_shift_reg
COMMENT_LINE $56FC LDA      #$98
COMMENT $56FC T1→PB7 enabled
FORCE_SYMBOL $56FC VIA_aux_cntl
COMMENT $56FE all done, correct stack
COMMENT_LINE $5700 rts
COMMENT_LINE $5700 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $5700 in 2016
COMMENT_LINE $5700 all stuff contained here is public domain
COMMENT_LINE $5700 ;***************************************************************************
COMMENT_LINE $5700 this routine draws the initial screen
COMMENT_LINE $5700 with information about the game
COMMENT_LINE $5700 nothing is expected and nothing is returned
COMMENT_LINE $5700 leaves dp pointing d0 expected
COMMENT_LINE $5769 first x $80 terminated string
COMMENT_LINE $5769 second u $80 terminated string
COMMENT_LINE $5769 result in stringBufferTemp
COMMENT_LINE $5769 leaves with u = #stringBufferTemp
FORCE_SYMBOL $5769 stringBufferTemp
FORCE_SYMBOL $577B stringBufferTemp
FORCE_SYMBOL $577F hs_reset_tmp
FORCE_SYMBOL $5782 isAttractMode
FORCE_SYMBOL $5785 shutup
COMMENT_LINE $5788 MY_QUIT
COMMENT_LINE $5788 DO_MY_SOUND
COMMENT_LINE $5788 JSR      DP_to_D0
COMMENT_LINE $5788 JSR      Do_Sound                     ; ROM function that does the sound playing
COMMENT_LINE $5788 direct   $D0
FORCE_SYMBOL $5788 BACK_OPTION
FORCE_SYMBOL $578A currentSelectedOption
COMMENT $578D get button status once, since only
FORCE_SYMBOL $578D Read_Btns
COMMENT_LINE $5790 differences are noticed
FORCE_SYMBOL $5790 do_csa_startup
COMMENT $5793 just for assembler optimization...
FORCE_SYMBOL $5793 query_joystick
COMMENT $5796 load joystick 1 position X to A
FORCE_SYMBOL $5796 Vec_Joy_1_X
COMMENT $5799 only jump if last joy pos was zero
FORCE_SYMBOL $5799 last_joy_x
COMMENT $579C store this joystick position
FORCE_SYMBOL $579C last_joy_x
COMMENT $57A1 test the old joystick position
COMMENT $57A2 was center
FORCE_SYMBOL $57A6 currentSelectedOption
FORCE_SYMBOL $57A9 LEVEL_OPTION
FORCE_SYMBOL $57AF RESET_OPTION
COMMENT $57B5 load joystick 1 position X to A
FORCE_SYMBOL $57B5 Vec_Joy_1_Y
COMMENT $57B8 only jump if last joy pos was zero
FORCE_SYMBOL $57B8 last_joy_y
COMMENT $57BB store this joystick position
FORCE_SYMBOL $57BB last_joy_y
COMMENT $57BE no joystick input available
COMMENT $57C0 joystick moved to down
COMMENT $57C2 test the old joystick position
COMMENT $57C3 was center
FORCE_SYMBOL $57C5 currentSelectedOption
COMMENT $57C8 following code only allows selection of level, when prerequisits are right
FORCE_SYMBOL $57C8 PLAYER_OPTION
FORCE_SYMBOL $57CC currentSelectedOption
FORCE_SYMBOL $57CF RESET_OPTION
FORCE_SYMBOL $57D3 levelEditAllowed
FORCE_SYMBOL $57D8 gameModeOption
FORCE_NO_SYMBOL $57DB
FORCE_SYMBOL $57E1 currentSelectedOption
COMMENT $57E4 can't select training in 2 player
FORCE_SYMBOL $57E4 playerCountOption
FORCE_SYMBOL $57E9 currentSelectedOption
FORCE_SYMBOL $57EC MODE_OPTION
FORCE_SYMBOL $57F0 currentSelectedOption
COMMENT $57F5 test the old joystick position
COMMENT $57F6 was center
COMMENT $57F8 following code only allows selection of level, when prerequisits are right
FORCE_SYMBOL $57F8 currentSelectedOption
FORCE_SYMBOL $57FB BACK_OPTION
FORCE_SYMBOL $57FF currentSelectedOption
FORCE_SYMBOL $5802 MUSIC_OPTION
FORCE_SYMBOL $5806 levelEditAllowed
FORCE_SYMBOL $580B gameModeOption
FORCE_NO_SYMBOL $580E
FORCE_SYMBOL $5814 currentSelectedOption
FORCE_SYMBOL $5817 playerCountOption
FORCE_SYMBOL $581C currentSelectedOption
FORCE_SYMBOL $581F MODE_OPTION
FORCE_SYMBOL $5823 currentSelectedOption
FORCE_NO_SYMBOL $5826
COMMENT $5828 move to time 1 lo, this means scaling
FORCE_SYMBOL $5828 VIA_t1_cnt_lo
COMMENT $582A set it
FORCE_SYMBOL $582A Intensity_a
FORCE_NO_SYMBOL $582D
FORCE_SYMBOL $5830 Vec_Text_Height
FORCE_NO_SYMBOL $5833
FORCE_SYMBOL $5836 options_string
FORCE_SYMBOL $5839 sync_Print_Str_d_fixed
FORCE_NO_SYMBOL $583C
COMMENT $583E move to time 1 lo, this means scaling
FORCE_SYMBOL $583E VIA_t1_cnt_lo
FORCE_SYMBOL $5840 currentSelectedOption
FORCE_SYMBOL $5843 PLAYER_OPTION
FORCE_SYMBOL $5845 checkIntensity
FORCE_SYMBOL $5848 no_players_string_0
FORCE_SYMBOL $584B playerCountOption
FORCE_SYMBOL $5850 no_players_string_1
FORCE_SYMBOL $5855 no_players_string_2
FORCE_SYMBOL $5858 concatStrings
FORCE_NO_SYMBOL $585B
FORCE_SYMBOL $585E sync_Print_Str_d_fixed
COMMENT_LINE $5861 ;;;;;;;
FORCE_SYMBOL $5861 playerCountOption
FORCE_NO_SYMBOL $5866
FORCE_SYMBOL $5868 Intensity_a
FORCE_SYMBOL $586D currentSelectedOption
FORCE_SYMBOL $5870 MODE_OPTION
FORCE_SYMBOL $5872 checkIntensity
FORCE_SYMBOL $5875 mode_string_0
FORCE_SYMBOL $5878 gameModeOption
FORCE_SYMBOL $587D mode_string_1
FORCE_NO_SYMBOL $5882
FORCE_SYMBOL $5886 mode_string_2
FORCE_SYMBOL $588B mode_string_3
FORCE_SYMBOL $588E concatStrings
FORCE_NO_SYMBOL $5891
FORCE_SYMBOL $5894 sync_Print_Str_d_fixed
COMMENT_LINE $5897 ;;;;;;;
FORCE_SYMBOL $5897 currentSelectedOption
FORCE_SYMBOL $589A MUSIC_OPTION
FORCE_SYMBOL $589C checkIntensity
FORCE_SYMBOL $589F music_string_0
FORCE_SYMBOL $58A2 musicOption
FORCE_SYMBOL $58A7 music_string_1
FORCE_SYMBOL $58AC music_string_2
FORCE_SYMBOL $58AF concatStrings
FORCE_NO_SYMBOL $58B2
FORCE_SYMBOL $58B5 sync_Print_Str_d_fixed
COMMENT_LINE $58B8 ;;;;;;;
FORCE_SYMBOL $58B8 levelEditAllowed
FORCE_SYMBOL $58BD gameModeOption
FORCE_NO_SYMBOL $58C0
FORCE_NO_SYMBOL $58C4
FORCE_SYMBOL $58C6 Intensity_a
FORCE_SYMBOL $58CB currentSelectedOption
FORCE_SYMBOL $58CE LEVEL_OPTION
FORCE_SYMBOL $58D0 checkIntensity
FORCE_NO_SYMBOL $58D3
FORCE_SYMBOL $58D6 levelString
FORCE_SYMBOL $58D9 sync_Print_Str_d_fixed
COMMENT_LINE $58DC ;;;;;;;
FORCE_SYMBOL $58DC currentSelectedOption
FORCE_SYMBOL $58DF RESET_OPTION
FORCE_SYMBOL $58E1 checkIntensity
FORCE_SYMBOL $58E4 resetHS_0
FORCE_SYMBOL $58E7 hs_reset_tmp
FORCE_SYMBOL $58EC resetHS_1
FORCE_SYMBOL $58F1 resetHS_2
FORCE_SYMBOL $58F4 concatStrings
FORCE_NO_SYMBOL $58F7
FORCE_SYMBOL $58FA sync_Print_Str_d_fixed
COMMENT_LINE $58FD ;;;;;;;
FORCE_SYMBOL $58FD currentSelectedOption
FORCE_SYMBOL $5900 BACK_OPTION
FORCE_SYMBOL $5902 checkIntensity
FORCE_NO_SYMBOL $5905
FORCE_SYMBOL $5908 backMainMenu
FORCE_SYMBOL $590B sync_Print_Str_d_fixed
FORCE_SYMBOL $590F VIA_shift_reg
COMMENT $5911 get button status
FORCE_SYMBOL $5911 Read_Btns
COMMENT $5914 is a button pressed?
FORCE_NO_SYMBOL $5914
COMMENT $5916 no, than stay in init_screen_loop
FORCE_SYMBOL $591A currentSelectedOption
FORCE_SYMBOL $591D BACK_OPTION
FORCE_SYMBOL $5921 PLAYER_OPTION
FORCE_SYMBOL $5925 playerCountOption
FORCE_NO_SYMBOL $5929
FORCE_SYMBOL $592B playerCountOption
COMMENT $5930 training only in 1 player mode
FORCE_SYMBOL $5930 gameModeOption
FORCE_SYMBOL $5933 joystickHandleDone
FORCE_SYMBOL $5936 MODE_OPTION
FORCE_SYMBOL $593A gameModeOption
FORCE_NO_SYMBOL $593E
FORCE_SYMBOL $5943 gameModeOption
FORCE_SYMBOL $5946 joystickHandleDone
FORCE_SYMBOL $5949 MUSIC_OPTION
FORCE_SYMBOL $594D musicOption
FORCE_NO_SYMBOL $5951
FORCE_SYMBOL $5953 musicOption
FORCE_SYMBOL $5956 joystickHandleDone
FORCE_SYMBOL $5959 RESET_OPTION
FORCE_SYMBOL $595D hs_reset_tmp
FORCE_SYMBOL $5960 resetEprom
FORCE_SYMBOL $5969 joystickHandleDone
COMMENT $596C check if there is any v4e at all?
FORCE_SYMBOL $596C v4ecartflags
COMMENT $596F if not (positive) jump
FORCE_NO_SYMBOL $5971
FORCE_NO_SYMBOL $597A
FORCE_NO_SYMBOL $5981
COMMENT $5989 one based
FORCE_SYMBOL $5989 levelFromOptions
FORCE_SYMBOL $598F current_eprom_blocksize
FORCE_SYMBOL $5992 optionsBlock
FORCE_SYMBOL $5995 eeprom_save_options
FORCE_SYMBOL $5998 isAttractMode
COMMENT_LINE $599C ;***************************************************************************
FORCE_SYMBOL $599E DEFAULT_INTENSITY
FORCE_SYMBOL $59A0 Intensity_a
COMMENT_LINE $59A3 _INTENSITY_A
COMMENT_LINE $59A3 rts
COMMENT_LINE $59A3 according to button
COMMENT_LINE $59A3 level string one up/ down
COMMENT $59A3 " 1"
FORCE_SYMBOL $59A6 last_joy_x
COMMENT_LINE $59AB increaseLevel
COMMENT $59AF cant increase
FORCE_SYMBOL $59C0 joystickHandleDone
COMMENT $59C7 cant decrease
FORCE_NO_SYMBOL $59DC
FORCE_SYMBOL $59DE intensityValues
COMMENT_LINE $59E5 ;***************************************************************************
COMMENT_LINE $59F5 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $59F5 in 2016
COMMENT_LINE $59F5 all stuff contained here is public domain
COMMENT_LINE $59F5 ***************************************************************************
COMMENT_LINE $59F5 this routine calculates the new positions
COMMENT_LINE $59F5 nothing is returned
COMMENT_LINE $59F5 leaves with dp pointing to c8
FORCE_NO_SYMBOL $59F5
COMMENT $59F9 is an "old" jump still ongoing?
FORCE_SYMBOL $59F9 froggerInJump
FORCE_SYMBOL $59FE froggerInJump
FORCE_SYMBOL $5A01 current_frog_heading
COMMENT $5A03 than the last left?
FORCE_SYMBOL $5A03 HEADING_LEFT
COMMENT $5A09 than the last right
FORCE_SYMBOL $5A09 HEADING_RIGHT
COMMENT $5A0D than the last up
FORCE_SYMBOL $5A0D HEADING_UP
COMMENT $5A13 than the last down?
FORCE_SYMBOL $5A13 HEADING_DOWN
COMMENT_LINE $5A19 if we come here some error occured, ignoring it and querying new move...
COMMENT $5A19 only jump if last joy pos was zero (needed for testing later)
FORCE_SYMBOL $5A19 last_joy_x
COMMENT $5A1B load joystick 1 position X to A
FORCE_SYMBOL $5A1B Vec_Joy_1_X
COMMENT $5A1D store this joystick position
FORCE_SYMBOL $5A1D last_joy_x
COMMENT $5A1F no x joystick input available
COMMENT $5A23 joystick moved to left
COMMENT $5A25 test the old joystick position
COMMENT $5A26 was center
COMMENT_LINE $5A2A he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , X= $Vec_Joy_1_X"
COMMENT $5A2A load old pos to B
FORCE_SYMBOL $5A2A frog_x_band
COMMENT $5A2C is it at maximum right position?
FORCE_NO_SYMBOL $5A2C
COMMENT $5A2E if so, do nothing
FORCE_SYMBOL $5A32 Karl_Jump_Sound
FORCE_SYMBOL $5A35 play_sfx_x
COMMENT_LINE $5A38 PLAY_SFX Karl_Live_Got_Sound
COMMENT $5A38 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5A38
COMMENT $5A3A befor another move can be made
FORCE_SYMBOL $5A3A froggerInJump
COMMENT_LINE $5A3D do from here
COMMENT_LINE $5A3D remember x offset in frog.i
COMMENT_LINE $5A3D must also work for girl
COMMENT $5A3D for internal checking
FORCE_SYMBOL $5A3D frog_x_band
FORCE_SYMBOL $5A3F HEADING_RIGHT
COMMENT $5A41 new heading == old heading?
FORCE_SYMBOL $5A41 current_frog_heading
COMMENT $5A43 if yes -> we are done
COMMENT $5A45 store it
FORCE_SYMBOL $5A45 current_frog_heading
FORCE_SYMBOL $5A47 frog_pos
COMMENT $5A49 korrekt the old offset y
FORCE_SYMBOL $5A49 current_frog_offset
COMMENT $5A4B korrekt the old offset x
COMMENT $5A4D korrekt the new offset y
FORCE_SYMBOL $5A4D frogger_right_offset
COMMENT $5A50 korrekt the new offset x
COMMENT $5A53 store it back
FORCE_SYMBOL $5A53 frog_pos
COMMENT $5A55 load the current offset
FORCE_SYMBOL $5A55 frogger_right_offset
COMMENT $5A58 and remember it
FORCE_SYMBOL $5A58 current_frog_offset
COMMENT $5A5A use the vector list for
FORCE_SYMBOL $5A5A froggerRightAnim
FORCE_SYMBOL $5A5D froggerAnimPointer
FORCE_SYMBOL $5A60 froggerInJump
COMMENT $5A66 right pointing frog
FORCE_SYMBOL $5A66 frog_pic
COMMENT $5A68 load old pos to B
FORCE_SYMBOL $5A68 frog_x
COMMENT $5A6A decrease position with speed faktor
COMMENT $5A6C and store new position
FORCE_SYMBOL $5A6C frog_x
FORCE_SYMBOL $5A6E positioning_done
COMMENT $5A71 test the old joystick position
COMMENT $5A72 was center
COMMENT_LINE $5A76 he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , X= $Vec_Joy_1_X"
COMMENT $5A76 load old pos to B
FORCE_SYMBOL $5A76 frog_x_band
COMMENT $5A78 if so, do nothing
FORCE_SYMBOL $5A7C Karl_Jump_Sound
FORCE_SYMBOL $5A7F play_sfx_x
COMMENT_LINE $5A82 init new jump anim sequence
COMMENT $5A82 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5A82
COMMENT $5A84 befor another move can be made
FORCE_SYMBOL $5A84 froggerInJump
COMMENT $5A87 for internal checking
FORCE_SYMBOL $5A87 frog_x_band
COMMENT $5A89 than the last?
FORCE_SYMBOL $5A89 HEADING_LEFT
FORCE_SYMBOL $5A8B current_frog_heading
COMMENT $5A8D if yes -> we are done
COMMENT $5A8F and store it
FORCE_SYMBOL $5A8F current_frog_heading
FORCE_SYMBOL $5A91 frog_pos
COMMENT $5A93 korrekt the old offset y
FORCE_SYMBOL $5A93 current_frog_offset
COMMENT $5A95 korrekt the old offset x
COMMENT $5A97 korrekt the new offset y
FORCE_SYMBOL $5A97 frogger_left_offset
COMMENT $5A9A korrekt the new offset x
COMMENT $5A9D store it back
FORCE_SYMBOL $5A9D frog_pos
COMMENT $5A9F load the current offset
FORCE_SYMBOL $5A9F frogger_left_offset
COMMENT $5AA2 and store it
FORCE_SYMBOL $5AA2 current_frog_offset
COMMENT $5AA4 use the vector list for
FORCE_SYMBOL $5AA4 froggerLeftAnim
FORCE_SYMBOL $5AA7 froggerInJump
FORCE_SYMBOL $5AAB froggerAnimPointer
COMMENT $5AB0 left pointing frog
FORCE_SYMBOL $5AB0 frog_pic
COMMENT $5AB2 load old pos to B
FORCE_SYMBOL $5AB2 frog_x
COMMENT $5AB4 decrease position with speed faktor
COMMENT $5AB6 and store new position
FORCE_SYMBOL $5AB6 frog_x
COMMENT $5AB8 if so, do nothing
FORCE_SYMBOL $5AB8 positioning_done
COMMENT_LINE $5ABB than checking for changed y pos
COMMENT $5ABB load joystick 1 position X to A
FORCE_SYMBOL $5ABB Vec_Joy_1_Y
COMMENT $5ABD only jump if last joy pos was zero
FORCE_SYMBOL $5ABD last_joy_y
COMMENT $5ABF store this joystick position
FORCE_SYMBOL $5ABF last_joy_y
COMMENT $5AC1 no joystick input available
COMMENT $5AC5 joystick moved to down
COMMENT $5AC7 test the old joystick position
COMMENT $5AC8 was center
COMMENT_LINE $5ACC he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , Y= $Vec_Joy_1_Y"
COMMENT $5ACC load old pos to B
FORCE_SYMBOL $5ACC frog_y_band
COMMENT $5ACE if so, do nothing
FORCE_SYMBOL $5AD2 Karl_Jump_Sound
FORCE_SYMBOL $5AD5 play_sfx_x
COMMENT $5AD8 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5AD8
COMMENT $5ADA befor another move can be made
FORCE_SYMBOL $5ADA froggerInJump
COMMENT_LINE $5ADD INC level_score
FORCE_SYMBOL $5AE0 score_digit_2
FORCE_SYMBOL $5AE3 score_digit_2
FORCE_SYMBOL $5AE8 score_digit_2
FORCE_SYMBOL $5AEB score_digit_3
FORCE_SYMBOL $5AEE score_digit_3
FORCE_SYMBOL $5AF3 score_digit_3
FORCE_SYMBOL $5AF6 score_digit_4
FORCE_SYMBOL $5AF9 score_digit_4
FORCE_SYMBOL $5AFE score_digit_4
FORCE_SYMBOL $5B01 score_digit_5
COMMENT $5B04 for internal checking
FORCE_SYMBOL $5B04 frog_y_band
COMMENT $5B06 than the last?
FORCE_SYMBOL $5B06 HEADING_UP
COMMENT $5B08 is the heading now the same
FORCE_SYMBOL $5B08 current_frog_heading
COMMENT $5B0A if yes -> we are done
COMMENT $5B0C store new heading
FORCE_SYMBOL $5B0C current_frog_heading
FORCE_SYMBOL $5B0E frog_pos
COMMENT $5B10 korrekt the old offset y
FORCE_SYMBOL $5B10 current_frog_offset
COMMENT $5B12 korrekt the old offset x
COMMENT $5B14 korrekt the new offset y
FORCE_SYMBOL $5B14 frogger_up_offset
COMMENT $5B17 korrekt the new offset x
COMMENT $5B1A store it back
FORCE_SYMBOL $5B1A frog_pos
COMMENT $5B1C remember the current offset
FORCE_SYMBOL $5B1C frogger_up_offset
FORCE_SYMBOL $5B1F current_frog_offset
COMMENT $5B21 use the vector list for
FORCE_SYMBOL $5B21 froggerUpAnim
FORCE_SYMBOL $5B24 froggerInJump
FORCE_SYMBOL $5B28 froggerAnimPointer
COMMENT $5B2D left pointing frog
FORCE_SYMBOL $5B2D frog_pic
COMMENT $5B2F load old pos to B
FORCE_SYMBOL $5B2F frog_y
COMMENT $5B31 decrease position with speed faktor
COMMENT $5B33 and store new position
FORCE_SYMBOL $5B33 frog_y
COMMENT $5B35 and exit joystick position routine
COMMENT $5B37 test the old joystick position
COMMENT $5B38 was center
COMMENT_LINE $5B3A he y dissi "print JOYSTICK_READ timeHi= $RecalCounterHi timeLow= $RecalCounterLow , Y= $Vec_Joy_1_Y"
COMMENT $5B3A load old pos to B
FORCE_SYMBOL $5B3A frog_y_band
COMMENT $5B3C is it at maximum down position?
FORCE_NO_SYMBOL $5B3C
COMMENT $5B3E if so, do nothing
FORCE_SYMBOL $5B40 Karl_Jump_Sound
FORCE_SYMBOL $5B43 play_sfx_x
COMMENT $5B46 animation counter of one jump, so many jump steps are taken, befor
FORCE_NO_SYMBOL $5B46
COMMENT $5B48 befor another move can be made
FORCE_SYMBOL $5B48 froggerInJump
FORCE_SYMBOL $5B4E score_digit_2
FORCE_SYMBOL $5B51 score_digit_2
FORCE_SYMBOL $5B56 score_digit_2
FORCE_SYMBOL $5B59 score_digit_3
FORCE_SYMBOL $5B5C score_digit_3
FORCE_SYMBOL $5B61 score_digit_3
FORCE_SYMBOL $5B64 score_digit_4
FORCE_SYMBOL $5B67 score_digit_4
FORCE_SYMBOL $5B6C score_digit_4
FORCE_SYMBOL $5B6F score_digit_5
FORCE_SYMBOL $5B72 score_digit_5
FORCE_SYMBOL $5B77 score_digit_5
COMMENT_LINE $5B7A DEC level_score
COMMENT $5B7A for internal checking
FORCE_SYMBOL $5B7A frog_y_band
COMMENT $5B7C than the last?
FORCE_SYMBOL $5B7C HEADING_DOWN
COMMENT $5B7E is the heading now the same
FORCE_SYMBOL $5B7E current_frog_heading
COMMENT $5B80 if yes -> we are done
COMMENT $5B82 store new heading
FORCE_SYMBOL $5B82 current_frog_heading
FORCE_SYMBOL $5B84 frog_pos
COMMENT $5B86 korrekt the old offset y
FORCE_SYMBOL $5B86 current_frog_offset
COMMENT $5B88 korrekt the old offset x
COMMENT $5B8A korrekt the new offset y
FORCE_SYMBOL $5B8A frogger_down_offset
COMMENT $5B8D korrekt the new offset x
COMMENT $5B90 store it back
FORCE_SYMBOL $5B90 frog_pos
COMMENT $5B92 remember the current offset
FORCE_SYMBOL $5B92 frogger_down_offset
FORCE_SYMBOL $5B95 current_frog_offset
COMMENT $5B97 use the vector list for
FORCE_SYMBOL $5B97 froggerDownAnim
FORCE_SYMBOL $5B9A froggerInJump
FORCE_SYMBOL $5B9E froggerAnimPointer
COMMENT $5BA3 left pointing frog
FORCE_SYMBOL $5BA3 frog_pic
COMMENT $5BA5 load old pos to B
FORCE_SYMBOL $5BA5 frog_y
COMMENT $5BA7 decrease position with speed faktor
COMMENT $5BA9 and store new position
FORCE_SYMBOL $5BA9 frog_y
COMMENT $5BAB load band information
FORCE_SYMBOL $5BAB frog_y_band
COMMENT $5BAD a short jump saves a few cycles
COMMENT_LINE $5BB0 ******************************************************************
COMMENT_LINE $5BB0 here check for homereach must be put and new frog started
COMMENT $5BB0 default death for this
FORCE_SYMBOL $5BB0 DIE_WALL_JUMP
COMMENT $5BB3 band is DIE_WALL_JUMP
FORCE_SYMBOL $5BB3 kind_of_death
COMMENT $5BB5 load frog position
FORCE_SYMBOL $5BB5 frog_x
COMMENT $5BB7 are we left of home
FORCE_SYMBOL $5BB7 HOME1_POS_LEFT
COMMENT $5BB9 yep, than die DIE_WALL_JUMP
COMMENT $5BBD or are we right, than
FORCE_SYMBOL $5BBD HOME1_POS_RIGHT
COMMENT $5BBF goto next test
COMMENT $5BC1 load home address to X
FORCE_SYMBOL $5BC1 home_entry_1
COMMENT $5BC4 load home object to U
FORCE_SYMBOL $5BC4 home_entry_1
COMMENT $5BC7 if none, than OK
COMMENT $5BC9 if there is something,... further checking
COMMENT $5BCB are we left of home
FORCE_SYMBOL $5BCB HOME2_POS_LEFT
COMMENT $5BCD yep, than die DIE_WALL_JUMP
COMMENT $5BD1 or are we right, than
FORCE_SYMBOL $5BD1 HOME2_POS_RIGHT
COMMENT $5BD3 goto next test
COMMENT $5BD5 load home address to X
FORCE_SYMBOL $5BD5 home_entry_2
COMMENT $5BD8 load home object to U
FORCE_SYMBOL $5BD8 home_entry_2
COMMENT $5BDB if none, than OK
COMMENT $5BDD if there is something,... further checking
COMMENT $5BDF are we left of home
FORCE_SYMBOL $5BDF HOME3_POS_LEFT
COMMENT $5BE1 yep, than die DIE_WALL_JUMP
COMMENT $5BE5 or are we right, than
FORCE_SYMBOL $5BE5 HOME3_POS_RIGHT
COMMENT $5BE7 goto next test
COMMENT $5BE9 load home address to X
FORCE_SYMBOL $5BE9 home_entry_3
COMMENT $5BEC load home object to U
FORCE_SYMBOL $5BEC home_entry_3
COMMENT $5BEF if none, than OK
COMMENT $5BF1 if there is something,... further checking
COMMENT $5BF3 are we left of home
FORCE_SYMBOL $5BF3 HOME4_POS_LEFT
COMMENT $5BF5 yep, than die DIE_WALL_JUMP
COMMENT $5BF9 or are we right, than
FORCE_SYMBOL $5BF9 HOME4_POS_RIGHT
COMMENT $5BFB goto next test
COMMENT $5BFD load home address to X
FORCE_SYMBOL $5BFD home_entry_4
COMMENT $5C00 load home object to U
FORCE_SYMBOL $5C00 home_entry_4
COMMENT $5C03 if none, than OK
COMMENT $5C05 if there is something,... further checking
COMMENT $5C07 are we left of home
FORCE_SYMBOL $5C07 HOME5_POS_LEFT
COMMENT $5C09 yep, than die DIE_WALL_JUMP
COMMENT $5C0D or are we right, than
FORCE_SYMBOL $5C0D HOME5_POS_RIGHT
COMMENT $5C0F goto die DIE_WALL_JUMP
COMMENT $5C13 load home address to X
FORCE_SYMBOL $5C13 home_entry_5
COMMENT $5C16 load home object to U
FORCE_SYMBOL $5C16 home_entry_5
COMMENT $5C19 if none, than OK
COMMENT_LINE $5C1B X pointer to home object position
COMMENT_LINE $5C1B U pointer to home object
COMMENT_LINE $5C1B here test ob frog, croco or fly in home
COMMENT $5C1B load the object special to A
FORCE_NO_SYMBOL $5C1B
COMMENT $5C1D check if fly...
FORCE_SYMBOL $5C1D SPECIAL_HOME_FLY
COMMENT $5C1F no?. bother, than dead :-(
COMMENT_LINE $5C21 yep, this is a fly object, reinitiate fly...
COMMENT $5C21 reload the fly timer
FORCE_SYMBOL $5C21 fly_timer_start
COMMENT $5C23 and store it
FORCE_SYMBOL $5C23 fly_timer
COMMENT $5C25 is WAITING
FORCE_SYMBOL $5C25 fly_status
COMMENT $5C27 load fly bonus for extro
FORCE_SYMBOL $5C27 FLY_BONUS
COMMENT $5C29 add old bonus to it
FORCE_SYMBOL $5C29 frog_bonus
COMMENT $5C2B and store it back...
FORCE_SYMBOL $5C2B frog_bonus
COMMENT $5C2D and do 'frog reached home'
COMMENT $5C2F is only half a crocodile seen?
FORCE_SYMBOL $5C2F SPECIAL_CROCO_HALF
COMMENT $5C31 no, than jump
COMMENT $5C33 reload the croco timer
FORCE_SYMBOL $5C33 croco_timer_start
COMMENT $5C35 and store it
FORCE_SYMBOL $5C35 croco_timer
COMMENT $5C37 is WAITING
FORCE_SYMBOL $5C37 croco_status
COMMENT $5C39 and do 'frog reached home', phhht
COMMENT $5C3B if a full crocodile is in house
FORCE_SYMBOL $5C3B SPECIAL_CROCO_FULL
COMMENT $5C3D no?, than jump
COMMENT $5C3F otherwise frogger is dead
FORCE_SYMBOL $5C3F die_croco
COMMENT $5C42 default death
FORCE_SYMBOL $5C42 DIE_HOME_FULL
COMMENT $5C45 frogger jumped to occupied home
FORCE_SYMBOL $5C45 die_set
COMMENT_LINE $5C48 ***************************************************************************
COMMENT_LINE $5C48 X pointer to home object position
COMMENT_LINE $5C48 0
COMMENT $5C48 load object for frog is in home
FORCE_SYMBOL $5C48 frog1a_in_home_object
COMMENT $5C4B and set it as new home object
FORCE_NO_SYMBOL $5C4B
COMMENT $5C4D load animation counter of object
COMMENT $5C50 and store it to object in RAM
FORCE_NO_SYMBOL $5C50
FORCE_SYMBOL $5C52 KarlHomeJump_Sound
FORCE_SYMBOL $5C55 play_sfx_x
COMMENT $5C58 gimick possible with 0 or 1 house occupied
FORCE_NO_SYMBOL $5C58
FORCE_SYMBOL $5C5A in_home_counter
FORCE_NO_SYMBOL $5C5E
FORCE_SYMBOL $5C60 gimmickPossible
COMMENT $5C63 decrease home counter
FORCE_SYMBOL $5C63 in_home_counter
COMMENT $5C65 if not zero, than not all homes are full
COMMENT $5C67 do a frog in home intermission
FORCE_SYMBOL $5C67 frog_in_home
COMMENT $5C6A do a level done intermission
FORCE_SYMBOL $5C6A level_complete
COMMENT $5C6D increase level counter
FORCE_SYMBOL $5C6D game_level
COMMENT $5C70 load number of none level
COMMENT $5C72 compare to game_level
FORCE_SYMBOL $5C72 game_level
COMMENT $5C75 if equal a roll_over has occured
FORCE_SYMBOL $5C77 did_rollOver
COMMENT $5C7A clear level (start at 0 again)
FORCE_SYMBOL $5C7A game_level
COMMENT_LINE $5C7D TODO if space left - roll Over intermission!
COMMENT_LINE $5C7D JSR      roll_over_intermission       ; and do a roll_over intermission
COMMENT $5C7D this piece of music
FORCE_SYMBOL $5C7D gameStartMusic
COMMENT $5C80 must be played
FORCE_SYMBOL $5C80 currentMusic
COMMENT $5C83 NOW
COMMENT $5C85 for set up level...
FORCE_SYMBOL $5C85 DP_to_C8
COMMENT $5C88 set up a new level
FORCE_SYMBOL $5C88 setup_level
FORCE_SYMBOL $5C8B init_new_frog_vars
FORCE_NO_SYMBOL $5C8E
FORCE_NO_SYMBOL $5C90
COMMENT $5C95 do a frog in home intermission
FORCE_SYMBOL $5C95 frog_in_home
COMMENT_LINE $5C9A ***************************************************************************
COMMENT_LINE $5C9A this file is part of Karl Quappe, written by Malban
COMMENT_LINE $5C9A in 2016
COMMENT_LINE $5C9A all stuff contained here is public domain
COMMENT_LINE $5C9A this file is part of Karl Quappe, written by Malban
COMMENT_LINE $5C9A in 2016
COMMENT_LINE $5C9A all stuff contained here is public domain
COMMENT_LINE $5C9A code
COMMENT_LINE $5C9A following code is not allowed to make assumptions concerning DP
COMMENT_LINE $5C9A ***************************************************************************
COMMENT_LINE $5C9A if zero flag is = after macro the bit was 0
COMMENT_LINE $5C9A if zero is clear after macro the bit was 1
COMMENT_LINE $5C9A sets carry according to next bit
COMMENT_LINE $5C9A ***************************************************************************
COMMENT_LINE $5C9A general get 1 bit version
COMMENT_LINE $0000 load a new byte
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 remember we use one bit now!
COMMENT_LINE $0000 is the bit at the current position set?
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 three versions to get several bits in a row
COMMENT_LINE $0000 count variable is than kept
COMMENT_LINE $0000 in register b for faster access
COMMENT_LINE $0000 saves anoter 120 cycles to do split macros!
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT $0000 [6]
COMMENT $0000 [6]
COMMENT $0000 [6] = 18
COMMENT_LINE $0000 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $0000 ***************************************************************************
COMMENT_LINE $0000 expects nothing
COMMENT_LINE $0000 expect in U start of data
COMMENT_LINE $0000 expects d0 set
COMMENT_LINE $0000 ***************************************************************************
FORCE_SYMBOL $5C9A nextDataPos
FORCE_SYMBOL $5C9F nextDataPos
FORCE_SYMBOL $5CA2 musicOption
FORCE_NO_SYMBOL $5CA7
FORCE_SYMBOL $5CAA currentMusic
FORCE_SYMBOL $5CAD currentYLenCount
FORCE_SYMBOL $5CB0 nextMusic
FORCE_SYMBOL $5CB4 currentMusic
FORCE_NO_SYMBOL $5CB9
FORCE_SYMBOL $5CBB nextMusic
FORCE_NO_SYMBOL $5CBE
FORCE_SYMBOL $5CC2 currentYLenCount
FORCE_SYMBOL $5CC5 nextDataPos
FORCE_SYMBOL $5CC8 startDataPos
FORCE_SYMBOL $5CCD nextDataPos
FORCE_NO_SYMBOL $5CD0
FORCE_SYMBOL $5CD2 currentDataBitPos
FORCE_SYMBOL $5CD5 currentDataByte
FORCE_SYMBOL $5CD8 FIRST7
COMMENT_LINE $5CDA ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5CDA sta      ,u
COMMENT $5CDD ensure difference between shadow and virtual reg, so the new reg 7 gets copied
FORCE_NO_SYMBOL $5CDD
COMMENT_LINE $5CE1 ***************************************************************************
FORCE_SYMBOL $5CE1 currentMusic
COMMENT_LINE $5CE6 initialize dispatcher for "in move" stuff - this is only the decoder, other stuff is done "directly"
COMMENT $5CE6 first jumper of ym decoder
FORCE_SYMBOL $5CE6 STREAM_PART_1
FORCE_SYMBOL $5CE9 inMovePointer
FORCE_SYMBOL $5CEC inMovePointer
FORCE_SYMBOL $5CF0 inMovePointer
FORCE_SYMBOL $5CF4 inMovePointer
FORCE_SYMBOL $5CF8 inMovePointer
FORCE_SYMBOL $5CFC inMovePointer
FORCE_SYMBOL $5D00 inMovePointer
FORCE_SYMBOL $5D04 inMovePointer
FORCE_SYMBOL $5D08 inMovePointer
FORCE_SYMBOL $5D0C inMovePointer
COMMENT_LINE $5D11 ***************************************************************************
COMMENT_LINE $5D11 frogger music only uses
COMMENT_LINE $5D11 voices 0 and 1 (the first two voices)
COMMENT_LINE $5D11 the other channel is reserved for sound effects!
COMMENT_LINE $5D11 any change at all?
FORCE_SYMBOL $5D11 currentDataBitPos
COMMENT_LINE $5D16 load a new byte
COMMENT $5D16 [6]
FORCE_SYMBOL $5D16 nextDataPos
COMMENT $5D19 [6]
COMMENT $5D1B [6] = 18
FORCE_SYMBOL $5D1B nextDataPos
FORCE_SYMBOL $5D1E currentDataByte
FORCE_NO_SYMBOL $5D21
FORCE_SYMBOL $5D23 currentDataBitPos
COMMENT_LINE $5D26 remember we use one bit now!
COMMENT_LINE $5D26 is the bit at the current position set?
FORCE_SYMBOL $5D26 currentDataByte
FORCE_SYMBOL $5D2B STREAM_PART_2
FORCE_SYMBOL $5D2E inMovePointer
FORCE_SYMBOL $5D32 emptyStreamInMove
FORCE_SYMBOL $5D35 inMovePointer
COMMENT_LINE $5D39 ***************************************************************************
COMMENT_LINE $5D39 voice 0 changes?
COMMENT_LINE $5D39 check voice 0, if next bit 0, than nothing changed in voice0
FORCE_SYMBOL $5D39 currentDataBitPos
COMMENT_LINE $5D3E load a new byte
COMMENT $5D3E [6]
FORCE_SYMBOL $5D3E nextDataPos
COMMENT $5D41 [6]
COMMENT $5D43 [6] = 18
FORCE_SYMBOL $5D43 nextDataPos
FORCE_SYMBOL $5D46 currentDataByte
FORCE_NO_SYMBOL $5D49
FORCE_SYMBOL $5D4B currentDataBitPos
COMMENT_LINE $5D4E remember we use one bit now!
COMMENT_LINE $5D4E is the bit at the current position set?
FORCE_SYMBOL $5D4E currentDataByte
FORCE_SYMBOL $5D53 STREAM_PART_3
FORCE_SYMBOL $5D56 inMovePointer
FORCE_SYMBOL $5D5A STREAM_PART_6
FORCE_SYMBOL $5D5D inMovePointer
COMMENT_LINE $5D61 ***************************************************************************
COMMENT_LINE $5D61 voice 0 Amplitude
FORCE_SYMBOL $5D61 currentDataBitPos
COMMENT_LINE $5D66 load a new byte
COMMENT $5D66 [6]
FORCE_SYMBOL $5D66 nextDataPos
COMMENT $5D69 [6]
COMMENT $5D6B [6] = 18
FORCE_SYMBOL $5D6B nextDataPos
FORCE_SYMBOL $5D6E currentDataByte
FORCE_NO_SYMBOL $5D71
FORCE_SYMBOL $5D73 currentDataBitPos
COMMENT_LINE $5D76 remember we use one bit now!
COMMENT_LINE $5D76 is the bit at the current position set?
FORCE_SYMBOL $5D76 currentDataByte
FORCE_NO_SYMBOL $5D7B
FORCE_SYMBOL $5D7D currentDataBitPos
COMMENT $5D83 [6]
FORCE_SYMBOL $5D83 nextDataPos
COMMENT $5D86 [6]
COMMENT $5D88 [6] = 18
FORCE_SYMBOL $5D88 nextDataPos
FORCE_SYMBOL $5D8B currentDataByte
FORCE_NO_SYMBOL $5D8E
FORCE_SYMBOL $5D90 currentDataByte
COMMENT $5D97 [6]
FORCE_SYMBOL $5D97 nextDataPos
COMMENT $5D9A [6]
COMMENT $5D9C [6] = 18
FORCE_SYMBOL $5D9C nextDataPos
FORCE_SYMBOL $5D9F currentDataByte
FORCE_NO_SYMBOL $5DA2
FORCE_SYMBOL $5DA4 currentDataByte
COMMENT $5DAB [6]
FORCE_SYMBOL $5DAB nextDataPos
COMMENT $5DAE [6]
COMMENT $5DB0 [6] = 18
FORCE_SYMBOL $5DB0 nextDataPos
FORCE_SYMBOL $5DB3 currentDataByte
FORCE_NO_SYMBOL $5DB6
FORCE_SYMBOL $5DB8 currentDataByte
COMMENT $5DBF [6]
FORCE_SYMBOL $5DBF nextDataPos
COMMENT $5DC2 [6]
COMMENT $5DC4 [6] = 18
FORCE_SYMBOL $5DC4 nextDataPos
FORCE_SYMBOL $5DC7 currentDataByte
FORCE_NO_SYMBOL $5DCA
FORCE_SYMBOL $5DCC currentDataBitPos
FORCE_SYMBOL $5DCF currentDataByte
COMMENT_LINE $5DD3 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5DD3 sta      ,u
FORCE_SYMBOL $5DD6 STREAM_PART_4
FORCE_SYMBOL $5DD9 inMovePointer
COMMENT_LINE $5DDD ***************************************************************************
COMMENT_LINE $5DDD voice 0 Frequency low
FORCE_SYMBOL $5DDD STREAM_PART_5
FORCE_SYMBOL $5DE0 inMovePointer
COMMENT_LINE $5DE4 check voice 0 low frequence, if next bit is one, = it
FORCE_SYMBOL $5DE4 currentDataBitPos
COMMENT_LINE $5DE9 load a new byte
COMMENT $5DE9 [6]
FORCE_SYMBOL $5DE9 nextDataPos
COMMENT $5DEC [6]
COMMENT $5DEE [6] = 18
FORCE_SYMBOL $5DEE nextDataPos
FORCE_SYMBOL $5DF1 currentDataByte
FORCE_NO_SYMBOL $5DF4
FORCE_SYMBOL $5DF6 currentDataBitPos
COMMENT_LINE $5DF9 remember we use one bit now!
COMMENT_LINE $5DF9 is the bit at the current position set?
FORCE_SYMBOL $5DF9 currentDataByte
COMMENT_LINE $5DFE get 8 bits of low freq from stream
FORCE_NO_SYMBOL $5DFE
FORCE_SYMBOL $5E00 currentDataBitPos
COMMENT $5E06 [6]
FORCE_SYMBOL $5E06 nextDataPos
COMMENT $5E09 [6]
COMMENT $5E0B [6] = 18
FORCE_SYMBOL $5E0B nextDataPos
FORCE_SYMBOL $5E0E currentDataByte
FORCE_NO_SYMBOL $5E11
FORCE_SYMBOL $5E13 currentDataByte
COMMENT $5E1A [6]
FORCE_SYMBOL $5E1A nextDataPos
COMMENT $5E1D [6]
COMMENT $5E1F [6] = 18
FORCE_SYMBOL $5E1F nextDataPos
FORCE_SYMBOL $5E22 currentDataByte
FORCE_NO_SYMBOL $5E25
FORCE_SYMBOL $5E27 currentDataByte
COMMENT $5E2E [6]
FORCE_SYMBOL $5E2E nextDataPos
COMMENT $5E31 [6]
COMMENT $5E33 [6] = 18
FORCE_SYMBOL $5E33 nextDataPos
FORCE_SYMBOL $5E36 currentDataByte
FORCE_NO_SYMBOL $5E39
FORCE_SYMBOL $5E3B currentDataByte
COMMENT $5E42 [6]
FORCE_SYMBOL $5E42 nextDataPos
COMMENT $5E45 [6]
COMMENT $5E47 [6] = 18
FORCE_SYMBOL $5E47 nextDataPos
FORCE_SYMBOL $5E4A currentDataByte
FORCE_NO_SYMBOL $5E4D
FORCE_SYMBOL $5E4F currentDataByte
COMMENT $5E56 [6]
FORCE_SYMBOL $5E56 nextDataPos
COMMENT $5E59 [6]
COMMENT $5E5B [6] = 18
FORCE_SYMBOL $5E5B nextDataPos
FORCE_SYMBOL $5E5E currentDataByte
FORCE_NO_SYMBOL $5E61
FORCE_SYMBOL $5E63 currentDataByte
COMMENT $5E6A [6]
FORCE_SYMBOL $5E6A nextDataPos
COMMENT $5E6D [6]
COMMENT $5E6F [6] = 18
FORCE_SYMBOL $5E6F nextDataPos
FORCE_SYMBOL $5E72 currentDataByte
FORCE_NO_SYMBOL $5E75
FORCE_SYMBOL $5E77 currentDataByte
COMMENT $5E7E [6]
FORCE_SYMBOL $5E7E nextDataPos
COMMENT $5E81 [6]
COMMENT $5E83 [6] = 18
FORCE_SYMBOL $5E83 nextDataPos
FORCE_SYMBOL $5E86 currentDataByte
FORCE_NO_SYMBOL $5E89
FORCE_SYMBOL $5E8B currentDataByte
COMMENT $5E92 [6]
FORCE_SYMBOL $5E92 nextDataPos
COMMENT $5E95 [6]
COMMENT $5E97 [6] = 18
FORCE_SYMBOL $5E97 nextDataPos
FORCE_SYMBOL $5E9A currentDataByte
FORCE_NO_SYMBOL $5E9D
FORCE_SYMBOL $5E9F currentDataBitPos
FORCE_SYMBOL $5EA2 currentDataByte
COMMENT_LINE $5EA6 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5EA6 sta      ,u
FORCE_SYMBOL $5EA9 STREAM_PART_5
FORCE_SYMBOL $5EAC inMovePointer
COMMENT_LINE $5EB0 ***************************************************************************
COMMENT_LINE $5EB0 voice 0 Frequency high
COMMENT_LINE $5EB0 check voice 0 high frequency, if next bit is one, = it
FORCE_SYMBOL $5EB0 currentDataBitPos
COMMENT_LINE $5EB5 load a new byte
COMMENT $5EB5 [6]
FORCE_SYMBOL $5EB5 nextDataPos
COMMENT $5EB8 [6]
COMMENT $5EBA [6] = 18
FORCE_SYMBOL $5EBA nextDataPos
FORCE_SYMBOL $5EBD currentDataByte
FORCE_NO_SYMBOL $5EC0
FORCE_SYMBOL $5EC2 currentDataBitPos
COMMENT_LINE $5EC5 remember we use one bit now!
COMMENT_LINE $5EC5 is the bit at the current position set?
FORCE_SYMBOL $5EC5 currentDataByte
FORCE_NO_SYMBOL $5ECA
FORCE_SYMBOL $5ECC currentDataBitPos
COMMENT $5ED2 [6]
FORCE_SYMBOL $5ED2 nextDataPos
COMMENT $5ED5 [6]
COMMENT $5ED7 [6] = 18
FORCE_SYMBOL $5ED7 nextDataPos
FORCE_SYMBOL $5EDA currentDataByte
FORCE_NO_SYMBOL $5EDD
FORCE_SYMBOL $5EDF currentDataByte
COMMENT $5EE6 [6]
FORCE_SYMBOL $5EE6 nextDataPos
COMMENT $5EE9 [6]
COMMENT $5EEB [6] = 18
FORCE_SYMBOL $5EEB nextDataPos
FORCE_SYMBOL $5EEE currentDataByte
FORCE_NO_SYMBOL $5EF1
FORCE_SYMBOL $5EF3 currentDataByte
COMMENT $5EFA [6]
FORCE_SYMBOL $5EFA nextDataPos
COMMENT $5EFD [6]
COMMENT $5EFF [6] = 18
FORCE_SYMBOL $5EFF nextDataPos
FORCE_SYMBOL $5F02 currentDataByte
FORCE_NO_SYMBOL $5F05
FORCE_SYMBOL $5F07 currentDataByte
COMMENT $5F0E [6]
FORCE_SYMBOL $5F0E nextDataPos
COMMENT $5F11 [6]
COMMENT $5F13 [6] = 18
FORCE_SYMBOL $5F13 nextDataPos
FORCE_SYMBOL $5F16 currentDataByte
FORCE_NO_SYMBOL $5F19
FORCE_SYMBOL $5F1B currentDataBitPos
FORCE_SYMBOL $5F1E currentDataByte
COMMENT_LINE $5F22 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5F22 sta      ,u
FORCE_SYMBOL $5F25 STREAM_PART_6
FORCE_SYMBOL $5F28 inMovePointer
COMMENT_LINE $5F2C ***************************************************************************
COMMENT_LINE $5F2C voice 1 changes?
COMMENT_LINE $5F2C check voice !, if next bit 0, than nothing changed in voice!
FORCE_SYMBOL $5F2C currentDataBitPos
COMMENT_LINE $5F31 load a new byte
COMMENT $5F31 [6]
FORCE_SYMBOL $5F31 nextDataPos
COMMENT $5F34 [6]
COMMENT $5F36 [6] = 18
FORCE_SYMBOL $5F36 nextDataPos
FORCE_SYMBOL $5F39 currentDataByte
FORCE_NO_SYMBOL $5F3C
FORCE_SYMBOL $5F3E currentDataBitPos
COMMENT_LINE $5F41 remember we use one bit now!
COMMENT_LINE $5F41 is the bit at the current position set?
FORCE_SYMBOL $5F41 currentDataByte
FORCE_SYMBOL $5F46 STREAM_PART_7
FORCE_SYMBOL $5F49 inMovePointer
FORCE_SYMBOL $5F4D emptyStreamInMove
FORCE_SYMBOL $5F50 inMovePointer
COMMENT_LINE $5F54 ***************************************************************************
COMMENT_LINE $5F54 voice 1 Amplitude
FORCE_SYMBOL $5F54 currentDataBitPos
COMMENT_LINE $5F59 load a new byte
COMMENT $5F59 [6]
FORCE_SYMBOL $5F59 nextDataPos
COMMENT $5F5C [6]
COMMENT $5F5E [6] = 18
FORCE_SYMBOL $5F5E nextDataPos
FORCE_SYMBOL $5F61 currentDataByte
FORCE_NO_SYMBOL $5F64
FORCE_SYMBOL $5F66 currentDataBitPos
COMMENT_LINE $5F69 remember we use one bit now!
COMMENT_LINE $5F69 is the bit at the current position set?
FORCE_SYMBOL $5F69 currentDataByte
FORCE_NO_SYMBOL $5F6E
FORCE_SYMBOL $5F70 currentDataBitPos
COMMENT $5F76 [6]
FORCE_SYMBOL $5F76 nextDataPos
COMMENT $5F79 [6]
COMMENT $5F7B [6] = 18
FORCE_SYMBOL $5F7B nextDataPos
FORCE_SYMBOL $5F7E currentDataByte
FORCE_NO_SYMBOL $5F81
FORCE_SYMBOL $5F83 currentDataByte
COMMENT $5F8A [6]
FORCE_SYMBOL $5F8A nextDataPos
COMMENT $5F8D [6]
COMMENT $5F8F [6] = 18
FORCE_SYMBOL $5F8F nextDataPos
FORCE_SYMBOL $5F92 currentDataByte
FORCE_NO_SYMBOL $5F95
FORCE_SYMBOL $5F97 currentDataByte
COMMENT $5F9E [6]
FORCE_SYMBOL $5F9E nextDataPos
COMMENT $5FA1 [6]
COMMENT $5FA3 [6] = 18
FORCE_SYMBOL $5FA3 nextDataPos
FORCE_SYMBOL $5FA6 currentDataByte
FORCE_NO_SYMBOL $5FA9
FORCE_SYMBOL $5FAB currentDataByte
COMMENT $5FB2 [6]
FORCE_SYMBOL $5FB2 nextDataPos
COMMENT $5FB5 [6]
COMMENT $5FB7 [6] = 18
FORCE_SYMBOL $5FB7 nextDataPos
FORCE_SYMBOL $5FBA currentDataByte
FORCE_NO_SYMBOL $5FBD
FORCE_SYMBOL $5FBF currentDataBitPos
FORCE_SYMBOL $5FC2 currentDataByte
COMMENT_LINE $5FC6 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $5FC6 sta      ,u
FORCE_SYMBOL $5FC9 STREAM_PART_8
FORCE_SYMBOL $5FCC inMovePointer
COMMENT_LINE $5FD0 ***************************************************************************
COMMENT_LINE $5FD0 voice 1 Frequency low
FORCE_SYMBOL $5FD0 STREAM_PART_9
FORCE_SYMBOL $5FD3 inMovePointer
COMMENT_LINE $5FD7 check voice 1 low frequence, if next bit is one, = it
FORCE_SYMBOL $5FD7 currentDataBitPos
COMMENT_LINE $5FDC load a new byte
COMMENT $5FDC [6]
FORCE_SYMBOL $5FDC nextDataPos
COMMENT $5FDF [6]
COMMENT $5FE1 [6] = 18
FORCE_SYMBOL $5FE1 nextDataPos
FORCE_SYMBOL $5FE4 currentDataByte
FORCE_NO_SYMBOL $5FE7
FORCE_SYMBOL $5FE9 currentDataBitPos
COMMENT_LINE $5FEC remember we use one bit now!
COMMENT_LINE $5FEC is the bit at the current position set?
FORCE_SYMBOL $5FEC currentDataByte
COMMENT_LINE $5FF1 get 8 bits of low freq from stream
FORCE_NO_SYMBOL $5FF1
FORCE_SYMBOL $5FF3 currentDataBitPos
COMMENT $5FF9 [6]
FORCE_SYMBOL $5FF9 nextDataPos
COMMENT $5FFC [6]
COMMENT $5FFE [6] = 18
FORCE_SYMBOL $5FFE nextDataPos
FORCE_SYMBOL $6001 currentDataByte
FORCE_NO_SYMBOL $6004
FORCE_SYMBOL $6006 currentDataByte
COMMENT $600D [6]
FORCE_SYMBOL $600D nextDataPos
COMMENT $6010 [6]
COMMENT $6012 [6] = 18
FORCE_SYMBOL $6012 nextDataPos
FORCE_SYMBOL $6015 currentDataByte
FORCE_NO_SYMBOL $6018
FORCE_SYMBOL $601A currentDataByte
COMMENT $6021 [6]
FORCE_SYMBOL $6021 nextDataPos
COMMENT $6024 [6]
COMMENT $6026 [6] = 18
FORCE_SYMBOL $6026 nextDataPos
FORCE_SYMBOL $6029 currentDataByte
FORCE_NO_SYMBOL $602C
FORCE_SYMBOL $602E currentDataByte
COMMENT $6035 [6]
FORCE_SYMBOL $6035 nextDataPos
COMMENT $6038 [6]
COMMENT $603A [6] = 18
FORCE_SYMBOL $603A nextDataPos
FORCE_SYMBOL $603D currentDataByte
FORCE_NO_SYMBOL $6040
FORCE_SYMBOL $6042 currentDataByte
COMMENT $6049 [6]
FORCE_SYMBOL $6049 nextDataPos
COMMENT $604C [6]
COMMENT $604E [6] = 18
FORCE_SYMBOL $604E nextDataPos
FORCE_SYMBOL $6051 currentDataByte
FORCE_NO_SYMBOL $6054
FORCE_SYMBOL $6056 currentDataByte
COMMENT $605D [6]
FORCE_SYMBOL $605D nextDataPos
COMMENT $6060 [6]
COMMENT $6062 [6] = 18
FORCE_SYMBOL $6062 nextDataPos
FORCE_SYMBOL $6065 currentDataByte
FORCE_NO_SYMBOL $6068
FORCE_SYMBOL $606A currentDataByte
COMMENT $6071 [6]
FORCE_SYMBOL $6071 nextDataPos
COMMENT $6074 [6]
COMMENT $6076 [6] = 18
FORCE_SYMBOL $6076 nextDataPos
FORCE_SYMBOL $6079 currentDataByte
FORCE_NO_SYMBOL $607C
FORCE_SYMBOL $607E currentDataByte
COMMENT $6085 [6]
FORCE_SYMBOL $6085 nextDataPos
COMMENT $6088 [6]
COMMENT $608A [6] = 18
FORCE_SYMBOL $608A nextDataPos
FORCE_SYMBOL $608D currentDataByte
FORCE_NO_SYMBOL $6090
FORCE_SYMBOL $6092 currentDataBitPos
FORCE_SYMBOL $6095 currentDataByte
COMMENT_LINE $6099 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $6099 sta      ,u
FORCE_SYMBOL $609C STREAM_PART_9
FORCE_SYMBOL $609F inMovePointer
COMMENT_LINE $60A3 ***************************************************************************
COMMENT_LINE $60A3 voice 1 Frequency high
COMMENT_LINE $60A3 check voice 1 high frequency, if next bit is one, = it
FORCE_SYMBOL $60A3 currentDataBitPos
COMMENT_LINE $60A8 load a new byte
COMMENT $60A8 [6]
FORCE_SYMBOL $60A8 nextDataPos
COMMENT $60AB [6]
COMMENT $60AD [6] = 18
FORCE_SYMBOL $60AD nextDataPos
FORCE_SYMBOL $60B0 currentDataByte
FORCE_NO_SYMBOL $60B3
FORCE_SYMBOL $60B5 currentDataBitPos
COMMENT_LINE $60B8 remember we use one bit now!
COMMENT_LINE $60B8 is the bit at the current position set?
FORCE_SYMBOL $60B8 currentDataByte
COMMENT_LINE $60BD get 4 bits of low freq from stream
FORCE_NO_SYMBOL $60BD
FORCE_SYMBOL $60BF currentDataBitPos
COMMENT $60C5 [6]
FORCE_SYMBOL $60C5 nextDataPos
COMMENT $60C8 [6]
COMMENT $60CA [6] = 18
FORCE_SYMBOL $60CA nextDataPos
FORCE_SYMBOL $60CD currentDataByte
FORCE_NO_SYMBOL $60D0
FORCE_SYMBOL $60D2 currentDataByte
COMMENT $60D9 [6]
FORCE_SYMBOL $60D9 nextDataPos
COMMENT $60DC [6]
COMMENT $60DE [6] = 18
FORCE_SYMBOL $60DE nextDataPos
FORCE_SYMBOL $60E1 currentDataByte
FORCE_NO_SYMBOL $60E4
FORCE_SYMBOL $60E6 currentDataByte
COMMENT $60ED [6]
FORCE_SYMBOL $60ED nextDataPos
COMMENT $60F0 [6]
COMMENT $60F2 [6] = 18
FORCE_SYMBOL $60F2 nextDataPos
FORCE_SYMBOL $60F5 currentDataByte
FORCE_NO_SYMBOL $60F8
FORCE_SYMBOL $60FA currentDataByte
COMMENT $6101 [6]
FORCE_SYMBOL $6101 nextDataPos
COMMENT $6104 [6]
COMMENT $6106 [6] = 18
FORCE_SYMBOL $6106 nextDataPos
FORCE_SYMBOL $6109 currentDataByte
FORCE_NO_SYMBOL $610C
FORCE_SYMBOL $610E currentDataBitPos
FORCE_SYMBOL $6111 currentDataByte
COMMENT_LINE $6115 ldu      #(Vec_Music_Work + register)
COMMENT_LINE $6115 sta      ,u
FORCE_SYMBOL $6118 emptyStreamInMove
FORCE_SYMBOL $611B inMovePointer
COMMENT_LINE $611F ***************************************************************************
COMMENT_LINE $611F this file is part of Karl Quappe, written by Malban
COMMENT_LINE $611F in 2016
COMMENT_LINE $611F all stuff contained here is public domain
COMMENT_LINE $6309 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6309 in 2016
COMMENT_LINE $6309 all stuff contained here is public domain
COMMENT_LINE $6518 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6518 in 2016
COMMENT_LINE $6518 all stuff contained here is public domain
COMMENT_LINE $6AF9 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6AF9 in 2016
COMMENT_LINE $6AF9 all stuff contained here is public domain
COMMENT_LINE $6E48 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $6E48 in 2016
COMMENT_LINE $6E48 all stuff contained here is public domain
COMMENT_LINE $7127 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7127 in 2016
COMMENT_LINE $7127 all stuff contained here is public domain
COMMENT_LINE $7241 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7241 in 2016
COMMENT_LINE $7241 all stuff contained here is public domain
COMMENT_LINE $7391 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7391 in 2016
COMMENT_LINE $7391 all stuff contained here is public domain
COMMENT_LINE $74C1 ***************** YM Music Structures
COMMENT $74C1 music to play
COMMENT $74C3 next music piece
COMMENT $74C5 music to play
COMMENT $74C7 next music piece
COMMENT $74D3 next music piece
COMMENT $74D7 next music piece
COMMENT $74DB next music piece
COMMENT $74DF next music piece
COMMENT $74E3 next music piece
COMMENT $74E7 next music piece
COMMENT_LINE $74E9 KarlHomeJumpMusic:
COMMENT_LINE $74E9 dw       KarlHomeJumpTheme
COMMENT_LINE $74E9 dw       0                            ; next music piece
COMMENT_LINE $74E9 ***************** AYFX Structures
COMMENT_LINE $74E9 priority the higher the more priority!
COMMENT_LINE $74E9 *** AYFX following
COMMENT $74EB priority 2 = low
COMMENT $74EE priority 2 = low
COMMENT $74F1 priority 2 = low
COMMENT $74F4 priority 2 = low
COMMENT $74F7 priority 2 = low
COMMENT $74FA priority 2 = low
COMMENT $74FD priority 2 = low
COMMENT $7500 priority 2 = low
COMMENT_LINE $7501 Karl_Live_Got_Sound
COMMENT_LINE $7501 dw       KarlCoinNoise_data
COMMENT $7501 priority 2 = low
COMMENT $7504 priority 2 = low
COMMENT $7507 priority 2 = low
COMMENT $750A priority 2 = low
COMMENT_LINE $750B ***************** AYFX DATA
COMMENT_LINE $78D6 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $78D6 in 2016
COMMENT_LINE $78D6 all stuff contained here is public domain
COMMENT_LINE $78D6 format:
COMMENT_LINE $78D6 height, width
COMMENT_LINE $78D6 shiftreg, ...,  shiftreg
COMMENT_LINE $78D6 ....
COMMENT_LINE $78D6 shiftreg, ...,  shiftreg
COMMENT $78D8 forward
COMMENT $78F4 forward
COMMENT $7910 forward
COMMENT $792C forward
COMMENT $7948 forward
COMMENT $7964 forward
COMMENT $7980 forward
COMMENT $799C forward
COMMENT $79B8 forward
COMMENT $79D4 forward
COMMENT $79F0 forward
COMMENT $7A0C forward
COMMENT $7A28 forward
COMMENT $7A44 forward
COMMENT $7A60 forward
COMMENT $7A7C forward
COMMENT_LINE $7A98 Note:
COMMENT_LINE $7A98 The vectrex uses the VIA 6522 and the models of VIA it uses has some bugs.
COMMENT_LINE $7A98 One of its bugs is, that a complete shift cycle does not
COMMENT_LINE $7A98 shift 8 times for one byte, but 8+1. The last shifted value is repeated.
COMMENT_LINE $7A98 So that e.g.
COMMENT_LINE $7A98 0101 0101 [e.g. part of a bitmap]
COMMENT_LINE $7A98 results in an output like:
COMMENT_LINE $7A98 0101 0101 1
COMMENT_LINE $7A98 In the normal "text" routines you do not see that, since letters always end with a "0"
COMMENT_LINE $7A98 and a double "00" result just in a little bit more space between letters.
COMMENT_LINE $7A98 In a "continues" bitmap you must align or tweak the bitmap thus, that you do not (or only barely) see bit doubles.
COMMENT_LINE $7A98 I already did that (to some extend) to the title bitmap - and I thought I did a good job :-(.
COMMENT_LINE $7A98 It certainly is even more difficult to do if you are working with "diagonals", since you can not get rid of a double step.
COMMENT_LINE $7A98 See letter "A"
COMMENT_LINE $7AA8 ***************************************************************************
COMMENT_LINE $7AA8 this file is part of Karl Quappe, written by Malban
COMMENT_LINE $7AA8 in 2016
COMMENT_LINE $7AA8 all stuff contained here is public domain
COMMENT_LINE $7AA8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $7AA8 this file contains the yankee doodle music for the game                   ;
COMMENT_LINE $7AA8 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMMENT_LINE $7AA8 Music data bytes:
COMMENT_LINE $7AA8 Bits 0-5 = frequency
COMMENT_LINE $7AA8 Bit 6 clear = tone
COMMENT_LINE $7AA8 Bit 6 = = noise
COMMENT_LINE $7AA8 Bit 7 = = next music data byte is for next channel
COMMENT_LINE $7AA8 Bit 7 clear, play note with duration in next music data byte:
COMMENT_LINE $7AA8 bits 0-5 = duration
COMMENT_LINE $7AA8 bit 6 = unused
COMMENT_LINE $7AA8 bit 7 = = end of music
COMMENT $7AA8 ADSR and twang address tables, in Vectrex ROM
COMMENT $7AAC ;;;;;;;
COMMENT $7AAE first byte is a note, to be found
COMMENT $7AB0 in vectrex rom, is a 64 byte table...
COMMENT $7AB2 last byte is length of note
COMMENT $7AB4 ;;;;;;;
COMMENT $7AC2 ;;;;;;;
COMMENT $7ACA ;;;;;;;
COMMENT $7AD8 ;;;;;;;
COMMENT $7AE4 ;;;;;;;
COMMENT $7AE8 a 128 means the next byte is a note for the
COMMENT $7AEC next channel...
COMMENT $7AF4 ;;;;;;;
COMMENT $7B04 ;;;;;;;
COMMENT $7B14 ;;;;;;;
COMMENT $7B22 ;;;;;;;
COMMENT $7B32 ;;;;;;;
COMMENT $7B42 ;;;;;;;
COMMENT $7B52 ;;;;;;;
COMMENT $7B5E ;;;;;;;
COMMENT $7BD1 $FF is end marker for music
COMMENT_LINE $7BD3 (high byte set) and end marker for
COMMENT_LINE $7BD3 copy routine
COMMENT_LINE $7BD3 ***************************************************************************
COMMENT_LINE $7C6C ***************************************************************************
COMMENT_LINE $7C6C stupid assembler, these defines must be made after the above
COMMENT_LINE $7C6C labels
COMMENT_LINE $7C6C following are string offsets for the different deaths
COMMENT_LINE $7C6C ***************************************************************************
COMMENT_LINE $7C6C Immediately back to menu
COMMENT $7C6C copy the vec4ever switching function into place
FORCE_SYMBOL $7C6C ramfunctiondata
FORCE_SYMBOL $7C6F ramfunction
FORCE_SYMBOL $7C74 Move_Mem_a
COMMENT $7C77 the 'switch back to menu' command
FORCE_NO_SYMBOL $7C77
COMMENT $7C7A up up and away
FORCE_SYMBOL $7C7A ramfunction
COMMENT $7C7D Source copy the vec4ever switching function into place
FORCE_SYMBOL $7C7D v4e_saveBlockStart
COMMENT $7C80 destination
FORCE_SYMBOL $7C80 vec4SaveBuffer
FORCE_SYMBOL $7C85 Move_Mem_a
COMMENT_LINE $7C8A ldu #highScoreTable
COMMENT_LINE $7C8A lda #'A'
COMMENT_LINE $7C8A sta 0,u
COMMENT $7C8A copy the vec4ever switching function into place
FORCE_SYMBOL $7C8A StoreHiscoreFnc
FORCE_SYMBOL $7C8D ramfunction
FORCE_SYMBOL $7C92 Move_Mem_a
COMMENT $7C95 the 'store data' command
FORCE_NO_SYMBOL $7C95
COMMENT $7C98 up up and away
FORCE_SYMBOL $7C98 ramfunction
COMMENT_LINE $7C9B the function below does the magic handshake with the cart,
COMMENT_LINE $7C9B then waits for the new cart data to appear in the cart address
COMMENT_LINE $7C9B space and jumps back to the v4e cart
COMMENT $7C9B notify v4e
FORCE_NO_SYMBOL $7C9B
COMMENT $7C9E and put command on the bus
FORCE_NO_SYMBOL $7C9E
COMMENT $7CA3 while the cart is working there is only one data byte
FORCE_NO_SYMBOL $7CA3
COMMENT $7CA7 header just in case
COMMENT_LINE $7CAA the function below does the magic handshake with the cart,
COMMENT_LINE $7CAA then waits for the new cart data to appear in the cart address
COMMENT_LINE $7CAA space and jumps back to the menu
COMMENT $7CAA notify the cart uProc
FORCE_NO_SYMBOL $7CAA
COMMENT $7CAD put command on the bus
FORCE_NO_SYMBOL $7CAD
FORCE_NO_SYMBOL $7CAF
COMMENT $7CB5 while the cart is setting up itself there is only one data byte
FORCE_NO_SYMBOL $7CB5
COMMENT $7CB8 available, so check for .two. known and different ones
COMMENT $7CBA 0-A: "GCE xxxx",$80 / B+C: music pointer (could contain a zero..)
FORCE_NO_SYMBOL $7CBA
COMMENT $7CBC look for end of menu cart header
COMMENT $7CC0 return to menu code data
COMMENT_LINE $8000 ***************************************************************************
RANGE $0000-$0404 DP $D0
RANGE $0404-$0415 DP $C8
RANGE $0415-$0421 DP $D0
RANGE $0421-$0427 DP $C8
RANGE $0427-$0475 DP $D0
RANGE $0475-$04DC DP $C8
RANGE $04DC-$04EC DP $D0
RANGE $04EC-$05D9 DP $C8
RANGE $05D9-$095F DP $D0
RANGE $095F-$0965 DP $C8
RANGE $0965-$0AE4 DP $D0
RANGE $0AE4-$0B46 DP $C8
RANGE $0B46-$0E2D DP $D0
RANGE $0E2D-$0F98 DP $C8
RANGE $0F98-$0FFF DP $D0
RANGE $0FFF-$12DE DP $C8
RANGE $12DE-$12FD DP $D0
RANGE $12FD-$1328 DP $C8
RANGE $1328-$17AC DP $D0
RANGE $17AC-$183B DP $C8
RANGE $183B-$1963 DP $D0
RANGE $1963-$1971 DP $C8
RANGE $1971-$198D DP $D0
RANGE $198D-$199D DP $C8
RANGE $199D-$1BC8 DP $D0
RANGE $1BD1-$1C7A DP $D0
RANGE $1D06-$1E18 DP $D0
RANGE $1E18-$1E18 DP $C8
RANGE $1E18-$1E83 DP $FF
RANGE $1E8B-$1F09 DP $C8
RANGE $1F09-$1FB0 DP $D0
RANGE $1FB0-$207B DP $C8
RANGE $207B-$207B DP $D0
RANGE $207B-$2097 DP $C8
RANGE $2097-$20B0 DP $D0
RANGE $20B0-$2135 DP $C8
RANGE $2173-$22A6 DP $D0
RANGE $22A6-$22D9 DP $C8
RANGE $22D9-$24E9 DP $D0
RANGE $24E9-$255B DP $C8
RANGE $255B-$26B4 DP $D0
RANGE $26B4-$26C4 DP $C8
RANGE $26C4-$5A0A DP $D0
RANGE $5A0A-$5C7E DP $C8
RANGE $5C7E-$5C99 DP $D0
RANGE $5C99-$5CA5 DP $C8
RANGE $5CA5-$5CAB DP $D0
RANGE $5CAB-$8011 DP $FF
RANGE $0000-$000B CHAR_DATA 11
RANGE $000B-$000D DW_DATA 1
RANGE $000D-$0011 DB_DATA 4
RANGE $0011-$001D CHAR_DATA 12
RANGE $001D-$001E DB_DATA 1
RANGE $001E-$0020 CODE
RANGE $0020-$0028 CHAR_DATA 8
RANGE $0028-$002F CHAR_DATA 7
RANGE $0030-$0034 CHAR_DATA 4
RANGE $0034-$0036 DW_DATA 1
RANGE $0036-$0038 DW_DATA 1
RANGE $0038-$003A DW_DATA 1
RANGE $003A-$003B DB_DATA 1
RANGE $003B-$003C DB_DATA 1
RANGE $003C-$003E DW_DATA 1
RANGE $003E-$0040 DW_DATA 1
RANGE $0040-$0042 DW_DATA 1
RANGE $0042-$0044 DW_DATA 1
RANGE $0044-$0048 CHAR_DATA 4
RANGE $0048-$0051 CHAR_DATA 9
RANGE $0051-$005E CHAR_DATA 13
RANGE $005E-$0068 CHAR_DATA 10
RANGE $0068-$02DD CODE
RANGE $02DD-$02DF DW_DATA 1
RANGE $02DF-$02E1 DW_DATA 1
RANGE $02E1-$02E3 DW_DATA 1
RANGE $02E3-$02E5 DW_DATA 1
RANGE $02E5-$02E7 DW_DATA 1
RANGE $02E7-$02E9 DW_DATA 1
RANGE $02E9-$02EB DW_DATA 1
RANGE $02EB-$02EC DB_DATA 1
RANGE $02EC-$02ED DB_DATA 1
RANGE $02ED-$02EE DB_DATA 1
RANGE $02EE-$02F0 DW_DATA 1
RANGE $02F0-$02F1 DB_DATA 1
RANGE $02F1-$02F2 DB_DATA 1
RANGE $02F2-$02F3 DB_DATA 1
RANGE $02F3-$02F5 DW_DATA 1
RANGE $02F5-$02F6 DB_DATA 1
RANGE $02F6-$02F7 DB_DATA 1
RANGE $02F7-$02F8 DB_DATA 1
RANGE $02F8-$02FA DW_DATA 1
RANGE $02FA-$02FB DB_DATA 1
RANGE $02FB-$02FC DB_DATA 1
RANGE $02FC-$02FD DB_DATA 1
RANGE $02FD-$02FF DW_DATA 1
RANGE $02FF-$0300 DB_DATA 1
RANGE $0300-$0301 DB_DATA 1
RANGE $0301-$0302 DB_DATA 1
RANGE $0302-$0304 DW_DATA 1
RANGE $0304-$0305 DB_DATA 1
RANGE $0305-$0306 DB_DATA 1
RANGE $0306-$0307 DB_DATA 1
RANGE $0307-$0309 DW_DATA 1
RANGE $0309-$17A6 CODE
RANGE $17A6-$17A8 DB_DATA 2
RANGE $17A8-$17AA DB_DATA 2
RANGE $17AA-$17AC DB_DATA 2
RANGE $17AC-$17AE DB_DATA 2
RANGE $17AE-$17B0 DB_DATA 2
RANGE $17B0-$17B2 DB_DATA 2
RANGE $17B2-$17B4 DB_DATA 2
RANGE $17B4-$17B6 DB_DATA 2
RANGE $17B6-$17B8 DB_DATA 2
RANGE $17B8-$17BA DB_DATA 2
RANGE $17BA-$17BC DB_DATA 2
RANGE $17BC-$17BE DB_DATA 2
RANGE $17BE-$17C0 DB_DATA 2
RANGE $17C0-$17C2 DB_DATA 2
RANGE $17C2-$17C4 DB_DATA 2
RANGE $17C4-$17C6 DB_DATA 2
RANGE $17C6-$17C8 DB_DATA 2
RANGE $17C8-$17CA DB_DATA 2
RANGE $17CA-$17CC DB_DATA 2
RANGE $17CC-$17CE DB_DATA 2
RANGE $17CE-$17D0 DB_DATA 2
RANGE $17D0-$17D2 DB_DATA 2
RANGE $17D2-$17D4 DB_DATA 2
RANGE $17D4-$17D6 DB_DATA 2
RANGE $17D6-$17D8 DB_DATA 2
RANGE $17D8-$17DA DB_DATA 2
RANGE $17DA-$17DC DB_DATA 2
RANGE $17DC-$17DE DB_DATA 2
RANGE $17DE-$17E0 DB_DATA 2
RANGE $17E0-$17E2 DB_DATA 2
RANGE $17E2-$17E4 DB_DATA 2
RANGE $17E4-$17E6 DB_DATA 2
RANGE $17E6-$17E8 DB_DATA 2
RANGE $17E8-$17EA DB_DATA 2
RANGE $17EA-$17EC DB_DATA 2
RANGE $17EC-$17EE DB_DATA 2
RANGE $17EE-$17F0 DB_DATA 2
RANGE $17F0-$17F2 DB_DATA 2
RANGE $17F2-$17F4 DB_DATA 2
RANGE $17F4-$17F6 DB_DATA 2
RANGE $17F6-$17F8 DB_DATA 2
RANGE $17F8-$17FA DB_DATA 2
RANGE $17FA-$17FC DB_DATA 2
RANGE $17FC-$17FE DB_DATA 2
RANGE $17FE-$1800 DB_DATA 2
RANGE $1800-$1802 DB_DATA 2
RANGE $1802-$1804 DB_DATA 2
RANGE $1804-$1806 DB_DATA 2
RANGE $1806-$1808 DB_DATA 2
RANGE $1808-$180A DB_DATA 2
RANGE $180A-$180C DB_DATA 2
RANGE $180C-$180E DB_DATA 2
RANGE $180E-$1810 DB_DATA 2
RANGE $1810-$1812 DB_DATA 2
RANGE $1812-$1814 DB_DATA 2
RANGE $1814-$1816 DB_DATA 2
RANGE $1816-$1818 DB_DATA 2
RANGE $1818-$181A DB_DATA 2
RANGE $181A-$181C DB_DATA 2
RANGE $181C-$181E DB_DATA 2
RANGE $181E-$1820 DB_DATA 2
RANGE $1820-$18C2 CODE
RANGE $18C2-$18C4 DB_DATA 2
RANGE $18C4-$18C6 DB_DATA 2
RANGE $18C6-$18C8 DB_DATA 2
RANGE $18C8-$18CA DB_DATA 2
RANGE $18CA-$18CC DB_DATA 2
RANGE $18CC-$18CE DB_DATA 2
RANGE $18CE-$18D0 DB_DATA 2
RANGE $18D0-$18D2 DB_DATA 2
RANGE $18D2-$18D4 DB_DATA 2
RANGE $18D4-$18D6 DB_DATA 2
RANGE $18D6-$18D8 DB_DATA 2
RANGE $18D8-$18DA DB_DATA 2
RANGE $18DA-$18DC DB_DATA 2
RANGE $18DC-$18DE DB_DATA 2
RANGE $18DE-$18E0 DB_DATA 2
RANGE $18E0-$18E2 DB_DATA 2
RANGE $18E2-$18E4 DB_DATA 2
RANGE $18E4-$18E6 DB_DATA 2
RANGE $18E6-$18E8 DB_DATA 2
RANGE $18E8-$18EA DB_DATA 2
RANGE $18EA-$18EC DB_DATA 2
RANGE $18EC-$18EE DB_DATA 2
RANGE $18EE-$18F0 DB_DATA 2
RANGE $18F0-$18F2 DB_DATA 2
RANGE $18F2-$18F4 DB_DATA 2
RANGE $18F4-$18F6 DB_DATA 2
RANGE $18F6-$18F8 DB_DATA 2
RANGE $18F8-$18FA DB_DATA 2
RANGE $18FA-$18FC DB_DATA 2
RANGE $18FC-$18FE DB_DATA 2
RANGE $18FE-$1900 DB_DATA 2
RANGE $1900-$1902 DB_DATA 2
RANGE $1902-$1E72 CODE
RANGE $1E72-$1E74 DB_DATA 2
RANGE $1E74-$1E76 DB_DATA 2
RANGE $1E76-$1E78 DB_DATA 2
RANGE $1E78-$1E7A DB_DATA 2
RANGE $1E7A-$222C CODE
RANGE $222C-$2230 DB_DATA 4
RANGE $2230-$2234 DB_DATA 4
RANGE $2234-$2236 DB_DATA 2
RANGE $2236-$2238 DB_DATA 2
RANGE $2238-$223A DB_DATA 2
RANGE $223A-$223C DB_DATA 2
RANGE $223C-$22D3 CODE
RANGE $22D3-$22D5 DB_DATA 2
RANGE $22D5-$22D7 DB_DATA 2
RANGE $22D7-$22D9 DB_DATA 2
RANGE $22D9-$22DB DB_DATA 2
RANGE $22DB-$245D CODE
RANGE $245D-$245F DB_DATA 2
RANGE $245F-$2461 DB_DATA 2
RANGE $2461-$2463 DB_DATA 2
RANGE $2463-$2465 DB_DATA 2
RANGE $2465-$2470 CHAR_DATA 11
RANGE $2470-$247B CHAR_DATA 11
RANGE $247B-$2840 CODE
RANGE $2840-$284B CHAR_DATA 11
RANGE $284B-$29DD CODE
RANGE $29DD-$29E7 CHAR_DATA 10
RANGE $29E7-$29F2 CHAR_DATA 11
RANGE $29F2-$2A01 CHAR_DATA 15
RANGE $2A01-$2A11 CHAR_DATA 16
RANGE $2A11-$2A21 CHAR_DATA 16
RANGE $2A21-$2A30 CHAR_DATA 15
RANGE $2A30-$2A3C CHAR_DATA 12
RANGE $2A3C-$2A4C CHAR_DATA 16
RANGE $2A4C-$2A5C CHAR_DATA 16
RANGE $2A5C-$2A6C CHAR_DATA 16
RANGE $2A6C-$2A7B CHAR_DATA 15
RANGE $2A7B-$2A7D DW_DATA 1
RANGE $2A7D-$2A7F DW_DATA 1
RANGE $2A7F-$2A81 DW_DATA 1
RANGE $2A81-$2A83 DW_DATA 1
RANGE $2A83-$2A85 DW_DATA 1
RANGE $2A85-$2A87 DW_DATA 1
RANGE $2A87-$2A89 DW_DATA 1
RANGE $2A89-$2A8A DB_DATA 1
RANGE $2A8A-$2A8C DW_DATA 1
RANGE $2A8C-$2A8E DW_DATA 1
RANGE $2A8E-$2A90 DW_DATA 1
RANGE $2A90-$2A92 DW_DATA 1
RANGE $2A92-$2A94 DW_DATA 1
RANGE $2A94-$2A96 DW_DATA 1
RANGE $2A96-$2A98 DW_DATA 1
RANGE $2A98-$2A9A DW_DATA 1
RANGE $2A9A-$2A9C DW_DATA 1
RANGE $2A9C-$2A9E DW_DATA 1
RANGE $2A9E-$2AA0 DW_DATA 1
RANGE $2AA0-$2AA2 DW_DATA 1
RANGE $2AA2-$2AA4 DW_DATA 1
RANGE $2AA4-$2AA6 DW_DATA 1
RANGE $2AA6-$2AA8 DW_DATA 1
RANGE $2AA8-$2AAA DW_DATA 1
RANGE $2AAA-$2AAC DW_DATA 1
RANGE $2AAC-$2AAE DW_DATA 1
RANGE $2AAE-$2AB0 DW_DATA 1
RANGE $2AB0-$2AB2 DW_DATA 1
RANGE $2AB2-$2AB4 DW_DATA 1
RANGE $2AB4-$2AB6 DW_DATA 1
RANGE $2AB6-$2AB8 DW_DATA 1
RANGE $2AB8-$2ABA DW_DATA 1
RANGE $2ABA-$2ABC DW_DATA 1
RANGE $2ABC-$2ABE DW_DATA 1
RANGE $2ABE-$2AC0 DW_DATA 1
RANGE $2AC0-$2AC2 DW_DATA 1
RANGE $2AC2-$2AC4 DW_DATA 1
RANGE $2AC4-$2AC6 DW_DATA 1
RANGE $2AC6-$2AC8 DW_DATA 1
RANGE $2AC8-$2ACA DW_DATA 1
RANGE $2ACA-$2ACC DW_DATA 1
RANGE $2ACC-$2ACE DW_DATA 1
RANGE $2ACE-$2AD0 DW_DATA 1
RANGE $2AD0-$2AD2 DW_DATA 1
RANGE $2AD2-$2AD4 DW_DATA 1
RANGE $2AD4-$2AD6 DW_DATA 1
RANGE $2AD6-$2AD7 DB_DATA 1
RANGE $2AD7-$2AD9 DW_DATA 1
RANGE $2AD9-$2ADB DW_DATA 1
RANGE $2ADB-$2ADD DW_DATA 1
RANGE $2ADD-$2ADF DW_DATA 1
RANGE $2ADF-$2AE1 DW_DATA 1
RANGE $2AE1-$2AE3 DW_DATA 1
RANGE $2AE3-$2AE5 DW_DATA 1
RANGE $2AE5-$2AE7 DW_DATA 1
RANGE $2AE7-$2AE9 DW_DATA 1
RANGE $2AE9-$2AEB DW_DATA 1
RANGE $2AEB-$2AED DW_DATA 1
RANGE $2AED-$2AEF DW_DATA 1
RANGE $2AEF-$2AF1 DW_DATA 1
RANGE $2AF1-$2AF3 DW_DATA 1
RANGE $2AF3-$2AF5 DW_DATA 1
RANGE $2AF5-$2AF7 DW_DATA 1
RANGE $2AF7-$2AF9 DW_DATA 1
RANGE $2AF9-$2AFB DW_DATA 1
RANGE $2AFB-$2AFD DW_DATA 1
RANGE $2AFD-$2AFF DW_DATA 1
RANGE $2AFF-$2B01 DW_DATA 1
RANGE $2B01-$2B03 DW_DATA 1
RANGE $2B03-$2B05 DW_DATA 1
RANGE $2B05-$2B07 DW_DATA 1
RANGE $2B07-$2B09 DW_DATA 1
RANGE $2B09-$2B0B DW_DATA 1
RANGE $2B0B-$2B0D DW_DATA 1
RANGE $2B0D-$2B0F DW_DATA 1
RANGE $2B0F-$2B11 DW_DATA 1
RANGE $2B11-$2B13 DW_DATA 1
RANGE $2B13-$2B15 DW_DATA 1
RANGE $2B15-$2B17 DW_DATA 1
RANGE $2B17-$2B19 DW_DATA 1
RANGE $2B19-$2B1B DW_DATA 1
RANGE $2B1B-$2B1D DW_DATA 1
RANGE $2B1D-$2B1F DW_DATA 1
RANGE $2B1F-$2B21 DW_DATA 1
RANGE $2B21-$2B23 DW_DATA 1
RANGE $2B23-$2B25 DW_DATA 1
RANGE $2B25-$2B27 DW_DATA 1
RANGE $2B27-$2B29 DW_DATA 1
RANGE $2B29-$2B2B DW_DATA 1
RANGE $2B2B-$2B2D DW_DATA 1
RANGE $2B2D-$2B2F DW_DATA 1
RANGE $2B2F-$2B30 DB_DATA 1
RANGE $2B30-$2B32 DW_DATA 1
RANGE $2B32-$2B34 DW_DATA 1
RANGE $2B34-$2B36 DW_DATA 1
RANGE $2B36-$2B38 DW_DATA 1
RANGE $2B38-$2B3A DW_DATA 1
RANGE $2B3A-$2B3C DW_DATA 1
RANGE $2B3C-$2B3E DW_DATA 1
RANGE $2B3E-$2B40 DW_DATA 1
RANGE $2B40-$2B42 DW_DATA 1
RANGE $2B42-$2B44 DW_DATA 1
RANGE $2B44-$2B46 DW_DATA 1
RANGE $2B46-$2B48 DW_DATA 1
RANGE $2B48-$2B4A DW_DATA 1
RANGE $2B4A-$2B4C DW_DATA 1
RANGE $2B4C-$2B4E DW_DATA 1
RANGE $2B4E-$2B50 DW_DATA 1
RANGE $2B50-$2B52 DW_DATA 1
RANGE $2B52-$2B54 DW_DATA 1
RANGE $2B54-$2B56 DW_DATA 1
RANGE $2B56-$2B58 DW_DATA 1
RANGE $2B58-$2B5A DW_DATA 1
RANGE $2B5A-$2B5C DW_DATA 1
RANGE $2B5C-$2B5E DW_DATA 1
RANGE $2B5E-$2B60 DW_DATA 1
RANGE $2B60-$2B62 DW_DATA 1
RANGE $2B62-$2B64 DW_DATA 1
RANGE $2B64-$2B66 DW_DATA 1
RANGE $2B66-$2B68 DW_DATA 1
RANGE $2B68-$2B6A DW_DATA 1
RANGE $2B6A-$2B6C DW_DATA 1
RANGE $2B6C-$2B6E DW_DATA 1
RANGE $2B6E-$2B70 DW_DATA 1
RANGE $2B70-$2B72 DW_DATA 1
RANGE $2B72-$2B74 DW_DATA 1
RANGE $2B74-$2B76 DW_DATA 1
RANGE $2B76-$2B78 DW_DATA 1
RANGE $2B78-$2B7A DW_DATA 1
RANGE $2B7A-$2B7C DW_DATA 1
RANGE $2B7C-$2B7E DW_DATA 1
RANGE $2B7E-$2B80 DW_DATA 1
RANGE $2B80-$2B82 DW_DATA 1
RANGE $2B82-$2B84 DW_DATA 1
RANGE $2B84-$2B86 DW_DATA 1
RANGE $2B86-$2B88 DW_DATA 1
RANGE $2B88-$2B8A DW_DATA 1
RANGE $2B8A-$2B8B DB_DATA 1
RANGE $2B8B-$2B8D DW_DATA 1
RANGE $2B8D-$2B8F DW_DATA 1
RANGE $2B8F-$2B91 DW_DATA 1
RANGE $2B91-$2B93 DW_DATA 1
RANGE $2B93-$2B95 DW_DATA 1
RANGE $2B95-$2B97 DW_DATA 1
RANGE $2B97-$2B99 DW_DATA 1
RANGE $2B99-$2B9B DW_DATA 1
RANGE $2B9B-$2B9D DW_DATA 1
RANGE $2B9D-$2B9F DW_DATA 1
RANGE $2B9F-$2BA1 DW_DATA 1
RANGE $2BA1-$2BA3 DW_DATA 1
RANGE $2BA3-$2BA5 DW_DATA 1
RANGE $2BA5-$2BA7 DW_DATA 1
RANGE $2BA7-$2BA9 DW_DATA 1
RANGE $2BA9-$2BAB DW_DATA 1
RANGE $2BAB-$2BAD DW_DATA 1
RANGE $2BAD-$2BAF DW_DATA 1
RANGE $2BAF-$2BB1 DW_DATA 1
RANGE $2BB1-$2BB3 DW_DATA 1
RANGE $2BB3-$2BB5 DW_DATA 1
RANGE $2BB5-$2BB7 DW_DATA 1
RANGE $2BB7-$2BB9 DW_DATA 1
RANGE $2BB9-$2BBB DW_DATA 1
RANGE $2BBB-$2BBD DW_DATA 1
RANGE $2BBD-$2BBF DW_DATA 1
RANGE $2BBF-$2BC1 DW_DATA 1
RANGE $2BC1-$2BC3 DW_DATA 1
RANGE $2BC3-$2BC5 DW_DATA 1
RANGE $2BC5-$2BC7 DW_DATA 1
RANGE $2BC7-$2BC9 DW_DATA 1
RANGE $2BC9-$2BCB DW_DATA 1
RANGE $2BCB-$2BCD DW_DATA 1
RANGE $2BCD-$2BCF DW_DATA 1
RANGE $2BCF-$2BD1 DW_DATA 1
RANGE $2BD1-$2BD3 DW_DATA 1
RANGE $2BD3-$2BD5 DW_DATA 1
RANGE $2BD5-$2BD7 DW_DATA 1
RANGE $2BD7-$2BD9 DW_DATA 1
RANGE $2BD9-$2BDB DW_DATA 1
RANGE $2BDB-$2BDD DW_DATA 1
RANGE $2BDD-$2BDF DW_DATA 1
RANGE $2BDF-$2BE1 DW_DATA 1
RANGE $2BE1-$2BE3 DW_DATA 1
RANGE $2BE3-$2BE5 DW_DATA 1
RANGE $2BE5-$2BE7 DW_DATA 1
RANGE $2BE7-$2BE9 DW_DATA 1
RANGE $2BE9-$2BEB DW_DATA 1
RANGE $2BEB-$2BED DW_DATA 1
RANGE $2BED-$2BEF DW_DATA 1
RANGE $2BEF-$2BF1 DW_DATA 1
RANGE $2BF1-$2BF3 DW_DATA 1
RANGE $2BF3-$2BF5 DW_DATA 1
RANGE $2BF5-$2BF7 DW_DATA 1
RANGE $2BF7-$2BF9 DW_DATA 1
RANGE $2BF9-$2BFB DW_DATA 1
RANGE $2BFB-$2BFD DW_DATA 1
RANGE $2BFD-$2BFF DW_DATA 1
RANGE $2BFF-$2C01 DW_DATA 1
RANGE $2C01-$2C03 DW_DATA 1
RANGE $2C03-$2C05 DW_DATA 1
RANGE $2C05-$2C07 DW_DATA 1
RANGE $2C07-$2C09 DW_DATA 1
RANGE $2C09-$2C0B DW_DATA 1
RANGE $2C0B-$2C0D DW_DATA 1
RANGE $2C0D-$2C0F DW_DATA 1
RANGE $2C0F-$2C11 DW_DATA 1
RANGE $2C11-$2C12 DB_DATA 1
RANGE $2C12-$2C14 DW_DATA 1
RANGE $2C14-$2C16 DW_DATA 1
RANGE $2C16-$2C18 DW_DATA 1
RANGE $2C18-$2C1A DW_DATA 1
RANGE $2C1A-$2C1C DW_DATA 1
RANGE $2C1C-$2C1E DW_DATA 1
RANGE $2C1E-$2C20 DW_DATA 1
RANGE $2C20-$2C22 DW_DATA 1
RANGE $2C22-$2C24 DW_DATA 1
RANGE $2C24-$2C26 DW_DATA 1
RANGE $2C26-$2C28 DW_DATA 1
RANGE $2C28-$2C2A DW_DATA 1
RANGE $2C2A-$2C2C DW_DATA 1
RANGE $2C2C-$2C2E DW_DATA 1
RANGE $2C2E-$2C30 DW_DATA 1
RANGE $2C30-$2C32 DW_DATA 1
RANGE $2C32-$2C34 DW_DATA 1
RANGE $2C34-$2C36 DW_DATA 1
RANGE $2C36-$2C38 DW_DATA 1
RANGE $2C38-$2C3A DW_DATA 1
RANGE $2C3A-$2C3C DW_DATA 1
RANGE $2C3C-$2C3E DW_DATA 1
RANGE $2C3E-$2C40 DW_DATA 1
RANGE $2C40-$2C42 DW_DATA 1
RANGE $2C42-$2C44 DW_DATA 1
RANGE $2C44-$2C46 DW_DATA 1
RANGE $2C46-$2C48 DW_DATA 1
RANGE $2C48-$2C4A DW_DATA 1
RANGE $2C4A-$2C4C DW_DATA 1
RANGE $2C4C-$2C4E DW_DATA 1
RANGE $2C4E-$2C50 DW_DATA 1
RANGE $2C50-$2C52 DW_DATA 1
RANGE $2C52-$2C54 DW_DATA 1
RANGE $2C54-$2C56 DW_DATA 1
RANGE $2C56-$2C58 DW_DATA 1
RANGE $2C58-$2C5A DW_DATA 1
RANGE $2C5A-$2C5C DW_DATA 1
RANGE $2C5C-$2C5E DW_DATA 1
RANGE $2C5E-$2C60 DW_DATA 1
RANGE $2C60-$2C62 DW_DATA 1
RANGE $2C62-$2C64 DW_DATA 1
RANGE $2C64-$2C66 DW_DATA 1
RANGE $2C66-$2C68 DW_DATA 1
RANGE $2C68-$2C6A DW_DATA 1
RANGE $2C6A-$2C6C DW_DATA 1
RANGE $2C6C-$2C6E DW_DATA 1
RANGE $2C6E-$2C70 DW_DATA 1
RANGE $2C70-$2C72 DW_DATA 1
RANGE $2C72-$2C74 DW_DATA 1
RANGE $2C74-$2C76 DW_DATA 1
RANGE $2C76-$2C78 DW_DATA 1
RANGE $2C78-$2C7A DW_DATA 1
RANGE $2C7A-$2C7C DW_DATA 1
RANGE $2C7C-$2C7E DW_DATA 1
RANGE $2C7E-$2C7F DB_DATA 1
RANGE $2C7F-$2C81 DW_DATA 1
RANGE $2C81-$2C83 DW_DATA 1
RANGE $2C83-$2C85 DW_DATA 1
RANGE $2C85-$2C87 DW_DATA 1
RANGE $2C87-$2C89 DW_DATA 1
RANGE $2C89-$2C8B DW_DATA 1
RANGE $2C8B-$2C8D DW_DATA 1
RANGE $2C8D-$2C8F DW_DATA 1
RANGE $2C8F-$2C91 DW_DATA 1
RANGE $2C91-$2C93 DW_DATA 1
RANGE $2C93-$2C95 DW_DATA 1
RANGE $2C95-$2C97 DW_DATA 1
RANGE $2C97-$2C99 DW_DATA 1
RANGE $2C99-$2C9B DW_DATA 1
RANGE $2C9B-$2C9D DW_DATA 1
RANGE $2C9D-$2C9F DW_DATA 1
RANGE $2C9F-$2CA1 DW_DATA 1
RANGE $2CA1-$2CA3 DW_DATA 1
RANGE $2CA3-$2CA5 DW_DATA 1
RANGE $2CA5-$2CA7 DW_DATA 1
RANGE $2CA7-$2CA9 DW_DATA 1
RANGE $2CA9-$2CAB DW_DATA 1
RANGE $2CAB-$2CAD DW_DATA 1
RANGE $2CAD-$2CAF DW_DATA 1
RANGE $2CAF-$2CB1 DW_DATA 1
RANGE $2CB1-$2CB3 DW_DATA 1
RANGE $2CB3-$2CB5 DW_DATA 1
RANGE $2CB5-$2CB7 DW_DATA 1
RANGE $2CB7-$2CB9 DW_DATA 1
RANGE $2CB9-$2CBB DW_DATA 1
RANGE $2CBB-$2CBD DW_DATA 1
RANGE $2CBD-$2CBF DW_DATA 1
RANGE $2CBF-$2CC1 DW_DATA 1
RANGE $2CC1-$2CC3 DW_DATA 1
RANGE $2CC3-$2CC5 DW_DATA 1
RANGE $2CC5-$2CC7 DW_DATA 1
RANGE $2CC7-$2CC9 DW_DATA 1
RANGE $2CC9-$2CCB DW_DATA 1
RANGE $2CCB-$2CCD DW_DATA 1
RANGE $2CCD-$2CCF DW_DATA 1
RANGE $2CCF-$2CD1 DW_DATA 1
RANGE $2CD1-$2CD3 DW_DATA 1
RANGE $2CD3-$2CD5 DW_DATA 1
RANGE $2CD5-$2CD7 DW_DATA 1
RANGE $2CD7-$2CD9 DW_DATA 1
RANGE $2CD9-$2CDB DW_DATA 1
RANGE $2CDB-$2CDD DW_DATA 1
RANGE $2CDD-$2CDF DW_DATA 1
RANGE $2CDF-$2CE1 DW_DATA 1
RANGE $2CE1-$2CE3 DW_DATA 1
RANGE $2CE3-$2CE5 DW_DATA 1
RANGE $2CE5-$2CE7 DW_DATA 1
RANGE $2CE7-$2CE9 DW_DATA 1
RANGE $2CE9-$2CEB DW_DATA 1
RANGE $2CEB-$2CED DW_DATA 1
RANGE $2CED-$2CEF DW_DATA 1
RANGE $2CEF-$2CF1 DW_DATA 1
RANGE $2CF1-$2CF3 DW_DATA 1
RANGE $2CF3-$2CF5 DW_DATA 1
RANGE $2CF5-$2CF7 DW_DATA 1
RANGE $2CF7-$2CF9 DW_DATA 1
RANGE $2CF9-$2CFB DW_DATA 1
RANGE $2CFB-$2CFD DW_DATA 1
RANGE $2CFD-$2CFF DW_DATA 1
RANGE $2CFF-$2D01 DW_DATA 1
RANGE $2D01-$2D03 DW_DATA 1
RANGE $2D03-$2D05 DW_DATA 1
RANGE $2D05-$2D07 DW_DATA 1
RANGE $2D07-$2D09 DW_DATA 1
RANGE $2D09-$2D0B DW_DATA 1
RANGE $2D0B-$2D0D DW_DATA 1
RANGE $2D0D-$2D0F DW_DATA 1
RANGE $2D0F-$2D11 DW_DATA 1
RANGE $2D11-$2D13 DW_DATA 1
RANGE $2D13-$2D15 DW_DATA 1
RANGE $2D15-$2D17 DW_DATA 1
RANGE $2D17-$2D19 DW_DATA 1
RANGE $2D19-$2D1B DW_DATA 1
RANGE $2D1B-$2D1D DW_DATA 1
RANGE $2D1D-$2D1F DW_DATA 1
RANGE $2D1F-$2D21 DW_DATA 1
RANGE $2D21-$2D23 DW_DATA 1
RANGE $2D23-$2D25 DW_DATA 1
RANGE $2D25-$2D27 DW_DATA 1
RANGE $2D27-$2D29 DW_DATA 1
RANGE $2D29-$2D2B DW_DATA 1
RANGE $2D2B-$2D2D DW_DATA 1
RANGE $2D2D-$2D2F DW_DATA 1
RANGE $2D2F-$2D31 DW_DATA 1
RANGE $2D31-$2D33 DW_DATA 1
RANGE $2D33-$2D35 DW_DATA 1
RANGE $2D35-$2D37 DW_DATA 1
RANGE $2D37-$2D39 DW_DATA 1
RANGE $2D39-$2D3B DW_DATA 1
RANGE $2D3B-$2D3D DW_DATA 1
RANGE $2D3D-$2D3F DW_DATA 1
RANGE $2D3F-$2D41 DW_DATA 1
RANGE $2D41-$2D43 DW_DATA 1
RANGE $2D43-$2D45 DW_DATA 1
RANGE $2D45-$2D47 DW_DATA 1
RANGE $2D47-$2D49 DW_DATA 1
RANGE $2D49-$2D4B DW_DATA 1
RANGE $2D4B-$2D4D DW_DATA 1
RANGE $2D4D-$2D4F DW_DATA 1
RANGE $2D4F-$2D51 DW_DATA 1
RANGE $2D51-$2D53 DW_DATA 1
RANGE $2D53-$2D55 DW_DATA 1
RANGE $2D55-$2D57 DW_DATA 1
RANGE $2D57-$2D59 DW_DATA 1
RANGE $2D59-$2D5B DW_DATA 1
RANGE $2D5B-$2D5D DW_DATA 1
RANGE $2D5D-$2D5F DW_DATA 1
RANGE $2D5F-$2D61 DW_DATA 1
RANGE $2D61-$2D63 DW_DATA 1
RANGE $2D63-$2D65 DW_DATA 1
RANGE $2D65-$2D67 DW_DATA 1
RANGE $2D67-$2D69 DW_DATA 1
RANGE $2D69-$2D6B DW_DATA 1
RANGE $2D6B-$2D6D DW_DATA 1
RANGE $2D6D-$2D6F DW_DATA 1
RANGE $2D6F-$2D71 DW_DATA 1
RANGE $2D71-$2D73 DW_DATA 1
RANGE $2D73-$2D75 DW_DATA 1
RANGE $2D75-$2D77 DW_DATA 1
RANGE $2D77-$2D79 DW_DATA 1
RANGE $2D79-$2D7B DW_DATA 1
RANGE $2D7B-$2D7D DW_DATA 1
RANGE $2D7D-$2D7F DW_DATA 1
RANGE $2D7F-$2D81 DW_DATA 1
RANGE $2D81-$2D83 DW_DATA 1
RANGE $2D83-$2D85 DW_DATA 1
RANGE $2D85-$2D87 DW_DATA 1
RANGE $2D87-$2D89 DW_DATA 1
RANGE $2D89-$2D8B DW_DATA 1
RANGE $2D8B-$2D8D DW_DATA 1
RANGE $2D8D-$2D8F DW_DATA 1
RANGE $2D8F-$2D91 DW_DATA 1
RANGE $2D91-$2D93 DW_DATA 1
RANGE $2D93-$2D95 DW_DATA 1
RANGE $2D95-$2D97 DW_DATA 1
RANGE $2D97-$2D99 DW_DATA 1
RANGE $2D99-$2D9B DW_DATA 1
RANGE $2D9B-$2D9D DW_DATA 1
RANGE $2D9D-$2D9F DW_DATA 1
RANGE $2D9F-$2DA1 DW_DATA 1
RANGE $2DA1-$2DA3 DW_DATA 1
RANGE $2DA3-$2DA5 DW_DATA 1
RANGE $2DA5-$2DA7 DW_DATA 1
RANGE $2DA7-$2DA9 DW_DATA 1
RANGE $2DA9-$2DAB DW_DATA 1
RANGE $2DAB-$2DAD DW_DATA 1
RANGE $2DAD-$2DAF DW_DATA 1
RANGE $2DAF-$2DB1 DW_DATA 1
RANGE $2DB1-$2DB3 DW_DATA 1
RANGE $2DB3-$2DB5 DW_DATA 1
RANGE $2DB5-$2DB7 DW_DATA 1
RANGE $2DB7-$2DB9 DW_DATA 1
RANGE $2DB9-$2DBB DW_DATA 1
RANGE $2DBB-$2DBD DW_DATA 1
RANGE $2DBD-$2DBF DW_DATA 1
RANGE $2DBF-$2DC1 DW_DATA 1
RANGE $2DC1-$2DC3 DW_DATA 1
RANGE $2DC3-$2DC5 DW_DATA 1
RANGE $2DC5-$2DC7 DW_DATA 1
RANGE $2DC7-$2DC9 DW_DATA 1
RANGE $2DC9-$2DCB DW_DATA 1
RANGE $2DCB-$2DCD DW_DATA 1
RANGE $2DCD-$2DCF DW_DATA 1
RANGE $2DCF-$2DD1 DW_DATA 1
RANGE $2DD1-$2DD3 DW_DATA 1
RANGE $2DD3-$2DD5 DW_DATA 1
RANGE $2DD5-$2DD7 DW_DATA 1
RANGE $2DD7-$2DD9 DW_DATA 1
RANGE $2DD9-$2DDA DB_DATA 1
RANGE $2DDA-$2DDC DB_DATA 2
RANGE $2DDC-$2DDE DB_DATA 2
RANGE $2DDE-$2DE0 DB_DATA 2
RANGE $2DE0-$2DE2 DB_DATA 2
RANGE $2DE2-$2DE4 DB_DATA 2
RANGE $2DE4-$2DE6 DB_DATA 2
RANGE $2DE6-$2DE8 DB_DATA 2
RANGE $2DE8-$2DEA DB_DATA 2
RANGE $2DEA-$2DEC DB_DATA 2
RANGE $2DEC-$2DEE DB_DATA 2
RANGE $2DEE-$2DF0 DB_DATA 2
RANGE $2DF0-$2DF2 DB_DATA 2
RANGE $2DF2-$2DF3 DB_DATA 1
RANGE $2DF3-$2DF5 DB_DATA 2
RANGE $2DF5-$2DF7 DB_DATA 2
RANGE $2DF7-$2DF9 DB_DATA 2
RANGE $2DF9-$2DFB DB_DATA 2
RANGE $2DFB-$2DFD DB_DATA 2
RANGE $2DFD-$2DFF DB_DATA 2
RANGE $2DFF-$2E01 DB_DATA 2
RANGE $2E01-$2E03 DB_DATA 2
RANGE $2E03-$2E04 DB_DATA 1
RANGE $2E04-$2E06 DB_DATA 2
RANGE $2E06-$2E08 DB_DATA 2
RANGE $2E08-$2E0A DB_DATA 2
RANGE $2E0A-$2E0C DB_DATA 2
RANGE $2E0C-$2E0E DB_DATA 2
RANGE $2E0E-$2E10 DB_DATA 2
RANGE $2E10-$2E12 DB_DATA 2
RANGE $2E12-$2E14 DB_DATA 2
RANGE $2E14-$2E16 DB_DATA 2
RANGE $2E16-$2E18 DB_DATA 2
RANGE $2E18-$2E19 DB_DATA 1
RANGE $2E19-$2E1B DB_DATA 2
RANGE $2E1B-$2E1D DB_DATA 2
RANGE $2E1D-$2E1F DB_DATA 2
RANGE $2E1F-$2E21 DB_DATA 2
RANGE $2E21-$2E23 DB_DATA 2
RANGE $2E23-$2E25 DB_DATA 2
RANGE $2E25-$2E27 DB_DATA 2
RANGE $2E27-$2E29 DB_DATA 2
RANGE $2E29-$2E2B DB_DATA 2
RANGE $2E2B-$2E2D DB_DATA 2
RANGE $2E2D-$2E2E DB_DATA 1
RANGE $2E2E-$2E30 DB_DATA 2
RANGE $2E30-$2E32 DB_DATA 2
RANGE $2E32-$2E34 DB_DATA 2
RANGE $2E34-$2E36 DB_DATA 2
RANGE $2E36-$2E38 DB_DATA 2
RANGE $2E38-$2E3A DB_DATA 2
RANGE $2E3A-$2E3C DB_DATA 2
RANGE $2E3C-$2E3E DB_DATA 2
RANGE $2E3E-$2E40 DB_DATA 2
RANGE $2E40-$2E41 DB_DATA 1
RANGE $2E41-$2E43 DB_DATA 2
RANGE $2E43-$2E45 DB_DATA 2
RANGE $2E45-$2E47 DB_DATA 2
RANGE $2E47-$2E49 DB_DATA 2
RANGE $2E49-$2E4B DB_DATA 2
RANGE $2E4B-$2E4D DB_DATA 2
RANGE $2E4D-$2E4F DB_DATA 2
RANGE $2E4F-$2E51 DB_DATA 2
RANGE $2E51-$2E53 DB_DATA 2
RANGE $2E53-$2E55 DB_DATA 2
RANGE $2E55-$2E56 DB_DATA 1
RANGE $2E56-$2E58 DB_DATA 2
RANGE $2E58-$2E5A DW_DATA 1
RANGE $2E5A-$2E5C DW_DATA 1
RANGE $2E5C-$2E5D DB_DATA 1
RANGE $2E5D-$2E5E DB_DATA 1
RANGE $2E5E-$2E60 DW_DATA 1
RANGE $2E60-$2E61 DB_DATA 1
RANGE $2E61-$2E63 DW_DATA 1
RANGE $2E63-$2E65 DW_DATA 1
RANGE $2E65-$2E66 DB_DATA 1
RANGE $2E66-$2E67 DB_DATA 1
RANGE $2E67-$2E69 DW_DATA 1
RANGE $2E69-$2E6A DB_DATA 1
RANGE $2E6A-$2E6C DW_DATA 1
RANGE $2E6C-$2E6E DW_DATA 1
RANGE $2E6E-$2E6F DB_DATA 1
RANGE $2E6F-$2E70 DB_DATA 1
RANGE $2E70-$2E72 DW_DATA 1
RANGE $2E72-$2E73 DB_DATA 1
RANGE $2E73-$2E75 DW_DATA 1
RANGE $2E75-$2E77 DW_DATA 1
RANGE $2E77-$2E78 DB_DATA 1
RANGE $2E78-$2E79 DB_DATA 1
RANGE $2E79-$2E7B DW_DATA 1
RANGE $2E7B-$2E7C DB_DATA 1
RANGE $2E7C-$2E7E DW_DATA 1
RANGE $2E7E-$2E80 DW_DATA 1
RANGE $2E80-$2E81 DB_DATA 1
RANGE $2E81-$2E82 DB_DATA 1
RANGE $2E82-$2E84 DW_DATA 1
RANGE $2E84-$2E85 DB_DATA 1
RANGE $2E85-$2E87 DW_DATA 1
RANGE $2E87-$2E89 DW_DATA 1
RANGE $2E89-$2E8A DB_DATA 1
RANGE $2E8A-$2E8B DB_DATA 1
RANGE $2E8B-$2E8D DW_DATA 1
RANGE $2E8D-$2E8E DB_DATA 1
RANGE $2E8E-$2E8F DB_DATA 1
RANGE $2E8F-$2E91 DB_DATA 2
RANGE $2E91-$2E93 DB_DATA 2
RANGE $2E93-$2E95 DB_DATA 2
RANGE $2E95-$2E97 DB_DATA 2
RANGE $2E97-$2E99 DB_DATA 2
RANGE $2E99-$2E9B DB_DATA 2
RANGE $2E9B-$2E9D DB_DATA 2
RANGE $2E9D-$2E9F DB_DATA 2
RANGE $2E9F-$2EA1 DB_DATA 2
RANGE $2EA1-$2EA3 DB_DATA 2
RANGE $2EA3-$2EA5 DB_DATA 2
RANGE $2EA5-$2EA7 DB_DATA 2
RANGE $2EA7-$2EA9 DB_DATA 2
RANGE $2EA9-$2EAB DB_DATA 2
RANGE $2EAB-$2EAD DB_DATA 2
RANGE $2EAD-$2EAF DB_DATA 2
RANGE $2EAF-$2EB1 DB_DATA 2
RANGE $2EB1-$2EB3 DB_DATA 2
RANGE $2EB3-$2EB5 DB_DATA 2
RANGE $2EB5-$2EB7 DB_DATA 2
RANGE $2EB7-$2EB9 DB_DATA 2
RANGE $2EB9-$2EBA DB_DATA 1
RANGE $2EBA-$2EBB DB_DATA 1
RANGE $2EBB-$2EBC DB_DATA 1
RANGE $2EBC-$2EBD DB_DATA 1
RANGE $2EBD-$2EBE DB_DATA 1
RANGE $2EBE-$2EBF DB_DATA 1
RANGE $2EBF-$2EC0 DB_DATA 1
RANGE $2EC0-$2EC1 DB_DATA 1
RANGE $2EC1-$2EC3 DW_DATA 1
RANGE $2EC3-$2EC5 DW_DATA 1
RANGE $2EC5-$2EC7 DW_DATA 1
RANGE $2EC7-$2EC9 DW_DATA 1
RANGE $2EC9-$2ECB DW_DATA 1
RANGE $2ECB-$2ECD DW_DATA 1
RANGE $2ECD-$2ECF DW_DATA 1
RANGE $2ECF-$2ED1 DW_DATA 1
RANGE $2ED1-$2ED3 DW_DATA 1
RANGE $2ED3-$2ED5 DB_DATA 2
RANGE $2ED5-$2ED7 DB_DATA 2
RANGE $2ED7-$2ED9 DB_DATA 2
RANGE $2ED9-$2EDB DB_DATA 2
RANGE $2EDB-$2EDD DB_DATA 2
RANGE $2EDD-$2EDF DB_DATA 2
RANGE $2EDF-$2EE1 DB_DATA 2
RANGE $2EE1-$2EE3 DB_DATA 2
RANGE $2EE3-$2EE5 DB_DATA 2
RANGE $2EE5-$2EE7 DB_DATA 2
RANGE $2EE7-$2EE9 DB_DATA 2
RANGE $2EE9-$2EEB DB_DATA 2
RANGE $2EEB-$2EED DB_DATA 2
RANGE $2EED-$2EEF DB_DATA 2
RANGE $2EEF-$2EF1 DB_DATA 2
RANGE $2EF1-$2EF3 DB_DATA 2
RANGE $2EF3-$2EF5 DB_DATA 2
RANGE $2EF5-$2EF7 DB_DATA 2
RANGE $2EF7-$2EF9 DB_DATA 2
RANGE $2EF9-$2EFB DW_DATA 1
RANGE $2EFB-$2EFD DB_DATA 2
RANGE $2EFD-$2EFF DB_DATA 2
RANGE $2EFF-$2F01 DB_DATA 2
RANGE $2F01-$2F03 DB_DATA 2
RANGE $2F03-$2F05 DB_DATA 2
RANGE $2F05-$2F07 DB_DATA 2
RANGE $2F07-$2F09 DB_DATA 2
RANGE $2F09-$2F0B DB_DATA 2
RANGE $2F0B-$2F0D DB_DATA 2
RANGE $2F0D-$2F0F DB_DATA 2
RANGE $2F0F-$2F11 DB_DATA 2
RANGE $2F11-$2F13 DB_DATA 2
RANGE $2F13-$2F15 DB_DATA 2
RANGE $2F15-$2F17 DB_DATA 2
RANGE $2F17-$2F19 DB_DATA 2
RANGE $2F19-$2F1B DB_DATA 2
RANGE $2F1B-$2F1D DB_DATA 2
RANGE $2F1D-$2F1F DB_DATA 2
RANGE $2F1F-$2F21 DB_DATA 2
RANGE $2F21-$2F23 DW_DATA 1
RANGE $2F23-$2F25 DB_DATA 2
RANGE $2F25-$2F27 DB_DATA 2
RANGE $2F27-$2F29 DB_DATA 2
RANGE $2F29-$2F2B DB_DATA 2
RANGE $2F2B-$2F2D DB_DATA 2
RANGE $2F2D-$2F2F DB_DATA 2
RANGE $2F2F-$2F31 DB_DATA 2
RANGE $2F31-$2F33 DB_DATA 2
RANGE $2F33-$2F35 DB_DATA 2
RANGE $2F35-$2F37 DB_DATA 2
RANGE $2F37-$2F39 DB_DATA 2
RANGE $2F39-$2F3B DB_DATA 2
RANGE $2F3B-$2F3D DB_DATA 2
RANGE $2F3D-$2F3F DB_DATA 2
RANGE $2F3F-$2F41 DB_DATA 2
RANGE $2F41-$2F43 DB_DATA 2
RANGE $2F43-$2F45 DB_DATA 2
RANGE $2F45-$2F47 DB_DATA 2
RANGE $2F47-$2F49 DB_DATA 2
RANGE $2F49-$2F4B DW_DATA 1
RANGE $2F4B-$2F4D DB_DATA 2
RANGE $2F4D-$2F4F DB_DATA 2
RANGE $2F4F-$2F51 DB_DATA 2
RANGE $2F51-$2F53 DB_DATA 2
RANGE $2F53-$2F55 DB_DATA 2
RANGE $2F55-$2F57 DB_DATA 2
RANGE $2F57-$2F59 DB_DATA 2
RANGE $2F59-$2F5B DB_DATA 2
RANGE $2F5B-$2F5D DB_DATA 2
RANGE $2F5D-$2F5F DB_DATA 2
RANGE $2F5F-$2F61 DB_DATA 2
RANGE $2F61-$2F63 DB_DATA 2
RANGE $2F63-$2F65 DB_DATA 2
RANGE $2F65-$2F67 DB_DATA 2
RANGE $2F67-$2F69 DB_DATA 2
RANGE $2F69-$2F6B DB_DATA 2
RANGE $2F6B-$2F6D DB_DATA 2
RANGE $2F6D-$2F6F DB_DATA 2
RANGE $2F6F-$2F71 DB_DATA 2
RANGE $2F71-$2F73 DW_DATA 1
RANGE $2F73-$2F75 DB_DATA 2
RANGE $2F75-$2F77 DB_DATA 2
RANGE $2F77-$2F79 DB_DATA 2
RANGE $2F79-$2F7B DB_DATA 2
RANGE $2F7B-$2F7D DB_DATA 2
RANGE $2F7D-$2F7F DB_DATA 2
RANGE $2F7F-$2F81 DB_DATA 2
RANGE $2F81-$2F83 DB_DATA 2
RANGE $2F83-$2F85 DB_DATA 2
RANGE $2F85-$2F87 DB_DATA 2
RANGE $2F87-$2F89 DB_DATA 2
RANGE $2F89-$2F8B DB_DATA 2
RANGE $2F8B-$2F8D DB_DATA 2
RANGE $2F8D-$2F8F DB_DATA 2
RANGE $2F8F-$2F91 DB_DATA 2
RANGE $2F91-$2F93 DB_DATA 2
RANGE $2F93-$2F95 DB_DATA 2
RANGE $2F95-$2F97 DB_DATA 2
RANGE $2F97-$2F99 DB_DATA 2
RANGE $2F99-$2F9B DW_DATA 1
RANGE $2F9B-$2F9D DB_DATA 2
RANGE $2F9D-$2F9F DB_DATA 2
RANGE $2F9F-$2FA1 DB_DATA 2
RANGE $2FA1-$2FA3 DB_DATA 2
RANGE $2FA3-$2FA5 DB_DATA 2
RANGE $2FA5-$2FA7 DB_DATA 2
RANGE $2FA7-$2FA9 DB_DATA 2
RANGE $2FA9-$2FAB DB_DATA 2
RANGE $2FAB-$2FAD DB_DATA 2
RANGE $2FAD-$2FAF DB_DATA 2
RANGE $2FAF-$2FB1 DB_DATA 2
RANGE $2FB1-$2FB3 DB_DATA 2
RANGE $2FB3-$2FB5 DB_DATA 2
RANGE $2FB5-$2FB7 DB_DATA 2
RANGE $2FB7-$2FB9 DB_DATA 2
RANGE $2FB9-$2FBB DB_DATA 2
RANGE $2FBB-$2FBD DB_DATA 2
RANGE $2FBD-$2FBF DB_DATA 2
RANGE $2FBF-$2FC1 DB_DATA 2
RANGE $2FC1-$2FC3 DW_DATA 1
RANGE $2FC3-$2FC5 DW_DATA 1
RANGE $2FC5-$2FC7 DW_DATA 1
RANGE $2FC7-$2FC9 DW_DATA 1
RANGE $2FC9-$2FCB DW_DATA 1
RANGE $2FCB-$2FCD DW_DATA 1
RANGE $2FCD-$2FCF DW_DATA 1
RANGE $2FCF-$2FD1 DW_DATA 1
RANGE $2FD1-$2FD3 DW_DATA 1
RANGE $2FD3-$2FD5 DB_DATA 2
RANGE $2FD5-$2FD7 DB_DATA 2
RANGE $2FD7-$2FD9 DB_DATA 2
RANGE $2FD9-$2FDB DB_DATA 2
RANGE $2FDB-$2FDD DB_DATA 2
RANGE $2FDD-$2FDF DB_DATA 2
RANGE $2FDF-$2FE1 DB_DATA 2
RANGE $2FE1-$2FE3 DB_DATA 2
RANGE $2FE3-$2FE5 DB_DATA 2
RANGE $2FE5-$2FE7 DB_DATA 2
RANGE $2FE7-$2FE9 DB_DATA 2
RANGE $2FE9-$2FEB DB_DATA 2
RANGE $2FEB-$2FED DB_DATA 2
RANGE $2FED-$2FEF DB_DATA 2
RANGE $2FEF-$2FF1 DB_DATA 2
RANGE $2FF1-$2FF3 DB_DATA 2
RANGE $2FF3-$2FF5 DB_DATA 2
RANGE $2FF5-$2FF7 DB_DATA 2
RANGE $2FF7-$2FF9 DB_DATA 2
RANGE $2FF9-$2FFB DW_DATA 1
RANGE $2FFB-$2FFD DB_DATA 2
RANGE $2FFD-$2FFF DB_DATA 2
RANGE $2FFF-$3001 DB_DATA 2
RANGE $3001-$3003 DB_DATA 2
RANGE $3003-$3005 DB_DATA 2
RANGE $3005-$3007 DB_DATA 2
RANGE $3007-$3009 DB_DATA 2
RANGE $3009-$300B DB_DATA 2
RANGE $300B-$300D DB_DATA 2
RANGE $300D-$300F DB_DATA 2
RANGE $300F-$3011 DB_DATA 2
RANGE $3011-$3013 DB_DATA 2
RANGE $3013-$3015 DB_DATA 2
RANGE $3015-$3017 DB_DATA 2
RANGE $3017-$3019 DB_DATA 2
RANGE $3019-$301B DB_DATA 2
RANGE $301B-$301D DB_DATA 2
RANGE $301D-$301F DB_DATA 2
RANGE $301F-$3021 DB_DATA 2
RANGE $3021-$3023 DW_DATA 1
RANGE $3023-$3025 DB_DATA 2
RANGE $3025-$3027 DB_DATA 2
RANGE $3027-$3029 DB_DATA 2
RANGE $3029-$302B DB_DATA 2
RANGE $302B-$302D DB_DATA 2
RANGE $302D-$302F DB_DATA 2
RANGE $302F-$3031 DB_DATA 2
RANGE $3031-$3033 DB_DATA 2
RANGE $3033-$3035 DB_DATA 2
RANGE $3035-$3037 DB_DATA 2
RANGE $3037-$3039 DB_DATA 2
RANGE $3039-$303B DB_DATA 2
RANGE $303B-$303D DB_DATA 2
RANGE $303D-$303F DB_DATA 2
RANGE $303F-$3041 DB_DATA 2
RANGE $3041-$3043 DB_DATA 2
RANGE $3043-$3045 DB_DATA 2
RANGE $3045-$3047 DB_DATA 2
RANGE $3047-$3049 DB_DATA 2
RANGE $3049-$304B DW_DATA 1
RANGE $304B-$304D DB_DATA 2
RANGE $304D-$304F DB_DATA 2
RANGE $304F-$3051 DB_DATA 2
RANGE $3051-$3053 DB_DATA 2
RANGE $3053-$3055 DB_DATA 2
RANGE $3055-$3057 DB_DATA 2
RANGE $3057-$3059 DB_DATA 2
RANGE $3059-$305B DB_DATA 2
RANGE $305B-$305D DB_DATA 2
RANGE $305D-$305F DB_DATA 2
RANGE $305F-$3061 DB_DATA 2
RANGE $3061-$3063 DB_DATA 2
RANGE $3063-$3065 DB_DATA 2
RANGE $3065-$3067 DB_DATA 2
RANGE $3067-$3069 DB_DATA 2
RANGE $3069-$306B DB_DATA 2
RANGE $306B-$306D DB_DATA 2
RANGE $306D-$306F DB_DATA 2
RANGE $306F-$3071 DB_DATA 2
RANGE $3071-$3073 DW_DATA 1
RANGE $3073-$3075 DB_DATA 2
RANGE $3075-$3077 DB_DATA 2
RANGE $3077-$3079 DB_DATA 2
RANGE $3079-$307B DB_DATA 2
RANGE $307B-$307D DB_DATA 2
RANGE $307D-$307F DB_DATA 2
RANGE $307F-$3081 DB_DATA 2
RANGE $3081-$3083 DB_DATA 2
RANGE $3083-$3085 DB_DATA 2
RANGE $3085-$3087 DB_DATA 2
RANGE $3087-$3089 DB_DATA 2
RANGE $3089-$308B DB_DATA 2
RANGE $308B-$308D DB_DATA 2
RANGE $308D-$308F DB_DATA 2
RANGE $308F-$3091 DB_DATA 2
RANGE $3091-$3093 DB_DATA 2
RANGE $3093-$3095 DB_DATA 2
RANGE $3095-$3097 DB_DATA 2
RANGE $3097-$3099 DB_DATA 2
RANGE $3099-$309B DW_DATA 1
RANGE $309B-$309D DB_DATA 2
RANGE $309D-$309F DB_DATA 2
RANGE $309F-$30A1 DB_DATA 2
RANGE $30A1-$30A3 DB_DATA 2
RANGE $30A3-$30A5 DB_DATA 2
RANGE $30A5-$30A7 DB_DATA 2
RANGE $30A7-$30A9 DB_DATA 2
RANGE $30A9-$30AB DB_DATA 2
RANGE $30AB-$30AD DB_DATA 2
RANGE $30AD-$30AF DB_DATA 2
RANGE $30AF-$30B1 DB_DATA 2
RANGE $30B1-$30B3 DB_DATA 2
RANGE $30B3-$30B5 DB_DATA 2
RANGE $30B5-$30B7 DB_DATA 2
RANGE $30B7-$30B9 DB_DATA 2
RANGE $30B9-$30BB DB_DATA 2
RANGE $30BB-$30BD DB_DATA 2
RANGE $30BD-$30BF DB_DATA 2
RANGE $30BF-$30C1 DB_DATA 2
RANGE $30C1-$30C3 DW_DATA 1
RANGE $30C3-$30C5 DW_DATA 1
RANGE $30C5-$30C7 DW_DATA 1
RANGE $30C7-$30C9 DW_DATA 1
RANGE $30C9-$30CB DW_DATA 1
RANGE $30CB-$30CD DW_DATA 1
RANGE $30CD-$30CF DW_DATA 1
RANGE $30CF-$30D1 DW_DATA 1
RANGE $30D1-$30D3 DW_DATA 1
RANGE $30D3-$30D5 DB_DATA 2
RANGE $30D5-$30D7 DB_DATA 2
RANGE $30D7-$30D9 DB_DATA 2
RANGE $30D9-$30DB DB_DATA 2
RANGE $30DB-$30DD DB_DATA 2
RANGE $30DD-$30DF DB_DATA 2
RANGE $30DF-$30E1 DB_DATA 2
RANGE $30E1-$30E3 DB_DATA 2
RANGE $30E3-$30E5 DB_DATA 2
RANGE $30E5-$30E7 DB_DATA 2
RANGE $30E7-$30E9 DB_DATA 2
RANGE $30E9-$30EB DB_DATA 2
RANGE $30EB-$30ED DB_DATA 2
RANGE $30ED-$30EF DB_DATA 2
RANGE $30EF-$30F1 DB_DATA 2
RANGE $30F1-$30F3 DB_DATA 2
RANGE $30F3-$30F5 DB_DATA 2
RANGE $30F5-$30F7 DB_DATA 2
RANGE $30F7-$30F9 DB_DATA 2
RANGE $30F9-$30FB DW_DATA 1
RANGE $30FB-$30FD DB_DATA 2
RANGE $30FD-$30FF DB_DATA 2
RANGE $30FF-$3101 DB_DATA 2
RANGE $3101-$3103 DB_DATA 2
RANGE $3103-$3105 DB_DATA 2
RANGE $3105-$3107 DB_DATA 2
RANGE $3107-$3109 DB_DATA 2
RANGE $3109-$310B DB_DATA 2
RANGE $310B-$310D DB_DATA 2
RANGE $310D-$310F DB_DATA 2
RANGE $310F-$3111 DB_DATA 2
RANGE $3111-$3113 DB_DATA 2
RANGE $3113-$3115 DB_DATA 2
RANGE $3115-$3117 DB_DATA 2
RANGE $3117-$3119 DB_DATA 2
RANGE $3119-$311B DB_DATA 2
RANGE $311B-$311D DB_DATA 2
RANGE $311D-$311F DB_DATA 2
RANGE $311F-$3121 DB_DATA 2
RANGE $3121-$3123 DW_DATA 1
RANGE $3123-$3125 DB_DATA 2
RANGE $3125-$3127 DB_DATA 2
RANGE $3127-$3129 DB_DATA 2
RANGE $3129-$312B DB_DATA 2
RANGE $312B-$312D DB_DATA 2
RANGE $312D-$312F DB_DATA 2
RANGE $312F-$3131 DB_DATA 2
RANGE $3131-$3133 DB_DATA 2
RANGE $3133-$3135 DB_DATA 2
RANGE $3135-$3137 DB_DATA 2
RANGE $3137-$3139 DB_DATA 2
RANGE $3139-$313B DB_DATA 2
RANGE $313B-$313D DB_DATA 2
RANGE $313D-$313F DB_DATA 2
RANGE $313F-$3141 DB_DATA 2
RANGE $3141-$3143 DB_DATA 2
RANGE $3143-$3145 DB_DATA 2
RANGE $3145-$3147 DB_DATA 2
RANGE $3147-$3149 DB_DATA 2
RANGE $3149-$314B DW_DATA 1
RANGE $314B-$314D DB_DATA 2
RANGE $314D-$314F DB_DATA 2
RANGE $314F-$3151 DB_DATA 2
RANGE $3151-$3153 DB_DATA 2
RANGE $3153-$3155 DB_DATA 2
RANGE $3155-$3157 DB_DATA 2
RANGE $3157-$3159 DB_DATA 2
RANGE $3159-$315B DB_DATA 2
RANGE $315B-$315D DB_DATA 2
RANGE $315D-$315F DB_DATA 2
RANGE $315F-$3161 DB_DATA 2
RANGE $3161-$3163 DB_DATA 2
RANGE $3163-$3165 DB_DATA 2
RANGE $3165-$3167 DB_DATA 2
RANGE $3167-$3169 DB_DATA 2
RANGE $3169-$316B DB_DATA 2
RANGE $316B-$316D DB_DATA 2
RANGE $316D-$316F DB_DATA 2
RANGE $316F-$3171 DB_DATA 2
RANGE $3171-$3173 DW_DATA 1
RANGE $3173-$3175 DB_DATA 2
RANGE $3175-$3177 DB_DATA 2
RANGE $3177-$3179 DB_DATA 2
RANGE $3179-$317B DB_DATA 2
RANGE $317B-$317D DB_DATA 2
RANGE $317D-$317F DB_DATA 2
RANGE $317F-$3181 DB_DATA 2
RANGE $3181-$3183 DB_DATA 2
RANGE $3183-$3185 DB_DATA 2
RANGE $3185-$3187 DB_DATA 2
RANGE $3187-$3189 DB_DATA 2
RANGE $3189-$318B DB_DATA 2
RANGE $318B-$318D DB_DATA 2
RANGE $318D-$318F DB_DATA 2
RANGE $318F-$3191 DB_DATA 2
RANGE $3191-$3193 DB_DATA 2
RANGE $3193-$3195 DB_DATA 2
RANGE $3195-$3197 DB_DATA 2
RANGE $3197-$3199 DB_DATA 2
RANGE $3199-$319B DW_DATA 1
RANGE $319B-$319D DB_DATA 2
RANGE $319D-$319F DB_DATA 2
RANGE $319F-$31A1 DB_DATA 2
RANGE $31A1-$31A3 DB_DATA 2
RANGE $31A3-$31A5 DB_DATA 2
RANGE $31A5-$31A7 DB_DATA 2
RANGE $31A7-$31A9 DB_DATA 2
RANGE $31A9-$31AB DB_DATA 2
RANGE $31AB-$31AD DB_DATA 2
RANGE $31AD-$31AF DB_DATA 2
RANGE $31AF-$31B1 DB_DATA 2
RANGE $31B1-$31B3 DB_DATA 2
RANGE $31B3-$31B5 DB_DATA 2
RANGE $31B5-$31B7 DB_DATA 2
RANGE $31B7-$31B9 DB_DATA 2
RANGE $31B9-$31BB DB_DATA 2
RANGE $31BB-$31BD DB_DATA 2
RANGE $31BD-$31BF DB_DATA 2
RANGE $31BF-$31C1 DB_DATA 2
RANGE $31C1-$31C3 DW_DATA 1
RANGE $31C3-$31C5 DW_DATA 1
RANGE $31C5-$31C7 DW_DATA 1
RANGE $31C7-$31C9 DW_DATA 1
RANGE $31C9-$31CB DW_DATA 1
RANGE $31CB-$31CD DW_DATA 1
RANGE $31CD-$31CF DW_DATA 1
RANGE $31CF-$31D1 DW_DATA 1
RANGE $31D1-$31D3 DW_DATA 1
RANGE $31D3-$31D5 DB_DATA 2
RANGE $31D5-$31D7 DB_DATA 2
RANGE $31D7-$31D9 DB_DATA 2
RANGE $31D9-$31DB DB_DATA 2
RANGE $31DB-$31DD DB_DATA 2
RANGE $31DD-$31DF DB_DATA 2
RANGE $31DF-$31E1 DB_DATA 2
RANGE $31E1-$31E3 DB_DATA 2
RANGE $31E3-$31E5 DB_DATA 2
RANGE $31E5-$31E7 DB_DATA 2
RANGE $31E7-$31E9 DB_DATA 2
RANGE $31E9-$31EB DB_DATA 2
RANGE $31EB-$31ED DB_DATA 2
RANGE $31ED-$31EF DB_DATA 2
RANGE $31EF-$31F1 DB_DATA 2
RANGE $31F1-$31F3 DB_DATA 2
RANGE $31F3-$31F5 DB_DATA 2
RANGE $31F5-$31F7 DB_DATA 2
RANGE $31F7-$31F9 DB_DATA 2
RANGE $31F9-$31FB DW_DATA 1
RANGE $31FB-$31FD DB_DATA 2
RANGE $31FD-$31FF DB_DATA 2
RANGE $31FF-$3201 DB_DATA 2
RANGE $3201-$3203 DB_DATA 2
RANGE $3203-$3205 DB_DATA 2
RANGE $3205-$3207 DB_DATA 2
RANGE $3207-$3209 DB_DATA 2
RANGE $3209-$320B DB_DATA 2
RANGE $320B-$320D DB_DATA 2
RANGE $320D-$320F DB_DATA 2
RANGE $320F-$3211 DB_DATA 2
RANGE $3211-$3213 DB_DATA 2
RANGE $3213-$3215 DB_DATA 2
RANGE $3215-$3217 DB_DATA 2
RANGE $3217-$3219 DB_DATA 2
RANGE $3219-$321B DB_DATA 2
RANGE $321B-$321D DB_DATA 2
RANGE $321D-$321F DB_DATA 2
RANGE $321F-$3221 DB_DATA 2
RANGE $3221-$3223 DW_DATA 1
RANGE $3223-$3225 DB_DATA 2
RANGE $3225-$3227 DB_DATA 2
RANGE $3227-$3229 DB_DATA 2
RANGE $3229-$322B DB_DATA 2
RANGE $322B-$322D DB_DATA 2
RANGE $322D-$322F DB_DATA 2
RANGE $322F-$3231 DB_DATA 2
RANGE $3231-$3233 DB_DATA 2
RANGE $3233-$3235 DB_DATA 2
RANGE $3235-$3237 DB_DATA 2
RANGE $3237-$3239 DB_DATA 2
RANGE $3239-$323B DB_DATA 2
RANGE $323B-$323D DB_DATA 2
RANGE $323D-$323F DB_DATA 2
RANGE $323F-$3241 DB_DATA 2
RANGE $3241-$3243 DB_DATA 2
RANGE $3243-$3245 DB_DATA 2
RANGE $3245-$3247 DB_DATA 2
RANGE $3247-$3249 DB_DATA 2
RANGE $3249-$324B DW_DATA 1
RANGE $324B-$324D DB_DATA 2
RANGE $324D-$324F DB_DATA 2
RANGE $324F-$3251 DB_DATA 2
RANGE $3251-$3253 DB_DATA 2
RANGE $3253-$3255 DB_DATA 2
RANGE $3255-$3257 DB_DATA 2
RANGE $3257-$3259 DB_DATA 2
RANGE $3259-$325B DB_DATA 2
RANGE $325B-$325D DB_DATA 2
RANGE $325D-$325F DB_DATA 2
RANGE $325F-$3261 DB_DATA 2
RANGE $3261-$3263 DB_DATA 2
RANGE $3263-$3265 DB_DATA 2
RANGE $3265-$3267 DB_DATA 2
RANGE $3267-$3269 DB_DATA 2
RANGE $3269-$326B DB_DATA 2
RANGE $326B-$326D DB_DATA 2
RANGE $326D-$326F DB_DATA 2
RANGE $326F-$3271 DB_DATA 2
RANGE $3271-$3273 DW_DATA 1
RANGE $3273-$3275 DB_DATA 2
RANGE $3275-$3277 DB_DATA 2
RANGE $3277-$3279 DB_DATA 2
RANGE $3279-$327B DB_DATA 2
RANGE $327B-$327D DB_DATA 2
RANGE $327D-$327F DB_DATA 2
RANGE $327F-$3281 DB_DATA 2
RANGE $3281-$3283 DB_DATA 2
RANGE $3283-$3285 DB_DATA 2
RANGE $3285-$3287 DB_DATA 2
RANGE $3287-$3289 DB_DATA 2
RANGE $3289-$328B DB_DATA 2
RANGE $328B-$328D DB_DATA 2
RANGE $328D-$328F DB_DATA 2
RANGE $328F-$3291 DB_DATA 2
RANGE $3291-$3293 DB_DATA 2
RANGE $3293-$3295 DB_DATA 2
RANGE $3295-$3297 DB_DATA 2
RANGE $3297-$3299 DB_DATA 2
RANGE $3299-$329B DW_DATA 1
RANGE $329B-$329D DB_DATA 2
RANGE $329D-$329F DB_DATA 2
RANGE $329F-$32A1 DB_DATA 2
RANGE $32A1-$32A3 DB_DATA 2
RANGE $32A3-$32A5 DB_DATA 2
RANGE $32A5-$32A7 DB_DATA 2
RANGE $32A7-$32A9 DB_DATA 2
RANGE $32A9-$32AB DB_DATA 2
RANGE $32AB-$32AD DB_DATA 2
RANGE $32AD-$32AF DB_DATA 2
RANGE $32AF-$32B1 DB_DATA 2
RANGE $32B1-$32B3 DB_DATA 2
RANGE $32B3-$32B5 DB_DATA 2
RANGE $32B5-$32B7 DB_DATA 2
RANGE $32B7-$32B9 DB_DATA 2
RANGE $32B9-$32BB DB_DATA 2
RANGE $32BB-$32BD DB_DATA 2
RANGE $32BD-$32BF DB_DATA 2
RANGE $32BF-$32C1 DB_DATA 2
RANGE $32C1-$32C3 DW_DATA 1
RANGE $32C3-$32C5 DB_DATA 2
RANGE $32C5-$32C7 DB_DATA 2
RANGE $32C7-$32C9 DB_DATA 2
RANGE $32C9-$32CB DB_DATA 2
RANGE $32CB-$32CD DB_DATA 2
RANGE $32CD-$32CF DB_DATA 2
RANGE $32CF-$32D1 DB_DATA 2
RANGE $32D1-$32D3 DB_DATA 2
RANGE $32D3-$32D4 DB_DATA 1
RANGE $32D4-$32D6 DW_DATA 1
RANGE $32D6-$32D7 DB_DATA 1
RANGE $32D7-$32D8 DB_DATA 1
RANGE $32D8-$32DA DW_DATA 1
RANGE $32DA-$32DB DB_DATA 1
RANGE $32DB-$32DC DB_DATA 1
RANGE $32DC-$32DD DB_DATA 1
RANGE $32DD-$32DE DB_DATA 1
RANGE $32DE-$32E0 DW_DATA 1
RANGE $32E0-$32E2 DB_DATA 2
RANGE $32E2-$32E4 DB_DATA 2
RANGE $32E4-$32E6 DB_DATA 2
RANGE $32E6-$32E8 DB_DATA 2
RANGE $32E8-$32EA DB_DATA 2
RANGE $32EA-$32EC DB_DATA 2
RANGE $32EC-$32EE DB_DATA 2
RANGE $32EE-$32F0 DB_DATA 2
RANGE $32F0-$32F1 DB_DATA 1
RANGE $32F1-$32F3 DW_DATA 1
RANGE $32F3-$32F4 DB_DATA 1
RANGE $32F4-$32F5 DB_DATA 1
RANGE $32F5-$32F7 DW_DATA 1
RANGE $32F7-$32F8 DB_DATA 1
RANGE $32F8-$32F9 DB_DATA 1
RANGE $32F9-$32FA DB_DATA 1
RANGE $32FA-$32FB DB_DATA 1
RANGE $32FB-$32FD DW_DATA 1
RANGE $32FD-$32FF DB_DATA 2
RANGE $32FF-$3301 DB_DATA 2
RANGE $3301-$3303 DB_DATA 2
RANGE $3303-$3305 DB_DATA 2
RANGE $3305-$3307 DB_DATA 2
RANGE $3307-$3309 DB_DATA 2
RANGE $3309-$330B DB_DATA 2
RANGE $330B-$330D DB_DATA 2
RANGE $330D-$330E DB_DATA 1
RANGE $330E-$3310 DW_DATA 1
RANGE $3310-$3311 DB_DATA 1
RANGE $3311-$3312 DB_DATA 1
RANGE $3312-$3314 DW_DATA 1
RANGE $3314-$3315 DB_DATA 1
RANGE $3315-$3316 DB_DATA 1
RANGE $3316-$3317 DB_DATA 1
RANGE $3317-$3318 DB_DATA 1
RANGE $3318-$3319 DB_DATA 1
RANGE $3319-$331B DW_DATA 1
RANGE $331B-$331C DB_DATA 1
RANGE $331C-$331D DB_DATA 1
RANGE $331D-$331F DW_DATA 1
RANGE $331F-$3320 DB_DATA 1
RANGE $3320-$3321 DB_DATA 1
RANGE $3321-$3322 DB_DATA 1
RANGE $3322-$3323 DB_DATA 1
RANGE $3323-$3325 DW_DATA 1
RANGE $3325-$3327 DB_DATA 2
RANGE $3327-$3329 DB_DATA 2
RANGE $3329-$332B DB_DATA 2
RANGE $332B-$332D DB_DATA 2
RANGE $332D-$332F DB_DATA 2
RANGE $332F-$3331 DB_DATA 2
RANGE $3331-$3333 DB_DATA 2
RANGE $3333-$3335 DB_DATA 2
RANGE $3335-$3337 DB_DATA 2
RANGE $3337-$3339 DB_DATA 2
RANGE $3339-$333B DB_DATA 2
RANGE $333B-$333D DB_DATA 2
RANGE $333D-$333F DB_DATA 2
RANGE $333F-$3341 DB_DATA 2
RANGE $3341-$3343 DB_DATA 2
RANGE $3343-$3345 DB_DATA 2
RANGE $3345-$3347 DW_DATA 1
RANGE $3347-$3349 DB_DATA 2
RANGE $3349-$334B DB_DATA 2
RANGE $334B-$334D DB_DATA 2
RANGE $334D-$334F DB_DATA 2
RANGE $334F-$3351 DB_DATA 2
RANGE $3351-$3353 DB_DATA 2
RANGE $3353-$3355 DB_DATA 2
RANGE $3355-$3357 DB_DATA 2
RANGE $3357-$3359 DB_DATA 2
RANGE $3359-$335B DB_DATA 2
RANGE $335B-$335D DB_DATA 2
RANGE $335D-$335F DB_DATA 2
RANGE $335F-$3361 DB_DATA 2
RANGE $3361-$3363 DB_DATA 2
RANGE $3363-$3365 DB_DATA 2
RANGE $3365-$3367 DB_DATA 2
RANGE $3367-$3369 DW_DATA 1
RANGE $3369-$336B DB_DATA 2
RANGE $336B-$336D DB_DATA 2
RANGE $336D-$336F DB_DATA 2
RANGE $336F-$3371 DB_DATA 2
RANGE $3371-$3373 DB_DATA 2
RANGE $3373-$3375 DB_DATA 2
RANGE $3375-$3377 DB_DATA 2
RANGE $3377-$3379 DB_DATA 2
RANGE $3379-$337B DB_DATA 2
RANGE $337B-$337D DB_DATA 2
RANGE $337D-$337F DB_DATA 2
RANGE $337F-$3381 DB_DATA 2
RANGE $3381-$3383 DB_DATA 2
RANGE $3383-$3385 DB_DATA 2
RANGE $3385-$3387 DB_DATA 2
RANGE $3387-$3389 DB_DATA 2
RANGE $3389-$338B DW_DATA 1
RANGE $338B-$338D DB_DATA 2
RANGE $338D-$338F DB_DATA 2
RANGE $338F-$3391 DB_DATA 2
RANGE $3391-$3393 DB_DATA 2
RANGE $3393-$3395 DB_DATA 2
RANGE $3395-$3397 DB_DATA 2
RANGE $3397-$3399 DB_DATA 2
RANGE $3399-$339B DB_DATA 2
RANGE $339B-$339D DB_DATA 2
RANGE $339D-$339F DB_DATA 2
RANGE $339F-$33A1 DB_DATA 2
RANGE $33A1-$33A3 DB_DATA 2
RANGE $33A3-$33A5 DB_DATA 2
RANGE $33A5-$33A7 DB_DATA 2
RANGE $33A7-$33A9 DB_DATA 2
RANGE $33A9-$33AB DB_DATA 2
RANGE $33AB-$33AD DW_DATA 1
RANGE $33AD-$33AF DB_DATA 2
RANGE $33AF-$33B1 DB_DATA 2
RANGE $33B1-$33B3 DB_DATA 2
RANGE $33B3-$33B5 DB_DATA 2
RANGE $33B5-$33B7 DB_DATA 2
RANGE $33B7-$33B9 DB_DATA 2
RANGE $33B9-$33BB DB_DATA 2
RANGE $33BB-$33BD DB_DATA 2
RANGE $33BD-$33BF DB_DATA 2
RANGE $33BF-$33C1 DB_DATA 2
RANGE $33C1-$33C3 DB_DATA 2
RANGE $33C3-$33C5 DB_DATA 2
RANGE $33C5-$33C7 DB_DATA 2
RANGE $33C7-$33C9 DB_DATA 2
RANGE $33C9-$33CB DB_DATA 2
RANGE $33CB-$33CD DB_DATA 2
RANGE $33CD-$33CF DW_DATA 1
RANGE $33CF-$33D1 DB_DATA 2
RANGE $33D1-$33D3 DB_DATA 2
RANGE $33D3-$33D5 DB_DATA 2
RANGE $33D5-$33D7 DB_DATA 2
RANGE $33D7-$33D9 DB_DATA 2
RANGE $33D9-$33DB DB_DATA 2
RANGE $33DB-$33DD DB_DATA 2
RANGE $33DD-$33DF DB_DATA 2
RANGE $33DF-$33E1 DB_DATA 2
RANGE $33E1-$33E3 DB_DATA 2
RANGE $33E3-$33E5 DB_DATA 2
RANGE $33E5-$33E7 DB_DATA 2
RANGE $33E7-$33E9 DB_DATA 2
RANGE $33E9-$33EB DB_DATA 2
RANGE $33EB-$33ED DB_DATA 2
RANGE $33ED-$33EF DB_DATA 2
RANGE $33EF-$33F1 DW_DATA 1
RANGE $33F1-$33F3 DB_DATA 2
RANGE $33F3-$33F5 DB_DATA 2
RANGE $33F5-$33F7 DB_DATA 2
RANGE $33F7-$33F9 DB_DATA 2
RANGE $33F9-$33FB DB_DATA 2
RANGE $33FB-$33FD DB_DATA 2
RANGE $33FD-$33FF DB_DATA 2
RANGE $33FF-$3401 DB_DATA 2
RANGE $3401-$3403 DB_DATA 2
RANGE $3403-$3405 DB_DATA 2
RANGE $3405-$3407 DB_DATA 2
RANGE $3407-$3409 DB_DATA 2
RANGE $3409-$340B DB_DATA 2
RANGE $340B-$340D DB_DATA 2
RANGE $340D-$340F DB_DATA 2
RANGE $340F-$3411 DB_DATA 2
RANGE $3411-$3413 DW_DATA 1
RANGE $3413-$3415 DB_DATA 2
RANGE $3415-$3417 DB_DATA 2
RANGE $3417-$3419 DB_DATA 2
RANGE $3419-$341B DB_DATA 2
RANGE $341B-$341D DB_DATA 2
RANGE $341D-$341F DB_DATA 2
RANGE $341F-$3421 DB_DATA 2
RANGE $3421-$3423 DB_DATA 2
RANGE $3423-$3425 DB_DATA 2
RANGE $3425-$3427 DB_DATA 2
RANGE $3427-$3429 DB_DATA 2
RANGE $3429-$342B DB_DATA 2
RANGE $342B-$342D DB_DATA 2
RANGE $342D-$342F DB_DATA 2
RANGE $342F-$3431 DB_DATA 2
RANGE $3431-$3433 DB_DATA 2
RANGE $3433-$3435 DW_DATA 1
RANGE $3435-$3437 DB_DATA 2
RANGE $3437-$3439 DB_DATA 2
RANGE $3439-$343B DB_DATA 2
RANGE $343B-$343D DB_DATA 2
RANGE $343D-$343F DB_DATA 2
RANGE $343F-$3441 DB_DATA 2
RANGE $3441-$3443 DB_DATA 2
RANGE $3443-$3445 DB_DATA 2
RANGE $3445-$3447 DB_DATA 2
RANGE $3447-$3449 DB_DATA 2
RANGE $3449-$344B DB_DATA 2
RANGE $344B-$344D DB_DATA 2
RANGE $344D-$344F DB_DATA 2
RANGE $344F-$3451 DB_DATA 2
RANGE $3451-$3453 DB_DATA 2
RANGE $3453-$3455 DB_DATA 2
RANGE $3455-$3457 DW_DATA 1
RANGE $3457-$3459 DB_DATA 2
RANGE $3459-$345B DB_DATA 2
RANGE $345B-$345D DB_DATA 2
RANGE $345D-$345F DB_DATA 2
RANGE $345F-$3461 DB_DATA 2
RANGE $3461-$3463 DB_DATA 2
RANGE $3463-$3465 DB_DATA 2
RANGE $3465-$3467 DB_DATA 2
RANGE $3467-$3469 DB_DATA 2
RANGE $3469-$346B DB_DATA 2
RANGE $346B-$346D DB_DATA 2
RANGE $346D-$346F DB_DATA 2
RANGE $346F-$3471 DB_DATA 2
RANGE $3471-$3473 DB_DATA 2
RANGE $3473-$3475 DB_DATA 2
RANGE $3475-$3477 DB_DATA 2
RANGE $3477-$3478 DB_DATA 1
RANGE $3478-$347A DW_DATA 1
RANGE $347A-$347B DB_DATA 1
RANGE $347B-$347C DB_DATA 1
RANGE $347C-$347E DW_DATA 1
RANGE $347E-$347F DB_DATA 1
RANGE $347F-$3480 DB_DATA 1
RANGE $3480-$3481 DB_DATA 1
RANGE $3481-$3482 DB_DATA 1
RANGE $3482-$3483 DB_DATA 1
RANGE $3483-$3485 DW_DATA 1
RANGE $3485-$3486 DB_DATA 1
RANGE $3486-$3487 DB_DATA 1
RANGE $3487-$3489 DW_DATA 1
RANGE $3489-$348A DB_DATA 1
RANGE $348A-$348B DB_DATA 1
RANGE $348B-$348C DB_DATA 1
RANGE $348C-$348D DB_DATA 1
RANGE $348D-$348E DB_DATA 1
RANGE $348E-$3490 DW_DATA 1
RANGE $3490-$3491 DB_DATA 1
RANGE $3491-$3492 DB_DATA 1
RANGE $3492-$3494 DW_DATA 1
RANGE $3494-$3495 DB_DATA 1
RANGE $3495-$3496 DB_DATA 1
RANGE $3496-$3497 DB_DATA 1
RANGE $3497-$3498 DB_DATA 1
RANGE $3498-$3499 DB_DATA 1
RANGE $3499-$349B DW_DATA 1
RANGE $349B-$349C DB_DATA 1
RANGE $349C-$349D DB_DATA 1
RANGE $349D-$349F DW_DATA 1
RANGE $349F-$34A0 DB_DATA 1
RANGE $34A0-$34A1 DB_DATA 1
RANGE $34A1-$34A2 DB_DATA 1
RANGE $34A2-$34A3 DB_DATA 1
RANGE $34A3-$34A4 DB_DATA 1
RANGE $34A4-$34A6 DW_DATA 1
RANGE $34A6-$34A7 DB_DATA 1
RANGE $34A7-$34A8 DB_DATA 1
RANGE $34A8-$34AA DW_DATA 1
RANGE $34AA-$34AB DB_DATA 1
RANGE $34AB-$34AC DB_DATA 1
RANGE $34AC-$34AD DB_DATA 1
RANGE $34AD-$34AE DB_DATA 1
RANGE $34AE-$34AF DB_DATA 1
RANGE $34AF-$34B1 DW_DATA 1
RANGE $34B1-$34B2 DB_DATA 1
RANGE $34B2-$34B3 DB_DATA 1
RANGE $34B3-$34B5 DW_DATA 1
RANGE $34B5-$34B6 DB_DATA 1
RANGE $34B6-$34B7 DB_DATA 1
RANGE $34B7-$34B8 DB_DATA 1
RANGE $34B8-$34B9 DB_DATA 1
RANGE $34B9-$34BA DB_DATA 1
RANGE $34BA-$34BC DW_DATA 1
RANGE $34BC-$34BD DB_DATA 1
RANGE $34BD-$34BE DB_DATA 1
RANGE $34BE-$34C0 DW_DATA 1
RANGE $34C0-$34C1 DB_DATA 1
RANGE $34C1-$34C2 DB_DATA 1
RANGE $34C2-$34C3 DB_DATA 1
RANGE $34C3-$34C4 DB_DATA 1
RANGE $34C4-$34C5 DB_DATA 1
RANGE $34C5-$34C7 DW_DATA 1
RANGE $34C7-$34C8 DB_DATA 1
RANGE $34C8-$34C9 DB_DATA 1
RANGE $34C9-$34CB DW_DATA 1
RANGE $34CB-$34CC DB_DATA 1
RANGE $34CC-$34CD DB_DATA 1
RANGE $34CD-$34CE DB_DATA 1
RANGE $34CE-$34CF DB_DATA 1
RANGE $34CF-$34D0 DB_DATA 1
RANGE $34D0-$34D2 DW_DATA 1
RANGE $34D2-$34D3 DB_DATA 1
RANGE $34D3-$34D4 DB_DATA 1
RANGE $34D4-$34D6 DW_DATA 1
RANGE $34D6-$34D7 DB_DATA 1
RANGE $34D7-$34D8 DB_DATA 1
RANGE $34D8-$34D9 DB_DATA 1
RANGE $34D9-$34DA DB_DATA 1
RANGE $34DA-$34DB DB_DATA 1
RANGE $34DB-$34DD DW_DATA 1
RANGE $34DD-$34DE DB_DATA 1
RANGE $34DE-$34DF DB_DATA 1
RANGE $34DF-$34E1 DW_DATA 1
RANGE $34E1-$34E2 DB_DATA 1
RANGE $34E2-$34E3 DB_DATA 1
RANGE $34E3-$34E4 DB_DATA 1
RANGE $34E4-$34E5 DB_DATA 1
RANGE $34E5-$34E7 DW_DATA 1
RANGE $34E7-$34E8 DB_DATA 1
RANGE $34E8-$34EA DW_DATA 1
RANGE $34EA-$34EB DB_DATA 1
RANGE $34EB-$34EC DB_DATA 1
RANGE $34EC-$34EE DW_DATA 1
RANGE $34EE-$34EF DB_DATA 1
RANGE $34EF-$34F1 DW_DATA 1
RANGE $34F1-$34F2 DB_DATA 1
RANGE $34F2-$34F3 DB_DATA 1
RANGE $34F3-$34F5 DW_DATA 1
RANGE $34F5-$34F6 DB_DATA 1
RANGE $34F6-$34F8 DW_DATA 1
RANGE $34F8-$34F9 DB_DATA 1
RANGE $34F9-$34FA DB_DATA 1
RANGE $34FA-$34FC DW_DATA 1
RANGE $34FC-$34FD DB_DATA 1
RANGE $34FD-$34FF DW_DATA 1
RANGE $34FF-$3500 DB_DATA 1
RANGE $3500-$3501 DB_DATA 1
RANGE $3501-$3503 DW_DATA 1
RANGE $3503-$3504 DB_DATA 1
RANGE $3504-$3506 DW_DATA 1
RANGE $3506-$3507 DB_DATA 1
RANGE $3507-$3508 DB_DATA 1
RANGE $3508-$350A DW_DATA 1
RANGE $350A-$350B DB_DATA 1
RANGE $350B-$350D DW_DATA 1
RANGE $350D-$350E DB_DATA 1
RANGE $350E-$350F DB_DATA 1
RANGE $350F-$3511 DW_DATA 1
RANGE $3511-$3512 DB_DATA 1
RANGE $3512-$3514 DW_DATA 1
RANGE $3514-$3515 DB_DATA 1
RANGE $3515-$3516 DB_DATA 1
RANGE $3516-$3518 DW_DATA 1
RANGE $3518-$3519 DB_DATA 1
RANGE $3519-$351B DW_DATA 1
RANGE $351B-$351C DB_DATA 1
RANGE $351C-$351D DB_DATA 1
RANGE $351D-$351F DW_DATA 1
RANGE $351F-$3520 DB_DATA 1
RANGE $3520-$3522 DW_DATA 1
RANGE $3522-$3523 DB_DATA 1
RANGE $3523-$3524 DB_DATA 1
RANGE $3524-$3526 DW_DATA 1
RANGE $3526-$3527 DB_DATA 1
RANGE $3527-$3529 DW_DATA 1
RANGE $3529-$352A DB_DATA 1
RANGE $352A-$352B DB_DATA 1
RANGE $352B-$352D DW_DATA 1
RANGE $352D-$352E DB_DATA 1
RANGE $352E-$3530 DW_DATA 1
RANGE $3530-$3531 DB_DATA 1
RANGE $3531-$3532 DB_DATA 1
RANGE $3532-$3534 DW_DATA 1
RANGE $3534-$3535 DB_DATA 1
RANGE $3535-$3537 DW_DATA 1
RANGE $3537-$3538 DB_DATA 1
RANGE $3538-$3539 DB_DATA 1
RANGE $3539-$353B DW_DATA 1
RANGE $353B-$353C DB_DATA 1
RANGE $353C-$353E DW_DATA 1
RANGE $353E-$353F DB_DATA 1
RANGE $353F-$3540 DB_DATA 1
RANGE $3540-$3542 DW_DATA 1
RANGE $3542-$3543 DB_DATA 1
RANGE $3543-$3545 DW_DATA 1
RANGE $3545-$3546 DB_DATA 1
RANGE $3546-$3547 DB_DATA 1
RANGE $3547-$3549 DW_DATA 1
RANGE $3549-$354A DB_DATA 1
RANGE $354A-$354C DW_DATA 1
RANGE $354C-$354D DB_DATA 1
RANGE $354D-$354E DB_DATA 1
RANGE $354E-$3550 DW_DATA 1
RANGE $3550-$3551 DB_DATA 1
RANGE $3551-$3553 DW_DATA 1
RANGE $3553-$3554 DB_DATA 1
RANGE $3554-$3555 DB_DATA 1
RANGE $3555-$3557 DW_DATA 1
RANGE $3557-$3558 DB_DATA 1
RANGE $3558-$355A DW_DATA 1
RANGE $355A-$355B DB_DATA 1
RANGE $355B-$355C DB_DATA 1
RANGE $355C-$355E DW_DATA 1
RANGE $355E-$355F DB_DATA 1
RANGE $355F-$3561 DW_DATA 1
RANGE $3561-$3562 DB_DATA 1
RANGE $3562-$3563 DB_DATA 1
RANGE $3563-$3565 DW_DATA 1
RANGE $3565-$3567 DB_DATA 2
RANGE $3567-$3569 DB_DATA 2
RANGE $3569-$356B DB_DATA 2
RANGE $356B-$356D DB_DATA 2
RANGE $356D-$356F DB_DATA 2
RANGE $356F-$3571 DB_DATA 2
RANGE $3571-$3573 DB_DATA 2
RANGE $3573-$3575 DB_DATA 2
RANGE $3575-$3577 DB_DATA 2
RANGE $3577-$3579 DB_DATA 2
RANGE $3579-$357B DB_DATA 2
RANGE $357B-$357D DB_DATA 2
RANGE $357D-$357F DB_DATA 2
RANGE $357F-$3581 DB_DATA 2
RANGE $3581-$3583 DB_DATA 2
RANGE $3583-$3585 DB_DATA 2
RANGE $3585-$3587 DB_DATA 2
RANGE $3587-$3589 DB_DATA 2
RANGE $3589-$358B DB_DATA 2
RANGE $358B-$358D DW_DATA 1
RANGE $358D-$358F DB_DATA 2
RANGE $358F-$3591 DB_DATA 2
RANGE $3591-$3593 DB_DATA 2
RANGE $3593-$3595 DB_DATA 2
RANGE $3595-$3597 DB_DATA 2
RANGE $3597-$3599 DB_DATA 2
RANGE $3599-$359B DB_DATA 2
RANGE $359B-$359D DB_DATA 2
RANGE $359D-$359F DB_DATA 2
RANGE $359F-$35A1 DB_DATA 2
RANGE $35A1-$35A3 DB_DATA 2
RANGE $35A3-$35A5 DB_DATA 2
RANGE $35A5-$35A7 DB_DATA 2
RANGE $35A7-$35A9 DB_DATA 2
RANGE $35A9-$35AB DB_DATA 2
RANGE $35AB-$35AD DB_DATA 2
RANGE $35AD-$35AF DB_DATA 2
RANGE $35AF-$35B1 DB_DATA 2
RANGE $35B1-$35B3 DB_DATA 2
RANGE $35B3-$35B5 DW_DATA 1
RANGE $35B5-$35B7 DB_DATA 2
RANGE $35B7-$35B9 DB_DATA 2
RANGE $35B9-$35BB DB_DATA 2
RANGE $35BB-$35BD DB_DATA 2
RANGE $35BD-$35BF DB_DATA 2
RANGE $35BF-$35C1 DB_DATA 2
RANGE $35C1-$35C3 DB_DATA 2
RANGE $35C3-$35C5 DB_DATA 2
RANGE $35C5-$35C7 DB_DATA 2
RANGE $35C7-$35C9 DB_DATA 2
RANGE $35C9-$35CB DB_DATA 2
RANGE $35CB-$35CD DB_DATA 2
RANGE $35CD-$35CF DB_DATA 2
RANGE $35CF-$35D1 DB_DATA 2
RANGE $35D1-$35D3 DW_DATA 1
RANGE $35D3-$35D5 DB_DATA 2
RANGE $35D5-$35D7 DB_DATA 2
RANGE $35D7-$35D9 DB_DATA 2
RANGE $35D9-$35DB DB_DATA 2
RANGE $35DB-$35DD DB_DATA 2
RANGE $35DD-$35DF DB_DATA 2
RANGE $35DF-$35E1 DB_DATA 2
RANGE $35E1-$35E3 DB_DATA 2
RANGE $35E3-$35E5 DB_DATA 2
RANGE $35E5-$35E7 DW_DATA 1
RANGE $35E7-$35E9 DB_DATA 2
RANGE $35E9-$35EB DB_DATA 2
RANGE $35EB-$35ED DB_DATA 2
RANGE $35ED-$35EF DB_DATA 2
RANGE $35EF-$35F1 DW_DATA 1
RANGE $35F1-$35F3 DB_DATA 2
RANGE $35F3-$35F5 DB_DATA 2
RANGE $35F5-$35F7 DB_DATA 2
RANGE $35F7-$35F9 DB_DATA 2
RANGE $35F9-$35FB DW_DATA 1
RANGE $35FB-$35FD DB_DATA 2
RANGE $35FD-$35FF DB_DATA 2
RANGE $35FF-$3601 DB_DATA 2
RANGE $3601-$3603 DB_DATA 2
RANGE $3603-$3605 DW_DATA 1
RANGE $3605-$3607 DB_DATA 2
RANGE $3607-$3609 DB_DATA 2
RANGE $3609-$360B DB_DATA 2
RANGE $360B-$360D DB_DATA 2
RANGE $360D-$360F DB_DATA 2
RANGE $360F-$3611 DB_DATA 2
RANGE $3611-$3613 DB_DATA 2
RANGE $3613-$3615 DB_DATA 2
RANGE $3615-$3617 DB_DATA 2
RANGE $3617-$3619 DB_DATA 2
RANGE $3619-$361B DB_DATA 2
RANGE $361B-$361D DB_DATA 2
RANGE $361D-$361F DB_DATA 2
RANGE $361F-$3621 DB_DATA 2
RANGE $3621-$3623 DB_DATA 2
RANGE $3623-$3625 DB_DATA 2
RANGE $3625-$3627 DB_DATA 2
RANGE $3627-$3629 DB_DATA 2
RANGE $3629-$362B DB_DATA 2
RANGE $362B-$362D DW_DATA 1
RANGE $362D-$362F DB_DATA 2
RANGE $362F-$3631 DB_DATA 2
RANGE $3631-$3633 DB_DATA 2
RANGE $3633-$3635 DB_DATA 2
RANGE $3635-$3637 DB_DATA 2
RANGE $3637-$3639 DB_DATA 2
RANGE $3639-$363B DB_DATA 2
RANGE $363B-$363D DB_DATA 2
RANGE $363D-$363F DB_DATA 2
RANGE $363F-$3641 DB_DATA 2
RANGE $3641-$3643 DB_DATA 2
RANGE $3643-$3645 DB_DATA 2
RANGE $3645-$3647 DB_DATA 2
RANGE $3647-$3649 DB_DATA 2
RANGE $3649-$364B DB_DATA 2
RANGE $364B-$364D DB_DATA 2
RANGE $364D-$364F DB_DATA 2
RANGE $364F-$3651 DB_DATA 2
RANGE $3651-$3653 DB_DATA 2
RANGE $3653-$3655 DW_DATA 1
RANGE $3655-$3657 DB_DATA 2
RANGE $3657-$3659 DB_DATA 2
RANGE $3659-$365B DB_DATA 2
RANGE $365B-$365D DB_DATA 2
RANGE $365D-$365F DB_DATA 2
RANGE $365F-$3661 DB_DATA 2
RANGE $3661-$3663 DB_DATA 2
RANGE $3663-$3665 DB_DATA 2
RANGE $3665-$3667 DB_DATA 2
RANGE $3667-$3669 DB_DATA 2
RANGE $3669-$366B DB_DATA 2
RANGE $366B-$366D DB_DATA 2
RANGE $366D-$366F DB_DATA 2
RANGE $366F-$3671 DB_DATA 2
RANGE $3671-$3673 DB_DATA 2
RANGE $3673-$3675 DB_DATA 2
RANGE $3675-$3677 DB_DATA 2
RANGE $3677-$3679 DB_DATA 2
RANGE $3679-$367B DB_DATA 2
RANGE $367B-$367D DB_DATA 2
RANGE $367D-$367F DW_DATA 1
RANGE $367F-$3681 DB_DATA 2
RANGE $3681-$3683 DB_DATA 2
RANGE $3683-$3685 DB_DATA 2
RANGE $3685-$3687 DB_DATA 2
RANGE $3687-$3689 DB_DATA 2
RANGE $3689-$368B DB_DATA 2
RANGE $368B-$368D DB_DATA 2
RANGE $368D-$368F DB_DATA 2
RANGE $368F-$3691 DB_DATA 2
RANGE $3691-$3693 DB_DATA 2
RANGE $3693-$3695 DB_DATA 2
RANGE $3695-$3697 DB_DATA 2
RANGE $3697-$3699 DB_DATA 2
RANGE $3699-$369B DB_DATA 2
RANGE $369B-$369D DB_DATA 2
RANGE $369D-$369F DB_DATA 2
RANGE $369F-$36A1 DB_DATA 2
RANGE $36A1-$36A3 DB_DATA 2
RANGE $36A3-$36A5 DB_DATA 2
RANGE $36A5-$36A7 DB_DATA 2
RANGE $36A7-$36A9 DW_DATA 1
RANGE $36A9-$36AB DB_DATA 2
RANGE $36AB-$36AD DB_DATA 2
RANGE $36AD-$36AF DB_DATA 2
RANGE $36AF-$36B0 DB_DATA 1
RANGE $36B0-$36B2 DW_DATA 1
RANGE $36B2-$36B3 DB_DATA 1
RANGE $36B3-$36B4 DB_DATA 1
RANGE $36B4-$36B6 DW_DATA 1
RANGE $36B6-$36B7 DB_DATA 1
RANGE $36B7-$36B8 DB_DATA 1
RANGE $36B8-$36BA DW_DATA 1
RANGE $36BA-$36BC DB_DATA 2
RANGE $36BC-$36BE DB_DATA 2
RANGE $36BE-$36C0 DB_DATA 2
RANGE $36C0-$36C2 DB_DATA 2
RANGE $36C2-$36C4 DB_DATA 2
RANGE $36C4-$36C6 DB_DATA 2
RANGE $36C6-$36C8 DB_DATA 2
RANGE $36C8-$36C9 DB_DATA 1
RANGE $36C9-$36CB DW_DATA 1
RANGE $36CB-$36CC DB_DATA 1
RANGE $36CC-$36CD DB_DATA 1
RANGE $36CD-$36CF DW_DATA 1
RANGE $36CF-$36D0 DB_DATA 1
RANGE $36D0-$36D1 DB_DATA 1
RANGE $36D1-$36D3 DW_DATA 1
RANGE $36D3-$36D5 DB_DATA 2
RANGE $36D5-$36D7 DB_DATA 2
RANGE $36D7-$36D9 DB_DATA 2
RANGE $36D9-$36DB DB_DATA 2
RANGE $36DB-$36DC DB_DATA 1
RANGE $36DC-$36DE DW_DATA 1
RANGE $36DE-$36DF DB_DATA 1
RANGE $36DF-$36E0 DB_DATA 1
RANGE $36E0-$36E2 DW_DATA 1
RANGE $36E2-$36E3 DB_DATA 1
RANGE $36E3-$36E4 DB_DATA 1
RANGE $36E4-$36E6 DW_DATA 1
RANGE $36E6-$36E8 DB_DATA 2
RANGE $36E8-$36EA DB_DATA 2
RANGE $36EA-$36EC DB_DATA 2
RANGE $36EC-$36EE DB_DATA 2
RANGE $36EE-$36F0 DB_DATA 2
RANGE $36F0-$36F2 DB_DATA 2
RANGE $36F2-$36F4 DB_DATA 2
RANGE $36F4-$36F6 DB_DATA 2
RANGE $36F6-$36F8 DB_DATA 2
RANGE $36F8-$36FA DB_DATA 2
RANGE $36FA-$36FB DB_DATA 1
RANGE $36FB-$36FD DW_DATA 1
RANGE $36FD-$36FE DB_DATA 1
RANGE $36FE-$36FF DB_DATA 1
RANGE $36FF-$3701 DW_DATA 1
RANGE $3701-$3702 DB_DATA 1
RANGE $3702-$3703 DB_DATA 1
RANGE $3703-$3705 DW_DATA 1
RANGE $3705-$3707 DB_DATA 2
RANGE $3707-$3709 DB_DATA 2
RANGE $3709-$370B DB_DATA 2
RANGE $370B-$370D DB_DATA 2
RANGE $370D-$370F DB_DATA 2
RANGE $370F-$3711 DB_DATA 2
RANGE $3711-$3713 DB_DATA 2
RANGE $3713-$3715 DB_DATA 2
RANGE $3715-$3717 DB_DATA 2
RANGE $3717-$3719 DB_DATA 2
RANGE $3719-$371B DB_DATA 2
RANGE $371B-$371D DB_DATA 2
RANGE $371D-$371E DB_DATA 1
RANGE $371E-$3720 DW_DATA 1
RANGE $3720-$3721 DB_DATA 1
RANGE $3721-$3722 DB_DATA 1
RANGE $3722-$3724 DW_DATA 1
RANGE $3724-$3725 DB_DATA 1
RANGE $3725-$3726 DB_DATA 1
RANGE $3726-$3727 DB_DATA 1
RANGE $3727-$3728 DB_DATA 1
RANGE $3728-$372A DW_DATA 1
RANGE $372A-$372C DB_DATA 2
RANGE $372C-$372E DB_DATA 2
RANGE $372E-$3730 DB_DATA 2
RANGE $3730-$3732 DB_DATA 2
RANGE $3732-$3734 DB_DATA 2
RANGE $3734-$3736 DB_DATA 2
RANGE $3736-$3737 DB_DATA 1
RANGE $3737-$3739 DW_DATA 1
RANGE $3739-$373A DB_DATA 1
RANGE $373A-$373B DB_DATA 1
RANGE $373B-$373D DW_DATA 1
RANGE $373D-$373E DB_DATA 1
RANGE $373E-$373F DB_DATA 1
RANGE $373F-$3741 DW_DATA 1
RANGE $3741-$3743 DB_DATA 2
RANGE $3743-$3745 DB_DATA 2
RANGE $3745-$3747 DB_DATA 2
RANGE $3747-$3749 DB_DATA 2
RANGE $3749-$374B DB_DATA 2
RANGE $374B-$374D DB_DATA 2
RANGE $374D-$374F DB_DATA 2
RANGE $374F-$3751 DB_DATA 2
RANGE $3751-$3753 DB_DATA 2
RANGE $3753-$3755 DW_DATA 1
RANGE $3755-$3757 DB_DATA 2
RANGE $3757-$3759 DB_DATA 2
RANGE $3759-$375B DB_DATA 2
RANGE $375B-$375D DB_DATA 2
RANGE $375D-$375F DB_DATA 2
RANGE $375F-$3761 DB_DATA 2
RANGE $3761-$3763 DB_DATA 2
RANGE $3763-$3765 DB_DATA 2
RANGE $3765-$3767 DB_DATA 2
RANGE $3767-$3769 DW_DATA 1
RANGE $3769-$376B DB_DATA 2
RANGE $376B-$376D DB_DATA 2
RANGE $376D-$376F DB_DATA 2
RANGE $376F-$3771 DB_DATA 2
RANGE $3771-$3773 DB_DATA 2
RANGE $3773-$3775 DB_DATA 2
RANGE $3775-$3777 DB_DATA 2
RANGE $3777-$3779 DB_DATA 2
RANGE $3779-$377B DB_DATA 2
RANGE $377B-$377D DW_DATA 1
RANGE $377D-$377F DB_DATA 2
RANGE $377F-$3781 DB_DATA 2
RANGE $3781-$3783 DB_DATA 2
RANGE $3783-$3785 DB_DATA 2
RANGE $3785-$3787 DB_DATA 2
RANGE $3787-$3789 DB_DATA 2
RANGE $3789-$378B DB_DATA 2
RANGE $378B-$378D DB_DATA 2
RANGE $378D-$378F DB_DATA 2
RANGE $378F-$3790 DB_DATA 1
RANGE $3790-$3792 DW_DATA 1
RANGE $3792-$3793 DB_DATA 1
RANGE $3793-$3794 DB_DATA 1
RANGE $3794-$3796 DW_DATA 1
RANGE $3796-$3797 DB_DATA 1
RANGE $3797-$3798 DB_DATA 1
RANGE $3798-$3799 DB_DATA 1
RANGE $3799-$379B DW_DATA 1
RANGE $379B-$379C DB_DATA 1
RANGE $379C-$379D DB_DATA 1
RANGE $379D-$379F DW_DATA 1
RANGE $379F-$37A0 DB_DATA 1
RANGE $37A0-$37A1 DB_DATA 1
RANGE $37A1-$37A2 DB_DATA 1
RANGE $37A2-$37A4 DW_DATA 1
RANGE $37A4-$37A5 DB_DATA 1
RANGE $37A5-$37A6 DB_DATA 1
RANGE $37A6-$37A8 DW_DATA 1
RANGE $37A8-$37A9 DB_DATA 1
RANGE $37A9-$37AA DB_DATA 1
RANGE $37AA-$37AB DB_DATA 1
RANGE $37AB-$37AD DW_DATA 1
RANGE $37AD-$37AE DB_DATA 1
RANGE $37AE-$37AF DB_DATA 1
RANGE $37AF-$37B1 DW_DATA 1
RANGE $37B1-$37B2 DB_DATA 1
RANGE $37B2-$37B3 DB_DATA 1
RANGE $37B3-$37B4 DB_DATA 1
RANGE $37B4-$37B6 DW_DATA 1
RANGE $37B6-$37B7 DB_DATA 1
RANGE $37B7-$37B8 DB_DATA 1
RANGE $37B8-$37BA DW_DATA 1
RANGE $37BA-$37BB DB_DATA 1
RANGE $37BB-$37BC DB_DATA 1
RANGE $37BC-$37BD DB_DATA 1
RANGE $37BD-$37BF DW_DATA 1
RANGE $37BF-$37C0 DB_DATA 1
RANGE $37C0-$37C1 DB_DATA 1
RANGE $37C1-$37C3 DW_DATA 1
RANGE $37C3-$37C4 DB_DATA 1
RANGE $37C4-$37C5 DB_DATA 1
RANGE $37C5-$37C7 DW_DATA 1
RANGE $37C7-$37C9 DB_DATA 2
RANGE $37C9-$37CB DB_DATA 2
RANGE $37CB-$37CD DB_DATA 2
RANGE $37CD-$37CF DB_DATA 2
RANGE $37CF-$37D1 DB_DATA 2
RANGE $37D1-$37D3 DB_DATA 2
RANGE $37D3-$37D5 DB_DATA 2
RANGE $37D5-$37D7 DB_DATA 2
RANGE $37D7-$37D9 DB_DATA 2
RANGE $37D9-$37DB DB_DATA 2
RANGE $37DB-$37DD DW_DATA 1
RANGE $37DD-$37DF DB_DATA 2
RANGE $37DF-$37E1 DB_DATA 2
RANGE $37E1-$37E3 DB_DATA 2
RANGE $37E3-$37E5 DB_DATA 2
RANGE $37E5-$37E7 DB_DATA 2
RANGE $37E7-$37E9 DB_DATA 2
RANGE $37E9-$37EB DB_DATA 2
RANGE $37EB-$37ED DB_DATA 2
RANGE $37ED-$37EF DB_DATA 2
RANGE $37EF-$37F1 DB_DATA 2
RANGE $37F1-$37F3 DW_DATA 1
RANGE $37F3-$37F5 DB_DATA 2
RANGE $37F5-$37F7 DB_DATA 2
RANGE $37F7-$37F9 DB_DATA 2
RANGE $37F9-$37FB DB_DATA 2
RANGE $37FB-$37FD DB_DATA 2
RANGE $37FD-$37FF DB_DATA 2
RANGE $37FF-$3801 DB_DATA 2
RANGE $3801-$3803 DB_DATA 2
RANGE $3803-$3805 DB_DATA 2
RANGE $3805-$3807 DB_DATA 2
RANGE $3807-$3808 DB_DATA 1
RANGE $3808-$380A DW_DATA 1
RANGE $380A-$380B DB_DATA 1
RANGE $380B-$380C DB_DATA 1
RANGE $380C-$380E DW_DATA 1
RANGE $380E-$380F DB_DATA 1
RANGE $380F-$3810 DB_DATA 1
RANGE $3810-$3811 DB_DATA 1
RANGE $3811-$3813 DW_DATA 1
RANGE $3813-$3814 DB_DATA 1
RANGE $3814-$3815 DB_DATA 1
RANGE $3815-$3817 DW_DATA 1
RANGE $3817-$3818 DB_DATA 1
RANGE $3818-$3819 DB_DATA 1
RANGE $3819-$381A DB_DATA 1
RANGE $381A-$381C DW_DATA 1
RANGE $381C-$381D DB_DATA 1
RANGE $381D-$381E DB_DATA 1
RANGE $381E-$3820 DW_DATA 1
RANGE $3820-$3821 DB_DATA 1
RANGE $3821-$3822 DB_DATA 1
RANGE $3822-$3823 DB_DATA 1
RANGE $3823-$3825 DW_DATA 1
RANGE $3825-$3826 DB_DATA 1
RANGE $3826-$3827 DB_DATA 1
RANGE $3827-$3829 DW_DATA 1
RANGE $3829-$382A DB_DATA 1
RANGE $382A-$382B DB_DATA 1
RANGE $382B-$382D DW_DATA 1
RANGE $382D-$382F DB_DATA 2
RANGE $382F-$3831 DB_DATA 2
RANGE $3831-$3833 DB_DATA 2
RANGE $3833-$3835 DW_DATA 1
RANGE $3835-$3837 DB_DATA 2
RANGE $3837-$3839 DB_DATA 2
RANGE $3839-$383B DB_DATA 2
RANGE $383B-$383D DB_DATA 2
RANGE $383D-$383F DB_DATA 2
RANGE $383F-$3841 DW_DATA 1
RANGE $3841-$3843 DB_DATA 2
RANGE $3843-$3845 DB_DATA 2
RANGE $3845-$3847 DB_DATA 2
RANGE $3847-$3849 DB_DATA 2
RANGE $3849-$384B DB_DATA 2
RANGE $384B-$384D DB_DATA 2
RANGE $384D-$384F DW_DATA 1
RANGE $384F-$3851 DB_DATA 2
RANGE $3851-$3853 DB_DATA 2
RANGE $3853-$3855 DB_DATA 2
RANGE $3855-$3857 DB_DATA 2
RANGE $3857-$3859 DB_DATA 2
RANGE $3859-$385B DB_DATA 2
RANGE $385B-$385D DW_DATA 1
RANGE $385D-$385F DB_DATA 2
RANGE $385F-$3861 DB_DATA 2
RANGE $3861-$3863 DB_DATA 2
RANGE $3863-$3865 DB_DATA 2
RANGE $3865-$3867 DB_DATA 2
RANGE $3867-$3869 DB_DATA 2
RANGE $3869-$386B DW_DATA 1
RANGE $386B-$386D DB_DATA 2
RANGE $386D-$386F DB_DATA 2
RANGE $386F-$3871 DB_DATA 2
RANGE $3871-$3873 DB_DATA 2
RANGE $3873-$3875 DB_DATA 2
RANGE $3875-$3877 DW_DATA 1
RANGE $3877-$3879 DB_DATA 2
RANGE $3879-$387B DB_DATA 2
RANGE $387B-$387D DB_DATA 2
RANGE $387D-$387F DB_DATA 2
RANGE $387F-$3881 DB_DATA 2
RANGE $3881-$3882 DB_DATA 1
RANGE $3882-$3884 DW_DATA 1
RANGE $3884-$3885 DB_DATA 1
RANGE $3885-$3886 DB_DATA 1
RANGE $3886-$3888 DW_DATA 1
RANGE $3888-$3889 DB_DATA 1
RANGE $3889-$388A DB_DATA 1
RANGE $388A-$388B DB_DATA 1
RANGE $388B-$388D DW_DATA 1
RANGE $388D-$388E DB_DATA 1
RANGE $388E-$388F DB_DATA 1
RANGE $388F-$3891 DW_DATA 1
RANGE $3891-$3892 DB_DATA 1
RANGE $3892-$3893 DB_DATA 1
RANGE $3893-$3894 DB_DATA 1
RANGE $3894-$3896 DW_DATA 1
RANGE $3896-$3897 DB_DATA 1
RANGE $3897-$3898 DB_DATA 1
RANGE $3898-$389A DW_DATA 1
RANGE $389A-$389B DB_DATA 1
RANGE $389B-$389C DB_DATA 1
RANGE $389C-$389D DB_DATA 1
RANGE $389D-$389F DW_DATA 1
RANGE $389F-$38A0 DB_DATA 1
RANGE $38A0-$38A1 DB_DATA 1
RANGE $38A1-$38A3 DW_DATA 1
RANGE $38A3-$38A4 DB_DATA 1
RANGE $38A4-$38A5 DB_DATA 1
RANGE $38A5-$38A6 DB_DATA 1
RANGE $38A6-$38A8 DW_DATA 1
RANGE $38A8-$38A9 DB_DATA 1
RANGE $38A9-$38AA DB_DATA 1
RANGE $38AA-$38AC DW_DATA 1
RANGE $38AC-$38AD DB_DATA 1
RANGE $38AD-$38AE DB_DATA 1
RANGE $38AE-$38AF DB_DATA 1
RANGE $38AF-$38B1 DW_DATA 1
RANGE $38B1-$38B2 DB_DATA 1
RANGE $38B2-$38B3 DB_DATA 1
RANGE $38B3-$38B5 DW_DATA 1
RANGE $38B5-$38B6 DB_DATA 1
RANGE $38B6-$38B7 DB_DATA 1
RANGE $38B7-$38B8 DB_DATA 1
RANGE $38B8-$38BA DW_DATA 1
RANGE $38BA-$38BB DB_DATA 1
RANGE $38BB-$38BC DB_DATA 1
RANGE $38BC-$38BE DW_DATA 1
RANGE $38BE-$38BF DB_DATA 1
RANGE $38BF-$38C0 DB_DATA 1
RANGE $38C0-$38C2 DW_DATA 1
RANGE $38C2-$38C4 DB_DATA 2
RANGE $38C4-$38C6 DB_DATA 2
RANGE $38C6-$38C8 DB_DATA 2
RANGE $38C8-$38CA DB_DATA 2
RANGE $38CA-$38CC DB_DATA 2
RANGE $38CC-$38CE DB_DATA 2
RANGE $38CE-$38D0 DB_DATA 2
RANGE $38D0-$38D2 DB_DATA 2
RANGE $38D2-$38D4 DB_DATA 2
RANGE $38D4-$38D6 DB_DATA 2
RANGE $38D6-$38D7 DB_DATA 1
RANGE $38D7-$38D9 DW_DATA 1
RANGE $38D9-$38DA DB_DATA 1
RANGE $38DA-$38DB DB_DATA 1
RANGE $38DB-$38DD DW_DATA 1
RANGE $38DD-$38DE DB_DATA 1
RANGE $38DE-$38DF DB_DATA 1
RANGE $38DF-$38E0 DB_DATA 1
RANGE $38E0-$38E1 DB_DATA 1
RANGE $38E1-$38E3 DW_DATA 1
RANGE $38E3-$38E5 DB_DATA 2
RANGE $38E5-$38E7 DB_DATA 2
RANGE $38E7-$38E9 DB_DATA 2
RANGE $38E9-$38EB DB_DATA 2
RANGE $38EB-$38ED DB_DATA 2
RANGE $38ED-$38EF DB_DATA 2
RANGE $38EF-$38F1 DB_DATA 2
RANGE $38F1-$38F3 DB_DATA 2
RANGE $38F3-$38F5 DB_DATA 2
RANGE $38F5-$38F7 DB_DATA 2
RANGE $38F7-$38F8 DB_DATA 1
RANGE $38F8-$38FA DW_DATA 1
RANGE $38FA-$38FB DB_DATA 1
RANGE $38FB-$38FC DB_DATA 1
RANGE $38FC-$38FE DW_DATA 1
RANGE $38FE-$38FF DB_DATA 1
RANGE $38FF-$3900 DB_DATA 1
RANGE $3900-$3901 DB_DATA 1
RANGE $3901-$3902 DB_DATA 1
RANGE $3902-$3904 DW_DATA 1
RANGE $3904-$3906 DB_DATA 2
RANGE $3906-$3908 DB_DATA 2
RANGE $3908-$390A DB_DATA 2
RANGE $390A-$390C DB_DATA 2
RANGE $390C-$390E DB_DATA 2
RANGE $390E-$3910 DB_DATA 2
RANGE $3910-$3912 DB_DATA 2
RANGE $3912-$3914 DB_DATA 2
RANGE $3914-$3916 DB_DATA 2
RANGE $3916-$3918 DB_DATA 2
RANGE $3918-$3919 DB_DATA 1
RANGE $3919-$391B DW_DATA 1
RANGE $391B-$391C DB_DATA 1
RANGE $391C-$391D DB_DATA 1
RANGE $391D-$391F DW_DATA 1
RANGE $391F-$3920 DB_DATA 1
RANGE $3920-$3921 DB_DATA 1
RANGE $3921-$3922 DB_DATA 1
RANGE $3922-$3923 DB_DATA 1
RANGE $3923-$3924 DB_DATA 1
RANGE $3924-$3926 DW_DATA 1
RANGE $3926-$3927 DB_DATA 1
RANGE $3927-$3928 DB_DATA 1
RANGE $3928-$392A DW_DATA 1
RANGE $392A-$392B DB_DATA 1
RANGE $392B-$392C DB_DATA 1
RANGE $392C-$392D DB_DATA 1
RANGE $392D-$392E DB_DATA 1
RANGE $392E-$3930 DW_DATA 1
RANGE $3930-$3932 DB_DATA 2
RANGE $3932-$3934 DB_DATA 2
RANGE $3934-$3936 DB_DATA 2
RANGE $3936-$3938 DB_DATA 2
RANGE $3938-$393A DB_DATA 2
RANGE $393A-$393C DB_DATA 2
RANGE $393C-$393E DB_DATA 2
RANGE $393E-$3940 DB_DATA 2
RANGE $3940-$3942 DB_DATA 2
RANGE $3942-$3944 DB_DATA 2
RANGE $3944-$3946 DB_DATA 2
RANGE $3946-$3948 DB_DATA 2
RANGE $3948-$394A DB_DATA 2
RANGE $394A-$394C DB_DATA 2
RANGE $394C-$394E DB_DATA 2
RANGE $394E-$3950 DB_DATA 2
RANGE $3950-$3952 DB_DATA 2
RANGE $3952-$3954 DB_DATA 2
RANGE $3954-$3956 DB_DATA 2
RANGE $3956-$3958 DB_DATA 2
RANGE $3958-$395A DB_DATA 2
RANGE $395A-$395C DB_DATA 2
RANGE $395C-$395D DB_DATA 1
RANGE $395D-$395F DW_DATA 1
RANGE $395F-$3960 DB_DATA 1
RANGE $3960-$3961 DB_DATA 1
RANGE $3961-$3963 DW_DATA 1
RANGE $3963-$3964 DB_DATA 1
RANGE $3964-$3965 DB_DATA 1
RANGE $3965-$3966 DB_DATA 1
RANGE $3966-$3967 DB_DATA 1
RANGE $3967-$3968 DB_DATA 1
RANGE $3968-$396A DW_DATA 1
RANGE $396A-$396B DB_DATA 1
RANGE $396B-$396C DB_DATA 1
RANGE $396C-$396E DW_DATA 1
RANGE $396E-$396F DB_DATA 1
RANGE $396F-$3970 DB_DATA 1
RANGE $3970-$3971 DB_DATA 1
RANGE $3971-$3972 DB_DATA 1
RANGE $3972-$3974 DW_DATA 1
RANGE $3974-$3976 DB_DATA 2
RANGE $3976-$3978 DB_DATA 2
RANGE $3978-$397A DB_DATA 2
RANGE $397A-$397C DB_DATA 2
RANGE $397C-$397E DB_DATA 2
RANGE $397E-$3980 DB_DATA 2
RANGE $3980-$3982 DB_DATA 2
RANGE $3982-$3984 DB_DATA 2
RANGE $3984-$3986 DB_DATA 2
RANGE $3986-$3988 DB_DATA 2
RANGE $3988-$398A DB_DATA 2
RANGE $398A-$398C DB_DATA 2
RANGE $398C-$398E DB_DATA 2
RANGE $398E-$3990 DB_DATA 2
RANGE $3990-$3992 DB_DATA 2
RANGE $3992-$3994 DB_DATA 2
RANGE $3994-$3996 DB_DATA 2
RANGE $3996-$3998 DB_DATA 2
RANGE $3998-$399A DB_DATA 2
RANGE $399A-$399C DB_DATA 2
RANGE $399C-$399E DB_DATA 2
RANGE $399E-$39A0 DB_DATA 2
RANGE $39A0-$39A1 DB_DATA 1
RANGE $39A1-$39A3 DW_DATA 1
RANGE $39A3-$39A4 DB_DATA 1
RANGE $39A4-$39A5 DB_DATA 1
RANGE $39A5-$39A7 DW_DATA 1
RANGE $39A7-$39A8 DB_DATA 1
RANGE $39A8-$39A9 DB_DATA 1
RANGE $39A9-$39AA DB_DATA 1
RANGE $39AA-$39AB DB_DATA 1
RANGE $39AB-$39AC DB_DATA 1
RANGE $39AC-$39AE DW_DATA 1
RANGE $39AE-$39AF DB_DATA 1
RANGE $39AF-$39B0 DB_DATA 1
RANGE $39B0-$39B2 DW_DATA 1
RANGE $39B2-$39B3 DB_DATA 1
RANGE $39B3-$39B4 DB_DATA 1
RANGE $39B4-$39B5 DB_DATA 1
RANGE $39B5-$39B6 DB_DATA 1
RANGE $39B6-$39B8 DW_DATA 1
RANGE $39B8-$39BA DB_DATA 2
RANGE $39BA-$39BC DB_DATA 2
RANGE $39BC-$39BE DB_DATA 2
RANGE $39BE-$39C0 DB_DATA 2
RANGE $39C0-$39C2 DB_DATA 2
RANGE $39C2-$39C4 DB_DATA 2
RANGE $39C4-$39C6 DB_DATA 2
RANGE $39C6-$39C8 DB_DATA 2
RANGE $39C8-$39CA DB_DATA 2
RANGE $39CA-$39CC DB_DATA 2
RANGE $39CC-$39CE DB_DATA 2
RANGE $39CE-$39D0 DB_DATA 2
RANGE $39D0-$39D2 DB_DATA 2
RANGE $39D2-$39D4 DB_DATA 2
RANGE $39D4-$39D6 DB_DATA 2
RANGE $39D6-$39D8 DB_DATA 2
RANGE $39D8-$39DA DB_DATA 2
RANGE $39DA-$39DC DB_DATA 2
RANGE $39DC-$39DE DB_DATA 2
RANGE $39DE-$39E0 DB_DATA 2
RANGE $39E0-$39E2 DB_DATA 2
RANGE $39E2-$39E4 DB_DATA 2
RANGE $39E4-$39E5 DB_DATA 1
RANGE $39E5-$39E7 DW_DATA 1
RANGE $39E7-$39E8 DB_DATA 1
RANGE $39E8-$39E9 DB_DATA 1
RANGE $39E9-$39EB DW_DATA 1
RANGE $39EB-$39EC DB_DATA 1
RANGE $39EC-$39ED DB_DATA 1
RANGE $39ED-$39EE DB_DATA 1
RANGE $39EE-$39EF DB_DATA 1
RANGE $39EF-$39F0 DB_DATA 1
RANGE $39F0-$39F2 DW_DATA 1
RANGE $39F2-$39F3 DB_DATA 1
RANGE $39F3-$39F4 DB_DATA 1
RANGE $39F4-$39F6 DW_DATA 1
RANGE $39F6-$39F7 DB_DATA 1
RANGE $39F7-$39F8 DB_DATA 1
RANGE $39F8-$39F9 DB_DATA 1
RANGE $39F9-$39FA DB_DATA 1
RANGE $39FA-$39FC DW_DATA 1
RANGE $39FC-$39FE DB_DATA 2
RANGE $39FE-$3A00 DB_DATA 2
RANGE $3A00-$3A02 DB_DATA 2
RANGE $3A02-$3A04 DB_DATA 2
RANGE $3A04-$3A06 DB_DATA 2
RANGE $3A06-$3A08 DB_DATA 2
RANGE $3A08-$3A0A DB_DATA 2
RANGE $3A0A-$3A0C DB_DATA 2
RANGE $3A0C-$3A0E DB_DATA 2
RANGE $3A0E-$3A10 DB_DATA 2
RANGE $3A10-$3A12 DB_DATA 2
RANGE $3A12-$3A14 DB_DATA 2
RANGE $3A14-$3A16 DB_DATA 2
RANGE $3A16-$3A18 DB_DATA 2
RANGE $3A18-$3A1A DB_DATA 2
RANGE $3A1A-$3A1C DB_DATA 2
RANGE $3A1C-$3A1E DB_DATA 2
RANGE $3A1E-$3A20 DB_DATA 2
RANGE $3A20-$3A22 DB_DATA 2
RANGE $3A22-$3A24 DB_DATA 2
RANGE $3A24-$3A26 DB_DATA 2
RANGE $3A26-$3A28 DB_DATA 2
RANGE $3A28-$3A29 DB_DATA 1
RANGE $3A29-$3A2B DW_DATA 1
RANGE $3A2B-$3A2C DB_DATA 1
RANGE $3A2C-$3A2D DB_DATA 1
RANGE $3A2D-$3A2F DW_DATA 1
RANGE $3A2F-$3A30 DB_DATA 1
RANGE $3A30-$3A31 DB_DATA 1
RANGE $3A31-$3A32 DB_DATA 1
RANGE $3A32-$3A33 DB_DATA 1
RANGE $3A33-$3A34 DB_DATA 1
RANGE $3A34-$3A36 DW_DATA 1
RANGE $3A36-$3A37 DB_DATA 1
RANGE $3A37-$3A38 DB_DATA 1
RANGE $3A38-$3A3A DW_DATA 1
RANGE $3A3A-$3A3B DB_DATA 1
RANGE $3A3B-$3A3C DB_DATA 1
RANGE $3A3C-$3A3D DB_DATA 1
RANGE $3A3D-$3A3E DB_DATA 1
RANGE $3A3E-$3A40 DW_DATA 1
RANGE $3A40-$3A42 DB_DATA 2
RANGE $3A42-$3A44 DB_DATA 2
RANGE $3A44-$3A46 DB_DATA 2
RANGE $3A46-$3A48 DB_DATA 2
RANGE $3A48-$3A4A DB_DATA 2
RANGE $3A4A-$3A4C DB_DATA 2
RANGE $3A4C-$3A4E DB_DATA 2
RANGE $3A4E-$3A50 DB_DATA 2
RANGE $3A50-$3A52 DB_DATA 2
RANGE $3A52-$3A54 DB_DATA 2
RANGE $3A54-$3A56 DB_DATA 2
RANGE $3A56-$3A58 DB_DATA 2
RANGE $3A58-$3A5A DB_DATA 2
RANGE $3A5A-$3A5C DB_DATA 2
RANGE $3A5C-$3A5E DB_DATA 2
RANGE $3A5E-$3A60 DB_DATA 2
RANGE $3A60-$3A62 DB_DATA 2
RANGE $3A62-$3A64 DB_DATA 2
RANGE $3A64-$3A66 DB_DATA 2
RANGE $3A66-$3A68 DB_DATA 2
RANGE $3A68-$3A6A DB_DATA 2
RANGE $3A6A-$3A6C DB_DATA 2
RANGE $3A6C-$3A6D DB_DATA 1
RANGE $3A6D-$3A6F DW_DATA 1
RANGE $3A6F-$3A70 DB_DATA 1
RANGE $3A70-$3A71 DB_DATA 1
RANGE $3A71-$3A73 DW_DATA 1
RANGE $3A73-$3A74 DB_DATA 1
RANGE $3A74-$3A75 DB_DATA 1
RANGE $3A75-$3A76 DB_DATA 1
RANGE $3A76-$3A77 DB_DATA 1
RANGE $3A77-$3A78 DB_DATA 1
RANGE $3A78-$3A7A DW_DATA 1
RANGE $3A7A-$3A7B DB_DATA 1
RANGE $3A7B-$3A7C DB_DATA 1
RANGE $3A7C-$3A7E DW_DATA 1
RANGE $3A7E-$3A7F DB_DATA 1
RANGE $3A7F-$3A80 DB_DATA 1
RANGE $3A80-$3A81 DB_DATA 1
RANGE $3A81-$3A82 DB_DATA 1
RANGE $3A82-$3A84 DW_DATA 1
RANGE $3A84-$3A86 DB_DATA 2
RANGE $3A86-$3A88 DB_DATA 2
RANGE $3A88-$3A8A DB_DATA 2
RANGE $3A8A-$3A8C DB_DATA 2
RANGE $3A8C-$3A8E DB_DATA 2
RANGE $3A8E-$3A90 DB_DATA 2
RANGE $3A90-$3A92 DB_DATA 2
RANGE $3A92-$3A94 DB_DATA 2
RANGE $3A94-$3A96 DB_DATA 2
RANGE $3A96-$3A98 DB_DATA 2
RANGE $3A98-$3A9A DB_DATA 2
RANGE $3A9A-$3A9C DB_DATA 2
RANGE $3A9C-$3A9E DB_DATA 2
RANGE $3A9E-$3AA0 DB_DATA 2
RANGE $3AA0-$3AA2 DB_DATA 2
RANGE $3AA2-$3AA4 DB_DATA 2
RANGE $3AA4-$3AA6 DB_DATA 2
RANGE $3AA6-$3AA8 DB_DATA 2
RANGE $3AA8-$3AAA DB_DATA 2
RANGE $3AAA-$3AAC DB_DATA 2
RANGE $3AAC-$3AAE DB_DATA 2
RANGE $3AAE-$3AB0 DB_DATA 2
RANGE $3AB0-$3AB1 DB_DATA 1
RANGE $3AB1-$3AB3 DW_DATA 1
RANGE $3AB3-$3AB4 DB_DATA 1
RANGE $3AB4-$3AB5 DB_DATA 1
RANGE $3AB5-$3AB7 DW_DATA 1
RANGE $3AB7-$3AB8 DB_DATA 1
RANGE $3AB8-$3AB9 DB_DATA 1
RANGE $3AB9-$3ABA DB_DATA 1
RANGE $3ABA-$3ABB DB_DATA 1
RANGE $3ABB-$3ABC DB_DATA 1
RANGE $3ABC-$3ABE DW_DATA 1
RANGE $3ABE-$3ABF DB_DATA 1
RANGE $3ABF-$3AC0 DB_DATA 1
RANGE $3AC0-$3AC2 DW_DATA 1
RANGE $3AC2-$3AC3 DB_DATA 1
RANGE $3AC3-$3AC4 DB_DATA 1
RANGE $3AC4-$3AC5 DB_DATA 1
RANGE $3AC5-$3AC6 DB_DATA 1
RANGE $3AC6-$3AC8 DW_DATA 1
RANGE $3AC8-$3ACA DB_DATA 2
RANGE $3ACA-$3ACC DB_DATA 2
RANGE $3ACC-$3ACE DB_DATA 2
RANGE $3ACE-$3AD0 DB_DATA 2
RANGE $3AD0-$3AD2 DB_DATA 2
RANGE $3AD2-$3AD4 DB_DATA 2
RANGE $3AD4-$3AD6 DB_DATA 2
RANGE $3AD6-$3AD8 DB_DATA 2
RANGE $3AD8-$3ADA DB_DATA 2
RANGE $3ADA-$3ADC DB_DATA 2
RANGE $3ADC-$3ADE DB_DATA 2
RANGE $3ADE-$3AE0 DB_DATA 2
RANGE $3AE0-$3AE2 DB_DATA 2
RANGE $3AE2-$3AE4 DB_DATA 2
RANGE $3AE4-$3AE6 DB_DATA 2
RANGE $3AE6-$3AE8 DB_DATA 2
RANGE $3AE8-$3AEA DB_DATA 2
RANGE $3AEA-$3AEC DB_DATA 2
RANGE $3AEC-$3AEE DB_DATA 2
RANGE $3AEE-$3AF0 DB_DATA 2
RANGE $3AF0-$3AF2 DB_DATA 2
RANGE $3AF2-$3AF4 DB_DATA 2
RANGE $3AF4-$3AF5 DB_DATA 1
RANGE $3AF5-$3AF7 DW_DATA 1
RANGE $3AF7-$3AF8 DB_DATA 1
RANGE $3AF8-$3AF9 DB_DATA 1
RANGE $3AF9-$3AFB DW_DATA 1
RANGE $3AFB-$3AFC DB_DATA 1
RANGE $3AFC-$3AFD DB_DATA 1
RANGE $3AFD-$3AFE DB_DATA 1
RANGE $3AFE-$3AFF DB_DATA 1
RANGE $3AFF-$3B00 DB_DATA 1
RANGE $3B00-$3B02 DW_DATA 1
RANGE $3B02-$3B03 DB_DATA 1
RANGE $3B03-$3B04 DB_DATA 1
RANGE $3B04-$3B06 DW_DATA 1
RANGE $3B06-$3B07 DB_DATA 1
RANGE $3B07-$3B08 DB_DATA 1
RANGE $3B08-$3B09 DB_DATA 1
RANGE $3B09-$3B0A DB_DATA 1
RANGE $3B0A-$3B0C DW_DATA 1
RANGE $3B0C-$3B0E DB_DATA 2
RANGE $3B0E-$3B10 DB_DATA 2
RANGE $3B10-$3B12 DB_DATA 2
RANGE $3B12-$3B14 DB_DATA 2
RANGE $3B14-$3B16 DB_DATA 2
RANGE $3B16-$3B18 DB_DATA 2
RANGE $3B18-$3B1A DB_DATA 2
RANGE $3B1A-$3B1C DB_DATA 2
RANGE $3B1C-$3B1E DB_DATA 2
RANGE $3B1E-$3B20 DB_DATA 2
RANGE $3B20-$3B22 DB_DATA 2
RANGE $3B22-$3B24 DB_DATA 2
RANGE $3B24-$3B26 DB_DATA 2
RANGE $3B26-$3B28 DB_DATA 2
RANGE $3B28-$3B2A DB_DATA 2
RANGE $3B2A-$3B2C DB_DATA 2
RANGE $3B2C-$3B2E DB_DATA 2
RANGE $3B2E-$3B30 DB_DATA 2
RANGE $3B30-$3B32 DB_DATA 2
RANGE $3B32-$3B34 DB_DATA 2
RANGE $3B34-$3B36 DB_DATA 2
RANGE $3B36-$3B38 DB_DATA 2
RANGE $3B38-$3B39 DB_DATA 1
RANGE $3B39-$3B3B DW_DATA 1
RANGE $3B3B-$3B3C DB_DATA 1
RANGE $3B3C-$3B3D DB_DATA 1
RANGE $3B3D-$3B3F DW_DATA 1
RANGE $3B3F-$3B40 DB_DATA 1
RANGE $3B40-$3B41 DB_DATA 1
RANGE $3B41-$3B42 DB_DATA 1
RANGE $3B42-$3B43 DB_DATA 1
RANGE $3B43-$3B44 DB_DATA 1
RANGE $3B44-$3B46 DW_DATA 1
RANGE $3B46-$3B47 DB_DATA 1
RANGE $3B47-$3B48 DB_DATA 1
RANGE $3B48-$3B4A DW_DATA 1
RANGE $3B4A-$3B4B DB_DATA 1
RANGE $3B4B-$3B4C DB_DATA 1
RANGE $3B4C-$3B4D DB_DATA 1
RANGE $3B4D-$3B4E DB_DATA 1
RANGE $3B4E-$3B50 DW_DATA 1
RANGE $3B50-$3B52 DB_DATA 2
RANGE $3B52-$3B54 DB_DATA 2
RANGE $3B54-$3B56 DB_DATA 2
RANGE $3B56-$3B58 DB_DATA 2
RANGE $3B58-$3B5A DB_DATA 2
RANGE $3B5A-$3B5C DB_DATA 2
RANGE $3B5C-$3B5E DB_DATA 2
RANGE $3B5E-$3B60 DB_DATA 2
RANGE $3B60-$3B62 DB_DATA 2
RANGE $3B62-$3B64 DB_DATA 2
RANGE $3B64-$3B66 DB_DATA 2
RANGE $3B66-$3B68 DB_DATA 2
RANGE $3B68-$3B6A DB_DATA 2
RANGE $3B6A-$3B6C DB_DATA 2
RANGE $3B6C-$3B6E DB_DATA 2
RANGE $3B6E-$3B70 DB_DATA 2
RANGE $3B70-$3B72 DB_DATA 2
RANGE $3B72-$3B73 DB_DATA 1
RANGE $3B73-$3B75 DW_DATA 1
RANGE $3B75-$3B76 DB_DATA 1
RANGE $3B76-$3B77 DB_DATA 1
RANGE $3B77-$3B79 DW_DATA 1
RANGE $3B79-$3B7A DB_DATA 1
RANGE $3B7A-$3B7B DB_DATA 1
RANGE $3B7B-$3B7C DB_DATA 1
RANGE $3B7C-$3B7D DB_DATA 1
RANGE $3B7D-$3B7E DB_DATA 1
RANGE $3B7E-$3B80 DW_DATA 1
RANGE $3B80-$3B81 DB_DATA 1
RANGE $3B81-$3B82 DB_DATA 1
RANGE $3B82-$3B84 DW_DATA 1
RANGE $3B84-$3B85 DB_DATA 1
RANGE $3B85-$3B86 DB_DATA 1
RANGE $3B86-$3B87 DB_DATA 1
RANGE $3B87-$3B88 DB_DATA 1
RANGE $3B88-$3B8A DW_DATA 1
RANGE $3B8A-$3B8C DB_DATA 2
RANGE $3B8C-$3B8E DB_DATA 2
RANGE $3B8E-$3B90 DB_DATA 2
RANGE $3B90-$3B92 DB_DATA 2
RANGE $3B92-$3B94 DB_DATA 2
RANGE $3B94-$3B96 DB_DATA 2
RANGE $3B96-$3B98 DB_DATA 2
RANGE $3B98-$3B9A DB_DATA 2
RANGE $3B9A-$3B9C DB_DATA 2
RANGE $3B9C-$3B9E DB_DATA 2
RANGE $3B9E-$3BA0 DB_DATA 2
RANGE $3BA0-$3BA2 DB_DATA 2
RANGE $3BA2-$3BA4 DB_DATA 2
RANGE $3BA4-$3BA6 DB_DATA 2
RANGE $3BA6-$3BA8 DB_DATA 2
RANGE $3BA8-$3BAA DB_DATA 2
RANGE $3BAA-$3BAC DB_DATA 2
RANGE $3BAC-$3BAD DB_DATA 1
RANGE $3BAD-$3BAF DW_DATA 1
RANGE $3BAF-$3BB0 DB_DATA 1
RANGE $3BB0-$3BB1 DB_DATA 1
RANGE $3BB1-$3BB3 DW_DATA 1
RANGE $3BB3-$3BB4 DB_DATA 1
RANGE $3BB4-$3BB5 DB_DATA 1
RANGE $3BB5-$3BB6 DB_DATA 1
RANGE $3BB6-$3BB7 DB_DATA 1
RANGE $3BB7-$3BB8 DB_DATA 1
RANGE $3BB8-$3BBA DW_DATA 1
RANGE $3BBA-$3BBB DB_DATA 1
RANGE $3BBB-$3BBC DB_DATA 1
RANGE $3BBC-$3BBE DW_DATA 1
RANGE $3BBE-$3BBF DB_DATA 1
RANGE $3BBF-$3BC0 DB_DATA 1
RANGE $3BC0-$3BC1 DB_DATA 1
RANGE $3BC1-$3BC2 DB_DATA 1
RANGE $3BC2-$3BC4 DW_DATA 1
RANGE $3BC4-$3BC6 DB_DATA 2
RANGE $3BC6-$3BC8 DB_DATA 2
RANGE $3BC8-$3BCA DB_DATA 2
RANGE $3BCA-$3BCC DB_DATA 2
RANGE $3BCC-$3BCE DB_DATA 2
RANGE $3BCE-$3BD0 DB_DATA 2
RANGE $3BD0-$3BD2 DB_DATA 2
RANGE $3BD2-$3BD4 DB_DATA 2
RANGE $3BD4-$3BD6 DB_DATA 2
RANGE $3BD6-$3BD8 DB_DATA 2
RANGE $3BD8-$3BDA DB_DATA 2
RANGE $3BDA-$3BDC DB_DATA 2
RANGE $3BDC-$3BDE DB_DATA 2
RANGE $3BDE-$3BE0 DB_DATA 2
RANGE $3BE0-$3BE2 DB_DATA 2
RANGE $3BE2-$3BE4 DB_DATA 2
RANGE $3BE4-$3BE6 DB_DATA 2
RANGE $3BE6-$3BE7 DB_DATA 1
RANGE $3BE7-$3BE9 DW_DATA 1
RANGE $3BE9-$3BEA DB_DATA 1
RANGE $3BEA-$3BEB DB_DATA 1
RANGE $3BEB-$3BED DW_DATA 1
RANGE $3BED-$3BEE DB_DATA 1
RANGE $3BEE-$3BEF DB_DATA 1
RANGE $3BEF-$3BF0 DB_DATA 1
RANGE $3BF0-$3BF1 DB_DATA 1
RANGE $3BF1-$3BF2 DB_DATA 1
RANGE $3BF2-$3BF4 DW_DATA 1
RANGE $3BF4-$3BF5 DB_DATA 1
RANGE $3BF5-$3BF6 DB_DATA 1
RANGE $3BF6-$3BF8 DW_DATA 1
RANGE $3BF8-$3BF9 DB_DATA 1
RANGE $3BF9-$3BFA DB_DATA 1
RANGE $3BFA-$3BFB DB_DATA 1
RANGE $3BFB-$3BFC DB_DATA 1
RANGE $3BFC-$3BFD DB_DATA 1
RANGE $3BFD-$3BFF DW_DATA 1
RANGE $3BFF-$3C00 DB_DATA 1
RANGE $3C00-$3C01 DB_DATA 1
RANGE $3C01-$3C03 DW_DATA 1
RANGE $3C03-$3C04 DB_DATA 1
RANGE $3C04-$3C05 DB_DATA 1
RANGE $3C05-$3C06 DB_DATA 1
RANGE $3C06-$3C07 DB_DATA 1
RANGE $3C07-$3C08 DB_DATA 1
RANGE $3C08-$3C0A DW_DATA 1
RANGE $3C0A-$3C0B DB_DATA 1
RANGE $3C0B-$3C0C DB_DATA 1
RANGE $3C0C-$3C0E DW_DATA 1
RANGE $3C0E-$3C0F DB_DATA 1
RANGE $3C0F-$3C10 DB_DATA 1
RANGE $3C10-$3C11 DB_DATA 1
RANGE $3C11-$3C12 DB_DATA 1
RANGE $3C12-$3C14 DW_DATA 1
RANGE $3C14-$3C16 DB_DATA 2
RANGE $3C16-$3C18 DB_DATA 2
RANGE $3C18-$3C1A DB_DATA 2
RANGE $3C1A-$3C1C DB_DATA 2
RANGE $3C1C-$3C1E DB_DATA 2
RANGE $3C1E-$3C20 DB_DATA 2
RANGE $3C20-$3C22 DB_DATA 2
RANGE $3C22-$3C24 DB_DATA 2
RANGE $3C24-$3C26 DB_DATA 2
RANGE $3C26-$3C28 DB_DATA 2
RANGE $3C28-$3C2A DB_DATA 2
RANGE $3C2A-$3C2C DB_DATA 2
RANGE $3C2C-$3C2E DB_DATA 2
RANGE $3C2E-$3C30 DB_DATA 2
RANGE $3C30-$3C32 DB_DATA 2
RANGE $3C32-$3C34 DB_DATA 2
RANGE $3C34-$3C36 DB_DATA 2
RANGE $3C36-$3C37 DB_DATA 1
RANGE $3C37-$3C39 DW_DATA 1
RANGE $3C39-$3C3A DB_DATA 1
RANGE $3C3A-$3C3B DB_DATA 1
RANGE $3C3B-$3C3D DW_DATA 1
RANGE $3C3D-$3C3E DB_DATA 1
RANGE $3C3E-$3C3F DB_DATA 1
RANGE $3C3F-$3C40 DB_DATA 1
RANGE $3C40-$3C41 DB_DATA 1
RANGE $3C41-$3C42 DB_DATA 1
RANGE $3C42-$3C44 DW_DATA 1
RANGE $3C44-$3C45 DB_DATA 1
RANGE $3C45-$3C46 DB_DATA 1
RANGE $3C46-$3C48 DW_DATA 1
RANGE $3C48-$3C49 DB_DATA 1
RANGE $3C49-$3C4A DB_DATA 1
RANGE $3C4A-$3C4B DB_DATA 1
RANGE $3C4B-$3C4C DB_DATA 1
RANGE $3C4C-$3C4E DW_DATA 1
RANGE $3C4E-$3C50 DB_DATA 2
RANGE $3C50-$3C52 DB_DATA 2
RANGE $3C52-$3C54 DB_DATA 2
RANGE $3C54-$3C56 DB_DATA 2
RANGE $3C56-$3C58 DB_DATA 2
RANGE $3C58-$3C5A DB_DATA 2
RANGE $3C5A-$3C5C DB_DATA 2
RANGE $3C5C-$3C5E DB_DATA 2
RANGE $3C5E-$3C60 DB_DATA 2
RANGE $3C60-$3C62 DB_DATA 2
RANGE $3C62-$3C64 DB_DATA 2
RANGE $3C64-$3C66 DB_DATA 2
RANGE $3C66-$3C68 DB_DATA 2
RANGE $3C68-$3C6A DB_DATA 2
RANGE $3C6A-$3C6C DB_DATA 2
RANGE $3C6C-$3C6E DB_DATA 2
RANGE $3C6E-$3C70 DB_DATA 2
RANGE $3C70-$3C71 DB_DATA 1
RANGE $3C71-$3C73 DW_DATA 1
RANGE $3C73-$3C74 DB_DATA 1
RANGE $3C74-$3C75 DB_DATA 1
RANGE $3C75-$3C77 DW_DATA 1
RANGE $3C77-$3C78 DB_DATA 1
RANGE $3C78-$3C79 DB_DATA 1
RANGE $3C79-$3C7A DB_DATA 1
RANGE $3C7A-$3C7B DB_DATA 1
RANGE $3C7B-$3C7C DB_DATA 1
RANGE $3C7C-$3C7E DW_DATA 1
RANGE $3C7E-$3C7F DB_DATA 1
RANGE $3C7F-$3C80 DB_DATA 1
RANGE $3C80-$3C82 DW_DATA 1
RANGE $3C82-$3C83 DB_DATA 1
RANGE $3C83-$3C84 DB_DATA 1
RANGE $3C84-$3C85 DB_DATA 1
RANGE $3C85-$3C86 DB_DATA 1
RANGE $3C86-$3C88 DW_DATA 1
RANGE $3C88-$3C8A DB_DATA 2
RANGE $3C8A-$3C8C DB_DATA 2
RANGE $3C8C-$3C8E DB_DATA 2
RANGE $3C8E-$3C90 DB_DATA 2
RANGE $3C90-$3C92 DB_DATA 2
RANGE $3C92-$3C94 DB_DATA 2
RANGE $3C94-$3C96 DB_DATA 2
RANGE $3C96-$3C98 DB_DATA 2
RANGE $3C98-$3C9A DB_DATA 2
RANGE $3C9A-$3C9C DB_DATA 2
RANGE $3C9C-$3C9E DB_DATA 2
RANGE $3C9E-$3CA0 DB_DATA 2
RANGE $3CA0-$3CA2 DB_DATA 2
RANGE $3CA2-$3CA4 DB_DATA 2
RANGE $3CA4-$3CA6 DB_DATA 2
RANGE $3CA6-$3CA8 DB_DATA 2
RANGE $3CA8-$3CAA DB_DATA 2
RANGE $3CAA-$3CAB DB_DATA 1
RANGE $3CAB-$3CAD DW_DATA 1
RANGE $3CAD-$3CAE DB_DATA 1
RANGE $3CAE-$3CAF DB_DATA 1
RANGE $3CAF-$3CB1 DW_DATA 1
RANGE $3CB1-$3CB2 DB_DATA 1
RANGE $3CB2-$3CB3 DB_DATA 1
RANGE $3CB3-$3CB4 DB_DATA 1
RANGE $3CB4-$3CB5 DB_DATA 1
RANGE $3CB5-$3CB6 DB_DATA 1
RANGE $3CB6-$3CB8 DW_DATA 1
RANGE $3CB8-$3CB9 DB_DATA 1
RANGE $3CB9-$3CBA DB_DATA 1
RANGE $3CBA-$3CBC DW_DATA 1
RANGE $3CBC-$3CBD DB_DATA 1
RANGE $3CBD-$3CBE DB_DATA 1
RANGE $3CBE-$3CBF DB_DATA 1
RANGE $3CBF-$3CC0 DB_DATA 1
RANGE $3CC0-$3CC1 DB_DATA 1
RANGE $3CC1-$3CC3 DW_DATA 1
RANGE $3CC3-$3CC4 DB_DATA 1
RANGE $3CC4-$3CC5 DB_DATA 1
RANGE $3CC5-$3CC7 DW_DATA 1
RANGE $3CC7-$3CC8 DB_DATA 1
RANGE $3CC8-$3CC9 DB_DATA 1
RANGE $3CC9-$3CCA DB_DATA 1
RANGE $3CCA-$3CCB DB_DATA 1
RANGE $3CCB-$3CCC DB_DATA 1
RANGE $3CCC-$3CCE DW_DATA 1
RANGE $3CCE-$3CCF DB_DATA 1
RANGE $3CCF-$3CD0 DB_DATA 1
RANGE $3CD0-$3CD2 DW_DATA 1
RANGE $3CD2-$3CD3 DB_DATA 1
RANGE $3CD3-$3CD4 DB_DATA 1
RANGE $3CD4-$3CD5 DB_DATA 1
RANGE $3CD5-$3CD6 DB_DATA 1
RANGE $3CD6-$3CD8 DW_DATA 1
RANGE $3CD8-$3CDA DB_DATA 2
RANGE $3CDA-$3CDC DB_DATA 2
RANGE $3CDC-$3CDE DB_DATA 2
RANGE $3CDE-$3CE0 DB_DATA 2
RANGE $3CE0-$3CE2 DB_DATA 2
RANGE $3CE2-$3CE4 DB_DATA 2
RANGE $3CE4-$3CE6 DB_DATA 2
RANGE $3CE6-$3CE8 DB_DATA 2
RANGE $3CE8-$3CEA DB_DATA 2
RANGE $3CEA-$3CEC DB_DATA 2
RANGE $3CEC-$3CEE DB_DATA 2
RANGE $3CEE-$3CF0 DB_DATA 2
RANGE $3CF0-$3CF2 DB_DATA 2
RANGE $3CF2-$3CF4 DB_DATA 2
RANGE $3CF4-$3CF6 DB_DATA 2
RANGE $3CF6-$3CF8 DB_DATA 2
RANGE $3CF8-$3CFA DB_DATA 2
RANGE $3CFA-$3CFC DB_DATA 2
RANGE $3CFC-$3CFD DB_DATA 1
RANGE $3CFD-$3CFF DW_DATA 1
RANGE $3CFF-$3D00 DB_DATA 1
RANGE $3D00-$3D01 DB_DATA 1
RANGE $3D01-$3D03 DW_DATA 1
RANGE $3D03-$3D04 DB_DATA 1
RANGE $3D04-$3D05 DB_DATA 1
RANGE $3D05-$3D06 DB_DATA 1
RANGE $3D06-$3D07 DB_DATA 1
RANGE $3D07-$3D09 DW_DATA 1
RANGE $3D09-$3D0B DB_DATA 2
RANGE $3D0B-$3D0D DB_DATA 2
RANGE $3D0D-$3D0F DB_DATA 2
RANGE $3D0F-$3D11 DB_DATA 2
RANGE $3D11-$3D13 DB_DATA 2
RANGE $3D13-$3D15 DB_DATA 2
RANGE $3D15-$3D17 DB_DATA 2
RANGE $3D17-$3D19 DB_DATA 2
RANGE $3D19-$3D1B DB_DATA 2
RANGE $3D1B-$3D1D DB_DATA 2
RANGE $3D1D-$3D1F DB_DATA 2
RANGE $3D1F-$3D21 DB_DATA 2
RANGE $3D21-$3D23 DB_DATA 2
RANGE $3D23-$3D25 DB_DATA 2
RANGE $3D25-$3D27 DB_DATA 2
RANGE $3D27-$3D29 DB_DATA 2
RANGE $3D29-$3D2B DB_DATA 2
RANGE $3D2B-$3D2D DB_DATA 2
RANGE $3D2D-$3D2E DB_DATA 1
RANGE $3D2E-$3D30 DW_DATA 1
RANGE $3D30-$3D31 DB_DATA 1
RANGE $3D31-$3D32 DB_DATA 1
RANGE $3D32-$3D34 DW_DATA 1
RANGE $3D34-$3D35 DB_DATA 1
RANGE $3D35-$3D36 DB_DATA 1
RANGE $3D36-$3D37 DB_DATA 1
RANGE $3D37-$3D38 DB_DATA 1
RANGE $3D38-$3D3A DW_DATA 1
RANGE $3D3A-$3D3C DB_DATA 2
RANGE $3D3C-$3D3E DB_DATA 2
RANGE $3D3E-$3D40 DB_DATA 2
RANGE $3D40-$3D42 DB_DATA 2
RANGE $3D42-$3D44 DB_DATA 2
RANGE $3D44-$3D46 DB_DATA 2
RANGE $3D46-$3D48 DB_DATA 2
RANGE $3D48-$3D4A DB_DATA 2
RANGE $3D4A-$3D4C DB_DATA 2
RANGE $3D4C-$3D4E DB_DATA 2
RANGE $3D4E-$3D50 DB_DATA 2
RANGE $3D50-$3D52 DB_DATA 2
RANGE $3D52-$3D54 DB_DATA 2
RANGE $3D54-$3D56 DB_DATA 2
RANGE $3D56-$3D58 DB_DATA 2
RANGE $3D58-$3D5A DB_DATA 2
RANGE $3D5A-$3D5C DB_DATA 2
RANGE $3D5C-$3D5E DB_DATA 2
RANGE $3D5E-$3D5F DB_DATA 1
RANGE $3D5F-$3D61 DW_DATA 1
RANGE $3D61-$3D62 DB_DATA 1
RANGE $3D62-$3D63 DB_DATA 1
RANGE $3D63-$3D65 DW_DATA 1
RANGE $3D65-$3D66 DB_DATA 1
RANGE $3D66-$3D67 DB_DATA 1
RANGE $3D67-$3D68 DB_DATA 1
RANGE $3D68-$3D69 DB_DATA 1
RANGE $3D69-$3D6A DB_DATA 1
RANGE $3D6A-$3D6C DW_DATA 1
RANGE $3D6C-$3D6D DB_DATA 1
RANGE $3D6D-$3D6E DB_DATA 1
RANGE $3D6E-$3D70 DW_DATA 1
RANGE $3D70-$3D71 DB_DATA 1
RANGE $3D71-$3D72 DB_DATA 1
RANGE $3D72-$3D73 DB_DATA 1
RANGE $3D73-$3D74 DB_DATA 1
RANGE $3D74-$3D75 DB_DATA 1
RANGE $3D75-$3D77 DW_DATA 1
RANGE $3D77-$3D78 DB_DATA 1
RANGE $3D78-$3D79 DB_DATA 1
RANGE $3D79-$3D7B DW_DATA 1
RANGE $3D7B-$3D7C DB_DATA 1
RANGE $3D7C-$3D7D DB_DATA 1
RANGE $3D7D-$3D7E DB_DATA 1
RANGE $3D7E-$3D7F DB_DATA 1
RANGE $3D7F-$3D80 DB_DATA 1
RANGE $3D80-$3D82 DW_DATA 1
RANGE $3D82-$3D83 DB_DATA 1
RANGE $3D83-$3D84 DB_DATA 1
RANGE $3D84-$3D86 DW_DATA 1
RANGE $3D86-$3D87 DB_DATA 1
RANGE $3D87-$3D88 DB_DATA 1
RANGE $3D88-$3D89 DB_DATA 1
RANGE $3D89-$3D8A DB_DATA 1
RANGE $3D8A-$3D8C DW_DATA 1
RANGE $3D8C-$3D8E DB_DATA 2
RANGE $3D8E-$3D90 DB_DATA 2
RANGE $3D90-$3D92 DB_DATA 2
RANGE $3D92-$3D94 DB_DATA 2
RANGE $3D94-$3D96 DB_DATA 2
RANGE $3D96-$3D98 DB_DATA 2
RANGE $3D98-$3D9A DB_DATA 2
RANGE $3D9A-$3D9C DB_DATA 2
RANGE $3D9C-$3D9E DB_DATA 2
RANGE $3D9E-$3DA0 DB_DATA 2
RANGE $3DA0-$3DA2 DB_DATA 2
RANGE $3DA2-$3DA4 DB_DATA 2
RANGE $3DA4-$3DA6 DB_DATA 2
RANGE $3DA6-$3DA8 DB_DATA 2
RANGE $3DA8-$3DAA DB_DATA 2
RANGE $3DAA-$3DAC DB_DATA 2
RANGE $3DAC-$3DAE DB_DATA 2
RANGE $3DAE-$3DAF DB_DATA 1
RANGE $3DAF-$3DB1 DW_DATA 1
RANGE $3DB1-$3DB2 DB_DATA 1
RANGE $3DB2-$3DB3 DB_DATA 1
RANGE $3DB3-$3DB5 DW_DATA 1
RANGE $3DB5-$3DB6 DB_DATA 1
RANGE $3DB6-$3DB7 DB_DATA 1
RANGE $3DB7-$3DB8 DB_DATA 1
RANGE $3DB8-$3DB9 DB_DATA 1
RANGE $3DB9-$3DBA DB_DATA 1
RANGE $3DBA-$3DBC DW_DATA 1
RANGE $3DBC-$3DBD DB_DATA 1
RANGE $3DBD-$3DBE DB_DATA 1
RANGE $3DBE-$3DC0 DW_DATA 1
RANGE $3DC0-$3DC1 DB_DATA 1
RANGE $3DC1-$3DC2 DB_DATA 1
RANGE $3DC2-$3DC3 DB_DATA 1
RANGE $3DC3-$3DC4 DB_DATA 1
RANGE $3DC4-$3DC5 DB_DATA 1
RANGE $3DC5-$3DC7 DW_DATA 1
RANGE $3DC7-$3DC8 DB_DATA 1
RANGE $3DC8-$3DC9 DB_DATA 1
RANGE $3DC9-$3DCB DW_DATA 1
RANGE $3DCB-$3DCC DB_DATA 1
RANGE $3DCC-$3DCD DB_DATA 1
RANGE $3DCD-$3DCE DB_DATA 1
RANGE $3DCE-$3DCF DB_DATA 1
RANGE $3DCF-$3DD1 DW_DATA 1
RANGE $3DD1-$3DD3 DB_DATA 2
RANGE $3DD3-$3DD5 DB_DATA 2
RANGE $3DD5-$3DD7 DB_DATA 2
RANGE $3DD7-$3DD9 DB_DATA 2
RANGE $3DD9-$3DDB DB_DATA 2
RANGE $3DDB-$3DDD DB_DATA 2
RANGE $3DDD-$3DDF DB_DATA 2
RANGE $3DDF-$3DE1 DB_DATA 2
RANGE $3DE1-$3DE3 DB_DATA 2
RANGE $3DE3-$3DE5 DB_DATA 2
RANGE $3DE5-$3DE7 DB_DATA 2
RANGE $3DE7-$3DE9 DB_DATA 2
RANGE $3DE9-$3DEB DB_DATA 2
RANGE $3DEB-$3DED DB_DATA 2
RANGE $3DED-$3DEF DB_DATA 2
RANGE $3DEF-$3DF1 DB_DATA 2
RANGE $3DF1-$3DF3 DB_DATA 2
RANGE $3DF3-$3DF4 DB_DATA 1
RANGE $3DF4-$3DF6 DW_DATA 1
RANGE $3DF6-$3DF7 DB_DATA 1
RANGE $3DF7-$3DF8 DB_DATA 1
RANGE $3DF8-$3DFA DW_DATA 1
RANGE $3DFA-$3DFB DB_DATA 1
RANGE $3DFB-$3DFC DB_DATA 1
RANGE $3DFC-$3DFD DB_DATA 1
RANGE $3DFD-$3DFE DB_DATA 1
RANGE $3DFE-$3DFF DB_DATA 1
RANGE $3DFF-$3E01 DW_DATA 1
RANGE $3E01-$3E02 DB_DATA 1
RANGE $3E02-$3E03 DB_DATA 1
RANGE $3E03-$3E05 DW_DATA 1
RANGE $3E05-$3E06 DB_DATA 1
RANGE $3E06-$3E07 DB_DATA 1
RANGE $3E07-$3E08 DB_DATA 1
RANGE $3E08-$3E09 DB_DATA 1
RANGE $3E09-$3E0A DB_DATA 1
RANGE $3E0A-$3E0C DW_DATA 1
RANGE $3E0C-$3E0D DB_DATA 1
RANGE $3E0D-$3E0E DB_DATA 1
RANGE $3E0E-$3E10 DW_DATA 1
RANGE $3E10-$3E11 DB_DATA 1
RANGE $3E11-$3E12 DB_DATA 1
RANGE $3E12-$3E13 DB_DATA 1
RANGE $3E13-$3E14 DB_DATA 1
RANGE $3E14-$3E16 DW_DATA 1
RANGE $3E16-$3E18 DB_DATA 2
RANGE $3E18-$3E1A DB_DATA 2
RANGE $3E1A-$3E1C DB_DATA 2
RANGE $3E1C-$3E1E DB_DATA 2
RANGE $3E1E-$3E20 DB_DATA 2
RANGE $3E20-$3E22 DB_DATA 2
RANGE $3E22-$3E24 DB_DATA 2
RANGE $3E24-$3E26 DB_DATA 2
RANGE $3E26-$3E28 DB_DATA 2
RANGE $3E28-$3E2A DB_DATA 2
RANGE $3E2A-$3E2C DB_DATA 2
RANGE $3E2C-$3E2E DB_DATA 2
RANGE $3E2E-$3E30 DB_DATA 2
RANGE $3E30-$3E32 DB_DATA 2
RANGE $3E32-$3E34 DB_DATA 2
RANGE $3E34-$3E36 DB_DATA 2
RANGE $3E36-$3E38 DB_DATA 2
RANGE $3E38-$3E39 DB_DATA 1
RANGE $3E39-$3E3B DW_DATA 1
RANGE $3E3B-$3E3C DB_DATA 1
RANGE $3E3C-$3E3D DB_DATA 1
RANGE $3E3D-$3E3F DW_DATA 1
RANGE $3E3F-$3E40 DB_DATA 1
RANGE $3E40-$3E41 DB_DATA 1
RANGE $3E41-$3E42 DB_DATA 1
RANGE $3E42-$3E43 DB_DATA 1
RANGE $3E43-$3E44 DB_DATA 1
RANGE $3E44-$3E46 DW_DATA 1
RANGE $3E46-$3E47 DB_DATA 1
RANGE $3E47-$3E48 DB_DATA 1
RANGE $3E48-$3E4A DW_DATA 1
RANGE $3E4A-$3E4B DB_DATA 1
RANGE $3E4B-$3E4C DB_DATA 1
RANGE $3E4C-$3E4D DB_DATA 1
RANGE $3E4D-$3E4E DB_DATA 1
RANGE $3E4E-$3E4F DB_DATA 1
RANGE $3E4F-$3E51 DW_DATA 1
RANGE $3E51-$3E52 DB_DATA 1
RANGE $3E52-$3E53 DB_DATA 1
RANGE $3E53-$3E55 DW_DATA 1
RANGE $3E55-$3E56 DB_DATA 1
RANGE $3E56-$3E57 DB_DATA 1
RANGE $3E57-$3E58 DB_DATA 1
RANGE $3E58-$3E59 DB_DATA 1
RANGE $3E59-$3E5A DB_DATA 1
RANGE $3E5A-$3E5C DW_DATA 1
RANGE $3E5C-$3E5D DB_DATA 1
RANGE $3E5D-$3E5E DB_DATA 1
RANGE $3E5E-$3E60 DW_DATA 1
RANGE $3E60-$3E61 DB_DATA 1
RANGE $3E61-$3E62 DB_DATA 1
RANGE $3E62-$3E63 DB_DATA 1
RANGE $3E63-$3E64 DB_DATA 1
RANGE $3E64-$3E65 DB_DATA 1
RANGE $3E65-$3E67 DW_DATA 1
RANGE $3E67-$3E68 DB_DATA 1
RANGE $3E68-$3E69 DB_DATA 1
RANGE $3E69-$3E6B DW_DATA 1
RANGE $3E6B-$3E6C DB_DATA 1
RANGE $3E6C-$3E6D DB_DATA 1
RANGE $3E6D-$3E6E DB_DATA 1
RANGE $3E6E-$3E6F DB_DATA 1
RANGE $3E6F-$3E70 DB_DATA 1
RANGE $3E70-$3E72 DW_DATA 1
RANGE $3E72-$3E73 DB_DATA 1
RANGE $3E73-$3E74 DB_DATA 1
RANGE $3E74-$3E76 DW_DATA 1
RANGE $3E76-$3E77 DB_DATA 1
RANGE $3E77-$3E78 DB_DATA 1
RANGE $3E78-$3E79 DB_DATA 1
RANGE $3E79-$3E7A DB_DATA 1
RANGE $3E7A-$3E7C DW_DATA 1
RANGE $3E7C-$3E7E DB_DATA 2
RANGE $3E7E-$3E80 DB_DATA 2
RANGE $3E80-$3E82 DB_DATA 2
RANGE $3E82-$3E84 DB_DATA 2
RANGE $3E84-$3E86 DB_DATA 2
RANGE $3E86-$3E88 DB_DATA 2
RANGE $3E88-$3E8A DB_DATA 2
RANGE $3E8A-$3E8C DB_DATA 2
RANGE $3E8C-$3E8E DB_DATA 2
RANGE $3E8E-$3E90 DB_DATA 2
RANGE $3E90-$3E92 DB_DATA 2
RANGE $3E92-$3E94 DB_DATA 2
RANGE $3E94-$3E96 DB_DATA 2
RANGE $3E96-$3E98 DB_DATA 2
RANGE $3E98-$3E9A DB_DATA 2
RANGE $3E9A-$3E9C DB_DATA 2
RANGE $3E9C-$3E9E DB_DATA 2
RANGE $3E9E-$3E9F DB_DATA 1
RANGE $3E9F-$3EA1 DW_DATA 1
RANGE $3EA1-$3EA2 DB_DATA 1
RANGE $3EA2-$3EA3 DB_DATA 1
RANGE $3EA3-$3EA5 DW_DATA 1
RANGE $3EA5-$3EA6 DB_DATA 1
RANGE $3EA6-$3EA7 DB_DATA 1
RANGE $3EA7-$3EA8 DB_DATA 1
RANGE $3EA8-$3EA9 DB_DATA 1
RANGE $3EA9-$3EAB DW_DATA 1
RANGE $3EAB-$3EAD DB_DATA 2
RANGE $3EAD-$3EAF DB_DATA 2
RANGE $3EAF-$3EB1 DB_DATA 2
RANGE $3EB1-$3EB3 DB_DATA 2
RANGE $3EB3-$3EB5 DB_DATA 2
RANGE $3EB5-$3EB7 DB_DATA 2
RANGE $3EB7-$3EB9 DB_DATA 2
RANGE $3EB9-$3EBB DB_DATA 2
RANGE $3EBB-$3EBD DB_DATA 2
RANGE $3EBD-$3EBF DB_DATA 2
RANGE $3EBF-$3EC1 DB_DATA 2
RANGE $3EC1-$3EC3 DB_DATA 2
RANGE $3EC3-$3EC5 DB_DATA 2
RANGE $3EC5-$3EC7 DB_DATA 2
RANGE $3EC7-$3EC9 DB_DATA 2
RANGE $3EC9-$3ECB DB_DATA 2
RANGE $3ECB-$3ECD DB_DATA 2
RANGE $3ECD-$3ECF DB_DATA 2
RANGE $3ECF-$3ED0 DB_DATA 1
RANGE $3ED0-$3ED2 DW_DATA 1
RANGE $3ED2-$3ED3 DB_DATA 1
RANGE $3ED3-$3ED4 DB_DATA 1
RANGE $3ED4-$3ED6 DW_DATA 1
RANGE $3ED6-$3ED7 DB_DATA 1
RANGE $3ED7-$3ED8 DB_DATA 1
RANGE $3ED8-$3ED9 DB_DATA 1
RANGE $3ED9-$3EDA DB_DATA 1
RANGE $3EDA-$3EDC DW_DATA 1
RANGE $3EDC-$3EDE DB_DATA 2
RANGE $3EDE-$3EE0 DB_DATA 2
RANGE $3EE0-$3EE2 DB_DATA 2
RANGE $3EE2-$3EE4 DB_DATA 2
RANGE $3EE4-$3EE6 DB_DATA 2
RANGE $3EE6-$3EE8 DB_DATA 2
RANGE $3EE8-$3EEA DB_DATA 2
RANGE $3EEA-$3EEC DB_DATA 2
RANGE $3EEC-$3EEE DB_DATA 2
RANGE $3EEE-$3EF0 DB_DATA 2
RANGE $3EF0-$3EF2 DB_DATA 2
RANGE $3EF2-$3EF4 DB_DATA 2
RANGE $3EF4-$3EF6 DB_DATA 2
RANGE $3EF6-$3EF8 DB_DATA 2
RANGE $3EF8-$3EFA DB_DATA 2
RANGE $3EFA-$3EFC DB_DATA 2
RANGE $3EFC-$3EFE DB_DATA 2
RANGE $3EFE-$3F00 DB_DATA 2
RANGE $3F00-$3F01 DB_DATA 1
RANGE $3F01-$3F03 DW_DATA 1
RANGE $3F03-$3F04 DB_DATA 1
RANGE $3F04-$3F05 DB_DATA 1
RANGE $3F05-$3F07 DW_DATA 1
RANGE $3F07-$3F08 DB_DATA 1
RANGE $3F08-$3F09 DB_DATA 1
RANGE $3F09-$3F0A DB_DATA 1
RANGE $3F0A-$3F0B DB_DATA 1
RANGE $3F0B-$3F0D DW_DATA 1
RANGE $3F0D-$3F0F DB_DATA 2
RANGE $3F0F-$3F11 DB_DATA 2
RANGE $3F11-$3F13 DB_DATA 2
RANGE $3F13-$3F15 DB_DATA 2
RANGE $3F15-$3F17 DB_DATA 2
RANGE $3F17-$3F19 DB_DATA 2
RANGE $3F19-$3F1B DB_DATA 2
RANGE $3F1B-$3F1D DB_DATA 2
RANGE $3F1D-$3F1F DB_DATA 2
RANGE $3F1F-$3F21 DB_DATA 2
RANGE $3F21-$3F23 DB_DATA 2
RANGE $3F23-$3F25 DB_DATA 2
RANGE $3F25-$3F27 DB_DATA 2
RANGE $3F27-$3F29 DB_DATA 2
RANGE $3F29-$3F2B DB_DATA 2
RANGE $3F2B-$3F2D DB_DATA 2
RANGE $3F2D-$3F2F DB_DATA 2
RANGE $3F2F-$3F31 DB_DATA 2
RANGE $3F31-$3F33 DB_DATA 2
RANGE $3F33-$3F34 DB_DATA 1
RANGE $3F34-$3F36 DW_DATA 1
RANGE $3F36-$3F37 DB_DATA 1
RANGE $3F37-$3F38 DB_DATA 1
RANGE $3F38-$3F3A DW_DATA 1
RANGE $3F3A-$3F3B DB_DATA 1
RANGE $3F3B-$3F3C DB_DATA 1
RANGE $3F3C-$3F3D DB_DATA 1
RANGE $3F3D-$3F3E DB_DATA 1
RANGE $3F3E-$3F3F DB_DATA 1
RANGE $3F3F-$3F41 DW_DATA 1
RANGE $3F41-$3F42 DB_DATA 1
RANGE $3F42-$3F43 DB_DATA 1
RANGE $3F43-$3F45 DW_DATA 1
RANGE $3F45-$3F46 DB_DATA 1
RANGE $3F46-$3F47 DB_DATA 1
RANGE $3F47-$3F48 DB_DATA 1
RANGE $3F48-$3F49 DB_DATA 1
RANGE $3F49-$3F4A DB_DATA 1
RANGE $3F4A-$3F4C DW_DATA 1
RANGE $3F4C-$3F4D DB_DATA 1
RANGE $3F4D-$3F4E DB_DATA 1
RANGE $3F4E-$3F50 DW_DATA 1
RANGE $3F50-$3F51 DB_DATA 1
RANGE $3F51-$3F52 DB_DATA 1
RANGE $3F52-$3F53 DB_DATA 1
RANGE $3F53-$3F54 DB_DATA 1
RANGE $3F54-$3F55 DB_DATA 1
RANGE $3F55-$3F57 DW_DATA 1
RANGE $3F57-$3F58 DB_DATA 1
RANGE $3F58-$3F59 DB_DATA 1
RANGE $3F59-$3F5B DW_DATA 1
RANGE $3F5B-$3F5C DB_DATA 1
RANGE $3F5C-$3F5D DB_DATA 1
RANGE $3F5D-$3F5E DB_DATA 1
RANGE $3F5E-$3F5F DB_DATA 1
RANGE $3F5F-$3F60 DB_DATA 1
RANGE $3F60-$3F62 DW_DATA 1
RANGE $3F62-$3F63 DB_DATA 1
RANGE $3F63-$3F64 DB_DATA 1
RANGE $3F64-$3F66 DW_DATA 1
RANGE $3F66-$3F67 DB_DATA 1
RANGE $3F67-$3F68 DB_DATA 1
RANGE $3F68-$3F69 DB_DATA 1
RANGE $3F69-$3F6A DB_DATA 1
RANGE $3F6A-$3F6C DW_DATA 1
RANGE $3F6C-$3F6E DB_DATA 2
RANGE $3F6E-$3F70 DB_DATA 2
RANGE $3F70-$3F72 DB_DATA 2
RANGE $3F72-$3F74 DB_DATA 2
RANGE $3F74-$3F76 DB_DATA 2
RANGE $3F76-$3F78 DB_DATA 2
RANGE $3F78-$3F7A DB_DATA 2
RANGE $3F7A-$3F7C DB_DATA 2
RANGE $3F7C-$3F7E DB_DATA 2
RANGE $3F7E-$3F80 DB_DATA 2
RANGE $3F80-$3F82 DB_DATA 2
RANGE $3F82-$3F84 DB_DATA 2
RANGE $3F84-$3F86 DB_DATA 2
RANGE $3F86-$3F88 DB_DATA 2
RANGE $3F88-$3F8A DW_DATA 1
RANGE $3F8A-$3F8C DB_DATA 2
RANGE $3F8C-$3F8E DB_DATA 2
RANGE $3F8E-$3F90 DB_DATA 2
RANGE $3F90-$3F92 DB_DATA 2
RANGE $3F92-$3F94 DB_DATA 2
RANGE $3F94-$3F96 DB_DATA 2
RANGE $3F96-$3F98 DB_DATA 2
RANGE $3F98-$3F9A DB_DATA 2
RANGE $3F9A-$3F9C DB_DATA 2
RANGE $3F9C-$3F9E DB_DATA 2
RANGE $3F9E-$3FA0 DB_DATA 2
RANGE $3FA0-$3FA2 DB_DATA 2
RANGE $3FA2-$3FA4 DB_DATA 2
RANGE $3FA4-$3FA6 DB_DATA 2
RANGE $3FA6-$3FA8 DW_DATA 1
RANGE $3FA8-$3FAA DB_DATA 2
RANGE $3FAA-$3FAC DB_DATA 2
RANGE $3FAC-$3FAE DB_DATA 2
RANGE $3FAE-$3FB0 DB_DATA 2
RANGE $3FB0-$3FB2 DB_DATA 2
RANGE $3FB2-$3FB4 DB_DATA 2
RANGE $3FB4-$3FB6 DB_DATA 2
RANGE $3FB6-$3FB8 DB_DATA 2
RANGE $3FB8-$3FBA DB_DATA 2
RANGE $3FBA-$3FBC DB_DATA 2
RANGE $3FBC-$3FBE DB_DATA 2
RANGE $3FBE-$3FC0 DB_DATA 2
RANGE $3FC0-$3FC2 DB_DATA 2
RANGE $3FC2-$3FC4 DB_DATA 2
RANGE $3FC4-$3FC6 DW_DATA 1
RANGE $3FC6-$3FC8 DB_DATA 2
RANGE $3FC8-$3FCA DB_DATA 2
RANGE $3FCA-$3FCC DB_DATA 2
RANGE $3FCC-$3FCE DB_DATA 2
RANGE $3FCE-$3FD0 DB_DATA 2
RANGE $3FD0-$3FD2 DB_DATA 2
RANGE $3FD2-$3FD4 DB_DATA 2
RANGE $3FD4-$3FD6 DB_DATA 2
RANGE $3FD6-$3FD8 DB_DATA 2
RANGE $3FD8-$3FDA DB_DATA 2
RANGE $3FDA-$3FDC DB_DATA 2
RANGE $3FDC-$3FDE DB_DATA 2
RANGE $3FDE-$3FE0 DB_DATA 2
RANGE $3FE0-$3FE2 DB_DATA 2
RANGE $3FE2-$3FE3 DB_DATA 1
RANGE $3FE3-$3FE5 DW_DATA 1
RANGE $3FE5-$3FE6 DB_DATA 1
RANGE $3FE6-$3FE7 DB_DATA 1
RANGE $3FE7-$3FE9 DW_DATA 1
RANGE $3FE9-$3FEA DB_DATA 1
RANGE $3FEA-$3FEB DB_DATA 1
RANGE $3FEB-$3FEC DB_DATA 1
RANGE $3FEC-$3FED DB_DATA 1
RANGE $3FED-$3FEF DW_DATA 1
RANGE $3FEF-$3FF1 DB_DATA 2
RANGE $3FF1-$3FF3 DB_DATA 2
RANGE $3FF3-$3FF5 DB_DATA 2
RANGE $3FF5-$3FF7 DB_DATA 2
RANGE $3FF7-$3FF9 DB_DATA 2
RANGE $3FF9-$3FFB DB_DATA 2
RANGE $3FFB-$3FFD DB_DATA 2
RANGE $3FFD-$3FFF DB_DATA 2
RANGE $3FFF-$4001 DB_DATA 2
RANGE $4001-$4003 DB_DATA 2
RANGE $4003-$4005 DB_DATA 2
RANGE $4005-$4007 DB_DATA 2
RANGE $4007-$4009 DB_DATA 2
RANGE $4009-$400B DB_DATA 2
RANGE $400B-$400C DB_DATA 1
RANGE $400C-$400E DW_DATA 1
RANGE $400E-$400F DB_DATA 1
RANGE $400F-$4010 DB_DATA 1
RANGE $4010-$4012 DW_DATA 1
RANGE $4012-$4013 DB_DATA 1
RANGE $4013-$4014 DB_DATA 1
RANGE $4014-$4015 DB_DATA 1
RANGE $4015-$4016 DB_DATA 1
RANGE $4016-$4018 DW_DATA 1
RANGE $4018-$401A DB_DATA 2
RANGE $401A-$401C DB_DATA 2
RANGE $401C-$401E DB_DATA 2
RANGE $401E-$4020 DB_DATA 2
RANGE $4020-$4022 DB_DATA 2
RANGE $4022-$4024 DB_DATA 2
RANGE $4024-$4026 DB_DATA 2
RANGE $4026-$4028 DB_DATA 2
RANGE $4028-$402A DB_DATA 2
RANGE $402A-$402C DB_DATA 2
RANGE $402C-$402E DB_DATA 2
RANGE $402E-$4030 DB_DATA 2
RANGE $4030-$4032 DB_DATA 2
RANGE $4032-$4034 DB_DATA 2
RANGE $4034-$4035 DB_DATA 1
RANGE $4035-$4037 DW_DATA 1
RANGE $4037-$4038 DB_DATA 1
RANGE $4038-$4039 DB_DATA 1
RANGE $4039-$403B DW_DATA 1
RANGE $403B-$403C DB_DATA 1
RANGE $403C-$403D DB_DATA 1
RANGE $403D-$403E DB_DATA 1
RANGE $403E-$403F DB_DATA 1
RANGE $403F-$4040 DB_DATA 1
RANGE $4040-$4042 DW_DATA 1
RANGE $4042-$4043 DB_DATA 1
RANGE $4043-$4044 DB_DATA 1
RANGE $4044-$4046 DW_DATA 1
RANGE $4046-$4047 DB_DATA 1
RANGE $4047-$4048 DB_DATA 1
RANGE $4048-$4049 DB_DATA 1
RANGE $4049-$404A DB_DATA 1
RANGE $404A-$404B DB_DATA 1
RANGE $404B-$404D DW_DATA 1
RANGE $404D-$404E DB_DATA 1
RANGE $404E-$404F DB_DATA 1
RANGE $404F-$4051 DW_DATA 1
RANGE $4051-$4052 DB_DATA 1
RANGE $4052-$4053 DB_DATA 1
RANGE $4053-$4054 DB_DATA 1
RANGE $4054-$4055 DB_DATA 1
RANGE $4055-$4056 DB_DATA 1
RANGE $4056-$4058 DW_DATA 1
RANGE $4058-$4059 DB_DATA 1
RANGE $4059-$405A DB_DATA 1
RANGE $405A-$405C DW_DATA 1
RANGE $405C-$405D DB_DATA 1
RANGE $405D-$405E DB_DATA 1
RANGE $405E-$405F DB_DATA 1
RANGE $405F-$4060 DB_DATA 1
RANGE $4060-$4061 DB_DATA 1
RANGE $4061-$4063 DW_DATA 1
RANGE $4063-$4064 DB_DATA 1
RANGE $4064-$4065 DB_DATA 1
RANGE $4065-$4067 DW_DATA 1
RANGE $4067-$4068 DB_DATA 1
RANGE $4068-$4069 DB_DATA 1
RANGE $4069-$406A DB_DATA 1
RANGE $406A-$406B DB_DATA 1
RANGE $406B-$406C DB_DATA 1
RANGE $406C-$406E DW_DATA 1
RANGE $406E-$406F DB_DATA 1
RANGE $406F-$4070 DB_DATA 1
RANGE $4070-$4072 DW_DATA 1
RANGE $4072-$4073 DB_DATA 1
RANGE $4073-$4074 DB_DATA 1
RANGE $4074-$4075 DB_DATA 1
RANGE $4075-$4076 DB_DATA 1
RANGE $4076-$4077 DB_DATA 1
RANGE $4077-$4079 DW_DATA 1
RANGE $4079-$407A DB_DATA 1
RANGE $407A-$407B DB_DATA 1
RANGE $407B-$407D DW_DATA 1
RANGE $407D-$407E DB_DATA 1
RANGE $407E-$407F DB_DATA 1
RANGE $407F-$4080 DB_DATA 1
RANGE $4080-$4081 DB_DATA 1
RANGE $4081-$4082 DB_DATA 1
RANGE $4082-$4084 DW_DATA 1
RANGE $4084-$4085 DB_DATA 1
RANGE $4085-$4086 DB_DATA 1
RANGE $4086-$4088 DW_DATA 1
RANGE $4088-$4089 DB_DATA 1
RANGE $4089-$408A DB_DATA 1
RANGE $408A-$408B DB_DATA 1
RANGE $408B-$408C DB_DATA 1
RANGE $408C-$408D DB_DATA 1
RANGE $408D-$408F DW_DATA 1
RANGE $408F-$4090 DB_DATA 1
RANGE $4090-$4091 DB_DATA 1
RANGE $4091-$4093 DW_DATA 1
RANGE $4093-$4094 DB_DATA 1
RANGE $4094-$4095 DB_DATA 1
RANGE $4095-$4096 DB_DATA 1
RANGE $4096-$4097 DB_DATA 1
RANGE $4097-$4098 DB_DATA 1
RANGE $4098-$409A DW_DATA 1
RANGE $409A-$409B DB_DATA 1
RANGE $409B-$409C DB_DATA 1
RANGE $409C-$409E DW_DATA 1
RANGE $409E-$409F DB_DATA 1
RANGE $409F-$40A0 DB_DATA 1
RANGE $40A0-$40A1 DB_DATA 1
RANGE $40A1-$40A2 DB_DATA 1
RANGE $40A2-$40A3 DB_DATA 1
RANGE $40A3-$40A5 DW_DATA 1
RANGE $40A5-$40A6 DB_DATA 1
RANGE $40A6-$40A7 DB_DATA 1
RANGE $40A7-$40A9 DW_DATA 1
RANGE $40A9-$40AA DB_DATA 1
RANGE $40AA-$40AB DB_DATA 1
RANGE $40AB-$40AC DB_DATA 1
RANGE $40AC-$40AD DB_DATA 1
RANGE $40AD-$40AE DB_DATA 1
RANGE $40AE-$40B0 DW_DATA 1
RANGE $40B0-$40B1 DB_DATA 1
RANGE $40B1-$40B2 DB_DATA 1
RANGE $40B2-$40B4 DW_DATA 1
RANGE $40B4-$40B5 DB_DATA 1
RANGE $40B5-$40B6 DB_DATA 1
RANGE $40B6-$40B7 DB_DATA 1
RANGE $40B7-$40B8 DB_DATA 1
RANGE $40B8-$40B9 DB_DATA 1
RANGE $40B9-$40BB DW_DATA 1
RANGE $40BB-$40BC DB_DATA 1
RANGE $40BC-$40BD DB_DATA 1
RANGE $40BD-$40BF DW_DATA 1
RANGE $40BF-$40C0 DB_DATA 1
RANGE $40C0-$40C1 DB_DATA 1
RANGE $40C1-$40C2 DB_DATA 1
RANGE $40C2-$40C3 DB_DATA 1
RANGE $40C3-$40C4 DB_DATA 1
RANGE $40C4-$40C6 DW_DATA 1
RANGE $40C6-$40C7 DB_DATA 1
RANGE $40C7-$40C8 DB_DATA 1
RANGE $40C8-$40CA DW_DATA 1
RANGE $40CA-$40CB DB_DATA 1
RANGE $40CB-$40CC DB_DATA 1
RANGE $40CC-$40CD DB_DATA 1
RANGE $40CD-$40CE DB_DATA 1
RANGE $40CE-$40D0 DW_DATA 1
RANGE $40D0-$40D2 DB_DATA 2
RANGE $40D2-$40D4 DB_DATA 2
RANGE $40D4-$40D6 DB_DATA 2
RANGE $40D6-$40D8 DB_DATA 2
RANGE $40D8-$40DA DB_DATA 2
RANGE $40DA-$40DC DB_DATA 2
RANGE $40DC-$40DE DB_DATA 2
RANGE $40DE-$40E0 DB_DATA 2
RANGE $40E0-$40E2 DB_DATA 2
RANGE $40E2-$40E4 DB_DATA 2
RANGE $40E4-$40E6 DB_DATA 2
RANGE $40E6-$40E8 DB_DATA 2
RANGE $40E8-$40E9 DB_DATA 1
RANGE $40E9-$40EB DW_DATA 1
RANGE $40EB-$40EC DB_DATA 1
RANGE $40EC-$40ED DB_DATA 1
RANGE $40ED-$40EF DW_DATA 1
RANGE $40EF-$40F0 DB_DATA 1
RANGE $40F0-$40F1 DB_DATA 1
RANGE $40F1-$40F2 DB_DATA 1
RANGE $40F2-$40F3 DB_DATA 1
RANGE $40F3-$40F5 DW_DATA 1
RANGE $40F5-$40F7 DB_DATA 2
RANGE $40F7-$40F9 DB_DATA 2
RANGE $40F9-$40FB DB_DATA 2
RANGE $40FB-$40FD DB_DATA 2
RANGE $40FD-$40FF DB_DATA 2
RANGE $40FF-$4101 DB_DATA 2
RANGE $4101-$4103 DB_DATA 2
RANGE $4103-$4105 DB_DATA 2
RANGE $4105-$4107 DB_DATA 2
RANGE $4107-$4109 DB_DATA 2
RANGE $4109-$410B DB_DATA 2
RANGE $410B-$410D DB_DATA 2
RANGE $410D-$410E DB_DATA 1
RANGE $410E-$4110 DW_DATA 1
RANGE $4110-$4111 DB_DATA 1
RANGE $4111-$4112 DB_DATA 1
RANGE $4112-$4114 DW_DATA 1
RANGE $4114-$4115 DB_DATA 1
RANGE $4115-$4116 DB_DATA 1
RANGE $4116-$4117 DB_DATA 1
RANGE $4117-$4118 DB_DATA 1
RANGE $4118-$411A DW_DATA 1
RANGE $411A-$411C DB_DATA 2
RANGE $411C-$411E DB_DATA 2
RANGE $411E-$4120 DB_DATA 2
RANGE $4120-$4122 DB_DATA 2
RANGE $4122-$4124 DB_DATA 2
RANGE $4124-$4126 DB_DATA 2
RANGE $4126-$4128 DB_DATA 2
RANGE $4128-$412A DB_DATA 2
RANGE $412A-$412C DB_DATA 2
RANGE $412C-$412E DB_DATA 2
RANGE $412E-$4130 DB_DATA 2
RANGE $4130-$4132 DB_DATA 2
RANGE $4132-$4133 DB_DATA 1
RANGE $4133-$4135 DW_DATA 1
RANGE $4135-$4136 DB_DATA 1
RANGE $4136-$4137 DB_DATA 1
RANGE $4137-$4139 DW_DATA 1
RANGE $4139-$413A DB_DATA 1
RANGE $413A-$413B DB_DATA 1
RANGE $413B-$413C DB_DATA 1
RANGE $413C-$413D DB_DATA 1
RANGE $413D-$413E DB_DATA 1
RANGE $413E-$4140 DW_DATA 1
RANGE $4140-$4141 DB_DATA 1
RANGE $4141-$4142 DB_DATA 1
RANGE $4142-$4144 DW_DATA 1
RANGE $4144-$4145 DB_DATA 1
RANGE $4145-$4146 DB_DATA 1
RANGE $4146-$4147 DB_DATA 1
RANGE $4147-$4148 DB_DATA 1
RANGE $4148-$414A DW_DATA 1
RANGE $414A-$414C DB_DATA 2
RANGE $414C-$414E DB_DATA 2
RANGE $414E-$4150 DB_DATA 2
RANGE $4150-$4152 DB_DATA 2
RANGE $4152-$4154 DB_DATA 2
RANGE $4154-$4156 DB_DATA 2
RANGE $4156-$4158 DB_DATA 2
RANGE $4158-$415A DB_DATA 2
RANGE $415A-$415C DB_DATA 2
RANGE $415C-$415E DB_DATA 2
RANGE $415E-$4160 DB_DATA 2
RANGE $4160-$4161 DB_DATA 1
RANGE $4161-$4163 DW_DATA 1
RANGE $4163-$4164 DB_DATA 1
RANGE $4164-$4165 DB_DATA 1
RANGE $4165-$4167 DW_DATA 1
RANGE $4167-$4168 DB_DATA 1
RANGE $4168-$4169 DB_DATA 1
RANGE $4169-$416A DB_DATA 1
RANGE $416A-$416B DB_DATA 1
RANGE $416B-$416D DW_DATA 1
RANGE $416D-$416F DB_DATA 2
RANGE $416F-$4171 DB_DATA 2
RANGE $4171-$4173 DB_DATA 2
RANGE $4173-$4175 DB_DATA 2
RANGE $4175-$4177 DB_DATA 2
RANGE $4177-$4179 DB_DATA 2
RANGE $4179-$417B DB_DATA 2
RANGE $417B-$417D DB_DATA 2
RANGE $417D-$417F DB_DATA 2
RANGE $417F-$4181 DB_DATA 2
RANGE $4181-$4183 DB_DATA 2
RANGE $4183-$4184 DB_DATA 1
RANGE $4184-$4186 DW_DATA 1
RANGE $4186-$4187 DB_DATA 1
RANGE $4187-$4188 DB_DATA 1
RANGE $4188-$418A DW_DATA 1
RANGE $418A-$418B DB_DATA 1
RANGE $418B-$418C DB_DATA 1
RANGE $418C-$418D DB_DATA 1
RANGE $418D-$418E DB_DATA 1
RANGE $418E-$4190 DW_DATA 1
RANGE $4190-$4192 DB_DATA 2
RANGE $4192-$4194 DB_DATA 2
RANGE $4194-$4196 DB_DATA 2
RANGE $4196-$4198 DB_DATA 2
RANGE $4198-$419A DB_DATA 2
RANGE $419A-$419C DB_DATA 2
RANGE $419C-$419E DB_DATA 2
RANGE $419E-$41A0 DB_DATA 2
RANGE $41A0-$41A2 DB_DATA 2
RANGE $41A2-$41A4 DB_DATA 2
RANGE $41A4-$41A6 DB_DATA 2
RANGE $41A6-$41A7 DB_DATA 1
RANGE $41A7-$41A9 DW_DATA 1
RANGE $41A9-$41AA DB_DATA 1
RANGE $41AA-$41AB DB_DATA 1
RANGE $41AB-$41AD DW_DATA 1
RANGE $41AD-$41AE DB_DATA 1
RANGE $41AE-$41AF DB_DATA 1
RANGE $41AF-$41B0 DB_DATA 1
RANGE $41B0-$41B1 DB_DATA 1
RANGE $41B1-$41B2 DB_DATA 1
RANGE $41B2-$41B4 DW_DATA 1
RANGE $41B4-$41B5 DB_DATA 1
RANGE $41B5-$41B6 DB_DATA 1
RANGE $41B6-$41B8 DW_DATA 1
RANGE $41B8-$41B9 DB_DATA 1
RANGE $41B9-$41BA DB_DATA 1
RANGE $41BA-$41BB DB_DATA 1
RANGE $41BB-$41BC DB_DATA 1
RANGE $41BC-$41BD DB_DATA 1
RANGE $41BD-$41BF DW_DATA 1
RANGE $41BF-$41C0 DB_DATA 1
RANGE $41C0-$41C1 DB_DATA 1
RANGE $41C1-$41C3 DW_DATA 1
RANGE $41C3-$41C4 DB_DATA 1
RANGE $41C4-$41C5 DB_DATA 1
RANGE $41C5-$41C6 DB_DATA 1
RANGE $41C6-$41C7 DB_DATA 1
RANGE $41C7-$41C8 DB_DATA 1
RANGE $41C8-$41CA DW_DATA 1
RANGE $41CA-$41CB DB_DATA 1
RANGE $41CB-$41CC DB_DATA 1
RANGE $41CC-$41CE DW_DATA 1
RANGE $41CE-$41CF DB_DATA 1
RANGE $41CF-$41D0 DB_DATA 1
RANGE $41D0-$41D1 DB_DATA 1
RANGE $41D1-$41D2 DB_DATA 1
RANGE $41D2-$41D3 DB_DATA 1
RANGE $41D3-$41D5 DW_DATA 1
RANGE $41D5-$41D6 DB_DATA 1
RANGE $41D6-$41D7 DB_DATA 1
RANGE $41D7-$41D9 DW_DATA 1
RANGE $41D9-$41DA DB_DATA 1
RANGE $41DA-$41DB DB_DATA 1
RANGE $41DB-$41DC DB_DATA 1
RANGE $41DC-$41DD DB_DATA 1
RANGE $41DD-$41DE DB_DATA 1
RANGE $41DE-$41E0 DW_DATA 1
RANGE $41E0-$41E1 DB_DATA 1
RANGE $41E1-$41E2 DB_DATA 1
RANGE $41E2-$41E4 DW_DATA 1
RANGE $41E4-$41E5 DB_DATA 1
RANGE $41E5-$41E6 DB_DATA 1
RANGE $41E6-$41E7 DB_DATA 1
RANGE $41E7-$41E8 DB_DATA 1
RANGE $41E8-$41E9 DB_DATA 1
RANGE $41E9-$41EB DW_DATA 1
RANGE $41EB-$41EC DB_DATA 1
RANGE $41EC-$41ED DB_DATA 1
RANGE $41ED-$41EF DW_DATA 1
RANGE $41EF-$41F0 DB_DATA 1
RANGE $41F0-$41F1 DB_DATA 1
RANGE $41F1-$41F2 DB_DATA 1
RANGE $41F2-$41F3 DB_DATA 1
RANGE $41F3-$41F4 DB_DATA 1
RANGE $41F4-$41F6 DW_DATA 1
RANGE $41F6-$41F7 DB_DATA 1
RANGE $41F7-$41F8 DB_DATA 1
RANGE $41F8-$41FA DW_DATA 1
RANGE $41FA-$41FB DB_DATA 1
RANGE $41FB-$41FC DB_DATA 1
RANGE $41FC-$41FD DB_DATA 1
RANGE $41FD-$41FE DB_DATA 1
RANGE $41FE-$41FF DB_DATA 1
RANGE $41FF-$4201 DW_DATA 1
RANGE $4201-$4202 DB_DATA 1
RANGE $4202-$4203 DB_DATA 1
RANGE $4203-$4205 DW_DATA 1
RANGE $4205-$4206 DB_DATA 1
RANGE $4206-$4207 DB_DATA 1
RANGE $4207-$4208 DB_DATA 1
RANGE $4208-$4209 DB_DATA 1
RANGE $4209-$420A DB_DATA 1
RANGE $420A-$420C DW_DATA 1
RANGE $420C-$420D DB_DATA 1
RANGE $420D-$420E DB_DATA 1
RANGE $420E-$4210 DW_DATA 1
RANGE $4210-$4211 DB_DATA 1
RANGE $4211-$4212 DB_DATA 1
RANGE $4212-$4213 DB_DATA 1
RANGE $4213-$4214 DB_DATA 1
RANGE $4214-$4216 DW_DATA 1
RANGE $4216-$4218 DB_DATA 2
RANGE $4218-$421A DB_DATA 2
RANGE $421A-$421C DB_DATA 2
RANGE $421C-$421E DB_DATA 2
RANGE $421E-$4220 DB_DATA 2
RANGE $4220-$4222 DB_DATA 2
RANGE $4222-$4224 DB_DATA 2
RANGE $4224-$4226 DB_DATA 2
RANGE $4226-$4228 DB_DATA 2
RANGE $4228-$422A DB_DATA 2
RANGE $422A-$422C DB_DATA 2
RANGE $422C-$422D DB_DATA 1
RANGE $422D-$422F DW_DATA 1
RANGE $422F-$4230 DB_DATA 1
RANGE $4230-$4231 DB_DATA 1
RANGE $4231-$4233 DW_DATA 1
RANGE $4233-$4234 DB_DATA 1
RANGE $4234-$4235 DB_DATA 1
RANGE $4235-$4236 DB_DATA 1
RANGE $4236-$4237 DB_DATA 1
RANGE $4237-$4239 DW_DATA 1
RANGE $4239-$423B DB_DATA 2
RANGE $423B-$423D DB_DATA 2
RANGE $423D-$423F DB_DATA 2
RANGE $423F-$4241 DB_DATA 2
RANGE $4241-$4243 DB_DATA 2
RANGE $4243-$4245 DB_DATA 2
RANGE $4245-$4247 DB_DATA 2
RANGE $4247-$4249 DB_DATA 2
RANGE $4249-$424B DB_DATA 2
RANGE $424B-$424D DB_DATA 2
RANGE $424D-$424F DB_DATA 2
RANGE $424F-$4251 DB_DATA 2
RANGE $4251-$4253 DB_DATA 2
RANGE $4253-$4254 DB_DATA 1
RANGE $4254-$4256 DW_DATA 1
RANGE $4256-$4257 DB_DATA 1
RANGE $4257-$4258 DB_DATA 1
RANGE $4258-$425A DW_DATA 1
RANGE $425A-$425B DB_DATA 1
RANGE $425B-$425C DB_DATA 1
RANGE $425C-$425D DB_DATA 1
RANGE $425D-$425E DB_DATA 1
RANGE $425E-$4260 DW_DATA 1
RANGE $4260-$4262 DB_DATA 2
RANGE $4262-$4264 DB_DATA 2
RANGE $4264-$4266 DB_DATA 2
RANGE $4266-$4268 DB_DATA 2
RANGE $4268-$426A DB_DATA 2
RANGE $426A-$426C DB_DATA 2
RANGE $426C-$426E DB_DATA 2
RANGE $426E-$4270 DB_DATA 2
RANGE $4270-$4272 DB_DATA 2
RANGE $4272-$4274 DB_DATA 2
RANGE $4274-$4276 DB_DATA 2
RANGE $4276-$4278 DB_DATA 2
RANGE $4278-$427A DB_DATA 2
RANGE $427A-$427B DB_DATA 1
RANGE $427B-$427D DW_DATA 1
RANGE $427D-$427E DB_DATA 1
RANGE $427E-$427F DB_DATA 1
RANGE $427F-$4281 DW_DATA 1
RANGE $4281-$4282 DB_DATA 1
RANGE $4282-$4283 DB_DATA 1
RANGE $4283-$4284 DB_DATA 1
RANGE $4284-$4285 DB_DATA 1
RANGE $4285-$4287 DW_DATA 1
RANGE $4287-$4289 DB_DATA 2
RANGE $4289-$428B DB_DATA 2
RANGE $428B-$428D DB_DATA 2
RANGE $428D-$428F DB_DATA 2
RANGE $428F-$4291 DB_DATA 2
RANGE $4291-$4293 DB_DATA 2
RANGE $4293-$4295 DB_DATA 2
RANGE $4295-$4297 DB_DATA 2
RANGE $4297-$4299 DB_DATA 2
RANGE $4299-$429B DB_DATA 2
RANGE $429B-$429D DB_DATA 2
RANGE $429D-$429E DB_DATA 1
RANGE $429E-$42A0 DW_DATA 1
RANGE $42A0-$42A1 DB_DATA 1
RANGE $42A1-$42A2 DB_DATA 1
RANGE $42A2-$42A4 DW_DATA 1
RANGE $42A4-$42A5 DB_DATA 1
RANGE $42A5-$42A6 DB_DATA 1
RANGE $42A6-$42A7 DB_DATA 1
RANGE $42A7-$42A8 DB_DATA 1
RANGE $42A8-$42AA DW_DATA 1
RANGE $42AA-$42AC DB_DATA 2
RANGE $42AC-$42AE DB_DATA 2
RANGE $42AE-$42B0 DB_DATA 2
RANGE $42B0-$42B2 DB_DATA 2
RANGE $42B2-$42B4 DB_DATA 2
RANGE $42B4-$42B6 DB_DATA 2
RANGE $42B6-$42B8 DB_DATA 2
RANGE $42B8-$42BA DB_DATA 2
RANGE $42BA-$42BC DB_DATA 2
RANGE $42BC-$42BE DB_DATA 2
RANGE $42BE-$42C0 DB_DATA 2
RANGE $42C0-$42C2 DB_DATA 2
RANGE $42C2-$42C4 DB_DATA 2
RANGE $42C4-$42C5 DB_DATA 1
RANGE $42C5-$42C7 DW_DATA 1
RANGE $42C7-$42C8 DB_DATA 1
RANGE $42C8-$42C9 DB_DATA 1
RANGE $42C9-$42CB DW_DATA 1
RANGE $42CB-$42CC DB_DATA 1
RANGE $42CC-$42CD DB_DATA 1
RANGE $42CD-$42CE DB_DATA 1
RANGE $42CE-$42CF DB_DATA 1
RANGE $42CF-$42D1 DW_DATA 1
RANGE $42D1-$42D3 DB_DATA 2
RANGE $42D3-$42D5 DB_DATA 2
RANGE $42D5-$42D7 DB_DATA 2
RANGE $42D7-$42D9 DB_DATA 2
RANGE $42D9-$42DB DB_DATA 2
RANGE $42DB-$42DD DB_DATA 2
RANGE $42DD-$42DF DB_DATA 2
RANGE $42DF-$42E1 DB_DATA 2
RANGE $42E1-$42E3 DB_DATA 2
RANGE $42E3-$42E5 DB_DATA 2
RANGE $42E5-$42E7 DB_DATA 2
RANGE $42E7-$42E9 DB_DATA 2
RANGE $42E9-$42EB DB_DATA 2
RANGE $42EB-$42EC DB_DATA 1
RANGE $42EC-$42EE DW_DATA 1
RANGE $42EE-$42EF DB_DATA 1
RANGE $42EF-$42F0 DB_DATA 1
RANGE $42F0-$42F2 DW_DATA 1
RANGE $42F2-$42F3 DB_DATA 1
RANGE $42F3-$42F4 DB_DATA 1
RANGE $42F4-$42F5 DB_DATA 1
RANGE $42F5-$42F6 DB_DATA 1
RANGE $42F6-$42F7 DB_DATA 1
RANGE $42F7-$42F9 DW_DATA 1
RANGE $42F9-$42FA DB_DATA 1
RANGE $42FA-$42FB DB_DATA 1
RANGE $42FB-$42FD DW_DATA 1
RANGE $42FD-$42FE DB_DATA 1
RANGE $42FE-$42FF DB_DATA 1
RANGE $42FF-$4300 DB_DATA 1
RANGE $4300-$4301 DB_DATA 1
RANGE $4301-$4302 DB_DATA 1
RANGE $4302-$4304 DW_DATA 1
RANGE $4304-$4305 DB_DATA 1
RANGE $4305-$4306 DB_DATA 1
RANGE $4306-$4308 DW_DATA 1
RANGE $4308-$4309 DB_DATA 1
RANGE $4309-$430A DB_DATA 1
RANGE $430A-$430B DB_DATA 1
RANGE $430B-$430C DB_DATA 1
RANGE $430C-$430D DB_DATA 1
RANGE $430D-$430F DW_DATA 1
RANGE $430F-$4310 DB_DATA 1
RANGE $4310-$4311 DB_DATA 1
RANGE $4311-$4313 DW_DATA 1
RANGE $4313-$4314 DB_DATA 1
RANGE $4314-$4315 DB_DATA 1
RANGE $4315-$4316 DB_DATA 1
RANGE $4316-$4317 DB_DATA 1
RANGE $4317-$4318 DB_DATA 1
RANGE $4318-$431A DW_DATA 1
RANGE $431A-$431B DB_DATA 1
RANGE $431B-$431C DB_DATA 1
RANGE $431C-$431E DW_DATA 1
RANGE $431E-$431F DB_DATA 1
RANGE $431F-$4320 DB_DATA 1
RANGE $4320-$4321 DB_DATA 1
RANGE $4321-$4322 DB_DATA 1
RANGE $4322-$4323 DB_DATA 1
RANGE $4323-$4325 DW_DATA 1
RANGE $4325-$4326 DB_DATA 1
RANGE $4326-$4327 DB_DATA 1
RANGE $4327-$4329 DW_DATA 1
RANGE $4329-$432A DB_DATA 1
RANGE $432A-$432B DB_DATA 1
RANGE $432B-$432C DB_DATA 1
RANGE $432C-$432D DB_DATA 1
RANGE $432D-$432E DB_DATA 1
RANGE $432E-$4330 DW_DATA 1
RANGE $4330-$4331 DB_DATA 1
RANGE $4331-$4332 DB_DATA 1
RANGE $4332-$4334 DW_DATA 1
RANGE $4334-$4335 DB_DATA 1
RANGE $4335-$4336 DB_DATA 1
RANGE $4336-$4337 DB_DATA 1
RANGE $4337-$4338 DB_DATA 1
RANGE $4338-$4339 DB_DATA 1
RANGE $4339-$433B DW_DATA 1
RANGE $433B-$433C DB_DATA 1
RANGE $433C-$433D DB_DATA 1
RANGE $433D-$433F DW_DATA 1
RANGE $433F-$4340 DB_DATA 1
RANGE $4340-$4341 DB_DATA 1
RANGE $4341-$4342 DB_DATA 1
RANGE $4342-$4343 DB_DATA 1
RANGE $4343-$4345 DW_DATA 1
RANGE $4345-$4346 DB_DATA 1
RANGE $4346-$4348 DW_DATA 1
RANGE $4348-$4349 DB_DATA 1
RANGE $4349-$434A DB_DATA 1
RANGE $434A-$434C DW_DATA 1
RANGE $434C-$434D DB_DATA 1
RANGE $434D-$434E DB_DATA 1
RANGE $434E-$434F DB_DATA 1
RANGE $434F-$4350 DB_DATA 1
RANGE $4350-$4352 DW_DATA 1
RANGE $4352-$4353 DB_DATA 1
RANGE $4353-$4355 DW_DATA 1
RANGE $4355-$4356 DB_DATA 1
RANGE $4356-$4357 DB_DATA 1
RANGE $4357-$4359 DW_DATA 1
RANGE $4359-$435A DB_DATA 1
RANGE $435A-$435B DB_DATA 1
RANGE $435B-$435C DB_DATA 1
RANGE $435C-$435D DB_DATA 1
RANGE $435D-$435F DW_DATA 1
RANGE $435F-$4360 DB_DATA 1
RANGE $4360-$4362 DW_DATA 1
RANGE $4362-$4363 DB_DATA 1
RANGE $4363-$4364 DB_DATA 1
RANGE $4364-$4366 DW_DATA 1
RANGE $4366-$4367 DB_DATA 1
RANGE $4367-$4368 DB_DATA 1
RANGE $4368-$4369 DB_DATA 1
RANGE $4369-$436A DB_DATA 1
RANGE $436A-$436C DW_DATA 1
RANGE $436C-$436D DB_DATA 1
RANGE $436D-$436F DW_DATA 1
RANGE $436F-$4370 DB_DATA 1
RANGE $4370-$4371 DB_DATA 1
RANGE $4371-$4373 DW_DATA 1
RANGE $4373-$4374 DB_DATA 1
RANGE $4374-$4375 DB_DATA 1
RANGE $4375-$4376 DB_DATA 1
RANGE $4376-$4377 DB_DATA 1
RANGE $4377-$4379 DW_DATA 1
RANGE $4379-$437A DB_DATA 1
RANGE $437A-$437C DW_DATA 1
RANGE $437C-$437D DB_DATA 1
RANGE $437D-$437E DB_DATA 1
RANGE $437E-$4380 DW_DATA 1
RANGE $4380-$4381 DB_DATA 1
RANGE $4381-$4382 DB_DATA 1
RANGE $4382-$4383 DB_DATA 1
RANGE $4383-$4384 DB_DATA 1
RANGE $4384-$4386 DW_DATA 1
RANGE $4386-$4387 DB_DATA 1
RANGE $4387-$4389 DW_DATA 1
RANGE $4389-$438A DB_DATA 1
RANGE $438A-$438B DB_DATA 1
RANGE $438B-$438D DW_DATA 1
RANGE $438D-$438E DB_DATA 1
RANGE $438E-$438F DB_DATA 1
RANGE $438F-$4390 DB_DATA 1
RANGE $4390-$4391 DB_DATA 1
RANGE $4391-$4393 DW_DATA 1
RANGE $4393-$4394 DB_DATA 1
RANGE $4394-$4396 DW_DATA 1
RANGE $4396-$4397 DB_DATA 1
RANGE $4397-$4398 DB_DATA 1
RANGE $4398-$439A DW_DATA 1
RANGE $439A-$439B DB_DATA 1
RANGE $439B-$439C DB_DATA 1
RANGE $439C-$439D DB_DATA 1
RANGE $439D-$439E DB_DATA 1
RANGE $439E-$43A0 DW_DATA 1
RANGE $43A0-$43A1 DB_DATA 1
RANGE $43A1-$43A3 DW_DATA 1
RANGE $43A3-$43A4 DB_DATA 1
RANGE $43A4-$43A5 DB_DATA 1
RANGE $43A5-$43A7 DW_DATA 1
RANGE $43A7-$43A8 DB_DATA 1
RANGE $43A8-$43A9 DB_DATA 1
RANGE $43A9-$43AA DB_DATA 1
RANGE $43AA-$43AB DB_DATA 1
RANGE $43AB-$43AD DW_DATA 1
RANGE $43AD-$43AE DB_DATA 1
RANGE $43AE-$43B0 DW_DATA 1
RANGE $43B0-$43B1 DB_DATA 1
RANGE $43B1-$43B2 DB_DATA 1
RANGE $43B2-$43B4 DW_DATA 1
RANGE $43B4-$43B5 DB_DATA 1
RANGE $43B5-$43B6 DB_DATA 1
RANGE $43B6-$43B7 DB_DATA 1
RANGE $43B7-$43B8 DB_DATA 1
RANGE $43B8-$43BA DW_DATA 1
RANGE $43BA-$43BB DB_DATA 1
RANGE $43BB-$43BD DW_DATA 1
RANGE $43BD-$43BE DB_DATA 1
RANGE $43BE-$43BF DB_DATA 1
RANGE $43BF-$43C1 DW_DATA 1
RANGE $43C1-$43C2 DB_DATA 1
RANGE $43C2-$43C3 DB_DATA 1
RANGE $43C3-$43C4 DB_DATA 1
RANGE $43C4-$43C5 DB_DATA 1
RANGE $43C5-$43C7 DW_DATA 1
RANGE $43C7-$43C8 DB_DATA 1
RANGE $43C8-$43CA DW_DATA 1
RANGE $43CA-$43CB DB_DATA 1
RANGE $43CB-$43CC DB_DATA 1
RANGE $43CC-$43CE DW_DATA 1
RANGE $43CE-$43CF DB_DATA 1
RANGE $43CF-$43D0 DB_DATA 1
RANGE $43D0-$43D1 DB_DATA 1
RANGE $43D1-$43D2 DB_DATA 1
RANGE $43D2-$43D4 DW_DATA 1
RANGE $43D4-$43D6 DW_DATA 1
RANGE $43D6-$43D8 DB_DATA 2
RANGE $43D8-$43DA DB_DATA 2
RANGE $43DA-$43DC DB_DATA 2
RANGE $43DC-$43DE DB_DATA 2
RANGE $43DE-$43E0 DB_DATA 2
RANGE $43E0-$43E2 DB_DATA 2
RANGE $43E2-$43E4 DB_DATA 2
RANGE $43E4-$43E6 DB_DATA 2
RANGE $43E6-$43E8 DB_DATA 2
RANGE $43E8-$43EA DW_DATA 1
RANGE $43EA-$43EC DB_DATA 2
RANGE $43EC-$43EE DB_DATA 2
RANGE $43EE-$43F0 DB_DATA 2
RANGE $43F0-$43F2 DB_DATA 2
RANGE $43F2-$43F4 DB_DATA 2
RANGE $43F4-$43F6 DB_DATA 2
RANGE $43F6-$43F8 DB_DATA 2
RANGE $43F8-$43FA DB_DATA 2
RANGE $43FA-$43FC DB_DATA 2
RANGE $43FC-$43FE DW_DATA 1
RANGE $43FE-$4400 DB_DATA 2
RANGE $4400-$4402 DB_DATA 2
RANGE $4402-$4404 DB_DATA 2
RANGE $4404-$4406 DB_DATA 2
RANGE $4406-$4408 DB_DATA 2
RANGE $4408-$440A DB_DATA 2
RANGE $440A-$440C DW_DATA 1
RANGE $440C-$440E DB_DATA 2
RANGE $440E-$4410 DB_DATA 2
RANGE $4410-$4412 DB_DATA 2
RANGE $4412-$4414 DB_DATA 2
RANGE $4414-$4416 DB_DATA 2
RANGE $4416-$4418 DB_DATA 2
RANGE $4418-$441A DB_DATA 2
RANGE $441A-$441C DB_DATA 2
RANGE $441C-$441E DB_DATA 2
RANGE $441E-$4420 DB_DATA 2
RANGE $4420-$4422 DB_DATA 2
RANGE $4422-$4424 DB_DATA 2
RANGE $4424-$4426 DB_DATA 2
RANGE $4426-$4428 DB_DATA 2
RANGE $4428-$442A DW_DATA 1
RANGE $442A-$442C DB_DATA 2
RANGE $442C-$442E DB_DATA 2
RANGE $442E-$4430 DB_DATA 2
RANGE $4430-$4432 DB_DATA 2
RANGE $4432-$4434 DB_DATA 2
RANGE $4434-$4436 DB_DATA 2
RANGE $4436-$4438 DB_DATA 2
RANGE $4438-$443A DB_DATA 2
RANGE $443A-$443C DB_DATA 2
RANGE $443C-$443E DW_DATA 1
RANGE $443E-$4440 DB_DATA 2
RANGE $4440-$4442 DB_DATA 2
RANGE $4442-$4444 DB_DATA 2
RANGE $4444-$4446 DB_DATA 2
RANGE $4446-$4447 DB_DATA 1
RANGE $4447-$4449 DW_DATA 1
RANGE $4449-$444A DB_DATA 1
RANGE $444A-$444B DB_DATA 1
RANGE $444B-$444D DW_DATA 1
RANGE $444D-$444E DB_DATA 1
RANGE $444E-$444F DB_DATA 1
RANGE $444F-$4450 DB_DATA 1
RANGE $4450-$4451 DB_DATA 1
RANGE $4451-$4453 DW_DATA 1
RANGE $4453-$4454 DB_DATA 1
RANGE $4454-$4456 DW_DATA 1
RANGE $4456-$4457 DB_DATA 1
RANGE $4457-$4458 DB_DATA 1
RANGE $4458-$445A DW_DATA 1
RANGE $445A-$445B DB_DATA 1
RANGE $445B-$445C DB_DATA 1
RANGE $445C-$445D DB_DATA 1
RANGE $445D-$445E DB_DATA 1
RANGE $445E-$4460 DW_DATA 1
RANGE $4460-$4461 DB_DATA 1
RANGE $4461-$4463 DW_DATA 1
RANGE $4463-$4464 DB_DATA 1
RANGE $4464-$4465 DB_DATA 1
RANGE $4465-$4467 DW_DATA 1
RANGE $4467-$4468 DB_DATA 1
RANGE $4468-$4469 DB_DATA 1
RANGE $4469-$446A DB_DATA 1
RANGE $446A-$446B DB_DATA 1
RANGE $446B-$446D DW_DATA 1
RANGE $446D-$446E DB_DATA 1
RANGE $446E-$4470 DW_DATA 1
RANGE $4470-$4471 DB_DATA 1
RANGE $4471-$4472 DB_DATA 1
RANGE $4472-$4474 DW_DATA 1
RANGE $4474-$4475 DB_DATA 1
RANGE $4475-$4476 DB_DATA 1
RANGE $4476-$4477 DB_DATA 1
RANGE $4477-$4478 DB_DATA 1
RANGE $4478-$447A DW_DATA 1
RANGE $447A-$447B DB_DATA 1
RANGE $447B-$447D DW_DATA 1
RANGE $447D-$447E DB_DATA 1
RANGE $447E-$447F DB_DATA 1
RANGE $447F-$4481 DW_DATA 1
RANGE $4481-$4482 DB_DATA 1
RANGE $4482-$4483 DB_DATA 1
RANGE $4483-$4484 DB_DATA 1
RANGE $4484-$4485 DB_DATA 1
RANGE $4485-$4487 DW_DATA 1
RANGE $4487-$4488 DB_DATA 1
RANGE $4488-$448A DW_DATA 1
RANGE $448A-$448B DB_DATA 1
RANGE $448B-$448C DB_DATA 1
RANGE $448C-$448E DW_DATA 1
RANGE $448E-$448F DB_DATA 1
RANGE $448F-$4490 DB_DATA 1
RANGE $4490-$4491 DB_DATA 1
RANGE $4491-$4492 DB_DATA 1
RANGE $4492-$4494 DW_DATA 1
RANGE $4494-$4495 DB_DATA 1
RANGE $4495-$4497 DW_DATA 1
RANGE $4497-$4498 DB_DATA 1
RANGE $4498-$4499 DB_DATA 1
RANGE $4499-$449B DW_DATA 1
RANGE $449B-$449C DB_DATA 1
RANGE $449C-$449D DB_DATA 1
RANGE $449D-$449E DB_DATA 1
RANGE $449E-$449F DB_DATA 1
RANGE $449F-$44A1 DW_DATA 1
RANGE $44A1-$44A2 DB_DATA 1
RANGE $44A2-$44A4 DW_DATA 1
RANGE $44A4-$44A5 DB_DATA 1
RANGE $44A5-$44A6 DB_DATA 1
RANGE $44A6-$44A8 DW_DATA 1
RANGE $44A8-$44A9 DB_DATA 1
RANGE $44A9-$44AA DB_DATA 1
RANGE $44AA-$44AB DB_DATA 1
RANGE $44AB-$44AC DB_DATA 1
RANGE $44AC-$44AE DW_DATA 1
RANGE $44AE-$44AF DB_DATA 1
RANGE $44AF-$44B1 DW_DATA 1
RANGE $44B1-$44B2 DB_DATA 1
RANGE $44B2-$44B3 DB_DATA 1
RANGE $44B3-$44B5 DW_DATA 1
RANGE $44B5-$44B6 DB_DATA 1
RANGE $44B6-$44B7 DB_DATA 1
RANGE $44B7-$44B8 DB_DATA 1
RANGE $44B8-$44B9 DB_DATA 1
RANGE $44B9-$44BB DW_DATA 1
RANGE $44BB-$44BC DB_DATA 1
RANGE $44BC-$44BE DW_DATA 1
RANGE $44BE-$44BF DB_DATA 1
RANGE $44BF-$44C0 DB_DATA 1
RANGE $44C0-$44C2 DW_DATA 1
RANGE $44C2-$44C3 DB_DATA 1
RANGE $44C3-$44C4 DB_DATA 1
RANGE $44C4-$44C5 DB_DATA 1
RANGE $44C5-$44C6 DB_DATA 1
RANGE $44C6-$44C8 DW_DATA 1
RANGE $44C8-$44C9 DB_DATA 1
RANGE $44C9-$44CB DW_DATA 1
RANGE $44CB-$44CC DB_DATA 1
RANGE $44CC-$44CD DB_DATA 1
RANGE $44CD-$44CF DW_DATA 1
RANGE $44CF-$44D0 DB_DATA 1
RANGE $44D0-$44D1 DB_DATA 1
RANGE $44D1-$44D2 DB_DATA 1
RANGE $44D2-$44D3 DB_DATA 1
RANGE $44D3-$44D5 DW_DATA 1
RANGE $44D5-$44D6 DB_DATA 1
RANGE $44D6-$44D8 DW_DATA 1
RANGE $44D8-$44D9 DB_DATA 1
RANGE $44D9-$44DA DB_DATA 1
RANGE $44DA-$44DC DW_DATA 1
RANGE $44DC-$44DD DB_DATA 1
RANGE $44DD-$44DE DB_DATA 1
RANGE $44DE-$44DF DB_DATA 1
RANGE $44DF-$44E0 DB_DATA 1
RANGE $44E0-$44E2 DW_DATA 1
RANGE $44E2-$44E3 DB_DATA 1
RANGE $44E3-$44E5 DW_DATA 1
RANGE $44E5-$44E6 DB_DATA 1
RANGE $44E6-$44E7 DB_DATA 1
RANGE $44E7-$44E9 DW_DATA 1
RANGE $44E9-$44EA DB_DATA 1
RANGE $44EA-$44EB DB_DATA 1
RANGE $44EB-$44EC DB_DATA 1
RANGE $44EC-$44ED DB_DATA 1
RANGE $44ED-$44EF DW_DATA 1
RANGE $44EF-$44F0 DB_DATA 1
RANGE $44F0-$44F2 DW_DATA 1
RANGE $44F2-$44F3 DB_DATA 1
RANGE $44F3-$44F4 DB_DATA 1
RANGE $44F4-$44F6 DW_DATA 1
RANGE $44F6-$44F7 DB_DATA 1
RANGE $44F7-$44F8 DB_DATA 1
RANGE $44F8-$44F9 DB_DATA 1
RANGE $44F9-$44FA DB_DATA 1
RANGE $44FA-$44FC DW_DATA 1
RANGE $44FC-$44FD DB_DATA 1
RANGE $44FD-$44FF DW_DATA 1
RANGE $44FF-$4500 DB_DATA 1
RANGE $4500-$4501 DB_DATA 1
RANGE $4501-$4503 DW_DATA 1
RANGE $4503-$4504 DB_DATA 1
RANGE $4504-$4505 DB_DATA 1
RANGE $4505-$4506 DB_DATA 1
RANGE $4506-$4507 DB_DATA 1
RANGE $4507-$4509 DW_DATA 1
RANGE $4509-$450A DB_DATA 1
RANGE $450A-$450C DW_DATA 1
RANGE $450C-$450D DB_DATA 1
RANGE $450D-$450E DB_DATA 1
RANGE $450E-$4510 DW_DATA 1
RANGE $4510-$4511 DB_DATA 1
RANGE $4511-$4512 DB_DATA 1
RANGE $4512-$4513 DB_DATA 1
RANGE $4513-$4514 DB_DATA 1
RANGE $4514-$4516 DW_DATA 1
RANGE $4516-$4517 DB_DATA 1
RANGE $4517-$4519 DW_DATA 1
RANGE $4519-$451A DB_DATA 1
RANGE $451A-$451B DB_DATA 1
RANGE $451B-$451D DW_DATA 1
RANGE $451D-$451E DB_DATA 1
RANGE $451E-$451F DB_DATA 1
RANGE $451F-$4520 DB_DATA 1
RANGE $4520-$4521 DB_DATA 1
RANGE $4521-$4523 DW_DATA 1
RANGE $4523-$4524 DB_DATA 1
RANGE $4524-$4526 DW_DATA 1
RANGE $4526-$4527 DB_DATA 1
RANGE $4527-$4528 DB_DATA 1
RANGE $4528-$452A DW_DATA 1
RANGE $452A-$452B DB_DATA 1
RANGE $452B-$452C DB_DATA 1
RANGE $452C-$452D DB_DATA 1
RANGE $452D-$452E DB_DATA 1
RANGE $452E-$4530 DW_DATA 1
RANGE $4530-$4531 DB_DATA 1
RANGE $4531-$4533 DW_DATA 1
RANGE $4533-$4534 DB_DATA 1
RANGE $4534-$4535 DB_DATA 1
RANGE $4535-$4537 DW_DATA 1
RANGE $4537-$4538 DB_DATA 1
RANGE $4538-$4539 DB_DATA 1
RANGE $4539-$453A DB_DATA 1
RANGE $453A-$453B DB_DATA 1
RANGE $453B-$453D DW_DATA 1
RANGE $453D-$453E DB_DATA 1
RANGE $453E-$4540 DW_DATA 1
RANGE $4540-$4541 DB_DATA 1
RANGE $4541-$4542 DB_DATA 1
RANGE $4542-$4544 DW_DATA 1
RANGE $4544-$4545 DB_DATA 1
RANGE $4545-$4546 DB_DATA 1
RANGE $4546-$4547 DB_DATA 1
RANGE $4547-$4548 DB_DATA 1
RANGE $4548-$454A DW_DATA 1
RANGE $454A-$454C DW_DATA 1
RANGE $454C-$454E DB_DATA 2
RANGE $454E-$4550 DB_DATA 2
RANGE $4550-$4552 DB_DATA 2
RANGE $4552-$4554 DB_DATA 2
RANGE $4554-$4556 DB_DATA 2
RANGE $4556-$4558 DB_DATA 2
RANGE $4558-$455A DB_DATA 2
RANGE $455A-$455C DB_DATA 2
RANGE $455C-$455E DB_DATA 2
RANGE $455E-$4560 DW_DATA 1
RANGE $4560-$4562 DB_DATA 2
RANGE $4562-$4564 DB_DATA 2
RANGE $4564-$4566 DB_DATA 2
RANGE $4566-$4568 DB_DATA 2
RANGE $4568-$456A DB_DATA 2
RANGE $456A-$456C DB_DATA 2
RANGE $456C-$456E DB_DATA 2
RANGE $456E-$4570 DB_DATA 2
RANGE $4570-$4572 DB_DATA 2
RANGE $4572-$4574 DW_DATA 1
RANGE $4574-$4576 DB_DATA 2
RANGE $4576-$4578 DB_DATA 2
RANGE $4578-$457A DB_DATA 2
RANGE $457A-$457C DB_DATA 2
RANGE $457C-$457E DB_DATA 2
RANGE $457E-$4580 DB_DATA 2
RANGE $4580-$4582 DB_DATA 2
RANGE $4582-$4584 DB_DATA 2
RANGE $4584-$4586 DB_DATA 2
RANGE $4586-$4588 DB_DATA 2
RANGE $4588-$458A DB_DATA 2
RANGE $458A-$458C DB_DATA 2
RANGE $458C-$458E DB_DATA 2
RANGE $458E-$4590 DB_DATA 2
RANGE $4590-$4592 DW_DATA 1
RANGE $4592-$4594 DB_DATA 2
RANGE $4594-$4596 DB_DATA 2
RANGE $4596-$4598 DB_DATA 2
RANGE $4598-$459A DB_DATA 2
RANGE $459A-$459C DB_DATA 2
RANGE $459C-$459E DB_DATA 2
RANGE $459E-$45A0 DB_DATA 2
RANGE $45A0-$45A2 DB_DATA 2
RANGE $45A2-$45A4 DB_DATA 2
RANGE $45A4-$45A6 DW_DATA 1
RANGE $45A6-$45A8 DB_DATA 2
RANGE $45A8-$45AA DB_DATA 2
RANGE $45AA-$45AC DB_DATA 2
RANGE $45AC-$45AE DB_DATA 2
RANGE $45AE-$45AF DB_DATA 1
RANGE $45AF-$45B1 DW_DATA 1
RANGE $45B1-$45B2 DB_DATA 1
RANGE $45B2-$45B3 DB_DATA 1
RANGE $45B3-$45B5 DW_DATA 1
RANGE $45B5-$45B6 DB_DATA 1
RANGE $45B6-$45B7 DB_DATA 1
RANGE $45B7-$45B8 DB_DATA 1
RANGE $45B8-$45B9 DB_DATA 1
RANGE $45B9-$45BB DW_DATA 1
RANGE $45BB-$45BC DB_DATA 1
RANGE $45BC-$45BE DW_DATA 1
RANGE $45BE-$45BF DB_DATA 1
RANGE $45BF-$45C0 DB_DATA 1
RANGE $45C0-$45C2 DW_DATA 1
RANGE $45C2-$45C3 DB_DATA 1
RANGE $45C3-$45C4 DB_DATA 1
RANGE $45C4-$45C5 DB_DATA 1
RANGE $45C5-$45C6 DB_DATA 1
RANGE $45C6-$45C8 DW_DATA 1
RANGE $45C8-$45C9 DB_DATA 1
RANGE $45C9-$45CB DW_DATA 1
RANGE $45CB-$45CC DB_DATA 1
RANGE $45CC-$45CD DB_DATA 1
RANGE $45CD-$45CF DW_DATA 1
RANGE $45CF-$45D0 DB_DATA 1
RANGE $45D0-$45D1 DB_DATA 1
RANGE $45D1-$45D2 DB_DATA 1
RANGE $45D2-$45D3 DB_DATA 1
RANGE $45D3-$45D5 DW_DATA 1
RANGE $45D5-$45D6 DB_DATA 1
RANGE $45D6-$45D8 DW_DATA 1
RANGE $45D8-$45D9 DB_DATA 1
RANGE $45D9-$45DA DB_DATA 1
RANGE $45DA-$45DC DW_DATA 1
RANGE $45DC-$45DD DB_DATA 1
RANGE $45DD-$45DE DB_DATA 1
RANGE $45DE-$45DF DB_DATA 1
RANGE $45DF-$45E0 DB_DATA 1
RANGE $45E0-$45E2 DW_DATA 1
RANGE $45E2-$45E3 DB_DATA 1
RANGE $45E3-$45E5 DW_DATA 1
RANGE $45E5-$45E6 DB_DATA 1
RANGE $45E6-$45E7 DB_DATA 1
RANGE $45E7-$45E9 DW_DATA 1
RANGE $45E9-$45EA DB_DATA 1
RANGE $45EA-$45EB DB_DATA 1
RANGE $45EB-$45EC DB_DATA 1
RANGE $45EC-$45ED DB_DATA 1
RANGE $45ED-$45EF DW_DATA 1
RANGE $45EF-$45F0 DB_DATA 1
RANGE $45F0-$45F2 DW_DATA 1
RANGE $45F2-$45F3 DB_DATA 1
RANGE $45F3-$45F4 DB_DATA 1
RANGE $45F4-$45F6 DW_DATA 1
RANGE $45F6-$45F7 DB_DATA 1
RANGE $45F7-$45F8 DB_DATA 1
RANGE $45F8-$45F9 DB_DATA 1
RANGE $45F9-$45FA DB_DATA 1
RANGE $45FA-$45FC DW_DATA 1
RANGE $45FC-$45FD DB_DATA 1
RANGE $45FD-$45FF DW_DATA 1
RANGE $45FF-$4600 DB_DATA 1
RANGE $4600-$4601 DB_DATA 1
RANGE $4601-$4603 DW_DATA 1
RANGE $4603-$4604 DB_DATA 1
RANGE $4604-$4605 DB_DATA 1
RANGE $4605-$4606 DB_DATA 1
RANGE $4606-$4607 DB_DATA 1
RANGE $4607-$4609 DW_DATA 1
RANGE $4609-$460A DB_DATA 1
RANGE $460A-$460C DW_DATA 1
RANGE $460C-$460D DB_DATA 1
RANGE $460D-$460E DB_DATA 1
RANGE $460E-$4610 DW_DATA 1
RANGE $4610-$4611 DB_DATA 1
RANGE $4611-$4612 DB_DATA 1
RANGE $4612-$4613 DB_DATA 1
RANGE $4613-$4614 DB_DATA 1
RANGE $4614-$4616 DW_DATA 1
RANGE $4616-$4617 DB_DATA 1
RANGE $4617-$4619 DW_DATA 1
RANGE $4619-$461A DB_DATA 1
RANGE $461A-$461B DB_DATA 1
RANGE $461B-$461D DW_DATA 1
RANGE $461D-$461E DB_DATA 1
RANGE $461E-$461F DB_DATA 1
RANGE $461F-$4620 DB_DATA 1
RANGE $4620-$4621 DB_DATA 1
RANGE $4621-$4623 DW_DATA 1
RANGE $4623-$4624 DB_DATA 1
RANGE $4624-$4626 DW_DATA 1
RANGE $4626-$4627 DB_DATA 1
RANGE $4627-$4628 DB_DATA 1
RANGE $4628-$462A DW_DATA 1
RANGE $462A-$462B DB_DATA 1
RANGE $462B-$462C DB_DATA 1
RANGE $462C-$462D DB_DATA 1
RANGE $462D-$462E DB_DATA 1
RANGE $462E-$4630 DW_DATA 1
RANGE $4630-$4631 DB_DATA 1
RANGE $4631-$4633 DW_DATA 1
RANGE $4633-$4634 DB_DATA 1
RANGE $4634-$4635 DB_DATA 1
RANGE $4635-$4637 DW_DATA 1
RANGE $4637-$4638 DB_DATA 1
RANGE $4638-$4639 DB_DATA 1
RANGE $4639-$463A DB_DATA 1
RANGE $463A-$463B DB_DATA 1
RANGE $463B-$463D DW_DATA 1
RANGE $463D-$463E DB_DATA 1
RANGE $463E-$4640 DW_DATA 1
RANGE $4640-$4641 DB_DATA 1
RANGE $4641-$4642 DB_DATA 1
RANGE $4642-$4644 DW_DATA 1
RANGE $4644-$4645 DB_DATA 1
RANGE $4645-$4646 DB_DATA 1
RANGE $4646-$4647 DB_DATA 1
RANGE $4647-$4648 DB_DATA 1
RANGE $4648-$464A DW_DATA 1
RANGE $464A-$464B DB_DATA 1
RANGE $464B-$464D DW_DATA 1
RANGE $464D-$464E DB_DATA 1
RANGE $464E-$464F DB_DATA 1
RANGE $464F-$4651 DW_DATA 1
RANGE $4651-$4652 DB_DATA 1
RANGE $4652-$4653 DB_DATA 1
RANGE $4653-$4654 DB_DATA 1
RANGE $4654-$4655 DB_DATA 1
RANGE $4655-$4657 DW_DATA 1
RANGE $4657-$4658 DB_DATA 1
RANGE $4658-$465A DW_DATA 1
RANGE $465A-$465B DB_DATA 1
RANGE $465B-$465C DB_DATA 1
RANGE $465C-$465E DW_DATA 1
RANGE $465E-$465F DB_DATA 1
RANGE $465F-$4660 DB_DATA 1
RANGE $4660-$4661 DB_DATA 1
RANGE $4661-$4662 DB_DATA 1
RANGE $4662-$4664 DW_DATA 1
RANGE $4664-$4665 DB_DATA 1
RANGE $4665-$4667 DW_DATA 1
RANGE $4667-$4668 DB_DATA 1
RANGE $4668-$4669 DB_DATA 1
RANGE $4669-$466B DW_DATA 1
RANGE $466B-$466C DB_DATA 1
RANGE $466C-$466D DB_DATA 1
RANGE $466D-$466E DB_DATA 1
RANGE $466E-$466F DB_DATA 1
RANGE $466F-$4671 DW_DATA 1
RANGE $4671-$4672 DB_DATA 1
RANGE $4672-$4674 DW_DATA 1
RANGE $4674-$4675 DB_DATA 1
RANGE $4675-$4676 DB_DATA 1
RANGE $4676-$4678 DW_DATA 1
RANGE $4678-$4679 DB_DATA 1
RANGE $4679-$467A DB_DATA 1
RANGE $467A-$467B DB_DATA 1
RANGE $467B-$467C DB_DATA 1
RANGE $467C-$467E DW_DATA 1
RANGE $467E-$467F DB_DATA 1
RANGE $467F-$4681 DW_DATA 1
RANGE $4681-$4682 DB_DATA 1
RANGE $4682-$4683 DB_DATA 1
RANGE $4683-$4685 DW_DATA 1
RANGE $4685-$4686 DB_DATA 1
RANGE $4686-$4687 DB_DATA 1
RANGE $4687-$4688 DB_DATA 1
RANGE $4688-$4689 DB_DATA 1
RANGE $4689-$468B DW_DATA 1
RANGE $468B-$468C DB_DATA 1
RANGE $468C-$468E DW_DATA 1
RANGE $468E-$468F DB_DATA 1
RANGE $468F-$4690 DB_DATA 1
RANGE $4690-$4692 DW_DATA 1
RANGE $4692-$4693 DB_DATA 1
RANGE $4693-$4694 DB_DATA 1
RANGE $4694-$4695 DB_DATA 1
RANGE $4695-$4696 DB_DATA 1
RANGE $4696-$4698 DW_DATA 1
RANGE $4698-$4699 DB_DATA 1
RANGE $4699-$469B DW_DATA 1
RANGE $469B-$469C DB_DATA 1
RANGE $469C-$469D DB_DATA 1
RANGE $469D-$469F DW_DATA 1
RANGE $469F-$46A0 DB_DATA 1
RANGE $46A0-$46A1 DB_DATA 1
RANGE $46A1-$46A2 DB_DATA 1
RANGE $46A2-$46A3 DB_DATA 1
RANGE $46A3-$46A5 DW_DATA 1
RANGE $46A5-$46A6 DB_DATA 1
RANGE $46A6-$46A8 DW_DATA 1
RANGE $46A8-$46A9 DB_DATA 1
RANGE $46A9-$46AA DB_DATA 1
RANGE $46AA-$46AC DW_DATA 1
RANGE $46AC-$46AD DB_DATA 1
RANGE $46AD-$46AE DB_DATA 1
RANGE $46AE-$46AF DB_DATA 1
RANGE $46AF-$46B0 DB_DATA 1
RANGE $46B0-$46B2 DW_DATA 1
RANGE $46B2-$46B4 DW_DATA 1
RANGE $46B4-$46B6 DB_DATA 2
RANGE $46B6-$46B8 DB_DATA 2
RANGE $46B8-$46BA DB_DATA 2
RANGE $46BA-$46BC DB_DATA 2
RANGE $46BC-$46BE DB_DATA 2
RANGE $46BE-$46C0 DB_DATA 2
RANGE $46C0-$46C2 DB_DATA 2
RANGE $46C2-$46C4 DB_DATA 2
RANGE $46C4-$46C6 DB_DATA 2
RANGE $46C6-$46C8 DB_DATA 2
RANGE $46C8-$46CA DB_DATA 2
RANGE $46CA-$46CB DB_DATA 1
RANGE $46CB-$46CD DW_DATA 1
RANGE $46CD-$46CE DB_DATA 1
RANGE $46CE-$46CF DB_DATA 1
RANGE $46CF-$46D1 DW_DATA 1
RANGE $46D1-$46D2 DB_DATA 1
RANGE $46D2-$46D3 DB_DATA 1
RANGE $46D3-$46D4 DB_DATA 1
RANGE $46D4-$46D5 DB_DATA 1
RANGE $46D5-$46D7 DW_DATA 1
RANGE $46D7-$46D9 DB_DATA 2
RANGE $46D9-$46DB DB_DATA 2
RANGE $46DB-$46DD DB_DATA 2
RANGE $46DD-$46DF DB_DATA 2
RANGE $46DF-$46E1 DB_DATA 2
RANGE $46E1-$46E3 DB_DATA 2
RANGE $46E3-$46E5 DB_DATA 2
RANGE $46E5-$46E7 DB_DATA 2
RANGE $46E7-$46E9 DB_DATA 2
RANGE $46E9-$46EB DB_DATA 2
RANGE $46EB-$46ED DB_DATA 2
RANGE $46ED-$46EE DB_DATA 1
RANGE $46EE-$46F0 DW_DATA 1
RANGE $46F0-$46F1 DB_DATA 1
RANGE $46F1-$46F2 DB_DATA 1
RANGE $46F2-$46F4 DW_DATA 1
RANGE $46F4-$46F5 DB_DATA 1
RANGE $46F5-$46F6 DB_DATA 1
RANGE $46F6-$46F7 DB_DATA 1
RANGE $46F7-$46F8 DB_DATA 1
RANGE $46F8-$46FA DW_DATA 1
RANGE $46FA-$46FC DB_DATA 2
RANGE $46FC-$46FE DB_DATA 2
RANGE $46FE-$4700 DB_DATA 2
RANGE $4700-$4702 DB_DATA 2
RANGE $4702-$4704 DB_DATA 2
RANGE $4704-$4706 DB_DATA 2
RANGE $4706-$4708 DB_DATA 2
RANGE $4708-$470A DB_DATA 2
RANGE $470A-$470C DB_DATA 2
RANGE $470C-$470E DB_DATA 2
RANGE $470E-$4710 DB_DATA 2
RANGE $4710-$4711 DB_DATA 1
RANGE $4711-$4713 DW_DATA 1
RANGE $4713-$4714 DB_DATA 1
RANGE $4714-$4715 DB_DATA 1
RANGE $4715-$4717 DW_DATA 1
RANGE $4717-$4718 DB_DATA 1
RANGE $4718-$4719 DB_DATA 1
RANGE $4719-$471A DB_DATA 1
RANGE $471A-$471B DB_DATA 1
RANGE $471B-$471D DW_DATA 1
RANGE $471D-$471F DB_DATA 2
RANGE $471F-$4721 DB_DATA 2
RANGE $4721-$4723 DB_DATA 2
RANGE $4723-$4725 DB_DATA 2
RANGE $4725-$4727 DB_DATA 2
RANGE $4727-$4729 DB_DATA 2
RANGE $4729-$472B DB_DATA 2
RANGE $472B-$472D DB_DATA 2
RANGE $472D-$472F DB_DATA 2
RANGE $472F-$4731 DB_DATA 2
RANGE $4731-$4733 DB_DATA 2
RANGE $4733-$4734 DB_DATA 1
RANGE $4734-$4736 DW_DATA 1
RANGE $4736-$4737 DB_DATA 1
RANGE $4737-$4738 DB_DATA 1
RANGE $4738-$473A DW_DATA 1
RANGE $473A-$473B DB_DATA 1
RANGE $473B-$473C DB_DATA 1
RANGE $473C-$473D DB_DATA 1
RANGE $473D-$473E DB_DATA 1
RANGE $473E-$4740 DW_DATA 1
RANGE $4740-$4742 DB_DATA 2
RANGE $4742-$4744 DB_DATA 2
RANGE $4744-$4746 DB_DATA 2
RANGE $4746-$4748 DB_DATA 2
RANGE $4748-$474A DB_DATA 2
RANGE $474A-$474C DB_DATA 2
RANGE $474C-$474E DB_DATA 2
RANGE $474E-$4750 DB_DATA 2
RANGE $4750-$4752 DB_DATA 2
RANGE $4752-$4754 DB_DATA 2
RANGE $4754-$4756 DB_DATA 2
RANGE $4756-$4757 DB_DATA 1
RANGE $4757-$4759 DW_DATA 1
RANGE $4759-$475A DB_DATA 1
RANGE $475A-$475B DB_DATA 1
RANGE $475B-$475D DW_DATA 1
RANGE $475D-$475E DB_DATA 1
RANGE $475E-$475F DB_DATA 1
RANGE $475F-$4760 DB_DATA 1
RANGE $4760-$4761 DB_DATA 1
RANGE $4761-$4762 DB_DATA 1
RANGE $4762-$4764 DW_DATA 1
RANGE $4764-$4765 DB_DATA 1
RANGE $4765-$4766 DB_DATA 1
RANGE $4766-$4768 DW_DATA 1
RANGE $4768-$4769 DB_DATA 1
RANGE $4769-$476A DB_DATA 1
RANGE $476A-$476B DB_DATA 1
RANGE $476B-$476C DB_DATA 1
RANGE $476C-$476D DB_DATA 1
RANGE $476D-$476F DW_DATA 1
RANGE $476F-$4770 DB_DATA 1
RANGE $4770-$4771 DB_DATA 1
RANGE $4771-$4773 DW_DATA 1
RANGE $4773-$4774 DB_DATA 1
RANGE $4774-$4775 DB_DATA 1
RANGE $4775-$4776 DB_DATA 1
RANGE $4776-$4777 DB_DATA 1
RANGE $4777-$4778 DB_DATA 1
RANGE $4778-$477A DW_DATA 1
RANGE $477A-$477B DB_DATA 1
RANGE $477B-$477C DB_DATA 1
RANGE $477C-$477E DW_DATA 1
RANGE $477E-$477F DB_DATA 1
RANGE $477F-$4780 DB_DATA 1
RANGE $4780-$4781 DB_DATA 1
RANGE $4781-$4782 DB_DATA 1
RANGE $4782-$4783 DB_DATA 1
RANGE $4783-$4785 DW_DATA 1
RANGE $4785-$4786 DB_DATA 1
RANGE $4786-$4787 DB_DATA 1
RANGE $4787-$4789 DW_DATA 1
RANGE $4789-$478A DB_DATA 1
RANGE $478A-$478B DB_DATA 1
RANGE $478B-$478C DB_DATA 1
RANGE $478C-$478D DB_DATA 1
RANGE $478D-$478E DB_DATA 1
RANGE $478E-$4790 DW_DATA 1
RANGE $4790-$4791 DB_DATA 1
RANGE $4791-$4792 DB_DATA 1
RANGE $4792-$4794 DW_DATA 1
RANGE $4794-$4795 DB_DATA 1
RANGE $4795-$4796 DB_DATA 1
RANGE $4796-$4797 DB_DATA 1
RANGE $4797-$4798 DB_DATA 1
RANGE $4798-$4799 DB_DATA 1
RANGE $4799-$479B DW_DATA 1
RANGE $479B-$479C DB_DATA 1
RANGE $479C-$479D DB_DATA 1
RANGE $479D-$479F DW_DATA 1
RANGE $479F-$47A0 DB_DATA 1
RANGE $47A0-$47A1 DB_DATA 1
RANGE $47A1-$47A2 DB_DATA 1
RANGE $47A2-$47A3 DB_DATA 1
RANGE $47A3-$47A4 DB_DATA 1
RANGE $47A4-$47A6 DW_DATA 1
RANGE $47A6-$47A7 DB_DATA 1
RANGE $47A7-$47A8 DB_DATA 1
RANGE $47A8-$47AA DW_DATA 1
RANGE $47AA-$47AB DB_DATA 1
RANGE $47AB-$47AC DB_DATA 1
RANGE $47AC-$47AD DB_DATA 1
RANGE $47AD-$47AE DB_DATA 1
RANGE $47AE-$47AF DB_DATA 1
RANGE $47AF-$47B1 DW_DATA 1
RANGE $47B1-$47B2 DB_DATA 1
RANGE $47B2-$47B3 DB_DATA 1
RANGE $47B3-$47B5 DW_DATA 1
RANGE $47B5-$47B6 DB_DATA 1
RANGE $47B6-$47B7 DB_DATA 1
RANGE $47B7-$47B8 DB_DATA 1
RANGE $47B8-$47B9 DB_DATA 1
RANGE $47B9-$47BA DB_DATA 1
RANGE $47BA-$47BC DW_DATA 1
RANGE $47BC-$47BD DB_DATA 1
RANGE $47BD-$47BE DB_DATA 1
RANGE $47BE-$47C0 DW_DATA 1
RANGE $47C0-$47C1 DB_DATA 1
RANGE $47C1-$47C2 DB_DATA 1
RANGE $47C2-$47C3 DB_DATA 1
RANGE $47C3-$47C4 DB_DATA 1
RANGE $47C4-$47C5 DB_DATA 1
RANGE $47C5-$47C7 DW_DATA 1
RANGE $47C7-$47C8 DB_DATA 1
RANGE $47C8-$47C9 DB_DATA 1
RANGE $47C9-$47CB DW_DATA 1
RANGE $47CB-$47CC DB_DATA 1
RANGE $47CC-$47CD DB_DATA 1
RANGE $47CD-$47CE DB_DATA 1
RANGE $47CE-$47CF DB_DATA 1
RANGE $47CF-$47D0 DB_DATA 1
RANGE $47D0-$47D2 DW_DATA 1
RANGE $47D2-$47D3 DB_DATA 1
RANGE $47D3-$47D4 DB_DATA 1
RANGE $47D4-$47D6 DW_DATA 1
RANGE $47D6-$47D7 DB_DATA 1
RANGE $47D7-$47D8 DB_DATA 1
RANGE $47D8-$47D9 DB_DATA 1
RANGE $47D9-$47DA DB_DATA 1
RANGE $47DA-$47DC DW_DATA 1
RANGE $47DC-$47DE DB_DATA 2
RANGE $47DE-$47E0 DB_DATA 2
RANGE $47E0-$47E2 DB_DATA 2
RANGE $47E2-$47E4 DB_DATA 2
RANGE $47E4-$47E6 DB_DATA 2
RANGE $47E6-$47E8 DB_DATA 2
RANGE $47E8-$47EA DB_DATA 2
RANGE $47EA-$47EC DB_DATA 2
RANGE $47EC-$47EE DB_DATA 2
RANGE $47EE-$47F0 DB_DATA 2
RANGE $47F0-$47F2 DB_DATA 2
RANGE $47F2-$47F3 DB_DATA 1
RANGE $47F3-$47F5 DW_DATA 1
RANGE $47F5-$47F6 DB_DATA 1
RANGE $47F6-$47F7 DB_DATA 1
RANGE $47F7-$47F9 DW_DATA 1
RANGE $47F9-$47FA DB_DATA 1
RANGE $47FA-$47FB DB_DATA 1
RANGE $47FB-$47FC DB_DATA 1
RANGE $47FC-$47FD DB_DATA 1
RANGE $47FD-$47FF DW_DATA 1
RANGE $47FF-$4801 DB_DATA 2
RANGE $4801-$4803 DB_DATA 2
RANGE $4803-$4805 DB_DATA 2
RANGE $4805-$4807 DB_DATA 2
RANGE $4807-$4809 DB_DATA 2
RANGE $4809-$480B DB_DATA 2
RANGE $480B-$480D DB_DATA 2
RANGE $480D-$480F DB_DATA 2
RANGE $480F-$4811 DB_DATA 2
RANGE $4811-$4813 DB_DATA 2
RANGE $4813-$4815 DB_DATA 2
RANGE $4815-$4816 DB_DATA 1
RANGE $4816-$4818 DW_DATA 1
RANGE $4818-$4819 DB_DATA 1
RANGE $4819-$481A DB_DATA 1
RANGE $481A-$481C DW_DATA 1
RANGE $481C-$481D DB_DATA 1
RANGE $481D-$481E DB_DATA 1
RANGE $481E-$481F DB_DATA 1
RANGE $481F-$4820 DB_DATA 1
RANGE $4820-$4822 DW_DATA 1
RANGE $4822-$4824 DB_DATA 2
RANGE $4824-$4826 DB_DATA 2
RANGE $4826-$4828 DB_DATA 2
RANGE $4828-$482A DB_DATA 2
RANGE $482A-$482C DB_DATA 2
RANGE $482C-$482E DB_DATA 2
RANGE $482E-$4830 DB_DATA 2
RANGE $4830-$4832 DB_DATA 2
RANGE $4832-$4834 DB_DATA 2
RANGE $4834-$4836 DB_DATA 2
RANGE $4836-$4838 DB_DATA 2
RANGE $4838-$4839 DB_DATA 1
RANGE $4839-$483B DW_DATA 1
RANGE $483B-$483C DB_DATA 1
RANGE $483C-$483D DB_DATA 1
RANGE $483D-$483F DW_DATA 1
RANGE $483F-$4840 DB_DATA 1
RANGE $4840-$4841 DB_DATA 1
RANGE $4841-$4842 DB_DATA 1
RANGE $4842-$4843 DB_DATA 1
RANGE $4843-$4845 DW_DATA 1
RANGE $4845-$4847 DB_DATA 2
RANGE $4847-$4849 DB_DATA 2
RANGE $4849-$484B DB_DATA 2
RANGE $484B-$484D DB_DATA 2
RANGE $484D-$484F DB_DATA 2
RANGE $484F-$4851 DB_DATA 2
RANGE $4851-$4853 DB_DATA 2
RANGE $4853-$4855 DB_DATA 2
RANGE $4855-$4857 DB_DATA 2
RANGE $4857-$4859 DB_DATA 2
RANGE $4859-$485B DB_DATA 2
RANGE $485B-$485C DB_DATA 1
RANGE $485C-$485E DW_DATA 1
RANGE $485E-$485F DB_DATA 1
RANGE $485F-$4860 DB_DATA 1
RANGE $4860-$4862 DW_DATA 1
RANGE $4862-$4863 DB_DATA 1
RANGE $4863-$4864 DB_DATA 1
RANGE $4864-$4865 DB_DATA 1
RANGE $4865-$4866 DB_DATA 1
RANGE $4866-$4868 DW_DATA 1
RANGE $4868-$486A DB_DATA 2
RANGE $486A-$486C DB_DATA 2
RANGE $486C-$486E DB_DATA 2
RANGE $486E-$4870 DB_DATA 2
RANGE $4870-$4872 DB_DATA 2
RANGE $4872-$4874 DB_DATA 2
RANGE $4874-$4876 DB_DATA 2
RANGE $4876-$4878 DB_DATA 2
RANGE $4878-$487A DB_DATA 2
RANGE $487A-$487C DB_DATA 2
RANGE $487C-$487E DB_DATA 2
RANGE $487E-$487F DB_DATA 1
RANGE $487F-$4881 DW_DATA 1
RANGE $4881-$4882 DB_DATA 1
RANGE $4882-$4883 DB_DATA 1
RANGE $4883-$4885 DW_DATA 1
RANGE $4885-$4886 DB_DATA 1
RANGE $4886-$4887 DB_DATA 1
RANGE $4887-$4888 DB_DATA 1
RANGE $4888-$4889 DB_DATA 1
RANGE $4889-$488A DB_DATA 1
RANGE $488A-$488C DW_DATA 1
RANGE $488C-$488D DB_DATA 1
RANGE $488D-$488E DB_DATA 1
RANGE $488E-$4890 DW_DATA 1
RANGE $4890-$4891 DB_DATA 1
RANGE $4891-$4892 DB_DATA 1
RANGE $4892-$4893 DB_DATA 1
RANGE $4893-$4894 DB_DATA 1
RANGE $4894-$4895 DB_DATA 1
RANGE $4895-$4897 DW_DATA 1
RANGE $4897-$4898 DB_DATA 1
RANGE $4898-$4899 DB_DATA 1
RANGE $4899-$489B DW_DATA 1
RANGE $489B-$489C DB_DATA 1
RANGE $489C-$489D DB_DATA 1
RANGE $489D-$489E DB_DATA 1
RANGE $489E-$489F DB_DATA 1
RANGE $489F-$48A0 DB_DATA 1
RANGE $48A0-$48A2 DW_DATA 1
RANGE $48A2-$48A3 DB_DATA 1
RANGE $48A3-$48A4 DB_DATA 1
RANGE $48A4-$48A6 DW_DATA 1
RANGE $48A6-$48A7 DB_DATA 1
RANGE $48A7-$48A8 DB_DATA 1
RANGE $48A8-$48A9 DB_DATA 1
RANGE $48A9-$48AA DB_DATA 1
RANGE $48AA-$48AB DB_DATA 1
RANGE $48AB-$48AD DW_DATA 1
RANGE $48AD-$48AE DB_DATA 1
RANGE $48AE-$48AF DB_DATA 1
RANGE $48AF-$48B1 DW_DATA 1
RANGE $48B1-$48B2 DB_DATA 1
RANGE $48B2-$48B3 DB_DATA 1
RANGE $48B3-$48B4 DB_DATA 1
RANGE $48B4-$48B5 DB_DATA 1
RANGE $48B5-$48B6 DB_DATA 1
RANGE $48B6-$48B8 DW_DATA 1
RANGE $48B8-$48B9 DB_DATA 1
RANGE $48B9-$48BA DB_DATA 1
RANGE $48BA-$48BC DW_DATA 1
RANGE $48BC-$48BD DB_DATA 1
RANGE $48BD-$48BE DB_DATA 1
RANGE $48BE-$48BF DB_DATA 1
RANGE $48BF-$48C0 DB_DATA 1
RANGE $48C0-$48C1 DB_DATA 1
RANGE $48C1-$48C3 DW_DATA 1
RANGE $48C3-$48C4 DB_DATA 1
RANGE $48C4-$48C5 DB_DATA 1
RANGE $48C5-$48C7 DW_DATA 1
RANGE $48C7-$48C8 DB_DATA 1
RANGE $48C8-$48C9 DB_DATA 1
RANGE $48C9-$48CA DB_DATA 1
RANGE $48CA-$48CB DB_DATA 1
RANGE $48CB-$48CC DB_DATA 1
RANGE $48CC-$48CE DW_DATA 1
RANGE $48CE-$48CF DB_DATA 1
RANGE $48CF-$48D0 DB_DATA 1
RANGE $48D0-$48D2 DW_DATA 1
RANGE $48D2-$48D3 DB_DATA 1
RANGE $48D3-$48D4 DB_DATA 1
RANGE $48D4-$48D5 DB_DATA 1
RANGE $48D5-$48D6 DB_DATA 1
RANGE $48D6-$48D7 DB_DATA 1
RANGE $48D7-$48D9 DW_DATA 1
RANGE $48D9-$48DA DB_DATA 1
RANGE $48DA-$48DB DB_DATA 1
RANGE $48DB-$48DD DW_DATA 1
RANGE $48DD-$48DE DB_DATA 1
RANGE $48DE-$48DF DB_DATA 1
RANGE $48DF-$48E0 DB_DATA 1
RANGE $48E0-$48E1 DB_DATA 1
RANGE $48E1-$48E2 DB_DATA 1
RANGE $48E2-$48E4 DW_DATA 1
RANGE $48E4-$48E5 DB_DATA 1
RANGE $48E5-$48E6 DB_DATA 1
RANGE $48E6-$48E8 DW_DATA 1
RANGE $48E8-$48E9 DB_DATA 1
RANGE $48E9-$48EA DB_DATA 1
RANGE $48EA-$48EB DB_DATA 1
RANGE $48EB-$48EC DB_DATA 1
RANGE $48EC-$48ED DB_DATA 1
RANGE $48ED-$48EF DW_DATA 1
RANGE $48EF-$48F0 DB_DATA 1
RANGE $48F0-$48F1 DB_DATA 1
RANGE $48F1-$48F3 DW_DATA 1
RANGE $48F3-$48F4 DB_DATA 1
RANGE $48F4-$48F5 DB_DATA 1
RANGE $48F5-$48F6 DB_DATA 1
RANGE $48F6-$48F7 DB_DATA 1
RANGE $48F7-$48F8 DB_DATA 1
RANGE $48F8-$48FA DW_DATA 1
RANGE $48FA-$48FB DB_DATA 1
RANGE $48FB-$48FC DB_DATA 1
RANGE $48FC-$48FE DW_DATA 1
RANGE $48FE-$48FF DB_DATA 1
RANGE $48FF-$4900 DB_DATA 1
RANGE $4900-$4901 DB_DATA 1
RANGE $4901-$4902 DB_DATA 1
RANGE $4902-$4904 DW_DATA 1
RANGE $4904-$4906 DB_DATA 2
RANGE $4906-$4908 DB_DATA 2
RANGE $4908-$490A DB_DATA 2
RANGE $490A-$490C DB_DATA 2
RANGE $490C-$490E DB_DATA 2
RANGE $490E-$4910 DB_DATA 2
RANGE $4910-$4912 DB_DATA 2
RANGE $4912-$4914 DB_DATA 2
RANGE $4914-$4916 DB_DATA 2
RANGE $4916-$4918 DB_DATA 2
RANGE $4918-$491A DB_DATA 2
RANGE $491A-$491C DB_DATA 2
RANGE $491C-$491E DB_DATA 2
RANGE $491E-$4920 DB_DATA 2
RANGE $4920-$4921 DB_DATA 1
RANGE $4921-$4923 DW_DATA 1
RANGE $4923-$4924 DB_DATA 1
RANGE $4924-$4925 DB_DATA 1
RANGE $4925-$4927 DW_DATA 1
RANGE $4927-$4928 DB_DATA 1
RANGE $4928-$4929 DB_DATA 1
RANGE $4929-$492A DB_DATA 1
RANGE $492A-$492B DB_DATA 1
RANGE $492B-$492D DW_DATA 1
RANGE $492D-$492F DB_DATA 2
RANGE $492F-$4931 DB_DATA 2
RANGE $4931-$4933 DB_DATA 2
RANGE $4933-$4935 DB_DATA 2
RANGE $4935-$4937 DB_DATA 2
RANGE $4937-$4939 DB_DATA 2
RANGE $4939-$493B DB_DATA 2
RANGE $493B-$493D DB_DATA 2
RANGE $493D-$493F DB_DATA 2
RANGE $493F-$4941 DB_DATA 2
RANGE $4941-$4943 DB_DATA 2
RANGE $4943-$4945 DB_DATA 2
RANGE $4945-$4947 DB_DATA 2
RANGE $4947-$4949 DB_DATA 2
RANGE $4949-$494A DB_DATA 1
RANGE $494A-$494C DW_DATA 1
RANGE $494C-$494D DB_DATA 1
RANGE $494D-$494E DB_DATA 1
RANGE $494E-$4950 DW_DATA 1
RANGE $4950-$4951 DB_DATA 1
RANGE $4951-$4952 DB_DATA 1
RANGE $4952-$4953 DB_DATA 1
RANGE $4953-$4954 DB_DATA 1
RANGE $4954-$4956 DW_DATA 1
RANGE $4956-$4958 DB_DATA 2
RANGE $4958-$495A DB_DATA 2
RANGE $495A-$495C DB_DATA 2
RANGE $495C-$495E DB_DATA 2
RANGE $495E-$4960 DB_DATA 2
RANGE $4960-$4962 DB_DATA 2
RANGE $4962-$4964 DB_DATA 2
RANGE $4964-$4966 DB_DATA 2
RANGE $4966-$4968 DB_DATA 2
RANGE $4968-$496A DB_DATA 2
RANGE $496A-$496C DB_DATA 2
RANGE $496C-$496E DB_DATA 2
RANGE $496E-$496F DB_DATA 1
RANGE $496F-$4971 DW_DATA 1
RANGE $4971-$4972 DB_DATA 1
RANGE $4972-$4973 DB_DATA 1
RANGE $4973-$4975 DW_DATA 1
RANGE $4975-$4976 DB_DATA 1
RANGE $4976-$4977 DB_DATA 1
RANGE $4977-$4978 DB_DATA 1
RANGE $4978-$4979 DB_DATA 1
RANGE $4979-$497B DW_DATA 1
RANGE $497B-$497D DB_DATA 2
RANGE $497D-$497F DB_DATA 2
RANGE $497F-$4981 DB_DATA 2
RANGE $4981-$4983 DB_DATA 2
RANGE $4983-$4985 DB_DATA 2
RANGE $4985-$4987 DB_DATA 2
RANGE $4987-$4989 DB_DATA 2
RANGE $4989-$498B DB_DATA 2
RANGE $498B-$498D DB_DATA 2
RANGE $498D-$498F DB_DATA 2
RANGE $498F-$4991 DB_DATA 2
RANGE $4991-$4993 DB_DATA 2
RANGE $4993-$4995 DB_DATA 2
RANGE $4995-$4997 DB_DATA 2
RANGE $4997-$4998 DB_DATA 1
RANGE $4998-$499A DW_DATA 1
RANGE $499A-$499B DB_DATA 1
RANGE $499B-$499C DB_DATA 1
RANGE $499C-$499E DW_DATA 1
RANGE $499E-$499F DB_DATA 1
RANGE $499F-$49A0 DB_DATA 1
RANGE $49A0-$49A1 DB_DATA 1
RANGE $49A1-$49A2 DB_DATA 1
RANGE $49A2-$49A3 DB_DATA 1
RANGE $49A3-$49A5 DW_DATA 1
RANGE $49A5-$49A6 DB_DATA 1
RANGE $49A6-$49A7 DB_DATA 1
RANGE $49A7-$49A9 DW_DATA 1
RANGE $49A9-$49AA DB_DATA 1
RANGE $49AA-$49AB DB_DATA 1
RANGE $49AB-$49AC DB_DATA 1
RANGE $49AC-$49AD DB_DATA 1
RANGE $49AD-$49AE DB_DATA 1
RANGE $49AE-$49B0 DW_DATA 1
RANGE $49B0-$49B1 DB_DATA 1
RANGE $49B1-$49B2 DB_DATA 1
RANGE $49B2-$49B4 DW_DATA 1
RANGE $49B4-$49B5 DB_DATA 1
RANGE $49B5-$49B6 DB_DATA 1
RANGE $49B6-$49B7 DB_DATA 1
RANGE $49B7-$49B8 DB_DATA 1
RANGE $49B8-$49B9 DB_DATA 1
RANGE $49B9-$49BB DW_DATA 1
RANGE $49BB-$49BC DB_DATA 1
RANGE $49BC-$49BD DB_DATA 1
RANGE $49BD-$49BF DW_DATA 1
RANGE $49BF-$49C0 DB_DATA 1
RANGE $49C0-$49C1 DB_DATA 1
RANGE $49C1-$49C2 DB_DATA 1
RANGE $49C2-$49C3 DB_DATA 1
RANGE $49C3-$49C4 DB_DATA 1
RANGE $49C4-$49C6 DW_DATA 1
RANGE $49C6-$49C7 DB_DATA 1
RANGE $49C7-$49C8 DB_DATA 1
RANGE $49C8-$49CA DW_DATA 1
RANGE $49CA-$49CB DB_DATA 1
RANGE $49CB-$49CC DB_DATA 1
RANGE $49CC-$49CD DB_DATA 1
RANGE $49CD-$49CE DB_DATA 1
RANGE $49CE-$49D0 DW_DATA 1
RANGE $49D0-$49D2 DB_DATA 2
RANGE $49D2-$49D4 DB_DATA 2
RANGE $49D4-$49D6 DB_DATA 2
RANGE $49D6-$49D8 DB_DATA 2
RANGE $49D8-$49DA DB_DATA 2
RANGE $49DA-$49DC DB_DATA 2
RANGE $49DC-$49DE DB_DATA 2
RANGE $49DE-$49E0 DB_DATA 2
RANGE $49E0-$49E2 DB_DATA 2
RANGE $49E2-$49E4 DB_DATA 2
RANGE $49E4-$49E6 DB_DATA 2
RANGE $49E6-$49E8 DB_DATA 2
RANGE $49E8-$49EA DB_DATA 2
RANGE $49EA-$49EB DB_DATA 1
RANGE $49EB-$49ED DW_DATA 1
RANGE $49ED-$49EE DB_DATA 1
RANGE $49EE-$49EF DB_DATA 1
RANGE $49EF-$49F1 DW_DATA 1
RANGE $49F1-$49F2 DB_DATA 1
RANGE $49F2-$49F3 DB_DATA 1
RANGE $49F3-$49F4 DB_DATA 1
RANGE $49F4-$49F5 DB_DATA 1
RANGE $49F5-$49F7 DW_DATA 1
RANGE $49F7-$49F9 DB_DATA 2
RANGE $49F9-$49FB DB_DATA 2
RANGE $49FB-$49FD DB_DATA 2
RANGE $49FD-$49FF DB_DATA 2
RANGE $49FF-$4A01 DB_DATA 2
RANGE $4A01-$4A03 DB_DATA 2
RANGE $4A03-$4A05 DB_DATA 2
RANGE $4A05-$4A07 DB_DATA 2
RANGE $4A07-$4A09 DB_DATA 2
RANGE $4A09-$4A0B DB_DATA 2
RANGE $4A0B-$4A0D DB_DATA 2
RANGE $4A0D-$4A0F DB_DATA 2
RANGE $4A0F-$4A11 DB_DATA 2
RANGE $4A11-$4A13 DB_DATA 2
RANGE $4A13-$4A15 DB_DATA 2
RANGE $4A15-$4A17 DB_DATA 2
RANGE $4A17-$4A18 DB_DATA 1
RANGE $4A18-$4A1A DW_DATA 1
RANGE $4A1A-$4A1B DB_DATA 1
RANGE $4A1B-$4A1C DB_DATA 1
RANGE $4A1C-$4A1E DW_DATA 1
RANGE $4A1E-$4A1F DB_DATA 1
RANGE $4A1F-$4A20 DB_DATA 1
RANGE $4A20-$4A21 DB_DATA 1
RANGE $4A21-$4A22 DB_DATA 1
RANGE $4A22-$4A24 DW_DATA 1
RANGE $4A24-$4A26 DB_DATA 2
RANGE $4A26-$4A28 DB_DATA 2
RANGE $4A28-$4A2A DB_DATA 2
RANGE $4A2A-$4A2C DB_DATA 2
RANGE $4A2C-$4A2E DB_DATA 2
RANGE $4A2E-$4A30 DB_DATA 2
RANGE $4A30-$4A32 DB_DATA 2
RANGE $4A32-$4A34 DB_DATA 2
RANGE $4A34-$4A36 DB_DATA 2
RANGE $4A36-$4A38 DB_DATA 2
RANGE $4A38-$4A3A DB_DATA 2
RANGE $4A3A-$4A3C DB_DATA 2
RANGE $4A3C-$4A3E DB_DATA 2
RANGE $4A3E-$4A40 DB_DATA 2
RANGE $4A40-$4A42 DB_DATA 2
RANGE $4A42-$4A44 DB_DATA 2
RANGE $4A44-$4A46 DB_DATA 2
RANGE $4A46-$4A48 DB_DATA 2
RANGE $4A48-$4A49 DB_DATA 1
RANGE $4A49-$4A4B DW_DATA 1
RANGE $4A4B-$4A4C DB_DATA 1
RANGE $4A4C-$4A4D DB_DATA 1
RANGE $4A4D-$4A4F DW_DATA 1
RANGE $4A4F-$4A50 DB_DATA 1
RANGE $4A50-$4A51 DB_DATA 1
RANGE $4A51-$4A52 DB_DATA 1
RANGE $4A52-$4A53 DB_DATA 1
RANGE $4A53-$4A55 DW_DATA 1
RANGE $4A55-$4A57 DB_DATA 2
RANGE $4A57-$4A59 DB_DATA 2
RANGE $4A59-$4A5B DB_DATA 2
RANGE $4A5B-$4A5D DB_DATA 2
RANGE $4A5D-$4A5F DB_DATA 2
RANGE $4A5F-$4A61 DB_DATA 2
RANGE $4A61-$4A63 DB_DATA 2
RANGE $4A63-$4A65 DB_DATA 2
RANGE $4A65-$4A67 DB_DATA 2
RANGE $4A67-$4A69 DB_DATA 2
RANGE $4A69-$4A6B DB_DATA 2
RANGE $4A6B-$4A6D DB_DATA 2
RANGE $4A6D-$4A6F DB_DATA 2
RANGE $4A6F-$4A71 DB_DATA 2
RANGE $4A71-$4A73 DB_DATA 2
RANGE $4A73-$4A75 DB_DATA 2
RANGE $4A75-$4A77 DB_DATA 2
RANGE $4A77-$4A79 DB_DATA 2
RANGE $4A79-$4A7A DB_DATA 1
RANGE $4A7A-$4A7C DW_DATA 1
RANGE $4A7C-$4A7D DB_DATA 1
RANGE $4A7D-$4A7E DB_DATA 1
RANGE $4A7E-$4A80 DW_DATA 1
RANGE $4A80-$4A81 DB_DATA 1
RANGE $4A81-$4A82 DB_DATA 1
RANGE $4A82-$4A83 DB_DATA 1
RANGE $4A83-$4A84 DB_DATA 1
RANGE $4A84-$4A86 DW_DATA 1
RANGE $4A86-$4A88 DB_DATA 2
RANGE $4A88-$4A8A DB_DATA 2
RANGE $4A8A-$4A8C DB_DATA 2
RANGE $4A8C-$4A8E DB_DATA 2
RANGE $4A8E-$4A90 DB_DATA 2
RANGE $4A90-$4A92 DB_DATA 2
RANGE $4A92-$4A94 DB_DATA 2
RANGE $4A94-$4A96 DB_DATA 2
RANGE $4A96-$4A98 DB_DATA 2
RANGE $4A98-$4A9A DB_DATA 2
RANGE $4A9A-$4A9C DB_DATA 2
RANGE $4A9C-$4A9E DB_DATA 2
RANGE $4A9E-$4AA0 DB_DATA 2
RANGE $4AA0-$4AA2 DB_DATA 2
RANGE $4AA2-$4AA4 DB_DATA 2
RANGE $4AA4-$4AA6 DB_DATA 2
RANGE $4AA6-$4AA8 DB_DATA 2
RANGE $4AA8-$4AAA DB_DATA 2
RANGE $4AAA-$4AAB DB_DATA 1
RANGE $4AAB-$4AAD DW_DATA 1
RANGE $4AAD-$4AAE DB_DATA 1
RANGE $4AAE-$4AAF DB_DATA 1
RANGE $4AAF-$4AB1 DW_DATA 1
RANGE $4AB1-$4AB2 DB_DATA 1
RANGE $4AB2-$4AB3 DB_DATA 1
RANGE $4AB3-$4AB4 DB_DATA 1
RANGE $4AB4-$4AB5 DB_DATA 1
RANGE $4AB5-$4AB6 DB_DATA 1
RANGE $4AB6-$4AB8 DW_DATA 1
RANGE $4AB8-$4AB9 DB_DATA 1
RANGE $4AB9-$4ABA DB_DATA 1
RANGE $4ABA-$4ABC DW_DATA 1
RANGE $4ABC-$4ABD DB_DATA 1
RANGE $4ABD-$4ABE DB_DATA 1
RANGE $4ABE-$4ABF DB_DATA 1
RANGE $4ABF-$4AC0 DB_DATA 1
RANGE $4AC0-$4AC2 DW_DATA 1
RANGE $4AC2-$4AC4 DB_DATA 2
RANGE $4AC4-$4AC6 DB_DATA 2
RANGE $4AC6-$4AC8 DB_DATA 2
RANGE $4AC8-$4ACA DB_DATA 2
RANGE $4ACA-$4ACC DB_DATA 2
RANGE $4ACC-$4ACE DB_DATA 2
RANGE $4ACE-$4AD0 DB_DATA 2
RANGE $4AD0-$4AD2 DB_DATA 2
RANGE $4AD2-$4AD4 DB_DATA 2
RANGE $4AD4-$4AD6 DB_DATA 2
RANGE $4AD6-$4AD7 DB_DATA 1
RANGE $4AD7-$4AD9 DW_DATA 1
RANGE $4AD9-$4ADA DB_DATA 1
RANGE $4ADA-$4ADB DB_DATA 1
RANGE $4ADB-$4ADD DW_DATA 1
RANGE $4ADD-$4ADE DB_DATA 1
RANGE $4ADE-$4ADF DB_DATA 1
RANGE $4ADF-$4AE0 DB_DATA 1
RANGE $4AE0-$4AE1 DB_DATA 1
RANGE $4AE1-$4AE3 DW_DATA 1
RANGE $4AE3-$4AE5 DB_DATA 2
RANGE $4AE5-$4AE7 DB_DATA 2
RANGE $4AE7-$4AE9 DB_DATA 2
RANGE $4AE9-$4AEB DB_DATA 2
RANGE $4AEB-$4AED DB_DATA 2
RANGE $4AED-$4AEF DB_DATA 2
RANGE $4AEF-$4AF1 DB_DATA 2
RANGE $4AF1-$4AF3 DB_DATA 2
RANGE $4AF3-$4AF5 DB_DATA 2
RANGE $4AF5-$4AF7 DB_DATA 2
RANGE $4AF7-$4AF8 DB_DATA 1
RANGE $4AF8-$4AFA DW_DATA 1
RANGE $4AFA-$4AFB DB_DATA 1
RANGE $4AFB-$4AFC DB_DATA 1
RANGE $4AFC-$4AFE DW_DATA 1
RANGE $4AFE-$4AFF DB_DATA 1
RANGE $4AFF-$4B00 DB_DATA 1
RANGE $4B00-$4B01 DB_DATA 1
RANGE $4B01-$4B02 DB_DATA 1
RANGE $4B02-$4B04 DW_DATA 1
RANGE $4B04-$4B06 DW_DATA 1
RANGE $4B06-$4B08 DW_DATA 1
RANGE $4B08-$4B0A DW_DATA 1
RANGE $4B0A-$4B0C DW_DATA 1
RANGE $4B0C-$4B0E DW_DATA 1
RANGE $4B0E-$4B10 DW_DATA 1
RANGE $4B10-$4B12 DW_DATA 1
RANGE $4B12-$4B14 DW_DATA 1
RANGE $4B14-$4B16 DW_DATA 1
RANGE $4B16-$4B18 DW_DATA 1
RANGE $4B18-$4B1A DW_DATA 1
RANGE $4B1A-$4B1C DW_DATA 1
RANGE $4B1C-$4B1E DW_DATA 1
RANGE $4B1E-$4B20 DW_DATA 1
RANGE $4B20-$4B22 DW_DATA 1
RANGE $4B22-$4B24 DW_DATA 1
RANGE $4B24-$4B26 DW_DATA 1
RANGE $4B26-$4B28 DW_DATA 1
RANGE $4B28-$4B2A DW_DATA 1
RANGE $4B2A-$4B2C DW_DATA 1
RANGE $4B2C-$4B2E DW_DATA 1
RANGE $4B2E-$4B30 DW_DATA 1
RANGE $4B30-$4B32 DW_DATA 1
RANGE $4B32-$4B34 DW_DATA 1
RANGE $4B34-$4B36 DW_DATA 1
RANGE $4B36-$4B38 DW_DATA 1
RANGE $4B38-$4B3A DW_DATA 1
RANGE $4B3A-$4B3C DW_DATA 1
RANGE $4B3C-$4B3E DW_DATA 1
RANGE $4B3E-$4B40 DW_DATA 1
RANGE $4B40-$4B42 DW_DATA 1
RANGE $4B42-$4B44 DW_DATA 1
RANGE $4B44-$4B46 DW_DATA 1
RANGE $4B46-$4B48 DW_DATA 1
RANGE $4B48-$4B4A DW_DATA 1
RANGE $4B4A-$4B4C DW_DATA 1
RANGE $4B4C-$4B4E DW_DATA 1
RANGE $4B4E-$4B50 DW_DATA 1
RANGE $4B50-$4B52 DW_DATA 1
RANGE $4B52-$4B54 DW_DATA 1
RANGE $4B54-$4B56 DW_DATA 1
RANGE $4B56-$4B58 DW_DATA 1
RANGE $4B58-$4B5A DW_DATA 1
RANGE $4B5A-$4B5C DW_DATA 1
RANGE $4B5C-$4B5E DW_DATA 1
RANGE $4B5E-$4B60 DW_DATA 1
RANGE $4B60-$4B6C DB_DATA 12
RANGE $4B6C-$4B78 DB_DATA 12
RANGE $4B78-$4B84 DB_DATA 12
RANGE $4B84-$4B90 DB_DATA 12
RANGE $4B90-$4B9C DB_DATA 12
RANGE $4B9C-$4BA8 DB_DATA 12
RANGE $4BA8-$4BB4 DB_DATA 12
RANGE $4BB4-$4BC0 DB_DATA 12
RANGE $4BC0-$4BCC DB_DATA 12
RANGE $4BCC-$4BD8 DB_DATA 12
RANGE $4BD8-$4BE4 DB_DATA 12
RANGE $4BE4-$4BE5 DB_DATA 1
RANGE $4BE5-$4BE6 DB_DATA 1
RANGE $4BE6-$4BE7 DB_DATA 1
RANGE $4BE7-$4BE8 DB_DATA 1
RANGE $4BE8-$4BE9 DB_DATA 1
RANGE $4BE9-$4BEA DB_DATA 1
RANGE $4BEA-$4BEB DB_DATA 1
RANGE $4BEB-$4BF7 DB_DATA 12
RANGE $4BF7-$4C03 DB_DATA 12
RANGE $4C03-$4C0F DB_DATA 12
RANGE $4C0F-$4C1B DB_DATA 12
RANGE $4C1B-$4C27 DB_DATA 12
RANGE $4C27-$4C33 DB_DATA 12
RANGE $4C33-$4C3F DB_DATA 12
RANGE $4C3F-$4C4B DB_DATA 12
RANGE $4C4B-$4C57 DB_DATA 12
RANGE $4C57-$4C63 DB_DATA 12
RANGE $4C63-$4C6F DB_DATA 12
RANGE $4C6F-$4C70 DB_DATA 1
RANGE $4C70-$4C71 DB_DATA 1
RANGE $4C71-$4C72 DB_DATA 1
RANGE $4C72-$4C73 DB_DATA 1
RANGE $4C73-$4C74 DB_DATA 1
RANGE $4C74-$4C75 DB_DATA 1
RANGE $4C75-$4C76 DB_DATA 1
RANGE $4C76-$4C82 DB_DATA 12
RANGE $4C82-$4C8E DB_DATA 12
RANGE $4C8E-$4C9A DB_DATA 12
RANGE $4C9A-$4CA6 DB_DATA 12
RANGE $4CA6-$4CB2 DB_DATA 12
RANGE $4CB2-$4CBE DB_DATA 12
RANGE $4CBE-$4CCA DB_DATA 12
RANGE $4CCA-$4CD6 DB_DATA 12
RANGE $4CD6-$4CE2 DB_DATA 12
RANGE $4CE2-$4CEE DB_DATA 12
RANGE $4CEE-$4CFA DB_DATA 12
RANGE $4CFA-$4CFB DB_DATA 1
RANGE $4CFB-$4CFC DB_DATA 1
RANGE $4CFC-$4CFD DB_DATA 1
RANGE $4CFD-$4CFE DB_DATA 1
RANGE $4CFE-$4CFF DB_DATA 1
RANGE $4CFF-$4D00 DB_DATA 1
RANGE $4D00-$4D01 DB_DATA 1
RANGE $4D01-$4D0D DB_DATA 12
RANGE $4D0D-$4D19 DB_DATA 12
RANGE $4D19-$4D25 DB_DATA 12
RANGE $4D25-$4D31 DB_DATA 12
RANGE $4D31-$4D3D DB_DATA 12
RANGE $4D3D-$4D49 DB_DATA 12
RANGE $4D49-$4D55 DB_DATA 12
RANGE $4D55-$4D61 DB_DATA 12
RANGE $4D61-$4D6D DB_DATA 12
RANGE $4D6D-$4D79 DB_DATA 12
RANGE $4D79-$4D85 DB_DATA 12
RANGE $4D85-$4D86 DB_DATA 1
RANGE $4D86-$4D87 DB_DATA 1
RANGE $4D87-$4D88 DB_DATA 1
RANGE $4D88-$4D89 DB_DATA 1
RANGE $4D89-$4D8A DB_DATA 1
RANGE $4D8A-$4D8B DB_DATA 1
RANGE $4D8B-$4D8C DB_DATA 1
RANGE $4D8C-$4D98 DB_DATA 12
RANGE $4D98-$4DA4 DB_DATA 12
RANGE $4DA4-$4DB0 DB_DATA 12
RANGE $4DB0-$4DBC DB_DATA 12
RANGE $4DBC-$4DC8 DB_DATA 12
RANGE $4DC8-$4DD4 DB_DATA 12
RANGE $4DD4-$4DE0 DB_DATA 12
RANGE $4DE0-$4DEC DB_DATA 12
RANGE $4DEC-$4DF8 DB_DATA 12
RANGE $4DF8-$4E04 DB_DATA 12
RANGE $4E04-$4E10 DB_DATA 12
RANGE $4E10-$4E11 DB_DATA 1
RANGE $4E11-$4E12 DB_DATA 1
RANGE $4E12-$4E13 DB_DATA 1
RANGE $4E13-$4E14 DB_DATA 1
RANGE $4E14-$4E15 DB_DATA 1
RANGE $4E15-$4E16 DB_DATA 1
RANGE $4E16-$4E17 DB_DATA 1
RANGE $4E17-$4E23 DB_DATA 12
RANGE $4E23-$4E2F DB_DATA 12
RANGE $4E2F-$4E3B DB_DATA 12
RANGE $4E3B-$4E47 DB_DATA 12
RANGE $4E47-$4E53 DB_DATA 12
RANGE $4E53-$4E5F DB_DATA 12
RANGE $4E5F-$4E6B DB_DATA 12
RANGE $4E6B-$4E77 DB_DATA 12
RANGE $4E77-$4E83 DB_DATA 12
RANGE $4E83-$4E8F DB_DATA 12
RANGE $4E8F-$4E9B DB_DATA 12
RANGE $4E9B-$4E9C DB_DATA 1
RANGE $4E9C-$4E9D DB_DATA 1
RANGE $4E9D-$4E9E DB_DATA 1
RANGE $4E9E-$4E9F DB_DATA 1
RANGE $4E9F-$4EA0 DB_DATA 1
RANGE $4EA0-$4EA1 DB_DATA 1
RANGE $4EA1-$4EA2 DB_DATA 1
RANGE $4EA2-$4EAE DB_DATA 12
RANGE $4EAE-$4EBA DB_DATA 12
RANGE $4EBA-$4EC6 DB_DATA 12
RANGE $4EC6-$4ED2 DB_DATA 12
RANGE $4ED2-$4EDE DB_DATA 12
RANGE $4EDE-$4EEA DB_DATA 12
RANGE $4EEA-$4EF6 DB_DATA 12
RANGE $4EF6-$4F02 DB_DATA 12
RANGE $4F02-$4F0E DB_DATA 12
RANGE $4F0E-$4F1A DB_DATA 12
RANGE $4F1A-$4F26 DB_DATA 12
RANGE $4F26-$4F27 DB_DATA 1
RANGE $4F27-$4F28 DB_DATA 1
RANGE $4F28-$4F29 DB_DATA 1
RANGE $4F29-$4F2A DB_DATA 1
RANGE $4F2A-$4F2B DB_DATA 1
RANGE $4F2B-$4F2C DB_DATA 1
RANGE $4F2C-$4F2D DB_DATA 1
RANGE $4F2D-$4F39 DB_DATA 12
RANGE $4F39-$4F45 DB_DATA 12
RANGE $4F45-$4F51 DB_DATA 12
RANGE $4F51-$4F5D DB_DATA 12
RANGE $4F5D-$4F69 DB_DATA 12
RANGE $4F69-$4F75 DB_DATA 12
RANGE $4F75-$4F81 DB_DATA 12
RANGE $4F81-$4F8D DB_DATA 12
RANGE $4F8D-$4F99 DB_DATA 12
RANGE $4F99-$4FA5 DB_DATA 12
RANGE $4FA5-$4FB1 DB_DATA 12
RANGE $4FB1-$4FB2 DB_DATA 1
RANGE $4FB2-$4FB3 DB_DATA 1
RANGE $4FB3-$4FB4 DB_DATA 1
RANGE $4FB4-$4FB5 DB_DATA 1
RANGE $4FB5-$4FB6 DB_DATA 1
RANGE $4FB6-$4FB7 DB_DATA 1
RANGE $4FB7-$4FB8 DB_DATA 1
RANGE $4FB8-$4FC4 DB_DATA 12
RANGE $4FC4-$4FD0 DB_DATA 12
RANGE $4FD0-$4FDC DB_DATA 12
RANGE $4FDC-$4FE8 DB_DATA 12
RANGE $4FE8-$4FF4 DB_DATA 12
RANGE $4FF4-$5000 DB_DATA 12
RANGE $5000-$500C DB_DATA 12
RANGE $500C-$5018 DB_DATA 12
RANGE $5018-$5024 DB_DATA 12
RANGE $5024-$5030 DB_DATA 12
RANGE $5030-$503C DB_DATA 12
RANGE $503C-$503D DB_DATA 1
RANGE $503D-$503E DB_DATA 1
RANGE $503E-$503F DB_DATA 1
RANGE $503F-$5040 DB_DATA 1
RANGE $5040-$5041 DB_DATA 1
RANGE $5041-$5042 DB_DATA 1
RANGE $5042-$5043 DB_DATA 1
RANGE $5043-$504F DB_DATA 12
RANGE $504F-$505B DB_DATA 12
RANGE $505B-$5067 DB_DATA 12
RANGE $5067-$5073 DB_DATA 12
RANGE $5073-$507F DB_DATA 12
RANGE $507F-$508B DB_DATA 12
RANGE $508B-$5097 DB_DATA 12
RANGE $5097-$50A3 DB_DATA 12
RANGE $50A3-$50AF DB_DATA 12
RANGE $50AF-$50BB DB_DATA 12
RANGE $50BB-$50C7 DB_DATA 12
RANGE $50C7-$50C8 DB_DATA 1
RANGE $50C8-$50C9 DB_DATA 1
RANGE $50C9-$50CA DB_DATA 1
RANGE $50CA-$50CB DB_DATA 1
RANGE $50CB-$50CC DB_DATA 1
RANGE $50CC-$50CD DB_DATA 1
RANGE $50CD-$50CE DB_DATA 1
RANGE $50CE-$50DA DB_DATA 12
RANGE $50DA-$50E6 DB_DATA 12
RANGE $50E6-$50F2 DB_DATA 12
RANGE $50F2-$50FE DB_DATA 12
RANGE $50FE-$510A DB_DATA 12
RANGE $510A-$5116 DB_DATA 12
RANGE $5116-$5122 DB_DATA 12
RANGE $5122-$512E DB_DATA 12
RANGE $512E-$513A DB_DATA 12
RANGE $513A-$5146 DB_DATA 12
RANGE $5146-$5152 DB_DATA 12
RANGE $5152-$5153 DB_DATA 1
RANGE $5153-$5154 DB_DATA 1
RANGE $5154-$5155 DB_DATA 1
RANGE $5155-$5156 DB_DATA 1
RANGE $5156-$5157 DB_DATA 1
RANGE $5157-$5158 DB_DATA 1
RANGE $5158-$5159 DB_DATA 1
RANGE $5159-$5165 DB_DATA 12
RANGE $5165-$5171 DB_DATA 12
RANGE $5171-$517D DB_DATA 12
RANGE $517D-$5189 DB_DATA 12
RANGE $5189-$5195 DB_DATA 12
RANGE $5195-$51A1 DB_DATA 12
RANGE $51A1-$51AD DB_DATA 12
RANGE $51AD-$51B9 DB_DATA 12
RANGE $51B9-$51C5 DB_DATA 12
RANGE $51C5-$51D1 DB_DATA 12
RANGE $51D1-$51DD DB_DATA 12
RANGE $51DD-$51DE DB_DATA 1
RANGE $51DE-$51DF DB_DATA 1
RANGE $51DF-$51E0 DB_DATA 1
RANGE $51E0-$51E1 DB_DATA 1
RANGE $51E1-$51E2 DB_DATA 1
RANGE $51E2-$51E3 DB_DATA 1
RANGE $51E3-$51E4 DB_DATA 1
RANGE $51E4-$51F0 DB_DATA 12
RANGE $51F0-$51FC DB_DATA 12
RANGE $51FC-$5208 DB_DATA 12
RANGE $5208-$5214 DB_DATA 12
RANGE $5214-$5220 DB_DATA 12
RANGE $5220-$522C DB_DATA 12
RANGE $522C-$5238 DB_DATA 12
RANGE $5238-$5244 DB_DATA 12
RANGE $5244-$5250 DB_DATA 12
RANGE $5250-$525C DB_DATA 12
RANGE $525C-$5268 DB_DATA 12
RANGE $5268-$5269 DB_DATA 1
RANGE $5269-$526A DB_DATA 1
RANGE $526A-$526B DB_DATA 1
RANGE $526B-$526C DB_DATA 1
RANGE $526C-$526D DB_DATA 1
RANGE $526D-$526E DB_DATA 1
RANGE $526E-$526F DB_DATA 1
RANGE $526F-$527B DB_DATA 12
RANGE $527B-$5287 DB_DATA 12
RANGE $5287-$5293 DB_DATA 12
RANGE $5293-$529F DB_DATA 12
RANGE $529F-$52AB DB_DATA 12
RANGE $52AB-$52B7 DB_DATA 12
RANGE $52B7-$52C3 DB_DATA 12
RANGE $52C3-$52CF DB_DATA 12
RANGE $52CF-$52DB DB_DATA 12
RANGE $52DB-$52E7 DB_DATA 12
RANGE $52E7-$52F3 DB_DATA 12
RANGE $52F3-$52F4 DB_DATA 1
RANGE $52F4-$52F5 DB_DATA 1
RANGE $52F5-$52F6 DB_DATA 1
RANGE $52F6-$52F7 DB_DATA 1
RANGE $52F7-$52F8 DB_DATA 1
RANGE $52F8-$52F9 DB_DATA 1
RANGE $52F9-$52FA DB_DATA 1
RANGE $52FA-$5306 DB_DATA 12
RANGE $5306-$5312 DB_DATA 12
RANGE $5312-$531E DB_DATA 12
RANGE $531E-$532A DB_DATA 12
RANGE $532A-$5336 DB_DATA 12
RANGE $5336-$5342 DB_DATA 12
RANGE $5342-$534E DB_DATA 12
RANGE $534E-$535A DB_DATA 12
RANGE $535A-$5366 DB_DATA 12
RANGE $5366-$5372 DB_DATA 12
RANGE $5372-$537E DB_DATA 12
RANGE $537E-$537F DB_DATA 1
RANGE $537F-$5380 DB_DATA 1
RANGE $5380-$5381 DB_DATA 1
RANGE $5381-$5382 DB_DATA 1
RANGE $5382-$5383 DB_DATA 1
RANGE $5383-$5384 DB_DATA 1
RANGE $5384-$5385 DB_DATA 1
RANGE $5385-$5391 DB_DATA 12
RANGE $5391-$539D DB_DATA 12
RANGE $539D-$53A9 DB_DATA 12
RANGE $53A9-$53B5 DB_DATA 12
RANGE $53B5-$53C1 DB_DATA 12
RANGE $53C1-$53CD DB_DATA 12
RANGE $53CD-$53D9 DB_DATA 12
RANGE $53D9-$53E5 DB_DATA 12
RANGE $53E5-$53F1 DB_DATA 12
RANGE $53F1-$53FD DB_DATA 12
RANGE $53FD-$5409 DB_DATA 12
RANGE $5409-$540A DB_DATA 1
RANGE $540A-$540B DB_DATA 1
RANGE $540B-$540C DB_DATA 1
RANGE $540C-$540D DB_DATA 1
RANGE $540D-$540E DB_DATA 1
RANGE $540E-$540F DB_DATA 1
RANGE $540F-$5410 DB_DATA 1
RANGE $5410-$541C DB_DATA 12
RANGE $541C-$542F DB_DATA 19
RANGE $542F-$5442 DB_DATA 19
RANGE $5442-$5455 DB_DATA 19
RANGE $5455-$5468 DB_DATA 19
RANGE $5468-$547B DB_DATA 19
RANGE $547B-$5480 DB_DATA 5
RANGE $5480-$5486 DB_DATA 6
RANGE $5486-$548C DB_DATA 6
RANGE $548C-$5492 DB_DATA 6
RANGE $5492-$5498 DB_DATA 6
RANGE $5498-$549E DB_DATA 6
RANGE $549E-$54A4 DB_DATA 6
RANGE $54A4-$54AA DB_DATA 6
RANGE $54AA-$54B0 DB_DATA 6
RANGE $54B0-$54B6 DB_DATA 6
RANGE $54B6-$54BC DB_DATA 6
RANGE $54BC-$54C2 DB_DATA 6
RANGE $54C2-$54C7 DB_DATA 5
RANGE $54C7-$54CD DB_DATA 6
RANGE $54CD-$54D3 DB_DATA 6
RANGE $54D3-$54D9 DB_DATA 6
RANGE $54D9-$54DF DB_DATA 6
RANGE $54DF-$54E5 DB_DATA 6
RANGE $54E5-$54EB DB_DATA 6
RANGE $54EB-$54F1 DB_DATA 6
RANGE $54F1-$54F7 DB_DATA 6
RANGE $54F7-$54FD DB_DATA 6
RANGE $54FD-$5503 DB_DATA 6
RANGE $5503-$5509 DB_DATA 6
RANGE $5509-$550E DB_DATA 5
RANGE $550E-$5514 DB_DATA 6
RANGE $5514-$551A DB_DATA 6
RANGE $551A-$5520 DB_DATA 6
RANGE $5520-$5526 DB_DATA 6
RANGE $5526-$552C DB_DATA 6
RANGE $552C-$5532 DB_DATA 6
RANGE $5532-$5538 DB_DATA 6
RANGE $5538-$553E DB_DATA 6
RANGE $553E-$5544 DB_DATA 6
RANGE $5544-$554A DB_DATA 6
RANGE $554A-$5550 DB_DATA 6
RANGE $5550-$5555 DB_DATA 5
RANGE $5555-$555B DB_DATA 6
RANGE $555B-$5561 DB_DATA 6
RANGE $5561-$5567 DB_DATA 6
RANGE $5567-$556D DB_DATA 6
RANGE $556D-$5573 DB_DATA 6
RANGE $5573-$5579 DB_DATA 6
RANGE $5579-$557F DB_DATA 6
RANGE $557F-$5585 DB_DATA 6
RANGE $5585-$558B DB_DATA 6
RANGE $558B-$5591 DB_DATA 6
RANGE $5591-$5597 DB_DATA 6
RANGE $5597-$559C DB_DATA 5
RANGE $559C-$55A2 DB_DATA 6
RANGE $55A2-$55A8 DB_DATA 6
RANGE $55A8-$55AE DB_DATA 6
RANGE $55AE-$55B4 DB_DATA 6
RANGE $55B4-$55BA DB_DATA 6
RANGE $55BA-$55C0 DB_DATA 6
RANGE $55C0-$55C6 DB_DATA 6
RANGE $55C6-$55CC DB_DATA 6
RANGE $55CC-$55D2 DB_DATA 6
RANGE $55D2-$55D8 DB_DATA 6
RANGE $55D8-$55DE DB_DATA 6
RANGE $55DE-$55E3 DB_DATA 5
RANGE $55E3-$55E9 DB_DATA 6
RANGE $55E9-$55EF DB_DATA 6
RANGE $55EF-$55F5 DB_DATA 6
RANGE $55F5-$55FB DB_DATA 6
RANGE $55FB-$5601 DB_DATA 6
RANGE $5601-$5607 DB_DATA 6
RANGE $5607-$560D DB_DATA 6
RANGE $560D-$5613 DB_DATA 6
RANGE $5613-$5619 DB_DATA 6
RANGE $5619-$561F DB_DATA 6
RANGE $561F-$5625 DB_DATA 6
RANGE $5625-$562A DB_DATA 5
RANGE $562A-$5630 DB_DATA 6
RANGE $5630-$5636 DB_DATA 6
RANGE $5636-$563C DB_DATA 6
RANGE $563C-$5642 DB_DATA 6
RANGE $5642-$5648 DB_DATA 6
RANGE $5648-$564E DB_DATA 6
RANGE $564E-$5654 DB_DATA 6
RANGE $5654-$565A DB_DATA 6
RANGE $565A-$5660 DB_DATA 6
RANGE $5660-$5666 DB_DATA 6
RANGE $5666-$566C DB_DATA 6
RANGE $566C-$5700 CODE
RANGE $5700-$5708 CHAR_DATA 8
RANGE $5708-$5714 CHAR_DATA 12
RANGE $5714-$5716 CHAR_DATA 2
RANGE $5716-$5718 CHAR_DATA 2
RANGE $5718-$5724 CHAR_DATA 12
RANGE $5724-$5730 CHAR_DATA 12
RANGE $5730-$5739 CHAR_DATA 9
RANGE $5739-$5742 CHAR_DATA 9
RANGE $5742-$574E CHAR_DATA 12
RANGE $574E-$5751 CHAR_DATA 3
RANGE $5751-$5755 CHAR_DATA 4
RANGE $5755-$575C CHAR_DATA 7
RANGE $575C-$5764 CHAR_DATA 8
RANGE $5764-$5769 CHAR_DATA 5
RANGE $5769-$59E5 CODE
RANGE $59E5-$59F5 DB_DATA 16
RANGE $59F5-$611F CODE
RANGE $611F-$6121 DW_DATA 1
RANGE $6121-$612B DB_DATA 10
RANGE $612B-$6135 DB_DATA 10
RANGE $6135-$613F DB_DATA 10
RANGE $613F-$6149 DB_DATA 10
RANGE $6149-$6153 DB_DATA 10
RANGE $6153-$615D DB_DATA 10
RANGE $615D-$6167 DB_DATA 10
RANGE $6167-$6171 DB_DATA 10
RANGE $6171-$617B DB_DATA 10
RANGE $617B-$6185 DB_DATA 10
RANGE $6185-$618F DB_DATA 10
RANGE $618F-$6199 DB_DATA 10
RANGE $6199-$61A3 DB_DATA 10
RANGE $61A3-$61AD DB_DATA 10
RANGE $61AD-$61B7 DB_DATA 10
RANGE $61B7-$61C1 DB_DATA 10
RANGE $61C1-$61CB DB_DATA 10
RANGE $61CB-$61D5 DB_DATA 10
RANGE $61D5-$61DF DB_DATA 10
RANGE $61DF-$61E9 DB_DATA 10
RANGE $61E9-$61F3 DB_DATA 10
RANGE $61F3-$61FD DB_DATA 10
RANGE $61FD-$6207 DB_DATA 10
RANGE $6207-$6211 DB_DATA 10
RANGE $6211-$621B DB_DATA 10
RANGE $621B-$6225 DB_DATA 10
RANGE $6225-$622F DB_DATA 10
RANGE $622F-$6239 DB_DATA 10
RANGE $6239-$6243 DB_DATA 10
RANGE $6243-$624D DB_DATA 10
RANGE $624D-$6257 DB_DATA 10
RANGE $6257-$6261 DB_DATA 10
RANGE $6261-$626B DB_DATA 10
RANGE $626B-$6275 DB_DATA 10
RANGE $6275-$627F DB_DATA 10
RANGE $627F-$6289 DB_DATA 10
RANGE $6289-$6293 DB_DATA 10
RANGE $6293-$629D DB_DATA 10
RANGE $629D-$62A7 DB_DATA 10
RANGE $62A7-$62B1 DB_DATA 10
RANGE $62B1-$62BB DB_DATA 10
RANGE $62BB-$62C5 DB_DATA 10
RANGE $62C5-$62CF DB_DATA 10
RANGE $62CF-$62D9 DB_DATA 10
RANGE $62D9-$62E3 DB_DATA 10
RANGE $62E3-$62ED DB_DATA 10
RANGE $62ED-$62F7 DB_DATA 10
RANGE $62F7-$6301 DB_DATA 10
RANGE $6301-$6309 DB_DATA 8
RANGE $6309-$630B DW_DATA 1
RANGE $630B-$6315 DB_DATA 10
RANGE $6315-$631F DB_DATA 10
RANGE $631F-$6329 DB_DATA 10
RANGE $6329-$6333 DB_DATA 10
RANGE $6333-$633D DB_DATA 10
RANGE $633D-$6347 DB_DATA 10
RANGE $6347-$6351 DB_DATA 10
RANGE $6351-$635B DB_DATA 10
RANGE $635B-$6365 DB_DATA 10
RANGE $6365-$636F DB_DATA 10
RANGE $636F-$6379 DB_DATA 10
RANGE $6379-$6383 DB_DATA 10
RANGE $6383-$638D DB_DATA 10
RANGE $638D-$6397 DB_DATA 10
RANGE $6397-$63A1 DB_DATA 10
RANGE $63A1-$63AB DB_DATA 10
RANGE $63AB-$63B5 DB_DATA 10
RANGE $63B5-$63BF DB_DATA 10
RANGE $63BF-$63C9 DB_DATA 10
RANGE $63C9-$63D3 DB_DATA 10
RANGE $63D3-$63DD DB_DATA 10
RANGE $63DD-$63E7 DB_DATA 10
RANGE $63E7-$63F1 DB_DATA 10
RANGE $63F1-$63FB DB_DATA 10
RANGE $63FB-$6405 DB_DATA 10
RANGE $6405-$640F DB_DATA 10
RANGE $640F-$6419 DB_DATA 10
RANGE $6419-$6423 DB_DATA 10
RANGE $6423-$642D DB_DATA 10
RANGE $642D-$6437 DB_DATA 10
RANGE $6437-$6441 DB_DATA 10
RANGE $6441-$644B DB_DATA 10
RANGE $644B-$6455 DB_DATA 10
RANGE $6455-$645F DB_DATA 10
RANGE $645F-$6469 DB_DATA 10
RANGE $6469-$6473 DB_DATA 10
RANGE $6473-$647D DB_DATA 10
RANGE $647D-$6487 DB_DATA 10
RANGE $6487-$6491 DB_DATA 10
RANGE $6491-$649B DB_DATA 10
RANGE $649B-$64A5 DB_DATA 10
RANGE $64A5-$64AF DB_DATA 10
RANGE $64AF-$64B9 DB_DATA 10
RANGE $64B9-$64C3 DB_DATA 10
RANGE $64C3-$64CD DB_DATA 10
RANGE $64CD-$64D7 DB_DATA 10
RANGE $64D7-$64E1 DB_DATA 10
RANGE $64E1-$64EB DB_DATA 10
RANGE $64EB-$64F5 DB_DATA 10
RANGE $64F5-$64FF DB_DATA 10
RANGE $64FF-$6509 DB_DATA 10
RANGE $6509-$6513 DB_DATA 10
RANGE $6513-$6518 DB_DATA 5
RANGE $6518-$651A DW_DATA 1
RANGE $651A-$6524 DB_DATA 10
RANGE $6524-$652E DB_DATA 10
RANGE $652E-$6538 DB_DATA 10
RANGE $6538-$6542 DB_DATA 10
RANGE $6542-$654C DB_DATA 10
RANGE $654C-$6556 DB_DATA 10
RANGE $6556-$6560 DB_DATA 10
RANGE $6560-$656A DB_DATA 10
RANGE $656A-$6574 DB_DATA 10
RANGE $6574-$657E DB_DATA 10
RANGE $657E-$6588 DB_DATA 10
RANGE $6588-$6592 DB_DATA 10
RANGE $6592-$659C DB_DATA 10
RANGE $659C-$65A6 DB_DATA 10
RANGE $65A6-$65B0 DB_DATA 10
RANGE $65B0-$65BA DB_DATA 10
RANGE $65BA-$65C4 DB_DATA 10
RANGE $65C4-$65CE DB_DATA 10
RANGE $65CE-$65D8 DB_DATA 10
RANGE $65D8-$65E2 DB_DATA 10
RANGE $65E2-$65EC DB_DATA 10
RANGE $65EC-$65F6 DB_DATA 10
RANGE $65F6-$6600 DB_DATA 10
RANGE $6600-$660A DB_DATA 10
RANGE $660A-$6614 DB_DATA 10
RANGE $6614-$661E DB_DATA 10
RANGE $661E-$6628 DB_DATA 10
RANGE $6628-$6632 DB_DATA 10
RANGE $6632-$663C DB_DATA 10
RANGE $663C-$6646 DB_DATA 10
RANGE $6646-$6650 DB_DATA 10
RANGE $6650-$665A DB_DATA 10
RANGE $665A-$6664 DB_DATA 10
RANGE $6664-$666E DB_DATA 10
RANGE $666E-$6678 DB_DATA 10
RANGE $6678-$6682 DB_DATA 10
RANGE $6682-$668C DB_DATA 10
RANGE $668C-$6696 DB_DATA 10
RANGE $6696-$66A0 DB_DATA 10
RANGE $66A0-$66AA DB_DATA 10
RANGE $66AA-$66B4 DB_DATA 10
RANGE $66B4-$66BE DB_DATA 10
RANGE $66BE-$66C8 DB_DATA 10
RANGE $66C8-$66D2 DB_DATA 10
RANGE $66D2-$66DC DB_DATA 10
RANGE $66DC-$66E6 DB_DATA 10
RANGE $66E6-$66F0 DB_DATA 10
RANGE $66F0-$66FA DB_DATA 10
RANGE $66FA-$6704 DB_DATA 10
RANGE $6704-$670E DB_DATA 10
RANGE $670E-$6718 DB_DATA 10
RANGE $6718-$6722 DB_DATA 10
RANGE $6722-$672C DB_DATA 10
RANGE $672C-$6736 DB_DATA 10
RANGE $6736-$6740 DB_DATA 10
RANGE $6740-$674A DB_DATA 10
RANGE $674A-$6754 DB_DATA 10
RANGE $6754-$675E DB_DATA 10
RANGE $675E-$6768 DB_DATA 10
RANGE $6768-$6772 DB_DATA 10
RANGE $6772-$677C DB_DATA 10
RANGE $677C-$6786 DB_DATA 10
RANGE $6786-$6790 DB_DATA 10
RANGE $6790-$679A DB_DATA 10
RANGE $679A-$67A4 DB_DATA 10
RANGE $67A4-$67AE DB_DATA 10
RANGE $67AE-$67B8 DB_DATA 10
RANGE $67B8-$67C2 DB_DATA 10
RANGE $67C2-$67CC DB_DATA 10
RANGE $67CC-$67D6 DB_DATA 10
RANGE $67D6-$67E0 DB_DATA 10
RANGE $67E0-$67EA DB_DATA 10
RANGE $67EA-$67F4 DB_DATA 10
RANGE $67F4-$67FE DB_DATA 10
RANGE $67FE-$6808 DB_DATA 10
RANGE $6808-$6812 DB_DATA 10
RANGE $6812-$681C DB_DATA 10
RANGE $681C-$6826 DB_DATA 10
RANGE $6826-$6830 DB_DATA 10
RANGE $6830-$683A DB_DATA 10
RANGE $683A-$6844 DB_DATA 10
RANGE $6844-$684E DB_DATA 10
RANGE $684E-$6858 DB_DATA 10
RANGE $6858-$6862 DB_DATA 10
RANGE $6862-$686C DB_DATA 10
RANGE $686C-$6876 DB_DATA 10
RANGE $6876-$6880 DB_DATA 10
RANGE $6880-$688A DB_DATA 10
RANGE $688A-$6894 DB_DATA 10
RANGE $6894-$689E DB_DATA 10
RANGE $689E-$68A8 DB_DATA 10
RANGE $68A8-$68B2 DB_DATA 10
RANGE $68B2-$68BC DB_DATA 10
RANGE $68BC-$68C6 DB_DATA 10
RANGE $68C6-$68D0 DB_DATA 10
RANGE $68D0-$68DA DB_DATA 10
RANGE $68DA-$68E4 DB_DATA 10
RANGE $68E4-$68EE DB_DATA 10
RANGE $68EE-$68F8 DB_DATA 10
RANGE $68F8-$6902 DB_DATA 10
RANGE $6902-$690C DB_DATA 10
RANGE $690C-$6916 DB_DATA 10
RANGE $6916-$6920 DB_DATA 10
RANGE $6920-$692A DB_DATA 10
RANGE $692A-$6934 DB_DATA 10
RANGE $6934-$693E DB_DATA 10
RANGE $693E-$6948 DB_DATA 10
RANGE $6948-$6952 DB_DATA 10
RANGE $6952-$695C DB_DATA 10
RANGE $695C-$6966 DB_DATA 10
RANGE $6966-$6970 DB_DATA 10
RANGE $6970-$697A DB_DATA 10
RANGE $697A-$6984 DB_DATA 10
RANGE $6984-$698E DB_DATA 10
RANGE $698E-$6998 DB_DATA 10
RANGE $6998-$69A2 DB_DATA 10
RANGE $69A2-$69AC DB_DATA 10
RANGE $69AC-$69B6 DB_DATA 10
RANGE $69B6-$69C0 DB_DATA 10
RANGE $69C0-$69CA DB_DATA 10
RANGE $69CA-$69D4 DB_DATA 10
RANGE $69D4-$69DE DB_DATA 10
RANGE $69DE-$69E8 DB_DATA 10
RANGE $69E8-$69F2 DB_DATA 10
RANGE $69F2-$69FC DB_DATA 10
RANGE $69FC-$6A06 DB_DATA 10
RANGE $6A06-$6A10 DB_DATA 10
RANGE $6A10-$6A1A DB_DATA 10
RANGE $6A1A-$6A24 DB_DATA 10
RANGE $6A24-$6A2E DB_DATA 10
RANGE $6A2E-$6A38 DB_DATA 10
RANGE $6A38-$6A42 DB_DATA 10
RANGE $6A42-$6A4C DB_DATA 10
RANGE $6A4C-$6A56 DB_DATA 10
RANGE $6A56-$6A60 DB_DATA 10
RANGE $6A60-$6A6A DB_DATA 10
RANGE $6A6A-$6A74 DB_DATA 10
RANGE $6A74-$6A7E DB_DATA 10
RANGE $6A7E-$6A88 DB_DATA 10
RANGE $6A88-$6A92 DB_DATA 10
RANGE $6A92-$6A9C DB_DATA 10
RANGE $6A9C-$6AA6 DB_DATA 10
RANGE $6AA6-$6AB0 DB_DATA 10
RANGE $6AB0-$6ABA DB_DATA 10
RANGE $6ABA-$6AC4 DB_DATA 10
RANGE $6AC4-$6ACE DB_DATA 10
RANGE $6ACE-$6AD8 DB_DATA 10
RANGE $6AD8-$6AE2 DB_DATA 10
RANGE $6AE2-$6AEC DB_DATA 10
RANGE $6AEC-$6AF6 DB_DATA 10
RANGE $6AF6-$6AF9 DB_DATA 3
RANGE $6AF9-$6AFB DW_DATA 1
RANGE $6AFB-$6B05 DB_DATA 10
RANGE $6B05-$6B0F DB_DATA 10
RANGE $6B0F-$6B19 DB_DATA 10
RANGE $6B19-$6B23 DB_DATA 10
RANGE $6B23-$6B2D DB_DATA 10
RANGE $6B2D-$6B37 DB_DATA 10
RANGE $6B37-$6B41 DB_DATA 10
RANGE $6B41-$6B4B DB_DATA 10
RANGE $6B4B-$6B55 DB_DATA 10
RANGE $6B55-$6B5F DB_DATA 10
RANGE $6B5F-$6B69 DB_DATA 10
RANGE $6B69-$6B73 DB_DATA 10
RANGE $6B73-$6B7D DB_DATA 10
RANGE $6B7D-$6B87 DB_DATA 10
RANGE $6B87-$6B91 DB_DATA 10
RANGE $6B91-$6B9B DB_DATA 10
RANGE $6B9B-$6BA5 DB_DATA 10
RANGE $6BA5-$6BAF DB_DATA 10
RANGE $6BAF-$6BB9 DB_DATA 10
RANGE $6BB9-$6BC3 DB_DATA 10
RANGE $6BC3-$6BCD DB_DATA 10
RANGE $6BCD-$6BD7 DB_DATA 10
RANGE $6BD7-$6BE1 DB_DATA 10
RANGE $6BE1-$6BEB DB_DATA 10
RANGE $6BEB-$6BF5 DB_DATA 10
RANGE $6BF5-$6BFF DB_DATA 10
RANGE $6BFF-$6C09 DB_DATA 10
RANGE $6C09-$6C13 DB_DATA 10
RANGE $6C13-$6C1D DB_DATA 10
RANGE $6C1D-$6C27 DB_DATA 10
RANGE $6C27-$6C31 DB_DATA 10
RANGE $6C31-$6C3B DB_DATA 10
RANGE $6C3B-$6C45 DB_DATA 10
RANGE $6C45-$6C4F DB_DATA 10
RANGE $6C4F-$6C59 DB_DATA 10
RANGE $6C59-$6C63 DB_DATA 10
RANGE $6C63-$6C6D DB_DATA 10
RANGE $6C6D-$6C77 DB_DATA 10
RANGE $6C77-$6C81 DB_DATA 10
RANGE $6C81-$6C8B DB_DATA 10
RANGE $6C8B-$6C95 DB_DATA 10
RANGE $6C95-$6C9F DB_DATA 10
RANGE $6C9F-$6CA9 DB_DATA 10
RANGE $6CA9-$6CB3 DB_DATA 10
RANGE $6CB3-$6CBD DB_DATA 10
RANGE $6CBD-$6CC7 DB_DATA 10
RANGE $6CC7-$6CD1 DB_DATA 10
RANGE $6CD1-$6CDB DB_DATA 10
RANGE $6CDB-$6CE5 DB_DATA 10
RANGE $6CE5-$6CEF DB_DATA 10
RANGE $6CEF-$6CF9 DB_DATA 10
RANGE $6CF9-$6D03 DB_DATA 10
RANGE $6D03-$6D0D DB_DATA 10
RANGE $6D0D-$6D17 DB_DATA 10
RANGE $6D17-$6D21 DB_DATA 10
RANGE $6D21-$6D2B DB_DATA 10
RANGE $6D2B-$6D35 DB_DATA 10
RANGE $6D35-$6D3F DB_DATA 10
RANGE $6D3F-$6D49 DB_DATA 10
RANGE $6D49-$6D53 DB_DATA 10
RANGE $6D53-$6D5D DB_DATA 10
RANGE $6D5D-$6D67 DB_DATA 10
RANGE $6D67-$6D71 DB_DATA 10
RANGE $6D71-$6D7B DB_DATA 10
RANGE $6D7B-$6D85 DB_DATA 10
RANGE $6D85-$6D8F DB_DATA 10
RANGE $6D8F-$6D99 DB_DATA 10
RANGE $6D99-$6DA3 DB_DATA 10
RANGE $6DA3-$6DAD DB_DATA 10
RANGE $6DAD-$6DB7 DB_DATA 10
RANGE $6DB7-$6DC1 DB_DATA 10
RANGE $6DC1-$6DCB DB_DATA 10
RANGE $6DCB-$6DD5 DB_DATA 10
RANGE $6DD5-$6DDF DB_DATA 10
RANGE $6DDF-$6DE9 DB_DATA 10
RANGE $6DE9-$6DF3 DB_DATA 10
RANGE $6DF3-$6DFD DB_DATA 10
RANGE $6DFD-$6E07 DB_DATA 10
RANGE $6E07-$6E11 DB_DATA 10
RANGE $6E11-$6E1B DB_DATA 10
RANGE $6E1B-$6E25 DB_DATA 10
RANGE $6E25-$6E2F DB_DATA 10
RANGE $6E2F-$6E39 DB_DATA 10
RANGE $6E39-$6E43 DB_DATA 10
RANGE $6E43-$6E48 DB_DATA 5
RANGE $6E48-$6E4A DW_DATA 1
RANGE $6E4A-$6E54 DB_DATA 10
RANGE $6E54-$6E5E DB_DATA 10
RANGE $6E5E-$6E68 DB_DATA 10
RANGE $6E68-$6E72 DB_DATA 10
RANGE $6E72-$6E7C DB_DATA 10
RANGE $6E7C-$6E86 DB_DATA 10
RANGE $6E86-$6E90 DB_DATA 10
RANGE $6E90-$6E9A DB_DATA 10
RANGE $6E9A-$6EA4 DB_DATA 10
RANGE $6EA4-$6EAE DB_DATA 10
RANGE $6EAE-$6EB8 DB_DATA 10
RANGE $6EB8-$6EC2 DB_DATA 10
RANGE $6EC2-$6ECC DB_DATA 10
RANGE $6ECC-$6ED6 DB_DATA 10
RANGE $6ED6-$6EE0 DB_DATA 10
RANGE $6EE0-$6EEA DB_DATA 10
RANGE $6EEA-$6EF4 DB_DATA 10
RANGE $6EF4-$6EFE DB_DATA 10
RANGE $6EFE-$6F08 DB_DATA 10
RANGE $6F08-$6F12 DB_DATA 10
RANGE $6F12-$6F1C DB_DATA 10
RANGE $6F1C-$6F26 DB_DATA 10
RANGE $6F26-$6F30 DB_DATA 10
RANGE $6F30-$6F3A DB_DATA 10
RANGE $6F3A-$6F44 DB_DATA 10
RANGE $6F44-$6F4E DB_DATA 10
RANGE $6F4E-$6F58 DB_DATA 10
RANGE $6F58-$6F62 DB_DATA 10
RANGE $6F62-$6F6C DB_DATA 10
RANGE $6F6C-$6F76 DB_DATA 10
RANGE $6F76-$6F80 DB_DATA 10
RANGE $6F80-$6F8A DB_DATA 10
RANGE $6F8A-$6F94 DB_DATA 10
RANGE $6F94-$6F9E DB_DATA 10
RANGE $6F9E-$6FA8 DB_DATA 10
RANGE $6FA8-$6FB2 DB_DATA 10
RANGE $6FB2-$6FBC DB_DATA 10
RANGE $6FBC-$6FC6 DB_DATA 10
RANGE $6FC6-$6FD0 DB_DATA 10
RANGE $6FD0-$6FDA DB_DATA 10
RANGE $6FDA-$6FE4 DB_DATA 10
RANGE $6FE4-$6FEE DB_DATA 10
RANGE $6FEE-$6FF8 DB_DATA 10
RANGE $6FF8-$7002 DB_DATA 10
RANGE $7002-$700C DB_DATA 10
RANGE $700C-$7016 DB_DATA 10
RANGE $7016-$7020 DB_DATA 10
RANGE $7020-$702A DB_DATA 10
RANGE $702A-$7034 DB_DATA 10
RANGE $7034-$703E DB_DATA 10
RANGE $703E-$7048 DB_DATA 10
RANGE $7048-$7052 DB_DATA 10
RANGE $7052-$705C DB_DATA 10
RANGE $705C-$7066 DB_DATA 10
RANGE $7066-$7070 DB_DATA 10
RANGE $7070-$707A DB_DATA 10
RANGE $707A-$7084 DB_DATA 10
RANGE $7084-$708E DB_DATA 10
RANGE $708E-$7098 DB_DATA 10
RANGE $7098-$70A2 DB_DATA 10
RANGE $70A2-$70AC DB_DATA 10
RANGE $70AC-$70B6 DB_DATA 10
RANGE $70B6-$70C0 DB_DATA 10
RANGE $70C0-$70CA DB_DATA 10
RANGE $70CA-$70D4 DB_DATA 10
RANGE $70D4-$70DE DB_DATA 10
RANGE $70DE-$70E8 DB_DATA 10
RANGE $70E8-$70F2 DB_DATA 10
RANGE $70F2-$70FC DB_DATA 10
RANGE $70FC-$7106 DB_DATA 10
RANGE $7106-$7110 DB_DATA 10
RANGE $7110-$711A DB_DATA 10
RANGE $711A-$7124 DB_DATA 10
RANGE $7124-$7127 DB_DATA 3
RANGE $7127-$7129 DW_DATA 1
RANGE $7129-$7133 DB_DATA 10
RANGE $7133-$713D DB_DATA 10
RANGE $713D-$7147 DB_DATA 10
RANGE $7147-$7151 DB_DATA 10
RANGE $7151-$715B DB_DATA 10
RANGE $715B-$7165 DB_DATA 10
RANGE $7165-$716F DB_DATA 10
RANGE $716F-$7179 DB_DATA 10
RANGE $7179-$7183 DB_DATA 10
RANGE $7183-$718D DB_DATA 10
RANGE $718D-$7197 DB_DATA 10
RANGE $7197-$71A1 DB_DATA 10
RANGE $71A1-$71AB DB_DATA 10
RANGE $71AB-$71B5 DB_DATA 10
RANGE $71B5-$71BF DB_DATA 10
RANGE $71BF-$71C9 DB_DATA 10
RANGE $71C9-$71D3 DB_DATA 10
RANGE $71D3-$71DD DB_DATA 10
RANGE $71DD-$71E7 DB_DATA 10
RANGE $71E7-$71F1 DB_DATA 10
RANGE $71F1-$71FB DB_DATA 10
RANGE $71FB-$7205 DB_DATA 10
RANGE $7205-$720F DB_DATA 10
RANGE $720F-$7219 DB_DATA 10
RANGE $7219-$7223 DB_DATA 10
RANGE $7223-$722D DB_DATA 10
RANGE $722D-$7237 DB_DATA 10
RANGE $7237-$7241 DB_DATA 10
RANGE $7241-$7243 DW_DATA 1
RANGE $7243-$724D DB_DATA 10
RANGE $724D-$7257 DB_DATA 10
RANGE $7257-$7261 DB_DATA 10
RANGE $7261-$726B DB_DATA 10
RANGE $726B-$7275 DB_DATA 10
RANGE $7275-$727F DB_DATA 10
RANGE $727F-$7289 DB_DATA 10
RANGE $7289-$7293 DB_DATA 10
RANGE $7293-$729D DB_DATA 10
RANGE $729D-$72A7 DB_DATA 10
RANGE $72A7-$72B1 DB_DATA 10
RANGE $72B1-$72BB DB_DATA 10
RANGE $72BB-$72C5 DB_DATA 10
RANGE $72C5-$72CF DB_DATA 10
RANGE $72CF-$72D9 DB_DATA 10
RANGE $72D9-$72E3 DB_DATA 10
RANGE $72E3-$72ED DB_DATA 10
RANGE $72ED-$72F7 DB_DATA 10
RANGE $72F7-$7301 DB_DATA 10
RANGE $7301-$730B DB_DATA 10
RANGE $730B-$7315 DB_DATA 10
RANGE $7315-$731F DB_DATA 10
RANGE $731F-$7329 DB_DATA 10
RANGE $7329-$7333 DB_DATA 10
RANGE $7333-$733D DB_DATA 10
RANGE $733D-$7347 DB_DATA 10
RANGE $7347-$7351 DB_DATA 10
RANGE $7351-$735B DB_DATA 10
RANGE $735B-$7365 DB_DATA 10
RANGE $7365-$736F DB_DATA 10
RANGE $736F-$7379 DB_DATA 10
RANGE $7379-$7383 DB_DATA 10
RANGE $7383-$738D DB_DATA 10
RANGE $738D-$7391 DB_DATA 4
RANGE $7391-$7393 DW_DATA 1
RANGE $7393-$739D DB_DATA 10
RANGE $739D-$73A7 DB_DATA 10
RANGE $73A7-$73B1 DB_DATA 10
RANGE $73B1-$73BB DB_DATA 10
RANGE $73BB-$73C5 DB_DATA 10
RANGE $73C5-$73CF DB_DATA 10
RANGE $73CF-$73D9 DB_DATA 10
RANGE $73D9-$73E3 DB_DATA 10
RANGE $73E3-$73ED DB_DATA 10
RANGE $73ED-$73F7 DB_DATA 10
RANGE $73F7-$7401 DB_DATA 10
RANGE $7401-$740B DB_DATA 10
RANGE $740B-$7415 DB_DATA 10
RANGE $7415-$741F DB_DATA 10
RANGE $741F-$7429 DB_DATA 10
RANGE $7429-$7433 DB_DATA 10
RANGE $7433-$743D DB_DATA 10
RANGE $743D-$7447 DB_DATA 10
RANGE $7447-$7451 DB_DATA 10
RANGE $7451-$745B DB_DATA 10
RANGE $745B-$7465 DB_DATA 10
RANGE $7465-$746F DB_DATA 10
RANGE $746F-$7479 DB_DATA 10
RANGE $7479-$7483 DB_DATA 10
RANGE $7483-$748D DB_DATA 10
RANGE $748D-$7497 DB_DATA 10
RANGE $7497-$74A1 DB_DATA 10
RANGE $74A1-$74AB DB_DATA 10
RANGE $74AB-$74B5 DB_DATA 10
RANGE $74B5-$74BF DB_DATA 10
RANGE $74BF-$74C1 DB_DATA 2
RANGE $74C1-$74C3 DW_DATA 1
RANGE $74C3-$74C5 DW_DATA 1
RANGE $74C5-$74C7 DW_DATA 1
RANGE $74C7-$74C9 DW_DATA 1
RANGE $74C9-$74CB DW_DATA 1
RANGE $74CB-$74CD DW_DATA 1
RANGE $74CD-$74CF DW_DATA 1
RANGE $74CF-$74D1 DW_DATA 1
RANGE $74D1-$74D3 DW_DATA 1
RANGE $74D3-$74D5 DW_DATA 1
RANGE $74D5-$74D7 DW_DATA 1
RANGE $74D7-$74D9 DW_DATA 1
RANGE $74D9-$74DB DW_DATA 1
RANGE $74DB-$74DD DW_DATA 1
RANGE $74DD-$74DF DW_DATA 1
RANGE $74DF-$74E1 DW_DATA 1
RANGE $74E1-$74E3 DW_DATA 1
RANGE $74E3-$74E5 DW_DATA 1
RANGE $74E5-$74E7 DW_DATA 1
RANGE $74E7-$74E9 DW_DATA 1
RANGE $74E9-$74EB DW_DATA 1
RANGE $74EB-$74EC DB_DATA 1
RANGE $74EC-$74EE DW_DATA 1
RANGE $74EE-$74EF DB_DATA 1
RANGE $74EF-$74F1 DW_DATA 1
RANGE $74F1-$74F2 DB_DATA 1
RANGE $74F2-$74F4 DW_DATA 1
RANGE $74F4-$74F5 DB_DATA 1
RANGE $74F5-$74F7 DW_DATA 1
RANGE $74F7-$74F8 DB_DATA 1
RANGE $74F8-$74FA DW_DATA 1
RANGE $74FA-$74FB DB_DATA 1
RANGE $74FB-$74FD DW_DATA 1
RANGE $74FD-$74FE DB_DATA 1
RANGE $74FE-$7500 DW_DATA 1
RANGE $7500-$7501 DB_DATA 1
RANGE $7501-$7502 DB_DATA 1
RANGE $7502-$7504 DW_DATA 1
RANGE $7504-$7505 DB_DATA 1
RANGE $7505-$7507 DW_DATA 1
RANGE $7507-$7508 DB_DATA 1
RANGE $7508-$750A DW_DATA 1
RANGE $750A-$750B DB_DATA 1
RANGE $750B-$7515 DB_DATA 10
RANGE $7515-$751F DB_DATA 10
RANGE $751F-$7527 DB_DATA 8
RANGE $7527-$7531 DB_DATA 10
RANGE $7531-$753B DB_DATA 10
RANGE $753B-$7545 DB_DATA 10
RANGE $7545-$754F DB_DATA 10
RANGE $754F-$7559 DB_DATA 10
RANGE $7559-$7563 DB_DATA 10
RANGE $7563-$756D DB_DATA 10
RANGE $756D-$7577 DB_DATA 10
RANGE $7577-$7581 DB_DATA 10
RANGE $7581-$758B DB_DATA 10
RANGE $758B-$7595 DB_DATA 10
RANGE $7595-$759F DB_DATA 10
RANGE $759F-$75A9 DB_DATA 10
RANGE $75A9-$75B3 DB_DATA 10
RANGE $75B3-$75BA DB_DATA 7
RANGE $75BA-$75C4 DB_DATA 10
RANGE $75C4-$75CE DB_DATA 10
RANGE $75CE-$75D8 DB_DATA 10
RANGE $75D8-$75E2 DB_DATA 10
RANGE $75E2-$75EC DB_DATA 10
RANGE $75EC-$75F6 DB_DATA 10
RANGE $75F6-$7600 DB_DATA 10
RANGE $7600-$760A DB_DATA 10
RANGE $760A-$7614 DB_DATA 10
RANGE $7614-$761E DB_DATA 10
RANGE $761E-$7628 DB_DATA 10
RANGE $7628-$7632 DB_DATA 10
RANGE $7632-$763C DB_DATA 10
RANGE $763C-$7646 DB_DATA 10
RANGE $7646-$764F DB_DATA 9
RANGE $764F-$7659 DB_DATA 10
RANGE $7659-$7663 DB_DATA 10
RANGE $7663-$766D DB_DATA 10
RANGE $766D-$7677 DB_DATA 10
RANGE $7677-$7681 DB_DATA 10
RANGE $7681-$768B DB_DATA 10
RANGE $768B-$7695 DB_DATA 10
RANGE $7695-$769F DB_DATA 10
RANGE $769F-$76A9 DB_DATA 10
RANGE $76A9-$76B3 DB_DATA 10
RANGE $76B3-$76BD DB_DATA 10
RANGE $76BD-$76C7 DB_DATA 10
RANGE $76C7-$76D1 DB_DATA 10
RANGE $76D1-$76DB DB_DATA 10
RANGE $76DB-$76E5 DB_DATA 10
RANGE $76E5-$76EF DB_DATA 10
RANGE $76EF-$76F9 DB_DATA 10
RANGE $76F9-$7703 DB_DATA 10
RANGE $7703-$770D DB_DATA 10
RANGE $770D-$7717 DB_DATA 10
RANGE $7717-$7721 DB_DATA 10
RANGE $7721-$772B DB_DATA 10
RANGE $772B-$7735 DB_DATA 10
RANGE $7735-$773F DB_DATA 10
RANGE $773F-$7748 DB_DATA 9
RANGE $7748-$7752 DB_DATA 10
RANGE $7752-$775C DB_DATA 10
RANGE $775C-$7766 DB_DATA 10
RANGE $7766-$7770 DB_DATA 10
RANGE $7770-$777A DB_DATA 10
RANGE $777A-$7784 DB_DATA 10
RANGE $7784-$778E DB_DATA 10
RANGE $778E-$7798 DB_DATA 10
RANGE $7798-$779C DB_DATA 4
RANGE $779C-$77A6 DB_DATA 10
RANGE $77A6-$77B0 DB_DATA 10
RANGE $77B0-$77BA DB_DATA 10
RANGE $77BA-$77C4 DB_DATA 10
RANGE $77C4-$77CE DB_DATA 10
RANGE $77CE-$77D8 DB_DATA 10
RANGE $77D8-$77E2 DB_DATA 10
RANGE $77E2-$77EC DB_DATA 10
RANGE $77EC-$77EF DB_DATA 3
RANGE $77EF-$77F9 DB_DATA 10
RANGE $77F9-$7803 DB_DATA 10
RANGE $7803-$780D DB_DATA 10
RANGE $780D-$7817 DB_DATA 10
RANGE $7817-$7821 DB_DATA 10
RANGE $7821-$782B DB_DATA 10
RANGE $782B-$7835 DB_DATA 10
RANGE $7835-$783F DB_DATA 10
RANGE $783F-$7849 DB_DATA 10
RANGE $7849-$7853 DB_DATA 10
RANGE $7853-$785D DB_DATA 10
RANGE $785D-$7867 DB_DATA 10
RANGE $7867-$7871 DB_DATA 10
RANGE $7871-$787B DB_DATA 10
RANGE $787B-$7885 DB_DATA 10
RANGE $7885-$788D DB_DATA 8
RANGE $788D-$7897 DB_DATA 10
RANGE $7897-$78A1 DB_DATA 10
RANGE $78A1-$78AB DB_DATA 10
RANGE $78AB-$78AC DB_DATA 1
RANGE $78AC-$78B6 DB_DATA 10
RANGE $78B6-$78C0 DB_DATA 10
RANGE $78C0-$78CA DB_DATA 10
RANGE $78CA-$78D4 DB_DATA 10
RANGE $78D4-$78D6 DB_DATA 2
RANGE $78D6-$78D8 DB_DATA 2
RANGE $78D8-$78F4 DB_DATA 28
RANGE $78F4-$7910 DB_DATA 28
RANGE $7910-$792C DB_DATA 28
RANGE $792C-$7948 DB_DATA 28
RANGE $7948-$7964 DB_DATA 28
RANGE $7964-$7980 DB_DATA 28
RANGE $7980-$799C DB_DATA 28
RANGE $799C-$79B8 DB_DATA 28
RANGE $79B8-$79D4 DB_DATA 28
RANGE $79D4-$79F0 DB_DATA 28
RANGE $79F0-$7A0C DB_DATA 28
RANGE $7A0C-$7A28 DB_DATA 28
RANGE $7A28-$7A44 DB_DATA 28
RANGE $7A44-$7A60 DB_DATA 28
RANGE $7A60-$7A7C DB_DATA 28
RANGE $7A7C-$7A98 DB_DATA 28
RANGE $7A98-$7AA8 DW_DATA 8
RANGE $7AA8-$7AAC DW_DATA 2
RANGE $7AAC-$7AAE DB_DATA 2
RANGE $7AAE-$7AB0 DB_DATA 2
RANGE $7AB0-$7AB2 DB_DATA 2
RANGE $7AB2-$7AB4 DB_DATA 2
RANGE $7AB4-$7AB6 DB_DATA 2
RANGE $7AB6-$7AB8 DB_DATA 2
RANGE $7AB8-$7ABA DB_DATA 2
RANGE $7ABA-$7ABC DB_DATA 2
RANGE $7ABC-$7ABE DB_DATA 2
RANGE $7ABE-$7AC0 DB_DATA 2
RANGE $7AC0-$7AC2 DB_DATA 2
RANGE $7AC2-$7AC4 DB_DATA 2
RANGE $7AC4-$7AC6 DB_DATA 2
RANGE $7AC6-$7AC8 DB_DATA 2
RANGE $7AC8-$7ACA DB_DATA 2
RANGE $7ACA-$7ACC DB_DATA 2
RANGE $7ACC-$7ACE DB_DATA 2
RANGE $7ACE-$7AD0 DB_DATA 2
RANGE $7AD0-$7AD2 DB_DATA 2
RANGE $7AD2-$7AD4 DB_DATA 2
RANGE $7AD4-$7AD6 DB_DATA 2
RANGE $7AD6-$7AD8 DB_DATA 2
RANGE $7AD8-$7ADA DB_DATA 2
RANGE $7ADA-$7ADC DB_DATA 2
RANGE $7ADC-$7ADE DB_DATA 2
RANGE $7ADE-$7AE0 DB_DATA 2
RANGE $7AE0-$7AE4 DB_DATA 4
RANGE $7AE4-$7AE8 DB_DATA 4
RANGE $7AE8-$7AEC DB_DATA 4
RANGE $7AEC-$7AF0 DB_DATA 4
RANGE $7AF0-$7AF4 DB_DATA 4
RANGE $7AF4-$7AF8 DB_DATA 4
RANGE $7AF8-$7AFC DB_DATA 4
RANGE $7AFC-$7B00 DB_DATA 4
RANGE $7B00-$7B04 DB_DATA 4
RANGE $7B04-$7B08 DB_DATA 4
RANGE $7B08-$7B0C DB_DATA 4
RANGE $7B0C-$7B10 DB_DATA 4
RANGE $7B10-$7B14 DB_DATA 4
RANGE $7B14-$7B18 DB_DATA 4
RANGE $7B18-$7B1A DB_DATA 2
RANGE $7B1A-$7B1E DB_DATA 4
RANGE $7B1E-$7B22 DB_DATA 4
RANGE $7B22-$7B26 DB_DATA 4
RANGE $7B26-$7B2A DB_DATA 4
RANGE $7B2A-$7B2E DB_DATA 4
RANGE $7B2E-$7B32 DB_DATA 4
RANGE $7B32-$7B36 DB_DATA 4
RANGE $7B36-$7B3A DB_DATA 4
RANGE $7B3A-$7B3E DB_DATA 4
RANGE $7B3E-$7B42 DB_DATA 4
RANGE $7B42-$7B46 DB_DATA 4
RANGE $7B46-$7B4A DB_DATA 4
RANGE $7B4A-$7B4E DB_DATA 4
RANGE $7B4E-$7B52 DB_DATA 4
RANGE $7B52-$7B56 DB_DATA 4
RANGE $7B56-$7B58 DB_DATA 2
RANGE $7B58-$7B5C DB_DATA 4
RANGE $7B5C-$7B5E DB_DATA 2
RANGE $7B5E-$7B62 DB_DATA 4
RANGE $7B62-$7B65 DB_DATA 3
RANGE $7B65-$7B69 DB_DATA 4
RANGE $7B69-$7B6D DB_DATA 4
RANGE $7B6D-$7B71 DB_DATA 4
RANGE $7B71-$7B75 DB_DATA 4
RANGE $7B75-$7B79 DB_DATA 4
RANGE $7B79-$7B7B DB_DATA 2
RANGE $7B7B-$7B7F DB_DATA 4
RANGE $7B7F-$7B82 DB_DATA 3
RANGE $7B82-$7B86 DB_DATA 4
RANGE $7B86-$7B8A DB_DATA 4
RANGE $7B8A-$7B8E DB_DATA 4
RANGE $7B8E-$7B90 DB_DATA 2
RANGE $7B90-$7B94 DB_DATA 4
RANGE $7B94-$7B96 DB_DATA 2
RANGE $7B96-$7B9A DB_DATA 4
RANGE $7B9A-$7B9D DB_DATA 3
RANGE $7B9D-$7BA1 DB_DATA 4
RANGE $7BA1-$7BA5 DB_DATA 4
RANGE $7BA5-$7BA9 DB_DATA 4
RANGE $7BA9-$7BAD DB_DATA 4
RANGE $7BAD-$7BB1 DB_DATA 4
RANGE $7BB1-$7BB5 DB_DATA 4
RANGE $7BB5-$7BB9 DB_DATA 4
RANGE $7BB9-$7BBD DB_DATA 4
RANGE $7BBD-$7BC1 DB_DATA 4
RANGE $7BC1-$7BC5 DB_DATA 4
RANGE $7BC5-$7BC9 DB_DATA 4
RANGE $7BC9-$7BCB DB_DATA 2
RANGE $7BCB-$7BCF DB_DATA 4
RANGE $7BCF-$7BD1 DB_DATA 2
RANGE $7BD1-$7BD3 DB_DATA 2
RANGE $7BD3-$7BD5 DW_DATA 1
RANGE $7BD5-$7BD7 DW_DATA 1
RANGE $7BD7-$7BD9 DW_DATA 1
RANGE $7BD9-$7BDB DW_DATA 1
RANGE $7BDB-$7BDD DW_DATA 1
RANGE $7BDD-$7BDF DW_DATA 1
RANGE $7BDF-$7BE1 DW_DATA 1
RANGE $7BE1-$7BE3 DW_DATA 1
RANGE $7BE3-$7BF9 CHAR_DATA 22
RANGE $7BF9-$7C10 CHAR_DATA 23
RANGE $7C10-$7C23 CHAR_DATA 19
RANGE $7C23-$7C36 CHAR_DATA 19
RANGE $7C36-$7C49 CHAR_DATA 19
RANGE $7C49-$7C5A CHAR_DATA 17
RANGE $7C5A-$7C6C CHAR_DATA 18
RANGE $7C6C-$7CC2 CODE
RANGE $7CC2-$7D2E DB_DATA 108
RANGE $7D2E-$7FF0 DB_DATA 706
RANGE $7FF0-$8000 DB_DATA 16

