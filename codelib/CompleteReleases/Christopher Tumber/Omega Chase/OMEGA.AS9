; Omega Chase
; by Christopher L. Tumber
; Last update: Sept 22, 1998

MAX_MINES               EQU    #6
MAX_ALIEN_SHOTS         EQU    #4

dec_counters                  EQU $F55A
player_string                 EQU $F794
dis_opt_string                EQU $F835
game_string                   EQU $F79F

; System Executive Entry Points

BIOS_music_data         EQU     $FC8D

Init_Music_chk          EQU     $F687
Do_Sound                EQU     $F289
Vec_Music_Flag          EQU     $C856

copy2sndchip            EQU     $F27D
byte2sndchip            EQU     $F256
VIA_t1_cnt_lo           EQU     $D004
draw_to_d               EQU     $f3df
Vec_Misc_Count          EQU     $C823
compare_scores          EQU     $f8c7
covert_add_bcd          EQU     $f85e
read_switches2          EQU     $f1ba
;get_pl_game             EQU     $f7a9
print_at_d              EQU     $f37a
dptoC8                  EQU     $f1af
dptoD0                  EQU     $f1aa
drawl1b                 EQU     $f40e
waitrecal               EQU     $f192
intensity_to_1f         EQU     $f29d
intensity_to_3f         EQU     $f2a1
intensity_to_5f         EQU     $f2a5
intensity_to_7f         EQU     $f2a9
intensity_to_A          EQU     $f2ab
clear_256_bytes         EQU     $f545
set_dft_score           EQU     $f84f
rot_vec_list2           EQU     $f610
move_pen7f_to_d         EQU     $f2fc
read_switches           EQU     $f1b4
read_joystick           EQU     $f1f8
display_string          EQU     $f495
move_draw_VL4           EQU     $f3b7
printu2                 EQU     $f38a
reset0ref               EQU     $f354
conv_ang_rr             EQU     $F601
get_abs_val_ab          EQU     $F584
moveto_d_7f             EQU     $F2FC
print_1_string          EQU     $f373
move_block              EQU     $f67f
move_block2             EQU     $f683
move_pen_d              EQU     $f312
draw_vl_count4          EQU     $f3ce
move_pen7f              EQU     $f30c
dot_at_d                EQU     $f2c3
dot_ix                  EQU     $f2c1
move_pen                EQU     $f310
move_penff              EQU     $f308
rot_vec_list1           EQU     $f61f
print_str_d             EQU     $f37a
joy_analog              EQU     $f1f5
dot_d                   EQU     $f2c3
random                  EQU     $f511
print_ships             EQU     $f393
draw_vl_a               EQU     $f3da
clear_score             EQU     $f84f
add_score_a             EQU     $f85e
add_score_d             EQU     $f87c
new_high_score          EQU     $f8d8
dot_here                EQU     $f2c5
obj_hit                 EQU     $f8ff
;explosion_snd           EQU     $f92e
sound_byte              EQU     $f256
sound_bytes             EQU     $f27d
init_music_buf          EQU     $f533
init_sound_chk          EQU     $f687
init_sound              EQU     $f68d
;do_sound                EQU     $f289
;clear_sound             EQU     $f272

;System RAM locations

_text_size              EQU     $c82a   ; system text size location
_stick1_mask            EQU     $c81f
_stick2_mask            EQU     $c820
_stick3_mask            EQU     $c821
_stick4_mask            EQU     $c822
_stick_res              EQU     $c81a
_stick_type             EQU     $c823
_pot_y                  EQU     $c81c
_intensity              EQU     $c827
_music_ready            EQU     $c856
_refresh_time           EQU     $c83d

;User Code Storage locations

;$c880
user_RAM        EQU     $c880

;$c880
        
;buffer             EQU $c880

level              EQU $c880   ;buffer+32            ;Current level
players            EQU level+1              ;Numer of players
game               EQU players+1            
drag               EQU game+1
ships_left_1       EQU drag+2              ;Ships remaining player 1
ships_left_2       EQU ships_left_1+1       ;Ships remaining player 2
accel              EQU ships_left_2+1       ;Acceleration, player 1
accel_2            EQU accel+1              ;Acceleration, player 2
pos_max_vel        EQU accel_2+1            ;Max velocity, player 1
neg_max_vel        EQU pos_max_vel+2
pos_max_vel_2      EQU neg_max_vel+2        ;Max velocity, player 2
neg_max_vel_2      EQU pos_max_vel_2+2
no_shots_1         EQU neg_max_vel_2+2      ;Max number of shots, player 1
no_shots_2         EQU no_shots_1+1         ;Max number of shots, player 2
shot_speed_1       EQU no_shots_2+1         ;Speed of player 1's shots
shot_speed_2       EQU shot_speed_1+2       ;Speed of player 2's shots
shot_range_1       EQU shot_speed_2+2       ;Range of player 1's shots
shot_range_2       EQU shot_range_1+1       ;Range of player 2's shots
shot_counter       EQU shot_range_2+1
tmp                EQU shot_counter+1
tmp2               EQU tmp+2
tmp3               EQU tmp2+2
salien_posv        EQU tmp3+2
salien_negv        EQU salien_posv+2
falien_posv        EQU salien_negv+2
falien_negv        EQU falien_posv+2
posv               EQU falien_negv+2
negv               EQU posv+2

score_1            EQU $c8ad ;negv+2
score_2            EQU score_1+7
bonus_score_1      EQU score_2+7
bonus_score_2      EQU bonus_score_1+7
high_score         EQU bonus_score_2+7

in_blk_1x          EQU high_score+7         ;Causes a horizontal bounce
in_blk_1y          EQU in_blk_1x+1
in_blk_2x          EQU in_blk_1x+2         ;Causes a vertical bounce
in_blk_2y          EQU in_blk_1x+3

out_blk_1x         EQU in_blk_2y+1         ;Outer wall co-ords
out_blk_1y         EQU out_blk_1x+1

in_diag_1          EQU out_blk_1y+1        ;Inner wall diag co-ords
in_diag_2          EQU in_diag_1+1

out_diag_1         EQU in_diag_2+1
out_diag_2         EQU out_diag_1+1

quad_flag1         EQU out_diag_2+1
quad_flag2         EQU quad_flag1+1

no_sprites         EQU $c910              ;Total number of sprites to display
sprites_left       EQU no_sprites+1        ;Counter for displaying sprites
sprite_1           EQU sprites_left+1     ;Start of structure of Sprite #1
state              EQU #$00
posx               EQU #$01               ;X coordinate of Sprite
posy               EQU #$03               ;Y coordinate of Sprite
rotation           EQU #$05               ;Rotation of Sprite
intensity          EQU #$06               ;Intensity of Sprite
scale              EQU #$07               ;Scale of Sprite
no_vectors         EQU #$08               ;Number of Vectors in vector list for Sprite
vector_list        EQU #$09               ;Address of Vector list for Sprite
deltax             EQU #$0b               ;X velocity of Sprite
deltay             EQU #$0d               ;Y velocity of Sprite
sprite_2           EQU sprite_1+#15   ;$c921 ;sprite_1+#15       ;Start of structure for Sprite #2
sprite_3           EQU sprite_2+#15       ;$c930 ;Start of structure for Sprite #3
sprite_4           EQU sprite_3+#15       ;$c93f
sprite_5           EQU sprite_4+#15       ;$c94e
sprite_6           EQU sprite_5+#15       ;$c95d
sprite_7           EQU sprite_6+#15       ;$c96c
sprite_8           EQU sprite_7+#15       ;$c97b
sprite_9           EQU sprite_8+#15       ;$c98a
sprite_10          EQU sprite_9+#15       ;$c999
sprite_11          EQU sprite_10+#15      ;$c9a8
sprite_12          EQU sprite_11+#15      ;$c9b7
sprite_13          EQU sprite_12+#15      ;$c9c6
sprite_14          EQU sprite_13+#15      ;$c9d5
sprite_15          EQU sprite_14+#15      ;$c9e4
sprite_16          EQU sprite_15+#15      ;$c9f3
sprite_17          EQU sprite_16+#15      ;$ca02
sprite_18          EQU sprite_17+#15      ;$ca11
sprite_19          EQU sprite_18+#15      ;$ca20
sprite_20          EQU sprite_19+#15      ;$ca3f
sprite_21          EQU sprite_20+#15      ;$ca4e
sprite_22          EQU sprite_21+#15      ;$ca5d

sprite_23          EQU sprite_22+#15      ;$ca6c
sprite_24          EQU sprite_23+#15      ;$ca7b
sprite_25          EQU sprite_24+#15      ;$ca8a
sprite_26          EQU sprite_25+#15      ;$ca99
sprite_27          EQU sprite_26+#15      ;$caa8
sprite_28          EQU sprite_27+#15      ;$cab7
sprite_29          EQU sprite_28+#15      ;$cac6
sprite_30          EQU sprite_29+#15      ;$cad5

alien_turn         EQU sprite_23+1
type3_counter      EQU alien_turn+1
alientype1         EQU type3_counter+1
alientype2         EQU alientype1+1
alientype3         EQU alientype2+1
alientype4         EQU alientype3+1
alientype5         EQU alientype4+1
alientype6         EQU alientype5+1
alientype7         EQU alientype6+1
alientype8         EQU alientype7+1
alientype9         EQU alientype8+1
alientype10        EQU alientype9+1
alientype11        EQU alientype10+1
alientype12        EQU alientype11+1
no_aliens          EQU alientype12+1
remain_aliens      EQU no_aliens+1
mine_chance        EQU remain_aliens+1
p1_dead            EQU mine_chance+1
p2_dead            EQU p1_dead+1

bounce_flag        EQU p2_dead+1
bounce_snd_flag    EQU bounce_flag+1
alien_snd_flag     EQU bounce_snd_flag+1
exp_snd_flag       EQU alien_snd_flag+1
exp_snd_flag2      EQU exp_snd_flag+1 
shot_snd_flag      EQU exp_snd_flag2+1 
woo_snd_flag       EQU shot_snd_flag+1
tht_snd_flag       EQU woo_snd_flag+1
tht2_snd_flag      EQU tht_snd_flag+1
thud_count         EQU tht2_snd_flag+1
thud_flag          EQU thud_count+1
thud_vol           EQU thud_flag+1
old_snd            EQU thud_vol+1

wall_switch        EQU old_snd+2
wall_status1       EQU wall_switch+1
wall_status2       EQU wall_status1+1
wall_status3       EQU wall_status2+1
wall_status4       EQU wall_status3+1
wall_status5       EQU wall_status4+1
wall_status6       EQU wall_status5+1
wall_status7       EQU wall_status6+1
wall_status8       EQU wall_status7+1
wall_status9       EQU wall_status8+1
wall_status10      EQU wall_status9+1
wall_status11      EQU wall_status10+1
wall_status12      EQU wall_status11+1
wall_status13      EQU wall_status12+1
wall_status14      EQU wall_status13+1
wall_status15      EQU wall_status14+1
wall_status16      EQU wall_status15+1

p1_invince         EQU wall_status16+1
p1_invin_count     EQU p1_invince+1
p2_invince         EQU p1_invin_count+1
p2_invin_count     EQU p2_invince+1
restart_count      EQU p2_invin_count+1
shootp1            EQU restart_count+1
shootp2            EQU shootp1+1
bonus_snd_flag     EQU shootp2

whole_dur          EQU sprite_28+1
half_dur           EQU whole_dur+1
quarter_dur        EQU half_dur+1
eighth_dur         EQU quarter_dur+1
sixteenth_dur      EQU eighth_dur+1
V1_notes           EQU sixteenth_dur+1
V1_pos             EQU V1_notes+2
V1_count           EQU V1_pos+2
V1_dur             EQU V1_count+1
V1_whole           EQU V1_dur+1
V1_half            EQU V1_whole+2
V1_quarter         EQU V1_half+2
V1_eighth          EQU V1_quarter+2
V1_sixteenth       EQU V1_eighth+2
V2_notes           EQU V1_sixteenth+1
V2_pos             EQU V2_notes+2
V2_count           EQU V2_pos+2
V2_dur             EQU V2_count+1
V2_whole           EQU V2_dur+1
V2_half            EQU V2_whole+2
V2_quarter         EQU V2_half+2
V2_eighth          EQU V2_quarter+2
V2_sixteenth       EQU V2_eighth+2
V3_notes           EQU V2_sixteenth+1
V3_pos             EQU V3_notes+2
V3_count           EQU V3_pos+2
V3_dur             EQU V3_count+1
V3_whole           EQU V3_dur+1
V3_half            EQU V3_whole+2
V3_quarter         EQU V3_half+2
V3_eighth          EQU V3_quarter+2
V3_sixteenth       EQU V3_eighth+2

ashot_data_1       EQU sprite_28
ashot_data_2       EQU ashot_data_1+3

outer              EQU sprite_30+#15
inner              EQU outer+2
move_tmp           EQU inner+2

mine_data_1        EQU move_tmp+2
mine_data_2        EQU mine_data_1+#3

;*******************
; Sprite Definitions 
; Sprite 21    Player 1 Ship
; Sprite 22    Player 2 Ship
; Sprite 25-36 Aliens
; Sprite 37-40 Player 1 Bullets
; Sprite 41-44 Player 2 Bullets
;*******************


;$cbea  SP set here by boot, grows down...

        ORG     $0000

; Magic Init Block

        FCB     $67,$20
        FCC     "GCE XXXX"
        FCB     $80
        FDB     music
        FDB     $f850
        FDB     $30b8
        FCC     "OMEGA CHASE"
        FCB     $80,$0
start:
        bra init                     ; branch always to init code
init:
;        ldd #$0000
;        jsr get_pl_game
        
        ldx #user_RAM               ; get address of free RAM
        jsr clear_256_bytes         ; clear it
        clr players
warmstart:
        lda   #$c8                      ;This is equivalent to jsr dptoC8
        tfr   a,dp                      ;But inlined
        jsr   start_game
main2:
        lda   #$c8                      ;This is equivalent to jsr dptoC8
        tfr   a,dp                      ;But inlined
        jsr  new_level
main:
        lda   #$c8                      ;This is equivalent to jsr dptoD0
        tfr   a,dp                      ;But inlined
        jsr waitrecal                   ;Reset the CRT
        jsr snd_check
        
        jsr read_joysticks
        
        jsr intensity_to_7f
        jsr [inner]
        jsr [outer]
        
        jsr draw_aliens
        jsr draw_shots
        jsr draw_ships
        jsr draw_mines
        jsr draw_alien_shots
        
        jsr dead_chk
        lda tmp
        bne warmstart
        
        lda   #$c8                      ;This is equivalent to jsr dptoC8
        tfr   a,dp                      ;But inlined
        
        jsr update_ship
        jsr move_everything
        jsr update_ashots
        jsr update_shots
        jsr update_alien_2
        jsr drop_mine
        jsr aliens_shoot
        jsr check_ship_death

       
        lda remain_aliens
        bne main
        
        jsr end_lvl_music

        inc level
        lda level
        cmpa #100
        bne not_lvl_99
        lda #99
        sta level

not_lvl_99:

        bra main2
;***************


end_lvl_theme: FDB     $ff16, $Fd79            ; ADSR and twang address tables, in Vectrex ROM
               fcb     21,12
               fcb     21,12
               fcb     30,18
               fcb     28,18
               fcb     21,12
               fcb     21,12
               fcb     30,18
               fcb     28,18
               fcb     21,12
               fcb     21,12
               fcb     30,18
               fcb     28,18
               fcb     21,12
               fcb     21,12
               fcb     21,28
               fcb     00,$80



; **********************************
; Shape tables and data follow
; **********************************
test_score:
        fcc     "000000"
        fcb     #$80

vert_wall:
          fcb    0,0
          fcb    127,0
          fcb    127,0
horiz_wall: 
          fcb    0,0
          fcb    0,127
          fcb    0,127
dia_up_wall:
          fcb    0,0
          fcb    127,127
dia_down_wall:
          fcb    0,0
          fcb    -127,127

exp_dots: fcb 0,127
          fcb 127,0
          fcb 0,-127
          fcb -127,0
          fcb 63,63
          fcb 63,-63
          fcb -63,63
          fcb -63,-63

letter_a: fcb -63,-63
          fcb 126,63 
          fcb -63,31
          fcb 0,-31
          fcb 0,31
          fcb -63,32
letter_b: fcb 0,-63
          fcb 0,126
          fcb 63,0
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 63,0
letter_c: fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
letter_d: fcb 63,-63
          fcb -126,0
          fcb 21,126
          fcb 84,0
          fcb 21,-126
letter_e: fcb 63,63
          fcb 0,-126
          fcb -63,0
          fcb 0,63
          fcb 0,-63
          fcb -63,0
          fcb 0,126
letter_f: fcb 63,63
          fcb 0,-126
          fcb -63,0
          fcb 0,63
          fcb 0,-63
          fcb -63,0
letter_g: fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 63,0
          fcb 0,-63
letter_h: fcb 63,63
          fcb -63,0
          fcb 0,-126
          fcb 0,126
          fcb -63,0
letter_h2: fcb 63,-63
          fcb -126,0
letter_i: fcb 63,0
          fcb -126,0
letter_j: fcb 63,63
          fcb 0,-63
          fcb -126,0
          fcb 0,-63
letter_j2: fcb 63,-63
          fcb 0,63
letter_k: fcb 63,63
          fcb -63,-126
          fcb -63,126
letter_k2: fcb 63,-63
          fcb -126,0
letter_l: fcb 63,-63
          fcb -126,0
          fcb 0,126
letter_m: fcb -63,-63
          fcb 126,31
          fcb -63,32
          fcb 63,32
          fcb -126,31
letter_n: fcb -63,-63
          fcb 126,42
          fcb -126,42
          fcb 126,42
letter_o: fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 126,0
letter_p: fcb -63,-63
          fcb 126,0
          fcb 0,126
          fcb -63,0
          fcb 0,-126
letter_q: fcb -63,63
          fcb 126,0
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 63,-63
letter_r: fcb -63,-63
          fcb 126,0
          fcb 0,126
          fcb -63,0
          fcb 0,-126
          fcb -63,126
letter_s: fcb 63,63
          fcb 0,-126
          fcb -63,0
          fcb 0,126
          fcb -63,0
          fcb 0,-126
letter_t: fcb -63,0
          fcb 126,0
letter_t2: fcb 63,-63          
          fcb 0,126
letter_u: fcb 63,-63
          fcb -126,0
          fcb 0,126
          fcb 126,0
letter_v: fcb 63,-63
          fcb -126,63
          fcb 126,63
letter_w: fcb 63,-63
          fcb -126,42
          fcb 63,42
          fcb -63,42
          fcb 126,42
letter_x: fcb 63,-63
          fcb -126,126
letter_x2: fcb 63,63
          fcb -126,-126
letter_y: fcb 63,-63
          fcb -63,63
letter_y2: fcb 63,63
          fcb -126,-126
letter_z: fcb 63,-63
          fcb 0,126
          fcb -126,-126
          fcb 0,126

big_c:    fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 31,0
          fcb 0,-95
          fcb 64,0
          fcb 0,95
          fcb 31,0
big_h:    fcb 63,63
          fcb 0,-31
          fcb -48,0
          fcb 0,-64
          fcb 48,0
          fcb 0,-31
          fcb -126,0
          fcb 0,31
          fcb 47,0
          fcb 0,64
          fcb -47,0
          fcb 0,31
          fcb 126,0
big_a:    fcb -63,-63
          fcb 126,63
          fcb -126,63
          fcb 0,-31
          fcb 16,-16
          fcb 0,-32
          fcb -16,-16
          fcb 0,-31
big_s:    fcb 63,63
          fcb 0,-126
          fcb -78,0
          fcb 0,95
          fcb -17,0
          fcb 0,-95
          fcb -31,0
          fcb 0,126
          fcb 79,0
          fcb 0,-95
          fcb 16,0
          fcb 0,95
          fcb 31,0
big_e:    fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 31,0
          fcb 0,-95
          fcb 17,0
          fcb 0,95
          fcb 31,0
          fcb 0,-95
          fcb 16,0
          fcb 0,95
          fcb 31,0
big_o:    fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 126,0
big_o2:   fcb 32,32
          fcb 0,-64
          fcb -64,0
          fcb 0,64
          fcb 64,0
big_m:    fcb 63,63
          fcb 0,-31
          fcb -64,-32
          fcb 64,-32
          fcb 0,-31
          fcb -126,0
          fcb 0,31
          fcb 64,0
          fcb -64,32
          fcb 64,32
          fcb -64,0
          fcb 0,31
          fcb 126,0
big_g:    fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 79,0
          fcb 0,-62
          fcb -31,0
          fcb 0,31
          fcb -17,0
          fcb 0,-64
          fcb 64,0
          fcb 0,95
          fcb 31,0

number0:  fcb 63,-63
          fcb 0,126
          fcb -126,0
          fcb 0,-126
          fcb 126,0
number1:  fcb -63,0
          fcb 126,0
number2:  fcb 63,-63
          fcb 0,126
          fcb -63,0
          fcb 0,-126
          fcb -63,0
          fcb 0,126
number3:  fcb 63,-63
          fcb 0,126
          fcb -63,0
          fcb 0,-63
          fcb 0,63
          fcb -63,0
          fcb 0,-126
number4:  fcb 63,-63
          fcb -63,0
          fcb 0,126
          fcb 30,0
          fcb -93,0
number5:  fcb 63,63
          fcb 0,-126
          fcb -63,0
          fcb 0,126
          fcb -63,0
          fcb 0,-126
number6:  fcb 63,63
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 63,0
          fcb 0,-126
number7:  fcb 63,-63
          fcb 0,126
          fcb -126,-126
number8:  fcb 0,-63
          fcb 0,126
          fcb 63,0
          fcb 0,-126
          fcb -126,0
          fcb 0,126
          fcb 63,0
number9:  fcb -63,63
          fcb 126,0
          fcb 0,-126
          fcb -63,0
          fcb 0,126

Shape_000: fcb 31,0
           fcb -62,31
           fcb 0,-15
           fcb 15,-8
           fcb 0,-16
           fcb -15,-8
           fcb 0,-15
           fcb 62,31
Shape_001: fcb 30,2
           fcb -63,26
           fcb 2,-15
           fcb 15,-7
           fcb 1,-15
           fcb -14,-9
           fcb 1,-15
           fcb 58,35
Shape_002: fcb 30,5
           fcb -66,19
           fcb 3,-15
           fcb 16,-5
           fcb 3,-14
           fcb -13,-11
           fcb 3,-15
           fcb 54,41
Shape_003: fcb 29,8
           fcb -67,13
           fcb 4,-15
           fcb 17,-3
           fcb 4,-15
           fcb -12,-11
           fcb 4,-15
           fcb 50,46
Shape_004: fcb 28,11
           fcb -67,6
           fcb 5,-14
           fcb 17,-2
           fcb 6,-14
           fcb -11,-13
           fcb 5,-13
           fcb 45,50
Shape_005: fcb 27,14
           fcb -68,-1
           fcb 7,-13
           fcb 17,0
           fcb 7,-14
           fcb -9,-14
           fcb 6,-13
           fcb 40,55
Shape_006: fcb 25,16
           fcb -67,-8
           fcb 8,-11
           fcb 17,1
           fcb 9,-13
           fcb -9,-15
           fcb 9,-12
           fcb 33,58
Shape_007: fcb 23,19
           fcb -66,-15
           fcb 10,-10
           fcb 16,3
           fcb 10,-13
           fcb -6,-15
           fcb 9,-12
           fcb 27,62
Shape_008: fcb 21,21
           fcb -64,-21
           fcb 11,-10
           fcb 16,5
           fcb 11,-11
           fcb -5,-16
           fcb 10,-11
           fcb 21,64
Shape_009: fcb 19,23
           fcb -62,-26
           fcb 11,-10
           fcb 16,6
           fcb 12,-10
           fcb -3,-16
           fcb 10,-10
           fcb 16,66
Shape_010: fcb 17,25
           fcb -59,-33
           fcb 12,-8
           fcb 15,8
           fcb 13,-9
           fcb -1,-17
           fcb 11,-8
           fcb 9,67
Shape_011: fcb 14,26
           fcb -55,-38
           fcb 13,-7
           fcb 14,9
           fcb 14,-7
           fcb 0,-17
           fcb 12,-7
           fcb 2,67
Shape_012: fcb 12,28
           fcb -52,-44
           fcb 14,-6
           fcb 13,11
           fcb 14,-6
           fcb 1,-17
           fcb 14,-6
           fcb -4,68
Shape_013: fcb 8,29
           fcb -46,-49
           fcb 14,-4
           fcb 12,12
           fcb 14,-5
           fcb 4,-17
           fcb 14,-4
           fcb -12,67
Shape_014: fcb 6,30
           fcb -42,-53
           fcb 15,-3
           fcb 11,13
           fcb 14,-4
           fcb 5,-16
           fcb 14,-3
           fcb -17,66
Shape_015: fcb 3,30
           fcb -36,-57
           fcb 15,-2
           fcb 9,14
           fcb 15,-1
           fcb 6,-16
           fcb 15,-1
           fcb -24,63
Shape_016: fcb 0,30
           fcb -30,-60
           fcb 15,0
           fcb 8,15
           fcb 14,0
           fcb 8,-15
           fcb 15,0
           fcb -30,60
Shape_017: fcb -2,30
           fcb -26,-63
           fcb 15,2
           fcb 7,15
           fcb 15,1
           fcb 9,-14
           fcb 15,1
           fcb -35,58
Shape_018: fcb -5,30
           fcb -19,-66
           fcb 15,3
           fcb 5,16
           fcb 14,3
           fcb 11,-13
           fcb 15,3
           fcb -41,54
Shape_019: fcb -8,29
           fcb -13,-67
           fcb 15,4
           fcb 3,17
           fcb 15,4
           fcb 11,-12
           fcb 15,4
           fcb -46,50
Shape_020: fcb -11,28
           fcb -6,-67
           fcb 14,5
           fcb 2,17
           fcb 14,6
           fcb 13,-11
           fcb 13,5
           fcb -50,45
Shape_021: fcb -14,27
           fcb 1,-68
           fcb 13,7
           fcb 0,17
           fcb 14,7
           fcb 14,-9
           fcb 13,6
           fcb -55,40
Shape_022: fcb -16,25
           fcb 8,-67
           fcb 11,8
           fcb -1,17
           fcb 13,9
           fcb 15,-9
           fcb 12,9
           fcb -58,33
Shape_023: fcb -19,23
           fcb 15,-66
           fcb 10,10
           fcb -3,16
           fcb 13,10
           fcb 15,-6
           fcb 12,9
           fcb -62,27
Shape_024: fcb -21,21
           fcb 21,-64
           fcb 10,11
           fcb -5,16
           fcb 11,11
           fcb 16,-5
           fcb 11,10
           fcb -64,21
Shape_025: fcb -23,19
           fcb 26,-62
           fcb 10,11
           fcb -6,16
           fcb 10,12
           fcb 16,-3
           fcb 10,10
           fcb -66,16
Shape_026: fcb -25,17
           fcb 33,-59
           fcb 8,12
           fcb -8,15
           fcb 9,13
           fcb 17,-1
           fcb 8,11
           fcb -67,9
Shape_027: fcb -26,14
           fcb 38,-55
           fcb 7,13
           fcb -9,14
           fcb 7,14
           fcb 17,0
           fcb 7,12
           fcb -67,2
Shape_028: fcb -28,12
           fcb 44,-52
           fcb 6,14
           fcb -11,13
           fcb 6,14
           fcb 17,1
           fcb 6,14
           fcb -68,-4
Shape_029: fcb -29,8
           fcb 49,-46
           fcb 4,14
           fcb -12,12
           fcb 5,14
           fcb 17,4
           fcb 4,14
           fcb -67,-12
Shape_030: fcb -30,6
           fcb 53,-42
           fcb 3,15
           fcb -13,11
           fcb 4,14
           fcb 16,5
           fcb 3,14
           fcb -66,-17
Shape_031: fcb -30,3
           fcb 57,-36
           fcb 2,15
           fcb -14,9
           fcb 1,15
           fcb 16,6
           fcb 1,15
           fcb -63,-24
Shape_032: fcb -30,0
           fcb 60,-30
           fcb 0,15
           fcb -15,8
           fcb 0,14
           fcb 15,8
           fcb 0,15
           fcb -60,-30
Shape_033: fcb -30,-2
           fcb 63,-26
           fcb -2,15
           fcb -15,7
           fcb -1,15
           fcb 14,9
           fcb -1,15
           fcb -58,-35
Shape_034: fcb -30,-5
           fcb 66,-19
           fcb -3,15
           fcb -16,5
           fcb -3,14
           fcb 13,11
           fcb -3,15
           fcb -54,-41
Shape_035: fcb -29,-8
           fcb 67,-13
           fcb -4,15
           fcb -17,3
           fcb -4,15
           fcb 12,11
           fcb -4,15
           fcb -50,-46
Shape_036: fcb -28,-11
           fcb 67,-6
           fcb -5,14
           fcb -17,2
           fcb -6,14
           fcb 11,13
           fcb -5,13
           fcb -45,-50
Shape_037: fcb -27,-14
           fcb 68,1
           fcb -7,13
           fcb -17,0
           fcb -7,14
           fcb 9,14
           fcb -6,13
           fcb -40,-55
Shape_038: fcb -25,-16
           fcb 67,8
           fcb -8,11
           fcb -17,-1
           fcb -9,13
           fcb 9,15
           fcb -9,12
           fcb -33,-58
Shape_039: fcb -23,-19
           fcb 66,15
           fcb -10,10
           fcb -16,-3
           fcb -10,13
           fcb 6,15
           fcb -9,12
           fcb -27,-62
Shape_040: fcb -21,-21
           fcb 64,21
           fcb -11,10
           fcb -16,-5
           fcb -11,11
           fcb 5,16
           fcb -10,11
           fcb -21,-64
Shape_041: fcb -19,-23
           fcb 62,26
           fcb -11,10
           fcb -16,-6
           fcb -12,10
           fcb 3,16
           fcb -10,10
           fcb -16,-66
Shape_042: fcb -17,-25
           fcb 59,33
           fcb -12,8
           fcb -15,-8
           fcb -13,9
           fcb 1,17
           fcb -11,8
           fcb -9,-67
Shape_043: fcb -14,-26
           fcb 55,38
           fcb -13,7
           fcb -14,-9
           fcb -14,7
           fcb 0,17
           fcb -12,7
           fcb -2,-67
Shape_044: fcb -12,-28
           fcb 52,44
           fcb -14,6
           fcb -13,-11
           fcb -14,6
           fcb -1,17
           fcb -14,6
           fcb 4,-68
Shape_045: fcb -8,-29
           fcb 46,49
           fcb -14,4
           fcb -12,-12
           fcb -14,5
           fcb -4,17
           fcb -14,4
           fcb 12,-67
Shape_046: fcb -6,-30
           fcb 42,53
           fcb -15,3
           fcb -11,-13
           fcb -14,4
           fcb -5,16
           fcb -14,3
           fcb 17,-66
Shape_047: fcb -3,-30
           fcb 36,57
           fcb -15,2
           fcb -9,-14
           fcb -15,1
           fcb -6,16
           fcb -15,1
           fcb 24,-63
Shape_048: fcb 0,-30
           fcb 30,60
           fcb -15,0
           fcb -8,-15
           fcb -14,0
           fcb -8,15
           fcb -15,0
           fcb 30,-60
Shape_049: fcb 2,-30
           fcb 26,63
           fcb -15,-2
           fcb -7,-15
           fcb -15,-1
           fcb -9,14
           fcb -15,-1
           fcb 35,-58
Shape_050: fcb 5,-30
           fcb 19,66
           fcb -15,-3
           fcb -5,-16
           fcb -14,-3
           fcb -11,13
           fcb -15,-3
           fcb 41,-54
Shape_051: fcb 8,-29
           fcb 13,67
           fcb -15,-4
           fcb -3,-17
           fcb -15,-4
           fcb -11,12
           fcb -15,-4
           fcb 46,-50
Shape_052: fcb 11,-28
           fcb 6,67
           fcb -14,-5
           fcb -2,-17
           fcb -14,-6
           fcb -13,11
           fcb -13,-5
           fcb 50,-45
Shape_053: fcb 14,-27
           fcb -1,68
           fcb -13,-7
           fcb 0,-17
           fcb -14,-7
           fcb -14,9
           fcb -13,-6
           fcb 55,-40
Shape_054: fcb 16,-25
           fcb -8,67
           fcb -11,-8
           fcb 1,-17
           fcb -13,-9
           fcb -15,9
           fcb -12,-9
           fcb 58,-33
Shape_055: fcb 19,-23
           fcb -15,66
           fcb -10,-10
           fcb 3,-16
           fcb -13,-10
           fcb -15,6
           fcb -12,-9
           fcb 62,-27
Shape_056: fcb 21,-21
           fcb -21,64
           fcb -10,-11
           fcb 5,-16
           fcb -11,-11
           fcb -16,5
           fcb -11,-10
           fcb 64,-21
Shape_057: fcb 23,-19
           fcb -26,62
           fcb -10,-11
           fcb 6,-16
           fcb -10,-12
           fcb -16,3
           fcb -10,-10
           fcb 66,-16
Shape_058: fcb 25,-17
           fcb -33,59
           fcb -8,-12
           fcb 8,-15
           fcb -9,-13
           fcb -17,1
           fcb -8,-11
           fcb 67,-9
Shape_059: fcb 26,-14
           fcb -38,55
           fcb -7,-13
           fcb 9,-14
           fcb -7,-14
           fcb -17,0
           fcb -7,-12
           fcb 67,-2
Shape_060: fcb 28,-12
           fcb -44,52
           fcb -6,-14
           fcb 11,-13
           fcb -6,-14
           fcb -17,-1
           fcb -6,-14
           fcb 68,4
Shape_061: fcb 29,-8
           fcb -49,46
           fcb -4,-14
           fcb 12,-12
           fcb -5,-14
           fcb -17,-4
           fcb -4,-14
           fcb 67,12
Shape_062: fcb 30,-6
           fcb -53,42
           fcb -3,-15
           fcb 13,-11
           fcb -4,-14
           fcb -16,-5
           fcb -3,-14
           fcb 66,17
Shape_063: fcb 30,-3
           fcb -57,36
           fcb -2,-15
           fcb 14,-9
           fcb -1,-15
           fcb -16,-6
           fcb -1,-15
           fcb 63,24


hex_enemy: fcb 126,0
           fcb -63,126
           fcb -126,0
           fcb -63,-126
           fcb 63,-126
           fcb 126,0
           fcb 63,126

n_new_enemy3a: fcb 63,0
             fcb -94,32
             fcb -32,94
             fcb 0,-126
             fcb 0,-126
             fcb 32,94
             fcb 94,32

mine1:  fcb   -31,-63
        fcb   63,63
        fcb   -63,63
        fcb   0,-126
mine2:  fcb   31,-63
        fcb   -63,63
        fcb   63,63
        fcb   0,-126
mine3:  fcb   0,-63
        fcb   63,63
        fcb   -63,63
        fcb   0,-126
        fcb  -63,63
        fcb   63,63

music:
        FDB     #$ff16,#$feb6
        FCB     #$00,#$80

enemy_start:               ;6 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     32,-109    
        fcb     16,-79
        fcb     -16,-109
        fcb     -32,-79
        fcb     -48,-109
        

enemy_start2:              ;6 Aliens, clockwise
        fcb     -48,-109
        fcb     -32,-79
        fcb     -16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     48,-79

enemy_start3:               ;7 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     16,-79
        fcb     -16,-109
        fcb     -32,-79
        fcb     -48,-109
        
enemy_start4:              ;7 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     48,-79
        
enemy_start5:               ;8 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     32,-79
        fcb     16,-79
        fcb     -16,-109
        fcb     -32,-79
        fcb     -48,-109

enemy_start6:              ;8 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     48,-79

enemy_start7:               ;9 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     32,-79
        fcb     16,-79
        fcb     16,-109
        fcb     -16,-109
        fcb     -32,-79
        fcb     -48,-109

enemy_start8:              ;9 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     16,-79
        fcb     32,-109
        fcb     48,-79

enemy_start9:               ;10 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     32,-79
        fcb     16,-79
        fcb     16,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     -32,-79
        fcb     -48,-109

enemy_start10:              ;10 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     48,-79

enemy_start11:               ;11 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     32,-79
        fcb     16,-79
        fcb     16,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -48,-109

enemy_start12:              ;11 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     32,-79
        fcb     48,-79

enemy_start13:               ;12 Aliens, counter-clockwise
        fcb     48,-79     
        fcb     48,-109
        fcb     32,-109    
        fcb     32,-79
        fcb     16,-79
        fcb     16,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -48,-109
        fcb     -48,-79

enemy_start14:              ;12 Aliens, clockwise
        fcb     -48,-109
        fcb     -48,-79
        fcb     -32,-79
        fcb     -32,-109
        fcb     -16,-109
        fcb     -16,-79
        fcb     16,-109
        fcb     16,-79
        fcb     32,-109
        fcb     32,-79
        fcb     48,-79
        fcb     48,-109

en_st_diag1:              ;12 Aliens, counter
        fcb    16,-93
        fcb    16,-63
        fcb     0,-109
        fcb     0,-79
        fcb    -16,-93
        fcb    -16,-63
        fcb    -32,-77
        fcb    32,-77
        fcb    -32,-47
        fcb    32,-47
        fcb    -48,-61
        fcb    48,-61
        
en_st_diag2:              ;12 Aliens, clockwise
        fcb    -16,-93
        fcb    -16,-63
        fcb     0,-109
        fcb     0,-79
        fcb    16,-93
        fcb    16,-63
        fcb    32,-77        
        fcb    -32,-77
        fcb    32,-47
        fcb    -32,-47
        fcb    48,-61
        fcb    -48,-61

en_st_diag3:              ;12 Aliens, counter
        fcb   48,-62
        fcb   40,-70
        fcb   32,-78
        fcb   24,-86
        fcb   16,-94
        fcb    8,-102
        fcb    0,-110
        fcb    -8,-102
        fcb   -16,-94
        fcb   -24,-86
        fcb   -32,-78
        fcb   -40,-70
        
en_st_diag4:              ;12 Aliens, clockwise
        fcb   -40,-70
        fcb   -32,-78
        fcb   -24,-86
        fcb   -16,-94
        fcb    -8,-102
        fcb    0,-110
        fcb    8,-102
        fcb   16,-94
        fcb   24,-86
        fcb   32,-78
        fcb   40,-70
        fcb   48,-62


;intro_1: fcc "IN THE YEAR 2003 THE OMEGA SYSTEM"
;         fcb $80
;intro_2: fcc "DEVELOPED A METHOD OF TRAINING ITS"
;         fcb $80
;intro_3: fcc "WARRIORS TO PROTECT THEIR STAR COLONIES."
;         fcb $80
;intro_4: fcc "OVER THE CITY OF KOMAL, ANDROID CONTROLLED"
;         fcb $80
;intro_5: fcc "FIGHTERS RACED TO ENGAGE AND DESTROY THESE"
;         fcb $80
;intro_6: fcc "OMEGAN WARRIORS"
;         fcb $80
;intro_7: fcc "THE OMEGAN METHOD IS SO SUCCESSFUL"
;         fcb $80
;intro_8: fcc "IT COMMANDS FEAR AND RESPECT FROM ALL"
;         fcb $80
;intro_9: fcc "THROUGHOUT THE GALAXIES."
;         fcb $80
;intro_10: fcc "BUT THAT WAS 2003"
;          fcb $80
;intro_11: fcc "NOW A NEW BREED OF WARRIOR IS NEEDED."
;          fcb $80
;intro_12: fcc "TO TRAIN THESE MIGHTY SOLDIERS COMES"
;          fcb $80
;intro_13: fcc "OMEGA CHASE"
;          fcb $80

;ADSR1:    fdb $feee,$7000,$0000,$0000,$0000,$0000,$0000,$0000
;ADSR2:    fdb $fedc,$ba98,$7654,$3210,$0000,$0000,$0000,$0000
;ADSR3:    fdb $0000,$0000,$0000,$0000,$0000,$0000,$0000,$00f0

;explosion_snd:
;          fdb ADSR1,#$fd79
;          fcb 128+64+4,128+64+4,64+4,#$05
;          fcb #$00,#$80
;shot_snd:
;          fdb ADSR2,#$feb6
;          fcb #$20,#$0f
;          fcb #$00,#$80
;bounce_snd:
;          fdb #$fdc3
;          fdb #$feb6
;          fcb #$0a,#$16
;          fcb #$00,#$80
;no_snd:
;          fdb #$fd69,#$fd79
;          fcb #$00,#$80
;          fcb #$00,#$80

setup_fade_mus:
          lda #32
          sta whole_dur
          lda #16
          sta half_dur
          lda #8
          sta quarter_dur
          lda #4
          sta eighth_dur
          lda #2
          sta sixteenth_dur
          ldd #fade_song1
          std V1_notes
          std V1_pos
          lda #00
          sta V1_count
          lda #00
          sta V1_dur
          ldd #fade1_w_ADSR
          std V1_whole
          ldd #fade1_h_ADSR
          std V1_half
          ldd #fade1_q_ADSR
          std V1_quarter
          ldd #fade1_e_ADSR
          std V1_eighth
          ldd #fade1_s_ADSR
          std V1_sixteenth
          ldd #fade_song2
          std V2_notes
          std V2_pos
          lda #00
          sta V2_count
          lda #00
          sta V2_dur
          ldd #fade2_w_ADSR
          std V2_whole
          ldd #fade2_h_ADSR
          std V2_half
          ldd #fade2_q_ADSR
          std V2_quarter
          ldd #fade2_e_ADSR
          std V2_eighth
          ldd #fade2_s_ADSR
          std V2_sixteenth
          rts



setup_intro_mus:
          lda #64
          sta whole_dur
          lda #32
          sta half_dur
          lda #16
          sta quarter_dur
          lda #8
          sta eighth_dur
          lda #4
          sta sixteenth_dur
          ldd #intro_song1
          std V1_notes
          std V1_pos
          lda #00
          sta V1_count
          lda #00
          sta V1_dur
          ldd #ins1_w_ADSR
          std V1_whole
          ldd #ins1_h_ADSR
          std V1_half
          ldd #ins1_q_ADSR
          std V1_quarter
          ldd #ins1_e_ADSR
          std V1_eighth
          ldd #ins1_s_ADSR
          std V1_sixteenth
          ldd #intro_song2
          std V2_notes
          std V2_pos
          lda #00
          sta V2_count
          lda #00
          sta V2_dur
          ldd #ins2_w_ADSR
          std V2_whole
          ldd #ins2_h_ADSR
          std V2_half
          ldd #ins2_q_ADSR
          std V2_quarter
          ldd #ins2_e_ADSR
          std V2_eighth
          ldd #ins2_s_ADSR
          std V2_sixteenth
          ldd #intro_song3
          std V3_notes
          std V3_pos
          lda #00
          sta V3_count
          lda #00
          sta V3_dur
          ldd #ins3_w_ADSR
          std V3_whole
          ldd #ins3_h_ADSR
          std V3_half
          ldd #ins3_q_ADSR
          std V3_quarter
          ldd #ins3_e_ADSR
          std V3_eighth
          ldd #ins3_s_ADSR
          std V3_sixteenth
          rts

play_voice1:
           lda V1_count
           lbne hold_voice1

           ldx V1_pos
           lda 0,x
           cmpa #$ff
           bne not_restartV1
           
           ldx V1_notes
           stx V1_pos
           lda 0,x
           bra not_rest1

not_restartV1:
           cmpa #128
           bne not_rest1

           ldb $c807
           orb #$01    ;Turn off bit 0 - Pulse on Voice 1
           orb #8    ;Turn on  bit 4 - No noise on Voice 1
           lda #$07
           jsr byte2sndchip
           bra cont_v1

not_rest1:           
           anda #$40
           beq tone1
           
           ldb 0,x
           andb #$1f
           lda #$06
           jsr byte2sndchip
           
           ldb $c807
           orb #01    ;Turn on bit 0 - No Pulse on Voice 1
           andb #247    ;Turn off bit 4 - Noise on Voice 1
           lda #$07
           jsr byte2sndchip
           bra cont_v1

tone1:
           lda 0,x
           lsla
           ldx #BIOS_music_data
           ldb a,x
           lda #$01
           jsr byte2sndchip
           
           ldx V1_pos
           lda 0,x
           lsla
           inca 
           ldx #BIOS_music_data
           ldb a,x
           lda #$00
           jsr byte2sndchip

           ldb $c807
           andb #254    ;Turn off bit 0 - Pulse on Voice 1
           orb  #8    ;Turn on  bit 4 - No noise on Voice 1
           lda #$07
           jsr byte2sndchip
           
cont_v1:           
           ldx V1_pos
           lda 1,x
           sta V1_dur      ; Added This!

           ldx #whole_dur
           lda a,x
           sta V1_count
           
           ldx V1_pos
           leax 2,x
           stx V1_pos

hold_voice1:
           dec V1_count
           
           lda V1_dur
           cmpa #$00
           bne not_whole1
           ldx #ins1_w_ADSR
           bra do_volume1
not_whole1:           
           cmpa #$01
           bne not_half1
           ldx #ins1_h_ADSR
           bra do_volume1
not_half1:
           cmpa #$02
           bne not_quarter1
           ldx #ins1_q_ADSR
           bra do_volume1
not_quarter1:
           cmpa #$03
           bne not_eighth1
           ldx #ins1_e_ADSR
           bra do_volume1
not_eighth1:
           ldx #ins1_s_ADSR
do_volume1:
           lda V1_count
           ldb a,x
           lda #08
           jsr byte2sndchip
           rts

play_voice2:
           lda V2_count
           lbne hold_voice2

           ldx V2_pos
           lda 0,x
           cmpa #$ff
           bne not_restartV2
           
           ldx V2_notes
           stx V2_pos
           lda 0,x
           bra not_rest2

not_restartV2:
           cmpa #128
           bne not_rest2

           ldb $c807
           orb #$02    ;Turn on bit 1 - No Pulse on Voice 2
           orb #16    ;Turn on bit 5 - No noise on Voice 2
           lda #$07
           jsr byte2sndchip
           bra cont_v2

not_rest2:
           anda #$40
           beq tone2
           
           ldb 0,x
           andb #$1f
           lda #$06
           jsr byte2sndchip
           
           ldb $c807
           orb #$02    ;Turn on bit 0 - No Pulse on Voice 2
           andb #239    ;Turn off bit 4 - Noise on Voice 2
           lda #$07
           jsr byte2sndchip
           bra cont_v2

tone2:
           lda 0,x
           lsla
           ldx #BIOS_music_data
           ldb a,x
           lda #$03
           jsr byte2sndchip
           
           ldx V2_pos
           lda 0,x
           lsla
           inca 
           ldx #BIOS_music_data
           ldb a,x
           lda #$02
           jsr byte2sndchip

           ldb $c807
           andb #253    ;Turn off bit 1 - Pulse on Voice 2
           orb  #16    ;Turn on bit 5 - No noise on Voice 2
           lda #$07
           jsr byte2sndchip
           
cont_v2:
           ldx V2_pos
           lda 1,x
           sta V2_dur      ; Added This!

           ldx #whole_dur
           lda a,x
           sta V2_count
           
           ldx V2_pos
           leax 2,x
           stx V2_pos

hold_voice2:
           dec V2_count
           
           lda V2_dur
           cmpa #$00
           bne not_whole2
           ldx #ins2_w_ADSR
           bra do_volume2
not_whole2:           
           cmpa #$01
           bne not_half2
           ldx #ins2_h_ADSR
           bra do_volume2
not_half2:
           cmpa #$02
           bne not_quarter2
           ldx #ins2_q_ADSR
           bra do_volume2
not_quarter2:
           cmpa #$03
           bne not_eighth2
           ldx #ins2_e_ADSR
           bra do_volume2
not_eighth2:
           ldx #ins2_s_ADSR
do_volume2:
           lda V2_count
           ldb a,x
           lda #09
           jsr byte2sndchip
           rts

play_voice3:
           lda V3_count
           lbne hold_voice3

           ldx V3_pos
           lda 0,x
           cmpa #$ff
           bne not_restartV3
           
           ldx V3_notes
           stx V3_pos
           lda 0,x
           bra not_rest3

not_restartV3:
           cmpa #128
           bne not_rest3

           ldb $c807
           orb #$04    ;Turn on bit 2 - No Pulse on Voice 3
           orb #32    ;Turn on bit 6 - No noise on Voice 3
           lda #$07
           jsr byte2sndchip
           bra cont_v3

not_rest3:
           anda #$40
           beq tone3
           
           ldb 0,x
           andb #$1f
           lda #$06
           jsr byte2sndchip
           
           ldb $c807
           orb #$04    ;Turn on bit 0 - No Pulse on Voice 3
           andb #223    ;Turn off bit 4 - Noise on Voice 3
           lda #$07
           jsr byte2sndchip
           bra cont_v3

tone3:
           lda 0,x
           lsla
           ldx #BIOS_music_data
           ldb a,x
           lda #$05
           jsr byte2sndchip
           
           ldx V3_pos
           lda 0,x
           lsla
           inca 
           ldx #BIOS_music_data
           ldb a,x
           lda #$04
           jsr byte2sndchip

           ldb $c807
           andb #251    ;Turn off bit 1 - Pulse on Voice 3
           orb  #32    ;Turn on bit 5 - No noise on Voice 3
           lda #$07
           jsr byte2sndchip
           
cont_v3:
           ldx V3_pos
           lda 1,x
           sta V3_dur      ; Added This!

           ldx #whole_dur
           lda a,x
           sta V3_count
           
           ldx V3_pos
           leax 2,x
           stx V3_pos

hold_voice3:
           dec V3_count
           
           lda V3_dur
           cmpa #$00
           bne not_whole3
           ldx #ins3_w_ADSR
           bra do_volume3
not_whole3:           
           cmpa #$01
           bne not_half3
           ldx #ins3_h_ADSR
           bra do_volume3
not_half3:
           cmpa #$02
           bne not_quarter3
           ldx #ins3_q_ADSR
           bra do_volume3
not_quarter3:
           cmpa #$03
           bne not_eighth3
           ldx #ins3_e_ADSR
           bra do_volume3
not_eighth3:
           ldx #ins3_s_ADSR
do_volume3:
           lda V3_count
           ldb a,x
           lda #10
           jsr byte2sndchip
           rts


;ins1_w_ADSR: fcb 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
;ins1_h_ADSR: fcb 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15

ins1_w_ADSR: fcb 1,3,5,7,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
             fcb 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
             fcb 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,15,15,15,8,1
ins1_h_ADSR: fcb 1,3,5,7,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,15,15,15,8,1

ins2_w_ADSR: fcb 1,2,3,4,5,6,7,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
             fcb 11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
             fcb 11,11,11,11,11,11,11,11,11,11,11,11,15,15,15,8,1
ins2_h_ADSR: fcb 1,2,3,4,5,6,7,8,9,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,15,15,15,8,1
   
ins3_w_ADSR: fcb 1,3,5,7,9,11,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
             fcb 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
             fcb 15,15,15,15,15,15,15,15,15,15,15,13,11,9,7,5,3,1
ins3_h_ADSR: fcb 1,3,5,7,9,11,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,11,9,7,5,3,1

ins1_q_ADSR: fcb 15,15,15,15,15,15,15,15
ins1_e_ADSR: fcb 15,15,15,15
ins1_s_ADSR: fcb 15,15
ins2_q_ADSR: fcb 15,15,15,15,15,15,15,15
ins2_e_ADSR: fcb 15,15,15,15
ins2_s_ADSR: fcb 15,15
ins3_q_ADSR: fcb 15,15,15,15,15,15,15,15
ins3_e_ADSR: fcb 15,15,15,15
ins3_s_ADSR: fcb 15,15
intro_song3: fcb #$09,2
             fcb #$0a,2
             fcb #$0c,1
             fcb #$09,2
             fcb #$0a,2
             fcb #$0c,2
             fcb #$0e,1
             fcb #$09,2
             fcb #$0a,2
             fcb #$0c,1
             fcb #$09,2
             fcb #$0a,1
             fcb #$ff

intro_song2: fcb #$1f,1
             fcb #$1d,1
             fcb #$22,1
             fcb #$22,1
             fcb #$22,1
             fcb #$1f,1
             fcb #$1d,1
             fcb #$22,1
             fcb #$22,1
             fcb #$1f,1
             fcb #$1d,1
             fcb #$22,1
             fcb #$1f,1
             fcb #$1d,1
             fcb #$1c,1
             fcb #$ff

intro_song1: fcb 0,1
             fcb 0,1
             fcb 0,1
             fcb 0,1
             fcb 0,1
             fcb #$40+#$07,1
             fcb #$ff

fade1_w_ADSR: fcb 1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,9,6,3
fade1_h_ADSR: fcb 1,2,3,4,5,6,7,8,9,10,11,12,12,9,6,3

fade2_w_ADSR: fcb 1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,2,1
fade2_h_ADSR: fcb 1,2,3,4,5,6,7,8,9,10,11,15,15,15,8,1

fade1_q_ADSR: fcb 15,15,15,15,15,15,15,15
fade1_e_ADSR: fcb 15,15,15,15
fade1_s_ADSR: fcb 15,15
fade2_q_ADSR: fcb 15,15,15,15,15,15,15,15
fade2_e_ADSR: fcb 15,15,15,15
fade2_s_ADSR: fcb 15,15

fade_song1: fcb #$1c,1
            fcb #$1c,1
            fcb #$1d,1
            fcb #$1f,0
            fcb #$1c,1
            fcb #$1c,1
            fcb #$1d,1
            fcb #$1f,0
            fcb #$1c,1
            fcb #$1c,1
            fcb #$1d,1
            fcb #$1f,1
            fcb #$22,0
            fcb 128,0
            fcb 128,0
            fcb 128,0
            fcb 128,0
            fcb #$ff
fade_song2: fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb #$00,0
            fcb 128,0
            fcb 128,0
            fcb 128,0
            fcb #$ff

;handle_sound:
;          lda Vec_Music_Flag
;          beq ok_sound
;          ldd old_snd
;          cmpd #explosion_snd
;          bne ok_sound
;          bra no_shot_sound

;ok_sound:
;          lda exp_snd_flag
;          beq no_exp_sound
;          lda #1
;          sta Vec_Music_Flag
;          ldu #explosion_snd
;          stu old_snd
;          bra done_snd
;no_exp_sound:
;          lda bounce_snd_flag
;          beq no_bounce_sound
;          lda #1
;          sta Vec_Music_Flag
;          ldu #bounce_snd
;          stu old_snd
;          bra done_snd
;no_bounce_sound:
;          lda shot_snd_flag
;          beq no_shot_sound
;          lda #1
;          sta Vec_Music_Flag
;          ldu #shot_snd
;          stu old_snd
;          bra done_snd
;no_shot_sound:
;          ldu old_snd
;done_snd:
;          jsr  Init_Music_chk          ; and init new notes
          
;          clr bounce_snd_flag
;          clr alien_snd_flag
;          clr exp_snd_flag
;          clr exp_snd_flag2
;          clr shot_snd_flag
;          clr woo_snd_flag
;          clr tht_snd_flag
;          clr tht2_snd_flag
;          rts


dead_chk:
        lda p1_dead
        cmpa #$ff
        bne dont_show_p1
        jsr draw_pl1_score
dont_show_p1:
        lda p2_dead
        cmpa #$ff
        bne dont_show_p2
        jsr draw_pl2_score
dont_show_p2:
        
        clr tmp
        lda p1_dead
        cmpa #$ff
        bne not_both_dead
        lda players
        beq dnt_chk_p2_res
        lda p2_dead
        cmpa #$ff
        bne not_both_dead
dnt_chk_p2_res:
          clr bounce_snd_flag
          clr alien_snd_flag
          clr exp_snd_flag
          clr exp_snd_flag2
          clr shot_snd_flag
          clr woo_snd_flag
          clr tht_snd_flag
          clr tht2_snd_flag
        
        bra chk_buttons
restart:       
        dec tmp
not_both_dead:
        rts

chk_buttons:
        dec restart_count
        bne not_both_dead
        lda #$01
        sta restart_count
        
        lda $c812           ;Get fire button
        bne restart
        lda $c813           ;Get fire button
        bne restart
        lda $c814           ;Get fire button
        bne restart
        lda $c815           ;Get fire button
        bne restart
        lda $c816           ;Get fire button
        bne restart
        lda $c817           ;Get fire button
        bne restart
        lda $c818           ;Get fire button
        bne restart
        lda $c819           ;Get fire button
        bne restart
        bra not_both_dead

clear_sound:
        ldb #$ff
        lda #$00
        jsr byte2sndchip
        ldb #$ff
        lda #$01
        jsr byte2sndchip
        ldb #$ff
        lda #$02
        jsr byte2sndchip
        ldb #$ff
        lda #$03
        jsr byte2sndchip
        ldb #$ff
        lda #$04
        jsr byte2sndchip
        ldb #$ff
        lda #$05
        jsr byte2sndchip
        ldb #$ff
        lda #$06
        jsr byte2sndchip
        ldb #191                         ;(Leave bit 6 on for joystick)
        lda #$07
        jsr byte2sndchip
        ldb #$ff
        lda #$08
        jsr byte2sndchip
        ldb #$ff
        lda #$09
        jsr byte2sndchip
        ldb #$ff
        lda #$0a
        jsr byte2sndchip
        rts


end_lvl_music:
        lda  #1
        sta  Vec_Music_Flag
end_level_pause:        
        lda   #$c8                      ;This is equivalent to jsr dptoc8
        tfr   a,dp                      ;But inlined
        lda   Vec_Music_Flag
        beq   e_end_level
       
        ldu   #end_lvl_theme
        jsr   Init_Music_chk          ; and init new notes
        jsr   waitrecal                 ;Reset the CRT
        jsr   Do_Sound                ; ROM function that does the
        lda   #$d0                      ;This is equivalent to jsr dptoD0
        tfr   a,dp                      ;But inlined
        jsr intensity_to_7f
        jsr [inner]
        jsr [outer]
        

        jsr draw_shots
        jsr draw_ships
        jsr draw_mines
        jsr draw_alien_shots
        jsr draw_scores2
        jsr draw_ships_left        
        
        jsr read_joysticks
        lda   #$c8                      ;This is equivalent to jsr dptoC8
        tfr   a,dp                      ;But inlined
        
        jsr update_ship
        jsr move_everything
        jsr update_ashots
        jsr update_shots
        jsr check_ship_death
        
        bra end_level_pause
e_end_level:        
        rts

snd_check:
        lda bonus_snd_flag
        beq no_bonus_snd 
        clr bounce_snd_flag
        clr alien_snd_flag
        clr exp_snd_flag
        clr exp_snd_flag2
        clr shot_snd_flag
        clr woo_snd_flag
        clr tht_snd_flag
        clr tht2_snd_flag
        dec bonus_snd_flag
        bne do_bonus_snd
        ldb $c807
        orb #$01    ;Turn on bit 1 - No pulse on Voice 1
        lda #$07
        jsr byte2sndchip
        bra no_bonus_snd

do_bonus_snd:
        ldx #bonus_freq
        lda bonus_snd_flag
        ldb a,x
        lda #$00
        jsr byte2sndchip
        ldb #$00                    
        lda #$01
        jsr byte2sndchip
        ldx #bonus_ADSR
        lda bonus_snd_flag
        ldb a,x
        ldb #15
        lda #$08
        jsr byte2sndchip
        ldb $c807
        andb #$FE    ;Turn off bit 0 - Pulse on Voice 1
        lda #$07
        jsr byte2sndchip
no_bonus_snd:
        
        lda shot_snd_flag
        beq no_shot
        
        clr bounce_snd_flag
        dec shot_snd_flag
        bne do_shot_snd
        ldb $c807
        orb #$01    ;Turn on bit 1 - No pulse on Voice 1
        lda #$07
        jsr byte2sndchip
        bra no_shot

do_shot_snd:
        ldx #shot_freq
        lda shot_snd_flag
        ldb a,x
        lda #$00
        jsr byte2sndchip
        ldb #$00                    
        lda #$01
        jsr byte2sndchip
        ldx #shot_ADSR
        lda shot_snd_flag
        ldb a,x
        lda #$08
        jsr byte2sndchip
        ldb $c807
        andb #$FE    ;Turn off bit 0 - Pulse on Voice 1
        lda #$07
        jsr byte2sndchip
no_shot:
        
        lda exp_snd_flag2
        beq no_expl2

        clr exp_snd_flag
        dec exp_snd_flag2
        bne do_exp_snd2
        ldb $c807
        orb #16    ;Turn on bit 5 - No noise on Voice 2
        lda #$07
        jsr byte2sndchip
        bra no_expl2

do_exp_snd2:
        ldb #$12                    
        lda #$06
        jsr byte2sndchip
        ldx #explosion2_ADSR
        lda exp_snd_flag2
        ldb a,x
        lda #$09
        jsr byte2sndchip
        ldb $c807
        andb #239    ;Turn off bit 5 - Noise on Voice 2
        lda #$07
        jsr byte2sndchip
        jmp skip_thrust
no_expl2:
        
        lda exp_snd_flag
        beq no_expl

        dec exp_snd_flag
        bne do_exp_snd
        ldb $c807
        orb #16    ;Turn on bit 5 - No noise on Voice 2
        lda #$07
        jsr byte2sndchip
        bra no_expl

do_exp_snd:
        ldb #$1f
        lda #$06
        jsr byte2sndchip
        ldx #explosion_ADSR
        lda exp_snd_flag
        ldb a,x
        lda #$09
        jsr byte2sndchip
        ldb $c807
        andb #239    ;Turn off bit 5 - Noise on Voice 2
        lda #$07
        jsr byte2sndchip
        jmp skip_thrust
no_expl:
        
        lda tht_snd_flag
        bne do_thrust_snd
        lda tht2_snd_flag
        bne do_thrust_snd
        ldb $c807
        orb #16    ;Turn on bit 3 - No Noise on Voice 2
        lda #$07
        jsr byte2sndchip
        bra end_thrust_snd
do_thrust_snd:
        ldb #$12                    
        lda #$06
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        stb tmp
        ldb tht2_snd_flag
        lsrb
        addb tmp
        cmpb #16
        blo not_too_loud
        ldb #15
not_too_loud:
        lda #$09
        jsr byte2sndchip
        ldb $c807
        andb #239   ;Turn off bit 3 - Noise on Voice 1
        lda #$07
        jsr byte2sndchip
end_thrust_snd:        

skip_thrust:

        lda bounce_snd_flag
        beq no_bounce
        
        dec bounce_snd_flag
        bne do_bounce_snd
        ldb $c807
        orb #$01    ;Turn on bit 1 - No pulse on Voice 1
        lda #$07
        jsr byte2sndchip
        bra no_bounce

do_bounce_snd:
        ldb #$ff                    
        lda #$00
        jsr byte2sndchip
        ldb #$04                    
        lda #$01
        jsr byte2sndchip
        ldx #bounce_ADSR
        lda bounce_snd_flag
        ldb a,x
        lda #8
        jsr byte2sndchip
        ldb $c807
        andb #254    ;Turn off bit 0 - Pulse on Voice 2
        lda #$07
        jsr byte2sndchip
no_bounce:
        
        lda woo_snd_flag
        beq no_woo
        
        dec woo_snd_flag
        bne do_woo_snd

        ldb $c807
        orb #$04    ;Turn on bit 1 - No pulse on Voice 3
        lda #$07
        jsr byte2sndchip
        bra no_woo

do_woo_snd:
        ldb #$ff
        lda #$04
        jsr byte2sndchip
        ldb #$00
        lda #$05
        jsr byte2sndchip
        
        ldx #woo_ADSR
        lda woo_snd_flag
        ldb a,x
        lda #10
        jsr byte2sndchip
        ldb $c807
        andb #251    ;Turn off bit 0 - Pulse on Voice 2
        lda #$07
        jsr byte2sndchip
        jmp skip_thud
no_woo:
         dec thud_flag
         bne do_thud
         lda thud_count
         sta thud_flag
         lda thud_vol
         bne not_0_vol
         lda #15
         sta thud_vol
         bra do_thud
not_0_vol:
         clr thud_vol
do_thud:
        ldb #$ff
        lda #$04
        jsr byte2sndchip
        ldb #$0f
        lda #$05
        jsr byte2sndchip
        ldb thud_vol
        lda #10
        jsr byte2sndchip
        ldb $c807
        andb #251    ;Turn off bit 0 - Pulse on Voice 2
        lda #$07
        jsr byte2sndchip
skip_thud:
        rts

explosion_ADSR: fcb 0,1,4,8,12,12,15,15,8,1
explosion2_ADSR: fcb 0,1,4,8,12,12,12,12,12,12,15,15,15,15,15,15,15,15,8,1
bounce_ADSR: fcb 0,1,3,5,7,9,13,15,15,13,9,7,5,3,1
shot_ADSR: fcb 0,1,6,11,15,15,15,15,15
woo_ADSR:  fcb 0,7,15,15,15,15,11,11,11,11,15,15,15,7,0
shot_freq: fcb 0,#$ef,#$df,#$cf,#$df,#$ef,#$df,#$cf,#$df

bonus_ADSR: fcb 0,2,2,4,4,8,8,15,15,15,15,15,15,15,15,8,8,4,4,2
            fcb 2,4,4,8,8,15,15,15,15,15,15,15,15,8,8,4,4,2,2
bonus_freq: fcb 0,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff,#$ff
            fcb #$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef,#$ef

new_level_pause:

        jsr   waitrecal                 ;Reset the CRT
        jsr play_voice1
        jsr play_voice2
        
        ldd #$1010
        std wall_status1
        std wall_status3
        std wall_status5
        std wall_status7
        std wall_status9
        std wall_status11
        std wall_status13
        std wall_status15

        jsr intensity_to_7f
        jsr [inner]
        jsr [outer]
        
        lda #$40
        jsr intensity_to_A
        jsr draw_mines
        jsr intensity_to_7f
        jsr draw_ships
        jsr draw_level
        jsr draw_scores2
        jsr draw_ships_left
        
        clra
        jsr read_switches
        clra
        jsr read_switches
        tst $c80f
        bne end_nlpause

        inc tmp
        lda tmp
        cmpa #127
        bne new_level_pause
end_nlpause:        
        rts  

new_level:

        jsr init_sprites
        jsr clear_ashots
        jsr clear_shots

        clr shootp1
        clr shootp2
        clr p1_invince    
        clr p1_invin_count
        clr p2_invince    
        clr p2_invin_count
        
;        ldd #no_snd
;        std old_snd

        lda #$03
        sta type3_counter
        clr alientype1
        clr alientype2
        clr alientype3
        clr alientype4
        clr alientype5
        clr alientype6
        clr alientype7
        clr alientype8
        clr alientype9
        clr alientype10
        clr alientype11
        clr alientype12
        clr wall_status1
        clr wall_status2
        clr wall_status3
        clr wall_status4
        clr wall_status5
        clr wall_status6
        clr wall_status7
        clr wall_status8
        clr wall_status9
        clr wall_status10
        clr wall_status11
        clr wall_status12
        clr wall_status13
        clr wall_status14
        clr wall_status15
        clr wall_status16
        clr bounce_flag
        clr bounce_snd_flag
        clr alien_snd_flag
        clr exp_snd_flag
        clr exp_snd_flag2
        clr shot_snd_flag
        clr woo_snd_flag
        clr tht_snd_flag
        clr tht2_snd_flag
        clr bonus_snd_flag

        ldx #sprite_1
        lda #$04
        sta state,x
        lda #$00
        sta rotation,x
        sta deltax,x
        sta deltay,x

        lda players
        beq skip_p2

        ldx #sprite_2
        lda #$04
        sta state,x
        lda #$00
        sta rotation,x
        sta deltax,x
        sta deltay,x

skip_p2:        
        lda level
        sta tmp
        cmpa #16
        bls not_lvl18
redo_rnd:        
        jsr random
        anda #31
        cmpa #16
        bgt redo_rnd
        sta tmp
not_lvl18:
        lda tmp
        bne not_layout0
        jsr set_sq_out_wall
        jsr set_oct_sm_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout0:
        cmpa #1
        bne not_layout1
        jsr set_sq_out_wall
        jsr set_sq_in_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout1:
        cmpa #2
        bne not_layout2
        jsr set_sq_out_wall
        jsr set_diam_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout2:
        cmpa #3
        bne not_layout3
        jsr set_oct_out_wall
        jsr set_oct_sm_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout3:
        cmpa #4
        bne not_layout4
        jsr set_oct_out_wall
        jsr set_sq_in_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout4:
        cmpa #5
        bne not_layout5
        jsr set_oct_out_wall
        jsr set_diam_wall
        lda #$20
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout5:
        cmpa #6
        bne not_layout6
        jsr set_d_o_wall
        jsr set_oct_sm_wall
        lda #$10
        sta alien_turn
        lda #60
        sta posx+sprite_2
        lda #60
        sta posy+sprite_2
        lda #-60
        sta posx+sprite_1
        lda #60
        sta posy+sprite_1
        jmp done_layout
not_layout6:
        cmpa #7
        bne not_layout7
        jsr set_d_o_wall
        jsr set_sq_in_wall
        lda #$10
        sta alien_turn
        lda #60
        sta posx+sprite_2
        lda #60
        sta posy+sprite_2
        lda #-60
        sta posx+sprite_1
        lda #60
        sta posy+sprite_1
        jmp done_layout
not_layout7:
        cmpa #8
        bne not_layout8
        jsr set_d_o_wall
        jsr set_diam_wall
        lda #$10
        sta alien_turn
        lda #60
        sta posx+sprite_2
        lda #60
        sta posy+sprite_2
        lda #-60
        sta posx+sprite_1
        lda #60
        sta posy+sprite_1
        jmp done_layout
not_layout8:
        cmpa #9
        bne not_layout9
        jsr set_sq_out_wall
        jsr set_oct_in_wall
        lda #$40
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout9:
        cmpa #10
        bne not_layout10
        jsr set_sq_out_wall
        jsr set_sq_lg_wall
        lda #$40
        sta alien_turn
        lda #68
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-68
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout10:
        cmpa #11
        bne not_layout11
        jsr set_sq_out_wall
        jsr set_lg_d_wall
        lda #$0
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout11:
        cmpa #12
        bne not_layout12
        jsr set_oct_out_wall
        jsr set_oct_in_wall
        lda #$40
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout12:
        cmpa #13
        bne not_layout13
        jsr set_oct_out_wall
        jsr set_sq_lg_wall
        lda #$40
        sta alien_turn
        lda #68
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-68
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        jmp done_layout
not_layout13:
        cmpa #14
        bne not_layout14
        jsr set_oct_out_wall
        jsr set_lg_d_wall
        lda #$0
        sta alien_turn
        lda #64
        sta posx+sprite_2
        lda #64
        sta posy+sprite_2
        lda #-64
        sta posx+sprite_1
        lda #64
        sta posy+sprite_1
        bra done_layout
not_layout14:
        cmpa #15
        bne not_layout15
        jsr set_d_o_wall
        jsr set_oct_in_wall
        lda #$0
        sta alien_turn
        lda #60
        sta posx+sprite_2
        lda #60
        sta posy+sprite_2
        lda #-60
        sta posx+sprite_1
        lda #60
        sta posy+sprite_1
        bra done_layout
not_layout15:
        jsr set_d_o_wall
        jsr set_lg_d_wall
        lda #$0
        sta alien_turn
        lda #60
        sta posx+sprite_2
        lda #60
        sta posy+sprite_2
        lda #-60
        sta posx+sprite_1
        lda #60
        sta posy+sprite_1

done_layout:

        lda level
        bne not_lvl0
        
        dec alientype1
        lda #$01
        sta mine_chance
        lda #$06
        sta no_aliens
        sta remain_aliens
        ldd #0000
        std salien_posv
        ldd #0000
        std salien_negv
        ldd #64
        std falien_posv
        ldd #-64
        std falien_negv
        ldy #enemy_start
        jsr setup_enemy
        lda #40
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl0:
        cmpa #1
        bne not_lvl1
        
        dec alientype1
        lda #$02
        sta mine_chance
        lda #$06
        sta no_aliens
        sta remain_aliens
        ldd #-32
        std salien_posv
        ldd #32
        std salien_negv
        ldd #-64
        std falien_posv
        ldd #64
        std falien_negv
        ldy #enemy_start2
        jsr setup_enemy
        lda #40
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl1:
        cmpa #2
        bne not_lvl2
        
        dec alientype1
        lda #$03
        sta mine_chance
        lda #$07
        sta no_aliens
        sta remain_aliens
        ldd #32
        std salien_posv
        ldd #-32
        std salien_negv
        ldd #96
        std falien_posv
        ldd #-96
        std falien_negv
        ldy #enemy_start3
        jsr setup_enemy
        lda #30
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl2:
        cmpa #3
        bne not_lvl3
        
        dec alientype1
        dec alientype2
        lda #$04
        sta mine_chance
        lda #$07
        sta no_aliens
        sta remain_aliens
        ldd #-32
        std salien_posv
        ldd #32
        std salien_negv
        ldd #-128
        std falien_posv
        ldd #128
        std falien_negv
        ldy #enemy_start4
        jsr setup_enemy
        lda #20
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl3:
        cmpa #4
        bne not_lvl4
        
        dec alientype1
        dec alientype2
        lda #$05
        sta mine_chance
        lda #$08
        sta no_aliens
        sta remain_aliens
        ldd #64
        std salien_posv
        ldd #-64
        std salien_negv
        ldd #128
        std falien_posv
        ldd #-128
        std falien_negv
        ldy #enemy_start5
        jsr setup_enemy
        lda #20
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl4:
        cmpa #5
        bne not_lvl5
        
        dec alientype1
        dec alientype2
        lda #$06
        sta mine_chance
        lda #$08
        sta no_aliens
        sta remain_aliens
        ldd #-64
        std salien_posv
        ldd #64
        std salien_negv
        ldd #-160
        std falien_posv
        ldd #160
        std falien_negv
        ldy #enemy_start6
        jsr setup_enemy
        lda #10
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl5:
        cmpa #6
        bne not_lvl6
        
        dec alientype1
        dec alientype2
        lda #$07
        sta mine_chance
        lda #$09
        sta no_aliens
        sta remain_aliens
        ldd #64
        std salien_posv
        ldd #-64
        std salien_negv
        ldd #192
        std falien_posv
        ldd #-192
        std falien_negv
        ldy #en_st_diag1
        jsr setup_enemy
        lda #10
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl6:
        cmpa #7
        bne not_lvl7
        
        dec alientype1
        dec alientype2
        lda #$08
        sta mine_chance
        lda #$09
        sta no_aliens
        sta remain_aliens
        ldd #-96
        std salien_posv
        ldd #96
        std salien_negv
        ldd #-192
        std falien_posv
        ldd #192
        std falien_negv
        ldy #en_st_diag2
        jsr setup_enemy
        lda #10
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl7:
        cmpa #8
        bne not_lvl8
        
        dec alientype1
        dec alientype2
        lda #$09
        sta mine_chance
        lda #10
        sta no_aliens
        sta remain_aliens
        ldd #96
        std salien_posv
        ldd #-96
        std salien_negv
        ldd #224
        std falien_posv
        ldd #-224
        std falien_negv
        ldy #en_st_diag1
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl8:
        cmpa #9
        bne not_lvl9
        
        dec alientype1
        dec alientype2
        lda #10
        sta mine_chance
        lda #10
        sta no_aliens
        sta remain_aliens
        ldd #-96
        std salien_posv
        ldd #96
        std salien_negv
        ldd #-256
        std falien_posv
        ldd #256
        std falien_negv
        ldy #enemy_start10
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl9:
        cmpa #10
        bne not_lvl10
        
        dec alientype1
        dec alientype2
        lda #11
        sta mine_chance
        lda #11
        sta no_aliens
        sta remain_aliens
        ldd #128
        std salien_posv
        ldd #-128
        std salien_negv
        ldd #256
        std falien_posv
        ldd #-256
        std falien_negv
        ldy #enemy_start11
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl10:
        cmpa #11
        bne not_lvl11
        
        dec alientype1
        dec alientype2
        lda #12
        sta mine_chance
        lda #11
        sta no_aliens
        sta remain_aliens
        ldd #-128
        std salien_posv
        ldd #128
        std salien_negv
        ldd #-256
        std falien_posv
        ldd #256
        std falien_negv
        ldy #en_st_diag4
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl11:
        cmpa #12
        bne not_lvl12
        
        dec alientype1
        dec alientype2
        lda #13
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd #128
        std salien_posv
        ldd #-128
        std salien_negv
        ldd #256
        std falien_posv
        ldd #-256
        std falien_negv
        ldy #enemy_start13
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl12:
        cmpa #13
        bne not_lvl13
        
        dec alientype1
        dec alientype2
        lda #14
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd #-128
        std salien_posv
        ldd #128
        std salien_negv
        ldd #-256
        std falien_posv
        ldd #256
        std falien_negv
        ldy #enemy_start14
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl13:
        cmpa #14
        bne not_lvl14
        
        dec alientype1
        dec alientype2
        lda #15
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd #128
        std salien_posv
        ldd #-128
        std salien_negv
        ldd #256
        std falien_posv
        ldd #-256
        std falien_negv
        ldy #en_st_diag3
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl14:
        cmpa #15
        bne not_lvl15
        
        dec alientype1
        dec alientype2
        lda #16
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd #-128
        std salien_posv
        ldd #128
        std salien_negv
        ldd #-256
        std falien_posv
        ldd #256
        std falien_negv
        ldy #en_st_diag4
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl15:
        cmpa #16
        bne not_lvl16
        
        dec alientype1
        dec alientype2
        lda #17
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd #128
        std salien_posv
        ldd #-128
        std salien_negv
        ldd #256
        std falien_posv
        ldd #-256
        std falien_negv
        ldy #en_st_diag3
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
        jmp done_lvl
not_lvl16:
       
        dec alientype1
        dec alientype2
        lda #$05
        sta mine_chance
        lda #12
        sta no_aliens
        sta remain_aliens
        ldd salien_posv
        coma
        comb
        addd #$0001
        std salien_posv
        ldd salien_negv
        coma
        comb
        addd #$0001
        std salien_negv
        ldd falien_posv
        coma
        comb
        addd #$0001
        std falien_posv
        ldd falien_negv
        coma
        comb
        addd #$0001
        std falien_negv

        ldy #enemy_start14
        jsr setup_enemy
        ldd falien_posv
        bmi not_reverse1
        ldy #enemy_start13
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
not_reverse1:
        
        lda tmp
        cmpa #6
        beq diag_type1
        cmpa #7
        beq diag_type1
        cmpa #8
        beq diag_type1
        cmpa #11
        beq diag_type2
        cmpa #14
        beq diag_type2
        cmpa #15
        beq diag_type2
        cmpa #16
        beq diag_type2
        bra done_lvl
diag_type1:        
        ldy #en_st_diag2
        jsr setup_enemy
        ldd falien_posv
        bmi not_reverse2
        ldy #en_st_diag1
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
not_reverse2:
        bra done_lvl
diag_type2:        
        ldy #en_st_diag4
        jsr setup_enemy
        ldd falien_posv
        bmi not_reverse3
        ldy #en_st_diag3
        jsr setup_enemy
        lda #5
        sta thud_count
        sta thud_flag
not_reverse3:
        bra done_lvl

done_lvl:




        lda #-127
        sta tmp

        jsr setup_fade_mus
        jsr new_level_pause
        jsr clear_sound

        lda   #$d0                      ;This is equivalent to jsr dptoD0
        tfr   a,dp                      ;But inlined
        rts


start_game:
        jsr init_sprites
        jsr clear_ashots
        jsr clear_shots

        clr shootp1
        clr shootp2
        clr p1_invince    
        clr p1_invin_count
        clr p2_invince    
        clr p2_invin_count
        jsr  setup_intro_mus
        lda  #40
        sta shootp1

intro:        
        lda   #$c8                      ;This is equivalent to jsr dptoc8
        tfr   a,dp                      ;But inlined
        
no_restart_mus:
        
        jsr   waitrecal                 ;Reset the CRT
        
        jsr play_voice1
        jsr play_voice2
        jsr play_voice3

        jsr intensity_to_7f
        jsr random
        lda #$30
        sta tmp
        
        jsr draw_omegrce

        lda #47
        ldb #110
        jsr draw_big_a
        lda #-7
        ldb #$00
        jsr draw_big_a
       
        lda players
        bne draw_2pl
        jsr draw_1_player
        bra not_draw_2pl
draw_2pl:
        jsr draw_2_players
not_draw_2pl:        

        jsr read_joysticks

        lda sprites_left+1
        beq check_joy_pl
        dec sprites_left
        bne no_joy_update
check_joy_pl:        
        lda #$10
        sta sprites_left
        lda #$01
        sta sprites_left+1
        
        lda $c81b
        beq no_pl_update1
        lda players
        eora #$01
        sta players
        bra pl_update_done
no_pl_update1:
        lda $c81c
        beq pl_update_done
        lda players
        eora #$01
        sta players
no_joy_update:
pl_update_done:        
        lda $c81b
        bne dont_clear_flag
        lda $c81c
        bne dont_clear_flag
        clr sprites_left+1
dont_clear_flag:
        
        lda shootp1
        beq ch_intro
        dec shootp1
        jmp intro

ch_intro:

        clra
        jsr read_switches
        clra
        jsr read_switches
        tst $c80f
        bne end_intro

       jmp intro
end_intro:        
        
        clr restart_count

        lda #$03
        sta ships_left_1
        sta ships_left_2
        clr p1_dead
        clr p2_dead
        
        jsr init_sprites

        lda #MAX_MINES
        sta sprites_left
        ldy #mine_data_1
reset_mines:
        clr 0,y
        leay 3,y
        dec sprites_left
        bmi end_reset_mines
        bra reset_mines
end_reset_mines:

        lda #$10
        sta sprites_left
        clr sprites_left+1
        
        lda   #$d0                      ;This is equivalent to jsr dptod0
        tfr   a,dp                      ;But inlined
        jsr clear_sound
        
        lda #$7f
        sta tmp3
        
        ldb #$10
        lda #$06
        jsr byte2sndchip
        ldb #$07
        lda #$07
        jsr byte2sndchip
        ldb #$00
        lda #$08
        jsr byte2sndchip
        ldb #$00
        lda #$09
        jsr byte2sndchip
        ldb #$00
        lda #$0a
        jsr byte2sndchip
        clr tht_snd_flag

omeg_fade:        
        lda   #$c8                      ;This is equivalent to jsr dptoc8
        tfr   a,dp                      ;But inlined
        jsr   waitrecal                 ;Reset the CRT
        inc tht_snd_flag
        ldb tht_snd_flag
        cmpb #241
        bne nl1
        ldb #240
        stb tht_snd_flag
nl1:        
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$08
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$09
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$0a
        jsr byte2sndchip

        lda tmp3
        jsr intensity_to_A


        lda #$30
        sta tmp
        jsr draw_omegrce
        
        lda players
        bne draw_2pl_2
        jsr draw_1_player
        bra not_draw_2pl_2
draw_2pl_2:
        jsr draw_2_players
not_draw_2pl_2:
        
        
        lda players
        bne not_fade
        
        lda #47
        ldb #110
        jsr draw_big_a
not_fade:        
        jsr intensity_to_7f
        lda #-7
        ldb #$00
        jsr draw_big_a
        
        lda players
        beq not_fade2
        
        lda #47
        ldb #110
        jsr draw_big_a
not_fade2:
        dec tmp3
        bne omeg_fade
        

        lda #$30
        sta tmp3
        lda #$00
        sta tmp3+1
        
        
ship_anim:
        jsr waitrecal                 ;Reset the CRT
        inc tht_snd_flag
        ldb tht_snd_flag
        cmpb #241
        bne nl2
        ldb #240
        stb tht_snd_flag
nl2:        
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$08
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$09
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$0a
        jsr byte2sndchip
        
        lda tmp3
        sta tmp
        
        jsr intensity_to_7f
        lda #-7
        ldb #$00
        jsr draw_big_a
        
        lda players
        beq not_shrink2

        lda #47
        ldb #110
        jsr draw_big_a

not_shrink2:
        lda tmp3+1
        jsr intensity_to_A
        jsr draw_copyright

        inc tmp3+1
        inc tmp3+1

        dec tmp3
        lda tmp3
        cmpa #$07
        bne ship_anim

       lda #$04
       sta state+sprite_1
       lda #-7
       sta posy+sprite_1
       lda #00
       sta posx+sprite_1
       lda #$00
       sta rotation+sprite_1
       ldd #-164
       std deltax+sprite_1
       ldd #179
       std deltay+sprite_1

        
        lda players
        beq ship_anim2
        
        lda #$04
        sta state+sprite_2
        lda #47
        sta posy+sprite_2
        lda #110
        sta posx+sprite_2
        lda #$00
        sta rotation+sprite_2
        ldd #-118
        std deltax+sprite_2
        ldd #41
        std deltay+sprite_2

        lda #2
        sta no_sprites
        clr p1_dead
        clr p2_dead
        clr p1_invince
        clr p2_invince

ship_anim2:
        lda   #$c8                      ;This is equivalent to jsr dptoD0
        tfr   a,dp                      ;But inlined
;       std sprites_left
        jsr   waitrecal                 ;Reset the CRT

        inc tht_snd_flag
        ldb tht_snd_flag
        cmpb #241
        bne nl3
        ldb #240
        stb tht_snd_flag
nl3:
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$08
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$09
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$0a
        jsr byte2sndchip

       
        jsr intensity_to_7f
        jsr draw_ships

        lda tmp3+1
        jsr intensity_to_A
        jsr draw_copyright

        lda   #$c8                      ;This is equivalent to jsr dptoD0
        tfr   a,dp                      ;But inlined
        jsr move_everything

        lda posx+sprite_1
        cmpa #-64
        bne ship_anim2

        lda #63
        sta posy+sprite_1
        lda #-64
        sta posx+sprite_1
        lda #63
        sta posy+sprite_2
        lda #64
        sta posx+sprite_2
        ldd #$0000
        std deltax+sprite_1
        std deltay+sprite_1
        std deltax+sprite_2
        std deltay+sprite_2

ship_anim3:
;        std sprites_left
        jsr   waitrecal                 ;Reset the CRT
        inc tht_snd_flag
        ldb tht_snd_flag
        cmpb #241
        bne nl4
        ldb #240
        stb tht_snd_flag
nl4:
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$08
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$09
        jsr byte2sndchip
        ldb tht_snd_flag
        lsrb
        lsrb
        lsrb
        lsrb
        lda #$0a
        jsr byte2sndchip
        
        jsr intensity_to_7f
        jsr draw_ships

        lda tmp3+1
        jsr intensity_to_A
        jsr draw_copyright

        jsr move_everything

        dec tmp3+1
        lda tmp3+1
        bne ship_anim3

        ldx #score_1
        jsr set_dft_score
        ldx #score_2
        jsr set_dft_score
        ldx #bonus_score_1
        jsr set_dft_score
        ldx #bonus_score_2
        jsr set_dft_score
        
        ldd #$500
        ldx #bonus_score_1
        jsr add_score_d
        ldd #$500
        ldx #bonus_score_2
        jsr add_score_d

        
        lda #$04
        sta no_shots_1
        sta no_shots_2
        ldd #$1000
        std shot_speed_1
        std shot_speed_2
        clr level

        lda #$20
        sta accel
        sta accel_2
        ldd #640
        std pos_max_vel
        std pos_max_vel_2
        ldd #-640
        std neg_max_vel
        std neg_max_vel_2
        ldd #$0005
        std drag
        jsr clear_sound
        rts


check_ship_death:

        lda p1_dead
        beq not_t1_off
        clr tht_snd_flag
not_t1_off:        
        lda p2_dead
        beq not_t2_off
        clr tht2_snd_flag
not_t2_off:

        lda p1_invince
        beq not_p1_invin
        dec p1_invin_count
        bne not_p1_invin
        clr p1_invince
not_p1_invin:
        lda p2_invince
        beq not_p2_invin
        dec p2_invin_count
        bne not_p2_invin
        clr p2_invince
not_p2_invin:
       
        lda p1_dead
        lbne done_sh3_2
        lda p1_invince
        lbne done_sh3_2
        
        ldx #sprite_3
        ldu #alientype1
        lda #12
        sta tmp
upd_aliens:
        lda state,x
        beq done_sh4
        lda posx,x
        suba sprite_1+posx
        cmpa #5
        bgt done_sh4
        cmpa #-5
        blt done_sh4
        lda posy,x
        suba sprite_1+posy
        cmpa #5
        bgt done_sh4
        cmpa #-5
        blt done_sh4

        lda #20
        sta exp_snd_flag2
        ldd #$00
        std sprite_1+deltax
        std sprite_1+deltay
        lda #$1
        sta p1_dead
        jmp done_sh3_2
done_sh4:        
        leau #1,u
        leax #15,x
        dec tmp
        bne upd_aliens

check_ashot_2:
        ldx #ashot_data_1
        lda #MAX_ALIEN_SHOTS
        sta tmp
chk_ashot_hit_2:
        lda 0,x
        beq next_ashot_hit_2
        lda 2,x
        suba sprite_1+posx
        cmpa #5
        bgt next_ashot_hit_2
        cmpa #-5
        blt next_ashot_hit_2
        lda 1,x
        suba sprite_1+posy
        cmpa #5
        bgt next_ashot_hit_2
        cmpa #-5
        blt next_ashot_hit_2
        
        lda #20
        sta exp_snd_flag2
        clr 0,x
        ldd #$00
        std sprite_1+deltax
        std sprite_1+deltay
        lda #$1
        sta p1_dead
        jmp done_sh3_2

next_ashot_hit_2:
         leax 3,x
         dec tmp
         bmi done_ashot_hit_2
         bra chk_ashot_hit_2
done_ashot_hit_2:


check_mines_2:
        ldx #mine_data_1
        lda #MAX_MINES
        sta tmp
check_mine_hit_2:
        lda 0,x
        beq next_mine_hit_2
        lda 2,x
        suba sprite_1+posx
        cmpa #5
        bgt next_mine_hit_2
        cmpa #-5
        blt next_mine_hit_2
        lda 1,x
        suba sprite_1+posy
        cmpa #5
        bgt next_mine_hit_2
        cmpa #-5
        blt next_mine_hit_2
        
        lda #20
        sta exp_snd_flag2
        clr 0,x
        ldd #$00
        std sprite_1+deltax
        std sprite_1+deltay
        lda #$1
        sta p1_dead
        jmp done_sh3_2

next_mine_hit_2:
         leax 3,x
         dec tmp
         bmi done_mine_hit_2
         bra check_mine_hit_2
done_mine_hit_2:


done_sh3_2:
         
        lda players
        lbeq done_sh3_3

        lda p2_dead
        lbne done_sh3_3
        lda p2_invince
        lbne done_sh3_3
         
        ldx #sprite_3
        ldu #alientype1
        lda #12
        sta tmp
upd_aliens_2:
        lda state,x
        beq done_sh5
        lda posx,x
        suba sprite_2+posx
        cmpa #5
        bgt done_sh5
        cmpa #-5
        blt done_sh5
        lda posy,x
        suba sprite_2+posy
        cmpa #5
        bgt done_sh5
        cmpa #-5
        blt done_sh5

        lda #20
        sta exp_snd_flag2
        ldd #$00
        std sprite_2+deltax
        std sprite_2+deltay
        lda #$1
        sta p2_dead
        jmp done_sh3_3
done_sh5:
        leau #1,u
        leax #15,x
        dec tmp
        bne upd_aliens_2



check_ashot_3:
        ldx #ashot_data_1
        lda #MAX_ALIEN_SHOTS
        sta tmp
chk_ashot_hit_3:
        lda 0,x
        beq next_ashot_hit_3
        lda 2,x
        suba sprite_2+posx
        cmpa #5
        bgt next_ashot_hit_3
        cmpa #-5
        blt next_ashot_hit_3
        lda 1,x
        suba sprite_2+posy
        cmpa #5
        bgt next_ashot_hit_3
        cmpa #-5
        blt next_ashot_hit_3
        
        lda #20
        sta exp_snd_flag2
        clr 0,x
        ldd #$00
        std sprite_2+deltax
        std sprite_2+deltay
        lda #$1
        sta p2_dead
        jmp done_sh3_3

next_ashot_hit_3:
         leax 3,x
         dec tmp
         bmi done_ashot_hit_3
         bra chk_ashot_hit_3
done_ashot_hit_3:




check_mines_3:
        ldx #mine_data_1
        lda #MAX_MINES
        sta tmp
check_mine_hit_3:
        lda 0,x
        beq next_mine_hit_3
        lda 2,x
        suba sprite_2+posx
        cmpa #5
        bgt next_mine_hit_3
        cmpa #-5
        blt next_mine_hit_3
        lda 1,x
        suba sprite_2+posy
        cmpa #5
        bgt next_mine_hit_3
        cmpa #-5
        blt next_mine_hit_3
        
        lda #20
        sta exp_snd_flag2
        clr 0,x
        ldd #$00
        std sprite_2+deltax
        std sprite_2+deltay
        lda #$1
        sta p2_dead
        jmp done_sh3_3

next_mine_hit_3:
         leax 3,x
         dec tmp
         bmi done_mine_hit_3
         bra check_mine_hit_3
done_mine_hit_3:


done_sh3_3:
         
         rts


setup_enemy:        
        
        ldx #sprite_3
        lda no_aliens
        sta sprites_left

set_enemy:     
        lda #$04
        sta state,x
        lda #$7f
        sta intensity,x
        lda #$00
        sta rotation,x
        lda #04
        sta scale,x
        lda #$6
        sta no_vectors,x
        ldd #hex_enemy
        std vector_list,x
        ;jsr random
        ;anda #$7f
        ;lsra
        ;lsra
        ;lsra
        ;lsra
        lda #$00
        adda 0,y
        sta posx,x
        ;jsr random
        ;anda #$7f
        ;lsra
        ;lsra
        ;lsra
        ;lsra
        lda #$00
        adda 1,y
        sta posy,x
        ldd #$0000
        std deltax,x
        std deltay,x
        
        leay #2,y
        leax #15,x
        dec sprites_left
        bne set_enemy

        ldy #alientype1
        ldx #sprite_3
        lda  level
        lsra
        lsra
        adda #$08
        sta sprites_left

set_enemy2:        
        lda 0,y
        beq not_type2
        lda #$6
        sta no_vectors,x
        ldd #hex_enemy
        std vector_list,x
not_type2:        
        leay #1,y
        leax #15,x
        dec sprites_left
        bne set_enemy2
         
        rts





;**************
;update_shots
;**************
update_shots:
        ldy #sprite_15
        lda #$08
        sta shot_counter

update_shots2:                
        lda state,y
        lbeq done_sh3

        lda posx,y
        sta tmp2
        lda posy,y
        sta tmp2+1
        jsr check_bounce2
        tst bounce_flag
        beq check_mines
        lda #$00
        sta state,y
        ;lda #$00
        ;sta posx,y
        ;sta posy,y
        jmp done_sh3

check_mines:
        ldx #mine_data_1
        lda #MAX_MINES
        sta tmp
check_mine_hit:
        lda 0,x
        beq next_mine_hit
        lda 2,x
        suba posx,y
        cmpa #5
        bgt next_mine_hit
        cmpa #-5
        blt next_mine_hit
        lda 1,x
        suba posy,y
        cmpa #5
        bgt next_mine_hit
        cmpa #-5
        blt next_mine_hit
        
        lda #$00
        sta 0,x
        sta state,y
        lda #10
        sta exp_snd_flag
        jmp done_sh3

next_mine_hit:
         leax 3,x
         dec tmp
         bmi done_mine_hit
         bra check_mine_hit
done_mine_hit:


done_sh1:
        ldx #sprite_3
        ldu #alientype1
        lda #12
        sta tmp
update_shots3:
        tst state,x
        lbeq done_sh2
        tst state,y
        lbeq done_sh2
        lda posx,x
        suba posx,y
        cmpa #5
        lbgt done_sh2
        cmpa #-5
        lblt done_sh2
        lda posy,x
        suba posy,y
        cmpa #5
        lbgt done_sh2
        cmpa #-5
        lblt done_sh2

        lda #$00
        sta state,x
        sta state,y
        
        lda #5                  ;Add 10 to Score
        ldb 0,u
        beq not_fast

        lda #12                  ;Upgrade an Alien
        stx tmp2
        sty tmp3
        ldx #alientype1
        ldy #sprite_3

next_upgrade:
         ldb 0,x
         bne not_upgrade
         ldb state,y
         beq not_upgrade
         dec 0,x
         lda #$6
         sta no_vectors,y
         ldd #hex_enemy
         std vector_list,y
         bra done_upgrade
not_upgrade:
         leax #1,x
         leay #15,y
         deca
         bne next_upgrade
done_upgrade:        
        ldx tmp2
        ldy tmp3
        lda #25                  ;Add 50 to Score

        ldb 0,u
        cmpb #$08
        bne not_fast
        lda #50

not_fast:        
        ;dec 0,u                  ;Mark Alien Type as non-zero
        ldb shot_counter
        cmpb #$05 
        blt add_score2 
        ldx #score_1
        jsr covert_add_bcd
        ldx #score_1
        ldu #bonus_score_1
        jsr compare_scores
        cmpa #$02
        beq done_score
        ldd #$500
        ldx #bonus_score_1
        jsr add_score_d
        inc ships_left_1
        lda #40
        sta bonus_snd_flag
        bra done_score
add_score2:
        ldx #score_2
        jsr covert_add_bcd
        ldx #score_2
        ldu #bonus_score_2
        jsr compare_scores
        cmpa #$02
        beq done_score
        ldd #$500
        ldx #bonus_score_2
        jsr add_score_d
        inc ships_left_2
        lda #40
        sta bonus_snd_flag
done_score:
        lda #10
        sta exp_snd_flag
        dec remain_aliens
        bra done_sh3

done_sh2:
        leau #1,u
        leax #15,x
        dec tmp
        lbne update_shots3

done_sh3:
        leay #15,y
        dec shot_counter
        lbne update_shots2
        rts


;**************
;update_alien_v
;Updates alien velocity (deltax and deltay) based upon position on screen.
;**************
;update_alien_v:
        
;        ldx #alientype1
;        ldy #sprite_3               ;First sprite to update
;        lda no_aliens                ;sprite_left is the counter
;        sta sprites_left             ;Create loop variable
        
;alien_v_loop:
;        ldd salien_posv
;        std posv
;        ldd salien_negv
;        std negv
;
;        lda 0,x
;        beq not_flash
;        
;        ldd falien_posv
;        std posv
;        ldd falien_negv
;        std negv
;
;        lda scale,y
;        cmpa #8
;        bne flash1
;
;        lda #6
;        sta scale,y
;        bra flash2
;flash1:
;        lda #8
;        sta scale,y
;flash2:
;
;not_flash:
;        ldd posx,y                   ;Get sprite's posx
;        bmi left_half                ;If negative, it's in left half of screen
;right_half:
;        ldd posy,y                   ;Get sprite's posy
;        bmi lr_quadrant              ;If negative, it's in lower right corner
;ur_quadrant:                         ;Sprite is in upper right corner
;        cmpd posx,y                  ;Compare posx and posy
;        bgt ur_2
;ur_1:                                ;Sprite is in right half of ur corner
;        ldd posv              
;        std deltay,y                 ;Set deltay to positive velocity
;        ldd #$00
;        std deltax,y                 ;Set deltax to 0
;        bra next_alien
;ur_2:                                ;Sprite us in left half of ur corner
;        ldd #$00                     
;        std deltay,y                 ;Set deltay to 0
;        ldd negv              
;        std deltax,y                 ;Set deltax to negative velocity
;        bra next_alien
;        
;lr_quadrant:                         ;Sprite is in lower right corner
;        jsr get_abs_val_ab           ;Get absolute value of posy
;        cmpa posx,y                  ;Compare with posx
;        bgt lr_2
;lr_1:                                ;Sprite is in right half of lr corner
;        ldd posv
;        std deltay,y                 ;Set deltay to positive velocity
;        ldd #$00
;        std deltax,y                 ;Set deltax to 0
;        bra next_alien
;lr_2:                                ;Sprite is in left half of lr corner
;        ldd #$00
;        std deltay,y                 ;Set deltay to 0
;        ldd posv
;        std deltax,y                 ;Set deltax to positive velocity
;        bra next_alien
;
;left_half:                           ;Sprite is in left half of screen
;        ldd posy,y                   ;Get posy
;        bmi ll_quadrant              ;If posy is negative Sprite is in lower left corner
;ul_quadrant:                         ;Sprite is in upper left corner
;        ldd posx,y                   ;Get posx
;        jsr get_abs_val_ab           ;Get absolute value of posx
;        cmpa posy,y                  ;Compare to posy
;        bgt ul_2
;ul_1:                                ;Sprite is in right half of ul corner
;        ldd #$00
;        std deltay,y                 ;Set deltay to 0
;        ldd negv
;        std deltax,y                 ;Set deltax to negative velocity
;        bra next_alien
;ul_2:                                ;Sprite is in left half of ul corner
;        ldd negv
;        std deltay,y                 ;Set deltay to negative velocity
;        ldd #$00
;        std deltax,y                 ;Set deltax to 0
;        bra next_alien
;ll_quadrant:                         ;Sprite is in lower left corner
;        cmpd posx,y
;        bgt ll_2
;ll_1:                                ;Sprite is in right half of ll corner
;        ldd #$00
;        std deltay,y                 ;Set deltay to 0
;        ldd posv
;        std deltax,y                 ;Set delta x to positive velocity
;        bra next_alien
;ll_2:                                ;Sprite is in left half of ll corner
;        ldd negv
;        std deltay,y                 ;Set deltay to negative velocity
;        ldd #$00
;        std deltax,y                 ;Set deltax to 0
;        bra next_alien
;
;next_alien:
;        leay 15,y                    ;Get next Sprite structure
;        leax 1,x
;        dec sprites_left             ;Are we done?
;        beq end_alien                ;Yes, go to end
;        jmp alien_v_loop             ;No, loop back
;end_alien:
;        rts

get_new_dir:
         
         ;jsr random
         ;anda #$03
         ;tsta
         ;beq get_random_dir
         ldu #sprite_1
         lda players
         beq not_2pl
         jsr random
         anda #$01
         tsta
         bne not_2pl
         ldu #sprite_2
not_2pl:
         ldd posx,u
         cmpd posx,y
         bgt player_higher
         ldd falien_negv
         bmi ok_3
         ldd falien_posv
ok_3:         
         std deltax,y
         bra do_y_move
player_higher:
         ldd falien_posv
         bpl ok_4
         ldd falien_negv
ok_4:         
         std deltax,y
do_y_move:

         ldd posy,u
         cmpd posy,y
         bgt player_right
         ldd falien_negv
         bmi ok_1
         ldd falien_posv
ok_1:         
         std deltay,y
         rts
player_right:
         ldd falien_posv
         bpl ok_2
         ldd falien_negv
ok_2:
         std deltay,y
         rts
         

get_random_dir:         
         jsr random
         anda #$07
new_direction:         
         cmpa #$07
         bne a3not_up
         ldd falien_posv
         std deltay,y
         addd deltay,y
         std deltay,y
         ldd #$00
         std deltax,y
         rts
a3not_up:
         cmpa #$06
         bne a3not_up_right
         ldd falien_posv
         std deltay,y
         ldd falien_posv
         std deltax,y
         rts

a3not_up_right:
         cmpa #$05
         bne a3not_right
         ldd falien_posv
         std deltax,y
         addd deltax,y
         std deltax,y
         ldd #$00
         std deltay,y
         rts

a3not_right:
         cmpa #$04
         bne a3not_down_right
         ldd falien_negv
         std deltay,y
         ldd falien_posv
         std deltax,y
         rts

a3not_down_right:
         cmpa #$03
         bne a3not_down
         ldd falien_negv
         std deltay,y
         addd deltay,y
         std deltay,y
         ldd #$00
         std deltax,y
         rts

a3not_down:
         cmpa #$02
         bne a3not_down_left
         ldd falien_negv
         std deltay,y
         ldd falien_negv
         std deltax,y
         rts

a3not_down_left:
         cmpa #$01
         bne a3not_left
         ldd falien_negv
         std deltax,y
         addd deltax,y
         std deltax,y
         ldd #$00
         std deltay,y
         rts

a3not_left:
         ldd falien_posv
         std deltay,y
         ldd falien_negv
         std deltax,y
         rts

new_alien_type3:
         jsr get_new_dir
         lda #4
         sta scale,y
         lda #06
         sta no_vectors,y
         ldd #n_new_enemy3a
         std vector_list,y
         dec 0,x
         jmp next_alien

is_alien_type3:
         lda woo_snd_flag
         bne woo_ok
         lda #15
         sta woo_snd_flag
woo_ok:
         jsr check_bounce
         tst bounce_flag
         bne done_alien3
         jsr random
         anda #$31
         tsta
         bne done_alien3
         jsr get_new_dir
done_alien3:         
         jmp next_alien


;**************
;update_alien_2
;Updates alien velocity (deltax and deltay) based upon position on screen.
;**************
update_alien_2:
        

        dec type3_counter
        bne not_type3_res
        lda #$03
        sta type3_counter
not_type3_res:
        
        ldx #alientype1
        ldy #sprite_3               ;First sprite to update
        lda no_aliens                ;sprite_left is the counter
        sta sprites_left             ;Create loop variable

alien_v_loop:
        lda state,y
        lbeq next_alien
        
        ldd salien_posv
        std posv
        ldd salien_negv
        std negv

        lda 0,x
        beq not_flash
        
        cmpa #$09
        beq new_alien_type3
        cmpa #$08
        beq is_alien_type3

        lda type3_counter
        cmpa #$03
        bne not_type3_update
        dec 0,x
not_type3_update:

        ldd falien_posv
        std posv
        ldd falien_negv
        std negv

        lda scale,y
        cmpa #4
        bne flash1

        lda #2
        sta scale,y
        bra flash2
flash1:
        lda #4
        sta scale,y
flash2:

not_flash:
        ldd posx,y                   ;Get sprite's posx
        bmi left_half                ;If negative, it's in left half of screen
right_half:
        ldd posy,y                   ;Get sprite's posy
        bmi lr_quadrant              ;If negative, it's in lower right corner
ur_quadrant:                         ;Sprite is in upper right corner
        lda posx,y
        cmpa alien_turn
        bgt ur2
        ldd #$00                     
        std deltay,y                 ;Set deltay to 0
        ldd negv              
        std deltax,y                 ;Set deltax to negative velocity
        addd deltax,y
        std deltax,y
        jmp next_alien
ur2:        
        lda posy,y
        cmpa alien_turn
        bgt ur3
        ldd posv                     
        std deltay,y                 ;Set deltay to 0
        addd deltay,y
        std deltay,y
        ldd #$00              
        std deltax,y                 ;Set deltax to negative velocity
        jmp next_alien
ur3:
        ldd posv                     
        std deltay,y                 ;Set deltay to 0
        ldd negv              
        std deltax,y                 ;Set deltax to negative velocity
        jmp next_alien

lr_quadrant:                         ;Sprite is in lower right corner
        jsr get_abs_val_ab           ;Get absolute value of posy
        cmpa alien_turn
        bgt lr1
        ldd posv
        std deltay,y                 ;Set deltay to 0
        addd deltay,y
        std deltay,y
        ldd #$00
        std deltax,y                 ;Set deltax to positive velocity
        jmp next_alien
lr1:
        lda posx,y
        cmpa alien_turn
        bgt lr2
        ldd #$00
        std deltay,y                 ;Set deltay to 0
        ldd posv
        std deltax,y                 ;Set deltax to positive velocity
        addd deltax,y
        std deltax,y
        jmp next_alien
lr2:
        ldd posv
        std deltay,y                 ;Set deltay to 0
        ldd posv
        std deltax,y                 ;Set deltax to positive velocity
        jmp next_alien

left_half:                           ;Sprite is in left half of screen
        ldd posy,y                   ;Get posy
        bmi ll_quadrant              ;If posy is negative Sprite is in lower left corner
ul_quadrant:                         ;Sprite is in upper left corner
        ldd posy,y                   ;Get posx
        jsr get_abs_val_ab           ;Get absolute value of posx
        cmpa alien_turn
        bgt ul1
        ldd negv
        std deltay,y                 ;Set deltay to negative velocity
        addd deltay,y
        std deltay,y
        ldd #$00
        std deltax,y                 ;Set deltax to 0
        bra next_alien
ul1:
        ldd posx,y                   ;Get posx
        jsr get_abs_val_ab           ;Get absolute value of posx
        cmpa alien_turn
        bgt ul2
        ldd #$00
        std deltay,y                 ;Set deltay to negative velocity
        ldd negv
        std deltax,y                 ;Set deltax to 0
        addd deltax,y
        std deltax,y
        bra next_alien
ul2:
        ldd negv
        std deltay,y                 ;Set deltay to negative velocity
        ldd negv
        std deltax,y                 ;Set deltax to 0
        bra next_alien

ll_quadrant:                         ;Sprite is in lower left corner
        jsr get_abs_val_ab
        cmpa alien_turn
        bgt ll1
        ldd negv
        std deltay,y                 ;Set deltay to negative velocity
        addd deltay,y
        std deltay,y
        ldd #$00
        std deltax,y                 ;Set deltax to 0
        bra next_alien
ll1:
        lda posx,y                   ;Get posx
        jsr get_abs_val_ab           ;Get absolute value of posx
        cmpa alien_turn
        bgt ll2
        ldd #$00
        std deltay,y                 ;Set deltay to negative velocity
        ldd posv
        std deltax,y                 ;Set deltax to 0
        addd deltax,y
        std deltax,y
        bra next_alien
ll2:
        ldd negv
        std deltay,y                 ;Set deltay to negative velocity
        ldd posv
        std deltax,y                 ;Set deltax to 0
        bra next_alien

next_alien:
        leay 15,y                    ;Get next Sprite structure
        leax 1,x
        dec sprites_left             ;Are we done?
        beq end_alien                ;Yes, go to end
        jmp alien_v_loop             ;No, loop back
end_alien:
        rts


;**************
;read_joysticks
;Simply calls the BIOS read_joystick() routine.
;Results are left is $c81b-$c81e
;As follows $c81b - Joystick 1 Left/Right state
;           $c81c - Joystick 1 Up/Down state
;           $c81d - Joystick 2 Left/Right state
;           $c81e - Joystick 2 Up/Down state
;           $c812 - Joystick 1, button 1
;           $c813 - Joystick 1, button 2
;           $c814 - Joystick 1, button 3
;           $c815 - Joystick 1, button 4
;           $c816 - Joystick 2, button 1
;           $c817 - Joystick 2, button 2
;           $c818 - Joystick 2, button 3
;           $c819 - Joystick 2, button 4
;****************
read_joysticks:        
        ldd #$0100            ;Set-up for joystick poll
        std $c81f
        ldd #$0500   
        std $c821
        lda #$00
        sta $c823
        jsr read_joystick

       clra
       ;lda #136
       jsr read_switches
       rts

;************
;shoot
; At entry, a=# possible shots
;           b=Shot speed
;           y=Player ship structure
;           x=Shots structure
;************

shoot:  sta tmp
        stb tmp+1
shoot2:        
        lda state,x
        bne next_shot
        lda #10
        sta shot_snd_flag
        lda #$01
        sta state,x
        ldd posx,y
        std posx,x
        ldd posy,y
        std posy,x
        ldd #$00
        std deltax,x
        std deltay,x
        lda #$7f
        sta intensity,x
        ldb rotation,y      ;Get rotation
        lda tmp+1           ;Get Shot Speed
        jsr conv_ang_rr     ;Get rise and run based on rotation and Shot Speed
        stb deltax,x
        sta deltay,x
        lda #$00
        sta deltax+1,x
        sta deltay+1,x
        
        clr tmp
        ldd deltax,x
        beq not_neg2
        bgt not_neg1
        dec tmp
        com deltax,x
        ldd deltax,x
not_neg1:
        lsrb
        lsra
        bcc no_carry1
        addb #$80
no_carry1:
        lsrb
        lsra
        bcc no_carry2
        addb #$80
no_carry2:
        std deltax,x
        lda tmp
        beq not_neg2
        com deltax,x

not_neg2:
        clr tmp
        ldd deltay,x
        beq not_neg4
        bgt not_neg3
        dec tmp
        com deltay,x
        ldd deltay,x
not_neg3:
        lsrb
        lsra
        bcc no_carry3
        addb #$80
no_carry3:
        lsrb
        lsra
        bcc no_carry4
        addb #$80
no_carry4:
        std deltay,x
        lda tmp
        beq not_neg4
        com deltay,x
not_neg4:
        rts

next_shot:
        leax 15,x
        dec tmp
        lbne shoot2
        rts


draw_alien_shots:
        
        lda   #MAX_ALIEN_SHOTS           ;sprites_left is the counter
        sta   sprites_left               ;Create loop variable
        ldy   #ashot_data_1
ashots_loop:
        lda   0,y                       ;load status byte
        beq   end_ashots                 ;If status is 0, don't draw object ("dead")
        lda   1,y                       ;Get y
        ldb   2,y                       ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #1                     ; load 1
        sta    VIA_t1_cnt_lo           ; 1 as scaling
        
        lda   0,y
        cmpa  #$01
        beq   up_down
        cmpa  #$02
        beq   up_down
        cmpa  #$03
        beq   right_left
        cmpa  #$04
        beq   right_left
        cmpa  #$05
        beq   ang_up
        cmpa  #$06
        beq   ang_up

        ldd   #$817e
        bra   draw_ash
ang_up:        
        ldd   #$7e7e
        bra   draw_ash
right_left:
        ldd   #$007e
        bra   draw_ash
up_down:
        ldd   #$7e00
        bra   draw_ash
draw_ash:
        clr    Vec_Misc_Count
        jsr    draw_to_d
        jsr   reset0ref                 ;Move pen to (0,0)
end_ashots:
        leay  3,y                       ;Next object structure
        dec   sprites_left              ;Decrement the counter
        bmi   end_draw_ashots
        bra   ashots_loop                ;Not done, back to start of loop
end_draw_ashots:        
        rts


update_ashots:
       ldx #ashot_data_1
       lda #MAX_ALIEN_SHOTS
       sta sprites_left
move_ashot:
       lda 0,x
       beq move_next_ashot
       
       lda 1,x
       sta tmp2+1
       lda 2,x
       sta tmp2
       jsr check_bounce2
       tst bounce_flag
       beq do_ash_move
       clr 0,x
       bra move_next_ashot
       
do_ash_move:       
       lda 0,x
       cmpa #$01
       bne not_up
       inc 1,x                          ;move shot up
       inc 1,x                          ;move shot up
       bra move_next_ashot
not_up:       
       cmpa #$02
       bne not_down
       dec 1,x                          ;move shot down
       dec 1,x                          ;move shot down
       bra move_next_ashot
not_down:       
       cmpa #$03
       bne not_right
       inc 2,x                          ;move shot right
       inc 2,x                          ;move shot right
       bra move_next_ashot
not_right:              
       cmpa #$04
       bne not_left
       dec 2,x                          ;move shot left
       dec 2,x                          ;move shot left
       bra move_next_ashot
not_left:       
       cmpa #$05
       bne not_up_right
       inc 2,x                          ;move shot right
       inc 1,x                          ;move shot up
       bra move_next_ashot
not_up_right:
       cmpa #$06
       bne not_down_left
       dec 2,x                          ;move shot left
       dec 1,x                          ;move shot down
       bra move_next_ashot
not_down_left:
       cmpa #$07
       bne not_up_left
       inc 1,x                          ;move shot up
       dec 2,x                          ;move shot left
       bra move_next_ashot
not_up_left:
       dec 1,x                          ;move shot down
       inc 2,x                          ;move shot right
move_next_ashot:
        leax  3,x                       ;Next object structure
        dec   sprites_left              ;Decrement the counter
        bmi   done_moving
        bra   move_ashot                ;Not done, back to start of loop
done_moving:
       rts



;*************
;aliens_shoot
;*************
aliens_shoot:
       ldy #sprite_3
       ldu #alientype1
       lda #11
       sta tmp2
next2shoot:
       lda state,y
       beq next_shooter
       lda 0,u
       beq next_shooter
       lda mine_chance
       ;lsla
       ;lsla
       ldb 0,u
       cmpb #$08
       bne not_type3_shoot
       ;lsla
       lsla
not_type3_shoot:
       sta tmp
       jsr random
       tsta
       bmi next_shooter
       cmpa tmp
       bgt next_shooter

       ldx #ashot_data_1
       lda #MAX_ALIEN_SHOTS
       sta sprites_left
find_ashot:
       lda 0,x
       bne next_ashot

       jsr get_shot_dir
       sta 0,x
       lda posy,y
       sta 1,x
       lda posx,y
       sta 2,x
       bra no_ashots
next_ashot:
        leax  3,x                       ;Next object structure
        dec   sprites_left              ;Decrement the counter
        bmi   no_ashots
        bra   find_ashot                ;Not done, back to start of loop
no_ashots:
next_shooter:       
        leay #15,y
        leau 1,u
        dec tmp2
        bmi done_shooting
        bra next2shoot
done_shooting:       
       rts



get_shot_dir:
         
         clr tmp
         clr tmp+1
         clr tmp2
         clr tmp3

         ldu #sprite_1
         lda players
         beq not_2p
         lda p2_dead
         bne not_2p
         lda p1_dead
         bne shoot_p2
         jsr random
         anda #$01
         bne not_2p
shoot_p2:         
         ldu #sprite_2
not_2p:
         lda posx,y
         suba posx,u
         blt not_sh1_d
sh1_d2:         
         sta tmp3+1
         clr tmp+1
         bra sh1_d
not_sh1_d:
         jsr get_abs_val_ab
         sta tmp3+1
         dec tmp+1
sh1_d:
         lda posy,y
         suba posy,u
         blt not_sh2_d
sh2_d2:         
         sta tmp2+1
         clr tmp
         bra sh2_d
not_sh2_d:
         jsr get_abs_val_ab
         sta tmp2+1
         dec tmp
sh2_d:
         ldd tmp3      ;get x
         addd tmp3     ;add x
         subd tmp2       ;subtract y
         ;bcs  lower_third
         bmi  lower_third
         ldd  tmp2        ;get y
         addd tmp2       ;add y
         subd tmp3     ;subtract x
         ;bcs  lower_third
         bmi upper_third

         lda tmp
         bne bottom_half
         lda tmp+1
         bne ul_diag_shot
         lda #$06
         rts
ul_diag_shot:
         lda #$08
         rts
bottom_half:
         lda tmp+1
         bne ll_diag_shot
         lda #$07
         rts
ll_diag_shot:
         lda #$05
         rts

upper_third:
         lda tmp+1
         bne sh_down
         lda #$04
         rts
sh_down:
        lda #$03
        rts
        
lower_third:
         lda tmp
         bne sh_right
         lda #$02
         rts
sh_right:
        lda #$01
        rts
        
        



clear_ashots:
        lda   #MAX_ALIEN_SHOTS           ;sprites_left is the counter
        sta   sprites_left               ;Create loop variable
        ldy   #ashot_data_1
clear_loop:        
        clr 0,y
        clr 1,y
        clr 2,y
        
;        lda #$01
;        sta 0,y
;        jsr random
;        sta 1,y
;        jsr random
;        sta 2,y
        
        leay  3,y                       ;Next object structure
        dec   sprites_left              ;Decrement the counter
        bmi   end_clear_ashots
        bra   clear_loop                ;Not done, back to start of loop
end_clear_ashots:        
        rts




;*************
;drop_mine
;*************
drop_mine:

        lda no_aliens
        sta tmp2
        ldx #sprite_3
        ldy #alientype1
check_alien:
        lda state,x
        lbeq done_drop_mines
        lda 0,y
        lbeq done_drop_mines
        
        lda mine_chance
        ldb 0,y
        cmpb #$08
        bne not_type3_mine
        ;lsla
        lsla
not_type3_mine:
        sta tmp
        jsr random
        tsta
        lbmi done_dropping
        cmpa tmp
        lbgt done_dropping
        
        lda posy,x
        ldb posx,x
        std tmp


        lda #MAX_MINES
        sta sprites_left
        ldy #mine_data_1
find_close_mine:        
        lda 0,y
        beq not_close
        lda 1,y
        suba tmp
        cmpa #10
        bgt not_close
        cmpa #-10
        blt not_close
        lda 2,y
        suba tmp+1
        cmpa #10
        bgt not_close
        cmpa #-10
        blt not_close
        
        lda #$03
        sta 0,y
        bra done_dropping
not_close:
        leay 3,y
        dec sprites_left
        bmi done_close_mines
        bra find_close_mine
done_close_mines:



        lda #MAX_MINES
        sta sprites_left
        ldy #mine_data_1
find_empty_mine:
        lda 0,y
        bne find_next_mine
        jsr random
        anda #$03
        cmpa #$03
        beq done_dropping
        sta 0,y
        ldd tmp
        sta 1,y
        stb 2,y
        jmp done_dropping
find_next_mine:
        leay 3,y
        dec sprites_left
        bmi done_drop_mines
        bra find_empty_mine
done_drop_mines:       
        leax 15,x
        leau 1,u
        dec tmp2
        bmi done_dropping
        jmp check_alien
done_dropping:
       rts

;**********
;update_ship
;Rotates ship, updates ship velocity (deltax and deltay) using joystick 
;state and rotation. Applies effect of drag on velocity.
;************
update_ship:

no_test:
        lda p1_dead
        beq move_p1
        cmpa #$ff
        lbeq check_p2_alive
        inc p1_dead
        lda p1_dead
        cmpa #$20
        lbne check_p2_alive
        clr p1_dead
        lda #$01
        sta p1_invince
        lda #$ff
        sta p1_invin_count
        lda #-64
        sta sprite_1+posx
        lda #$3f
        sta sprite_1+posy
        dec ships_left_1
        lbge exit
        lda #$ff
        sta p1_dead
        ldx #score_1
        ldu #$cbeb
        jsr new_high_score
        jmp check_p2_alive

move_p1:
        ldy #sprite_1
        
        lda $c815
        bne no_clear_shot1
        clr shootp1
        bra no_shot1
no_clear_shot1:
        lda shootp1
        beq do_sho1
        dec shootp1
        bra no_shot1
do_sho1:
        lda #20
        sta shootp1
        
        ldx #sprite_15
        lda no_shots_1
        ldb shot_speed_1
        jsr shoot

no_shot1:
        lda $c81b           ;Get left/right joystick state
        beq done_rot1       ;If 0, no rotation
        blt rot_left1       ;If negative rotate clockwise
        
        lda rotation,y
        bne not_rot_under
        lda #63
        sta rotation,y
        bra done_rot1
not_rot_under:        
        dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        bra done_rot1
rot_left1:
        lda rotation,y
        cmpa #63
        bne not_rot_over
        clr rotation,y
        bra done_rot1
not_rot_over:
        inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise

done_rot1:
        ;lda $c81c           ;Get up/down joystick state
        ;bgt acc1            ;If up, accelerate
        
        lda $c814           ;Get button
        bne acc1            ;If pressed, accelerate
        clr tht_snd_flag
        jmp done_acc1
acc1:        
        lda tht_snd_flag
        cmpa #30
        beq no_thrust_inc
        inc tht_snd_flag
no_thrust_inc:                
        ldb rotation,y      ;Get rotation
        lda accel           ;Get acceleration
        jsr conv_ang_rr     ;Get rise and run based on rotation and acceleration
        std tmp             ;Store results in tmp
        tsta
        blt a_neg           ;Is A rise negative?
        ldd deltay,y        ;Get deltay
        addb tmp            ;Add rise
        adca #$00
        tsta
        ble y_not_faster    ;If deltay is negative, don't test for maximum velocity
        cmpd pos_max_vel    ;Compare deltay with maximum velocity
        bls y_not_faster
        ldd pos_max_vel     ;If faster than max velocity, make deltay=max velocity
y_not_faster:        
        std deltay,y        ;Store deltay back
        bra do_b
a_neg:
        jsr get_abs_val_ab  ;Get absolute value of A
        sta tmp
        ldd deltay,y        ;Get deltay
        subb tmp            ;Subtract rise
        sbca #$00
        tsta 
        bge y_not_faster2   ;If deltay is positive, don't test for maximum velocity
        cmpd neg_max_vel    ;Compare deltay with maximum velocity
        bhs y_not_faster2
        ldd neg_max_vel     ;If faster than max velocity, make deltay=max velocity
y_not_faster2:        
        std deltay,y        ;store deltay back
       
do_b:
        ldb tmp+1           ;Get run
        tstb
        blt b_neg           ;Check if run is negative
        ldd deltax,y        ;Get deltax
        addb tmp+1          ;Add run
        adca #$00
        tsta
        ble x_not_faster    ;If deltax is negative, don't test for maximum velocity
        cmpd pos_max_vel    ;Compare deltax with maximum velocity
        bls x_not_faster
        ldd pos_max_vel     ;If faster than max velocity, make deltax=max velocity
x_not_faster:
        std deltax,y        ;Store back deltax
        bra done_acc1
b_neg:
        jsr get_abs_val_ab  ;Get absolute value of run
        stb tmp+1
        ldd deltax,y        ;Get deltax
        subb tmp+1          ;Subtract run
        sbca #$00
        tsta
        bge x_not_faster2   ;If deltax is positive, don't test for maximum velocity
        cmpd neg_max_vel    ;Compare deltax with maximum velocity
        bhs x_not_faster2
        ldd neg_max_vel     ;If faster than max velocity, make deltax=max velocity
x_not_faster2:        
        std deltax,y        ;Store back deltax
done_acc1:
          
apply_drag_x:               ;Adjust deltax for drag
        ldd deltax,y        ;Get deltax
        beq apply_drag_y    ;If it's 0, don't apply drag
        blt neg_deltax      ;If negative, go apply positive drag

pos_deltax:                 ;Deltax is positive
        subd drag           ;Subtract drag
        cmpd drag           ;If deltax<drag...
        bgt not_cleared1
        ldd #$00            ;...Clear deltax to 0
not_cleared1:
        std deltax,y        ;Store adjusted deltax
        bra apply_drag_y

neg_deltax:                 ;Deltax is negative
        addd drag           ;Add drag
        std deltax,y
        
apply_drag_y:               ;Adjust deltax for drag
        ldd deltay,y        ;Get deltay
        beq done_drag       ;If deltay=0 don't apply drag
        blt neg_deltay      ;If negative apply positive drag

pos_deltay:                 ;Deltay is positive
        subd drag           ;Subtract drag
        cmpd drag           ;If deltay<drag...
        bgt not_cleared2
        ldd #$00            ;...Clear deltay to 0
not_cleared2:
        std deltay,y        ;Store adjusted deltay
        bra done_drag

neg_deltay:                 ;Deltay is negative
        addd drag           ;Add drag
        std deltay,y
        
done_drag:        
        
        jsr check_bounce


check_p2_alive:
        lda players
        bne do_p2
        rts
do_p2:        
        lda p2_dead
        beq move_p2
        cmpa #$ff
        beq exit
        inc p2_dead
        lda p2_dead
        cmpa #$20
        bne exit
        clr p2_dead
        lda #$01
        sta p2_invince
        lda #$ff
        sta p2_invin_count
        lda #64
        sta sprite_2+posx
        lda #$3f
        sta sprite_2+posy
        dec ships_left_2
        bge exit
        lda #$ff
        sta p2_dead
        ldx #score_1
        ldu #$cbeb
        jsr new_high_score

exit:
        rts
move_p2:
        ldy #sprite_2
        
        lda $c819           ;Get fire button
        bne no_clear_shot2  ;Try to shoot
        clr shootp2
        bra no_shot2
no_clear_shot2:
        lda shootp2
        beq do_sho2
        dec shootp2
        bra no_shot2
do_sho2:
        lda #20
        sta shootp2
        ldx #sprite_19
        lda no_shots_2
        ldb shot_speed_2
        jsr shoot
        
no_shot2:        
        lda $c81d           ;Get left/right joystick state
        beq done_rot1_2     ;If 0, no rotation
        blt rot_left1_2     ;If negative rotate clockwise
        lda rotation,y
        bne not_rot_under2
        lda #63
        sta rotation,y
        bra done_rot1_2
not_rot_under2:        
        dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        ;dec rotation,y      ;Rotate counter-clockwise
        bra done_rot1_2
rot_left1_2:
        lda rotation,y
        cmpa #63
        bne not_rot_over2
        clr rotation,y
        bra done_rot1_2
not_rot_over2:
        inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise
        ;inc rotation,y      ;Rotate clockwise

done_rot1_2:
        ;lda $c81e           ;Get up/down joystick state
        ;bgt acc1_2          ;If up, accelerate
        
        lda $c818           ;Get button
        bne acc1_2          ;If pressed, accelerate
        clr tht2_snd_flag
        jmp done_acc1_2
acc1_2:        
        lda tht2_snd_flag
        cmpa #30
        beq no_thrust2_inc
        inc tht2_snd_flag
no_thrust2_inc:                
        ldb rotation,y      ;Get rotation
        lda accel_2          ;Get accelration
        jsr conv_ang_rr     ;Get rise and run based on rotation and acceleration
        std tmp             ;Store results in tmp
        tsta
        blt a_neg_2         ;Is A rise negative?
        ldd deltay,y        ;Get deltay
        addb tmp            ;Add rise
        adca #$00
        tsta
        ble y_not_faster_2  ;If deltay is negative, don't test for maximum velocity
        cmpd pos_max_vel_2  ;Compare deltay with maximum velocity
        bls y_not_faster_2
        ldd pos_max_vel_2   ;If faster than max velocity, make deltay=max velocity
y_not_faster_2:        
        std deltay,y        ;Store deltay back
        bra do_b_2
a_neg_2:
        jsr get_abs_val_ab  ;Get absolute value of A
        sta tmp
        ldd deltay,y        ;Get deltay
        subb tmp            ;Subtract rise
        sbca #$00
        tsta 
        bge y_not_faster2_2 ;If deltay is positive, don't test for maximum velocity
        cmpd neg_max_vel_2  ;Compare deltay with maximum velocity
        bhs y_not_faster2_2
        ldd neg_max_vel_2   ;If faster than max velocity, make deltay=max velocity
y_not_faster2_2:        
        std deltay,y        ;store deltay back
       
do_b_2:
        ldb tmp+1           ;Get run
        tstb
        blt b_neg_2         ;Check if run is negative
        ldd deltax,y        ;Get deltax
        addb tmp+1          ;Add run
        adca #$00
        tsta
        ble x_not_faster_2  ;If deltax is negative, don't test for maximum velocity
        cmpd pos_max_vel_2  ;Compare deltax with maximum velocity
        bls x_not_faster_2
        ldd pos_max_vel_2   ;If faster than max velocity, make deltax=max velocity
x_not_faster_2:
        std deltax,y        ;Store back deltax
        bra done_acc1_2
b_neg_2:
        jsr get_abs_val_ab  ;Get absolute value of run
        stb tmp+1
        ldd deltax,y        ;Get deltax
        subb tmp+1          ;Subtract run
        sbca #$00
        tsta
        bge x_not_faster2_2 ;If deltax is positive, don't test for maximum velocity
        cmpd neg_max_vel_2  ;Compare deltax with maximum velocity
        bhs x_not_faster2_2
        ldd neg_max_vel_2   ;If faster than max velocity, make deltax=max velocity
x_not_faster2_2:        
        std deltax,y        ;Store back deltax
done_acc1_2:
          
apply_drag_x_2:             ;Adjust deltax for drag
        ldd deltax,y        ;Get deltax
        beq apply_drag_y_2  ;If it's 0, don't apply drag
        blt neg_deltax_2    ;If negative, go apply positive drag

pos_deltax_2:               ;Deltax is positive
        subd drag           ;Subtract drag
        cmpd drag           ;If deltax<drag...
        bgt not_cleared1_2
        ldd #$00            ;...Clear deltax to 0
not_cleared1_2:
        std deltax,y        ;Store adjusted deltax
        bra apply_drag_y_2

neg_deltax_2:               ;Deltax is negative
        addd drag           ;Add drag
        std deltax,y
        
apply_drag_y_2:             ;Adjust deltax for drag
        ldd deltay,y        ;Get deltay
        beq done_drag_2     ;If deltay=0 don't apply drag
        blt neg_deltay_2    ;If negative apply positive drag

pos_deltay_2:               ;Deltay is positive
        subd drag           ;Subtract drag
        cmpd drag           ;If deltay<drag...
        bgt not_cleared2_2
        ldd #$00            ;...Clear deltay to 0
not_cleared2_2:
        std deltay,y        ;Store adjusted deltay
        bra done_drag_2

neg_deltay_2:               ;Deltay is negative
        addd drag           ;Add drag
        std deltay,y
        
done_drag_2:        
        
         jsr check_bounce
         rts
       

;************
;check_bounce  Checks to see if an object hits a wall and bounces
;************

check_bounce: 
              clr bounce_flag
              clr quad_flag1   ;Clear quadrant flags 
              clr quad_flag2    
              lda state,y
              lbeq done_bounce

              lda posx,y       ;Get X position
              tsta             ;Get abs(x) - Move x into pos quadrant
              bpl end_neg_x1
              dec quad_flag1   ;Set quarant flag
              nega
              bvc end_neg_x1
              deca
end_neg_x1:
              ldb posy,y
              tstb             ;Get abs(y) - Move y into pos quadrant
              bpl end_neg_y1
              dec quad_flag2   ;Set quadrant flag
              negb
              bvc end_neg_y1
              decb
              
end_neg_y1:   
              cmpa in_blk_1x    ;Compare with inner boundary
              bgt done_bounce1  ;If bigger, don't bounce
              cmpb in_blk_1y    ;Compare with inner boundary
              bgt done_bounce1  ;If bigger, don't bounce
              stb tmp
              cmpa tmp
              bgt done_bounce1

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              lda in_blk_1y
              ldb #$00
              addd #$0100
              std posy,y
              tst quad_flag2
              beq not_quad1
              lda #$02    ;wall change
              sta wall_status10   
              ldd posy,y
              coma
              comb
              addd #$0001
              std posy,y
              bra not_quad1a
not_quad1:
              lda #$02    ;wall change
              sta wall_status9   
not_quad1a:
              ldd deltay,y
              coma
              comb
              addd #$0001
              std deltay,y      ;Negafy velocity in y direction only
              jmp done_bounce
done_bounce1:
              cmpa in_blk_2x    ;Compare with inner boundary
              bgt done_bounce2  ;If bigger, don't bounce
              cmpb in_blk_2y    ;Compare with inner boundary
              bgt done_bounce2  ;If bigger, don't bounce
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              lda in_blk_2x
              ldb #$00
              addd #$0100
              std posx,y
              tst quad_flag1
              beq not_quad2
              lda #$02    ;wall change
              sta wall_status11   
              ldd posx,y
              coma
              comb
              addd #$0001
              std posx,y
              bra not_quad2a
not_quad2:    
              lda #$02    ;wall change
              sta wall_status12   
not_quad2a:
              ldd deltax,y
              coma
              comb
              addd #$0001
              std deltax,y      ;Negafy velocity in x direction only
              jmp done_bounce
done_bounce2:
              cmpb out_blk_1y    ;Compare with outer boundary
              blt done_bounce3   ;If smaller, don't bounce

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              lda out_blk_1y
              ldb #$00
              subd #$0100
              std posy,y
              tst quad_flag2
              beq not_quad3
              lda #$02    ;wall change
              sta wall_status2
              ldd posy,y
              coma
              comb
              addd #$0001
              std posy,y
              bra not_quad3a:
not_quad3:
              lda #$02    ;wall change
              sta wall_status1
not_quad3a:              
              ldd deltay,y
              coma
              comb
              addd #$0001
              std deltay,y      ;Negafy velocity in y direction only
              jmp done_bounce
done_bounce3:
              cmpa out_blk_1x    ;Compare with outer boundary
              blt done_bounce4   ;If smaller, don't bounce

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              lda out_blk_1x
              ldb #$00
              subd #$0100
              std posx,y
              tst quad_flag1
              beq not_quad4
              lda #$02    ;wall change
              sta wall_status3
              ldd posx,y
              coma
              comb
              addd #$0001
              std posx,y
              bra not_quad4a:
not_quad4:
              lda #$02    ;wall change
              sta wall_status4
not_quad4a:              
              ldd deltax,y
              coma
              comb
              addd #$0001
              std deltax,y      ;Negafy velocity in x direction only
              jmp done_bounce
done_bounce4:
              cmpa in_diag_1
              lbgt done_bounce5
              cmpb in_diag_1
              lbgt done_bounce5
              stb tmp
              ldb in_diag_2
              subb tmp
              stb tmp2
              ldb tmp
              cmpa tmp2
              bgt done_bounce5
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              ldd deltax,y
              ldu deltay,y
              stu deltax,y
              std deltay,y
              
              lda quad_flag1
              bne move_12
              ldd posx,y
              adda #$01
              std posx,y
              bra move_y2
move_12:
              ldd posx,y
              suba #$01
              std posx,y
move_y2:
              lda quad_flag2
              bne move_32
              ldd posy,y
              adda #$01
              std posy,y
              bra done_move_y2
move_32:
              ldd posy,y
              suba #$01
              std posy,y
done_move_y2:


              tst quad_flag1
              beq not_1
              tst quad_flag2
              beq done_bounce_n1
              bra not_2_1
not_1:
              tst quad_flag2
              beq not_2_2
              bra done_bounce_n2
not_2_1:
              lda #$02    ;wall change
              sta wall_status15   ;- here
              bra not_2
not_2_2:
              lda #$02    ;wall change
              sta wall_status16   ;- here
not_2:

              ldd deltay,y
              coma
              comb
              addd #$0001
              std deltay,y      ;Negafy velocity in y direction only
              ldd deltax,y
              coma
              comb
              addd #$0001
              std deltax,y      ;Negafy velocity in y direction only
              jmp done_bounce

done_bounce_n1:
              lda #$02    ;wall change
              sta wall_status13   ;- here
              jmp done_bounce
done_bounce_n2:
              lda #$02    ;wall change
              sta wall_status14   ;- here
              jmp done_bounce

done_bounce5:
              cmpa out_diag_1
              lblt done_bounce6
              cmpb out_diag_1
              lblt done_bounce6
              sta tmp
              stb tmp2
              suba out_diag_1
              subb out_diag_1
              stb tmp3
              ldb out_diag_2
              subb tmp3
              stb tmp3
              cmpa tmp3
              lblt done_bounce6
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              lda tmp3
              adda out_diag_1
              ldb #$00
              std posx,y
              
              tst quad_flag1
              beq done_1c
              ldd posx,y
              coma
              comb
              addd #$0001
              std posx,y
              
done_1c:
              ldd deltax,y
              ldu deltay,y
              stu deltax,y
              std deltay,y
              
              lda quad_flag1
              beq move_1
              ldd posx,y
              adda #$01
              std posx,y
              bra move_y
move_1:
              ldd posx,y
              suba #$01
              std posx,y
move_y:
              lda quad_flag2
              beq move_3
              ldd posy,y
              adda #$01
              std posy,y
              bra done_move_y
move_3:
              ldd posy,y
              suba #$01
              std posy,y
done_move_y:

              tst quad_flag1
              beq not_1a
              tst quad_flag2
              beq done_bounce_n1z
              bra not_2a_1
not_1a:
              tst quad_flag2
              beq not_2a_2
              bra done_bounce_n2z
not_2a_1:
              lda #$02    ;wall change
              sta wall_status7   ;- here
              bra not_2a
not_2a_2:
              lda #$02    ;wall change
              sta wall_status8   ;- here
not_2a:
              ldd deltay,y
              coma
              comb
              addd #$0001
              std deltay,y      ;Negafy velocity in y direction only
              ldd deltax,y
              coma
              comb
              addd #$0001
              std deltax,y      ;Negafy velocity in y direction only
              bra done_bounce

done_bounce_n1z:
              lda #$02    ;wall change
              sta wall_status5   ;- here
              bra done_bounce
done_bounce_n2z:
              lda #$02    ;wall change
              sta wall_status6   ;- here
              bra done_bounce

done_bounce6:
;              lda tmp
;              ldb tmp2
done_bounce:

              rts


;************
;check_bounce2  Checks to see if an object hits
;x = tmp2
;y = tmp2+1
;************

check_bounce2: 
              clr bounce_flag
              clr quad_flag1   ;Clear quadrant flags 
              clr quad_flag2    

              lda tmp2        ;Get X position
              tsta             ;Get abs(x) - Move x into pos quadrant
              bpl end_neg_x12
              dec quad_flag1   ;Set quarant flag
              nega
              bvc end_neg_x12
              deca
end_neg_x12:
              ldb tmp2+1
              tstb             ;Get abs(y) - Move y into pos quadrant
              bpl end_neg_y12
              dec quad_flag2   ;Set quadrant flag
              negb
              bvc end_neg_y12
              decb
              
end_neg_y12:   
              cmpa in_blk_1x    ;Compare with inner boundary
              bgt done_bounce12  ;If bigger, don't bounce
              cmpb in_blk_1y    ;Compare with inner boundary
              bgt done_bounce12  ;If bigger, don't bounce
              stb tmp
              cmpa tmp
              bgt done_bounce12

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              
              tst quad_flag2
              beq not_quad1_a
              lda #$02    ;wall change
              sta wall_status10   
              jmp done_bounce222
not_quad1_a:
              lda #$02    ;wall change
              sta wall_status9   
              jmp done_bounce222


done_bounce12:
              cmpa in_blk_2x    ;Compare with inner boundary
              bgt done_bounce22  ;If bigger, don't bounce
              cmpb in_blk_2y    ;Compare with inner boundary
              bgt done_bounce22  ;If bigger, don't bounce
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag

              tst quad_flag1
              beq not_quad2_a
              lda #$02    ;wall change
              sta wall_status11   
              jmp done_bounce222
not_quad2_a:    
              lda #$02    ;wall change
              sta wall_status12   
              jmp done_bounce222
done_bounce22:
              cmpb out_blk_1y    ;Compare with outer boundary
              bls done_bounce32   ;If smaller, don't bounce

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              
              tst quad_flag2
              beq not_quad23
              lda #$02    ;wall change
              sta wall_status2
              jmp done_bounce222
not_quad23:
              lda #$02    ;wall change
              sta wall_status1
              jmp done_bounce222
done_bounce32:
              cmpa out_blk_1x    ;Compare with outer boundary
              blt done_bounce42   ;If smaller, don't bounce

              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              
              tst quad_flag1
              beq not_quad24
              lda #$02    ;wall change
              sta wall_status3
              jmp done_bounce222
not_quad24:
              lda #$02    ;wall change
              sta wall_status4
              jmp done_bounce222
done_bounce42:
              cmpa in_diag_1
              bgt done_bounce52
              cmpb in_diag_1
              bgt done_bounce52
              stb tmp
              ldb in_diag_2
              subb tmp
              stb tmp2
              ldb tmp
              cmpa tmp2
              bgt done_bounce52
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag
              
              tst quad_flag1
              beq not_1_a
              tst quad_flag2
              beq done_bounce_n1_a
              bra not_2_1_a
not_1_a:
              tst quad_flag2
              beq not_2_2_a
              bra done_bounce_n2_a
not_2_1_a:
              lda #$02    ;wall change
              sta wall_status15   ;- here
              bra done_bounce222
not_2_2_a:
              lda #$02    ;wall change
              sta wall_status16   ;- here
              bra done_bounce222
done_bounce_n1_a:
              lda #$02    ;wall change
              sta wall_status13   ;- here
              bra done_bounce222
done_bounce_n2_a:
              lda #$02    ;wall change
              sta wall_status14   ;- here
              bra done_bounce222

done_bounce52:
              cmpa out_diag_1
              blt done_bounce222
              cmpb out_diag_1
              blt done_bounce222
              sta tmp
              stb tmp2
              suba out_diag_1
              subb out_diag_1
              stb tmp3
              ldb out_diag_2
              subb tmp3
              stb tmp3
              cmpa tmp3
              blt done_bounce222
              
              dec bounce_flag
              lda #15
              sta bounce_snd_flag

              tst quad_flag1
              beq not_1ab
              tst quad_flag2
              beq done_bounce_n1zb
              bra not_2a_1b
not_1ab:
              tst quad_flag2
              beq not_2a_2b
              bra done_bounce_n2zb
not_2a_1b:
              lda #$02    ;wall change
              sta wall_status7   ;- here
              bra done_bounce222
not_2a_2b:
              lda #$02    ;wall change
              sta wall_status8   ;- here
              bra done_bounce222
done_bounce_n1zb:
              lda #$02    ;wall change
              sta wall_status5   ;- here
              bra done_bounce222
done_bounce_n2zb:
              lda #$02    ;wall change
              sta wall_status6   ;- here
              bra done_bounce222

done_bounce222:

              rts


;***************
;move_everything
;***************

move_everything:
        lda   no_sprites                ;sprite_left is the counter
        sta   sprites_left              ;Create loop variable
        ldy   #sprite_1                 ;First sprite to move
        
st_loop:
        lda   state,y                   ;load status byte
        beq   en_loop                   ;If status is 0, don't move object ("dead")
        ;cmpa  #$ff                      ;If status is FF, exit routine
        ;beq   en_routine                
        ldd   posx,y                    ;Get posx
        addd  deltax,y                  ;Add deltax (velocity)
        std   posx,y                    ;Store adjusted posx
        ldd   posy,y                    ;Get posy
        addd  deltay,y                  ;Add deltay (velocity)
        std   posy,y                    ;Store adjusted posy
        
en_loop:
        dec   sprites_left              ;Decrement the counter
        bmi   en_routine                ;Are we done?
        leay  #15,y                     ;Next object structure
        bra   st_loop                   ;Not done, back to start of loop

en_routine:                             ;We're done
        
        rts




clear_shots:
        lda   #$07 ;no_sprites                ;sprite_left is the counter
        sta   sprites_left              ;Create loop variable
        ldy   #sprite_15
        
start_cloop:
        clr   state,y                   ;load status byte
        ;clr   posy,y                    ;Get y
        ;clr   posx,y                    ;Get x
end_cloop:        
        dec   sprites_left              ;Decrement the counter
        bmi   end_croutine               ;Are we done?
        leay  #15,y                     ;Next object structure
        bra   start_cloop                ;Not done, back to start of loop
end_croutine:                            ;We're done
        rts



draw_shots:
        lda   #$07 ;no_sprites                ;sprite_left is the counter
        sta   sprites_left              ;Create loop variable
        ldy   #sprite_15
        
start_sloop:
        lda   state,y                   ;load status byte
        beq   end_sloop                  ;If status is 0, don't draw object ("dead")

        lda   posy,y                    ;Get y
        ldb   posx,y                    ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        jsr   dot_here                  ;Draw dot
        jsr   reset0ref                 ;Move pen to (0,0)
end_sloop:        
        dec   sprites_left              ;Decrement the counter
        bmi   end_sroutine               ;Are we done?
        leay  #15,y                     ;Next object structure
        bra   start_sloop                ;Not done, back to start of loop
end_sroutine:                            ;We're done
        rts

get_x_for_rot:
        cmpa #00
        beq use_first
        sta tmp
        lda #64
        suba tmp
        sta tmp
        ldd #Shape_000

fix_address:        
        addb #16
        adca #00
        dec tmp
        bne fix_address
        tfr d,x
        rts
use_first:
        ldx #Shape_000
        rts


draw_ships:
        lda p1_dead
        beq draw_p1
        cmpa #$ff
        beq tst_p2

        sta tmp
        lda sprite_1+posy
        ldb sprite_1+posx             ;Get x
        jsr draw_explosion
        bra tst_p2
draw_p1:        
        lda p1_invince
        beq no_blink1
        lda p1_invin_count
        anda #$04
        beq tst_p2
no_blink1:
        lda   sprite_1+posy
        ldb   sprite_1+posx             ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda sprite_1+rotation
        jsr get_x_for_rot
        
        lda   #$07                      ;Get number of vectors
        ldb   #$10                        ;Get the scale
        jsr   move_draw_VL4             ;Draw it

        jsr reset0ref
        
tst_p2:        
        lda players
        beq no_pl2ship
        
        lda p2_dead
        beq draw_p2
        cmpa #$ff
        beq no_pl2ship
        
        sta tmp
        lda sprite_2+posy
        ldb sprite_2+posx             ;Get x
        jsr draw_explosion
        rts
draw_p2:        
        lda p2_invince
        beq no_blink2
        lda p2_invin_count
        anda #$04
        beq no_pl2ship
no_blink2:
        lda   sprite_2+posy
        ldb   sprite_2+posx             ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)

        lda sprite_2+rotation
        jsr get_x_for_rot
        
        lda   #$07                        ;Get number of vectors
        ldb   #$10                        ;Get the scale
        jsr   move_draw_VL4             ;Draw it

        jsr   reset0ref                 ;Move pen to (0,0)
no_pl2ship:
        rts



draw_aliens:
        lda   #11                       ;sprite_left is the counter
        sta   sprites_left              ;Create loop variable
        ldy   #sprite_3

start_aloop:
        lda   state,y                   ;load status byte
        beq   end_aloop                  ;If status is 0, don't draw object ("dead")

draw_alien:        

        lda   posy,y                    ;Get y
        ldb   posx,y                    ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)

        ldx   vector_list,y
        lda   no_vectors,y              ;Get number of vectors
        ldb   scale,y                   ;Get the scale
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

end_aloop:
        dec   sprites_left              ;Decrement the counter
        bmi   end_aroutine               ;Are we done?
        leay  #15,y                     ;Next object structure
        jmp   start_aloop                ;Not done, back to start of loop

end_aroutine:                            ;We're done
        
        rts

draw_ships_left:
         lda #20
         sta type3_counter     ;x Pos
         lda ships_left_1
         ble p2_ships_lft
         cmpa #$06
         blt do1
         lda #$06
do1:
         sta wall_switch   ;counter


next_ship_left:
         lda   #$8                      ;Get y
         ldb   type3_counter                       ;Get x
         jsr   move_pen7f_to_d           ;go to (PosX,PosY)
         ldx   #big_a
         lda   #$07                      ;Get number of vectors
         ldb   #$4                        ;Get the scale
         jsr   move_draw_VL4             ;Draw it
         jsr   reset0ref                 ;Move pen to (0,0)
         
         lda type3_counter
         suba #$08
         sta type3_counter

         dec wall_switch
         bne next_ship_left
p2_ships_lft:         
         lda players
         beq  no_2nd_ships_lft
         
         lda #20
         sta type3_counter     ;x Pos
         lda ships_left_2
         ble no_2nd_ships_lft
         cmpa #$06
         blt do2
         lda #$06
do2:
         sta wall_switch   ;counter

next_ship_left2:
         lda   #-$8                      ;Get y
         ldb   type3_counter                       ;Get x
         jsr   move_pen7f_to_d           ;go to (PosX,PosY)
         ldx   #big_a
         lda   #$07                      ;Get number of vectors
         ldb   #$4                       ;Get the scale
         jsr   move_draw_VL4             ;Draw it
         jsr   reset0ref                 ;Move pen to (0,0)
         
         lda type3_counter
         suba #$08
         sta type3_counter

         dec wall_switch
         bne next_ship_left2

no_2nd_ships_lft:
         rts



draw_level: ;tmp=y
        lda #$08
        sta tmp+1
        
        lda tmp
        ldb #-$50
        jsr draw_letter_l
        lda tmp
        ldb #-$35
        jsr draw_letter_e
        lda tmp
        ldb #-$20
        jsr draw_letter_v
        lda tmp
        ldb #-$5
        jsr draw_letter_e
        lda tmp
        ldb #$10
        jsr draw_letter_l
        
        lda level
        adda #$01
        cmpa #89
        lbgt draw90
        cmpa #79
        lbgt draw80
        cmpa #69
        lbgt draw70
        cmpa #59
        lbgt draw60
        cmpa #49
        bgt draw50
        cmpa #39
        bgt draw40
        cmpa #29
        bgt draw30
        cmpa #19
        bgt draw20
        cmpa #9
        bgt draw10
        lda tmp
        ldb #$30
        jsr draw_number0
        lda level
        adda #01
        lbra digit_2
draw10:
        lda tmp
        ldb #$30
        jsr draw_number1
        lda level
        suba #09
        bra digit_2
draw20:
        lda tmp
        ldb #$30
        jsr draw_number2
        lda level
        suba #19
        bra digit_2
draw30:
        lda tmp
        ldb #$30
        jsr draw_number3
        lda level
        suba #29
        bra digit_2
draw40:
        lda tmp
        ldb #$30
        jsr draw_number4
        lda level
        suba #39
        bra digit_2
draw50:
        lda tmp
        ldb #$30
        jsr draw_number5
        lda level
        suba #49
        bra digit_2
draw60:
        lda tmp
        ldb #$30
        jsr draw_number6
        lda level
        suba #59
        bra digit_2
draw70:
        lda tmp
        ldb #$30
        jsr draw_number7
        lda level
        suba #69
        bra digit_2
draw80:
        lda tmp
        ldb #$30
        jsr draw_number8
        lda level
        suba #79
        bra digit_2
draw90:
        lda tmp
        ldb #$30
        jsr draw_number9
        lda level
        suba #89
        bra digit_2
digit_2:
        cmpa #8
        bgt draw9
        cmpa #7
        bgt draw8
        cmpa #6
        bgt draw7
        cmpa #5
        bgt draw6
        cmpa #4
        bgt draw5
        cmpa #3
        bgt draw4
        cmpa #2
        bgt draw3
        cmpa #1
        bgt draw2
        cmpa #0
        bgt draw1
        
        lda tmp
        ldb #$40
        jsr draw_number0
        rts
draw1:        
        lda tmp
        ldb #$40
        jsr draw_number1
        rts
draw2:        
        lda tmp
        ldb #$40
        jsr draw_number2
        rts
draw3:        
        lda tmp
        ldb #$40
        jsr draw_number3
        rts
draw4:        
        lda tmp
        ldb #$40
        jsr draw_number4
        rts
draw5:        
        lda tmp
        ldb #$40
        jsr draw_number5
        rts
draw6:        
        lda tmp
        ldb #$40
        jsr draw_number6
        rts
draw7:        
        lda tmp
        ldb #$40
        jsr draw_number7
        rts
draw8:        
        lda tmp
        ldb #$40
        jsr draw_number8
        rts
draw9:        
        lda tmp
        ldb #$40
        jsr draw_number9
        rts

draw_string:
        ;x= string loc
        ;a= y
        ;b= x
        ;tmp+1 = scale

        

        stx sprites_left
        std tmp3
        ;jsr draw_number0
        ;lda #$08
        ;sta wall_switch


string_loop:
        ldx sprites_left
        lda  ,x+
        ;leax 1,x
        stx sprites_left

        cmpa #$80
        lbeq done_string
        cmpa " "
        lbeq next_letter
        
        cmpa #48
        bne not_str_0
        ldd tmp3
        jsr draw_number0
        jmp next_letter
not_str_0:
        cmpa #49
        bne not_str_1
        ldd tmp3
        jsr draw_number1
        jmp next_letter
not_str_1:
        cmpa #50
        bne not_str_2
        ldd tmp3
        jsr draw_number2
        jmp next_letter
not_str_2:
        cmpa #51
        bne not_str_3
        ldd tmp3
        jsr draw_number3
        jmp next_letter
not_str_3:
        cmpa #52
        bne not_str_4
        ldd tmp3
        jsr draw_number4
        jmp next_letter
not_str_4:
        cmpa #53
        bne not_str_5
        ldd tmp3
        jsr draw_number5
        jmp next_letter
not_str_5:
        cmpa #54
        bne not_str_6
        ldd tmp3
        jsr draw_number6
        jmp next_letter
not_str_6:
        cmpa #55
        bne not_str_7
        ldd tmp3
        jsr draw_number7
        jmp next_letter
not_str_7:
        cmpa #56
        bne not_str_8
        ldd tmp3
        jsr draw_number8
        jmp next_letter
not_str_8:
        cmpa #57
        bne not_str_9
        ldd tmp3
        jsr draw_number9
        jmp next_letter
not_str_9:
        cmpa "A"
        bne not_str_a
        ldd tmp3
        jsr draw_letter_a
        jmp next_letter
not_str_a:
        cmpa "B"
        bne not_str_b
        ldd tmp3
        jsr draw_letter_b
        jmp next_letter
not_str_b:
        cmpa "C"
        bne not_str_c
        ldd tmp3
        jsr draw_letter_c
        jmp next_letter
not_str_c:
        cmpa "D"
        bne not_str_d
        ldd tmp3
        jsr draw_letter_d
        jmp next_letter
not_str_d:
        cmpa "E"
        bne not_str_e
        ldd tmp3
        jsr draw_letter_e
        jmp next_letter
not_str_e:
        cmpa "F"
        bne not_str_f
        ldd tmp3
        jsr draw_letter_f
        jmp next_letter
not_str_f:
        cmpa "G"
        bne not_str_g
        ldd tmp3
        jsr draw_letter_g
        jmp next_letter
not_str_g:
        cmpa "H"
        bne not_str_h
        ldd tmp3
        jsr draw_letter_h
        jmp next_letter
not_str_h:
        cmpa "I"
        bne not_str_i
        ldd tmp3
        jsr draw_letter_i
        jmp next_letter
not_str_i:
        cmpa "J"
        bne not_str_j
        ldd tmp3
        jsr draw_letter_j
        jmp next_letter
not_str_j:
        cmpa "K"
        bne not_str_k
        ldd tmp3
        jsr draw_letter_k
        jmp next_letter
not_str_k:
        cmpa "L"
        bne not_str_l
        ldd tmp3
        jsr draw_letter_l
        jmp next_letter
not_str_l:
        cmpa "M"
        bne not_str_m
        ldd tmp3
        jsr draw_letter_m
        jmp next_letter
not_str_m:
        cmpa "N"
        bne not_str_n
        ldd tmp3
        jsr draw_letter_n
        jmp next_letter
not_str_n:
        cmpa "O"
        bne not_str_o
        ldd tmp3
        jsr draw_letter_o
        jmp next_letter
not_str_o:
        cmpa "P"
        bne not_str_p
        ldd tmp3
        jsr draw_letter_p
        bra next_letter
not_str_p:
        cmpa "Q"
        bne not_str_q
        ldd tmp3
        jsr draw_letter_q
        bra next_letter
not_str_q:
        cmpa "R"
        bne not_str_r
        ldd tmp3
        jsr draw_letter_r
        bra next_letter
not_str_r:
        cmpa "S"
        bne not_str_s
        ldd tmp3
        jsr draw_letter_s
        bra next_letter
not_str_s:
        cmpa "T"
        bne not_str_t
        ldd tmp3
        jsr draw_letter_t
        bra next_letter
not_str_t:
        cmpa "U"
        bne not_str_u
        ldd tmp3
        jsr draw_letter_u
        bra next_letter
not_str_u:
        cmpa "V"
        bne not_str_v
        ldd tmp3
        jsr draw_letter_v
        bra next_letter
not_str_v:
        cmpa "W"
        bne not_str_w
        ldd tmp3
        jsr draw_letter_w
        bra next_letter
not_str_w:
        cmpa "X"
        bne not_str_x
        ldd tmp3
        jsr draw_letter_x
        bra next_letter
not_str_x:
        cmpa "Y"
        bne not_str_y
        ldd tmp3
        jsr draw_letter_y
        bra next_letter
not_str_y:
        cmpa "Z"
        bne not_str_z
        ldd tmp3
        jsr draw_letter_z
        bra next_letter
not_str_z:
        ;ldd tmp3
        ;jsr draw_number0

next_letter:
        lda tmp3+1
        adda tmp+1
        adda tmp+1
        adda tmp+1
        sta tmp3+1
        jmp string_loop

done_string:
        rts


;move_pen7f_to_d:
;        std move_tmp
;
;        ldb #63
;        stb $04
;        ldd move_tmp
;        jsr move_pen_d
;        ldd move_tmp
;        jsr move_pen_d
;        rts


draw_omegrce:
        lda #47
        ldb #-110
        jsr draw_big_o
        lda #47
        ldb #-55
        jsr draw_big_m
        lda #47
        ldb #$00
        jsr draw_big_e
        lda #47
        ldb #55
        jsr draw_big_g
        lda #-7
        ldb #-110
        jsr draw_big_c
        lda #-7
        ldb #-55
        jsr draw_big_h
        lda #-7
        ldb #55
        jsr draw_big_s
        lda #-7
        ldb #110
        jsr draw_big_e
        rts


draw_1_player:
        lda #$04
        sta tmp+1

        lda #-70
        ldb #-40
        jsr draw_number1
        lda #-70
        ldb #-20
        jsr draw_letter_p
        lda #-70
        ldb #-10
        jsr draw_letter_l
        lda #-70
        ldb #-00
        jsr draw_letter_a
        lda #-70
        ldb #10
        jsr draw_letter_y
        lda #-70
        ldb #20
        jsr draw_letter_e
        lda #-70
        ldb #30
        jsr draw_letter_r
        rts

draw_2_players:
        lda #$04
        sta tmp+1

        lda #-70
        ldb #-40
        jsr draw_number2
        lda #-70
        ldb #-20
        jsr draw_letter_p
        lda #-70
        ldb #-10
        jsr draw_letter_l
        lda #-70
        ldb #0
        jsr draw_letter_a
        lda #-70
        ldb #10
        jsr draw_letter_y
        lda #-70
        ldb #20
        jsr draw_letter_e
        lda #-70
        ldb #30
        jsr draw_letter_r
        lda #-70
        ldb #40
        jsr draw_letter_s
        rts


draw_copyright:
        lda #$02
        sta tmp+1

        lda #-47
        ldb #-70
        jsr draw_letter_c
        lda #-47
        ldb #-60
        jsr draw_letter_o
        lda #-47
        ldb #-50
        jsr draw_letter_p
        lda #-47
        ldb #-40
        jsr draw_letter_y
        lda #-47
        ldb #-30
        jsr draw_letter_r
        lda #-47
        ldb #-20
        jsr draw_letter_i
        lda #-47
        ldb #-10
        jsr draw_letter_g
        lda #-47
        ldb #00
        jsr draw_letter_h
        lda #-47
        ldb #10
        jsr draw_letter_t
        lda #-47
        ldb #30
        jsr draw_number1
        lda #-47
        ldb #40
        jsr draw_number9
        lda #-47
        ldb #50
        jsr draw_number9
        lda #-47
        ldb #60
        jsr draw_number8
        
        lda #-67
        ldb #-100
        jsr draw_letter_c
        lda #-67
        ldb #-90
        jsr draw_letter_h
        lda #-67
        ldb #-80
        jsr draw_letter_r
        lda #-67
        ldb #-70
        jsr draw_letter_i
        lda #-67
        ldb #-60
        jsr draw_letter_s
        lda #-67
        ldb #-50
        jsr draw_letter_t
        lda #-67
        ldb #-40
        jsr draw_letter_o
        lda #-67
        ldb #-30
        jsr draw_letter_p
        lda #-67
        ldb #-20
        jsr draw_letter_h
        lda #-67
        ldb #-10
        jsr draw_letter_e
        lda #-67
        ldb #00
        jsr draw_letter_r
        lda #-67
        ldb #20
        jsr draw_letter_l
        lda #-67
        ldb #40
        jsr draw_letter_t
        lda #-67
        ldb #50
        jsr draw_letter_u
        lda #-67
        ldb #60
        jsr draw_letter_m
        lda #-67
        ldb #70
        jsr draw_letter_b
        lda #-67
        ldb #80
        jsr draw_letter_e
        lda #-67
        ldb #90
        jsr draw_letter_r

        rts


draw_letter_a:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_a
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_b:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_b
        lda   #$06
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_c:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_c
        lda   #$03
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_d:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_d
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_e:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_e
        lda   #$06
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_f:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_f
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_g:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_g
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_h:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_h
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_h2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_i:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_i
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_j:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_j
        lda   #$03
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_j2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_k:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_k
        lda   #$02
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_k2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_l:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_l
        lda   #$02
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_m:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_m
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_n:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_n
        lda   #$03
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_o:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_o
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_p:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_p
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_q:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_q
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_r:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_r
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_s:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_s
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_t:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_t
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_t2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_u:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_u
        lda   #$03
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_v:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_v
        lda   #$02
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_w:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_w
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_x:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_x
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_x2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_y:
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_y
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_y2
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_letter_z:
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #letter_z
        lda   #$03
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
        
draw_number0:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number0
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number1:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number1
        lda   #$01
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number2:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number2
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number3:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number3
        lda   #$06
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number4:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number4
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number5:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number5
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number6:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number6
        lda   #$05
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number7:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number7
        lda   #$02
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number8:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number8
        lda   #$06
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_number9:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #number9
        lda   #$04
        ldb   tmp+1
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts

draw_big_c:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_c
        lda   #$08
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts

draw_big_h:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_h
        lda   #$0c
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_a:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_a
        lda   #$07
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_s:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_s
        lda   #$0c
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_e:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_e
        lda   #$0c
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_m:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_m
        lda   #$0c
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_g:  ; a=y b=x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_g
        lda   #$0c
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts
draw_big_o:  ; a=y b=x
        std tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_o
        lda   #$04
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        ldd tmp2
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #big_o2
        lda   #$04
        ldb   tmp
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        rts


draw_sq_out:
        lda wall_status1
        beq not_sq_out1
        dec wall_status1
        
        ldd   #$7f80                    ;Get y
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx    #horiz_wall
        lda   #$02
        ldb   #$80
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sq_out1:
        lda wall_status2
        beq not_sq_out2
        dec wall_status2

        ldd   #$8080                    ;Get y
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #horiz_wall
        lda   #$02
        ldb   #$80
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_sq_out2:
        lda wall_status3
        beq not_sq_out3
        dec wall_status3

        ldd   #$8080                    ;Get y
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #vert_wall
        lda   #$02
        ldb   #$80
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sq_out3:
        lda wall_status4
        beq not_sq_out4
        dec wall_status4

        
        ldd   #$807f                    ;Get y
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldx   #vert_wall
        lda   #$02
        ldb   #$80
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_sq_out4:
        rts


draw_oct_out:

        lda wall_status1
        beq not_oct_out1
        dec wall_status1

        ldd   #$7fc0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)

        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d

        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out1:
        lda wall_status2
        beq not_oct_out2
        dec wall_status2
        
        ldd   #$80c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d

        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out2:
        lda wall_status3
        beq not_oct_out3
        dec wall_status3

        
        ldd   #$c080                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d

        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out3:
        lda wall_status4
        beq not_oct_out4
        dec wall_status4

        ldd   #$c07f                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out4:
        lda wall_status5
        beq not_oct_out5
        dec wall_status5
        
        ldd   #$4080                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out5:
        lda wall_status6
        beq not_oct_out6
        dec wall_status6

        ldd   #$8040                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d

        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out6:
        lda wall_status7
        beq not_oct_out7
        dec wall_status7

        ldd   #$c080                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d

        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_oct_out7:
        lda wall_status8
        beq not_oct_out8
        dec wall_status8

        ldd   #$7f40                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d

        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_oct_out8:
        rts

draw_d_out:

        lda wall_status5
        beq not_d_out5
        dec wall_status5
        
        ldd   #$0080                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_d_out5:
        lda wall_status6
        beq not_d_out6
        dec wall_status6

        ldd   #$8000                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d

        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_d_out6:
        lda wall_status7
        beq not_d_out7
        dec wall_status7

        ldd   #$0080                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d

        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_d_out7:
        lda wall_status8
        beq not_d_out8
        dec wall_status8

        ldd   #$7f00                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d

        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_d_out8:
        rts



draw_lg_oct_in:
        lda wall_status9
        beq not_lg_oct9
        dec wall_status9
        
        ldd   #$41e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$40
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$40
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct9:
        lda wall_status10
        beq not_lg_oct10
        dec wall_status10
        
        ldd   #$c0e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$40
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$40
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct10:
        lda wall_status11
        beq not_lg_oct11
        dec wall_status11

        ldd   #$e0c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$40
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$40
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct11:
        lda wall_status12
        beq not_lg_oct12
        dec wall_status12
        
        ldd   #$e041                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$40
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$40
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct12:
        lda wall_status13
        beq not_lg_oct13
        dec wall_status13

        ldd   #$21c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$1f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$1f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct13:
        lda wall_status14
        beq not_lg_oct14
        dec wall_status14

        ldd   #$c021                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$1f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$1f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct14:
        lda wall_status15
        beq not_lg_oct15
        dec wall_status15

        ldd   #$e0c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$1f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$1f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_oct15:
        lda wall_status16
        beq not_lg_oct16
        dec wall_status16

        ldd   #$4121                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$1f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$1f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_lg_oct16:
        rts


draw_sm_oct_in:
        
        lda wall_status9
        beq not_sm_oct9
        dec wall_status9

        ldd   #$23f1                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$20
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$20
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct9:
        lda wall_status10
        beq not_sm_oct10
        dec wall_status10

        ldd   #$dff1                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$20
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$20
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct10:
        lda wall_status11
        beq not_sm_oct11
        dec wall_status11

        ldd   #$f0e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$20
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$20
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct11:
        lda wall_status12
        beq not_sm_oct12
        dec wall_status12

        ldd   #$f025                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$20
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$20
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct12:
        lda wall_status13
        beq not_sm_oct13
        dec wall_status13

        ldd   #$12e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$10
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct13:
        lda wall_status14
        beq not_sm_oct14
        dec wall_status14

        ldd   #$df13                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$10
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct14:
        lda wall_status15
        beq not_sm_oct15
        dec wall_status15

        ldd   #$f0e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$10
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sm_oct15:
        lda wall_status16
        beq not_sm_oct16
        dec wall_status16
        
        ldd   #$2313                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$10
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_sm_oct16:
        rts
        

draw_diam_in:
        
        lda wall_status13
        beq not_diag13
        dec wall_status13

        ldd   #$00d0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$2f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_diag13:
        lda wall_status14
        beq not_diag14
        dec wall_status14

        ldd   #$d000                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$2f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_diag14:
        lda wall_status16
        beq not_diag16
        dec wall_status16

        ldd   #$3000                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$2f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_diag16:
        lda wall_status15
        beq not_diag15
        dec wall_status15
        
        ldd   #$00d0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$2f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_diag15:
        rts

draw_lg_d_in:
        
        lda wall_status13
        beq not_lg_diag13
        dec wall_status13

        ldd   #$00a0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$5f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_diag13:
        lda wall_status14
        beq not_lg_diag14
        dec wall_status14

        ldd   #$a000                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$5f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f7f
        jsr    draw_to_d
        
        ;ldx   #dia_up_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_diag14:
        lda wall_status16
        beq not_lg_diag16
        dec wall_status16

        ldd   #$6000                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$5f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_diag16:
        lda wall_status15
        beq not_lg_diag15
        dec wall_status15
        
        ldd   #$00a0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$5f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$817f
        jsr    draw_to_d
        
        ;ldx   #dia_down_wall
        ;lda   #$01
        ;ldb   #$10
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_lg_diag15:
        rts


draw_sq_in:
        lda wall_status9
        beq not_sq_in9
        dec wall_status9

        ldd   #$20e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sq_in9:
        lda wall_status10
        beq not_sq_in10
        dec wall_status10

        ldd   #$e0e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_sq_in10:
        lda wall_status11
        beq not_sq_in11
        dec wall_status11

        ldd   #$e0e0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_sq_in11:
        lda wall_status12
        beq not_sq_in12
        dec wall_status12

        ldd   #$e020                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$3f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$3f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_sq_in12:
        rts
        



draw_lg_sq_in:        

        lda wall_status9
        beq not_lg_sq_in9
        dec wall_status9

        ldd   #$40c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_sq_in9:
        lda wall_status10
        beq not_lg_sq_in10
        dec wall_status10
        
        ldd   #$c0c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$007f
        jsr    draw_to_d
        
        ;ldx   #horiz_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)

not_lg_sq_in10:
        lda wall_status11
        beq not_lg_sq_in11
        dec wall_status11

        ldd   #$c0c0                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
        
not_lg_sq_in11:
        lda wall_status12
        beq not_lg_sq_in12
        dec wall_status12

        ldd   #$c040                    ;Get yx
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        
        lda    #$7f
        sta    VIA_t1_cnt_lo          
        clr    Vec_Misc_Count
        ldd    #$7f00
        jsr    draw_to_d
        
        ;ldx   #vert_wall
        ;lda   #$01
        ;ldb   #$7f
        ;jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
not_lg_sq_in12:
        rts
        

draw_explosion:
        ; a = y
        ; b = x
        ; scale =  tmp
        
        std tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+2
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+4
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+6
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+8
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+10
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+12
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        ldd tmp2
        jsr move_pen7f_to_d
        lda tmp
;        lsla
        sta VIA_t1_cnt_lo
        ldd exp_dots+14
        jsr move_pen_d
        jsr dot_here
        jsr reset0ref
        
        rts
        
        jsr    move_pen7f_to_d           ;go to (PosX,PosY)
        lda    tmp
        sta    VIA_t1_cnt_lo
        clr    Vec_Misc_Count
        ldd    #$003f
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$0081
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$003f
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$3f00
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$8100
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$3f00
        jsr    draw_to_d
        ldd    #$3f3f
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$8181
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$3f3f
        jsr    draw_to_d
        ldd    #$c13f
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$7f81
        jsr    draw_to_d
        clr    Vec_Misc_Count
        ldd    #$c13f
        jsr    draw_to_d
        jsr    reset0ref
        rts


draw_pl1_score:
        lda #$02
        sta tmp+1
        
        lda   #20                      ;Get y
        ldb   #-13                       ;Get x
        ldx   #score_1
        jsr   draw_string
        rts
draw_pl2_score:
        lda players
        beq  no_pl2_score

        lda #$02
        sta tmp+1
        lda   #-20                      ;Get y
        ldb   #-13                      ;Get x
        ldx   #score_2
        jsr   draw_string

no_pl2_score:
        
        rts



draw_scores2:
        lda #$02
        sta tmp+1
        
        lda   #20                      ;Get y
        ldb   #-13                       ;Get x
        ldx   #score_1
        jsr   draw_string
        
        lda players
        beq  no_2nd_score2

        lda   #-20                      ;Get y
        ldb   #-13                      ;Get x
        ldx   #score_2
        jsr   draw_string

no_2nd_score2:
        
        rts

;******************
;draw_scores
;******************

draw_scores:
        lda   #$fd                      ;Get string Height
        ldb   #$2a                      ;Get string Width
        std   $c82a                     ;Store Height/Width in BIOS
        lda   #20                      ;Get y
        ldb   #-15                       ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldu   #score_1                  ;Get address of string
        jsr   display_string            ;Print the string
        jsr   reset0ref                 ;Move pen to (0,0)
        
        lda players
        beq  no_2nd_score

        lda   #-20                      ;Get y
        ldb   #-15                      ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        ldu   #score_2                  ;Get address of string
        jsr   display_string            ;Print the string
        jsr   reset0ref                 ;Move pen to (0,0)
no_2nd_score:        
        rts

draw_mines:
        lda   #MAX_MINES                  ;sprites_left is the counter
        sta   sprites_left               ;Create loop variable
        ldy   #mine_data_1
mines_loop:
        lda   0,y                       ;load status byte
        beq   end_mines                 ;If status is 0, don't draw object ("dead")
draw_mines2:        
        lda   1,y                       ;Get y
        ldb   2,y                       ;Get x
        jsr   move_pen7f_to_d           ;go to (PosX,PosY)
        lda   0,y
        cmpa #$03
        bne not_mine_3
        ldx  #mine3
        lda  #05
        bra do_mine
not_mine_3:
        cmpa #$02
        bne not_mine_2
        ldx  #mine2
        lda  #03
        bra do_mine
not_mine_2:        
        ldx   #mine1
        lda   #03                       ;Get number of vectors
do_mine:        
        ldb   #08                       ;scale
        jsr   move_draw_VL4             ;Draw it
        jsr   reset0ref                 ;Move pen to (0,0)
end_mines:
        leay  3,y                      ;Next object structure
        dec   sprites_left              ;Decrement the counter
        bmi   end_draw_mines
        bra   mines_loop                ;Not done, back to start of loop
end_draw_mines:        
        rts
;**************
;init_sprites
;Turns all sprites off
;**************
init_sprites:     
        
        lda #21
        sta no_sprites           
        sta sprites_left
        
                                ;Turn all sprites off
        ldx #sprite_1           ;Get address of first sprite
        ldd #$0000

reset_sprites:
        sta state,x             ;Store 0 in state
        std deltax,x            ;Store 0 in Delta X
        std deltay,x            ;Store 0 in Delta Y
        leax #15,x              ;Get next sprite
        dec sprites_left                    
        bne reset_sprites       ;Loop back
     
        rts


;*******************
;set_sq_out_wall
;Sets up sprites for square outer wall 
;Uses sprites 1-8
;*******************
set_sq_out_wall:
        
        lda #$7b           ;Set up bounce boundaries
        sta out_blk_1x
        lda #$7b
        sta out_blk_1y
        lda #$7f
        sta out_diag_1
        sta out_diag_2
        
        ldd #draw_sq_out
        std outer

        rts

;*******************
;set_sq_in_wall
;Sets up sprites for small square inner wall 
;Uses sprites 9-15
;*******************
set_sq_in_wall:

        lda #$20           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$20
        sta in_blk_1y
        lda #$20          
        sta in_blk_2x
        lda #$20
        sta in_blk_2y
        lda #$00   
        sta in_diag_1
        sta in_diag_2
        
        ldd #draw_sq_in
        std inner

        rts

;*******************
;set_sq_lg_wall
;Sets up sprites for large square inner wall 
;Uses sprites 9-15
;*******************
set_sq_lg_wall:
        
        lda #$40           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$40
        sta in_blk_1y
        lda #$40          
        sta in_blk_2x
        lda #$40
        sta in_blk_2y
        lda #$00   
        sta in_diag_1
        sta in_diag_2
        
        ldd #draw_lg_sq_in
        std inner

        rts

;***************
;set_oct_out_wall
;Sets up sprites for octagonal outer wall
;Uses sprites 1-8
;***************
set_oct_out_wall:
        lda #$7b           ;Set up bounce boundaries
        sta out_blk_1x
        lda #$7b
        sta out_blk_1y
        lda #$40
        sta out_diag_1
        lda #$3f
        sta out_diag_2
        
        ldd #draw_oct_out
        std outer

        rts

;***************
;set_d_o_wall
;Sets up sprites for diamond outer wall
;Uses sprites 1-8
;***************
set_d_o_wall:
        lda #$7f           ;Set up bounce boundaries
        sta out_blk_1x
        lda #$7f
        sta out_blk_1y
        lda #$00
        sta out_diag_1
        lda #$7d
        sta out_diag_2
        
        ldd #draw_d_out
        std outer

        rts


;***************
;set_oct_in_wall
;Sets up sprites for large octagonal inner wall
;Uses sprites 9-16
;***************
set_oct_in_wall:
        lda #$21           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$41
        sta in_blk_1y
        lda #$41          
        sta in_blk_2x
        lda #$21
        sta in_blk_2y
        lda #$41
        sta in_diag_1
        lda #$62
        sta in_diag_2
        
        ldd #draw_lg_oct_in
        std inner
        
        
        rts

;***************
;set_oct_sm_wall
;Sets up sprites for small octagonal inner wall
;Uses sprites 9-16
;***************
set_oct_sm_wall:
        
        lda #$13           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$23
        sta in_blk_1y
        lda #$23          
        sta in_blk_2x
        lda #$13
        sta in_blk_2y
        lda #$23
        sta in_diag_1
        lda #$36
        sta in_diag_2
        
        ldd #draw_sm_oct_in
        std inner
        
        rts

;***************
;set_diam_wall
;Sets up sprites for small diamond inner wall
;Uses sprites 9-16
;***************
set_diam_wall:
        
        lda #$00           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$00
        sta in_blk_1y
        lda #$00          
        sta in_blk_2x
        lda #$00
        sta in_blk_2y
        lda #$30
        sta in_diag_1
        lda #$36
        sta in_diag_2
        
        ldd #draw_diam_in
        std inner
        
        rts

;***************
;set_lg_d_wall
;Sets up sprites for small diamond inner wall
;Uses sprites 9-16
;***************
set_lg_d_wall:
        
        lda #$00           ;Set up bounce boundaries
        sta in_blk_1x
        lda #$00
        sta in_blk_1y
        lda #$00          
        sta in_blk_2x
        lda #$00
        sta in_blk_2y
        lda #$60
        sta in_diag_1
        lda #$66
        sta in_diag_2
        
        ldd #draw_lg_d_in
        std inner
        
        rts


PF793:                  rts

get_pl_game:
                        std   $C84F
                        tsta
                        beq   PF7B1
                        lda   #$01
PF7B1:                  tstb
                        beq   PF7B6
                        ldb   #$01
PF7B6:                  std   $C879
                        jsr   dptoC8
                        ldd   #$F850
                        std   $2A
                        sta   $3C
                        bra   handle_buttons

button_h_loop:
                        jsr   waitrecal; 
                        clra
                        jsr   read_switches; 
                        jsr   dec_counters
                        jsr   intensity_to_7f
                        lda   $C879
                        ldy   #player_string
                        jsr   dis_opt_string
                        lda   $C87A
                        ldy   #game_string
                        jsr   dis_opt_string
                        jsr   dptoC8
                        lda   0x3C
                        beq   check_l_counter
                        lda   0x0F
                        bne   handle_buttons
                        clr   0x3C
check_l_counter:
                        lda   0x2F
                        beq   PF793
                        lda   0x2E
                        bne   button_h_loop
                        lda   0x15;    /* Start game if button 4 pressed. */
                        bne   PF793;  
                        lda   0x12;    /* Check button 1. */
                        beq   PF810;  
                        lda   0x79;   
                        beq   PF810;  
                        inca ;          /* Increment player count. */
                        cmpa  0x4F;   
                        bls   PF80C;  
                        lda   #0x01;  
PF80C:                  sta   0x79;   
                        bra   handle_buttons;  
PF810:                  lda   0x7A;   
                        beq   button_h_loop;  
                        ldb   0x13;     /* Check button 2. */
                        beq   PF821;  
                        inca ;           /* Increment game number. */
                        cmpa  0x50;   
                        bls   PF82A;  
                        lda   #0x01;  
                        bra   PF82A;  
PF821:                  ldb   0x14;     /* Check button 3. */
                        beq   button_h_loop;  
                        deca ;           /* Decrement game number. */
                        bne   PF82A;  
                        lda   0x50;   
PF82A:                  sta   0x7A;   

handle_buttons:
                        lda   #$fe
                        sta   $2F
                        coma
                        sta   $2E
                        jmp   button_h_loop

