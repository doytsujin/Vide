BANK 0
EQU $00 false
LABEL $0100 ScreenW
LABEL $0100 ScreenH
EQU $08 TileCountX
COMMENT_LABEL $08 Must be power of 2
EQU $08 TileCountY
COMMENT_LABEL $08 Must be power of 2
EQU $20 TileW
EQU $20 TileH
LABEL $00F0 EmptySpaceH
COMMENT_LABEL $00F0 Height of empty space over levels
LABEL $FF10 WorldTopY
EQU $14 DrawScale
COMMENT_LABEL $14 15        ;Scale value used when drawing sprite-vectors
EQU $00 StartLevel
EQU $02 Fixed
COMMENT_LABEL $02 Nr of bits to use for fixed point coords (need to change more than this)
EQU $00 Immortal
COMMENT_LABEL $00 Set to 1 to make ship immortal
EQU $00 Level1Only
COMMENT_LABEL $00 Set to 1 to only include level 1 (smaller binary for debug)
EQU $00 DemoRecord
COMMENT_LABEL $00 Set to 1 to record user input for demo-playback.
EQU $40 RefuelDistance
COMMENT_LABEL $40 Max Y distance from ship to fuel when refueling.
EQU $3C BeamLength
COMMENT_LABEL $3C Length of tractor beam (distance to pod)
EQU $08 ShipArea
COMMENT_LABEL $08 Hit area for ship
EQU $18 PlantArea
COMMENT_LABEL $18 Hit area, shot and ship vs powerplant
EQU $06 PodArea
COMMENT_LABEL $06 Hit area, carried pod vs gunshots, level, fuelcells
EQU $18 FuelArea
COMMENT_LABEL $18 Hit area, shots and ship vs fuelcells
EQU $0E GunArea
COMMENT_LABEL $0E Hit area, ship shots vs guns
EQU $0A SwitchArea
COMMENT_LABEL $0A Hit area, shot vs switch
EQU $0E StationaryPodArea
COMMENT_LABEL $0E Hit area, ship vs stationary pod
LABEL $00D8 DefaultButtonConfig
EQU $30 WallIntensity
EQU $16 LevelEntry
EQU $00 leSizeX
COMMENT_LABEL $00 level width in tiles (must be first byte)
EQU $01 leSizeY
COMMENT_LABEL $01 level height in tiles
EQU $02 leTiles
COMMENT_LABEL $02 address of tiles
EQU $04 leGuns
COMMENT_LABEL $04 address to list of guns
EQU $06 leFuel
COMMENT_LABEL $06 address to list of fuel pods
EQU $08 leOrbX
COMMENT_LABEL $08 X/Y coords of orb
EQU $0A leOrbY
EQU $0C lePowerX
COMMENT_LABEL $0C X/Y coords of powerplant
EQU $0E lePowerY
EQU $10 leRestart
COMMENT_LABEL $10 pointer to list of restart points
EQU $12 leDoors
COMMENT_LABEL $12 pointer to list of doors
EQU $14 leSwitches
COMMENT_LABEL $14 pointer to list of doorswitches
EQU $04 SpriteEntry
EQU $00 seLinesRel
COMMENT_LABEL $00 address to vectorlist used when drawing not clipped
EQU $02 seLinesAbs
COMMENT_LABEL $02 address to vectorlist used when drawing clipped
EQU $06 TileEntry
EQU $00 teLinesRel
COMMENT_LABEL $00 address to vectorlist used when drawing not clipped
EQU $02 teLinesAbs
COMMENT_LABEL $02 address to vectorlist used when drawing clipped
EQU $04 teCollisionSub
COMMENT_LABEL $04 address to subroutine for collisiontest
LABEL $F85E convert_a_to_bcd_and_add
LABEL $F256 byte_2_sound_chip
LABEL $F545 clear_256_bytes
LABEL $F272 clear_sound_chip
LABEL $F601 convert_angle_to_rise_run
LABEL $F495 display_string
LABEL $F1AA dptoD0
LABEL $F3DF draw_to_d
LABEL $F434 dwp_with_count
LABEL $F683 move_block2
LABEL $F3B7 move_draw_VL4
LABEL $F2FC move_pen7f_to_d
LABEL $F312 move_pen_d
LABEL $F8D8 check_4_new_hi_score
LABEL $F511 random
LABEL $F1F8 read_joystick
LABEL $F1B4 read_switches
LABEL $F354 reset0ref
LABEL $F610 rot_vec_list2
LABEL $F192 waitrecal
LABEL $C813 stick1_button2
LABEL $C814 stick1_button3
LABEL $C815 stick1_button4
LABEL $C825 LoopCounterHigh
LABEL $C826 LoopCounterLow
LABEL $C829 Pattern
EQU $07 HighscoreEntry
COMMENT_LABEL $07 score + end $80
LABEL $C880 eeprom_buffer
COMMENT_LABEL $C880 32 bytes
LABEL $C880 ButtonConfig
LABEL $C881 BonusGameEnabled
LABEL $C882 Highscores
LABEL $C8A0 UserRamStart
LABEL $C8A0 TemporaryArea
LABEL $C8A0 TempPosXStart
LABEL $C8A1 TempPosX
LABEL $C8A2 TempPosY
LABEL $C8A3 TempTileWY
LABEL $C8A5 TempTileWX
LABEL $C8A7 TempTileWXStart
LABEL $C8A9 TempTilePtr
LABEL $C8AB TempAdjustX
LABEL $C8AC CenterX
LABEL $C8AF CenterY
LABEL $00F0 ALPHA_MAX
LABEL $C8B2 Alpha
LABEL $C8B2 AlphaHi
LABEL $C8B4 AlphaDelta
LABEL $C8B6 ShipAngle
LABEL $C868 LockedShipAngle
COMMENT_LABEL $C868 Angle when using locked thrust (rom unused)
LABEL $C8B7 ShipSpeedX
LABEL $C8B7 ShipSpeedXHi
LABEL $C8B9 ShipSpeedY
LABEL $C8B9 ShipSpeedYHi
LABEL $C8BB ShipX
LABEL $C8BD ShipY
LABEL $C8BF PodX
LABEL $C8C1 PodY
EQU $20 SHIP_DIRMAX
EQU $40 VEC_DIRMAX
EQU $0A ShipVectorCount
EQU $03 ThrustVectorCount
LABEL $C8C3 ScrollX
LABEL $C8C4 ScrollY
LABEL $C8C5 NeedRefresh
LABEL $C8C6 ViewX
LABEL $C8C8 ViewY
EQU $00 NormalGame
EQU $01 HardGame
EQU $02 TimeAttackGame
EQU $03 BonusGame
EQU $04 DemoGame
LABEL $C87A GameMode
COMMENT_LABEL $C87A (rom game version)
LABEL $C8CA CurLevelEntry
LABEL $C8CC CurLevelSizeX
LABEL $C8CD CurLevelEndX
LABEL $C8CF CurLevelEndY
LABEL $C8D1 CurLevel
LABEL $C8D2 _clip_xmin
LABEL $C8D4 _clip_ymin
LABEL $C8D6 _clip_xmax
LABEL $C8D8 _clip_ymax
EQU $06 DigitCount
LABEL $C8DA PlayerScore
LABEL $C8E0 ShipLives
LABEL $C8E1 ShipFuel
LABEL $C8DA DemoBase
LABEL $C8DA DemoMode
LABEL $C8DB DemoPtr
LABEL $C8DD DemoCounter
LABEL $C86C DemoSelected
COMMENT_LABEL $C86C temp for which demo was selected in menu (rom unused)
LABEL $C8E3 TimeAttackTime
EQU $01 FRAME2MASK
LABEL $00C0 FRAME3MASK
EQU $03 FRAME4MASK
LABEL $00C1 FRAME6MASK
COMMENT_LABEL $00C1 %11000001
EQU $07 FRAME8MASK
LABEL $00C3 FRAME12MASK
COMMENT_LABEL $00C3 %11000011
EQU $0F FRAME16MASK
EQU $1F FRAME32MASK
LABEL $00CF FRAME48MASK
COMMENT_LABEL $00CF %11001111
EQU $3F FRAME64MASK
LABEL $00DF FRAME96MASK
COMMENT_LABEL $00DF %11011111
LABEL $00FF FRAME192MASK
COMMENT_LABEL $00FF %11111111
LABEL $C8E4 FrameCounter
LABEL $C8E5 LevelClearLabel
COMMENT_LABEL $C8E5 256 bytes from this label is cleared when a level is finished
EQU $01 ShieldFlag
COMMENT_LABEL $01 ship shield is active
EQU $02 RefuelFlag
COMMENT_LABEL $02 ship is refueling
EQU $04 HasOrbFlag
COMMENT_LABEL $04 ship is carrying orb
EQU $08 PullFlag
COMMENT_LABEL $08 ship is pulling orb from orb-platform
EQU $10 InactiveFlag
COMMENT_LABEL $10 ship is invisible and cannot be controlled (exploding, materializing)
EQU $20 ThrustFlag
COMMENT_LABEL $20 ship is thrusting
EQU $40 GameOverFlag
COMMENT_LABEL $40 set when game over
LABEL $0080 ReverseGravFlag
COMMENT_LABEL $0080 Reverse gravity
LABEL $0100 NoLandscapeFlag
COMMENT_LABEL $0100 Landscape is invisible
LABEL $0200 HomingGunShotsFlag
COMMENT_LABEL $0200 Homing gunshots (hard gamemode)
LABEL $0400 LockedThrustFlag
COMMENT_LABEL $0400 Locked thrust angle active (hard gamemode)
LABEL $C8E5 GameFlags1
LABEL $C8E6 GameFlags2
LABEL $C8E7 GunsActive
EQU $05 GunEntry
EQU $00 geGunX
COMMENT_LABEL $00 x
EQU $02 geGunY
COMMENT_LABEL $02 y
EQU $04 geGunSprite
COMMENT_LABEL $04 sprite id
EQU $08 MaxFuelCount
LABEL $C8E9 FuelActive
LABEL $C8EA FuelAmounts
EQU $10 FullFuel
COMMENT_LABEL $10 Amount of fuel in a full cell
EQU $04 FuelEntry
EQU $20 DoorSize
COMMENT_LABEL $20 Opencounter for door
EQU $05 DoorEntry
EQU $00 deDoorDir
COMMENT_LABEL $00 Direction door closes: 0=right, 1=up
EQU $01 deDoorX
EQU $03 deDoorY
EQU $05 SwitchEntry
EQU $00 seSwitchX
EQU $02 seSwitchY
EQU $04 seSwitchDir
COMMENT_LABEL $04 0=left wall, 1=right wall
LABEL $C8F2 DoorCounter
LABEL $C8F3 PowerLife
LABEL $C8F4 PowerShot
LABEL $C8F5 PerfectBonus
LABEL $C8F6 GunShotActive
EQU $03 MaxGunShots
EQU $07 GunShotAllActive
COMMENT_LABEL $07 Must be in sync with maxgunshots
EQU $08 GunShotEntry
EQU $00 gsShotX
COMMENT_LABEL $00 3 byte world coordinate
EQU $03 gsShotY
COMMENT_LABEL $03 3 byte world coordinate
EQU $06 gsShotVelocX
COMMENT_LABEL $06 Velocity
EQU $07 gsShotVelocY
LABEL $C8F7 GunShotTimer
LABEL $C8F8 GunShotMask
LABEL $C8F9 GunShotDelay
LABEL $C8FA GunShotSpeed
LABEL $C8FB GunShots
EQU $03 MaxFx
LABEL $C913 FxList
EQU $04 ShipShotCount
EQU $09 ShipShotEntry
EQU $00 ssShotActive
COMMENT_LABEL $00 Flag: is shot active?
EQU $01 ssShotX
COMMENT_LABEL $01 3 byte world coordinate
EQU $04 ssShotY
COMMENT_LABEL $04 3 byte world coordinate
EQU $07 ssShotVelocX
COMMENT_LABEL $07 Velocity
EQU $08 ssShotVelocY
LABEL $C91C ShipShotList
EQU $03 SlotCount
LABEL $C940 SoundSlots
LABEL $C86A CheatLives
COMMENT_LABEL $C86A rom unused, <>0 for infinitive lives
LABEL $C86B CheatLevel
COMMENT_LABEL $C86B rom unused, <>0 for select start level
LABEL $C86A Cheat
LABEL $C946 DrawList
LABEL $7E99 eeprom_load
EQU $41 Start
LABEL $7EC5 eeprom_save
LABEL $5F3A ShowTitleScreen
COMMENT_LABEL $5F3A dp=d0
LABEL $296A InitNewGame
COMMENT_LABEL $296A a <> 0 skip random reset
LABEL $283D PrepareLevel
COMMENT_LABEL $283D Calculate level constants
EQU $56 MainLoop
LABEL $0A8E Ship_Update
COMMENT_LABEL $0A8E Update, called from main loop
LABEL $074E UpdateFx
LABEL $1B49 UpdateGuns
LABEL $23DF UpdateShipShots
COMMENT_LABEL $23DF Move all active shots.
LABEL $1C29 UpdateGunShots
LABEL $1F7D UpdateDoors
LABEL $1B05 AdjustFuel
COMMENT_LABEL $1B05 Update ship fuel amount
LABEL $1A0E UpdateFrameCounter
LABEL $049B UpdateSound
LABEL $00B0 GameOver
LABEL $29C5 SetView
LABEL $2B18 RefreshDrawList
LABEL $F289 UpdateSoundChip
LABEL $2A7A DrawLevel
LABEL $0F13 Ship_Draw
LABEL $2654 DrawShipShots
LABEL $1F0C DrawGuns
COMMENT_LABEL $1F0C Draw active guns on level
LABEL $1DFA DrawFuel
COMMENT_LABEL $1DFA Draw active fuel pods on level
LABEL $070C DrawFx
LABEL $1D8B DrawGunShots
LABEL $1E28 DrawOrb
COMMENT_LABEL $1E28 Draw stationary orb + platform on level
LABEL $1E46 DrawPowerplant
COMMENT_LABEL $1E46 Draw powerplant on level
LABEL $2C90 DrawStars
COMMENT_LABEL $2C90 draw stars in empty space
LABEL $1FA8 DrawDoors
LABEL $1F4B DrawSwitches
COMMENT_LABEL $1F4B Draw door switches
LABEL $1A27 DrawDisplay
COMMENT_LABEL $1A27 Draw status panel. Copy to buffer and print as a single string.
LABEL $00B7 maiIsDemo
LABEL $5139 Text_GameOver
LABEL $00B9 _CohenSutherlandClip
LABEL $0430 L37
LABEL $00D6 L38
LABEL $0119 L39
LABEL $011F L40
LABEL $012F L42
LABEL $0135 L43
LABEL $0144 L46
LABEL $014A L47
LABEL $0157 L49
LABEL $015D L50
LABEL $03D3 L53
LABEL $0167 L56
LABEL $0426 L36
LABEL $02AC L58
LABEL $01B9 L59
LABEL $0195 L60
LABEL $019F L61
LABEL $0280 L83
LABEL $01D3 L63
LABEL $01AD L64
LABEL $01B0 L126
LABEL $01C7 L66
LABEL $01CA L127
LABEL $0209 L68
LABEL $01FD L69
LABEL $027E L128
LABEL $023E L72
LABEL $0232 L73
LABEL $0254 L75
LABEL $025E L132
LABEL $0275 L78
LABEL $0290 L84
LABEL $0296 L85
LABEL $029F L87
LABEL $02A6 L88
LABEL $02F5 L92
LABEL $02D2 L93
LABEL $02DC L94
LABEL $03AA L116
LABEL $030D L96
LABEL $02EA L97
LABEL $02ED L129
LABEL $0302 L99
LABEL $0305 L130
LABEL $033E L101
LABEL $0334 L102
LABEL $03A8 L131
LABEL $036E L105
LABEL $0364 L106
LABEL $0383 L108
LABEL $038C L133
LABEL $03A1 L111
LABEL $03BA L117
LABEL $03C0 L118
LABEL $03C9 L120
LABEL $03D0 L121
LABEL $C83F SoundWork
COMMENT_LABEL $C83F current work values
EQU $18 Octave
LABEL $7261 L059582
COMMENT_LABEL $7261 word-tabell, readonly. Frequenzies.
EQU $06 ThrustSoundId
EQU $3A WalkerDestroyedSoundId
EQU $08 GunFireSoundId
EQU $0C ShipFireSoundId
EQU $10 ExtraLifeSoundId
EQU $15 WalkerBounceSoundId
EQU $19 ShieldSoundId
EQU $1D WarpOutSoundId
EQU $21 ExplosionSoundId
EQU $25 PickupSoundId
EQU $29 WarpInSoundId
EQU $2D CountdownSoundId
EQU $31 PlanetExplodeSoundId
EQU $35 PerfectBonusSoundId
LABEL $043A SoundsTable
LABEL $04DD Sound_Thrust
COMMENT_LABEL $04DD a=time, x=sound regs
LABEL $0591 Sound_GunFire
COMMENT_LABEL $0591 a=time, x=sound regs
LABEL $04EF Sound_ShipFire
LABEL $0646 Sound_ExtraLife
COMMENT_LABEL $0646 a=time, x=sound regs
LABEL $04C9 Sound_Dummy
LABEL $0554 Sound_Shield
COMMENT_LABEL $0554 a=time, x=sound regs
LABEL $05A1 Sound_WarpOut
COMMENT_LABEL $05A1 a=time, x=sound regs
LABEL $051B Sound_Explosion
COMMENT_LABEL $051B a=time, x=sound regs
LABEL $0565 Sound_Pickup
COMMENT_LABEL $0565 a=time, x=sound regs
LABEL $05B5 Sound_WarpIn
COMMENT_LABEL $05B5 a=time, x=sound regs
LABEL $06AA Sound_Countdown
COMMENT_LABEL $06AA a=time, x=sound regs
LABEL $05DD Sound_PlanetExplode
COMMENT_LABEL $05DD a=time, x=sound regs
LABEL $0605 Sound_PerfectBonus
COMMENT_LABEL $0605 a=time, x=sound regs
LABEL $0682 Sound_WalkerDestroyed
COMMENT_LABEL $0682 a=time, x=sound regs
LABEL $0458 SoundsInitTable
LABEL $04CA Sound_Thrust_Init
COMMENT_LABEL $04CA return start time in A
LABEL $0572 Sound_GunFire_Init
COMMENT_LABEL $0572 x=sound regs, return start time in A
LABEL $04E2 Sound_ShipFire_Init
LABEL $063B Sound_ExtraLife_Init
COMMENT_LABEL $063B x=sound regs, return start time in A
LABEL $0655 Sound_WalkerBounce_Init
COMMENT_LABEL $0655 x=sound regs, return start time in A
LABEL $0523 Sound_Shield_Init
COMMENT_LABEL $0523 x=sound regs, return start time in A
LABEL $0592 Sound_WarpOut_Init
COMMENT_LABEL $0592 x=sound regs, return start time in A
LABEL $0504 Sound_Explosion_Init
COMMENT_LABEL $0504 return start time in A
LABEL $0555 Sound_Pickup_Init
COMMENT_LABEL $0555 x=sound regs, return start time in A
LABEL $05A6 Sound_WarpIn_Init
COMMENT_LABEL $05A6 x=sound regs, return start time in A
LABEL $069B Sound_Countdown_Init
COMMENT_LABEL $069B x=sound regs, return start time in A
LABEL $05CE Sound_PlanetExplode_Init
COMMENT_LABEL $05CE x=sound regs, return start time in A
LABEL $05F8 Sound_PerfectBonus_Init
COMMENT_LABEL $05F8 x=sound regs, return start time in A
LABEL $0673 Sound_WalkerDestroyed_Init
COMMENT_LABEL $0673 x=sound regs, return start time in A
LABEL $0476 EmitSound
LABEL $048B esOkEmit
LABEL $0499 esExit
LABEL $04A3 usLop1
LABEL $04C4 usNext
LABEL $04B9 usSoundFin
EQU $0C RegPitchA2
EQU $0B RegPitchB1
EQU $0A RegPitchB2
EQU $08 RegPitchC2
EQU $07 RegNoisePitch
EQU $06 RegMixer
EQU $05 RegVolA
EQU $04 RegVolB
EQU $03 RegVolC
EQU $01 MixerToneA
EQU $02 MixerToneB
EQU $04 MixerToneC
EQU $08 MixerNoiseA
EQU $10 MixerNoiseB
EQU $20 MixerNoiseC
LABEL $7261 FreqTable
LABEL $04FB ssf1
LABEL $0540 ss1
LABEL $054A l132
LABEL $056D spBeep
LABEL $0571 spExit
LABEL $0586 sgfNoHoming
LABEL $05BD SoundWarpSub
LABEL $05EC speNoRandom
LABEL $063A speNoSound
LABEL $6D2C SineTable
LABEL $062B l146
LABEL $C9C6 ZzapConfig
LABEL $C8A0 FxTempEntry
COMMENT_LABEL $C8A0 Temporary storage for drawfx
EQU $00 FxTargetShip
EQU $01 FxTargetPod
EQU $02 FxTargetGun
EQU $03 FxTargetPlant
EQU $04 FxTargetFuel
EQU $05 FxTargetSwitch
EQU $06 FxTargetWalker
COMMENT_LABEL $06 bonus game
EQU $00 FxTypeDotShatter
EQU $01 FxTypeRefueling
EQU $02 FxTypePickUpPod
EQU $03 FxTypeScore150
EQU $04 FxTypeScore300
EQU $05 FxTypeScore750
EQU $06 FxTypeWarpIn
EQU $07 FxTypeWarpOut
EQU $08 FxTypeFuelCell
EQU $09 FxTypePlanetExplode
EQU $0A FxTypeGunFire
EQU $40 ShatterStartTime
LABEL $06BB EmitFx
COMMENT_LABEL $06BB a=encoded target/type, b=index
EQU $11 FrameSize
EQU $00 _aa
COMMENT_LABEL $00 declare two byte locals
EQU $00 LocalB1
EQU $01 LocalB2
EQU $02 LocalB3
EQU $03 LocalB4
EQU $01 LocalBuffer
EQU $01 LocalTarget
EQU $02 LocalFx
EQU $02 LocalIndex
EQU $03 LocalEncoded
LABEL $06D4 efxLoop
LABEL $06EC efxFound
COMMENT_LABEL $06EC free found, write new fx
LABEL $06E0 efxLoop2
LABEL $0A3E FxInitTable
COMMENT_LABEL $0A3E Starttime, soundfx for each fxtype
LABEL $0708 efxNoSound
EQU $02 LocalW1
EQU $03 LocalTime
LABEL $0714 dfxLoop
LABEL $0746 dfxNext
LABEL $0A6A FxGetCoordsTable
LABEL $0A54 FxDrawTable
LABEL $0756 ufxLoop
LABEL $0784 ufxNext
LABEL $0A78 FxFinishTable
COMMENT_LABEL $0A78 OnFinish-event for each target
LABEL $078C FxGetScreenCoords
COMMENT_LABEL $078C X/Y world coords, returns screen coords in D, Z = if offscreen
LABEL $07A6 L143101
LABEL $07C1 fxsOffScreen
LABEL $07C3 FxDrawSpriteVL
COMMENT_LABEL $07C3 Draw a single sprite  u=pointer to x,y  x=vectorlist a=scale b=intensity
EQU $06 LocalW2
LABEL $080D fxdExit
LABEL $07F1 PF33D116
LABEL $0804 fxdLoop
LABEL $0810 FxMoveDrawPattern
COMMENT_LABEL $0810 a=point count, x=vectors, 'Pattern' holds current pattern
LABEL $0826 PF33D119
LABEL $082F Draw_Warp
COMMENT_LABEL $082F A=time, X/Y=world coords
LABEL $0844 dwLoop
LABEL $4B8C WarpVectorList
LABEL $086A DrawRisingScore
COMMENT_LABEL $086A A=time, X/Y=world coords, U=vectorlist
LABEL $088F FxGetCoords_Ship
LABEL $0897 FxGetCoords_Pod
LABEL $089F FxGetCoords_Gun
COMMENT_LABEL $089F index in A
LABEL $08B4 FxGetCoords_Plant
LABEL $08BD FxGetCoords_Fuel
COMMENT_LABEL $08BD index in A
LABEL $08CF FxGetCoords_Switch
COMMENT_LABEL $08CF index in A
LABEL $08E2 FxGetCoords_Walker
COMMENT_LABEL $08E2 index in A
LABEL $C962 WalkerList
LABEL $0007 WalkerEntry
LABEL $08F0 FxDraw_DotShatter
COMMENT_LABEL $08F0 A=time, X/Y=world coords
LABEL $22B9 DotShatter
COMMENT_LABEL $22B9 u=pointer to x,y   a=time
LABEL $0902 FxDraw_Refueling
LABEL $4BAA RefuelVectorList
LABEL $0942 fdrStars
LABEL $0968 FxDraw_PickUpPod
COMMENT_LABEL $0968 A=time, X/Y=world coords
LABEL $4B79 OrbVectorList
LABEL $09A5 FxDraw_Score150
COMMENT_LABEL $09A5 A=time, X/Y=world coords
LABEL $4C56 Score150_Lines
LABEL $09AC FxDraw_Score300
COMMENT_LABEL $09AC A=time, X/Y=world coords
LABEL $4C74 Score300_Lines
LABEL $09B3 FxDraw_Score750
COMMENT_LABEL $09B3 A=time, X/Y=world coords
LABEL $4C99 Score750_Lines
LABEL $09BA FxDraw_WarpIn
COMMENT_LABEL $09BA A=time, X/Y=world coords
LABEL $09CA wi1
LABEL $09CE FxDraw_WarpOut
COMMENT_LABEL $09CE A=time, X/Y=world coords
LABEL $09D8 FxDraw_FuelCell
COMMENT_LABEL $09D8 A=time, X/Y=world coords
LABEL $4BF4 SpriteFuelCell
LABEL $09F0 FxDraw_PlanetExplode
COMMENT_LABEL $09F0 A=time, X/Y=world coords
LABEL $09FE peShow
LABEL $0A06 peOk
LABEL $0A07 FxDraw_GunFire
COMMENT_LABEL $0A07 A=time, X/Y=world coords
LABEL $1F43 GunSpriteTable
LABEL $0A2A FxFinish_Ship
COMMENT_LABEL $0A2A A=fxtype
LABEL $0A33 fxsNext1
LABEL $26E4 OnLoseLife
LABEL $0A3C fxsExit
LABEL $0A3C fxsNext3
LABEL $2921 OnExitLevel
LABEL $0A3D FxFinish_Dummy
COMMENT_LABEL $0A3D A=fxtype
EQU $0E Gravity
LABEL $0A88 ShipShotSpeeds
LABEL $0A8B ShipRotateMasks
LABEL $0AB5 suExit
LABEL $0CFB Ship_Control
LABEL $10FE Ship_DoMove
COMMENT_LABEL $10FE Update centerx/y and alpha
LABEL $1227 Ship_UpdateShipPodPos
COMMENT_LABEL $1227 refresh ship/pod coords from center-coords
LABEL $0AB6 Ship_Collisions
COMMENT_LABEL $0AB6 Ship and pod collision tests
EQU $07 LocalW3
EQU $09 LocalW4
EQU $09 LocalW5
EQU $03 LocalXmin1
EQU $05 LocalXmax1
EQU $07 LocalYmin1
EQU $09 LocalYmax1
LABEL $12A5 ValidateX
COMMENT_LABEL $12A5 u=pointer to x coord
LABEL $0AE1 scoVsFuelLoop
LABEL $0B08 scoVsNextFuel
LABEL $0B06 scoVsFuelMiss
LABEL $0B5E scoExplodeShip
LABEL $2D62 RectVsLevel
COMMENT_LABEL $2D62 u=ptr to left,right,top,bottom
LABEL $0B3A scoVsPowerMiss
LABEL $0B5C scoVsPodMiss
LABEL $0B64 scoPodTests
LABEL $2AF7 ExplodeShip
LABEL $0BEF scoExit
LABEL $0BEF scoNoPod
LABEL $0B9C scoPodVsFuelLoop
LABEL $0BC3 scoPodVsNextFuel
LABEL $0BC1 scoPodVsFuelMiss
LABEL $0BEF scoPodVsPowerMiss
LABEL $0BF2 Ship_Loaded
COMMENT_LABEL $0BF2 Set pod to be carried by ship
LABEL $0C35 Ship_FindLoadAngle
LABEL $0C2F slSkipHalf
EQU $04 LocalB5
EQU $00 LocalDx
EQU $01 LocalDy
EQU $03 LocalBest
COMMENT_LABEL $03 best diff
EQU $03 LocalLoop
EQU $04 LocalBestI
COMMENT_LABEL $04 best index in restart list
LABEL $12B7 DistanceTable
LABEL $0C57 flaLoop
LABEL $0C5E flaXPos
LABEL $0C67 flaYPos
LABEL $0C73 flaNotBetter
LABEL $0C80 Ship_DemoControl
COMMENT_LABEL $0C80 read input from demo data, return state in a
LABEL $0C8D sdcDecCounter
EQU $01 Button1
EQU $02 Button2
EQU $04 Button3
EQU $08 Button4
EQU $10 JoyLeft
EQU $20 JoyRight
LABEL $0080 JoyDown
LABEL $0C93 Ship_ConsoleControl
COMMENT_LABEL $0C93 read input from joy + buttons, return state in a
LABEL $0CA3 sccNo2Fire
LABEL $0CA7 sccNo1Fire
LABEL $0CBE sccNoButton4
LABEL $0CCC sccNoButton3
LABEL $0CDA sccNoButton2
LABEL $0CE4 sccNoButton1
LABEL $0CF0 sccNoJoy
LABEL $0CEE sccRight
LABEL $0CFA sccNoUpDown
LABEL $0CFA sccUp
EQU $00 LocalInput
EQU $01 LocalFuelCount
COMMENT_LABEL $01 fuel use same temp as gun
LABEL $0D06 scNoDemo
COMMENT_LABEL $0D06 read input from console
LABEL $0D08 scInputFin
LABEL $0D3A scLockFinish
LABEL $0D34 scNoLock
LABEL $0D2A scLockAngleUp
LABEL $0D54 scNotPressed_3
COMMENT_LABEL $0D54 No thrust
LABEL $11B2 Ship_DoThrust
COMMENT_LABEL $11B2 Adjust speed and spin
LABEL $0D5A scThrustFin
LABEL $0D9E scFireFinish
LABEL $0D6C scFire1
LABEL $0D77 scFreeFound
LABEL $0D87 l1290
LABEL $0DC7 scLRFinished
LABEL $0DBD scRotateLeft
COMMENT_LABEL $0DBD Rotate left
LABEL $0EE3 scNoShield
LABEL $0DFB scGoFuelTest
LABEL $0E8E scSkipFuelTest
LABEL $0E06 scFuelLoop
LABEL $0E85 scNextFuel
LABEL $0E83 scFuelMiss
LABEL $0EE9 scShieldFin
LABEL $0E74 lop299
COMMENT_LABEL $0E74 rotate a zero into b
LABEL $1ACF GiveScoreA
LABEL $0ED8 scPodMiss
LABEL $0F10 scSkipPerfect
EQU $00 LocalShip
EQU $02 LocalPlatform
EQU $02 LocalOrb
LABEL $10FA sddExit
LABEL $0F2A sddNoThrust1
LABEL $0F34 l1327
LABEL $4B5F ShipVectorList
LABEL $0F58 L143328
LABEL $0FAF sddNoThrust2
LABEL $0FF0 sddNoShield
LABEL $0FDB sddRor
LABEL $0FE1 sddRorFin
LABEL $4B98 ShieldVectorList
LABEL $1039 sddNoLock
LABEL $1003 l1336
LABEL $1029 l1338
LABEL $10A6 sddNoOrb
LABEL $1064 L143343
LABEL $10FA sddNoPull
LABEL $10D3 L143347
LABEL $1131 sdmNoPod
LABEL $1112 sdmNegD
LABEL $111C sdmAlphaOk
LABEL $1131 sdmExitAlphaDamping
LABEL $1150 sdmNoXDamping
LABEL $113D sdmNegXDamping
LABEL $113E sdmXDampStore
EQU $0C SpeedMax
COMMENT_LABEL $0C keep x speed in range
LABEL $1148 sdmXHiOk
LABEL $114E sdmXRangeFin
LABEL $115A sdmNormalGrav
LABEL $1163 sdmYHiOk
LABEL $1169 sdmYRangeFin
EQU $01 LocalAngle
LABEL $11BE sdtLocked
LABEL $11C0 sdtStoreAngle
LABEL $1497 AccelTable
LABEL $1212 sdtNoPod
LABEL $1210 sdtSkipAlpha
LABEL $14D7 ShipAngleToAlpha
LABEL $11EF sdtIdxOk
LABEL $11F7 sdtSinPositive
LABEL $11FF sdtNegSkip
LABEL $14F7 SpinSinTab
LABEL $1209 sdtPositive
LABEL $1224 sdtExit
LABEL $FF42 ShipExitY
COMMENT_LABEL $FF42 exit below world top so that warp-out effect is visible
LABEL $1291 uspNoPod
COMMENT_LABEL $1291 update ship only
LABEL $1259 uspPodYOk
LABEL $1279 uspExitLevel
COMMENT_LABEL $1279 Top of world: end of mission
LABEL $126A uspShipYOk
LABEL $12A4 uspExit
LABEL $12B0 vxCheckRightEdge
LABEL $12B6 vxXOk
LABEL $1516 DemoList
LABEL $151C DemoData1
LABEL $15E4 DemoData2
LABEL $1768 DemoData3
LABEL $1A14 ufcOkCnt3
LABEL $1A20 ufcOkCnt64
LABEL $1A22 ufcDoAdd
LABEL $1A2D ddGoOn
LABEL $1A6B ddNoTimeAttack
COMMENT_LABEL $1A6B normal game
LABEL $1A5F ddDoTime
LABEL $1A65 ddTimeFin
LABEL $4DE8 Text_ConvertX
COMMENT_LABEL $4DE8 x holds value to be converted (max 9999), u = destination buffer (4 bytes needed)
LABEL $1AAD ddDoDraw
LABEL $1ABA CopyScoreFromXtoU
COMMENT_LABEL $1ABA u=destination buffer, b=end byte
LABEL $1A8E ddNotBonus
LABEL $1AA6 ddDrawFuel
LABEL $1AA9 ddFuelFin
LABEL $4CB9 Text_Print
COMMENT_LABEL $4CB9 x=string pointer, a/b screen coords
EQU $09 MAX_LIVES
LABEL $1AD5 gsaGoOn
LABEL $1B02 gsaExit
LABEL $1AF3 gsaExtra
LABEL $1B42 afExit
LABEL $1B31 afRefueling
LABEL $1B27 afTestShield
LABEL $1B35 afStore
LABEL $1B40 afOk
LABEL $1B45 GunShotAngles
EQU $04 LocalGun
EQU $78 MaxGunDistance
COMMENT_LABEL $78 Minimum distance from firing gun to ship
LABEL $1B55 ugTimeOk
LABEL $1C26 ugFin
LABEL $1B71 ugGunLoop
LABEL $1BA4 ugGunNotActive
LABEL $1BA2 ugNextGun
LABEL $1BAD ugGunFound
LABEL $1BB4 ugLoop
LABEL $1C1F ugAlreadyActive
LABEL $1BCD ugRndAngle
LABEL $1BD8 ugRndAngle1
LABEL $1BE3 ugRndAngle2
LABEL $1BFB lop426
LABEL $1C01 fin426
LABEL $1C32 gsMoveLoop
LABEL $1D7F gsNotActive
LABEL $1C61 CheckRightEdge443
LABEL $1C67 XOk443
LABEL $1C83 NotHitTopOfWorld446
LABEL $1D6F gsRemoveShot
LABEL $1CDB gsNoHoming
EQU $0C ShotVelocXMax
LABEL $1CB7 gsHomeXDec
LABEL $1CC0 gsHomeXFin
EQU $0C ShotVelocYMax
LABEL $1CD2 gsHomeYDec
LABEL $1CDB gsHomeYFin
LABEL $1D1E gsShipOk
LABEL $1D1C gsShipSkipExplode
LABEL $1D61 gsPodOk
LABEL $2D92 PointVsLevel
LABEL $1D6D gsNoHit
LABEL $1D7D gsMoveNext
LABEL $1D75 lop454
COMMENT_LABEL $1D75 rotate a zero into b
LABEL $1D99 dgsLoop
LABEL $1DF2 dgsNotActive
LABEL $1DBA dgsHoming
LABEL $1DA5 dgsNormal
LABEL $2110 DrawDot
COMMENT_LABEL $2110 a=intensity,  u=pointer to x,y
LABEL $1DF0 dgsNext
LABEL $2179 DrawBullet
COMMENT_LABEL $2179 a=intensity,  u=pointer to x,y
EQU $03 Local1
LABEL $1E25 dfExit
LABEL $1E13 dfLoop
LABEL $1E20 dfNext
LABEL $2378 DrawSprite
COMMENT_LABEL $2378 Draw a single sprite  u=pointer to x,y  x=lines
LABEL $1E45 doExit
LABEL $4C0E SpriteStationaryPod
LABEL $1E58 dpSkip
LABEL $1EC9 dpDraw
LABEL $1E92 l1489
LABEL $1EC2 dpNoAdjustCounter
LABEL $1F09 dpExit
LABEL $4C29 SpritePowerplant
LABEL $1F40 dgExit
LABEL $1F27 dgLoop
LABEL $1F3A dgNext
LABEL $4BB4 SpriteGunNE
LABEL $4BC4 SpriteGunNW
LABEL $4BD4 SpriteGunSE
LABEL $4BE4 SpriteGunSW
LABEL $1F7A dswExit
LABEL $1F62 dswLoop
LABEL $1F6D dswDrawLeft
LABEL $4C4E SpriteSwitchRight
LABEL $1F70 dswDraw
LABEL $4C46 SpriteSwitchLeft
LABEL $1FA7 udoExit
LABEL $1F98 udoClosing
LABEL $1F90 udoSetClose
LABEL $1FA3 udoSetOpen
EQU $19 DoorLineSize
COMMENT_LABEL $19 Size of buffer to hold lines
EQU $19 DoorListSize
COMMENT_LABEL $19 Size of buffer to hold drawlist for lines (5*linecount)
EQU $03 LocalDoorLines
EQU $1C LocalDoorList
EQU $01 LocalOpen
EQU $02 LocalTmp
LABEL $20E7 dorExit
LABEL $1FC9 dorLoop
LABEL $1FE4 dorTable
LABEL $1FEC dorRightDoor
COMMENT_LABEL $1FEC draw door closing right, 1*2 tiles
LABEL $2043 dorUpDoor
COMMENT_LABEL $2043 draw door closing up, 2*2 tiles
LABEL $207D dorInvertRightDoor
LABEL $208B dorUpDoorWalls
COMMENT_LABEL $208B draw door closing up, 2*2 tiles
LABEL $20DE dorNext
LABEL $1FF7 dorDoHoriz
LABEL $20D8 dorDraw
LABEL $2085 dorInvertR1
LABEL $20EB ClipDraw
COMMENT_LABEL $20EB a=intensity, y points to: destlinesptr,offsety,offsetx,abslines
LABEL $210F cdrExit
LABEL $2A9A GoDrawList
COMMENT_LABEL $2A9A x=drawlist, a=intensity
EQU $00 LocalTempX
EQU $01 LocalTempY
EQU $01 LocalInt
LABEL $212C L143554
LABEL $2176 ddExit
LABEL $216C PF33D557
LABEL $2195 L143573
LABEL $21DB dbExit
LABEL $21D5 PF33D576
LABEL $21DE DrawBulletAtCurrentPosition
EQU $0F One
LABEL $225E DrawPlusAtCurrentPosition
COMMENT_LABEL $225E a=scale
LABEL $226F wait600
LABEL $2286 wait603
LABEL $229B wait606
LABEL $22B2 wait609
EQU $01 LocalPos
EQU $03 LocalNeg
EQU $05 LocalPtr
LABEL $22C6 dsIntPositive
LABEL $22D0 dsSkip1
LABEL $2394 L143647
LABEL $23DC drExit
LABEL $23CB PF33D649
LABEL $23D3 drLoop
EQU $01 LocalGunCount
EQU $01 LocalCount
LABEL $23E6 ussLoop
LABEL $2648 ussNext
LABEL $2416 CheckRightEdge664
LABEL $241C XOk664
LABEL $2438 NotHitTopOfWorld667
LABEL $2646 ussRemoveShot
LABEL $2451 ussNoHit
LABEL $24D6 ussNoGuns
LABEL $2463 ussGunLoop
LABEL $24D0 ussNextGun
LABEL $24CE ussGunMiss
LABEL $24A8 lop671
COMMENT_LABEL $24A8 rotate a zero into d
LABEL $254B ussNoFuel
LABEL $24E5 ussFuelLoop
LABEL $2544 ussNextFuel
LABEL $2542 ussFuelMiss
LABEL $2524 lop676
COMMENT_LABEL $2524 rotate a zero into b
LABEL $25A1 ussPowerMiss
LABEL $259E ussPowerDead
LABEL $2596 ussStorePower
LABEL $2601 ussNoSwitches
LABEL $25B3 ussSwitchLoop
LABEL $25F8 ussNextSwitch
LABEL $2644 ussPodMiss
LABEL $265B dssLoop
LABEL $267D dssActive
LABEL $2661 dssNext
LABEL $26E1 dssFin
LABEL $266B dssTestRemove
LABEL $2679 dssRemove
LABEL $2695 L143701
LABEL $26D5 PF33D704
LABEL $2710 ollGameOver
LABEL $26F9 ollCheating
LABEL $270B ollPlanetOk
LABEL $2716 ollExit
LABEL $2776 RestartLevel
LABEL $2717 ViewShipCenter
COMMENT_LABEL $2717 Set view with ship in screen center
LABEL $2720 vscXOk
LABEL $272E vscYOk
LABEL $2739 ResetShip
COMMENT_LABEL $2739 Resets ship state
EQU $0F AlphaInitAdjust
LABEL $274F rsAngleDown
LABEL $2757 rsAngleEnd
LABEL $2775 rsNoPod
EQU $01 LocalShipTileX
EQU $02 LocalShipTileY
LABEL $2785 rsPositiveY
LABEL $27B6 rlPosLoop
LABEL $27C6 rlHasOrb
LABEL $27DE rlNext
LABEL $27C9 rlStoreYDiff
LABEL $27D2 rlPosX
LABEL $27F6 rsKeepPod
LABEL $2824 SplitLevelNo
COMMENT_LABEL $2824 returns levello in A, levelhi i B
LABEL $283A LevelCounts
LABEL $2830 splLoop
LABEL $2839 splExit
LABEL $0006 LevelCountNormal
COMMENT_LABEL $0006 6 levels in normal mode
LABEL $0008 LevelCount
COMMENT_LABEL $0008 hard+ and timeattack modes
EQU $00 LocalLevelLo
LABEL $2853 plNoReverse
LABEL $285D plNoNoLand
LABEL $2869 plNoHard
LABEL $3107 Levels
LABEL $2893 plFuel
LABEL $291B GunDelayMasks
LABEL $28B7 plGunMaskLoop
LABEL $28C2 plStoreGunDelayMask
LABEL $2918 GunDelays
LABEL $28CD plGunDelayLoop
LABEL $28D8 plStoreGunDelay
LABEL $291E GunShotSpeeds
LABEL $28E4 plGunSpeedLoop
LABEL $28EF plStoreGunSpeed
LABEL $292D oelNoDemo
LABEL $2969 oelExit
LABEL $4F95 Text_LevelExit
COMMENT_LABEL $4F95 returns z = if level is finished
LABEL $2966 oelIncomplete
LABEL $2961 oelNoSpecial
LABEL $2947 oelNoGrav
LABEL $5248 Text_Special
LABEL $2952 oelNoNoLand
LABEL $5434 Text_ShowWellDone
COMMENT_LABEL $5434 game completed
LABEL $297A ingNoResetRnd
LABEL $29B6 ingNoDemo
LABEL $29C4 ingExit
LABEL $29BE ingNoTimeAttack
EQU $04 ScrollSpeed
EQU $4C BorderWidth
COMMENT_LABEL $4C Distance of ship to screen border before scrolling starts
EQU $64 EndBorderWidth
COMMENT_LABEL $64 Distance ship<->border when scrolling stops
EQU $01 LocalScreenX
EQU $02 LocalScreenY
LABEL $29CF svNoRefresh
LABEL $29E6 L143781
LABEL $2A13 svScrollXFin
LABEL $29FF svScrollRight
LABEL $2A11 svStoreX
LABEL $2A43 svScrollYFin
LABEL $2A33 svScrollDown
LABEL $2A41 svStoreY
LABEL $2A5D svEndCheckScrollX
LABEL $2A53 svSetScrollRight
LABEL $2A59 svSetScrollLeft
LABEL $2A77 svEndCheckScrollY
LABEL $2A6D svSetScrollDown
LABEL $2A73 svSetScrollUp
LABEL $2A93 dlNormal
LABEL $2AA7 dlLoop
LABEL $2AF6 dlFinish
LABEL $2ADB dlLine
LABEL $2AD5 PF33D805
LABEL $2AEE wait1806
LABEL $2B17 exsExit
LABEL $2B0A exsNoPod
LABEL $2B1D rdBegin
EQU $06 LocalViewY
EQU $08 LocalEndY
COMMENT_LABEL $08 Highest world y coord that is on screen
LABEL $2B55 rdNoEmptySpace
COMMENT_LABEL $2B55 normal case, no empty space
LABEL $2B4E rdNothingToDraw
COMMENT_LABEL $2B4E no tiles are visible, only empty space
LABEL $2B62 rdYCoordsFin
LABEL $2C87 rdEndList
LABEL $2BA7 rdNeedAdjust
LABEL $2BAD rdStoreAdjust
LABEL $2BC4 rdZeroX
LABEL $2BD0 rsYLoop
LABEL $2BD6 rsXLoop
LABEL $2C41 rdNextTile
LABEL $2EC1 TileTable
LABEL $2C29 rdNeedClip
LABEL $2C16 rdLop1
LABEL $2C58 rsNotYetAdjust
LABEL $2C96 dstOk
EQU $05 LocalB6
EQU $00 LocalYRange
COMMENT_LABEL $00 height of starfield visible from top of screen
EQU $03 LocalSave
EQU $00 LocalDist
EQU $06 LocalYAdd
EQU $08 LocalXAdd
EQU $0A LocalSaveSeed
EQU $14 StarDensity
COMMENT_LABEL $14 nr of stars to draw
LABEL $2CD5 dstLoop
LABEL $2D53 dstNext
LABEL $2D28 PF33D849
LABEL $2D45 dstNiceStar
EQU $00 LocalLeft
EQU $02 LocalRight
EQU $04 LocalTop
EQU $06 LocalBottom
LABEL $2D91 rvlExit
LABEL $2DD4 tcEmpty
LABEL $2DD7 tcFull
LABEL $2DDA tcTile02
LABEL $2DE6 tcTile03
LABEL $2DF4 tcTile04
LABEL $2E08 tcMiss04
LABEL $2E0B tcTile05
LABEL $2E1D tcHit05
LABEL $2E20 tcTile06
LABEL $2E34 tcTile07
LABEL $2E46 tcTile08
LABEL $2E52 tcTile09
LABEL $2E60 tcTile33
COMMENT_LABEL $2E60 horiz door 1 of 2
LABEL $2E62 tc33jumpin
LABEL $2E86 tcHitDoor
LABEL $2E72 tcTile34
COMMENT_LABEL $2E72 horiz door 2 of 2
LABEL $2E74 tc34jumpin
LABEL $2E89 tcTile35
COMMENT_LABEL $2E89 vert door 1 of 2
LABEL $2E96 tcTile36
COMMENT_LABEL $2E96 vert door 2 of 2
LABEL $2EA9 tcTile37
COMMENT_LABEL $2EA9 inverted horiz door 1 of 2
LABEL $2EB3 tc37_1
LABEL $2EB5 tcTile38
COMMENT_LABEL $2EB5 inverted horiz door 2 of 2
LABEL $2EBF tc38_1
LABEL $2FAB Tile01_LinesRel
LABEL $2FB0 Tile01_LinesAbs
LABEL $2FB6 Tile02_LinesRel
LABEL $2FBB Tile02_LinesAbs
LABEL $2FC1 Tile03_LinesRel
LABEL $2FC6 Tile03_LinesAbs
LABEL $2FCC Tile04_LinesRel
LABEL $2FD1 Tile04_LinesAbs
LABEL $2FD7 Tile05_LinesRel
LABEL $2FDC Tile05_LinesAbs
LABEL $2FE2 Tile06_LinesRel
LABEL $2FE7 Tile06_LinesAbs
LABEL $2FED Tile07_LinesRel
LABEL $2FF2 Tile07_LinesAbs
LABEL $2FF8 Tile08_LinesRel
LABEL $2FFD Tile08_LinesAbs
LABEL $3003 Tile09_LinesRel
LABEL $3008 Tile09_LinesAbs
LABEL $300E Tile10_LinesRel
COMMENT_LABEL $300E A
LABEL $3013 Tile10_LinesAbs
LABEL $3019 Tile11_LinesRel
COMMENT_LABEL $3019 B
LABEL $301E Tile11_LinesAbs
LABEL $3024 Tile12_LinesRel
COMMENT_LABEL $3024 C
LABEL $302B Tile12_LinesAbs
LABEL $3036 Tile13_LinesRel
COMMENT_LABEL $3036 D
LABEL $303D Tile13_LinesAbs
LABEL $3048 Tile14_LinesRel
COMMENT_LABEL $3048 E
LABEL $304F Tile14_LinesAbs
LABEL $305A Tile15_LinesRel
COMMENT_LABEL $305A F
LABEL $3061 Tile15_LinesAbs
LABEL $306C Tile16_LinesRel
COMMENT_LABEL $306C G
LABEL $3073 Tile16_LinesAbs
LABEL $307E Tile17_LinesRel
COMMENT_LABEL $307E H
LABEL $3083 Tile17_LinesAbs
LABEL $3089 Tile18_LinesRel
COMMENT_LABEL $3089 I
LABEL $3090 Tile18_LinesAbs
LABEL $309B Tile19_LinesRel
COMMENT_LABEL $309B J
LABEL $30A2 Tile19_LinesAbs
LABEL $30AD Tile20_LinesRel
COMMENT_LABEL $30AD K
LABEL $30B4 Tile20_LinesAbs
LABEL $30BF Tile21_LinesRel
COMMENT_LABEL $30BF L
LABEL $30C6 Tile21_LinesAbs
LABEL $30D1 Tile22_LinesRel
COMMENT_LABEL $30D1 M
LABEL $30D8 Tile22_LinesAbs
LABEL $30E3 Tile23_LinesRel
COMMENT_LABEL $30E3 N
LABEL $30EA Tile23_LinesAbs
LABEL $30F5 Tile24_LinesRel
COMMENT_LABEL $30F5 O
LABEL $30FC Tile24_LinesAbs
EQU $20 FullW
EQU $10 HalfW
EQU $20 FullH
EQU $10 HalfH
LABEL $31B7 Level1_Tiles
LABEL $32B7 Level1_Guns
LABEL $32BD Level1_Fuel
LABEL $32C2 Level1_Restart
LABEL $32C5 Level1_Doors
COMMENT_LABEL $32C5 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $32C6 Level1_Switches
LABEL $32C7 Level2_Tiles
LABEL $3489 Level2_Guns
LABEL $3494 Level2_Fuel
LABEL $3499 Level2_Restart
LABEL $349C Level2_Doors
LABEL $349D Level2_Switches
LABEL $349E Level3_Tiles
LABEL $3732 Level3_Guns
LABEL $374C Level3_Fuel
LABEL $3765 Level3_Restart
LABEL $376C Level3_Doors
LABEL $376D Level3_Switches
LABEL $376E Level4_Tiles
LABEL $3A9E Level4_Guns
LABEL $3AC2 Level4_Fuel
LABEL $3AC7 Level4_Restart
LABEL $3AD0 Level4_Doors
COMMENT_LABEL $3AD0 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $3AD6 Level4_Switches
LABEL $3AE1 Level5_Tiles
LABEL $3E93 Level5_Guns
LABEL $3EB7 Level5_Fuel
LABEL $3ED8 Level5_Restart
LABEL $3EE3 Level5_Doors
COMMENT_LABEL $3EE3 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $3EE9 Level5_Switches
LABEL $3EF4 Level6_Tiles
LABEL $450C Level6_Guns
LABEL $453F Level6_Fuel
LABEL $4548 Level6_Restart
LABEL $4553 Level6_Doors
COMMENT_LABEL $4553 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $4559 Level6_Switches
LABEL $4564 Level7_Tiles
LABEL $4730 Level7_Guns
COMMENT_LABEL $4730 0=NE,1=NW,2=SE,3=SW
LABEL $4754 Level7_Fuel
LABEL $4761 Level7_Restart
LABEL $4768 Level7_Doors
COMMENT_LABEL $4768 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $4782 Level7_Switches
LABEL $4792 Level8_Tiles
LABEL $4B16 Level8_Guns
COMMENT_LABEL $4B16 0=NE,1=NW,2=SE,3=SW
LABEL $4B3F Level8_Fuel
LABEL $4B44 Level8_Restart
LABEL $4B53 Level8_Doors
COMMENT_LABEL $4B53 also need mapchange for collision, 'bc' for horiz door, 'de' for vert door
LABEL $4B59 Level8_Switches
EQU $15 FuelY
COMMENT_LABEL $15 Fuel pod Y offset
EQU $08 GunY
COMMENT_LABEL $08 Gun Y offset
EQU $0C ShipUnit
EQU $0F SU
EQU $11 ShieldUnit
EQU $04 SF
EQU $0F SH
EQU $0F SW
LABEL $F8DE Text_CopyString
LABEL $4CE4 Text_Print_Intensity
COMMENT_LABEL $4CE4 x=string pointer, y screen coords, a intensity
LABEL $4D0F Text_PrintWait
COMMENT_LABEL $4D0F waits for one second
EQU $0A MaxLines
EQU $01 LocalExitType
EQU $02 LocalSaveDP
EQU $09 LocalCallback
LABEL $4D18 tpwInitWait
LABEL $4D29 tpwNoMenu
LABEL $4D3E tpwNoQuick
LABEL $4D39 tpwInitQuick
LABEL $4D4E tpwNoCallback
LABEL $4D5C tpwWait
LABEL $4D68 tpwNoCallCallback
LABEL $4D6F tpwNextLine
LABEL $4DAA tpwNoMoreLines
LABEL $4D8A tpwSkipInc
LABEL $4DA5 tpwSkipLine
LABEL $4DC4 tpwTestDelayExit
COMMENT_LABEL $4DC4 exit after 1 second
LABEL $4DBB tpwNextButton
LABEL $4DCA tpwExit
LABEL $4F0E tlsBelow100
LABEL $4E84 tlsBelow1000
LABEL $4E0C tpd9000
LABEL $4E1B tpd8000
LABEL $4E2A tpd7000
LABEL $4E39 tpd6000
LABEL $4E48 tpd5000
LABEL $4E57 tpd4000
LABEL $4E66 tpd3000
LABEL $4E75 tpd2000
LABEL $4E84 tpd1000
LABEL $4E93 tpd900
LABEL $4EA2 tpd800
LABEL $4EB1 tpd700
LABEL $4EC0 tpd600
LABEL $4ECF tpd500
LABEL $4EDE tpd400
LABEL $4EED tpd300
LABEL $4EFC tpd200
LABEL $4F0A tpd100
LABEL $4F0E Text_ConvertX2
COMMENT_LABEL $4F0E x holds value to be converted (max 99), u = destination buffer-2 (2 bytes needed)
LABEL $4F1E tpd90
LABEL $4F94 tlsExit
LABEL $4F2C tpd80
LABEL $4F3A tpd70
LABEL $4F48 tpd60
LABEL $4F56 tpd50
LABEL $4F64 tpd40
LABEL $4F72 tpd30
LABEL $4F80 tpd20
LABEL $4F8E tpd10
EQU $1A LocalString1
EQU $2E LocalString2
EQU $00 LocalLevelFin
EQU $01 LocalBonus
LABEL $5077 txlNoOrb
LABEL $50CC CompleteString
LABEL $4FDD txlPlanetAlive
LABEL $50F2 PlanetString
LABEL $5103 BonusString
LABEL $502A txlNoPerfect
LABEL $4FFA txlGunLoop
LABEL $500A txlFuelLoop
LABEL $5130 PerfectString
LABEL $504B txlGiveBonus
LABEL $505F txlRestBonus
LABEL $5073 txlBonusFin
LABEL $50BD txlPrintAndExit
LABEL $50B8 txlInComplete
LABEL $50E0 FailedString
LABEL $510E NoBonusString
LABEL $512A InCompletePtr
LABEL $50C6 txlSkipWait
LABEL $5117 InCompleteString
LABEL $516C tgoNoHighscore
LABEL $5150 tgoSkipBonusGame
LABEL $51F0 FinalScoreString
LABEL $523F LevelReachedString
LABEL $51E6 GameOverString
LABEL $522A GameModeStringList
LABEL $5232 PressButtonString
LABEL $5204 GameModeString1
LABEL $5210 GameModeString2
LABEL $521C GameModeString3
LABEL $5228 GameModeString4
LABEL $528E SpecialStringsList
LABEL $5268 SpecialString1
LABEL $5279 SpecialString2
LABEL $5292 Text_ShowDemoMenu
COMMENT_LABEL $5292 dp=d0
LABEL $52CD DemoMenuPtr
LABEL $5299 DemoMenu0
LABEL $529E DemoMenu1
LABEL $52AB DemoMenu2
LABEL $52B8 DemoMenu3
LABEL $52C5 DemoMenu4
LABEL $52E4 Text_ShowOptionsMenu
COMMENT_LABEL $52E4 dp=d0
LABEL $5323 OptionsMenuPtr
LABEL $52EB OptionsMenu0
LABEL $52F3 OptionsMenu1
LABEL $52FF OptionsMenu2
LABEL $5307 OptionsMenu3
LABEL $531B OptionsMenu4
LABEL $C8A0 CheatTemp
COMMENT_LABEL $C8A0 Temp memory used by menu
LABEL $533B Text_ShowCheatMenu
COMMENT_LABEL $533B dp=d0
LABEL $534A tcmOff
LABEL $5351 tcmLivesFin
LABEL $537F CheatMenuPtr
LABEL $536D CheatMenu0
LABEL $5373 CheatMenu1
LABEL $5393 Text_ShowGameMenu
COMMENT_LABEL $5393 dp=d0
LABEL $541D GameMenuPtr
LABEL $539A GameMenuCallback
LABEL $53B5 gmcLoop
LABEL $53E1 gmcNoWrap
LABEL $53EA GameMenu0
LABEL $53FB GameMenu1
LABEL $5405 GameMenu2
LABEL $540E GameMenu3
LABEL $545C WellDonePtr
LABEL $5440 WellDoneCallback
LABEL $C8A0 TitleLogoY
LABEL $6232 DrawTitleLogo
LABEL $5451 WellDone0
LABEL $5467 Text_ShowControlMenu
COMMENT_LABEL $5467 dp=d0, a=button to select
LABEL $5498 ControlMenu0
LABEL $54CA ControlStringList
LABEL $54AA ControlMenu1
LABEL $54AF ControlMenu2
LABEL $54BE ControlMenu3
LABEL $54C5 ControlMenu4
LABEL $54D2 Text_ShowResetMenu
COMMENT_LABEL $54D2 dp=d0
LABEL $54EA ResetMenuPtr
LABEL $54D9 ResetMenu0
LABEL $54F2 Zzap_MountainYCoords
LABEL $5502 Zzap_MountainABSYCoords
LABEL $5512 Zzap_ShipLeftVectorList
LABEL $5522 Zzap_ShipRightVectorList
EQU $64 ZzShipWidth
LABEL $C946 Zzap_RamStart
LABEL $C8BD Zzap_ShipY
LABEL $C8BB Zzap_ShipX
LABEL $C8B7 Zzap_ShipVelocX
LABEL $C8B9 Zzap_ShipVelocY
LABEL $C8B6 Zzap_ShipDir
COMMENT_LABEL $C8B6 1=left, -1=right
LABEL $C8C6 Zzap_LeftOffsetX
EQU $04 Zzap_ShipShotCount
EQU $32 Zzap_ShipShotMaxLength
EQU $07 Zzap_ShipShotEntry
EQU $00 Zzap_ssShotActive
COMMENT_LABEL $00 Flag: is shot active?
EQU $01 Zzap_ssShotDir
COMMENT_LABEL $01 Direction for shot.
EQU $02 Zzap_ssShotY
COMMENT_LABEL $02 Y game world coordinate.
EQU $04 Zzap_ssShotX
COMMENT_LABEL $04 X game world coordinate.
EQU $06 Zzap_ssShotLength
COMMENT_LABEL $06 Current length of shot.
LABEL $C946 Zzap_ShipShotList
LABEL $C8F2 ZzapShipTookDamage
LABEL $C8E0 ZzapShipLives
LABEL $0100 ZzapWorldStartX
LABEL $2100 ZzapWorldEndX
LABEL $2000 ZzapViewStartX
LABEL $FF80 ZzapWorldTopY
LABEL $00FF ZzapWorldEndY
LABEL $00DF WalkerFloorY
EQU $08 WalkerCount
EQU $00 weWalkerActive
COMMENT_LABEL $00 -1=active, 0=dead, 1 dying
EQU $01 weWalkerLife
EQU $02 weWalkerX
EQU $04 weWalkerY
COMMENT_LABEL $04 sprite center coords in world-space
EQU $06 weJumpIndex
COMMENT_LABEL $06 -1=not jumping, 0..63 index to sinetable
EQU $30 WalkerBaseH
EQU $54 WalkerBaseW
COMMENT_LABEL $54 120-32
EQU $30 WalkerLegH
EQU $10 WalkerLegW
EQU $20 HeadW
EQU $18 DefaultHeadH
EQU $74 WalkerWidth
EQU $60 WalkerHeight
LABEL $02EE WalkerDistance
COMMENT_LABEL $02EE Distance between each walker
EQU $05 WalkerShotCount
EQU $07 WalkerShotEntry
EQU $00 wsActive
EQU $01 wsVelocX
EQU $02 wsVelocY
EQU $03 wsWalkerShotX
EQU $05 wsWalkerShotY
LABEL $C99A WalkerShotList
LABEL $2080 BaseX
LABEL $00D5 BaseY
EQU $10 ZzapShipH
EQU $08 ZzapShipArea
COMMENT_LABEL $08 Hit area for ship
LABEL $C8C3 WalkerVisible
COMMENT_LABEL $C8C3 2 bytes
LABEL $C9BD WalkerVisibleI
LABEL $C9BE VisibleHeadX
LABEL $C9C0 VisibleHeadY
LABEL $C9C2 VisibleBaseX
LABEL $C9C4 VisibleBaseY
EQU $09 ZzapConfigEntry
EQU $00 zcShotDelay
EQU $01 zcShotYSpread
EQU $02 zcWalkerSpeedMask
EQU $03 zcJumpDelay
EQU $04 zcJumping
EQU $05 zcJumpScale
EQU $06 zcHeadH
EQU $07 zcHalfHeadH
EQU $08 zcWalkerLife
LABEL $C8D1 ZzapLevel
LABEL $C9CF WalkerDrawList
LABEL $5532 Zzap_Start
LABEL $57D7 Zzap_InitNewGame
LABEL $5588 ZzapTitleScreen
LABEL $5542 Zzap_MainLoop
LABEL $59BC Zzap_ControlShip
LABEL $58E5 Zzap_UpdateShipShots
LABEL $5C45 UpdateWalkers
LABEL $56BE UpdateWalkerShots
LABEL $5584 ZzapGameOver
LABEL $5B89 Zzap_DrawMountain
LABEL $5838 Zzap_DrawShip
LABEL $5899 Zzap_DrawShipShots
LABEL $5D22 DrawWalkers
LABEL $57A6 DrawWalkerShots
LABEL $5EF6 DrawBase
LABEL $55DE DrawRadar
LABEL $55CE ZzapGameText1
LABEL $55D3 ZzapGameText2
LABEL $55E7 zdrLoop
LABEL $55F6 zdrNext
LABEL $561F RadarPlotCoords
COMMENT_LABEL $561F x points to world coords X,Y, a=intensity
LABEL $564E SetDifficulty
COMMENT_LABEL $564E set difficulty based on value in zzaplevel (0--7)
EQU $01 LocalLevelHi
LABEL $56B2 WalkerShotDelayTable
LABEL $56BA WalkerJumpDelayTable
LABEL $56AE WalkerSpreadTable
LABEL $56AA WalkerSpeedTable
EQU $02 LocalFree
LABEL $56C9 zuwsLoop
LABEL $5751 zuwsInactive
LABEL $56E1 zuwsSkipIncVelocX
LABEL $0174 ZuwsMaxDistance
LABEL $574F zuwsRemove
LABEL $5712 zuwsNoHome
LABEL $571A zuwsSkipY
LABEL $574D zuwsMiss
LABEL $5B6B ZzapShipTakeDamage
LABEL $5753 zuwsNext
LABEL $57A3 zuwsNoEmit
LABEL $57B3 zdwsLoop
LABEL $57CE zdwsNotActive
LABEL $5814 zngWLoop
LABEL $5824 InitOneWalker
COMMENT_LABEL $5824 x=X coord, u=entry
LABEL $584F zdsShipOk
LABEL $5898 zdsNoDraw
LABEL $5874 Zzap_dsSkip1
LABEL $5877 Zzap_dsSkip2
LABEL $5898 zdsNoThrust
LABEL $58A1 Zzap_dssLoop
LABEL $58DD Zzap_dssNext
LABEL $58DB Zzap_dssRemove
LABEL $58EE Zzap_ussLoop
LABEL $59B1 Zzap_ussNext
LABEL $5900 Zzap_ussLenMax
LABEL $59B1 zussSkipWalkers
LABEL $5951 zussWalkerHeadMiss
LABEL $598A zussWalkerTakeDamage
LABEL $59B1 zussWalkerBaseMiss
LABEL $59AF zussWalkerAlive
EQU $04 ZzapShipMaxY
LABEL $59E9 Zzap_csUDMoveCentered
LABEL $59E2 Zzap_csMoveDown
LABEL $59F1 Zzap_csUDApplyVeloc
LABEL $5A03 Zzap_csTestFloor
LABEL $5A0E Zzap_csStoreY
LABEL $5A1C Zzap_csViewTopOk
LABEL $5A26 Zzap_csViewYFin
EQU $30 ZzapShipMaxX
LABEL $5A4B Zzap_csLRMoveCentered
LABEL $5A56 Zzap_csLRMoveFinished
LABEL $5A5C zcsNoFlip
LABEL $5A87 Zzap_csFireFinish
LABEL $5A65 Zzap_csFire1
LABEL $5A70 Zzap_csFreeFound
LABEL $5ACE zcsSlideLeft
LABEL $5ADB zcsSlideMax
LABEL $5ADD zcsSlideStoreX
LABEL $5B4F ZzapUpdateClipView
LABEL $5B4E zcsWalkerFinish
LABEL $5B1C zcsWalkerHeadMiss
LABEL $5B88 zstNotGameOver
EQU $01 LocalOffset
LABEL $5BC5 Zzap_dmLoop1
LABEL $5BDC wait11403
LABEL $5C1C Zzap_dmLoop11
LABEL $5C33 wait11405
EQU $01 LocalJumpY
EQU $04 LocalMinX
LABEL $5C6E zuwNoJumping
LABEL $5C84 zuwJumpFin
LABEL $5C91 zuwLoop
LABEL $5CCC zuwInactive
LABEL $5CA6 zuwNotDying
LABEL $5CCE zuwNext
LABEL $5CBB zuwDontWalk
LABEL $5CBB zuwNotReachedBase
LABEL $5CEA WalkerHitBase
LABEL $5CE7 zuwExit
LABEL $5CC1 zuwNotLowest
LABEL $5CE7 zuwNoEmit
LABEL $5D06 whsMainLoop
EQU $12 WalkerLineCount
EQU $06 LocalLines
EQU $02 LocalXMin
EQU $04 LocalXMax
LABEL $5D3C zdwLoop
LABEL $5D5C zdwNext
LABEL $5D53 zdwVisibleIsDying
LABEL $5D65 dwDraw
LABEL $5EF2 dwExit
EQU $02 _off
LABEL $5D6E zdwAliveInt
LABEL $5D7B l11441
EQU $04 LegX
COMMENT_LABEL $04 Offset X from WalkerBase that leg is attached
EQU $07 HeadSlopeH
EQU $0E HeadSlopeW
LABEL $5F37 dbFloorOffscreen
EQU $06 LocalB7
EQU $00 LocalTextTimer
EQU $01 LocalTextInt
EQU $02 LocalMusicTimer
EQU $03 LocalVolumeTimer
EQU $04 LocalMode
EQU $05 LocalModeClock
EQU $06 LocalBonusGame
LABEL $5F3C tiReset
LABEL $6DAC InitMusic
LABEL $5F64 tiMain
LABEL $5F6F tiGoMusic
LABEL $5F72 tiSkipMusic
LABEL $6E4D UpdateMusic
COMMENT_LABEL $6E4D call each vbl
LABEL $5F7B tiNoDecClock
LABEL $5FBE tiModeLogo
LABEL $5FAF tiModeLevel
LABEL $5F99 tiModeHighscores
LABEL $62D6 DrawCreditsScroller
LABEL $C8A3 ScrollTextPtr
LABEL $63ED CreditsTextEnd
EQU $10 Chars
COMMENT_LABEL $10 Chars visible at the same time
LABEL $5F97 tiKeepCreditsMode
LABEL $6015 tiModeFin
LABEL $60D1 DisplayHighscores
LABEL $6346 CreditsText
LABEL $C8A2 ScrollInt
LABEL $613E TitleDrawLevel
LABEL $6007 tiKeepLogoMode
LABEL $6013 tiVolumeNotYet
LABEL $61DF DrawTitleVolume
LABEL $6015 tiVolumeFin
LABEL $601E tiShowText
LABEL $6057 tiSkipText
LABEL $60C9 TitleStringsList
LABEL $6030 tiNoBonusText
LABEL $6052 l11564
LABEL $6066 tiNextButton
LABEL $6077 tiExit
LABEL $60A8 tiFin
LABEL $6092 tiNoOptions
LABEL $615E OptionsMenu
LABEL $609C tiNoBonusGame
LABEL $60AB TitleString1
LABEL $60B5 TitleString2
LABEL $60C1 TitleString3
EQU $02 LocalSineY
EQU $03 LocalSineX
LABEL $60EE dhsLoop
LABEL $614D DemoMenu
COMMENT_LABEL $614D returns with Z set, and GameMode=DemoGame if exit
LABEL $615D dmExit
LABEL $6168 omNoControls
LABEL $61BB ControlsMenu
LABEL $6192 omExit
LABEL $616F omNoDemo
LABEL $617E omNoResetHi
LABEL $7EB2 eeprom_format
LABEL $6192 omNoCheat
LABEL $6193 CheatMenu
LABEL $6193 cmShow
LABEL $61A3 cmNoLives
LABEL $61BA cmNoLevel
LABEL $61AF cmIncLevel
LABEL $61C2 cmLoop
EQU $01 LocalX
EQU $02 LocalMod
EQU $03 LocalVol
LABEL $61EF dtvLoop
EQU $08 LocalLine
EQU $1C LocalH
COMMENT_LABEL $1C these were local, but changed to constants to save some code size
EQU $01 LocalRepeat
EQU $02 LocalBitmap
LABEL $6CA5 TitleBitmap
LABEL $623E dbiLoop
LABEL $6246 dbiIntOk
LABEL $6252 dbiInt1
LABEL $6254 dbiIntSet
LABEL $6271 dbiMoveLine
LABEL $6283 PF33D1628
LABEL $62A5 dbiLineLoop
LABEL $62BD dbiKeepRepeating
LABEL $62D3 dbiNoAdjustY
LABEL $62E8 dcsNoNewChar
LABEL $6304 dcsNoIncInt
LABEL $C8A5 SineIndex1
LABEL $6319 ok1647
LABEL $C8A6 SineIndex2
LABEL $632A ok1648
LABEL $63ED Credits_Draw_display_string
LABEL $6561 FontTable1
LABEL $6903 FontTable2
LABEL $6400 PF4A5
LABEL $655C PF50A
LABEL $653C PF4EB
LABEL $CA14 TEMP_D0
LABEL $CA16 TEMP_D1
LABEL $CA18 TEMP_D4
LABEL $CA1A TEMP_D5
LABEL $CA1C TEMP_D6
LABEL $CA1E LA5_BASE
LABEL $CA6A L0596E6
LABEL $CAD0 L05974C
LABEL $CB36 L0597B2
LABEL $7C13 LA5_BASE_ROM
COMMENT_LABEL $7C13 status, read/write
LABEL $7C31 L0596E6_ROM
COMMENT_LABEL $7C31 channel 1 data, read/write, 102 bytes
LABEL $7C97 L05974C_ROM
COMMENT_LABEL $7C97 channel 2 data, read/write
LABEL $7CFD L0597B2_ROM
COMMENT_LABEL $7CFD channel 3 data, read/write
LABEL $6E02 L059142
COMMENT_LABEL $6E02 init channel loop
LABEL $738B L059818
COMMENT_LABEL $738B music-data, readonly
LABEL $6EEB EXIT_UPDATE
LABEL $6E85 L0591C0
LABEL $6EEC L059228
LABEL $70C1 L059418
LABEL $6EDF L059214
LABEL $6F37 L059282
LABEL $6F06 L05923E
LABEL $6F55 L0592A0
LABEL $6F2E L059276
LABEL $6F4A Exit_L059282
LABEL $6F4B L05929A
LABEL $6FA6 L059306
LABEL $6F88 L0592E2
LABEL $6F91 L0592EC
LABEL $6F7B L0592D6
LABEL $7321 L059642
COMMENT_LABEL $7321 longword-table, readonly
LABEL $7367 L05969E
COMMENT_LABEL $7367 Jumptable, readonly
LABEL $6FB1 L_CMD8
LABEL $6FD6 L059336
LABEL $6FDE L_CMD12
LABEL $7000 L_CMD11
LABEL $7022 L_CMD13
LABEL $7037 L_CMD5
LABEL $7051 L_CMD10
LABEL $705D L_CMD9
LABEL $706F L_CMD7
LABEL $7075 L_CMD6
LABEL $707E L_CMD2
LABEL $7086 L_CMD3
LABEL $708E L_CMD4
LABEL $7096 L_CMD14
LABEL $709F L_CMD1
LABEL $70A4 L_CMD16
LABEL $70AD L_CMD17
LABEL $70B6 L_CMD18
LABEL $7127 L059484
LABEL $7100 L059464
LABEL $7105 L05946C
LABEL $70E1 L05943C
LABEL $70FB L05945C
LABEL $7118 L05947A
LABEL $713F L05949E
LABEL $71E0 L059514
LABEL $717A L0594D4
LABEL $71B6 L059500
LABEL $7199 L0594EC
LABEL $71B1 L0594FC
LABEL $71DA L059512
LABEL $71CB L05950A
LABEL $7209 L05953C
LABEL $7206 L059538
LABEL $7226 L059552
LABEL $7248 L05956C
LABEL $7397 TRACK_DATA_CHANNEL1
LABEL $73E1 TRACK_DATA_CHANNEL2
LABEL $74F7 TRACK_DATA_CHANNEL3
LABEL $C8A1 VolumeTimer
LABEL $D000 CNTRL
COMMENT_LABEL $D000 ORB / IRB - Output Register B / Input Register B
LABEL $D002 DCNTRL
COMMENT_LABEL $D002 DDRB      - Data Direction Register B
LABEL $D004 T1LOLC
COMMENT_LABEL $D004 T1C-L     - Timer 1 Counter/Latch Low byte
LABEL $D005 T1HOC
COMMENT_LABEL $D005 T1C-H     - Timer 1 Counter High byte
LABEL $D00B ACNTRL
COMMENT_LABEL $D00B ACR       - Auxiliary Control Register
LABEL $D00D IFLAG
COMMENT_LABEL $D00D IFR       - Interrupt Flag Register
LABEL $0087 EEPROM_CHECKSUM
COMMENT_LABEL $0087 any value other than $00 or $e0
LABEL $2A03 DS1W_RESETDUR
COMMENT_LABEL $2A03 Reset Pulse duration
LABEL $D002 DS1W_PRESDUR
COMMENT_LABEL $D002 Presence Pulse duration
EQU $78 DS1W_TSLOTDUR
COMMENT_LABEL $78 Time Slot duration
LABEL $00CC DS1W_SKIPROM
LABEL $7D63 ds1w_open
LABEL $7D6B ds1w_close
LABEL $7D70 ds1w_reset
LABEL $7D7B dsreset_loop1
LABEL $7DA6 ds1w_notpresent
LABEL $7D8E dsreset_loop2
LABEL $7D98 dsreset_loop3
LABEL $7DA9 ds1w_txbyte
LABEL $7DAD ds1w_txbits
LABEL $7DC5 ds1w_txbit1
LABEL $7DB8 dstx0_loop
LABEL $7DD1 dstx1_loop
LABEL $7DDA ds1w_rxbyte
LABEL $7DDE ds1w_rxbits
LABEL $7DF0 dsrx_loop
LABEL $7DF9 ds2430_verify
LABEL $7E1E dsverify_exit
LABEL $00F0 DS2430_READMEM
COMMENT_LABEL $00F0 As READSP, but copies EEPROM to SP first
LABEL $7E14 dsverify_loop
EQU $0F DS2430_WRITESP
COMMENT_LABEL $0F Write bytes to Scratch Pad
EQU $55 DS2430_COPYSP
COMMENT_LABEL $55 Copy entire Scratch Pad to EEPROM
LABEL $00A5 DS2430_VALKEY
COMMENT_LABEL $00A5 Validation byte for COPYSP and LOCKAR
LABEL $983A DS2430_COPYDUR
COMMENT_LABEL $983A $3a98 = 15000 cycles = 10ms
LABEL $7E23 ds2430_load
LABEL $7E49 dsload_exit
LABEL $7E41 dsload_loop
LABEL $7E4E ds2430_save
LABEL $7E94 dssave_exit
LABEL $7E6C dssave_loop
LABEL $7E8F dssave_loop2
LABEL $7EA1 eeload_loop
LABEL $7EAB DefaultString
LABEL $7EBC eeformat_loop
LABEL $7ECB eesave_loop
COMMENT_LINE $0000 Vectrex Thrust main program
COMMENT_LINE $0000 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $0000 ----------------------------------------
COMMENT_LINE $0000 THRUST.ASM
COMMENT_LINE $0000 ----------------------------------------
COMMENT $0000 optimizations on
COMMENT_LINE $0000 Macros, defines and BSS.
COMMENT_LINE $0000 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $0000 normal setting all 0
COMMENT_LINE $0000 B1 is lock, B2 is Tractor, B3 is Thrust, B4 is fire
COMMENT_LINE $0000 DefaultButtonConfig = (0 << 6) | (1 << 4) | (2 << 2) | (3 << 0)
COMMENT $0000 level width in tiles (must be first byte)
COMMENT $0000 level height in tiles
COMMENT $0000 address of tiles
COMMENT $0000 address to list of guns
COMMENT $0000 address to list of fuel pods
COMMENT $0000 X/Y coords of orb
COMMENT $0000 X/Y coords of powerplant
COMMENT $0000 pointer to list of restart points
COMMENT $0000 pointer to list of doors
COMMENT $0000 pointer to list of doorswitches
COMMENT $0000 address to vectorlist used when drawing not clipped
COMMENT $0000 address to vectorlist used when drawing clipped
COMMENT $0000 address to vectorlist used when drawing not clipped
COMMENT $0000 address to vectorlist used when drawing clipped
COMMENT $0000 address to subroutine for collisiontest
COMMENT_LINE $0000 Returns an oscillating (sawtooth) value in a
COMMENT_LINE $0000 Max must be power of 2
COMMENT_LINE $0000 Max = 4, returns 012210
COMMENT_LINE $0000 Set the hi/lo part of a 16-bit register individually
COMMENT_LINE $0000 Collision test point vs box.
COMMENT_LINE $0000 size is width/height intersection test
COMMENT_LINE $0000 miss_label is where to bransch if no intersection
COMMENT_LINE $0000 u and y points to x1,y1 and x2,y2 respectively
COMMENT_LINE $0000 (x1> = x2 - (size/2)) && (x1<=x2 + (size/2)) &&  (y1>=y2 - (size/2)) && (y1<=y2 + (size/2));
COMMENT_LINE $0000 Collision test point vs rectangle.
COMMENT_LINE $0000 sizeW/H is width/height of rectangle
COMMENT_LINE $0000 x1/y1 is point, x2/y2 is rectangle center
COMMENT_LINE $0000 miss_label is where to branch if no intersection
COMMENT_LINE $0000 u and y points to x1,y1 and x2,y2 respectively
COMMENT_LINE $0000 (x1> = x2 - (sizeW/2)) && (x1<=x2 + (sizeW/2)) &&  (y1>=y2 - (sizeH/2)) && (y1<=y2 + (sizeH/2));
COMMENT_LINE $0000 Collision test area vs area
COMMENT_LINE $0000 xmin1,xmax1,ymin1,ymax1 are s-relative dimensions of first rectangle
COMMENT_LINE $0000 centerx2,centery2 are u-relative center-coords of second rectangle
COMMENT_LINE $0000 size2 is height/width of second rectangle
COMMENT_LINE $0000 Helper macro for mDecLocals
COMMENT_LINE $0000 Declare local stack frame.
COMMENT_LINE $0000 s1 nr of 1-byte locals,
COMMENT_LINE $0000 s2 nr of 2-byte locals
COMMENT_LINE $0000 bufsize is size of extra buffer (can be omitted)
COMMENT_LINE $0000 Locals are named Local1B etc for byte, Local1W for word, buffer is named LocalBuffer.
COMMENT $0000 declare one byte locals
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0000 declare two byte locals
COMMENT $0000 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $0000 Free local stack frame declared with mDecLocals
COMMENT_LINE $0000 D0 directs -1, all d0 relative code is written with explicit '<'
COMMENT_LINE $0000 C8 always directs c8, all game variables are implicitly relative
COMMENT_LINE $0000 Returns a value in D between 0-255 if coord is on screen
COMMENT_LINE $0000 Tests for world wrap-around
COMMENT $0000 no param, X holds X-coord
COMMENT $0000 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $0000 stx -2,s
COMMENT_LINE $0000 Coordinates in game world are stored in fixed point three bytes
COMMENT_LINE $0000 The integer part is in the first two bytes, the fraction is in the top two bits of the third byte
COMMENT_LINE $0000 Store d into three bytes in x
COMMENT_LINE $0000 Read three bytes from x into d
COMMENT_LINE $0000 Update x-coordinate in sprite structure. Apply velocity and test for world wrap.
COMMENT_LINE $0000 u is pointer to sprite structure
COMMENT_LINE $0000 X_Offset is u-relative offset to 3 byte x-coordinate
COMMENT_LINE $0000 VelocX_Offset is u-relative offset to x-velocity
COMMENT $0000 Update sprite X coordinate
COMMENT $0000 Check for world ends
COMMENT $0000 Left end hit, wrap
COMMENT $0000 Right edge hit
COMMENT_LINE $0000 Update y-coordinate in sprite structure. Apply velocity and test for top of world.
COMMENT_LINE $0000 u is pointer to sprite structure
COMMENT_LINE $0000 X_Offset is u-relative offset to 3 byte x-coordinate
COMMENT_LINE $0000 VelocX_Offset is u-relative offset to x-velocity
COMMENT_LINE $0000 HitTopLabel label where to jump if top of world
COMMENT $0000 Update sprite Y coordinate
COMMENT $0000 Top of world hit, bransch to remove
COMMENT_LINE $0000 Clear bit A in address adddr.
COMMENT_LINE $0000 a holds the bit nr
COMMENT_LINE $0000 addr is the address of the byte where the bit should be cleared
COMMENT $0000 start with all bits set
COMMENT $0000 clear carry flag, rolb will shift it into b
COMMENT $0000 rotate a zero into b
COMMENT $0000 b now has a hole in it, AND with addr to clear bit
COMMENT_LINE $0000 16 bit version of ClearBitA
COMMENT $0000 start with all bits set
COMMENT $0000 clear carry flag, rolb will shift it into d
COMMENT $0000 rotate a zero into d
COMMENT $0000 D now has a hole in it, AND with addr to clear bit
COMMENT_LINE $0000 D = D div TileW
COMMENT_LINE $0000 D = D div TileH
COMMENT_LINE $0000 x,y is world coords, returns tile pointer in y
COMMENT_LINE $0000 calc tile pointer: x = tiles + (CurLevelSizeX * (WorldY div TileH)) + (WorldX div TileW)
COMMENT $0000 x
COMMENT $0000 y
COMMENT_LINE $0000 Get a random value to A
COMMENT $0000 call rom
COMMENT_LINE $0000 Set pointer to three byte random seed in u, save old ptr in oldptr,s
COMMENT $0000 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0000 sta   $C827
COMMENT $0000 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0000 leax  2,x
COMMENT_LINE $0000 Ev. m�ste flera nop l�ggas till h�r f�r att kompensera att f�reg�ende rad
COMMENT_LINE $0000 kommenterats bort
COMMENT_LINE $0000 nop
COMMENT_LINE $0000 nop
COMMENT_LINE $0000 Move to d, without the extra wait that the ROM version use
COMMENT_LINE $0000 PF33B: lda   #0x04
COMMENT_LINE $0000 PF341: deca
COMMENT_LINE $0000 bne   PF341
COMMENT_LINE $0000 move pen to d
COMMENT_LINE $0000 inline convert ab to abs
COMMENT_LINE $0000 the following is just to calc how long to wait for finish
COMMENT $0000 end inline
COMMENT_LINE $0000 From vectrex.txt
COMMENT_LINE $0000 "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $0000 your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $0000 ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $0000 PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $0000 bne   PF2CC
COMMENT $0000 removed in 1.01
COMMENT_LINE $0000 sty ,s      ;crash
COMMENT_LINE $0000 System Executive Entry Points
COMMENT_LINE $0000 System RAM locations
COMMENT_LINE $0000 *****************************
COMMENT_LINE $0000 BSS section.
COMMENT_LINE $0000 Data declared here is not part of the binary image.
COMMENT_LINE $0000 The ORG line tells the assembler where to start allocating memory adresses
COMMENT_LINE $0000 to the names defined in this section.
COMMENT_LINE $0000 Labels needs to be declared before use to let the assembler optimize direct addressing with DP.
COMMENT_LINE $C880 **************
COMMENT_LINE $C880 EEPROM-buffer, loaded with eeprom content or default values on boot
COMMENT_LINE $C880 Keep in sync with eeprom_format
COMMENT $C880 Button configuration
COMMENT $C881 non-zero if bonus game is enabled
COMMENT $C882 Highscores for each game mode, including hidden bonus game
COMMENT $C89E pad to 32-bytes
COMMENT $C89F last byte is checksum
COMMENT_LINE $C8A0 End of EEPROM
COMMENT_LINE $C8A0 **************
COMMENT_LINE $C8A0 Temps used by refreshdrawlist, and collision
COMMENT $C8A1 keep
COMMENT $C8A2 together
COMMENT_LINE $C8AC Represents the center point between ship and the pod
COMMENT_LINE $C8AC Fixed point 2 bits, 3 bytes
COMMENT_LINE $C8AC The fraction part is in the third byte, this makes it easy to read the integer part with ldd.
COMMENT_LINE $C8B2 Current angle between ship and pod
COMMENT_LINE $C8B2 8 bit fixed point, hi(Alpha) is 0..240 (unsigned)
COMMENT_LINE $C8B4 Amount to change alpha (spin speed)
COMMENT_LINE $C8BB Ship coordinates.
COMMENT_LINE $C8BB Position in game world.
COMMENT $C8BB keep
COMMENT $C8BD together
COMMENT_LINE $C8BF Pod (when carried by ship)
COMMENT $C8BF keep
COMMENT $C8C1 together
COMMENT_LINE $C8C3 Ship directions 0--32, 8=up.
COMMENT_LINE $C8C3 Vectrex ROM direction 0--64, 0=up.
COMMENT_LINE $C8C3 Conversion macro: ship angle -> vectrex angle
COMMENT_LINE $C8C3 Scrolling view
COMMENT $C8C3 0=no scroll, negative scroll left, positive scroll right
COMMENT $C8C4 0=no scroll, negative scroll up, positive scroll down
COMMENT $C8C5 1 if need refresh drawlist
COMMENT_LINE $C8C6 Coordinate in game world for top left edge of screen.
COMMENT_LINE $C8C6 This value is subtracted from sprite coord to produce screen coord.
COMMENT_LINE $C8CA Game mode = difficulty
COMMENT_LINE $C8CA Current level
COMMENT $C8CF Actually highest ViewY (=EndY - ScreenH)
COMMENT_LINE $C8D2 CLIP globals (same as viewx/y)
COMMENT_LINE $C8DA Status-display: Score and fuel
COMMENT_LINE $C8E0 NOTE first byte after PlayerScore is overwritten in Text_GameOver
COMMENT_LINE $C8E3 Demo mode, use same RAM as playerscore, no score is displayed in demomode
COMMENT_LINE $C8E3 Time attack
COMMENT $C8E3 countdown in timeattack game
COMMENT_LINE $C8E4 Frame counter
COMMENT_LINE $C8E4 This differs from the ROM loopcounter.
COMMENT_LINE $C8E4 Two separate counters are combined in one byte, which makes
COMMENT_LINE $C8E4 non-power of two frame interval tests possible.
COMMENT_LINE $C8E4 Thanks to Thomas Jentzsch.
COMMENT_LINE $C8E5 ---------------------------------------
COMMENT_LINE $C8E5 ---------------------------------------
COMMENT_LINE $C8E5 Flags
COMMENT_LINE $C8E7 Guns
COMMENT $C8E7 Each bit is a activeflag for a gun
COMMENT $C8E9 Guns are stored in rom with level data
COMMENT $C8E9 x
COMMENT $C8E9 y
COMMENT $C8E9 sprite id
COMMENT_LINE $C8E9 Fuel cells
COMMENT $C8E9 Each bit is a activeflag for a fuel cell
COMMENT $C8EA Amount of fuel left in each cell
COMMENT $C8F2 Fuel cells are stored in rom with level data
COMMENT $C8F2 x
COMMENT $C8F2 y
COMMENT_LINE $C8F2 Doors and switches
COMMENT $C8F2 Direction door closes: 0=right, 1=up
COMMENT $C8F2 Door switch
COMMENT $C8F2 0=left wall, 1=right wall
COMMENT $C8F2 Counter used when opening doors
COMMENT_LINE $C8F3 Powerplant
COMMENT $C8F3 hitpoints. <0 = countdown, >0 = hitpoints left
COMMENT $C8F4 >0 recently shot
COMMENT_LINE $C8F5 Perfect bonus
COMMENT_LINE $C8F6 Gun shots
COMMENT $C8F6 Each bit is a activeflag for a gunshot.
COMMENT $C8F7 3 byte world coordinate
COMMENT $C8F7 3 byte world coordinate
COMMENT $C8F7 Velocity
COMMENT $C8F7 Delay timer for next shot
COMMENT $C8F8 Mask and delay for new shots, constants depending on level no and gamemode
COMMENT_LINE $C913 Fx
COMMENT_LINE $C913 Each entry is three bytes:
COMMENT_LINE $C913 Time       8 bits: timeleft, 0=inactive
COMMENT_LINE $C913 TargetType 4 bits: ship,Pod,gun,fuel,switch,plant
COMMENT_LINE $C913 FxType     4 bits: explosion,teleportfx,250score,planetexplode
COMMENT_LINE $C913 Index      8 bits: fuel,switch etc index
COMMENT_LINE $C91C Ship shots.
COMMENT_LINE $C91C Max nr of shots active at one time. This value can be increased.
COMMENT_LINE $C91C Structure holding info about one shot.
COMMENT $C91C Flag: is shot active?
COMMENT $C91C 3 byte world coordinate
COMMENT $C91C 3 byte world coordinate
COMMENT $C91C Velocity
COMMENT_LINE $C91C Array with shots.
COMMENT_LINE $C940 Sound data, see Thrust_Sound.asm
COMMENT_LINE $C940 Sound slot = Sound channel
COMMENT $C940 contains id,timer of current sound, 0=empty
COMMENT_LINE $C946 Cheat mode, if both are zero then cheat is not active
COMMENT_LINE $C946 Dynamic length, keep at end of BSS-section
COMMENT_LINE $0000 ROM-header
COMMENT $000B ptr to execrom-music
COMMENT $003B init joystick
COMMENT_LINE $0041 jsr Zzap_Start        ;uncomment while debugging bonusgame
COMMENT $0045 save to eeprom if changed (options and highscores)
COMMENT $004B Set DP to C8 for game logic code
COMMENT $0056 Set DP to C8 for game logic code
COMMENT_LINE $0081 Wait for screen sync
COMMENT_LINE $0081 DP is D0 after call to waitrecal
COMMENT_LINE $0081 Keep DP at D0 for draw vector code
COMMENT $00B0 do not display 'game over' in demo mode
COMMENT_LINE $00B9 Line-clipping subroutine
COMMENT_LINE $00B9 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $00B9 This code was originally written in C and compiled with the GCC for 6809 compiler.
COMMENT_LINE $00B9 **optimize:
COMMENT_LINE $00B9 byt ut s++ mot -2,s.
COMMENT_LINE $00B9 byt ut jmp mot bra
COMMENT_LINE $00B9 byt ut lbxx mot bxx
COMMENT_LINE $00B9 ;;-----------------------------------------
COMMENT_LINE $00B9 ;;  PROLOGUE for CohenSutherlandClip
COMMENT_LINE $00B9 ;;-----------------------------------------
COMMENT $00B9 allocate auto variables
COMMENT $00BC save registers
COMMENT_LINE $00BE ;;END PROLOGUE
COMMENT $00BE clrqi 24,s
COMMENT $00C1 movhi: 38,s -> R:x
COMMENT $00C4 extendqihi: ,x+ -> R:d
COMMENT $00C7 movhi: R:d -> R:u
COMMENT $00C9 movhi: R:x -> 38,s
COMMENT $00CC addhi: R:u = R:u + #-1
COMMENT $00CE cmphi:
COMMENT $00D6 movhi: 38,s -> R:x
COMMENT $00D9 movqi: ,x+ -> R:b
COMMENT $00DB movqi: R:b -> 25,s
COMMENT $00DE extendqihi: ,x+ -> R:d
COMMENT $00E1 addhi: R:d += 42,s
COMMENT $00E4 movhi: R:d -> 34,s
COMMENT $00E7 extendqihi: ,x+ -> R:d
COMMENT $00EA movhi: R:x -> 38,s
COMMENT $00ED movhi: 44,s -> R:y
COMMENT $00F1 addhi: R:x = R:y + R:d
COMMENT $00F3 movhi: R:x -> 32,s
COMMENT $00F6 movhi: 38,s -> R:y
COMMENT $00FA extendqihi: ,y+ -> R:d
COMMENT $00FD addhi: R:d += 42,s
COMMENT $0100 movhi: R:d -> 30,s
COMMENT $0103 extendqihi: ,y+ -> R:d
COMMENT $0106 movhi: R:y -> 38,s
COMMENT $010A addhi: R:d += 44,s
COMMENT $010D movhi: R:d -> 28,s
COMMENT $0110 clrqi REG:b
COMMENT $0111 cmphi:
COMMENT $0115 movqi: #1 -> R:b
COMMENT $0119 cmphi:
COMMENT $011D movqi: #2 -> R:b
COMMENT $011F movhi: 34,s -> R:x
COMMENT $0122 movhi: _clip_xmax -> R:y
COMMENT $0125 cmphi: R:y with R:x
COMMENT $0127 cmphi:
COMMENT $012B iorqi: b |= #4
COMMENT $012F cmphi:
COMMENT $0133 iorqi: b |= #8
COMMENT $0135 movqi: R:b -> 27,s
COMMENT $0138 clrqi REG:b
COMMENT $0139 movhi: 28,s -> R:x
COMMENT $013C cmphi:
COMMENT $0140 movqi: #1 -> R:b
COMMENT $0144 cmphi:
COMMENT $0148 movqi: #2 -> R:b
COMMENT $014A movhi: 30,s -> R:x
COMMENT $014D cmphi: R:y with R:x
COMMENT $014F cmphi:
COMMENT $0153 iorqi: b |= #4
COMMENT $0157 cmphi:
COMMENT $015B iorqi: b |= #8
COMMENT $015D movqi: R:b -> 26,s
COMMENT $0160 addhi: R:x = R:u + #-1
COMMENT $0162 movhi: R:x -> 6,s
COMMENT $0167 movqi: 27,s -> R:b
COMMENT $016A andqi: R:b &= 26,s
COMMENT $016D tstqi: R:b
COMMENT $0172 tstqi: MEM:27,s
COMMENT $0179 addhi: R:y = R:s + #34
COMMENT $017C movhi: R:y -> 18,s
COMMENT $0180 addhi: R:x = R:s + #32
COMMENT $0183 movhi: R:x -> 16,s
COMMENT $0186 movqi: 25,s -> R:b
COMMENT $0189 cmpqi:
COMMENT $018F tstqi: R:b
COMMENT $0195 movqi: 25,s -> R:b
COMMENT $0198 cmpqi:
COMMENT $019F movqi: 27,s -> R:b
COMMENT $01A2 andqi: R:b &= #1
COMMENT $01A4 tstqi: R:b
COMMENT $01A7 movhi: _clip_ymax -> R:y
COMMENT $01AD movhi: _clip_ymin -> R:y
COMMENT $01B0 movhi: 16,s -> R:x
COMMENT $01B3 movhi: R:y -> ,x
COMMENT $01B9 movqi: 27,s -> R:b
COMMENT $01BC andqi: R:b &= #4
COMMENT $01BE tstqi: R:b
COMMENT $01C1 movhi: _clip_xmax -> R:y
COMMENT $01C7 movhi: _clip_xmin -> R:y
COMMENT $01CA movhi: 18,s -> R:x
COMMENT $01CD movhi: R:y -> ,x
COMMENT $01D3 movqi: 27,s -> R:b
COMMENT $01D6 andqi: R:b &= #1
COMMENT $01D8 tstqi: R:b
COMMENT $01DB movhi: 16,s -> R:x
COMMENT $01DE movhi: ,x -> R:d
COMMENT $01E0 movhi: _clip_ymax -> R:u
COMMENT $01E2 subhi: R:d -= R:u
COMMENT_LINE $01E6 ashlhi: d by #1
COMMENT $01E8 movhi: R:d -> R:y
COMMENT $01EA movhi: 18,s -> R:x
COMMENT $01ED movhi: ,x -> R:d
COMMENT $01EF addhi: R:x = R:y + R:d
COMMENT $01F1 cmphi:
COMMENT $01F7 subhi: R:d -= R:y
COMMENT $01FB movhi: R:d -> R:x
COMMENT $01FD movhi: 18,s -> R:y
COMMENT $0201 movhi: R:x -> ,y
COMMENT $0203 movhi: 16,s -> R:x
COMMENT $0209 movqi: 27,s -> R:b
COMMENT $020C andqi: R:b &= #2
COMMENT $020E tstqi: R:b
COMMENT $0211 movhi: _clip_ymin -> R:u
COMMENT $0213 movhi: R:u -> R:d
COMMENT $0215 movhi: 16,s -> R:y
COMMENT $0219 subhi: R:d -= ,y
COMMENT_LINE $021B ashlhi: d by #1
COMMENT $021D movhi: R:d -> R:y
COMMENT $021F movhi: 18,s -> R:x
COMMENT $0222 movhi: ,x -> R:d
COMMENT $0224 addhi: R:x = R:y + R:d
COMMENT $0226 cmphi:
COMMENT $022C subhi: R:d -= R:y
COMMENT $0230 movhi: R:d -> R:x
COMMENT $0232 movhi: 18,s -> R:y
COMMENT $0236 movhi: R:x -> ,y
COMMENT $0238 movhi: 16,s -> R:x
COMMENT $023E movqi: 27,s -> R:b
COMMENT $0241 andqi: R:b &= #4
COMMENT $0243 tstqi: R:b
COMMENT $0246 movhi: 18,s -> R:y
COMMENT $024A movhi: ,y -> R:d
COMMENT $024C movhi: _clip_xmax -> R:u
COMMENT $024E subhi: R:d -= R:u
COMMENT $0254 movhi: _clip_xmin -> R:u
COMMENT $0256 movhi: R:u -> R:d
COMMENT $0258 movhi: 18,s -> R:y
COMMENT $025C subhi: R:d -= ,y
COMMENT_LINE $025E ashrhi: d by #1
COMMENT $0260 movhi: R:d -> R:y
COMMENT $0262 movhi: 16,s -> R:x
COMMENT $0265 movhi: ,x -> R:d
COMMENT $0267 addhi: R:x = R:y + R:d
COMMENT $0269 cmphi:
COMMENT $026F subhi: R:d -= R:y
COMMENT $0273 movhi: R:d -> R:x
COMMENT $0275 movhi: 16,s -> R:y
COMMENT $0279 movhi: R:x -> ,y
COMMENT $027B movhi: 18,s -> R:x
COMMENT $027E movhi: R:u -> ,x
COMMENT $0280 movhi: 34,s -> R:y
COMMENT $0284 movhi: 32,s -> R:x
COMMENT $0287 clrqi REG:b
COMMENT $0288 cmphi:
COMMENT $028C movqi: #1 -> R:b
COMMENT $0290 cmphi:
COMMENT $0294 movqi: #2 -> R:b
COMMENT $0296 cmphi:
COMMENT $029B iorqi: b |= #4
COMMENT $029F cmphi:
COMMENT $02A4 iorqi: b |= #8
COMMENT $02A6 movqi: R:b -> 27,s
COMMENT $02AC addhi: R:y = R:s + #30
COMMENT $02AF movhi: R:y -> 14,s
COMMENT $02B2 addhi: R:x = R:s + #28
COMMENT $02B5 movhi: R:x -> 12,s
COMMENT $02B7 movhi: 34,s -> R:y
COMMENT $02BB movhi: R:y -> 10,s
COMMENT $02BE movhi: 32,s -> R:d
COMMENT $02C1 movhi: R:d -> 8,s
COMMENT $02C3 movqi: 25,s -> R:b
COMMENT $02C6 cmpqi:
COMMENT $02CC tstqi: R:b
COMMENT $02D2 movqi: 25,s -> R:b
COMMENT $02D5 cmpqi:
COMMENT $02DC movqi: 26,s -> R:b
COMMENT $02DF andqi: R:b &= #1
COMMENT $02E1 tstqi: R:b
COMMENT $02E4 movhi: _clip_ymax -> R:y
COMMENT $02EA movhi: _clip_ymin -> R:y
COMMENT $02ED movhi: 12,s -> R:x
COMMENT $02EF movhi: R:y -> ,x
COMMENT $02F5 movqi: 26,s -> R:b
COMMENT $02F8 andqi: R:b &= #4
COMMENT $02FA tstqi: R:b
COMMENT $02FD movhi: _clip_xmax -> R:y
COMMENT $0302 movhi: _clip_xmin -> R:y
COMMENT $0305 movhi: 14,s -> R:x
COMMENT $0307 movhi: R:y -> ,x
COMMENT $030D movqi: 26,s -> R:b
COMMENT $0310 andqi: R:b &= #1
COMMENT $0312 tstqi: R:b
COMMENT $0315 movhi: 12,s -> R:x
COMMENT $0317 movhi: ,x -> R:d
COMMENT $0319 movhi: _clip_ymax -> R:u
COMMENT $031B subhi: R:d -= R:u
COMMENT_LINE $031F ashlhi: d by #1
COMMENT $0321 movhi: R:d -> R:y
COMMENT $0323 movhi: 14,s -> R:x
COMMENT $0325 movhi: ,x -> R:d
COMMENT $0327 addhi: R:x = R:y + R:d
COMMENT $0329 cmphi:
COMMENT $032E subhi: R:d -= R:y
COMMENT $0332 movhi: R:d -> R:x
COMMENT $0334 movhi: 14,s -> R:y
COMMENT $0337 movhi: R:x -> ,y
COMMENT $0339 movhi: 12,s -> R:x
COMMENT $033E movqi: 26,s -> R:b
COMMENT $0341 andqi: R:b &= #2
COMMENT $0343 tstqi: R:b
COMMENT $0346 movhi: _clip_ymin -> R:u
COMMENT $0348 movhi: R:u -> R:d
COMMENT $034A movhi: 12,s -> R:y
COMMENT $034D subhi: R:d -= ,y
COMMENT_LINE $034F ashlhi: d by #1
COMMENT $0351 movhi: R:d -> R:y
COMMENT $0353 movhi: 14,s -> R:x
COMMENT $0355 movhi: ,x -> R:d
COMMENT $0357 addhi: R:x = R:y + R:d
COMMENT $0359 cmphi:
COMMENT $035E subhi: R:d -= R:y
COMMENT $0362 movhi: R:d -> R:x
COMMENT $0364 movhi: 14,s -> R:y
COMMENT $0367 movhi: R:x -> ,y
COMMENT $0369 movhi: 12,s -> R:x
COMMENT $036E movqi: 26,s -> R:b
COMMENT $0371 andqi: R:b &= #4
COMMENT $0373 tstqi: R:b
COMMENT $0376 movhi: 14,s -> R:y
COMMENT $0379 movhi: ,y -> R:d
COMMENT $037B movhi: _clip_xmax -> R:u
COMMENT $037D subhi: R:d -= R:u
COMMENT $0383 movhi: _clip_xmin -> R:u
COMMENT $0385 movhi: R:u -> R:d
COMMENT $0387 movhi: 14,s -> R:y
COMMENT $038A subhi: R:d -= ,y
COMMENT_LINE $038C ashrhi: d by #1
COMMENT $038E movhi: R:d -> R:y
COMMENT $0390 movhi: 12,s -> R:x
COMMENT $0392 movhi: ,x -> R:d
COMMENT $0394 addhi: R:x = R:y + R:d
COMMENT $0396 cmphi:
COMMENT $039B subhi: R:d -= R:y
COMMENT $039F movhi: R:d -> R:x
COMMENT $03A1 movhi: 12,s -> R:y
COMMENT $03A4 movhi: R:x -> ,y
COMMENT $03A6 movhi: 14,s -> R:x
COMMENT $03A8 movhi: R:u -> ,x
COMMENT $03AA movhi: 30,s -> R:y
COMMENT $03AE movhi: 28,s -> R:x
COMMENT $03B1 clrqi REG:b
COMMENT $03B2 cmphi:
COMMENT $03B6 movqi: #1 -> R:b
COMMENT $03BA cmphi:
COMMENT $03BE movqi: #2 -> R:b
COMMENT $03C0 cmphi:
COMMENT $03C5 iorqi: b |= #4
COMMENT $03C9 cmphi:
COMMENT $03CE iorqi: b |= #8
COMMENT $03D0 movqi: R:b -> 26,s
COMMENT $03D3 movqi: 27,s -> R:b
COMMENT $03D6 iorqi: b |= 26,s
COMMENT $03D9 tstqi: R:b
COMMENT $03DE movhi: 34,s -> R:d
COMMENT $03E1 subhi: R:d -= _clip_xmin
COMMENT $03E3 movhi: R:d -> 22,s
COMMENT $03E6 movhi: _clip_ymin -> R:d
COMMENT $03E8 subhi: R:d -= 32,s
COMMENT $03EB movhi: R:d -> 20,s
COMMENT $03EE movhi: 40,s -> R:x
COMMENT $03F1 movqi: #-1 -> R:b
COMMENT $03F3 movqi: R:b -> ,x+
COMMENT $03F5 movlsbqihi: 20,s -> R:b (with corrected memadress)
COMMENT $03F8 addqi: R:b += #127
COMMENT $03FA movqi: R:b -> ,x+
COMMENT $03FC movlsbqihi: 22,s -> R:b (with corrected memadress)
COMMENT $03FF addqi: R:b += #-128
COMMENT $0401 movqi: R:b -> ,x+
COMMENT $0403 movqi: #1 -> R:b
COMMENT $0405 movqi: R:b -> ,x+
COMMENT $0407 movhi: _clip_ymin -> R:d
COMMENT $0409 subhi: R:d -= 28,s
COMMENT $040C subhi: R:d -= 20,s
COMMENT $040F movqi: R:b -> ,x+
COMMENT $0411 movhi: 30,s -> R:d
COMMENT $0414 subhi: R:d -= _clip_xmin
COMMENT $0416 subhi: R:d -= 22,s
COMMENT $0419 movqi: R:b -> ,x+
COMMENT $041B movhi: R:x -> 40,s
COMMENT $041E movqi: 24,s -> R:b
COMMENT $0421 addqi: R:b += #6
COMMENT $0423 movqi: R:b -> 24,s
COMMENT $0426 movhi: 6,s -> R:u
COMMENT $0428 cmphi:
COMMENT $0430 extendqihi: 24,s -> R:d
COMMENT_LINE $0434 ;;EPILOGUE
COMMENT $0434 restore registers
COMMENT $0436 deallocate auto variables
COMMENT $0439 return from function
COMMENT_LINE $043A ;;-----------------------------------------
COMMENT_LINE $043A ;; END EPILOGUE for CohenSutherlandClip
COMMENT_LINE $043A ;;-----------------------------------------
COMMENT_LINE $043A Thrust sound effects
COMMENT_LINE $043A Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $043A todo: anropa init_music_buf samtidigt som levelclearlabel
COMMENT_LINE $043A ResetSounds, nullar buffer, s�tter mixer till konstant
COMMENT_LINE $043A d�ligt
COMMENT_LINE $043A vad �r fel med current solution?
COMMENT_LINE $043A tv� ljud kan inte dela channel
COMMENT_LINE $043A Sound_Thrust_Init
COMMENT_LINE $043A s�tter mixers
COMMENT_LINE $043A s�tter timer
COMMENT_LINE $043A Sound_Thrust_Update
COMMENT_LINE $043A s�tter ljudreg
COMMENT_LINE $043A ideer
COMMENT_LINE $043A freq baserat p� sinus
COMMENT_LINE $043A arpeggio baserat p� sinus
COMMENT_LINE $043A vibrato baserat p� sinus
COMMENT_LINE $043A sl� p�/av vibrato/arpeggio
COMMENT_LINE $043A k�llor: frame tictoc, sinus
COMMENT_LINE $043A random changes
COMMENT_LINE $043A Use frequency-table from Thrust_Music.asm
COMMENT_LINE $0000 This is a bit clumsy:
COMMENT_LINE $0000 - changing id (priority) also means having to switch position in tables
COMMENT_LINE $0000 - changing slot (channel) also means having to change channel in sound code
COMMENT $043A 0 is unused
COMMENT $0444 bounce
COMMENT $0458 0 is unused
COMMENT_LINE $0476 Emit sound, all registers except D are preserved
COMMENT_LINE $0000 *****************
COMMENT_LINE $0480 a=slot*2, b=sound id * 2
COMMENT $0485 slot is free
COMMENT $0487 slot busy, test priority
COMMENT_LINE $048F y=sound slot
COMMENT $0497 set timer
COMMENT_LINE $049B rts
COMMENT_LINE $049B *****************
COMMENT $04A3 b=sound id * 2
COMMENT $04A7 decrease time
COMMENT $04AD a=timer
COMMENT $04B9 make slot empty
COMMENT $04C0 b=this channels volume register
COMMENT $04C2 clear volume
COMMENT_LINE $04CA *****************
COMMENT_LINE $04CA *****************
COMMENT_LINE $04CA Sound-routines
COMMENT_LINE $04CA Separate sound-function for each soundid
COMMENT_LINE $04CA *****************
COMMENT_LINE $04CA SoundWork have the registers reversed
COMMENT_LINE $04CA x must point to sound regs
COMMENT_LINE $0000 x must point to sound regs
COMMENT_LINE $0000 x must point to sound regs
COMMENT_LINE $0000 x must point to sound regs
COMMENT_LINE $04CA mMixerOn MixerNoiseC
COMMENT_LINE $04CA mMixerOff MixerToneC
COMMENT $04DD **todo: keep this? affects explosion sounds also
COMMENT_LINE $04E6 mSound RegPitchA1,50
COMMENT_LINE $04E6 mSound RegPitchA2,0
COMMENT_LINE $04EF Arpeggio every frame + note falling every 2nd frame
COMMENT $052F + (Octave)
COMMENT_LINE $0554 All sound is made in init
COMMENT_LINE $0562 mSound RegPitchB2
COMMENT_LINE $0562 tfr b,a
COMMENT_LINE $0562 mSound RegPitchB1
COMMENT_LINE $057A Slightly higher tone if homing
COMMENT_LINE $05A6 rts
COMMENT $05B9 reverse time
COMMENT_LINE $05BD rts
COMMENT $05E4 call rom
COMMENT $0605 + Octave*1
COMMENT_LINE $065D Use hardcoded adress for jumping to avoid long constants
COMMENT_LINE $0660 lda zcJumping,y
COMMENT_LINE $06BB Thrust graphical effects
COMMENT_LINE $06BB Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $06BB Time       8 bits:
COMMENT_LINE $06BB TargetType 4 bits: ship,orb,gun,fuel,switch,plant
COMMENT_LINE $06BB FxType     4 bits: explosion,teleportfx,250score,planetexplode
COMMENT_LINE $06BB Index      8 bits: fuel,switch etc index
COMMENT_LINE $06BB en del d�r direkt, refuel st�nger av sig sj�lv, anv�nder endast loopcounter
COMMENT_LINE $06BB DrawFx
COMMENT_LINE $06BB jumptable for targettype, returns coords
COMMENT_LINE $06BB FxGetCoords index
COMMENT_LINE $06BB jumptable for fxtype
COMMENT_LINE $06BB FxDrawFx coords,time
COMMENT_LINE $06BB every fx-rutin can also be called separately, FxRotatingStar is called from refueling
COMMENT_LINE $06BB UpdateFx
COMMENT_LINE $06BB dec time
COMMENT_LINE $06BB jumptable for Finish
COMMENT_LINE $06BB FxFinish_Ship FxType
COMMENT_LINE $06BB case TeleportInFx
COMMENT_LINE $06BB = active
COMMENT_LINE $06BB case TeleportOutFx
COMMENT_LINE $06BB jsr finishlevel
COMMENT_LINE $06BB case Explosion
COMMENT_LINE $06BB call loselife
COMMENT_LINE $06BB Thrust_Fx.asm
COMMENT_LINE $06BB requirements
COMMENT_LINE $06BB able to draw refueling effect
COMMENT_LINE $06BB teleport in/out effect
COMMENT_LINE $06BB mEmitFx FxTarget,FxType,InitTime,IndexReg (optional)
COMMENT_LINE $06BB A holds byte, exits with targettype in a, and fxtype in b
COMMENT_LINE $0000 Emit effect, all registers except D are preserved
COMMENT_LINE $0000 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $0000 $6bb
COMMENT_LINE $0000 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $06BD declare buffer
COMMENT_LINE $06BD 5 W is max, add more if needed
COMMENT_LINE $06CF find free
COMMENT_LINE $06DD no free found, replace first that isn't target ship
COMMENT_LINE $06DD ships fx must be prioritized because ExplodeShip/ExitLevel is called from end of fx
COMMENT $06F5 time
COMMENT $06F9 target/fx as one byte
COMMENT $06FD index
COMMENT $0701 sound fx
COMMENT_LINE $070C rts
COMMENT_LINE $070C *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $070C declare buffer
COMMENT_LINE $070C 5 W is max, add more if needed
COMMENT $0733 A holds index
COMMENT_LINE $0737 X and Y holds world coords
COMMENT $073D A holds time
COMMENT_LINE $074E *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $074E declare buffer
COMMENT_LINE $074E 5 W is max, add more if needed
COMMENT $075A decrease time
COMMENT $075E reached zero, call finishevent
COMMENT $0779 A holds fxtype
COMMENT $077B B holds index
COMMENT_LINE $078C *****************
COMMENT $078C save y, mGetScreenMacro uses -2
COMMENT_LINE $078F transform x
COMMENT $078F no param, X holds X-coord
COMMENT $0791 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $079F stx -2,s
COMMENT $07AF load y
COMMENT $07B1 transform y
COMMENT_LINE $07C3 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $07C3 declare buffer
COMMENT_LINE $07C3 5 W is max, add more if needed
COMMENT_LINE $07C5 DP must be D0
COMMENT_LINE $07C5 **todo: perhaps make a FxDrawVL also, this routine takes sprite format of VL
COMMENT $07D0 Malban jsr -> bsr
COMMENT $07D6 Scale $7f is required for move_pen_d to reach whole screen
COMMENT $07D6 if argument exists, load into a, otherwise use current a
COMMENT_LINE $07F5 PF33B: lda   #0x04
COMMENT_LINE $07F5 PF341: deca
COMMENT_LINE $07F5 bne   PF341
COMMENT $07F7 if argument exists, load into a, otherwise use current a
COMMENT_LINE $07F7 sta   $C827
COMMENT $0802 Nr of vectors in list
COMMENT $0804 Scale
COMMENT $0806 Draw list
COMMENT $0809 Get next count, $ff ends
COMMENT_LINE $0810 *****************
COMMENT_LINE $082A PF33B: lda   #0x04
COMMENT_LINE $082A PF341: deca
COMMENT_LINE $082A bne   PF341
COMMENT_LINE $082F *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $082F declare buffer
COMMENT_LINE $082F 5 W is max, add more if needed
COMMENT_LINE $0840 draw several times without reset0ref, each ring is drawn a bit above the last one
COMMENT $0848 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0848 sta   $C827
COMMENT $0858 scale
COMMENT_LINE $086A *****************
COMMENT_LINE $086A Draw a slowly rising score amount
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $086A declare buffer
COMMENT_LINE $086A 5 W is max, add more if needed
COMMENT_LINE $0876 lsla
COMMENT $0882 scale
COMMENT_LINE $0885 lsra
COMMENT $0885 intensity
COMMENT_LINE $088F *****************
COMMENT_LINE $088F GetCoords-routines
COMMENT_LINE $088F Returns world-coords in X and Y for each type of target
COMMENT_LINE $088F *****************
COMMENT_LINE $088F *****************
COMMENT_LINE $0897 *****************
COMMENT_LINE $089F *****************
COMMENT $089F Gun
COMMENT $08A4 skip gun count
COMMENT $08A9 u points to gun entry
COMMENT_LINE $08B4 *****************
COMMENT_LINE $08BD *****************
COMMENT $08C2 skip fuel count
COMMENT $08C7 u points to fuel coords
COMMENT_LINE $08CF *****************
COMMENT $08D5 skip switch count
COMMENT $08DA u points to fuel coords
COMMENT_LINE $08E2 *****************
COMMENT_LINE $08EA Walker constants are not declared yet
COMMENT_LINE $08EA avoid 2-bytes offsets
COMMENT $08EA weWalkerX
COMMENT $08EC weWalkerY
COMMENT_LINE $08F0 *****************
COMMENT_LINE $08F0 Draw-routines
COMMENT_LINE $08F0 Separate draw-function for each fxtype
COMMENT_LINE $08F0 *****************
COMMENT_LINE $08F0 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $08F0 declare buffer
COMMENT_LINE $08F0 5 W is max, add more if needed
COMMENT $08F9 reverse time
COMMENT_LINE $0902 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0902 declare buffer
COMMENT_LINE $0902 5 W is max, add more if needed
COMMENT_LINE $0904 Surround fuelcell with box
COMMENT $090C if argument exists, load into a, otherwise use current a
COMMENT_LINE $090E sta   $C827
COMMENT $091F call rom
COMMENT $0933 if argument exists, load into a, otherwise use current a
COMMENT_LINE $093A Draw dots rising from the fuelcell
COMMENT $093E offset each coordinate with data from exec-rom + loopcounter
COMMENT_LINE $095B From vectrex.txt
COMMENT_LINE $095B "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $095B your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $095F ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $095F PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $095F bne   PF2CC
COMMENT_LINE $0968 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0968 declare buffer
COMMENT_LINE $0968 5 W is max, add more if needed
COMMENT $0972 angle
COMMENT $097A vector count
COMMENT $097C Vector buffer
COMMENT $097E Rotate vectors
COMMENT $0988 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0988 sta   $C827
COMMENT_LINE $09A5 *****************
COMMENT_LINE $09AC *****************
COMMENT_LINE $09B3 *****************
COMMENT_LINE $09BA *****************
COMMENT_LINE $09CE *****************
COMMENT $09D0 reverse time
COMMENT_LINE $09D8 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $09D8 declare buffer
COMMENT_LINE $09D8 5 W is max, add more if needed
COMMENT_LINE $09E3 scale
COMMENT_LINE $09E3 lsra
COMMENT $09E3 intensity
COMMENT_LINE $09F0 *****************
COMMENT_LINE $0A07 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0A07 declare buffer
COMMENT_LINE $0A07 5 W is max, add more if needed
COMMENT_LINE $0A10 Get lines for gun
COMMENT_LINE $0A1B scale
COMMENT $0A1E intensity
COMMENT_LINE $0A22 ldb #$5f
COMMENT_LINE $0A2A -----------------
COMMENT_LINE $0A2A Finish-routines
COMMENT_LINE $0A2A Separate finish-function for each target
COMMENT_LINE $0A2A Called when time has run out for the fx
COMMENT_LINE $0A2A -----------------
COMMENT_LINE $0A2A *****************
COMMENT_LINE $0A33 cmpa #FxTypeWarpIn
COMMENT_LINE $0A33 bne fxsNext2
COMMENT_LINE $0A33 mClearFlag InactiveFlag
COMMENT_LINE $0A33 bra fxsExit
COMMENT_LINE $0A33 fxsNext2:
COMMENT_LINE $0A88 Code for handling ship and pod movement
COMMENT_LINE $0A88 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $0A88 Gamemode settings
COMMENT_LINE $0A8E *****************
COMMENT_LINE $0AB6 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0AB6 declare buffer
COMMENT_LINE $0AB6 5 W is max, add more if needed
COMMENT_LINE $0AB8 Ship-tests
COMMENT_LINE $0AB8 Setup hit-rectangle of ship
COMMENT_LINE $0AD6 TODO?
COMMENT_LINE $0AD6 ldx ShipX
COMMENT_LINE $0AD6 ldy ShipY
COMMENT_LINE $0AD6 mMakeRect LocalXmin1,ShipArea
COMMENT $0AD6 Collision ship vs fuel
COMMENT $0ADA load count
COMMENT $0B0F Collision ship vs level
COMMENT $0B16 Collision ship vs powerplant
COMMENT_LINE $0B3A mTestFlag HasOrbFlag
COMMENT_LINE $0B3A bne scoVsPodMiss
COMMENT $0B3A Collision ship vs stationary pod
COMMENT_LINE $0B64 Pod-tests
COMMENT_LINE $0B6C Setup hit-rectangle of pod
COMMENT $0B8A Collision pod vs level
COMMENT $0B91 Collision pod vs fuel
COMMENT $0B95 load count
COMMENT $0BCA Collision pod vs powerplant
COMMENT_LINE $0BF2 *****************
COMMENT_LINE $0000 Calculate center coordinate
COMMENT $0C1A Pod and ship coords need to be recalced
COMMENT $0C23 half speed
COMMENT_LINE $0C2F if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $0C35 *****************
COMMENT_LINE $0C35 Find the angle between pod and ship when pod is picked up.
COMMENT_LINE $0C35 Loop the distance table and find the best match, this is the angle.
COMMENT_LINE $0C35 This is quite slow but it is only called once during pick up.
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0C35 declare buffer
COMMENT_LINE $0C35 5 W is max, add more if needed
COMMENT_LINE $0C37 ShipX := PixX + DistanceLUT[ I ];
COMMENT_LINE $0C37 ShipY := PixY - DistanceLUT[ I+1 ];
COMMENT_LINE $0C37 PodX := PixX - DistanceLUT[ I ];
COMMENT_LINE $0C37 PodY := PixY + DistanceLUT[ I+1 ];
COMMENT_LINE $0C42 b=distance/2, with sign bit
COMMENT_LINE $0C4A b=distance/2, with sign bit
COMMENT_LINE $0C80 *****************
COMMENT_LINE $0C93 *****************
COMMENT_LINE $0C93 DP must be D0 when reading joystick
COMMENT_LINE $0C9A A must have bit set for firebutton, to disable autofire
COMMENT_LINE $0CAA Back to C8
COMMENT $0CE4 read joystick
COMMENT $0CF0 todo: test down is lock
COMMENT_LINE $0CFB *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0CFB declare buffer
COMMENT_LINE $0CFB 5 W is max, add more if needed
COMMENT $0D01 read input from recorded demo data
COMMENT_LINE $0D0A Unused instruction signal VecxMod to sample user input.
COMMENT $0D0A lock thrust, button 4
COMMENT $0D16 lock automatically also thrusts
COMMENT_LINE $0D20 lda ShipAngle
COMMENT_LINE $0D20 sta LockedShipAngle
COMMENT $0D20 Lock up or down depending on gravity
COMMENT_LINE $0D3A Thrust
COMMENT_LINE $0D3E tst stick1_button3
COMMENT $0D42 Ship must have fuel left
COMMENT_LINE $0D5A tst stick1_button1            ;Firebutton
COMMENT $0D60 can't fire while using shield
COMMENT_LINE $0D66 Find free
COMMENT $0D75 No free found
COMMENT $0D7C Set active
COMMENT $0D7E Calc rise & run, use angle from ship
COMMENT $0D8C scale
COMMENT $0D8E dp must be c8
COMMENT_LINE $0D91 D holds result, optimize assign both with std
COMMENT $0D91 Y axis points down in our world
COMMENT $0D96 Set start position, use ship coordinates
COMMENT_LINE $0DA9 lda $c81b
COMMENT $0DB3 Rotate right
COMMENT_LINE $0DC7 Shield/pull
COMMENT_LINE $0DCB tst stick1_button2
COMMENT $0DD1 Ship must have fuel left
COMMENT $0DE0 Set up buffer with coords of a point under ship
COMMENT $0DED Refuel while carrying pod is only allowed in hard+ mode
COMMENT $0DFB Test if fuel is under ship
COMMENT $0DFF load count
COMMENT_LINE $0E0D point is fuel-pos, rect is area under ship
COMMENT $0E39 Fuel found
COMMENT_LINE $0E41 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $0E48 Refuel one unit every 4th frame
COMMENT $0E50 Decrease amount in fuel cell, remove if empty
COMMENT_LINE $0E5E if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $0E67 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $0E70 start with all bits set
COMMENT $0E72 clear carry flag, rolb will shift it into b
COMMENT $0E78 b now has a hole in it, AND with addr to clear bit
COMMENT $0E8E no fuel found
COMMENT $0000 Test if pod is under ship
COMMENT $0EA0 point is pod-pos, rect is area under ship
COMMENT $0ED0 pod found
COMMENT_LINE $0EDE Ship has pulled the pod loose from the platform
COMMENT_LINE $0EE9 Decrease 'perfect' bonus when shield is used (and no pull/refuel/invisible)
COMMENT $0F09 don't decrease below 2
COMMENT_LINE $0F13 *****************
COMMENT_LINE $0F13 DP must be D0
COMMENT_LINE $0F13 allocate buffer for rotated vectors
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $0F13 declare buffer
COMMENT_LINE $0F13 5 W is max, add more if needed
COMMENT_LINE $0F1F Rotate vectors before reset pen, otherwise position will drift
COMMENT $0F37 Vector buffer
COMMENT $0F39 Rotate vectors
COMMENT $0F3C Reset pen
COMMENT $0F3F no param, X holds X-coord
COMMENT $0F43 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $0F51 stx -2,s
COMMENT $0F69 Save ship screen coords
COMMENT $0F6B Set pen position to value of d register
COMMENT $0F6E if argument exists, load into a, otherwise use current a
COMMENT_LINE $0F70 sta   $C827
COMMENT $0F79 Vector buffer
COMMENT $0F7B Nr of vectors in list
COMMENT $0F7D Scale
COMMENT $0F7F Draw list
COMMENT $0F82 Draw thrust-tail effect
COMMENT_LINE $0F8C asra
COMMENT_LINE $0F91 adda #40
COMMENT $0F91 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0F91 sta   $C827
COMMENT $0F9A Vector buffer
COMMENT $0F9D Scale
COMMENT_LINE $0FA4 lda $C87D+2
COMMENT_LINE $0FA4 lda ShipSpeedX
COMMENT_LINE $0FA4 adda ShipSpeedY
COMMENT_LINE $0FA4 mRandomToA
COMMENT_LINE $0FA4 adda DrawList
COMMENT_LINE $0FA4 asra
COMMENT_LINE $0FAA lda LoopCounterLow
COMMENT_LINE $0FAA rora
COMMENT_LINE $0FAA rora
COMMENT_LINE $0FAA anda #0
COMMENT_LINE $0FAA sta -1,s
COMMENT_LINE $0FAA subb -1,s
COMMENT $0FAA Nr of vectors in list
COMMENT $0FAC Draw list
COMMENT $0FAF Test for shield
COMMENT $0FB9 draw shield
COMMENT $0FC4 if argument exists, load into a, otherwise use current a
COMMENT_LINE $0FC4 sta   $C827
COMMENT $0FD2 set drawing pattern
COMMENT $0FE4 if argument exists, load into a, otherwise use current a
COMMENT $1006 Vector buffer
COMMENT $1008 Rotate vectors
COMMENT $100B Reset pen
COMMENT $100E if argument exists, load into a, otherwise use current a
COMMENT_LINE $1010 sta   $C827
COMMENT $1019 load ship screen coords
COMMENT $101B Set pen position to value of d register
COMMENT $102B if argument exists, load into a, otherwise use current a
COMMENT $1032 Vector buffer
COMMENT $1034 Nr of vectors in list
COMMENT $1040 if argument exists, load into a, otherwise use current a
COMMENT_LINE $1042 sta   $C827
COMMENT $104B no param, X holds X-coord
COMMENT $104F as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $105D stx -2,s
COMMENT $1077 Draw Orb
COMMENT $1089 Draw tractor beam
COMMENT $109D use a pattern to draw the beam
COMMENT $10A6 Test if ship is pulling orb from platform
COMMENT $10AD Draw tractor beam from ship to orb-platform
COMMENT $10AD if argument exists, load into a, otherwise use current a
COMMENT_LINE $10AF sta   $C827
COMMENT $10BB no param, X holds X-coord
COMMENT $10BB as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $10CC stx -2,s
COMMENT_LINE $10FE *****************
COMMENT_LINE $1104 Alpha += dAlpha, 0..WDIRMAX
COMMENT_LINE $1104 lda LoopCounterLow
COMMENT_LINE $1104 anda #SpinFrameMask
COMMENT_LINE $1104 bne sdmSkipAlpha
COMMENT_LINE $111E sdmSkipAlpha:
COMMENT_LINE $111E Alpha damping
COMMENT_LINE $1131 SpeedX damping + range test
COMMENT_LINE $1150 Gravity + range test
COMMENT $1159 try smaller gravity in reverse
COMMENT $115D keep y speed in range
COMMENT_LINE $116B Center += ShipSpeed
COMMENT_LINE $11B2 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $11B2 declare buffer
COMMENT_LINE $11B2 5 W is max, add more if needed
COMMENT_LINE $11C2 lda LocalAngle,s
COMMENT_LINE $11CE ax := AccelLUT[ dir*2 ];
COMMENT_LINE $11CE ay := AccelLUT[ dir*2+1 ];
COMMENT_LINE $11DC adjust spin
COMMENT_LINE $11DC lda LoopCounterLow
COMMENT_LINE $11DC anda #SpinFrameMask
COMMENT_LINE $11DC bne sdtSkipAlpha
COMMENT_LINE $11E2 calc index into spin-table
COMMENT_LINE $11EF Calc index into sine-table, and decide if value is positive or negative
COMMENT_LINE $11F7 IF W >= 60 then W := 120 - W;
COMMENT $11FF a = 0..30, b = -1 if value is negative
COMMENT_LINE $1212 ax := AccelLUT[ dir*2 ] * 2;
COMMENT_LINE $1212 ay := AccelLUT[ dir*2+1 ] * 2;
COMMENT_LINE $1227 *****************
COMMENT_LINE $1227 Must be called after every change to centerx/y to keep ship in sync
COMMENT_LINE $122D Update ship and pod
COMMENT_LINE $122D I := Hi(nAlpha) * 2;
COMMENT_LINE $1237 ShipX := PixX + DistanceLUT[ I ];
COMMENT_LINE $1237 ShipY := PixY - DistanceLUT[ I+1 ];
COMMENT_LINE $1237 PodX := PixX - DistanceLUT[ I ];
COMMENT_LINE $1237 PodY := PixY + DistanceLUT[ I+1 ];
COMMENT $1279 disable ship movement
COMMENT_LINE $0000 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $128A if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $12A5 *****************
COMMENT $12A7 Check for world ends
COMMENT $12AA Left end hit, wrap
COMMENT_LINE $12AC subd #1
COMMENT $12B4 Right edge hit
COMMENT_LINE $12B7 Distance from center to ship/pod. Xy-pairs.
COMMENT_LINE $12B7 This is the complete circle, we could use 1/4 circle instead to save some bytes
COMMENT_LINE $1497 Acceleration values xy-pairs for each ship direction
COMMENT_LINE $14D7 Map ShipAngle -> AlphaDir
COMMENT_LINE $14F7 Contains sine-values for a quarter of a circle
COMMENT_LINE $151C Recorded demo data
COMMENT_LINE $151C First two bytes: start level, reserved
COMMENT_LINE $1A0E *****************
COMMENT_LINE $1A26 Atari 2600 code
COMMENT $1A26 3
COMMENT $1A26 2�
COMMENT $1A26 2         reset Cnt3
COMMENT $1A26 2
COMMENT $1A26 2         increase Cnt3
COMMENT $1A26 3
COMMENT $1A26 2
COMMENT $1A26 2�
COMMENT $1A26 2         reset Cnt64
COMMENT $1A26 2
COMMENT $1A26 2         increase Cnt64
COMMENT $1A26 2
COMMENT $1A26 3
COMMENT $1A26 3 = 28-32
COMMENT_LINE $1A27 *****************
COMMENT $1A27 no display in demomode
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1A2D declare buffer
COMMENT_LINE $1A2D 5 W is max, add more if needed
COMMENT $1A48 time, flash if low
COMMENT $1A65 end byte
COMMENT $1A6B copy score to buffer
COMMENT $1A72 Nr of ships left
COMMENT $1A7D Fuel, flash if low
COMMENT_LINE $1A86 In bonusgame, draw current level instead of fuel
COMMENT $1AA9 End byte
COMMENT $1AC8 extra zero + end byte
COMMENT_LINE $1ACF *****************
COMMENT $1ACF no score in demomode
COMMENT $1AE2 extra life each 10000 points
COMMENT $1AE9 every 20000 for hard mode
COMMENT_LINE $1B05 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1B05 declare buffer
COMMENT_LINE $1B05 5 W is max, add more if needed
COMMENT_LINE $1B17 if refueling, inc 1
COMMENT_LINE $1B17 else
COMMENT_LINE $1B17 if shield -1
COMMENT_LINE $1B17 if thrust -1 (if hasorb extra -1)
COMMENT_LINE $1B27 mTestFlag HasOrbFlag
COMMENT_LINE $1B27 beq afTestShield
COMMENT_LINE $1B27 dec LocalB1,s
COMMENT_LINE $1B45 *****************              ;See if it's time to emit a new gun shot.
COMMENT_LINE $1B45 List of center angle for each gun type
COMMENT_LINE $1B45 NE,NW,SE,SW
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1B49 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT $1B4B Check delay timer
COMMENT $1B55 Exit if no empty slot
COMMENT $1B5D Exit if guns are disabled (powerplant recently shot)
COMMENT $1B63 Find a gun that can fire
COMMENT $1B67 exit if no guns
COMMENT $1B6B load guncount
COMMENT_LINE $1B97 Gun can shoot, throw a dice to see if choose this gun
COMMENT_LINE $1B97 Otherwise the first closest gun would always fire
COMMENT $1B97 call rom
COMMENT $1BAA No gun was found, exit
COMMENT $1BAD Find a free gunshot-slot
COMMENT $1BB4 test active
COMMENT $1BB9 Slot found, emit shot
COMMENT_LINE $1BCA 16 is 90 deg
COMMENT_LINE $1BCA gun can shoot in 135 deg (0..23)
COMMENT_LINE $1BCA repeat until we have a random value 0..23
COMMENT $1BCF bailout after 5 iterations
COMMENT $1BD8 call rom
COMMENT_LINE $1BDB improve randomness by xoring loopcounter
COMMENT $1BE3 a is -12..11
COMMENT $1BE7 final angle is gun center + random
COMMENT $1BEB Calc rise & run
COMMENT $1BED scale
COMMENT $1BEF dp must be c8
COMMENT $1BF2 Y axis points down in our world
COMMENT $1BF7 Set shot active
COMMENT $1C05 Reset delay for next shot
COMMENT $1C05 call rom
COMMENT_LINE $1C0E mEmitSound GunFireSoundId
COMMENT $1C0E Get index of firing gun, use for fx
COMMENT_LINE $1C16 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $1C1B Exit
COMMENT_LINE $1C29 *****************              ;Update active gun shots.
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1C29 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT $1C2B loop from 0 to MaxGunShots
COMMENT $1C32 test active
COMMENT_LINE $1C39 Move
COMMENT $1C39 Update sprite X coordinate
COMMENT $1C58 Check for world ends
COMMENT $1C5B Left end hit, wrap
COMMENT $1C65 Right edge hit
COMMENT $1C67 Update sprite Y coordinate
COMMENT $1C80 Top of world hit, bransch to remove
COMMENT_LINE $1C95 Try to make the homing missiles move unpredictably
COMMENT_LINE $1C95 Skip homingness a while each second to avoid them constantly circling ship
COMMENT_LINE $1CB5 inc gsShotVelocX,u
COMMENT_LINE $1CC0 dec gsShotVelocX,u
COMMENT $1CDB Collision gunshots vs ship
COMMENT $1D13 if shield, just remove shot
COMMENT $1D1E Collision gunshots vs pod
COMMENT $1D61 Collision shots vs level
COMMENT $1D6F a is current loop index, clear this bit to remove shot
COMMENT $1D71 start with all bits set
COMMENT $1D73 clear carry flag, rolb will shift it into b
COMMENT $1D79 b now has a hole in it, AND with addr to clear bit
COMMENT_LINE $1D8B *****************
COMMENT_LINE $1D8B DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1D8B declare buffer
COMMENT_LINE $1D8B 5 W is max, add more if needed
COMMENT $1D8D Scale $7f is required for move_pen_d to reach whole screen
COMMENT $1D8D if argument exists, load into a, otherwise use current a
COMMENT $1D91 Draw all active shots.
COMMENT $1D99 test active
COMMENT_LINE $1DD3 Draw a 'tail' on the homing shots by subtracting velocity to draw a dot at the previous position
COMMENT_LINE $1DFA *****************
COMMENT_LINE $1DFA DP must be D0
COMMENT $1DFC if argument exists, load into a, otherwise use current a
COMMENT_LINE $1DFE sta   $C827
COMMENT $1E0C exit if no fuel pods
COMMENT $1E11 load count
COMMENT $1E13 test active
COMMENT_LINE $1E28 *****************
COMMENT_LINE $1E28 DP must be D0
COMMENT $1E28 Exit if ship is carrying orb
COMMENT $1E2F if argument exists, load into a, otherwise use current a
COMMENT_LINE $1E31 sta   $C827
COMMENT_LINE $1E46 *****************
COMMENT_LINE $1E46 DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1E46 declare buffer
COMMENT_LINE $1E46 5 W is max, add more if needed
COMMENT $1E48 Decrease gun disabled timer
COMMENT $1E58 Flash if about to explode
COMMENT $1E5F Display countdown
COMMENT $1E62 ROM display must print at least 2 characters
COMMENT $1E79 Specify height and width
COMMENT_LINE $1E87 lda #$40
COMMENT_LINE $1E87 suba LocalW1,s
COMMENT $1E94 if argument exists, load into a, otherwise use current a
COMMENT_LINE $1E94 sta   $C827
COMMENT_LINE $1EB8 Planet exploded
COMMENT_LINE $1EB8 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $1EC9 if argument exists, load into a, otherwise use current a
COMMENT_LINE $1ECB sta   $C827
COMMENT $1EE1 draw rising dot if active
COMMENT_LINE $1F06 jsr DrawDot
COMMENT_LINE $1F0C *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1F0C declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $1F0E DP must be D0
COMMENT $1F0E if argument exists, load into a, otherwise use current a
COMMENT_LINE $1F10 sta   $C827
COMMENT $1F1E exit if no guns
COMMENT $1F20 load guncount
COMMENT $1F2D sprite entry
COMMENT_LINE $1F4B *****************
COMMENT_LINE $1F4B DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1F4B declare buffer
COMMENT_LINE $1F4B 5 W is max, add more if needed
COMMENT $1F4D if argument exists, load into a, otherwise use current a
COMMENT_LINE $1F4F sta   $C827
COMMENT $1F5E load count
COMMENT $1F60 exit if no switches
COMMENT_LINE $1F7D *****************
COMMENT_LINE $1F7D DoorCounter
COMMENT_LINE $1F7D 0  : st�ngd, exit
COMMENT_LINE $1F7D bit 7
COMMENT_LINE $1F7D 0 : opening
COMMENT_LINE $1F7D �ka med 1, om max s�tt bit 7
COMMENT_LINE $1F7D 1 : closing
COMMENT_LINE $1F7D minska med 1, om noll clear bit 7
COMMENT_LINE $1F7D >=DoorSize : fully open
COMMENT_LINE $1FA8 *****************
COMMENT_LINE $1FA8 Lines for doors are generated on stack, then drawn with clipdraw
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $1FA8 declare buffer
COMMENT_LINE $1FA8 5 W is max, add more if needed
COMMENT_LINE $1FB0 cmpa #DoorSize
COMMENT_LINE $1FB0 lbge dorExit                  ;doors are fully opened, exit
COMMENT $1FB0 amount to open door
COMMENT $1FB2 if argument exists, load into a, otherwise use current a
COMMENT_LINE $1FB4 sta   $C827
COMMENT $1FC3 load count
COMMENT_LINE $1FEC --
COMMENT_LINE $1FEC |
COMMENT_LINE $1FEC --
COMMENT_LINE $1FEC positive y is down, positive x is right
COMMENT_LINE $1FEC db 1  ;line count
COMMENT_LINE $1FEC db 1  ;linetype, 0=vert, 1=horiz, 2=slope
COMMENT_LINE $1FEC db FullW,0  ;x0,y0
COMMENT_LINE $1FEC db 0,HalfH  ;x1,y1
COMMENT $2003 line 1
COMMENT $2015 line 2
COMMENT $202B line 3
COMMENT_LINE $2043 ----
COMMENT_LINE $2043 ____
COMMENT_LINE $2043 positive y is down, positive x is right
COMMENT_LINE $2043 db 1  ;line count
COMMENT_LINE $2043 db 1  ;linetype, 0=vert, 1=horiz, 2=slope
COMMENT_LINE $2043 db FullW,0  ;x0,y0
COMMENT_LINE $2043 db 0,HalfH  ;x1,y1
COMMENT_LINE $204F Bottom line, fixed
COMMENT_LINE $2063 Top line, this moves down when door opens
COMMENT $206A add twice, tileh=2*tilew
COMMENT $2075 add twice, tileh=2*tilew
COMMENT_LINE $208B ----
COMMENT_LINE $208B |    |
COMMENT_LINE $208B |    |
COMMENT_LINE $208B positive y is down, positive x is right
COMMENT_LINE $208B db 1  ;line count
COMMENT_LINE $208B db 1  ;linetype, 0=vert, 1=horiz, 2=slope
COMMENT_LINE $208B db FullW,0  ;x0,y0
COMMENT_LINE $208B db 0,HalfH  ;x1,y1
COMMENT_LINE $2097 Left wall
COMMENT $2098 linetype
COMMENT $209A x0
COMMENT $20A0 y0
COMMENT $20A3 x1
COMMENT $20A7 y1
COMMENT_LINE $20A9 Right wall
COMMENT $20AA linetype
COMMENT $20AE x0
COMMENT $20B4 y0
COMMENT $20B8 x1
COMMENT $20BC y1
COMMENT_LINE $20BE Top line, this moves down when door opens
COMMENT $20C5 add twice, tileh=2*tilew
COMMENT $20D0 add twice, tileh=2*tilew
COMMENT_LINE $20EB *****************
COMMENT_LINE $20EB **todo: this will not work when x-world-wrap is on screen
COMMENT_LINE $20EB _CohenSutherlandClip is not aware of world-wrap
COMMENT_LINE $20EB clipX coord will need to be adjusted to ViewX+Screen(clipX)
COMMENT $20EB destlines
COMMENT $20ED save intensity + dp
COMMENT $20EF clip needs c8
COMMENT $20F5 offset y
COMMENT $20F9 offset x
COMMENT $20FB pointer to destination drawlist
COMMENT $20FD pointer to lines
COMMENT $2105 restore dp + intensity
COMMENT $2108 empty list, all is clipped
COMMENT $210A write end of drawlist, b holds nr of bytes written
COMMENT_LINE $210C a holds intensity
COMMENT_LINE $2110 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2110 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $2114 X coord
COMMENT $2114 no param, X holds X-coord
COMMENT $2117 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $2125 stx -2,s
COMMENT $212C offscreen, skip
COMMENT $212F offscreen, skip
COMMENT_LINE $2135 Y coord
COMMENT $213A offscreen, skip
COMMENT $213D offscreen, skip
COMMENT $2141 this dot should be drawn, reset pen
COMMENT $2144 if argument exists, load into a, otherwise use current a
COMMENT $214A if argument exists, load into a, otherwise use current a
COMMENT_LINE $214A sta   $C827
COMMENT_LINE $2170 PF33B: lda   #0x04
COMMENT_LINE $2170 PF341: deca
COMMENT_LINE $2170 bne   PF341
COMMENT_LINE $2170 From vectrex.txt
COMMENT_LINE $2170 "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $2170 your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $2174 ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $2174 PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $2174 bne   PF2CC
COMMENT_LINE $2179 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2179 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $217D X coord
COMMENT $217D no param, X holds X-coord
COMMENT $2180 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $218E stx -2,s
COMMENT $2195 offscreen, skip
COMMENT $2198 offscreen, skip
COMMENT_LINE $219E Y coord
COMMENT $21A3 offscreen, skip
COMMENT $21A6 offscreen, skip
COMMENT $21AA this dot should be drawn, reset pen
COMMENT $21AD if argument exists, load into a, otherwise use current a
COMMENT $21B3 if argument exists, load into a, otherwise use current a
COMMENT_LINE $21B3 sta   $C827
COMMENT_LINE $21D9 PF33B: lda   #0x04
COMMENT_LINE $21D9 PF341: deca
COMMENT_LINE $21D9 bne   PF341
COMMENT_LINE $21DB clra  ;z if visible
COMMENT_LINE $21DE *****************
COMMENT_LINE $21DE Quick draw macros
COMMENT $0000 pen on
COMMENT $0000 pen off
COMMENT_LINE $0000 need to wait for long lines (third param=1)
COMMENT_LINE $0000 *****************
COMMENT $21DE if argument exists, load into a, otherwise use current a
COMMENT_LINE $21E2 _db1 -1,-1
COMMENT_LINE $21EF need to wait for long lines (third param=1)
COMMENT $21EF pen on
COMMENT_LINE $2200 need to wait for long lines (third param=1)
COMMENT_LINE $220D need to wait for long lines (third param=1)
COMMENT_LINE $221A need to wait for long lines (third param=1)
COMMENT_LINE $2227 need to wait for long lines (third param=1)
COMMENT_LINE $2234 need to wait for long lines (third param=1)
COMMENT_LINE $2241 need to wait for long lines (third param=1)
COMMENT_LINE $224E need to wait for long lines (third param=1)
COMMENT_LINE $225B need to wait for long lines (third param=1)
COMMENT $225B pen off
COMMENT_LINE $225E *****************
COMMENT $225E if argument exists, load into a, otherwise use current a
COMMENT_LINE $2260 negative y is down, negative x is left
COMMENT_LINE $226D need to wait for long lines (third param=1)
COMMENT $2273 pen on
COMMENT_LINE $2284 need to wait for long lines (third param=1)
COMMENT $228A pen off
COMMENT_LINE $2299 need to wait for long lines (third param=1)
COMMENT $229F pen on
COMMENT_LINE $22B0 need to wait for long lines (third param=1)
COMMENT $22B6 pen off
COMMENT_LINE $22B9 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $22B9 declare buffer
COMMENT_LINE $22B9 5 W is max, add more if needed
COMMENT_LINE $22BB Calc intensity based on time
COMMENT_LINE $2378 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2378 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $237A DP must be D0
COMMENT $237C X coord
COMMENT $237C no param, X holds X-coord
COMMENT $237C as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $238D stx -2,s
COMMENT $2394 offscreen, skip
COMMENT $2397 offscreen, skip
COMMENT $239D Y coord
COMMENT $23A2 offscreen, skip
COMMENT $23A5 offscreen, skip
COMMENT $23B0 Scale $7f is required for move_pen_d to reach whole screen
COMMENT $23B0 if argument exists, load into a, otherwise use current a
COMMENT_LINE $23CF PF33B: lda   #0x04
COMMENT_LINE $23CF PF341: deca
COMMENT_LINE $23CF bne   PF341
COMMENT $23D1 Nr of vectors in list
COMMENT $23D3 Scale
COMMENT $23D5 Draw list
COMMENT $23D8 Get next count, $ff ends
COMMENT_LINE $23DF *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $23DF declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT $23E6 spill loop index
COMMENT_LINE $23EE Move shots
COMMENT $23EE Update sprite X coordinate
COMMENT $240D Check for world ends
COMMENT $2410 Left end hit, wrap
COMMENT $241A Right edge hit
COMMENT $241C Update sprite Y coordinate
COMMENT $2435 Top of world hit, bransch to remove
COMMENT $2444 Collision shots vs level
COMMENT $244E remove shot
COMMENT $2451 Collision shots vs guns
COMMENT $245B load guncount
COMMENT $249D hit, clear active bit of gun
COMMENT $24A3 start with all bits set
COMMENT $24A6 clear carry flag, rolb will shift it into d
COMMENT $24AE D now has a hole in it, AND with addr to clear bit
COMMENT $24B4 gun index
COMMENT_LINE $24B8 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $24BD gun index
COMMENT_LINE $24C1 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $24CB remove shot
COMMENT $24D6 Collision shots vs fuel
COMMENT $24DE load count
COMMENT $251E hit, clear active bit of fuel
COMMENT $2520 start with all bits set
COMMENT $2522 clear carry flag, rolb will shift it into b
COMMENT $2528 b now has a hole in it, AND with addr to clear bit
COMMENT $252C fuel cell index
COMMENT_LINE $252E if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $2533 fuel cell index
COMMENT_LINE $2535 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $253F remove shot
COMMENT $254B Collision shot vs powerplant
COMMENT_LINE $2584 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $258F decrease powerplant hitpoints
COMMENT $2594 Start planet explode countdown
COMMENT_LINE $2598 one hit when powerlife 15 =  1 second wait
COMMENT_LINE $2598 "          1 = 30 seconds wait
COMMENT $2598 disable guns for a while
COMMENT $259E remove shot
COMMENT $25A1 Collision shots vs switches
COMMENT $25A6 skip check if door is not closed
COMMENT $25AC load count
COMMENT $25E9 hit, open doors
COMMENT_LINE $25EF if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $25F6 remove shot
COMMENT $2601 shots vs pod
COMMENT $2646 remove shot
COMMENT $2648 restore loop index
COMMENT_LINE $2654 *****************
COMMENT_LINE $2654 DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2654 declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT $2656 Draw all active shots.
COMMENT $266B remove if too far off-screen
COMMENT $2679 remove shot
COMMENT_LINE $267D X coord
COMMENT $267D no param, X holds X-coord
COMMENT $267D as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $268E stx -2,s
COMMENT $2695 offscreen, skip
COMMENT $2698 offscreen, skip
COMMENT_LINE $269E Y coord
COMMENT $26A3 offscreen, skip
COMMENT $26A6 offscreen, skip
COMMENT $26AA this shot should be drawn, reset pen
COMMENT $26AD Scale $7f is required for move_pen_d to reach whole screen
COMMENT $26AD if argument exists, load into a, otherwise use current a
COMMENT $26B1 if argument exists, load into a, otherwise use current a
COMMENT_LINE $26B3 sta   $C827
COMMENT_LINE $26D9 PF33B: lda   #0x04
COMMENT_LINE $26D9 PF341: deca
COMMENT_LINE $26D9 bne   PF341
COMMENT_LINE $26D9 From vectrex.txt
COMMENT_LINE $26D9 "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $26D9 your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $26DD ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $26DD PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $26DD bne   PF2CC
COMMENT_LINE $26DF jsr DrawBulletAtCurrentPosition
COMMENT_LINE $26E4 *****************
COMMENT $26E4 offset y
COMMENT $26E4 offset x
COMMENT $26E4 CALL: (VOIDmode) _CohenSutherlandClip (11 bytes)
COMMENT_LINE $26E4 end of drawlist
COMMENT $26E4 linecount
COMMENT $26E4 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $26E4 x0,y0
COMMENT $26E4 x1,y1
COMMENT_LINE $0000 *****************
COMMENT_LINE $26E4 dec Lives, beq GameOver
COMMENT_LINE $26E4 om Fuel=0, beq GameOver
COMMENT_LINE $26E4 else RestartLevel
COMMENT $26FA no perfect bonus
COMMENT_LINE $26FC if planet destroyed, exit mission
COMMENT_LINE $2717 *****************
COMMENT_LINE $2739 *****************
COMMENT_LINE $0000 Original Thrust have a slight angle on the towbar when restarting with pod attached
COMMENT_LINE $273F Init ship direction up or down depending on gravity
COMMENT_LINE $275F mSetFlag HasOrbFlag          ;uncomment to always start with orb
COMMENT_LINE $275F Warp-in effect
COMMENT $275F disable ship movement
COMMENT_LINE $0000 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $2770 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $2776 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2776 declare buffer
COMMENT_LINE $2776 5 W is max, add more if needed
COMMENT $277E find restart point closest to last ship position
COMMENT_LINE $27B2 Use different defaults for haspod
COMMENT $27B6 compare abs(restartY - shipY) + abs(restartX - shipX), lowest is the winner
COMMENT_LINE $27C0 no pod, only consider points with lower y (closer to planet surface)
COMMENT_LINE $27C0 if none found, use the first in list
COMMENT $27C0 0 is also ok
COMMENT_LINE $27C6 pod, only consider points with higher y (closer to pod base)
COMMENT_LINE $27C6 if none found, use the last in list (requires that the deepest restartpoint is last)
COMMENT_LINE $27E4 keep pod if more than screenh from PodY
COMMENT $2807 center within tile
COMMENT $2811 center within tile
COMMENT_LINE $2824 *****************
COMMENT_LINE $283D *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $283D declare buffer
COMMENT_LINE $283D 5 W is max, add more if needed
COMMENT $2842 Clear buffer
COMMENT $2849 reverse on 1 and 3
COMMENT $2853 landscape invisible on 2 and 3
COMMENT $286E size of levelentry
COMMENT $2875 x is now levelentry
COMMENT $2879 all guns active
COMMENT $287E all fuelpods active
COMMENT $2882 hitpoints for powerplant
COMMENT $2886 1500 + (levelno * 100)
COMMENT $288A init perfect bonus, decreases when shield is used
COMMENT $288C all fuelpods full
COMMENT $28A1 CurLevelEndX = (CurLevelSizeX * TileW)
COMMENT $28AB CurLevelEndY = largest View Y
COMMENT_LINE $28AD Gun shot constants
COMMENT_LINE $28AD Make guns fire more often on higher levels
COMMENT_LINE $28AD GunDelayMask = modeconstant >> (levello >> 1)
COMMENT_LINE $28C4 GunDelay = modeconstant - (levello * 8)
COMMENT_LINE $28DA GunShotSpeed = modeconstant + (levello >> 1)
COMMENT_LINE $28F1 Set ship start position
COMMENT_LINE $28F1 use first restart point
COMMENT $28FD center within tile
COMMENT $2907 center within tile
COMMENT_LINE $2918 Gun fire delay for each game mode
COMMENT $2918 multiple of 8
COMMENT_LINE $291E Gun shot speeds for each game mode
COMMENT_LINE $2921 *****************
COMMENT $2934 check if new round
COMMENT $293B only display text on first level on each round
COMMENT $2942 display 'reverse gravity'
COMMENT $294D display 'invisible landscape'
COMMENT $2954 b=3: both reverse and invisible, no message
COMMENT $2956 b=4: game completed
COMMENT_LINE $296A *****************
COMMENT_LINE $296D Reset random seeds
COMMENT_LINE $296D This is important for demo-playback and recording
COMMENT $297D Clear buffer
COMMENT_LINE $2988 normal = 2
COMMENT_LINE $299E Init demo game
COMMENT $29A0 set flag that this is demogame
COMMENT $29B0 read startlevel from demodata
COMMENT $29BA init timeattack
COMMENT_LINE $29C5 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $29C5 declare buffer
COMMENT_LINE $29C5 5 W is max, add more if needed
COMMENT $29C7 load both scrollx/y
COMMENT $29C9 zero if not scrolling
COMMENT_LINE $29CF update scroll x
COMMENT $29D1 no param, X holds X-coord
COMMENT $29D3 as09 treats "2,y" as two separate macro arguments
COMMENT_LINE $29DF stx -2,s
COMMENT_LINE $29E8 b holds screen x
COMMENT_LINE $29EE scroll left
COMMENT_LINE $2A13 update scroll y
COMMENT_LINE $2A19 b holds screen y
COMMENT_LINE $2A21 scroll up
COMMENT_LINE $2A43 test if need to start scrolling
COMMENT $2A49 right edge
COMMENT $2A4D left edge
COMMENT $2A63 bottom edge
COMMENT $2A67 top edge
COMMENT_LINE $2A7A *****************
COMMENT_LINE $2A7A DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2A7A declare buffer
COMMENT_LINE $2A7A 5 W is max, add more if needed
COMMENT_LINE $2A8A If no landscape, only draw when shield is used
COMMENT_LINE $2A9A *****************
COMMENT $2A9A if argument exists, load into a, otherwise use current a
COMMENT_LINE $2A9A sta   $C827
COMMENT $2AA3 Scale $7f is required for move_pen_d to reach whole screen
COMMENT $2AA3 if argument exists, load into a, otherwise use current a
COMMENT_LINE $2AAD setpen
COMMENT_LINE $2AAD reset0ref inlined
COMMENT_LINE $2ABD stb   <0x00
COMMENT_LINE $2AD9 PF33B: lda   #0x04
COMMENT_LINE $2AD9 PF341: deca
COMMENT_LINE $2AD9 bne   PF341
COMMENT_LINE $2ADB Optimize: Lines could be scaled down (scale 7f/2, length asla b)
COMMENT_LINE $2ADB This would require no line length larger than 63, doors have larger lines
COMMENT_LINE $2AE1 leax  2,x
COMMENT_LINE $2AE1 Ev. m�ste flera nop l�ggas till h�r f�r att kompensera att f�reg�ende rad
COMMENT_LINE $2AE1 kommenterats bort
COMMENT_LINE $2AE1 nop
COMMENT_LINE $2AF2 nop
COMMENT_LINE $2AF7 db -1, 127,-127   ;set pen
COMMENT_LINE $2AF7 db 1,  -50,50     ;draw line
COMMENT_LINE $2AF7 db -1, -120,-120   ;set pen
COMMENT_LINE $2AF7 db 1,  25,50     ;draw line
COMMENT $2AF7 end list
COMMENT_LINE $0000 *****************
COMMENT $2AF7 do nothing if already exploding
COMMENT $2AFE explode orb also if carried
COMMENT_LINE $2B05 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT_LINE $2B0A if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $2B0F disable ship movement
COMMENT_LINE $2B18 *****************
COMMENT_LINE $2B18 refresh DrawList-memory with lines from tiles in the current level
COMMENT $2B1C quick exit if refresh not needed
COMMENT_LINE $2B1D tileWX,tileWY
COMMENT_LINE $2B1D loop x until tileWX is larger than viewX+256
COMMENT_LINE $2B1D if tileWX,tileWY is within screen (viewX/Y + 256)
COMMENT_LINE $2B1D copy the lines directly
COMMENT_LINE $2B1D else
COMMENT_LINE $2B1D clip the lines
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2B1D declare buffer
COMMENT_LINE $0000 5 W is max, add more if needed
COMMENT_LINE $2B1F set up clipping region
COMMENT $2B31 setup y-coords, test for empty space (negative y)
COMMENT $2B35 empty space at top of screen, adjust start coords
COMMENT $2B3D end = 0 + 256 + viewY (viewY is negative)
COMMENT $2B3F calc start screen y coord
COMMENT $2B5A calc start screen y coord
COMMENT_LINE $2B67 calc tile pointer: x = tiles + (CurLevelSizeX * (WorldY div TileH)) + (WorldX div TileW)
COMMENT $2B67 x
COMMENT $2B78 y
COMMENT_LINE $2B89 x=tile pointer
COMMENT_LINE $2B8B see if view spans over right edge of level
COMMENT $2B92 optimize: this value is already calced
COMMENT $2BA3 no adjust needed
COMMENT_LINE $2BAD TempAdjustX = nr of tiles on row before edge, -1 = no wrap
COMMENT_LINE $2BAF calc start world coords for first partly visible tile
COMMENT_LINE $2BBD 0123456701234567
COMMENT_LINE $2BBD X
COMMENT_LINE $2BBD calc screen x coord for first unclipped tile
COMMENT $2BD8 get tile
COMMENT $2BDA 0 = no tile
COMMENT $2BDC >=32 = special tiles without lines (solid, doorarea)
COMMENT_LINE $2BE0 u = tilepointer
COMMENT_LINE $2BE8 test if tile needs clipping
COMMENT $2BEC TileX < ViewX
COMMENT $2BEE TileXEnd > ViewX + 256
COMMENT $2BF8 TileY < ViewY
COMMENT $2BFE ScreenY >= end of screen - tileh
COMMENT_LINE $2C00 unclipped tile
COMMENT_LINE $2C00 x = lines rel
COMMENT_LINE $2C04 set pen
COMMENT $2C0C write y coord
COMMENT $2C12 write x coord
COMMENT $2C14 copy lines to drawlist
COMMENT_LINE $2C29 clip tile
COMMENT_LINE $2C29 entry: y=drawlist, u=tile entry
COMMENT_LINE $2C2B beq  rdNextTile     ;**safety, remove when all tiles have abs lines
COMMENT $2C2B offset y
COMMENT $2C2F offset x
COMMENT $2C33 pointer to drawlist
COMMENT $2C38 pointer to lines
COMMENT $2C3D Clean stack
COMMENT $2C3F d = nr of bytes written, add to drawlist pointer
COMMENT $2C41 update tile world pos
COMMENT $2C48 update screen pos
COMMENT_LINE $2C53 tileptr have crossed right edge of level
COMMENT_LINE $2C53 x = x - one row
COMMENT_LINE $2C55 deca
COMMENT_LINE $2C58 leave a negative value in A, it will not adjust again in this row
COMMENT_LINE $2C5D next row
COMMENT $2C5D reset tile world x
COMMENT $2C61 update tile world y
COMMENT_LINE $2C68 cmpd CurLevelEndY             ;if tilewy is off-world then finish
COMMENT_LINE $2C68 bgt rdEndList
COMMENT $2C68 if tilewy is offscreen then we are finished
COMMENT $2C6F next row, update tile level pointer
COMMENT $2C73 x=x+b
COMMENT $2C76 next row, update screen y pos
COMMENT $2C87 write end of drawlist
COMMENT_LINE $2C90 *****************
COMMENT $2C95 no empty space is visible, exit
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $2C96 declare buffer
COMMENT_LINE $2C96 5 W is max, add more if needed
COMMENT $2C9B distort starfield with value from loopcounter
COMMENT $2C9E the distortion also hides the bug that stars jump when crossing world x-wraparound ;-)
COMMENT $2CC0 reset random seed
COMMENT $2CD7 call rom
COMMENT $2CDA Add loop index to coord to avoid overdraw (rom rnd is poor)
COMMENT $2CE3 call rom
COMMENT $2CE6 Add loop index to coord to avoid overdraw (rom rnd is poor)
COMMENT $2CEF random intensity
COMMENT $2CEF call rom
COMMENT $2D05 vectrex screen transform
COMMENT $2D10 if argument exists, load into a, otherwise use current a
COMMENT_LINE $2D2C PF33B: lda   #0x04
COMMENT_LINE $2D2C PF341: deca
COMMENT_LINE $2D2C bne   PF341
COMMENT $2D2E if argument exists, load into a, otherwise use current a
COMMENT_LINE $2D2E sta   $C827
COMMENT_LINE $2D3D From vectrex.txt
COMMENT_LINE $2D3D "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $2D3D your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $2D41 ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $2D41 PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $2D41 bne   PF2CC
COMMENT_LINE $2D5A if viewy<0
COMMENT_LINE $2D5A yrange=abs(viewy)
COMMENT_LINE $2D5A else
COMMENT_LINE $2D5A exit
COMMENT_LINE $2D5A yadd=256 - (viewy lo)
COMMENT_LINE $2D5A xoff=viewx lo byte
COMMENT_LINE $2D5A xadd=256 - xoff
COMMENT_LINE $2D5A for 0 to starcount
COMMENT_LINE $2D5A starX=random
COMMENT_LINE $2D5A screenX=lo(starX + xadd)
COMMENT_LINE $2D5A starY=random
COMMENT_LINE $2D5A screenY=lo(starY + yadd)
COMMENT_LINE $2D5A if screenY>yrange
COMMENT_LINE $2D5A skip
COMMENT_LINE $2D5A else
COMMENT_LINE $2D5A set random intensity
COMMENT_LINE $2D5A draw dot
COMMENT $2D5A restore old random seed
COMMENT_LINE $2D62 *****************
COMMENT_LINE $2D89 Last point does not need to save u or branch
COMMENT_LINE $2D92 *****************
COMMENT_LINE $2D92 x and y are coords to test
COMMENT_LINE $2D92 returns carry set if collision
COMMENT $2D94 Test for empty space (negative coord)
COMMENT_LINE $2DA2 calc tile pointer: x = tiles + (CurLevelSizeX * (WorldY div TileH)) + (WorldX div TileW)
COMMENT $2DA2 x
COMMENT $2DB3 y
COMMENT $2DC6 0 = no tile
COMMENT_LINE $2DD0 a,b = x,y coordinates within tile
COMMENT_LINE $2DD4 exit through subroutine
COMMENT_LINE $2DD4 Tile collision routines, = carry if hit
COMMENT_LINE $2DDA X.
COMMENT_LINE $2DDA XX
COMMENT_LINE $2DE6 ..
COMMENT_LINE $2DE6 X.
COMMENT_LINE $2DF4 ..
COMMENT_LINE $2DF4 .X
COMMENT_LINE $2E0B .X
COMMENT_LINE $2E0B XX
COMMENT_LINE $2E20 XX
COMMENT_LINE $2E20 X.
COMMENT_LINE $2E24 Malban lble tcFull
COMMENT_LINE $2E31 Malban blo tcFull
COMMENT_LINE $2E34 X.
COMMENT_LINE $2E34 ..
COMMENT_LINE $2E38 Malban lbge tcEmpty
COMMENT_LINE $2E43 Malban blo tcFull
COMMENT_LINE $2E46 .X
COMMENT_LINE $2E46 ..
COMMENT_LINE $2E4A Malban  lbge tcEmpty
COMMENT_LINE $2E4F Malban  lblo tcFull
COMMENT_LINE $2E52 XX
COMMENT_LINE $2E52 .X
COMMENT_LINE $2E56 Malban  lbmi tcFull
COMMENT_LINE $2E60 Tiles for door collision
COMMENT_LINE $2E60 Test is adjusted with amount door is open
COMMENT_LINE $2EA9 invert door open value and call normal horiz door
COMMENT_LINE $2EB5 invert door open value and call normal horiz door
COMMENT_LINE $2EC1 Tiles, see struct TileEntry
COMMENT $2EC1 tile 0 is blank
COMMENT $2F57 25 = not yet used
COMMENT $2F5D 26 = not yet used
COMMENT $2F63 27 = not yet used
COMMENT $2F69 28 = not yet used
COMMENT $2F6F 29 = not yet used
COMMENT $2F75 30 = not yet used
COMMENT $2F7B 31 = not yet used
COMMENT $2F81 a 32 = empty solid
COMMENT $2F87 b 33 = horiz door 1 of 2
COMMENT $2F8D c 34 = horiz door 2 of 2
COMMENT $2F93 d 35 = vert door 1 of 2
COMMENT $2F99 e 36 = vert door 2 of 2
COMMENT $2F9F f 37 = horiz inverted door 1 of 2
COMMENT $2FA5 g 38 = horiz inverted door 2 of 2
COMMENT_LINE $2FAB --
COMMENT_LINE $2FAB XX
COMMENT_LINE $2FAB XX
COMMENT $2FAB start pos
COMMENT $2FAD line count
COMMENT $2FB0 line count
COMMENT $2FB1 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FB2 x0,y0
COMMENT $2FB4 x1,y1
COMMENT_LINE $2FB6 X.
COMMENT_LINE $2FB6 XX
COMMENT $2FB6 start pos
COMMENT $2FB8 line count
COMMENT $2FBB line count
COMMENT $2FBC linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FBD x0,y0
COMMENT $2FBF x1,y1
COMMENT_LINE $2FC1 ..
COMMENT_LINE $2FC1 X.
COMMENT $2FC1 start pos
COMMENT $2FC3 line count
COMMENT $2FC6 line count
COMMENT $2FC7 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FC8 x0,y0
COMMENT $2FCA x1,y1
COMMENT_LINE $2FCC ..
COMMENT_LINE $2FCC .X
COMMENT $2FCC start pos
COMMENT $2FCE line count
COMMENT $2FD1 line count
COMMENT $2FD2 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FD3 x0,y0
COMMENT $2FD5 x1,y1
COMMENT_LINE $2FD7 .X
COMMENT_LINE $2FD7 XX
COMMENT $2FD7 start pos
COMMENT $2FD9 line count
COMMENT $2FDC line count
COMMENT $2FDD linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FDE x0,y0
COMMENT $2FE0 x1,y1
COMMENT_LINE $2FE2 XX
COMMENT_LINE $2FE2 X.
COMMENT $2FE2 start pos
COMMENT $2FE4 line count
COMMENT $2FE7 line count
COMMENT $2FE8 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FE9 x0,y0
COMMENT $2FEB x1,y1
COMMENT_LINE $2FED X.
COMMENT_LINE $2FED ..
COMMENT $2FED start pos
COMMENT $2FEF line count
COMMENT $2FF2 line count
COMMENT $2FF3 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FF4 x0,y0
COMMENT $2FF6 x1,y1
COMMENT_LINE $2FF8 .X
COMMENT_LINE $2FF8 ..
COMMENT $2FF8 start pos
COMMENT $2FFA line count
COMMENT $2FFD line count
COMMENT $2FFE linetype, 0=vert, 1=horiz, 2=slope
COMMENT $2FFF x0,y0
COMMENT $3001 x1,y1
COMMENT_LINE $3003 XX
COMMENT_LINE $3003 .X
COMMENT $3003 start pos
COMMENT $3005 line count
COMMENT $3008 line count
COMMENT $3009 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $300A x0,y0
COMMENT $300C x1,y1
COMMENT_LINE $300E |XX
COMMENT_LINE $300E |XX
COMMENT $300E start pos
COMMENT $3010 line count
COMMENT $3013 line count
COMMENT $3014 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3015 x0,y0
COMMENT $3017 x1,y1
COMMENT_LINE $3019 XX|
COMMENT_LINE $3019 XX|
COMMENT $3019 start pos
COMMENT $301B line count
COMMENT $301E line count
COMMENT $301F linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3020 x0,y0
COMMENT $3022 x1,y1
COMMENT_LINE $3024 .X
COMMENT_LINE $3024 ..|
COMMENT $3024 start pos
COMMENT $3026 line count
COMMENT $302B line count
COMMENT $302C linetype, 0=vert, 1=horiz, 2=slope
COMMENT $302D x0,y0
COMMENT $302F x1,y1
COMMENT $3031 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3032 x0,y0
COMMENT $3034 x1,y1
COMMENT_LINE $3036 |XX
COMMENT_LINE $3036 .X
COMMENT $3036 start pos
COMMENT $3038 line count
COMMENT $303D line count
COMMENT $303E linetype, 0=vert, 1=horiz, 2=slope
COMMENT $303F x0,y0
COMMENT $3041 x1,y1
COMMENT $3043 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3044 x0,y0
COMMENT $3046 x1,y1
COMMENT_LINE $3048 X.
COMMENT_LINE $3048 XX|
COMMENT $3048 start pos
COMMENT $304A line count
COMMENT $304F line count
COMMENT $3050 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3051 x0,y0
COMMENT $3053 x1,y1
COMMENT $3055 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3056 x0,y0
COMMENT $3058 x1,y1
COMMENT_LINE $305A --
COMMENT_LINE $305A XX|
COMMENT_LINE $305A XX|
COMMENT $305A start pos
COMMENT $305C line count
COMMENT $3061 line count
COMMENT $3062 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3063 x0,y0
COMMENT $3065 x1,y1
COMMENT $3067 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3068 x0,y0
COMMENT $306A x1,y1
COMMENT_LINE $306C --
COMMENT_LINE $306C |XX
COMMENT_LINE $306C |XX
COMMENT $306C start pos
COMMENT $306E line count
COMMENT $3073 line count
COMMENT $3074 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3075 x0,y0
COMMENT $3077 x1,y1
COMMENT $3079 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $307A x0,y0
COMMENT $307C x1,y1
COMMENT_LINE $307E XX
COMMENT_LINE $307E XX
COMMENT_LINE $307E --
COMMENT $307E start pos
COMMENT $3080 line count
COMMENT $3083 line count
COMMENT $3084 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3085 x0,y0
COMMENT $3087 x1,y1
COMMENT_LINE $3089 |XX
COMMENT_LINE $3089 |XX
COMMENT_LINE $3089 --
COMMENT $3089 start pos
COMMENT $308B line count
COMMENT $3090 line count
COMMENT $3091 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3092 x0,y0
COMMENT $3094 x1,y1
COMMENT $3096 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3097 x0,y0
COMMENT $3099 x1,y1
COMMENT_LINE $309B X.
COMMENT_LINE $309B |..
COMMENT $309B start pos
COMMENT $309D line count
COMMENT $30A2 line count
COMMENT $30A3 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30A4 x0,y0
COMMENT $30A6 x1,y1
COMMENT $30A8 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30A9 x0,y0
COMMENT $30AB x1,y1
COMMENT_LINE $30AD ..|
COMMENT_LINE $30AD .X
COMMENT $30AD start pos
COMMENT $30AF line count
COMMENT $30B4 line count
COMMENT $30B5 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30B6 x0,y0
COMMENT $30B8 x1,y1
COMMENT $30BA linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30BB x0,y0
COMMENT $30BD x1,y1
COMMENT_LINE $30BF XX|
COMMENT_LINE $30BF XX|
COMMENT_LINE $30BF --
COMMENT $30BF start pos
COMMENT $30C1 line count
COMMENT $30C6 line count
COMMENT $30C7 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30C8 x0,y0
COMMENT $30CA x1,y1
COMMENT $30CC linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30CD x0,y0
COMMENT $30CF x1,y1
COMMENT_LINE $30D1 |..
COMMENT_LINE $30D1 X.
COMMENT $30D1 start pos
COMMENT $30D3 line count
COMMENT $30D8 line count
COMMENT $30D9 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30DA x0,y0
COMMENT $30DC x1,y1
COMMENT $30DE linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30DF x0,y0
COMMENT $30E1 x1,y1
COMMENT_LINE $30E3 XX|
COMMENT_LINE $30E3 X.
COMMENT $30E3 start pos
COMMENT $30E5 line count
COMMENT $30EA line count
COMMENT $30EB linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30EC x0,y0
COMMENT $30EE x1,y1
COMMENT $30F0 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30F1 x0,y0
COMMENT $30F3 x1,y1
COMMENT_LINE $30F5 .X
COMMENT_LINE $30F5 |XX
COMMENT $30F5 start pos
COMMENT $30F7 line count
COMMENT $30FC line count
COMMENT $30FD linetype, 0=vert, 1=horiz, 2=slope
COMMENT $30FE x0,y0
COMMENT $3100 x1,y1
COMMENT $3102 linetype, 0=vert, 1=horiz, 2=slope
COMMENT $3103 x0,y0
COMMENT $3105 x1,y1
COMMENT_LINE $3107 -----------------
COMMENT_LINE $3107 LEVELS
COMMENT_LINE $3107 -----------------
COMMENT_LINE $3107 Level-definitions
COMMENT_LINE $3107 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $3107 Macro for defining a level, see struct LevelEntry
COMMENT $31B7 decode ASCII digits to binary
COMMENT $31B7 normal tiles
COMMENT $31B7 special tiles without lines
COMMENT_LINE $31B7 Off is 1 or -1, meaning to adjust Y quarter of a tile down or up respectively
COMMENT_LINE $31B7 0 = NE,1 = NW,2 = SE,3 = SW
COMMENT $0000 Gun definition macro
COMMENT $0000 Fuel pod definition macro
COMMENT $0000 Restart point definition macro
COMMENT $0000 Door definition
COMMENT $0000 left wall
COMMENT $0000 right wall
COMMENT_LINE $0000 **todo level data restrictions:
COMMENT_LINE $0000 - level must be at least TileCountY high or RefreshDrawList won't work
COMMENT_LINE $0000 - doors must have x > TileCountX or they won't be drawn correctly
COMMENT $32B7 count
COMMENT $32BD count
COMMENT $32C2 count
COMMENT $32C5 count
COMMENT_LINE $32C6 DoorDef 2, 10,2
COMMENT $32C6 count
COMMENT_LINE $32C7 SwitchDef 0, 13,2
COMMENT $3489 count
COMMENT $3494 count
COMMENT $3499 count
COMMENT $349C count
COMMENT $349D count
COMMENT $3732 count
COMMENT $374C count
COMMENT $3765 count
COMMENT $376C count
COMMENT $376D count
COMMENT $3A9E count
COMMENT $3AC2 count
COMMENT $3AC7 count
COMMENT $3AD0 count
COMMENT $3AD6 count
COMMENT $3AD7 left wall
COMMENT $3AD7 right wall
COMMENT $3ADC left wall
COMMENT $3ADC right wall
COMMENT $3E93 count
COMMENT $3EB7 count
COMMENT $3ED8 count
COMMENT $3EE3 count
COMMENT $3EE9 count
COMMENT $3EEA left wall
COMMENT $3EEA right wall
COMMENT $3EEF left wall
COMMENT $3EF1 right wall
COMMENT $450C count
COMMENT_LINE $450D 0=NE,1=NW,2=SE,3=SW
COMMENT $453F count
COMMENT $4548 count
COMMENT $4553 count
COMMENT_LINE $4559 **todo horiz pointy -> door
COMMENT $4559 count
COMMENT $455A left wall
COMMENT $455A right wall
COMMENT $455F left wall
COMMENT $4561 right wall
COMMENT $4730 count
COMMENT $4754 count
COMMENT $4761 count
COMMENT $4768 count
COMMENT $4782 count
COMMENT $4783 left wall
COMMENT $4785 right wall
COMMENT $4788 left wall
COMMENT $4788 right wall
COMMENT $478D left wall
COMMENT $478D right wall
COMMENT $4B16 count
COMMENT $4B3F count
COMMENT $4B44 count
COMMENT $4B53 count
COMMENT $4B59 count
COMMENT $4B5A left wall
COMMENT $4B5A right wall
COMMENT $4B5F if Level1Only
COMMENT $4B5F reset mapping
COMMENT_LINE $4B5F END OF LEVELS
COMMENT_LINE $4B5F --------------
COMMENT_LINE $4B5F rel y, rel x. first coord is not drawn, only moved.
COMMENT_LINE $4B5F negative y is down, negative x is left
COMMENT_LINE $4B73 Extra points for thrust-effect at ships tail
COMMENT_LINE $4B73 \/
COMMENT $4B73 invisible line from ships tip to tail
COMMENT $4B79 count-1
COMMENT_LINE $4B8C /\
COMMENT_LINE $4B8C \/
COMMENT $4B8C count-1
COMMENT $4B97 end byte so it can be drawn with drawsprite also
COMMENT_LINE $4BB4 -----------------
COMMENT_LINE $4BB4 Lines for sprites that use the DrawSprite-routine
COMMENT_LINE $4BB4 -----------------
COMMENT_LINE $4BB4 Sprite scale factor. Set to a value that makes the sprites look good when drawn with scale DrawScale
COMMENT_LINE $4BB4 Sprite unit Height and Width. Relative to size of tiles.
COMMENT_LINE $4BB4 The "-1" allows a 8x8 -128 -- 127 resolution without hitting 128
COMMENT $4BB4 count-1
COMMENT $4BB5 start pos
COMMENT $4BC3 end
COMMENT $4BC4 count-1
COMMENT $4BC5 start pos
COMMENT $4BD3 end
COMMENT $4BD4 count-1
COMMENT $4BD5 start pos
COMMENT $4BE3 end
COMMENT $4BE4 count-1
COMMENT $4BE5 start pos
COMMENT $4BF3 end
COMMENT $4BF4 count-1
COMMENT $4BF5 start pos
COMMENT $4C01 count-1
COMMENT $4C02 start pos
COMMENT $4C08 count-1
COMMENT $4C09 start pos
COMMENT $4C0D end
COMMENT_LINE $0000 /\
COMMENT_LINE $0000 \/
COMMENT_LINE $0000 |  |
COMMENT_LINE $0000 |  |
COMMENT_LINE $4C46 \
COMMENT_LINE $4C46 /
COMMENT_LINE $4C56 1
COMMENT_LINE $4C5B 5
COMMENT_LINE $4C68 0
COMMENT_LINE $4C74 3
COMMENT_LINE $4C82 0
COMMENT_LINE $4C8D 0
COMMENT_LINE $4C99 7
COMMENT_LINE $4CA0 5
COMMENT_LINE $4CAD 0
COMMENT_LINE $4CB9 END OF SPRITES
COMMENT_LINE $4CB9 -----------------
COMMENT_LINE $4CB9 Thrust text constants and text/menu display code.
COMMENT_LINE $4CB9 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $0000 From x to u, until (and including) end byte
COMMENT_LINE $4CB9 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $4CB9 declare buffer
COMMENT_LINE $4CB9 5 W is max, add more if needed
COMMENT $4CBF #0xFC38
COMMENT $4CC2 Specify height and width
COMMENT $4CC8 if argument exists, load into a, otherwise use current a
COMMENT $4CCC if argument exists, load into a, otherwise use current a
COMMENT_LINE $4CCE sta   $C827
COMMENT $4CDE rom struntar i scale
COMMENT_LINE $4CE4 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $4CE4 declare buffer
COMMENT_LINE $4CE4 5 W is max, add more if needed
COMMENT $4CEA #0xFC38
COMMENT $4CED Specify height and width
COMMENT $4CF3 if argument exists, load into a, otherwise use current a
COMMENT $4CF9 if argument exists, load into a, otherwise use current a
COMMENT_LINE $4CF9 sta   $C827
COMMENT $4D09 rom-code ignores current scale
COMMENT_LINE $4D0F *****************
COMMENT_LINE $4D0F x = pointer to list: {1},coords,stringptr,coords,stringptr, ... , $0000
COMMENT_LINE $4D0F if first byte is 1, then wait for keypress
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $4D0F declare buffer
COMMENT_LINE $4D0F 5 W is max, add more if needed
COMMENT $4D12 init wait-buffer
COMMENT $4D24 check for first byte 1: 'menu' mode, return keypress
COMMENT $4D2F check for first byte 2: skip animation
COMMENT $4D35 init wait-buffer
COMMENT $4D46 check for first byte 3: callback
COMMENT_LINE $4D50 Save dp, meny is called from both title (d0) and game (c8)-code
COMMENT $4D5C Wait for screen sync
COMMENT $4D7A update wait-buffer for each line
COMMENT_LINE $4D8A value from wait-buffer is used for intensity and coord-offsets
COMMENT_LINE $4D94 asra
COMMENT $4DB1 exit after keypress (menu)
COMMENT $4DBD exit with key in B
COMMENT_LINE $4DCA Restore dp
COMMENT_LINE $4DD2 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $4DD2 declare buffer
COMMENT_LINE $4DD2 5 W is max, add more if needed
COMMENT $4DDA add end byte
COMMENT_LINE $4DE8 *****************
COMMENT_LINE $4DE8 NOTE: this subroutine has two entry-points, be careful with stack usage
COMMENT_LINE $4F95 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $4F95 declare buffer
COMMENT_LINE $4F95 5 W is max, add more if needed
COMMENT_LINE $4F98 hasPod
COMMENT_LINE $4F98 line 0: "planet destroyed" (if planteddestroyed)
COMMENT_LINE $4F98 line 1: "mission 2 complete"
COMMENT_LINE $4F98 line 2: "bonus xxx" (2000 + (400 * levelno)) + (2000 if planteddestroyed)
COMMENT_LINE $4F98 level exit utan orb men planetdestroyed
COMMENT_LINE $4F98 samma ifall planet destroyed, ej exit
COMMENT_LINE $4F98 (vid loselife, testa destroyed, ta bort orb, och anropa onlevelexit)
COMMENT_LINE $4F98 PLANET DESTROYED
COMMENT_LINE $4F98 MISSION 1 FAILED
COMMENT_LINE $4F98 NO BONUS
COMMENT_LINE $4F98 (level++)
COMMENT $4F98 level completed as default
COMMENT $4FAB insert level no
COMMENT $4FDD bonus string
COMMENT_LINE $4FE6 detect 'perfect'
COMMENT $4FEA no perfect for normal game
COMMENT $4FF0 check all guns destroyed
COMMENT $5002 check all fuel collected/destroyed
COMMENT_LINE $5010 perfect: all guns, all fuel, pod collected, planet destroyed, no lives lost
COMMENT_LINE $5010 ldd #2000
COMMENT $5012 no perfect, lost life
COMMENT_LINE $502A levelno*400 = (levelno*2)*200
COMMENT $502A bonus is calced on level lo-nr
COMMENT $5049 end word
COMMENT_LINE $504B Add bonus to player score
COMMENT_LINE $504B Givescore only handles 8-bit values so add the 16-bit bonus in 8-bit portions
COMMENT_LINE $504B Not pretty but it works
COMMENT_LINE $507B Planet destroyed, no orb: no bonus, advance mission
COMMENT $5084 insert level no
COMMENT_LINE $50B8 Exit without orb: stay on same mission
COMMENT $50BB level incomplete
COMMENT $50BF skip text if time-attack
COMMENT_LINE $5139 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5139 declare buffer
COMMENT_LINE $5139 5 W is max, add more if needed
COMMENT_LINE $513C GAME OVER
COMMENT_LINE $513C HARD GAME
COMMENT_LINE $513C FINAL SCORE 20000
COMMENT_LINE $513C LEVEL 5
COMMENT_LINE $513C PRESS BUTTON
COMMENT_LINE $513C test for highscore and bonusgame
COMMENT $513E no test if cheating
COMMENT_LINE $5140 enable bonusgame
COMMENT $5142 skip if already enabled
COMMENT $5146 must be normal game
COMMENT $514A must have completed all levels
COMMENT $515D temporarily store an end-byte so that we can call rom
COMMENT_LINE $5161 check x vs u, copy to u if higher
COMMENT_LINE $5167 new highscore
COMMENT $516C 'final score'
COMMENT $5175 insert score
COMMENT $518B wait for keypress flag
COMMENT_LINE $5190 mCombine d,-12,-70
COMMENT $5197 'level reached xx'
COMMENT $51A0 insert level no
COMMENT_LINE $51B6 ldd ShipFuel
COMMENT_LINE $51B6 bne tgoFuelOk
COMMENT_LINE $51B6 mCombine d,-22,-39
COMMENT_LINE $51B6 std ,y++
COMMENT_LINE $51B6 ldd #FuelString
COMMENT_LINE $51B6 std ,y++
COMMENT_LINE $51B6 tgoFuelOk:
COMMENT_LINE $51B6 mCombine d,8,-32
COMMENT_LINE $51C0 mCombine d,-2,-40
COMMENT $51C3 display game mode
COMMENT_LINE $51CF mCombine d,-116,-50
COMMENT $51D9 end word
COMMENT_LINE $51F0 FuelString:       db "OUT OF FUEL",$80
COMMENT_LINE $5204 NOTE 11 chars strings assumed by display highscore
COMMENT $5228 no title in bonusgame
COMMENT_LINE $5248 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5248 declare buffer
COMMENT_LINE $5248 5 W is max, add more if needed
COMMENT_LINE $0000 *****************
COMMENT_LINE $5298 B holds key pressed
COMMENT_LINE $52E4 *****************
COMMENT_LINE $52EA B holds key pressed
COMMENT_LINE $533B *****************
COMMENT_LINE $536C B holds key pressed
COMMENT_LINE $5393 *****************
COMMENT_LINE $5399 B holds key pressed
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $539A declare buffer
COMMENT_LINE $539A 5 W is max, add more if needed
COMMENT $53B8 if argument exists, load into a, otherwise use current a
COMMENT_LINE $53BA sta   $C827
COMMENT $53CF if argument exists, load into a, otherwise use current a
COMMENT_LINE $5434 *****************
COMMENT_LINE $5467 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5467 declare buffer
COMMENT_LINE $5467 5 W is max, add more if needed
COMMENT_LINE $5494 B holds key pressed
COMMENT_LINE $54D2 *****************
COMMENT_LINE $54D8 B holds key pressed
COMMENT_LINE $54F2 Zzap Strikes Back - Bonusgame hidden inside Thrust.
COMMENT_LINE $54F2 Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $54F2 todo optimize size
COMMENT_LINE $54F2 skip all y-coords, assume 0?
COMMENT_LINE $54F2 direct c9 instead?
COMMENT_LINE $54F2 macros instead of subroutines
COMMENT_LINE $54F2 g�r subs av mMove_to_d i hela, mMove_to_d=jsr FxMoveToD
COMMENT_LINE $54F2 fixlist
COMMENT_LINE $54F2 coolare bullet for homing shots
COMMENT_LINE $54F2 sv�rare
COMMENT_LINE $54F2 1 extra headtr�ff
COMMENT_LINE $54F2 �ka level every two walkers
COMMENT_LINE $54F2 �ka hitpoints baserat p� levelhi?
COMMENT_LINE $54F2 radar plot base
COMMENT_LINE $54F2 thrust flame
COMMENT_LINE $54F2 *highscore visas /10
COMMENT_LINE $54F2 activate vid 50.000?
COMMENT_LINE $54F2 har n�tt 93000 i normal game
COMMENT_LINE $54F2 --> testa:   har n�tt level 6 i normal game
COMMENT_LINE $54F2 smalare huvud f�r varje round
COMMENT_LINE $54F2 l�gre intensity p� bakre berg
COMMENT_LINE $54F2 walker mer hitpoints
COMMENT_LINE $54F2 kortare v�rld
COMMENT_LINE $54F2 st�rre diff p� shotintensities
COMMENT_LINE $54F2 walker fler shots
COMMENT_LINE $54F2 walker lysande shots
COMMENT_LINE $54F2 sv�rare att tr�ffa head
COMMENT_LINE $54F2 skip ship vs walker collision?
COMMENT_LINE $54F2 rewrite setview-code
COMMENT_LINE $54F2 om ship right
COMMENT_LINE $54F2 opt = shipx + velocx - edge
COMMENT_LINE $54F2 diff=opt-view
COMMENT_LINE $54F2 om diff<>0
COMMENT_LINE $54F2 asr diff, minst 1
COMMENT_LINE $54F2 �ka view med diff
COMMENT_LINE $54F2 defender style control: flip dir med button? accelerate med button?
COMMENT_LINE $54F2 �ka shipshot speed efter tid, s� att man inte kan �ka ikapp sina egna skott
COMMENT_LINE $54F2 gameover, �ka shipy tills utanf�r sk�rm, gameover
COMMENT_LINE $54F2 roligt ljud vid explode walker
COMMENT_LINE $54F2 pulse-sound
COMMENT_LINE $54F2 jump-sound
COMMENT_LINE $54F2 score
COMMENT_LINE $54F2 score f�r headshot
COMMENT_LINE $54F2 score f�r bodyshot
COMMENT_LINE $54F2 blinka weakspot i ryggen, om hit d�da direkt
COMMENT_LINE $54F2 radar
COMMENT_LINE $54F2 world length 8192 / 64 = 0..128
COMMENT_LINE $54F2 loop walkers
COMMENT_LINE $54F2 screenx=walkerx >> 6
COMMENT_LINE $54F2 lo rol2 in i ny byte
COMMENT_LINE $54F2 b|=hi shl2
COMMENT_LINE $54F2 screeny=walkery >> 3
COMMENT_LINE $54F2 RadarGetScreenCoords x,y
COMMENT_LINE $54F2 *eget gamemode
COMMENT_LINE $54F2 titlescreen
COMMENT_LINE $54F2 save highscore
COMMENT_LINE $54F2 egen text i gameover
COMMENT_LINE $54F2 *collision ship �r inte centrerad
COMMENT_LINE $54F2 *slide left/right ska bara p�verka viewx, ej shipx
COMMENT_LINE $54F2 optimize speed
COMMENT_LINE $54F2 mountain och ship ritas i scale $7f
COMMENT_LINE $54F2 till�t att skepp �ker ovan sk�rmen 32 koords
COMMENT_LINE $54F2 och under 32 koords
COMMENT_LINE $54F2 d� m�ste viewy f�lja
COMMENT_LINE $54F2 drawstars
COMMENT_LINE $54F2 flytta ship,mountains och stj�rnor separat? parallax effekt?
COMMENT_LINE $54F2 title
COMMENT_LINE $54F2 'ZZAP STRIKES BACK'
COMMENT_LINE $54F2 'PRESS FIRE'
COMMENT_LINE $54F2 HIGHSCORE
COMMENT_LINE $54F2 activate
COMMENT_LINE $54F2 om cheatactive visa som alternativ 4 i modeselect
COMMENT_LINE $54F2 alt vid highscore i normal game
COMMENT_LINE $54F2 tst BonusGameActivated (eeprom)
COMMENT_LINE $54F2 s�tts efter nytt highscore
COMMENT_LINE $54F2 samt vid enable cheat
COMMENT_LINE $54F2 alt
COMMENT_LINE $54F2 som nu helt hidden
COMMENT_LINE $54F2 GameMode = 3 BonusGame
COMMENT_LINE $54F2 save highscore also
COMMENT_LINE $54F2 hur visa highscore?
COMMENT_LINE $54F2 egen titlescreen
COMMENT_LINE $54F2 1 start, 2 options, 3 zzgf
COMMENT_LINE $54F2 3 visar ny titlescreen
COMMENT_LINE $54F2 walker
COMMENT_LINE $54F2 dela upp i body och huvud
COMMENT_LINE $54F2 animera ben och huvud
COMMENT_LINE $54F2 hittest mod body och huvud, mer s�rbar p� huvud
COMMENT_LINE $54F2 g�r f�rst generellt hittest, sedan p� separat yta
COMMENT_LINE $54F2 WalkerWidth
COMMENT_LINE $54F2 WalkerBaseW = (WalkerWidth/4)*3
COMMENT_LINE $54F2 WalkerLegW = (WalkerBaseW/6) * 2
COMMENT_LINE $54F2 WalkerBaseW = 128
COMMENT_LINE $54F2 WalkerNeckW = 32
COMMENT_LINE $54F2 WalkerHeadW = 32
COMMENT_LINE $54F2 WalkerTotalWidth = WalkerBaseW + WalkerNeckW + WalkerHeadW
COMMENT_LINE $54F2 CopyLinesAddY
COMMENT_LINE $54F2 DrawLeg offsetx,length
COMMENT_LINE $54F2 /------\
COMMENT_LINE $54F2 |      |-/\
COMMENT_LINE $54F2 |      |-\/
COMMENT_LINE $54F2 --------
COMMENT_LINE $54F2 | |  | |
COMMENT_LINE $54F2 |_|  |_|
COMMENT_LINE $54F2 6 bytes stack per line, 18 lines, 108 bytes stack space needed by clipdraw
COMMENT_LINE $54F2 ;positive y is down, positive x is right
COMMENT_LINE $54F2 ;  db 1  ;line count
COMMENT_LINE $54F2 ;  db 1  ;linetype, 0=vert, 1=horiz, 2=slope
COMMENT_LINE $54F2 ;  db FullW,0  ;x0,y0
COMMENT_LINE $54F2 ;  db 0,HalfH  ;x1,y1
COMMENT_LINE $54F2 hotspot
COMMENT_LINE $54F2 tr�ffar man denna s� d�r walker direkt
COMMENT_LINE $54F2 explode
COMMENT_LINE $54F2 FxTargetWalker index, obs ny emit f�r ej ske innan shatter �r klar
COMMENT_LINE $54F2 s�nk walker l�ngsamt genom att �ka dess y
COMMENT_LINE $54F2 walker damage
COMMENT_LINE $54F2 inital life 64
COMMENT_LINE $54F2 headshot minska med 8
COMMENT_LINE $54F2 emit explosion i head vart 32:e
COMMENT_LINE $54F2 base minska med 2
COMMENT_LINE $54F2 flash if low?
COMMENT_LINE $54F2 difficulty
COMMENT_LINE $54F2 zzappace �r 32-0, b�rjar p� 32, minskar 1 vart 16:e sekund
COMMENT_LINE $54F2 zzappace �r 255-0, b�rjar p� 255, shr 1 vart 16:e sekund
COMMENT_LINE $54F2 b�de Pace och PaceMask?
COMMENT_LINE $54F2 alt.
COMMENT_LINE $54F2 �ka pace f�r varje d�dad walker
COMMENT_LINE $54F2 ha en klocka f�r varje behov
COMMENT_LINE $54F2 �terg� till l�ngsamt tempo efter snabbaste
COMMENT_LINE $54F2 flytta fram walkeremitpoint vid varje varv
COMMENT_LINE $54F2 WalkerSpeed mask8frame,6,4,3,2,1
COMMENT_LINE $54F2 ShootDelay 8,7,6,5,4,3,2,1 (multipliceras med random 4)
COMMENT_LINE $54F2 JumpDelay
COMMENT_LINE $54F2 JumpHeight
COMMENT_LINE $54F2 ShotYSpread, ShotXSpeed
COMMENT_LINE $54F2 ZzapIncDifficulty, ZzapResetDifficulty
COMMENT_LINE $54F2 IncreaseDifficulty()
COMMENT_LINE $54F2 anropa flera ggr f�r att testa
COMMENT_LINE $54F2 ZzapShotDelay
COMMENT_LINE $54F2 inc ZzapLevelNo
COMMENT_LINE $54F2 om mod 8=0
COMMENT_LINE $54F2 InitDifficulty()
COMMENT_LINE $54F2 IncreaseDifficulty() f�r att inte b�rja p� noll
COMMENT_LINE $54F2 move forward walker emitpoint
COMMENT_LINE $54F2 lsr ZzapShotDelay
COMMENT_LINE $54F2 ZzapLevel
COMMENT_LINE $54F2 ZzapDifficultyEntry
COMMENT_LINE $54F2 zdShotDelay
COMMENT_LINE $54F2 InitDifficulty
COMMENT_LINE $54F2 allt noll
COMMENT_LINE $54F2 mSetByte ZzapShotDelay,$ff
COMMENT_LINE $54F2 mSetByte ZzapWalkerSpeed,0
COMMENT_LINE $54F2 updatewalkers
COMMENT_LINE $54F2 updatera x med tv� ifall framecounter and (4-bytetabell) �r 0
COMMENT_LINE $54F2 lda zzapshotdelay
COMMENT_LINE $54F2 anda loopcounterlow
COMMENT_LINE $54F2 bne skipshots
COMMENT_LINE $54F2 om jumping
COMMENT_LINE $54F2 updatera y
COMMENT_LINE $54F2 anv�nd jumpscale f�r att �ka y
COMMENT_LINE $54F2 annars
COMMENT_LINE $54F2 lda jumpdelay
COMMENT_LINE $54F2 anda framecounter
COMMENT_LINE $54F2 bne nojump
COMMENT_LINE $54F2 = jumping
COMMENT_LINE $54F2 jumpscale -2 -- 2
COMMENT_LINE $54F2 walkerentry
COMMENT_LINE $54F2 jumpIndex 0--63, -1=not jumping
COMMENT_LINE $54F2 jumpScale init med rnd * zdconfig.jumpscaleRange
COMMENT_LINE $54F2 zdconfig
COMMENT_LINE $54F2 jumpIndex 0--64, -1=not jumping
COMMENT_LINE $54F2 jumpIndexIncrease 1--4
COMMENT_LINE $54F2 jumpIndexIncreaseRange 2
COMMENT_LINE $54F2 jumpScale
COMMENT_LINE $54F2 jumpScaleRange
COMMENT_LINE $54F2 jumpDelay only randomize jumpdelay
COMMENT_LINE $54F2 f�r scale ta walkerindex
COMMENT_LINE $54F2 move walkers
COMMENT_LINE $54F2 loopcounter and (zzappace and 15)
COMMENT_LINE $54F2 sound
COMMENT_LINE $54F2 "puls" ljud n�r walkers r�r sig
COMMENT_LINE $54F2 �kar i takt med zzapclock
COMMENT_LINE $54F2 zc=zzappace shl 4
COMMENT_LINE $54F2 (loopcounter and (255 shl zc))
COMMENT_LINE $54F2 draw walker
COMMENT_LINE $54F2 walkervisible-flag
COMMENT_LINE $54F2 d� ritas ej score och radar
COMMENT_LINE $54F2 s�tt upp headrect och baserect
COMMENT_LINE $54F2 shots vs walkers
COMMENT_LINE $54F2 endast om visible
COMMENT_LINE $54F2 testa mot head och base
COMMENT_LINE $54F2 walker-shots
COMMENT_LINE $54F2 klocka styr hur ofta walker skjuter, samt dess homingness
COMMENT_LINE $54F2 tr�ff med skepp, drain energy v�nd riktning och velocity
COMMENT_LINE $54F2 ZzapClock ds �kar med 1 varje sekund
COMMENT_LINE $54F2 alt ZzapPace �kar med 1 vart 8:e sekund, stannar p� 8
COMMENT_LINE $54F2 WalkerShotTimer (dec vart 8:e frame) 8=1 sekund, 4=1/2 sekund
COMMENT_LINE $54F2 max 5 sekunder, min 1 sekund
COMMENT_LINE $54F2 rnd +/- 1 sekund
COMMENT_LINE $54F2 (8-zzapPace)*4 + (rnd and 15 - 7)
COMMENT_LINE $54F2 alt span 1 skott vart 4:e sekund -- 1 vart 0.2 sekund
COMMENT_LINE $54F2 timer range 1 -- (4*8)
COMMENT_LINE $54F2 timer = 33 - (zzappace<<1)
COMMENT_LINE $54F2 homingness
COMMENT_LINE $54F2 mask = 32 - zzappace<<1
COMMENT_LINE $54F2 mask = zzappace-1
COMMENT_LINE $54F2 emit
COMMENT_LINE $54F2 om !walkerVisible exit
COMMENT_LINE $54F2 emit ifr�n headrect
COMMENT_LINE $54F2 xveloc=fast speed * zzapclock
COMMENT_LINE $54F2 WalkerShotEntry
COMMENT_LINE $54F2 wsActive
COMMENT_LINE $54F2 wsVelocX +/-
COMMENT_LINE $54F2 wsWalkerShotX
COMMENT_LINE $54F2 wsWalkerShotY
COMMENT_LINE $54F2 DrawWalkerShots
COMMENT_LINE $54F2 remove ifall utanf�r sk�rm
COMMENT_LINE $54F2 UpdateWalkerShot
COMMENT_LINE $54F2 loop
COMMENT_LINE $54F2 om active
COMMENT_LINE $54F2 flytta
COMMENT_LINE $54F2 remove ifall utanf�r sk�rm
COMMENT_LINE $54F2 collision vs ship
COMMENT_LINE $54F2 annars lagra i ledig slot
COMMENT_LINE $54F2 om ledig slot
COMMENT_LINE $54F2 och timer=0
COMMENT_LINE $54F2 och walkervisible
COMMENT_LINE $54F2 emit
COMMENT_LINE $54F2 origin HeadX
COMMENT_LINE $54F2 s�tt wsVelocX i riktning mot skepp
COMMENT_LINE $54F2 base
COMMENT_LINE $54F2 rita stationarypod som base
COMMENT_LINE $54F2 ifall walker n�r pod, gameover
COMMENT_LINE $54F2 s�tt viewx till base, loop med waitcalc, emit planetexplode ljud
COMMENT_LINE $54F2 score
COMMENT_LINE $54F2 anv�nd samma rutiner som vanliga spelet? eget gamemode?
COMMENT_LINE $54F2 radar
COMMENT_LINE $54F2 display med radar o score, fadas bort n�r walker �r visible
COMMENT_LINE $54F2 Relative coordinates for mountain.
COMMENT_LINE $5502 For each of the values in MountainYCoords there is a y-coordinate
COMMENT_LINE $5502 saying where to start drawing. This could be calculated using the
COMMENT_LINE $5502 relative values, but it's easier having a list.
COMMENT_LINE $5512 Vectors for ship facing left.
COMMENT_LINE $551C thrust flame
COMMENT_LINE $5522 Vectors for ship facing right.
COMMENT_LINE $552C thrust flame
COMMENT_LINE $C946 Start memory in drawlist to avoid collisions with main game
COMMENT_LINE $C946 Ship coordinates.
COMMENT_LINE $C946 The Y values is a direct Vectrex coordinate used in drawing.
COMMENT_LINE $C946 The X value is a position in game world.
COMMENT_LINE $C946 Direction ship is facing.
COMMENT_LINE $C946 X coordinate in game world for left edge of screen.
COMMENT_LINE $C946 This value is subtracted from ship and shot x coord to produce screen coord.
COMMENT_LINE $C946 Ship shots.
COMMENT_LINE $C946 Max nr of shots visible at one time. This value can be increased.
COMMENT_LINE $C946 A shot is growing from the nose of the ship until reaching a length of this value.
COMMENT_LINE $C946 Structure holding info about one shot.
COMMENT $C946 Flag: is shot active?
COMMENT $C946 Direction for shot.
COMMENT $C946 Y game world coordinate.
COMMENT $C946 X game world coordinate.
COMMENT $C946 Current length of shot.
COMMENT_LINE $C946 Array with shots.
COMMENT_LINE $C962 8192 is the length the radar assumes
COMMENT_LINE $C962 ViewX for new game
COMMENT_LINE $C962 Walkers (enemies)
COMMENT $C962 -1=active, 0=dead, 1 dying
COMMENT $C962 sprite center coords in world-space
COMMENT $C962 -1=not jumping, 0..63 index to sinetable
COMMENT_LINE $C99A Walker measurements
COMMENT_LINE $C99A Default head height, shrinks for each level
COMMENT_LINE $C99A Total width/height of walker sprite
COMMENT_LINE $C99A Walker shots
COMMENT_LINE $C9BD Coordinates for base
COMMENT_LINE $C9BD 0 = no walker visible, else points to visible walkerentry
COMMENT $C9BD index of visible walker
COMMENT_LINE $C9C6 Game difficulty configuration, increased by each walker shot
COMMENT_LINE $C9CF Use same level as maingame, levelno is displayed in gameover
COMMENT_LINE $C9CF Dynamic length, keep at end of BSS-section
COMMENT_LINE $C9CF *******************
COMMENT $5535 Clear buffer
COMMENT_LINE $553F jsr Text_ShowWellDone
COMMENT $5561 Wait for screen sync
COMMENT_LINE $5564 DP is now D0
COMMENT_LINE $5582 jsr DrawStars
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5588 declare buffer
COMMENT_LINE $5588 5 W is max, add more if needed
COMMENT_LINE $55DE *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $55DE declare buffer
COMMENT_LINE $55DE 5 W is max, add more if needed
COMMENT_LINE $5603 From vectrex.txt
COMMENT_LINE $5603 "(WARNING! high intensity and long Vec_Dot_Dwell might result in a burn in on
COMMENT_LINE $5603 your vectrex monitor, be carefull while experimenting with this!)"
COMMENT_LINE $5607 ldb   #dot_dwell         ;dot_dwell is a value for how long the dot is lit
COMMENT_LINE $5607 PF2CC: decb                     ;dwell is not the same as intensity
COMMENT_LINE $5607 bne   PF2CC
COMMENT_LINE $5619 lda #3
COMMENT_LINE $561C mDot_at_current_position
COMMENT_LINE $5626 div 8192
COMMENT $5644 if argument exists, load into a, otherwise use current a
COMMENT_LINE $5644 sta   $C827
COMMENT_LINE $564E mDot_at_current_position
COMMENT_LINE $564E lda #3
COMMENT_LINE $564E jmp DrawPlusAtCurrentPosition
COMMENT_LINE $564E rts
COMMENT_LINE $564E *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $564E declare buffer
COMMENT_LINE $564E 5 W is max, add more if needed
COMMENT $5652 increase difficulty every two walkers
COMMENT_LINE $565C b=level high
COMMENT_LINE $565C locallevelo is never lower than hi
COMMENT_LINE $565C this makes the base difficulty increase after each round (one round=8 walkers)
COMMENT $5660 level 64 = difficulty at max
COMMENT_LINE $569F Walker life
COMMENT_LINE $56BE *****************
COMMENT_LINE $56BE UpdateWalkerShot
COMMENT_LINE $56BE loop
COMMENT_LINE $56BE active?
COMMENT_LINE $56BE move
COMMENT_LINE $56BE collision vs ship
COMMENT_LINE $56BE else save free slot index
COMMENT_LINE $56BE if free slot
COMMENT_LINE $56BE and timer=0
COMMENT_LINE $56BE and walkervisible
COMMENT_LINE $56BE emit
COMMENT_LINE $56BE origin HeadX
COMMENT_LINE $56BE = wsVelocX in direction towards ship
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $56BE declare buffer
COMMENT_LINE $56BE 5 W is max, add more if needed
COMMENT $56CF update x
COMMENT $5705 slightly homing shots
COMMENT_LINE $571A collision vs ship
COMMENT_LINE $575B test if emit
COMMENT $578C call rom
COMMENT_LINE $579C anda #7
COMMENT_LINE $579C suba #4
COMMENT_LINE $57A6 *****************
COMMENT_LINE $57A6 DP must be D0
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $57A6 declare buffer
COMMENT_LINE $57A6 5 W is max, add more if needed
COMMENT $57A8 Scale $7f is required for move_pen_d to reach whole screen
COMMENT $57A8 if argument exists, load into a, otherwise use current a
COMMENT $57C9 Draw a single sprite  u=pointer to x,y  x=vectorlist a=scale b=intensity
COMMENT_LINE $57CE tsta
COMMENT_LINE $57CE beq zdwsNotOnScreen
COMMENT_LINE $57CE jsr DrawBulletAtCurrentPosition
COMMENT_LINE $57CE jsr DrawBulletAtCurrentPosition
COMMENT_LINE $57CE jsr DrawBulletAtCurrentPosition
COMMENT_LINE $57CE zdwsNotOnScreen:
COMMENT_LINE $57D7 *****************
COMMENT $57EC CurLevelEndX = (CurLevelSizeX * TileW)
COMMENT $57F1 CurLevelEndY = largest View Y
COMMENT_LINE $580C Init walkers
COMMENT_LINE $5823 jsr clear_sound_chip
COMMENT_LINE $5828 lda #100 + 16
COMMENT_LINE $5838 *****************
COMMENT_LINE $584F DP must be D0
COMMENT $584F Reset pen
COMMENT $585C Set pen position to value of d register
COMMENT $585F if argument exists, load into a, otherwise use current a
COMMENT_LINE $5861 sta   $C827
COMMENT $5877 Nr of vectors in list
COMMENT $5879 Scale
COMMENT $587B Draw list
COMMENT $5883 call rom
COMMENT $588A if argument exists, load into a, otherwise use current a
COMMENT_LINE $588A sta   $C827
COMMENT $5895 move draw, use current scale
COMMENT_LINE $5899 *****************
COMMENT $5899 set up draw with pattern
COMMENT_LINE $589C lda #%10101010
COMMENT_LINE $589C sta Pattern
COMMENT_LINE $589C DP must be D0
COMMENT_LINE $589C mSetIntensity $4f
COMMENT_LINE $589C Draw all active shots.
COMMENT_LINE $58A7 vary pattern and intensity for each shot
COMMENT $58B1 if argument exists, load into a, otherwise use current a
COMMENT_LINE $58B1 sta   $C827
COMMENT $58C2 remove if offscreen
COMMENT $58D6 draw pattern
COMMENT_LINE $58E5 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $58E5 declare buffer
COMMENT_LINE $58E5 5 W is max, add more if needed
COMMENT_LINE $58E7 Move all active shots.
COMMENT_LINE $58E7 Increase length of shots that haven't reached full length.
COMMENT_LINE $58E7 Remove shots that have left screen.
COMMENT_LINE $58F4 Update x and length
COMMENT_LINE $590D Collision vs enemies
COMMENT_LINE $5917 mPointVsRect HeadW,HeadH,zussWalkerHeadMiss,Zzap_ssShotX,Zzap_ssShotY, 0,2
COMMENT_LINE $5943 walker has been hit by head-shot
COMMENT_LINE $5992 lda #1
COMMENT_LINE $5992 sta weWalkerActive,x        ;start death animation
COMMENT $5992 -1 becomes 1, start death animation
COMMENT_LINE $5997 if ('IndexReg' != '0') && ('IndexReg' != 'b')
COMMENT $59A8 SetDifficulty overwrites U
COMMENT_LINE $59AF Remove shot
COMMENT_LINE $59BC *****************
COMMENT_LINE $59C3 mDecLocals 0,0,0
COMMENT_LINE $59C3 Read input from joystick.
COMMENT_LINE $59C3 Update ship velocity values and move ship.
COMMENT_LINE $59C3 Emit new shot if fired.
COMMENT_LINE $59C3 DP must be D0
COMMENT_LINE $59DB MoveUp
COMMENT_LINE $59DF decb
COMMENT_LINE $59E6 incb
COMMENT_LINE $59E9 dampen when centered
COMMENT $59EF eat next byte
COMMENT_LINE $59F3 asrb
COMMENT_LINE $59F3 asrb
COMMENT_LINE $59F3 asrb
COMMENT_LINE $5A26 inc Zzap_ShipVelocY ;todo more gravity?
COMMENT_LINE $5A26 lda LoopCounterLow
COMMENT_LINE $5A26 anda #1
COMMENT_LINE $5A26 beq Zzap_csLRMoveFinished
COMMENT_LINE $5A42 stb Zzap_ShipDir
COMMENT $5A4B dampen veloc x
COMMENT $5A52 eat next byte
COMMENT_LINE $5A60 Find free
COMMENT $5A6E No free found
COMMENT_LINE $5A70 lda #1
COMMENT_LINE $5A82 mEmitSound WalkerDestroyedSoundId
COMMENT_LINE $5A8B Move ship X
COMMENT_LINE $5AA1 Update view coordinate
COMMENT_LINE $5AA1 Add ship velocity and test for world ends
COMMENT_LINE $5AB5 slide viewx to left or right edge depending on ship direction
COMMENT_LINE $5AE1 Collision ship vs walkers
COMMENT_LINE $5AEC mPointVsRect HeadW,HeadH,zcsWalkerHeadMiss,0,2, 0,2
COMMENT_LINE $5B4E mFreeLocals
COMMENT_LINE $5B4F Update clip-region used by drawenemies
COMMENT_LINE $5B60 clip walkers at floor level, makes their death-animation looks nice
COMMENT_LINE $5B6B *****************
COMMENT $5B6B skip if already damaged
COMMENT_LINE $5B89 *****************
COMMENT_LINE $5B89 Draw background mountain.
COMMENT_LINE $5B89 The mountain is drawn twice at different height and intensity.
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5B89 declare buffer
COMMENT_LINE $5B89 5 W is max, add more if needed
COMMENT_LINE $5B8B DP must be D0
COMMENT $5B8B if argument exists, load into a, otherwise use current a
COMMENT_LINE $5B8D sta   $C827
COMMENT_LINE $5B96 Calc start in ycoord table.
COMMENT_LINE $5BAD asrb
COMMENT_LINE $5BAD asrb
COMMENT $5BBF Nr of segments to draw
COMMENT $5BC7 X increment
COMMENT_LINE $5BCF leax  2,x
COMMENT_LINE $5BCF Ev. m�ste flera nop l�ggas till h�r f�r att kompensera att f�reg�ende rad
COMMENT_LINE $5BCF kommenterats bort
COMMENT_LINE $5BCF nop
COMMENT_LINE $5BE0 nop
COMMENT $5BE5 keep index within table-size
COMMENT_LINE $5BEB ****
COMMENT $5BEB Reset pen
COMMENT $5BEE if argument exists, load into a, otherwise use current a
COMMENT_LINE $5BF0 sta   $C827
COMMENT_LINE $5C03 asrb
COMMENT_LINE $5C03 asrb
COMMENT_LINE $5C03 asrb
COMMENT_LINE $5C16 mSetScale $3f
COMMENT $5C16 Nr of segments to draw
COMMENT $5C20 X increment
COMMENT_LINE $5C26 leax  2,x
COMMENT_LINE $5C26 Ev. m�ste flera nop l�ggas till h�r f�r att kompensera att f�reg�ende rad
COMMENT_LINE $5C26 kommenterats bort
COMMENT_LINE $5C26 nop
COMMENT_LINE $5C37 nop
COMMENT $5C3C keep index within table-size
COMMENT_LINE $5C45 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5C45 declare buffer
COMMENT_LINE $5C45 5 W is max, add more if needed
COMMENT_LINE $5C47 loop walkers
COMMENT_LINE $5C47 move right
COMMENT_LINE $5C47 game over if reached right edge
COMMENT_LINE $5C47 keep track of walker with lowest x
COMMENT_LINE $5C47 if lowest x<threshold
COMMENT_LINE $5C47 emit new walker at left edge
COMMENT_LINE $5C4B lda zcWalkerSpeedMask,y
COMMENT_LINE $5C4B anda FrameCounter
COMMENT_LINE $5C4B bne zuwNoPulse
COMMENT_LINE $5C4B lda LoopCounterLow
COMMENT_LINE $5C4B anda #7
COMMENT_LINE $5C4B bne zuwNoPulse
COMMENT_LINE $5C4B mEmitSound GunFireSoundId
COMMENT_LINE $5C4B zuwNoPulse:
COMMENT $5C78 call rom
COMMENT_LINE $5C7F Range: 1..8
COMMENT $5C86 high signed value
COMMENT $5C9D remove when fallen under floor
COMMENT_LINE $5CA6 Move X-coord
COMMENT_LINE $5CC1 Update Y
COMMENT_LINE $5CD4 emit new if free and minx<threshold
COMMENT $5D0D Wait for screen sync
COMMENT_LINE $5D10 DP is now D0
COMMENT_LINE $5D22 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5D22 declare buffer
COMMENT_LINE $5D22 5 W is max, add more if needed
COMMENT_LINE $5D25 loop enemies
COMMENT_LINE $5D25 check if on screen
COMMENT_LINE $5D25 clip and draw
COMMENT_LINE $5D25 break (only one can be visible at a time)
COMMENT_LINE $5D25 No walker is visible as default
COMMENT_LINE $5D4C Store info about visible walker, if not dying
COMMENT_LINE $0000 Avoid extra byte for offsets>$f
COMMENT_LINE $0000 Accumulate offset to x, reset offset
COMMENT $5D65 intensity
COMMENT $5D6B call rom
COMMENT_LINE $5D70 Leg and head animation
COMMENT $5D81 write result buffer
COMMENT_LINE $5D86 Avoid extra byte for offsets>$f
COMMENT_LINE $5D86 Accumulate offset to x, reset offset
COMMENT $5D86 write top-left coords
COMMENT_LINE $5D8D Avoid extra byte for offsets>$f
COMMENT_LINE $5D8D Accumulate offset to x, reset offset
COMMENT $5D8D also store visible base coords for hittests
COMMENT_LINE $5D9A Avoid extra byte for offsets>$f
COMMENT_LINE $5D9A Accumulate offset to x, reset offset
COMMENT $5D9A also store visible base coords for hittests
COMMENT_LINE $5DA0 Linecount
COMMENT_LINE $5DA4 Base top
COMMENT_LINE $5DAD Avoid extra byte for offsets>$f
COMMENT_LINE $5DAD Accumulate offset to x, reset offset
COMMENT_LINE $5DB2 Avoid extra byte for offsets>$f
COMMENT_LINE $5DB2 Accumulate offset to x, reset offset
COMMENT_LINE $5DBB Avoid extra byte for offsets>$f
COMMENT_LINE $5DBB Accumulate offset to x, reset offset
COMMENT_LINE $5DC2 Avoid extra byte for offsets>$f
COMMENT_LINE $5DC2 Accumulate offset to x, reset offset
COMMENT_LINE $5DCB Avoid extra byte for offsets>$f
COMMENT_LINE $5DCB Accumulate offset to x, reset offset
COMMENT_LINE $5DD0 Avoid extra byte for offsets>$f
COMMENT_LINE $5DD0 Accumulate offset to x, reset offset
COMMENT_LINE $0000 Base lower
COMMENT_LINE $5DD9 Avoid extra byte for offsets>$f
COMMENT_LINE $5DD9 Accumulate offset to x, reset offset
COMMENT_LINE $5DDE Avoid extra byte for offsets>$f
COMMENT_LINE $5DDE Accumulate offset to x, reset offset
COMMENT_LINE $5DE7 Avoid extra byte for offsets>$f
COMMENT_LINE $5DE7 Accumulate offset to x, reset offset
COMMENT_LINE $5DEE Avoid extra byte for offsets>$f
COMMENT_LINE $5DEE Accumulate offset to x, reset offset
COMMENT_LINE $5DF7 Avoid extra byte for offsets>$f
COMMENT_LINE $5DF7 Accumulate offset to x, reset offset
COMMENT_LINE $5DFC Avoid extra byte for offsets>$f
COMMENT_LINE $5DFC Accumulate offset to x, reset offset
COMMENT_LINE $0000 Legs
COMMENT_LINE $5DFC Left leg
COMMENT_LINE $5E05 Avoid extra byte for offsets>$f
COMMENT_LINE $5E05 Accumulate offset to x, reset offset
COMMENT_LINE $5E0C Avoid extra byte for offsets>$f
COMMENT_LINE $5E0C Accumulate offset to x, reset offset
COMMENT_LINE $5E17 Avoid extra byte for offsets>$f
COMMENT_LINE $5E17 Accumulate offset to x, reset offset
COMMENT_LINE $5E20 Avoid extra byte for offsets>$f
COMMENT_LINE $5E20 Accumulate offset to x, reset offset
COMMENT_LINE $5E29 Avoid extra byte for offsets>$f
COMMENT_LINE $5E29 Accumulate offset to x, reset offset
COMMENT_LINE $5E30 Avoid extra byte for offsets>$f
COMMENT_LINE $5E30 Accumulate offset to x, reset offset
COMMENT_LINE $0000 Right leg
COMMENT_LINE $5E3F Avoid extra byte for offsets>$f
COMMENT_LINE $5E3F Accumulate offset to x, reset offset
COMMENT_LINE $5E46 Avoid extra byte for offsets>$f
COMMENT_LINE $5E46 Accumulate offset to x, reset offset
COMMENT_LINE $5E51 Avoid extra byte for offsets>$f
COMMENT_LINE $5E51 Accumulate offset to x, reset offset
COMMENT_LINE $5E5A Avoid extra byte for offsets>$f
COMMENT_LINE $5E5A Accumulate offset to x, reset offset
COMMENT_LINE $5E63 Avoid extra byte for offsets>$f
COMMENT_LINE $5E63 Accumulate offset to x, reset offset
COMMENT_LINE $5E6A Avoid extra byte for offsets>$f
COMMENT_LINE $5E6A Accumulate offset to x, reset offset
COMMENT $5E6C intensity
COMMENT_LINE $5E71 Neck and head are drawn separately
COMMENT_LINE $5E71 This is needed because a single clipdraw call only handles x +- 128 and
COMMENT_LINE $5E71 total width of a walker is >128
COMMENT_LINE $5E71 Head
COMMENT $5E77 animate head Y
COMMENT $5E7D write top-left coords, offset x with BaseW, offset y with dist
COMMENT $5E82 add bounce
COMMENT $5E84 add an offset from base top
COMMENT_LINE $5E88 Avoid extra byte for offsets>$f
COMMENT_LINE $5E88 Accumulate offset to x, reset offset
COMMENT $5E8A also store visible head center coords for hittests
COMMENT_LINE $5E97 Avoid extra byte for offsets>$f
COMMENT_LINE $5E97 Accumulate offset to x, reset offset
COMMENT $5E9A also store visible head center coords for hittests
COMMENT_LINE $5E9D Linecount for head
COMMENT_LINE $5EAA Avoid extra byte for offsets>$f
COMMENT_LINE $5EAA Accumulate offset to x, reset offset
COMMENT_LINE $5EAF Avoid extra byte for offsets>$f
COMMENT_LINE $5EAF Accumulate offset to x, reset offset
COMMENT_LINE $5EBA Avoid extra byte for offsets>$f
COMMENT_LINE $5EBA Accumulate offset to x, reset offset
COMMENT_LINE $5EC2 Avoid extra byte for offsets>$f
COMMENT_LINE $5EC2 Accumulate offset to x, reset offset
COMMENT_LINE $5ECA Avoid extra byte for offsets>$f
COMMENT_LINE $5ECA Accumulate offset to x, reset offset
COMMENT_LINE $5ECE Avoid extra byte for offsets>$f
COMMENT_LINE $5ECE Accumulate offset to x, reset offset
COMMENT_LINE $5ED6 Avoid extra byte for offsets>$f
COMMENT_LINE $5ED6 Accumulate offset to x, reset offset
COMMENT_LINE $5EDB Avoid extra byte for offsets>$f
COMMENT_LINE $5EDB Accumulate offset to x, reset offset
COMMENT_LINE $5EE4 Avoid extra byte for offsets>$f
COMMENT_LINE $5EE4 Accumulate offset to x, reset offset
COMMENT_LINE $5EEB Avoid extra byte for offsets>$f
COMMENT_LINE $5EEB Accumulate offset to x, reset offset
COMMENT $5EED intensity
COMMENT_LINE $5EF6 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $5EF6 declare buffer
COMMENT_LINE $5EF6 5 W is max, add more if needed
COMMENT_LINE $5EF8 DP must be D0
COMMENT $5EF8 if argument exists, load into a, otherwise use current a
COMMENT_LINE $5EFA sta   $C827
COMMENT_LINE $5F03 Draw base
COMMENT_LINE $5F15 Draw floor
COMMENT_LINE $5F2D scale $ff to draw full width
COMMENT $5F2D if argument exists, load into a, otherwise use current a
COMMENT_LINE $5F3A Thrust title screen
COMMENT_LINE $5F3A Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $0000 *****************
COMMENT_LINE $5F3A 7 B is max, add more if needed
COMMENT $5F3A declare buffer
COMMENT_LINE $5F3A 5 W is max, add more if needed
COMMENT_LINE $5F5C test if bonusgame is enabled
COMMENT $5F7D 0
COMMENT $5F80 1
COMMENT $5F83 2
COMMENT_LINE $5F85 ModeCredits          ;3
COMMENT_LINE $5F91 Switch to logo + volume mode
COMMENT_LINE $5F99 Mode highscores
COMMENT_LINE $5FA0 Switch to credits mode
COMMENT_LINE $5FB6 Switch mode to highscores
COMMENT_LINE $5FC2 Switch to level mode
COMMENT $5FC8 call init game, keep values for random and clock
COMMENT $5FCB call rom
COMMENT $5FDD center view around pod
COMMENT_LINE $6043 lda #-116
COMMENT_LINE $6057 Text_Print_Intensity:   ;x=string pointer, y screen coords, a intensity
COMMENT $606D test if music has set demogame (music end)
COMMENT_LINE $6077 Exit with key pressed in A (0=button1 etc)
COMMENT_LINE $6077 need to clear soundworks-buffer because updatesound is called from
COMMENT_LINE $6077 textwait, and that memory may have been written by music
COMMENT $60A5 Menu return selected GameMode
COMMENT_LINE $60D1 *****************
COMMENT_LINE $60D1 text_write med fixed list
COMMENT_LINE $60D1 text_write med scores
COMMENT_LINE $60D1 stackspace
COMMENT_LINE $60D1 x+y sine offset
COMMENT_LINE $60D1 display 'highscores'
COMMENT_LINE $60D1 x=gamemodestringlist
COMMENT_LINE $60D1 u=highscorelist
COMMENT_LINE $60D1 get start sineoffset
COMMENT_LINE $60D1 loop gamemodes
COMMENT_LINE $60D1 copy to stack gamemodestring + highscore + extra '0'
COMMENT_LINE $60D1 calc x,y with sineoffset
COMMENT_LINE $60D1 call displaystring
COMMENT_LINE $60D1 inc sineoffset
COMMENT_LINE $60D1 = viewy till -255
COMMENT_LINE $60D1 call drawstars
COMMENT_LINE $60D1 Stars and 'highscore' string causes framedrop and slows the music down...
COMMENT_LINE $60D1 Skip them for now.
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $60D1 declare buffer
COMMENT_LINE $60D1 5 W is max, add more if needed
COMMENT_LINE $60D4 ldx #HighscoreString
COMMENT_LINE $60D4 mCombine d,80,-40
COMMENT_LINE $60D4 jsr Text_Print
COMMENT_LINE $6100 jsr Text_CopyString
COMMENT_LINE $6106 mCombine d,'0',$80
COMMENT_LINE $6106 std 18,x
COMMENT $611C move y
COMMENT_LINE $613A ldd #-255
COMMENT_LINE $613A std ViewY
COMMENT_LINE $613A jsr DrawStars
COMMENT_LINE $613E HighscoreString: db 'HIGHSCORES',$80
COMMENT_LINE $613E *****************
COMMENT_LINE $614D *****************
COMMENT_LINE $615E *****************
COMMENT_LINE $6181 Hidden cheat menu
COMMENT_LINE $6193 *****************
COMMENT_LINE $61BB *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $61BB declare buffer
COMMENT_LINE $61BB 5 W is max, add more if needed
COMMENT_LINE $61DF *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $61DF declare buffer
COMMENT_LINE $61DF 5 W is max, add more if needed
COMMENT $61E2 start x
COMMENT $61F2 fine (lo)
COMMENT $61F4 course (hi)
COMMENT $61FF Reset pen
COMMENT $6202 if argument exists, load into a, otherwise use current a
COMMENT $6208 y
COMMENT_LINE $620A mMove_pen_d
COMMENT_LINE $620D mMove_pen_d_Quick
COMMENT_LINE $620D jsr move_pen7f_to_d           ;Set pen position to value of d register
COMMENT $620D if argument exists, load into a, otherwise use current a
COMMENT_LINE $620F sta   $C827
COMMENT $621B Nr of vectors in list
COMMENT $621D Scale
COMMENT $6221 Draw list
COMMENT_LINE $6232 *****************
COMMENT_LINE $6232 att testa
COMMENT_LINE $6232 g�r verktyg som genererar kod ifr�n bmp
COMMENT_LINE $6232 mPattern, mRow
COMMENT_LINE $6232 PacmanLines: dw Pacman_DrawLine01,Pacman_DrawLine02
COMMENT_LINE $6232 subs anropas av generell drawrutin
COMMENT_LINE $6232 generar intensity change vid behov
COMMENT_LINE $6232 dela upp line i tv� horizontella, d� kan scale $7f anv�ndas
COMMENT_LINE $6232 kan man bumpa upp x-length innan den �r klar? d� blir det inget glapp.
COMMENT_LINE $6232 l�s igenom "SHIFT REGISTER OPERATION" i vectrex.txt
COMMENT_LINE $6232 skriv $18 till 0B f�r att st�nga av andra interrupt
COMMENT_LINE $6232 se rom DISPLAY_STRING
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $6232 declare buffer
COMMENT_LINE $6232 5 W is max, add more if needed
COMMENT $6237 load repeat
COMMENT $623D for a=0 to height-1
COMMENT_LINE $6240 Set intensity
COMMENT_LINE $6240 lda #$60
COMMENT_LINE $6240 Increase/decrease intensity for this line
COMMENT $6246 �ka varannan rad, minska varannan
COMMENT $6254 if argument exists, load into a, otherwise use current a
COMMENT_LINE $6254 sta   $C827
COMMENT $6260 loop twice
COMMENT_LINE $6264 Scale 64 for positioning, otherwise y skips every other line
COMMENT $6264 if argument exists, load into a, otherwise use current a
COMMENT $626A set y to vertical center
COMMENT_LINE $6287 PF33B: lda   #0x04
COMMENT_LINE $6287 PF341: deca
COMMENT_LINE $6287 bne   PF341
COMMENT_LINE $6287 to reach left edge, another x move is needed. loop to avoid inlining twice.
COMMENT_LINE $628E Max scale for drawing
COMMENT $628E if argument exists, load into a, otherwise use current a
COMMENT $6294 line length
COMMENT $6296 init hw for line drawing
COMMENT_LINE $62A3 rom inner loop
COMMENT_LINE $62A3 37c0 :    PF4C7:
COMMENT_LINE $62A3 37c0 : a686             [ 5]   lda   a,x
COMMENT_LINE $62A3 37c2 : 970a             [ 4]   sta   <0x0A
COMMENT_LINE $62A3 37c4 : a6c0             [ 6]   lda   ,u+
COMMENT_LINE $62A3 37c6 : 2af8             [ 3]   bpl   PF4C7
COMMENT_LINE $62A3 Total 18 cycles
COMMENT $62A5 6
COMMENT $62A7 4
COMMENT $62A9 3
COMMENT $62AB 2
COMMENT $62AC 3
COMMENT $62AE wait for the last pattern in line to appear before clearing
COMMENT $62AF clear pattern
COMMENT_LINE $62B1 No need to wait, line is drawn
COMMENT_LINE $62B1 **todo: keep this delay if possible, MESS cannot display logo otherwise
COMMENT_LINE $62B1 ldb   #0x40                   ;wait timer finish
COMMENT_LINE $62B1 dbiWait
COMMENT_LINE $62B1 bitb  <$0D
COMMENT_LINE $62B1 beq   dbiWait
COMMENT $62B1 next row
COMMENT $62C8 move logo down
COMMENT_LINE $62D6 custom typsnitt d�r varje bokstav �r tv� tecken (=16 pixels)
COMMENT_LINE $62D6 scrolla pixels genom att flytta x och maska f�rsta/sista pattern byte
COMMENT_LINE $62D6 skapa str�ng p� stacken
COMMENT_LINE $62D6 skriv start and-mask
COMMENT_LINE $62D6 get char
COMMENT_LINE $62D6 konvertera till tv� tecken
COMMENT_LINE $62D6 eller ett tecken tv� pekare
COMMENT_LINE $62D6 x=fonttable1, y=fonttable2
COMMENT_LINE $62D6 om loopcounterlow 8..15
COMMENT_LINE $62D6 b�rja med y �ka 1, x sen y sen �ka 1, sluta med x
COMMENT_LINE $62D6 0..7
COMMENT_LINE $62D6 x sen y sen �ka 1
COMMENT_LINE $62D6 b�rja med vanlig loop, dista x 0..15
COMMENT_LINE $62D6 g�r hela draw till macro, anropa tv� ggr olika konfad
COMMENT_LINE $62D6 skriv till stack
COMMENT_LINE $62D6 ev loopa text
COMMENT_LINE $62D6 skriv slut and-mask
COMMENT_LINE $62D6 display_rom
COMMENT_LINE $62D6 unroll char-loop
COMMENT_LINE $62D6 g�r till macro och anropa s� m�nga ggr som antal samtidigt synliga tecken
COMMENT_LINE $62D6 h�mta fatfont.dat
COMMENT_LINE $62D6 r�kna hur m�nga tecken den inneh�ller
COMMENT_LINE $62D6 writebyte(char,value)
COMMENT_LINE $62D6 *****************
COMMENT_LINE $0000 7 B is max, add more if needed
COMMENT $62D6 declare buffer
COMMENT_LINE $62D6 5 W is max, add more if needed
COMMENT_LINE $62E5 cmpx #CreditsTextEnd - Chars
COMMENT_LINE $62E5 bne dcsNoWrap
COMMENT_LINE $62E5 ldx #CreditsText
COMMENT_LINE $62E5 dcsNoWrap:
COMMENT_LINE $62EC FC = one space line, FB = one every 4 lines, FD = no space
COMMENT $62EF Specify height and width
COMMENT $62F5 if argument exists, load into a, otherwise use current a
COMMENT $6304 if argument exists, load into a, otherwise use current a
COMMENT_LINE $6304 sta   $C827
COMMENT_LINE $630D index,freq,amp,first
COMMENT_LINE $63ED Copied from ROM: display_string
COMMENT_LINE $63ED Modified to draw 16*16 pixel font
COMMENT $63ED /* Save pointer to start of string. */
COMMENT_LINE $63F0 ldx   #0xF9D4
COMMENT_LINE $63FE ldx   #0xF9D4
COMMENT $63FE wait 3 cycles
COMMENT $6413 /* Get the string width. */
COMMENT_LINE $6420 [ 3]        bra   PF4CB
COMMENT_LINE $6420 [ 5] PF4C7: lda   a,x
COMMENT_LINE $6420 [ 4]        sta   <0x0A
COMMENT_LINE $6420 [ 6] PF4CB: lda   ,u+
COMMENT_LINE $6420 [ 3]        bpl   PF4C7
COMMENT $6420 wait 3 cycles
COMMENT $0000 wait 3 cycles
COMMENT $0000 wait 3 cycles
COMMENT $0000 wait 6 cycles
COMMENT_LINE $0000 **todo beh�vs unroll? om inte, byt tillbaka till loop
COMMENT $6424 wait 3 cycles
COMMENT $642A wait 3 cycles
COMMENT $642C wait 6 cycles
COMMENT $6434 wait 3 cycles
COMMENT $643A wait 3 cycles
COMMENT $643C wait 6 cycles
COMMENT $6444 wait 3 cycles
COMMENT $644A wait 3 cycles
COMMENT $644C wait 6 cycles
COMMENT $6454 wait 3 cycles
COMMENT $645A wait 3 cycles
COMMENT $645C wait 6 cycles
COMMENT $6464 wait 3 cycles
COMMENT $646A wait 3 cycles
COMMENT $646C wait 6 cycles
COMMENT $6474 wait 3 cycles
COMMENT $647A wait 3 cycles
COMMENT $647C wait 6 cycles
COMMENT $6484 wait 3 cycles
COMMENT $648A wait 3 cycles
COMMENT $648C wait 6 cycles
COMMENT $6494 wait 3 cycles
COMMENT $649A wait 3 cycles
COMMENT $649C wait 6 cycles
COMMENT $64A4 wait 3 cycles
COMMENT $64AA wait 3 cycles
COMMENT $64AC wait 6 cycles
COMMENT $64B4 wait 3 cycles
COMMENT $64BA wait 3 cycles
COMMENT $64BC wait 6 cycles
COMMENT $64C4 wait 3 cycles
COMMENT $64CA wait 3 cycles
COMMENT $64CC wait 6 cycles
COMMENT $64D4 wait 3 cycles
COMMENT $64DA wait 3 cycles
COMMENT $64DC wait 6 cycles
COMMENT $64E4 wait 3 cycles
COMMENT $64EA wait 3 cycles
COMMENT $64EC wait 6 cycles
COMMENT $64F4 wait 3 cycles
COMMENT $64FA wait 3 cycles
COMMENT $64FC wait 6 cycles
COMMENT $6504 wait 3 cycles
COMMENT $650A wait 3 cycles
COMMENT $650C wait 6 cycles
COMMENT $6512 6 cycles, increase u to printed chars + 1
COMMENT $6514 wait 3 cycles
COMMENT_LINE $6520 cmpx  #0xFBB4  ;/* If not at end of char table, then */
COMMENT $6523 /* proceed to next row of pixels.    */
COMMENT_LINE $6525 leax  0x50,x     ;add to font definition pointer, $50=one row
COMMENT $652D /* Point back to first character. */
COMMENT $6530 waitloop, depending on string length
COMMENT_LINE $6533 wait*2 because we now use width*2 font
COMMENT $6544 height
COMMENT_LINE $6561 jmp reset0ref
COMMENT_LINE $6561 todo: many unused letters, save memory by having a char-translation table?
COMMENT_LINE $6561 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,96,224
COMMENT_LINE $6903 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,6,14
COMMENT_LINE $6CA5 thrust 64*28
COMMENT_LINE $6CA5 repeatvalue, bitmap
COMMENT_LINE $6D2C 128 values, range -63 -- +63
COMMENT_LINE $6DAC Music_RAM_Size = 400                  ;Reserve memory for music player
COMMENT_LINE $6DAC Music player
COMMENT_LINE $6DAC Copyright (C) 2004  Ville Krumlinde
COMMENT_LINE $6DAC Translated from original 68000 code and music data by Rob Hubbard
COMMENT_LINE $6DAC -----------------
COMMENT_LINE $6DAC Vectrex RAM section
COMMENT_LINE $C880 Uncomment to make music use top of ram
COMMENT_LINE $CA1E Work memory for soundplayer, data is copied from rom into these addresses in init
COMMENT_LINE $6DAC ----------------------
COMMENT_LINE $6DAC Music player
COMMENT_LINE $6DAF 6809: copy work-data from rom to ram
COMMENT $6DB2 offset 46 is the first one used, save rom-space
COMMENT_LINE $6DDB LEA LA5_BASE,A5
COMMENT_LINE $6DDB CLR.W $2E(A5)
COMMENT_LINE $6DDB MOVEQ #$D,D1
COMMENT_LINE $6DDB L059100:
COMMENT_LINE $6DDB MOVE.B D1,$FF8800
COMMENT_LINE $6DDB CLR.B $FF8802
COMMENT_LINE $6DDB DBRA D1,L059100
COMMENT_LINE $6DE8 MOVE.B #7,$FF8800
COMMENT_LINE $6DE8 MOVE.B #-1,$FF8802
COMMENT_LINE $6DE8 MOVE.B #-1,$41(A5)
COMMENT_LINE $6DE8 NOP
COMMENT_LINE $6DE8 LEA LA5_BASE,A5
COMMENT_LINE $6DE8 CLR.W $2E(A5)
COMMENT_LINE $6DE8 set mixer register
COMMENT $6DEA init mixer register, notes off, io enabled
COMMENT_LINE $6DF6 MOVE.B #-8,$38(A5)
COMMENT_LINE $6DF6 LEA L0596E6,A1
COMMENT_LINE $6DF6 MULU #$C,D0
COMMENT_LINE $6DF6 CLR.L D0
COMMENT_LINE $6DF6 MOVEQ #2,D7
COMMENT $6DFE nr of channels
COMMENT_LINE $6E02 LEA L059818,A0
COMMENT_LINE $6E02 MOVEA.L A0,A2
COMMENT_LINE $6E02 ADDA.L 0(A0,D0.W),A2
COMMENT_LINE $6E02 MOVE.L A2,8(A1)
COMMENT_LINE $6E02 MOVE.W #1,$28(A1)
COMMENT_LINE $6E02 CLR.W 0(A1)
COMMENT_LINE $6E02 CLR.B $5C(A1)
COMMENT_LINE $6E02 MOVE.L #4,$C(A1)
COMMENT_LINE $6E27 set up pointer to first pattern
COMMENT_LINE $6E27 LEA L059818,A3
COMMENT_LINE $6E27 ADDA.L (A2),A3
COMMENT_LINE $6E27 MOVE.L A3,4(A1)
COMMENT_LINE $6E32 ADDQ.W #4,D0
COMMENT_LINE $6E32 ADDA.L #$66,A1         ;+102 = next channel data
COMMENT_LINE $6E32 DBRA D7,L059142
COMMENT_LINE $6E3D MOVE.W #1,$32(A5)
COMMENT_LINE $6E3D ST.B $2E(A5)
COMMENT_LINE $6E4C this label is only used to jump directly to rts from update
COMMENT_LINE $6E4C L059186:
COMMENT_LINE $6E4C RTS
COMMENT_LINE $6E4D LEA LA5_BASE,A5
COMMENT_LINE $6E4D TST.W $2E(A5)
COMMENT_LINE $6E4D BEQ.S L059186
COMMENT_LINE $6E58 MOVE.B $34(A5),D0
COMMENT_LINE $6E58 MOVE.B D0,$36(A5)
COMMENT_LINE $6E5E SUBQ.W #1,$32(A5)
COMMENT_LINE $6E5E BNE.S L0591C0
COMMENT_LINE $6E69 LEA L0596E6,A1
COMMENT_LINE $6E69 BSR L059228
COMMENT_LINE $6E69 LEA L05974C,A1
COMMENT_LINE $6E69 BSR L059228
COMMENT_LINE $6E69 LEA L0597B2,A1
COMMENT_LINE $6E69 BSR L059228
COMMENT_LINE $6E7B MOVE.W $30(A5),D0
COMMENT_LINE $6E7B MOVE.W D0,$32(A5)
COMMENT_LINE $6E85 L059418 returns three bytes, two bytes in d5, one byte in d4
COMMENT_LINE $6E85 d5 holds channel pitch hi/lo, d4 holds channel volume
COMMENT_LINE $6E85 these values are written to LA5_BASE register buffer after each call
COMMENT_LINE $6E85 LEA L0596E6,A1
COMMENT_LINE $6E85 BSR L059418
COMMENT_LINE $6E85 MOVE.B D5,$3A(A5)
COMMENT_LINE $6E85 LSR.W #8,D5
COMMENT_LINE $6E85 MOVE.B D5,$3B(A5)
COMMENT_LINE $6E85 MOVE.B D4,$42(A5)
COMMENT_LINE $6E9B ldb #0        ;uncomment to mute channel 1
COMMENT_LINE $6E9E LEA L05974C,A1
COMMENT_LINE $6E9E BSR L059418
COMMENT_LINE $6E9E MOVE.B D5,$3C(A5)
COMMENT_LINE $6E9E LSR.W #8,D5
COMMENT_LINE $6E9E MOVE.B D5,$3D(A5)
COMMENT_LINE $6E9E MOVE.B D4,$43(A5)
COMMENT_LINE $6EB4 ldb #0        ;uncomment to mute channel 2
COMMENT_LINE $6EB7 LEA L0597B2,A1
COMMENT_LINE $6EB7 BSR L059418
COMMENT_LINE $6EB7 MOVE.B D5,$3E(A5)
COMMENT_LINE $6EB7 LSR.W #8,D5
COMMENT_LINE $6EB7 MOVE.B D5,$3F(A5)
COMMENT_LINE $6EB7 MOVE.B D4,$44(A5)
COMMENT_LINE $6ECD ldb #0        ;uncomment to mute channel 3
COMMENT_LINE $6ED0 MOVE.B $36(A5),D0
COMMENT_LINE $6ED0 MOVE.B D0,$40(A5)
COMMENT $6ED7 noise pitch
COMMENT_LINE $6EDA **debug, force mixer register
COMMENT_LINE $6EDA ldb $41,y
COMMENT_LINE $6EDA andb #%00000111 ;keep tone
COMMENT_LINE $6EDA orb  #%00010000 ;noise off
COMMENT_LINE $6EDA stb $41,y
COMMENT_LINE $6EDA write all sound chip registers at once
COMMENT_LINE $6EDA MOVEQ #$D,D1
COMMENT_LINE $6EDA MOVEA.L A5,A0
COMMENT_LINE $6EDA ADDA.L #$48,A0  ;a5_offset
COMMENT_LINE $6EDA L059214:
COMMENT_LINE $6EDA MOVE.B D1,$FF8800
COMMENT_LINE $6EDA MOVE.B -(A0),D0
COMMENT_LINE $6EDA MOVE.B D0,$FF8802
COMMENT_LINE $6EDA DBRA D1,L059214
COMMENT_LINE $6EEB RTS
COMMENT_LINE $6EEC First update channel routine
COMMENT_LINE $6EEC Read pattern data and updates channel info at x/A1
COMMENT_LINE $6EEC x holds pointer to current channel data (A1)
COMMENT_LINE $6EEC SUBQ.W #1,$28(A1)
COMMENT_LINE $6EEC BNE L059282
COMMENT_LINE $6EF7 CLR.W 0(A1)
COMMENT_LINE $6EF7 BCLR #0,$60(A1)
COMMENT_LINE $6F04 read data from current pattern
COMMENT_LINE $6F04 this is a variable length structure
COMMENT_LINE $6F04 MOVEA.L 4(A1),A6
COMMENT_LINE $6F04 L05923E:
COMMENT_LINE $6F04 MOVE.B (A6)+,D0
COMMENT_LINE $6F04 EXT.W D0
COMMENT_LINE $6F04 BMI L0592A0
COMMENT_LINE $6F0B MOVE.W D0,$30(A1)
COMMENT_LINE $6F0B BTST #4,0(A1)
COMMENT_LINE $6F0B BNE.S L059276
COMMENT_LINE $6F14 MOVE.B $4C(A1),$34(A1)
COMMENT_LINE $6F1A BSET #5,0(A1)
COMMENT_LINE $6F1A BSET #6,0(A1)
COMMENT_LINE $6F1A BCLR #4,0(A1)
COMMENT_LINE $6F22 MOVE.B $38(A1),$40(A1)
COMMENT_LINE $6F22 MOVE.B $44(A1),$48(A1)
COMMENT_LINE $6F2E MOVE.W $2C(A1),$28(A1)
COMMENT_LINE $6F2E MOVE.L A6,4(A1)
COMMENT $6F34 write back pattern pointer
COMMENT_LINE $6F36 RTS
COMMENT_LINE $6F37 $28(a1) > 0
COMMENT_LINE $6F37 x holds pointer to current channel data (A1)
COMMENT_LINE $6F37 BTST #3,0(A1)
COMMENT_LINE $6F37 BEQ L059186
COMMENT_LINE $6F37 BTST #7,0(A1)
COMMENT_LINE $6F37 BEQ.S L05929A
COMMENT_LINE $6F41 ADDQ.W #1,$30(A1)
COMMENT_LINE $6F41 RTS
COMMENT_LINE $6F4B SUBQ.W #1,$30(A1)
COMMENT_LINE $6F4B RTS
COMMENT_LINE $6F55 negative value in pattern: register d/D0
COMMENT_LINE $6F55 x holds pointer to current channel data (A1)
COMMENT_LINE $6F55 CMP.B #-$49,D0
COMMENT_LINE $6F55 BLS L059306
COMMENT_LINE $6F59 add until overflow (d becomes positive)
COMMENT_LINE $6F59 ADDI.W #$20,D0
COMMENT_LINE $6F59 BCS L0592E2
COMMENT_LINE $6F59 ADDI.W #$10,D0
COMMENT_LINE $6F59 BCS L0592EC
COMMENT_LINE $6F59 ADDI.W #$10,D0
COMMENT_LINE $6F59 BCC L0592D6
COMMENT_LINE $6F68 d is index to L059642-table
COMMENT_LINE $6F68 LEA L059642,A0
COMMENT_LINE $6F68 LSL.W #2,D0
COMMENT_LINE $6F68 ADDA.L 0(A0,D0.W),A0
COMMENT $6F6C *2
COMMENT_LINE $6F71 MOVE.L A0,$18(A1)
COMMENT_LINE $6F71 MOVE.L A0,$14(A1)
COMMENT_LINE $6F71 BRA L05923E
COMMENT_LINE $6F7B ADDI.W #9,D0
COMMENT_LINE $6F7B MOVE.W D0,$30(A5)
COMMENT_LINE $6F7B BRA L05923E
COMMENT_LINE $6F88 ADDQ.W #1,D0
COMMENT_LINE $6F88 MOVE.W D0,$2C(A1)
COMMENT_LINE $6F88 BRA L05923E
COMMENT_LINE $6F91 MOVE.B D0,$4C(A1)
COMMENT_LINE $6F91 MOVE.B (A6)+,D0
COMMENT_LINE $6F91 MOVE.B D0,$38(A1)
COMMENT_LINE $6F91 MOVE.B (A6)+,D0
COMMENT_LINE $6F91 MOVE.B D0,$3C(A1)
COMMENT_LINE $6F91 MOVE.B (A6)+,D0
COMMENT_LINE $6F91 MOVE.B D0,$44(A1)
COMMENT_LINE $6F91 BRA L05923E
COMMENT_LINE $6FA6 b is index into jumptable L05969E
COMMENT_LINE $6FA6 LEA L05969E,A0
COMMENT_LINE $6FA6 ANDI.L #$3F,D0
COMMENT_LINE $6FA6 LSL.W #2,D0
COMMENT_LINE $6FA6 ; ADDA.L 0(A0,D0.W),A0
COMMENT_LINE $6FA6 move.l (a0,d0.w),a0    ;jumptable now holds absolute adresses
COMMENT_LINE $6FA6 JMP (A0)
COMMENT_LINE $6FB1 New track
COMMENT_LINE $6FB1 MOVEA.L 8(A1),A0
COMMENT_LINE $6FB1 ADDA.L $C(A1),A0
COMMENT_LINE $6FB8 ADDQ.L #4,$C(A1)
COMMENT_LINE $6FBD MOVE.L (A0),D0
COMMENT_LINE $6FBD BNE.S L059336
COMMENT_LINE $6FC1 End of tracks, loop
COMMENT_LINE $6FC1 MOVEA.L 8(A1),A0
COMMENT_LINE $6FC1 MOVE.L #4,$C(A1)
COMMENT_LINE $6FC1 MOVE.L (A0),D0
COMMENT_LINE $6FC1 we do not loop, instead trigger demo game
COMMENT_LINE $6FC1 ldy 8+2,x
COMMENT_LINE $6FC1 ldd #4-2
COMMENT_LINE $6FC1 std $c+2,x
COMMENT_LINE $6FC1 ldd (0),y
COMMENT $6FC1 trigger demo game
COMMENT $6FD4 hack, return from music to title, otherwise two more channels will call this
COMMENT_LINE $6FD6 LEA L059818,A6
COMMENT_LINE $6FD6 ADDA.L D0,A6
COMMENT_LINE $6FD6 BRA L05923E
COMMENT_LINE $6FDE MOVE.B $64(A1),D0
COMMENT_LINE $6FDE ANDI.B #7,D0
COMMENT_LINE $6FE3 OR.B D0,$38(A5)
COMMENT_LINE $6FEF LSL.B #3,D0
COMMENT_LINE $6FF2 NOT.B D0
COMMENT_LINE $6FF3 AND.B D0,$38(A5)
COMMENT_LINE $6FFD BRA L05923E
COMMENT_LINE $7000 MOVE.B $64(A1),D0
COMMENT_LINE $7000 ANDI.B #$38,D0
COMMENT_LINE $7000 OR.B D0,$38(A5)
COMMENT_LINE $7011 LSR.B #3,D0
COMMENT_LINE $7011 NOT.B D0
COMMENT_LINE $7015 AND.B D0,$38(A5)
COMMENT_LINE $7015 BRA L05923E
COMMENT_LINE $7022 MOVE.B $64(A1),D0
COMMENT_LINE $7022 NOT.B D0
COMMENT_LINE $7026 AND.B D0,$38(A5)
COMMENT_LINE $7026 BRA L05923E
COMMENT_LINE $7037 MOVE.B (A6)+,D0
COMMENT_LINE $7037 EXT.W D0
COMMENT_LINE $7037 CLR.W $10(A1)
COMMENT_LINE $7037 MOVE.W D0,$1C(A1)
COMMENT_LINE $7043 CLR.W D0
COMMENT_LINE $7043 MOVE.B (A6)+,D0
COMMENT_LINE $7043 MOVE.W D0,$20(A1)
COMMENT_LINE $7048 BSET #2,0(A1)
COMMENT_LINE $7048 BRA L05923E
COMMENT_LINE $7051 CLR.W D0
COMMENT_LINE $7051 MOVE.B (A6)+,D0
COMMENT_LINE $7051 MOVE.B D0,$34(A5)
COMMENT_LINE $7051 BRA L05923E
COMMENT_LINE $705D CLR.W D0
COMMENT_LINE $705D MOVE.B (A6)+,D0
COMMENT_LINE $705D MOVE.W D0,$54(A1)
COMMENT_LINE $7064 CLR.W D0
COMMENT_LINE $7064 MOVE.B (A6)+,D0
COMMENT_LINE $7064 MOVE.W D0,$50(A1)
COMMENT_LINE $7064 MOVE.W D0,$58(A1)
COMMENT_LINE $7064 BRA L05923E
COMMENT_LINE $706F BSET #7,0(A1)
COMMENT_LINE $7075 BSET #3,0(A1)
COMMENT_LINE $7075 BRA L05923E
COMMENT_LINE $707E CLR.B $5C(A1)
COMMENT_LINE $707E BRA L05923E
COMMENT_LINE $7086 MOVE.B #$40,$5C(A1)
COMMENT_LINE $7086 BRA L05923E
COMMENT_LINE $708E MOVE.B #-$40,$5C(A1)
COMMENT_LINE $708E BRA L05923E
COMMENT_LINE $7096 BSET #1,0(A1)
COMMENT_LINE $7096 BRA L05923E
COMMENT_LINE $709F CLR.B $34(A1)
COMMENT_LINE $70A4 BCLR #5,0(A1)
COMMENT_LINE $70A4 BRA L059276
COMMENT_LINE $70AD BSET #4,0(A1)
COMMENT_LINE $70AD BRA L05923E
COMMENT_LINE $70B6 BSET #0,$60(A1)
COMMENT_LINE $70B6 BRA L05923E
COMMENT_LINE $70C1 Second update channel routine
COMMENT_LINE $70C1 Calculate sound register output based on current channel data
COMMENT_LINE $70C1 x holds pointer to current channel data (A1)
COMMENT_LINE $70C1 returns values in d4,d5
COMMENT_LINE $70C1 D6 is an alias for 0(A1). It is modified and written back at end of routine.
COMMENT_LINE $70C1 TEMP_D0 - D6 globals are used many times, set up dp to save size and speed
COMMENT_LINE $70C7 MOVE.B 0(A1),D6
COMMENT_LINE $70C7 BTST #5,D6
COMMENT_LINE $70C7 BEQ L059484
COMMENT_LINE $70CF MOVE.B $40(A1),D0
COMMENT_LINE $70CF ADDI.B #-$10,D0
COMMENT_LINE $70CF BCS.S L059464
COMMENT_LINE $70D6 BTST #6,D6
COMMENT_LINE $70D6 BEQ.S L05946C
COMMENT_LINE $70DA ADD.B $34(A1),D0
COMMENT_LINE $70DA BCC.S L05943C
COMMENT_LINE $70DA MOVEQ #-1,D0
COMMENT_LINE $70E1 ADDI.B #$10,D0
COMMENT_LINE $70E1 MOVE.B D0,$34(A1)
COMMENT_LINE $70E6 MOVE.B $48(A1),D0
COMMENT_LINE $70E6 ADDI.B #-$10,D0
COMMENT_LINE $70E6 BCS.S L05945C
COMMENT_LINE $70ED BCLR #6,D6
COMMENT_LINE $70F3 MOVE.B $3C(A1),$40(A1)
COMMENT_LINE $70F3 BRA L059484
COMMENT_LINE $70FB MOVE.B D0,$48(A1)
COMMENT_LINE $70FB BRA L059484
COMMENT_LINE $7100 MOVE.B D0,$40(A1)
COMMENT_LINE $7100 BRA L059484
COMMENT_LINE $7105 ANDI.B #$F,D0
COMMENT_LINE $7105 SUB.B D0,$34(A1)
COMMENT_LINE $7105 BPL.S L05947A
COMMENT_LINE $7113 CLR.B $34(A1)
COMMENT_LINE $7118 SUBQ.B #1,$48(A1)
COMMENT_LINE $7118 BNE.S L059484
COMMENT_LINE $7121 BCLR #5,D6
COMMENT_LINE $7127 MOVEA.L $18(A1),A0
COMMENT_LINE $7127 CLR.W D0
COMMENT_LINE $7127 MOVE.B (A0)+,D0
COMMENT_LINE $712F CMP.B #-$79,D0
COMMENT_LINE $712F BNE.S L05949E
COMMENT_LINE $7133 MOVE.L $14(A1),$18(A1)
COMMENT_LINE $7139 MOVEA.L $18(A1),A0
COMMENT_LINE $7139 MOVE.B (A0)+,D0
COMMENT_LINE $713F MOVE.L A0,$18(A1)
COMMENT_LINE $713F ADD.W $30(A1),D0
COMMENT_LINE $7146 LEA L059582,A0
COMMENT_LINE $7146 ADD.W D0,D0
COMMENT_LINE $7146 MOVE.W D0,D4
COMMENT_LINE $7150 MOVE.W 0(A0,D0.W),D5
COMMENT_LINE $7156 BTST #6,$5C(A1)
COMMENT_LINE $7156 BEQ L059514
COMMENT_LINE $715F MOVE.W $50(A1),D1
COMMENT_LINE $715F ADD.W D1,D1
COMMENT_LINE $7168 MOVE.W $58(A1),D0
COMMENT_LINE $7168 BTST #7,$5C(A1)
COMMENT_LINE $7168 BEQ.S L0594D4
COMMENT_LINE $7174 BTST #0,D6
COMMENT_LINE $7174 BNE.S L059500
COMMENT_LINE $717A BTST #5,$5C(A1)
COMMENT_LINE $717A BNE.S L0594EC
COMMENT_LINE $7181 SUB.W $54(A1),D0
COMMENT_LINE $7181 BPL.S L0594FC
COMMENT_LINE $718A BSET #5,$5C(A1)
COMMENT_LINE $718A MOVEQ #0,D0
COMMENT_LINE $718A BRA.S L0594FC
COMMENT_LINE $7199 ADD.W $54(A1),D0
COMMENT_LINE $7199 CMP.W D1,D0
COMMENT_LINE $7199 BLS.S L0594FC
COMMENT_LINE $71A5 BCLR #5,$5C(A1)
COMMENT_LINE $71A5 MOVE.W D1,D0
COMMENT_LINE $71B1 MOVE.W D0,$58(A1)
COMMENT_LINE $71B6 LSR.W #1,D1
COMMENT_LINE $71BC SUB.W D1,D0
COMMENT_LINE $71C2 SUBI.W #$60,D4
COMMENT_LINE $71C2 BPL.S L059512
COMMENT_LINE $71CB LSL.W #1,D0
COMMENT_LINE $71D1 ADDI.W #$18,D4
COMMENT_LINE $71D1 BCC.S L05950A
COMMENT_LINE $71DA ADD.W D0,D5
COMMENT_LINE $71DE TEMP_D0 becomes inactive here
COMMENT_LINE $71E0 BCHG #0,D6
COMMENT_LINE $71E0 MOVE.B D6,0(A1)
COMMENT $71E2 ?
COMMENT_LINE $71E8 BTST #2,D6
COMMENT_LINE $71E8 BEQ.S L05953C
COMMENT_LINE $71EC MOVE.W $20(A1),D0
COMMENT_LINE $71EC SUBQ.W #1,D0
COMMENT_LINE $71EC BNE.S L059538
COMMENT_LINE $71F4 MOVE.W $1C(A1),D0
COMMENT_LINE $71F4 ADD.W D0,$10(A1)
COMMENT_LINE $71FD ADD.W $10(A1),D5
COMMENT_LINE $71FD BRA.S L05953C`
COMMENT_LINE $7206 MOVE.W D0,$20(A1)
COMMENT_LINE $7209 BTST #0,$60(A1)
COMMENT_LINE $7209 BEQ.S L059552
COMMENT_LINE $7210 BCLR #0,$60(A1)
COMMENT_LINE $7210 CLR.B $36(A5)
COMMENT_LINE $7210 MOVEQ #7,D0
COMMENT_LINE $7210 BRA.S L05956C
COMMENT_LINE $7226 MOVE.B $38(A5),D0
COMMENT_LINE $7226 NOT.W D6
COMMENT_LINE $7226 ANDI.W #3,D6
COMMENT_LINE $7226 BNE.S L05956C
COMMENT_LINE $7239 MOVE.B $34(A5),D0
COMMENT_LINE $7239 BCHG #3,D0
COMMENT_LINE $7239 MOVE.B D0,$36(A5)
COMMENT_LINE $7245 MOVEQ #7,D0
COMMENT_LINE $7248 MOVE.B $41(A5),D1
COMMENT_LINE $7248 EOR.W D1,D0
COMMENT_LINE $724F AND.B $64(A1),D0
COMMENT_LINE $724F EOR.W D1,D0
COMMENT_LINE $7255 MOVE.B D0,$41(A5)
COMMENT_LINE $7255 MOVE.B $34(A1),D4
COMMENT_LINE $7255 RTS
COMMENT_LINE $725F return values in TEMP_D4, TEMP_D5
COMMENT_LINE $7261 rts
COMMENT_LINE $7261 Data
COMMENT_LINE $7321 Offsets from L059642 to data below
COMMENT_LINE $0000 Converted to word-table, saved 22-bytes
COMMENT_LINE $7337 Offset $2c
COMMENT_LINE $7367 dc.l L_CMD1
COMMENT_LINE $7367 dc.l L_CMD2
COMMENT_LINE $7367 dc.l L_CMD3
COMMENT_LINE $7367 dc.l L_CMD4
COMMENT_LINE $7367 dc.l L_CMD5
COMMENT_LINE $7367 dc.l L_CMD6
COMMENT_LINE $7367 dc.l L_CMD7
COMMENT_LINE $7367 dc.l L_CMD8
COMMENT_LINE $7367 dc.l L_CMD9
COMMENT_LINE $7367 dc.l L_CMD10
COMMENT_LINE $7367 dc.l L_CMD11
COMMENT_LINE $7367 dc.l L_CMD12
COMMENT_LINE $7367 dc.l L_CMD13
COMMENT_LINE $7367 dc.l L_CMD14
COMMENT_LINE $7367 ;dw $FFFF ;-1454
COMMENT_LINE $7367 ;dw $FA52
COMMENT_LINE $7367 ;$590F0
COMMENT_LINE $7367 dc.l L0590F0     ;Anv�nds denna?
COMMENT_LINE $7367 dc.l L_CMD16
COMMENT_LINE $7367 dc.l L_CMD17
COMMENT_LINE $7367 dc.l L_CMD18
COMMENT_LINE $738B Song 1, track offsets for each channel
COMMENT_LINE $738B dc.l TRACK_DATA_CHANNEL1-L059818
COMMENT_LINE $738B dc.l TRACK_DATA_CHANNEL2-L059818
COMMENT_LINE $738B dc.l TRACK_DATA_CHANNEL3-L059818
COMMENT_LINE $738B 6809: converted to 16-bit offsets
COMMENT_LINE $7391 make sure offsets stays the same
COMMENT_LINE $7397 Track data has been converted to 16-offsets from 32-bits.
COMMENT_LINE $7397 About 600 bytes were saved.
COMMENT_LINE $7397 Offsets modifed to oldvalue-savedspace.
COMMENT_LINE $7397 Define track. 319 is the sum of entries. 0 is end of tracks.
COMMENT_LINE $0000 Channel 1 track, offset $C, 37 entries
COMMENT_LINE $0000 Longword offsets to patterns
COMMENT_LINE $0000 Channel 2 track, offset $A0, 139 entries
COMMENT_LINE $0000 Channel 3 track, offset $2CC, 143 entries
COMMENT_LINE $0000 Patterns
COMMENT_LINE $7C13 ---------------------
COMMENT_LINE $7C13 READ/WRITE memory, 3*102 + 76 = 382 bytes
COMMENT_LINE $7C13 ---------------------
COMMENT_LINE $7C13 ds 46  ;$2e
COMMENT_LINE $7C13 2e is first offset, 44 the highest
COMMENT_LINE $7C31 + = reset in init
COMMENT $7C31 0 +
COMMENT $7C33 2
COMMENT $7C35 4 +
COMMENT $7C39 8 +
COMMENT $7C3D C +
COMMENT $7C59 $28 +
COMMENT $7C8D $5c +
COMMENT_LINE $7D63 -----------------
COMMENT_LINE $7D63 Vectrex RAM section
COMMENT_LINE $7D63 Thrust EEPROM support
COMMENT_LINE $7D63 368 bytes
COMMENT_LINE $7D63 todo optimize size:  g�r om ds1w_txbyte s� att den tar count i A och data i X
COMMENT_LINE $7D63 load o verify har samma setup-code, g�r till en sub som b�gge anropar
COMMENT_LINE $7D63 Example DS2430A code
COMMENT_LINE $7D63 Copyright (c) 2003 Alex Herbert
COMMENT_LINE $7D63 PIA Registers
COMMENT_LINE $0000 EEPROM constants
COMMENT_LINE $7D63 DS1W - Dallas Semiconductor 1-Wire Driver
COMMENT_LINE $7D63 Copyright (c) 2002 Alex Herbert
COMMENT_LINE $7D63 1-Wire Timing constants
COMMENT_LINE $7D63 $032a = 810 cycles = 540us
COMMENT_LINE $7D63 $02d0 = 720 cycles = 480us
COMMENT_LINE $7D63 $78 = 120cycles = 80us
COMMENT_LINE $7D63 Note:
COMMENT_LINE $7D63 For reliability DS1W_RESETDUR and DS1W_TSLOTDUR are = above the
COMMENT_LINE $7D63 minimums specified by the datasheet. To improve performance, values
COMMENT_LINE $7D63 closer to the specified minimums may be used.
COMMENT_LINE $7D63 DS1W_RESETDUR minimum = 480us
COMMENT_LINE $7D63 DS1W_TSLOTDUR minimum = 60us
COMMENT_LINE $7D63 1-Wire ROM commands
COMMENT_LINE $7D63 Subroutines
COMMENT_LINE $7D63 ds1w_open
COMMENT_LINE $7D63 function:
COMMENT_LINE $7D63 Prepares Vectrex I/O hardware (6522) for 1-Wire communication.
COMMENT_LINE $7D63 on entry:
COMMENT_LINE $7D63 dp = $d0
COMMENT_LINE $7D63 on exit:
COMMENT_LINE $7D63 d  = undefined
COMMENT $7D66 make sure PB7 is set, PB6 is cleared
COMMENT $7D68 Disable T1 output on PB7 (RAMP)
COMMENT_LINE $7D6B ds1w_close
COMMENT_LINE $7D6B function:
COMMENT_LINE $7D6B Restores Vectrex I/O hardware (6522) defaults.
COMMENT_LINE $7D6B on entry:
COMMENT_LINE $7D6B dp = $d0
COMMENT_LINE $7D6B on exit:
COMMENT_LINE $7D6B b  = undefined
COMMENT $7D6D Enable T1 output on PB7 (RAMP)
COMMENT_LINE $7D70 ds1w_reset
COMMENT_LINE $7D70 function:
COMMENT_LINE $7D70 Reset 1-Wire device(s), and detect if device is present.
COMMENT_LINE $7D70 on entry:
COMMENT_LINE $7D70 dp = $d0
COMMENT_LINE $7D70 on exit:
COMMENT_LINE $7D70 a  = 0 if device is present, -1 if not.
COMMENT_LINE $7D70 b  = undefined
COMMENT_LINE $7D70 cc = z=1 and n=0 if device present,
COMMENT_LINE $7D70 z=0 and n=1 if device not present.
COMMENT $7D70 reset pulse duration
COMMENT $7D73 start timer
COMMENT_LINE $7D75 generate reset pulse
COMMENT $7D77 PB6 direction = output
COMMENT $7D7D wait for timer
COMMENT $7D81 PB6 direction = input
COMMENT_LINE $7D83 check for presence pulse
COMMENT $7D83 test PB6
COMMENT $7D85 PB6 was low too early (emulator?)
COMMENT $7D87 presence pulse detect duration
COMMENT $7D8A start timer
COMMENT $7D8E test PB6
COMMENT $7D92 timeout?
COMMENT $7D96 PB6 didn't go low (no device attached?)
COMMENT $7D9A wait for timer
COMMENT $7D9E PB6 stayed low too long (fault?)
COMMENT $7DA0 time slot duration
COMMENT $7DA2 load timer latch
COMMENT $7DA4 return "no error"
COMMENT $7DA6 return "device not present"
COMMENT_LINE $7DA9 ds1w_txbyte
COMMENT_LINE $7DA9 function:
COMMENT_LINE $7DA9 Transmit byte to 1-Wire device.
COMMENT_LINE $7DA9 on entry:
COMMENT_LINE $7DA9 a  = byte to send
COMMENT_LINE $7DA9 dp = $d0
COMMENT_LINE $7DA9 on exit:
COMMENT_LINE $7DA9 d  = undefined
COMMENT $7DA9 bits in byte
COMMENT $7DAB put loop counter 'above' stack
COMMENT $7DAD shift data into carry
COMMENT $7DB0 start timer
COMMENT_LINE $7DB2 long pulse low  ~~\________/~~
COMMENT $7DB4 PB6 direction = output
COMMENT $7DBA wait for end of time slot
COMMENT $7DBE PB6 direction = input
COMMENT $7DC5 start timer
COMMENT_LINE $7DC7 short pulse low  ~~\_/~~~~~~~~~
COMMENT $7DC9 PB6 direction = output
COMMENT $7DCD PB6 direction = input
COMMENT $7DD3 wait for end of time slot
COMMENT_LINE $7DDA ds1w_rxbyte
COMMENT_LINE $7DDA function:
COMMENT_LINE $7DDA Receive byte from 1-Wire device.
COMMENT_LINE $7DDA on entry:
COMMENT_LINE $7DDA dp = $d0
COMMENT_LINE $7DDA on exit:
COMMENT_LINE $7DDA a  = received byte
COMMENT_LINE $7DDA b  = undefined
COMMENT $7DDA bits in byte
COMMENT $7DDC put loop counter 'above' stack
COMMENT $7DDE start timer
COMMENT_LINE $7DE0 short pulse low  ~~\_xxxxxx~~~~
COMMENT $7DE2 PB6 direction = output
COMMENT $7DE6 PB6 direction = input
COMMENT_LINE $7DE8 read response
COMMENT $7DE8 timing
COMMENT $7DE9 read PB
COMMENT $7DEB shift PB6...
COMMENT $7DEC ...into carry...
COMMENT $7DED ...and rotate into result byte
COMMENT $7DF2 wait for end of time slot
COMMENT_LINE $7DF9 ds2430_verify
COMMENT_LINE $7DF9 function:
COMMENT_LINE $7DF9 compare DS2430 EEPROM to RAM
COMMENT_LINE $7DF9 on entry:
COMMENT_LINE $7DF9 x = data address
COMMENT_LINE $7DF9 on exit:
COMMENT_LINE $7DF9 a = 0 if same,
COMMENT_LINE $7DF9 non-zero if different
COMMENT $7DF9 number of bytes to verify (loop counter)
COMMENT $7DFB stack used registers
COMMENT $7DFD dp = $d0
COMMENT $7E01 open 1-wire port
COMMENT $7E04 reset device
COMMENT $7E07 exit if no device present
COMMENT $7E09 no need to access rom
COMMENT $7E0B send command
COMMENT_LINE $7E0D Malban jsr     ds1w_txbyte     ; send command
COMMENT $7E0D copy eeprom to scratch pad
COMMENT $7E0F send command
COMMENT_LINE $7E11 malban jsr     ds1w_txbyte     ; send command
COMMENT $7E11 address of first byte to verify
COMMENT $7E12 send address
COMMENT_LINE $7E14 malban jsr     ds1w_txbyte     ; send address
COMMENT $7E14 read byte from scratch pad
COMMENT_LINE $7E16 malban jsr     ds1w_rxbyte     ; read byte from scratch pad
COMMENT $7E16 compare to ram
COMMENT $7E18 exit if not same
COMMENT $7E1A decrement loop counter
COMMENT $7E1C until all bytes are read
COMMENT $7E1E close port
COMMENT $7E21 restore registers from stack and return
COMMENT_LINE $7E23 DS2430 Commands
COMMENT_LINE $7E23 DS2430 Timings
COMMENT_LINE $7E23 ds2430_load
COMMENT_LINE $7E23 function:
COMMENT_LINE $7E23 load DS2430 EEPROM to RAM
COMMENT_LINE $7E23 on entry:
COMMENT_LINE $7E23 x = load address
COMMENT_LINE $7E23 on exit:
COMMENT_LINE $7E23 a = 0 if no error,
COMMENT_LINE $7E23 non-zero if error
COMMENT $7E23 number of bytes to load (loop counter)
COMMENT $7E25 stack used registers
COMMENT $7E27 dp = $d0
COMMENT $7E2B open 1-wire port
COMMENT $7E2E reset device
COMMENT $7E31 exit if no device present
COMMENT $7E33 no need to access rom
COMMENT $7E35 send command
COMMENT $7E38 copy eeprom to scratch pad
COMMENT $7E3A send command
COMMENT $7E3D address of first byte to load
COMMENT $7E3E send address
COMMENT $7E41 read byte from scratch pad
COMMENT_LINE $7E43 malban jsr     ds1w_rxbyte     ; read byte from scratch pad
COMMENT $7E43 save to ram
COMMENT $7E45 decrement loop counter
COMMENT $7E47 until all bytes are read
COMMENT $7E49 close port
COMMENT $7E4C restore registers from stack and return
COMMENT_LINE $7E4E ds2430_save
COMMENT_LINE $7E4E function:
COMMENT_LINE $7E4E save RAM to DS2430 EEPROM
COMMENT_LINE $7E4E on entry:
COMMENT_LINE $7E4E x = address of data to save
COMMENT_LINE $7E4E on exit:
COMMENT_LINE $7E4E a = 0 if no error,
COMMENT_LINE $7E4E non-zero if error
COMMENT $7E4E number of bytes to save (loop counter)
COMMENT $7E50 stack used registers
COMMENT $7E52 dp = $d0
COMMENT $7E56 open 1-wire port
COMMENT $7E59 reset device
COMMENT $7E5C exit if no device present
COMMENT $7E5E no need to access rom
COMMENT $7E60 send command
COMMENT $7E63 write bytes to scratch pad
COMMENT $7E65 send command
COMMENT $7E68 address of first byte
COMMENT $7E69 send address
COMMENT $7E6C get byte from ram
COMMENT $7E6E send byte
COMMENT $7E71 decrement loop counter
COMMENT $7E73 until all bytes are sent
COMMENT $7E75 reset device
COMMENT $7E78 no need to access rom
COMMENT $7E7A send command
COMMENT $7E7D copy scratch pad to eeprom
COMMENT $7E7F send command
COMMENT $7E82 validation key
COMMENT $7E84 send key
COMMENT $7E87 eeprom write (scratch pad copy) duration
COMMENT $7E8A start timer
COMMENT_LINE $7E8D malban to be 100% same rom, AS09 for whatever reason assumes DP NOT to be at d0
COMMENT_LINE $7E8D std     T1LOLC          ; start timer
COMMENT_LINE $7E92 malban to be 100% same rom, AS09 for whatever reason assumes DP NOT to be at d0
COMMENT_LINE $7E92 bitb    IFLAG
COMMENT $7E92 wait for timer
COMMENT $7E94 close port
COMMENT $7E97 restore registers from stack and return
COMMENT $7E9C load 32 byte eeprom to ram
COMMENT_LINE $7E9E malban jsr     ds2430_load             ; load 32 byte eeprom to ram
COMMENT $7EA1 sum the bytes
COMMENT $7EA6 equal to checksum?
COMMENT $7EA8 if not, then format the eeprom
COMMENT $7EAA otherwise, return
COMMENT_LINE $7EAB Init eeprom-buffer with valid data
COMMENT_LINE $7EAB Called when eeprom is erased, or eeprom is not present
COMMENT_LINE $7EB8 First byte is control, second is bonusgameenabled, the rest are highscores
COMMENT_LINE $7EC5 ldx     #eeprom_buffer          ;
COMMENT_LINE $7EC5 ldu     #eeprom_defaults        ;
COMMENT_LINE $7EC5 ldb     #$1f                    ;
COMMENT_LINE $7EC5 eeformat_loop                           ; copy default data (rom) to ram
COMMENT_LINE $7EC5 pulu    a                       ;
COMMENT_LINE $7EC5 sta     ,x+                     ;
COMMENT_LINE $7EC5 decb                            ;
COMMENT_LINE $7EC5 bne     eeformat_loop           ;
COMMENT $7ECB create checksum byte
COMMENT $7ED5 compare ram to eeprom
COMMENT $7ED9 if different, then update eeprom
RANGE $0093-$00FB DP $C8
RANGE $00FD-$0477 DP $C8
RANGE $04D8-$0506 DP $C8
RANGE $052C-$0540 DP $C8
RANGE $0560-$0590 DP $C8
RANGE $05AF-$05CD DP $C8
RANGE $05DE-$05E3 DP $C8
RANGE $05F2-$05FA DP $C8
RANGE $05FA-$060A DP $C8
RANGE $061A-$0634 DP $C8
RANGE $0642-$0677 DP $C8
RANGE $0683-$0691 DP $C8
RANGE $0692-$06AF DP $C8
RANGE $06BF-$06D7 DP $C8
RANGE $06E7-$06F7 DP $C8
RANGE $078D-$07C6 DP $C8
RANGE $0ACB-$0AF2 DP $C8
RANGE $0AF5-$0C2C DP $C8
RANGE $0C2F-$0C71 DP $C8
RANGE $0C72-$0CBC DP $C8
RANGE $0CBD-$0CCF DP $C8
RANGE $0CD0-$0CD4 DP $C8
RANGE $0CEB-$0D37 DP $C8
RANGE $0D3A-$0F4F DP $C8
RANGE $113B-$11EE DP $C8
RANGE $11EF-$1263 DP $C8
RANGE $1264-$12E1 DP $C8
RANGE $12E2-$12F3 DP $C8
RANGE $1A4B-$1A63 DP $C8
RANGE $1B42-$1B81 DP $C8
RANGE $1B88-$1C62 DP $C8
RANGE $1C67-$1DC4 DP $C8
RANGE $1FB9-$1FE3 DP $C8
RANGE $212F-$214B DP $C8
RANGE $241B-$268F DP $C8
RANGE $271F-$2751 DP $C8
RANGE $2752-$2773 DP $C8
RANGE $2774-$27B0 DP $C8
RANGE $27B3-$285E DP $C8
RANGE $287A-$2950 DP $C8
RANGE $295C-$29A4 DP $C8
RANGE $29A5-$29FF DP $C8
RANGE $2A00-$2AB4 DP $C8
RANGE $2B53-$2CCA DP $C8
RANGE $2DCC-$2EFB DP $C8
RANGE $4FCF-$5105 DP $C8
RANGE $5173-$521F DP $C8
RANGE $5594-$5636 DP $C8
RANGE $56A6-$5701 DP $C8
RANGE $5716-$57FD DP $C8
RANGE $582F-$587B DP $C8
RANGE $593D-$5A21 DP $C8
RANGE $5A2B-$5BA6 DP $C8
RANGE $5BA7-$5BC2 DP $C8
RANGE $5BC3-$5BE0 DP $C8
RANGE $5C9D-$5D41 DP $C8
RANGE $5D42-$5D7A DP $C8
RANGE $601E-$605D DP $C8
RANGE $61A5-$61B5 DP $D0
RANGE $6215-$6234 DP $D0
RANGE $711F-$72B9 DP $CA
RANGE $7DBB-$7E51 DP $D0
RANGE $7E59-$7E7B DP $D0
RANGE $7E83-$7EA6 DP $D0
RANGE $7EAE-$7EF1 DP $D0
RANGE $0000-$000B DB_DATA
RANGE $000B-$000D DW_DATA
RANGE $000D-$0038 DB_DATA
RANGE $0038-$01AC CODE
RANGE $01AD-$01C6 CODE
RANGE $01C7-$0208 CODE
RANGE $0209-$023D CODE
RANGE $023E-$02E9 CODE
RANGE $02EA-$033D CODE
RANGE $033E-$036D CODE
RANGE $036E-$043A CODE
RANGE $043A-$0476 DW_DATA
RANGE $0476-$0A3E CODE
RANGE $0A3E-$0A54 DB_DATA
RANGE $0A54-$0A88 DW_DATA
RANGE $0A88-$0A8E DB_DATA
RANGE $0A8E-$12B7 CODE
RANGE $12B7-$1516 DB_DATA
RANGE $1516-$151C DW_DATA
RANGE $151C-$1A0E DB_DATA
RANGE $1A0E-$1B45 CODE
RANGE $1B45-$1B49 DB_DATA
RANGE $1B49-$1BAC CODE
RANGE $1BAD-$1F43 CODE
RANGE $1F43-$1F4B DW_DATA
RANGE $1F4B-$1FE4 CODE
RANGE $1FE4-$1FEC DW_DATA
RANGE $1FEC-$266A CODE
RANGE $266B-$283A CODE
RANGE $283A-$283D DB_DATA
RANGE $283D-$2918 CODE
RANGE $2918-$2921 DB_DATA
RANGE $2921-$2D90 CODE
RANGE $2D91-$2EC1 CODE
RANGE $2EC1-$2FAB DW_DATA
RANGE $2FAB-$3109 DB_DATA
RANGE $3109-$311D DW_DATA
RANGE $311D-$311F DB_DATA
RANGE $311F-$3133 DW_DATA
RANGE $3133-$3135 DB_DATA
RANGE $3135-$3149 DW_DATA
RANGE $3149-$314B DB_DATA
RANGE $314B-$315F DW_DATA
RANGE $315F-$3161 DB_DATA
RANGE $3161-$3175 DW_DATA
RANGE $3175-$3177 DB_DATA
RANGE $3177-$318B DW_DATA
RANGE $318B-$318D DB_DATA
RANGE $318D-$31A1 DW_DATA
RANGE $31A1-$31A3 DB_DATA
RANGE $31A3-$31B7 DW_DATA
RANGE $31B7-$32B8 DB_DATA
RANGE $32B8-$32BC DW_DATA
RANGE $32BC-$32BE DB_DATA
RANGE $32BE-$32C2 DW_DATA
RANGE $32C2-$348A DB_DATA
RANGE $348A-$348E DW_DATA
RANGE $348E-$348F DB_DATA
RANGE $348F-$3493 DW_DATA
RANGE $3493-$3495 DB_DATA
RANGE $3495-$3499 DW_DATA
RANGE $3499-$3733 DB_DATA
RANGE $3733-$3737 DW_DATA
RANGE $3737-$3738 DB_DATA
RANGE $3738-$373C DW_DATA
RANGE $373C-$373D DB_DATA
RANGE $373D-$3741 DW_DATA
RANGE $3741-$3742 DB_DATA
RANGE $3742-$3746 DW_DATA
RANGE $3746-$3747 DB_DATA
RANGE $3747-$374B DW_DATA
RANGE $374B-$374D DB_DATA
RANGE $374D-$3765 DW_DATA
RANGE $3765-$3A9F DB_DATA
RANGE $3A9F-$3AA3 DW_DATA
RANGE $3AA3-$3AA4 DB_DATA
RANGE $3AA4-$3AA8 DW_DATA
RANGE $3AA8-$3AA9 DB_DATA
RANGE $3AA9-$3AAD DW_DATA
RANGE $3AAD-$3AAE DB_DATA
RANGE $3AAE-$3AB2 DW_DATA
RANGE $3AB2-$3AB3 DB_DATA
RANGE $3AB3-$3AB7 DW_DATA
RANGE $3AB7-$3AB8 DB_DATA
RANGE $3AB8-$3ABC DW_DATA
RANGE $3ABC-$3ABD DB_DATA
RANGE $3ABD-$3AC1 DW_DATA
RANGE $3AC1-$3AC3 DB_DATA
RANGE $3AC3-$3AC7 DW_DATA
RANGE $3AC7-$3AD2 DB_DATA
RANGE $3AD2-$3AD6 DW_DATA
RANGE $3AD6-$3AD7 DB_DATA
RANGE $3AD7-$3ADB DW_DATA
RANGE $3ADB-$3ADC DB_DATA
RANGE $3ADC-$3AE0 DW_DATA
RANGE $3AE0-$3E94 DB_DATA
RANGE $3E94-$3E98 DW_DATA
RANGE $3E98-$3E99 DB_DATA
RANGE $3E99-$3E9D DW_DATA
RANGE $3E9D-$3E9E DB_DATA
RANGE $3E9E-$3EA2 DW_DATA
RANGE $3EA2-$3EA3 DB_DATA
RANGE $3EA3-$3EA7 DW_DATA
RANGE $3EA7-$3EA8 DB_DATA
RANGE $3EA8-$3EAC DW_DATA
RANGE $3EAC-$3EAD DB_DATA
RANGE $3EAD-$3EB1 DW_DATA
RANGE $3EB1-$3EB2 DB_DATA
RANGE $3EB2-$3EB6 DW_DATA
RANGE $3EB6-$3EB8 DB_DATA
RANGE $3EB8-$3ED8 DW_DATA
RANGE $3ED8-$3EE5 DB_DATA
RANGE $3EE5-$3EE9 DW_DATA
RANGE $3EE9-$3EEA DB_DATA
RANGE $3EEA-$3EEE DW_DATA
RANGE $3EEE-$3EEF DB_DATA
RANGE $3EEF-$3EF3 DW_DATA
RANGE $3EF3-$450D DB_DATA
RANGE $450D-$4511 DW_DATA
RANGE $4511-$4512 DB_DATA
RANGE $4512-$4516 DW_DATA
RANGE $4516-$4517 DB_DATA
RANGE $4517-$451B DW_DATA
RANGE $451B-$451C DB_DATA
RANGE $451C-$4520 DW_DATA
RANGE $4520-$4521 DB_DATA
RANGE $4521-$4525 DW_DATA
RANGE $4525-$4526 DB_DATA
RANGE $4526-$452A DW_DATA
RANGE $452A-$452B DB_DATA
RANGE $452B-$452F DW_DATA
RANGE $452F-$4530 DB_DATA
RANGE $4530-$4534 DW_DATA
RANGE $4534-$4535 DB_DATA
RANGE $4535-$4539 DW_DATA
RANGE $4539-$453A DB_DATA
RANGE $453A-$453E DW_DATA
RANGE $453E-$4540 DB_DATA
RANGE $4540-$4548 DW_DATA
RANGE $4548-$4555 DB_DATA
RANGE $4555-$4559 DW_DATA
RANGE $4559-$455A DB_DATA
RANGE $455A-$455E DW_DATA
RANGE $455E-$455F DB_DATA
RANGE $455F-$4563 DW_DATA
RANGE $4563-$4731 DB_DATA
RANGE $4731-$4735 DW_DATA
RANGE $4735-$4736 DB_DATA
RANGE $4736-$473A DW_DATA
RANGE $473A-$473B DB_DATA
RANGE $473B-$473F DW_DATA
RANGE $473F-$4740 DB_DATA
RANGE $4740-$4744 DW_DATA
RANGE $4744-$4745 DB_DATA
RANGE $4745-$4749 DW_DATA
RANGE $4749-$474A DB_DATA
RANGE $474A-$474E DW_DATA
RANGE $474E-$474F DB_DATA
RANGE $474F-$4753 DW_DATA
RANGE $4753-$4755 DB_DATA
RANGE $4755-$4761 DW_DATA
RANGE $4761-$476A DB_DATA
RANGE $476A-$476E DW_DATA
RANGE $476E-$476F DB_DATA
RANGE $476F-$4773 DW_DATA
RANGE $4773-$4774 DB_DATA
RANGE $4774-$4778 DW_DATA
RANGE $4778-$4779 DB_DATA
RANGE $4779-$477D DW_DATA
RANGE $477D-$477E DB_DATA
RANGE $477E-$4782 DW_DATA
RANGE $4782-$4783 DB_DATA
RANGE $4783-$4787 DW_DATA
RANGE $4787-$4788 DB_DATA
RANGE $4788-$478C DW_DATA
RANGE $478C-$478D DB_DATA
RANGE $478D-$4791 DW_DATA
RANGE $4791-$4B17 DB_DATA
RANGE $4B17-$4B1B DW_DATA
RANGE $4B1B-$4B1C DB_DATA
RANGE $4B1C-$4B20 DW_DATA
RANGE $4B20-$4B21 DB_DATA
RANGE $4B21-$4B25 DW_DATA
RANGE $4B25-$4B26 DB_DATA
RANGE $4B26-$4B2A DW_DATA
RANGE $4B2A-$4B2B DB_DATA
RANGE $4B2B-$4B2F DW_DATA
RANGE $4B2F-$4B30 DB_DATA
RANGE $4B30-$4B34 DW_DATA
RANGE $4B34-$4B35 DB_DATA
RANGE $4B35-$4B39 DW_DATA
RANGE $4B39-$4B3A DB_DATA
RANGE $4B3A-$4B3E DW_DATA
RANGE $4B3E-$4B40 DB_DATA
RANGE $4B40-$4B44 DW_DATA
RANGE $4B44-$4B55 DB_DATA
RANGE $4B55-$4B59 DW_DATA
RANGE $4B59-$4B5A DB_DATA
RANGE $4B5A-$4B5E DW_DATA
RANGE $4B5E-$4CB9 DB_DATA
RANGE $4CB9-$50CC CODE
RANGE $50CC-$512C DB_DATA
RANGE $512C-$5130 DW_DATA
RANGE $5130-$5139 DB_DATA
RANGE $5139-$51E6 CODE
RANGE $51E6-$522A DB_DATA
RANGE $522A-$5232 DW_DATA
RANGE $5232-$5248 DB_DATA
RANGE $5248-$5268 CODE
RANGE $5268-$528E DB_DATA
RANGE $528E-$5292 DW_DATA
RANGE $5292-$5299 CODE
RANGE $5299-$52D0 DB_DATA
RANGE $52D0-$52D2 DW_DATA
RANGE $52D2-$52D4 DB_DATA
RANGE $52D4-$52D6 DW_DATA
RANGE $52D6-$52D8 DB_DATA
RANGE $52D8-$52DA DW_DATA
RANGE $52DA-$52DC DB_DATA
RANGE $52DC-$52DE DW_DATA
RANGE $52DE-$52E0 DB_DATA
RANGE $52E0-$52E4 DW_DATA
RANGE $52E4-$52EB CODE
RANGE $52EB-$5327 DB_DATA
RANGE $5327-$5329 DW_DATA
RANGE $5329-$532B DB_DATA
RANGE $532B-$532D DW_DATA
RANGE $532D-$532F DB_DATA
RANGE $532F-$5331 DW_DATA
RANGE $5331-$5333 DB_DATA
RANGE $5333-$5335 DW_DATA
RANGE $5335-$5337 DB_DATA
RANGE $5337-$533B DW_DATA
RANGE $533B-$536D CODE
RANGE $536D-$5383 DB_DATA
RANGE $5383-$5385 DW_DATA
RANGE $5385-$5387 DB_DATA
RANGE $5387-$5389 DW_DATA
RANGE $5389-$538B DB_DATA
RANGE $538B-$538D DW_DATA
RANGE $538D-$538F DB_DATA
RANGE $538F-$5393 DW_DATA
RANGE $5393-$53EA CODE
RANGE $53EA-$5420 DB_DATA
RANGE $5420-$5422 DW_DATA
RANGE $5422-$5424 DB_DATA
RANGE $5424-$5426 DW_DATA
RANGE $5426-$5428 DB_DATA
RANGE $5428-$542A DW_DATA
RANGE $542A-$542C DB_DATA
RANGE $542C-$542E DW_DATA
RANGE $542E-$5430 DB_DATA
RANGE $5430-$5434 DW_DATA
RANGE $5434-$5451 CODE
RANGE $5451-$545F DB_DATA
RANGE $545F-$5461 DW_DATA
RANGE $5461-$5463 DB_DATA
RANGE $5463-$5467 DW_DATA
RANGE $5467-$5498 CODE
RANGE $5498-$54CA DB_DATA
RANGE $54CA-$54D2 DW_DATA
RANGE $54D2-$54D9 CODE
RANGE $54D9-$54EE DB_DATA
RANGE $54EE-$54F2 DW_DATA
RANGE $54F2-$5532 DB_DATA
RANGE $5532-$55CE CODE
RANGE $55CE-$55DE DB_DATA
RANGE $55DE-$56AA CODE
RANGE $56AA-$56BE DB_DATA
RANGE $56BE-$59EF CODE
RANGE $59EF-$59F0 DB_DATA
RANGE $59F0-$5A52 CODE
RANGE $5A52-$5A53 DB_DATA
RANGE $5A53-$60AB CODE
RANGE $60AB-$60C9 DB_DATA
RANGE $60C9-$60D1 DW_DATA
RANGE $60D1-$6346 CODE
RANGE $6346-$63ED DB_DATA
RANGE $63ED-$6561 CODE
RANGE $6561-$6DAC DB_DATA
RANGE $6DAC-$7261 CODE
RANGE $7261-$7391 DW_DATA
RANGE $7391-$7397 DB_DATA
RANGE $7397-$7C8D DW_DATA
RANGE $7C8D-$7C8F DB_DATA
RANGE $7C8F-$7D63 DW_DATA
RANGE $7D63-$7EAB CODE
RANGE $7EAB-$7EB2 DB_DATA
RANGE $7EB2-$7EDE CODE

