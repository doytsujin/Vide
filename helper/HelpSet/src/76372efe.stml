:title vedi

:image vedi.png|vedi window

:h2 Editor

:h3 some "highlights":
- double click on a  "include" tries to load the denoted file in an editor tab
- search and replace works
- tab, shiftab works as "indent"
- middle mousebutton double click on a label/macro/variable jumps to the definition of that entity
- there is a "pretty print" button for 6809 sources (only)
- you can define and use up to 10 bookmarks
- you can configure you syntax coloring settings

:h2 Buttons
##new.png##~~
Create a new project or create an empty file.~~

Special:~~
If in file system view pressing "shift"-new will create a "default" project on the current selected assembler file.

##arrow_refresh.png##~~
Refresh the current display tree (if you externally added files - e.g.).~~

Special:~~
Pressing "shift"- refresh will switch the tree to a filesystem view within the Vide directory.

##page_go.png##
Load a file.~~
Pressing shift with the button, will reload the current edited file.

##page_save.png##
Save the current file.~~
Pressing shift with the button, will "save as" - opens a file dialog.

##text_columns.png##~~
Pretty print the current source (assembler only).

:h2 Assembling
Pressing the button: ##control_play_blue.png## ~~
**starts** the assembler with the current active file as input (file is automatically saved). If successfull, vecxi will automatically be started.~~
The messages of assi can be viewed in the bottom tab called "ASM messages":
:image vediAss.png|message window

Pressing the button: ##bug_go.png## ~~
starts ** debugging** the assembler with the current active file as input (file is automatically saved). If successfull, vecxi will automatically be started.~~
The messages of assi can be viewed in the bottom tab called "ASM messages".
A breakpoint will be set automatically to the first valid instruction of the cartridge - dissi will popup and you can debug right away.

Pressing the button: ##server_go.png## ~~
starts the assembler with the current active file as input (file is automatically saved) 
and if successfull (and a vecxi instance is already running) **injects** the built binary file into the currently running vecxi.
Vecxi is not reset while doing this, you just “change” the cartridge ROM while running. You can thus experiment with changes to your bin file on the fly without losing RAM data, PC address or breakpoints.

:h2 Ask/F1
a) You can enter simple "expression" and use the ask field as a small calculator. Conversion between decimal, binary and hex is also supported.
b) You can enter names of (Bruce Tomlin - defined) BIOS routines, and a (stay on top) window displays a small help
c) You can enter Assembler mnemonics, and a help for the directive will be displayed

Placing the cursor over such a "text" within the source, will do the same. 

:h3 Messages
- error messages are colored red
- warning messages are colored blue
- optimization messages are colored green
- info messages are colored black

Error/Warning/Optimization messages are related to the assembled source. They allways consist of two lines of information:~~
Line 1: What happened?~~
Line 2: Where did it happen?~~

Doubleclicking on any of the two lines will jump to the source (will also open include files, if message is about an include).

The third tab on the bottom contains the listing output of the assembler. The Error/Warning/Optimization messages are also included in the "correct" places in the listing (although not double clickable to any effect).

:h2 Syntax highlighting
VIDE uses "Syntax" programmed by (c) Stephen Ostermiller.
I slightly changed some code and did a flex grammar that covers some aspects of assi. 
This was my first contact with flex and grammars, so the results are not 100% and probably not very efficient either.

The expressions that are possible with parenthesis and macro usage are IMHO nearly impossible to cover with a regular expression based scanner.
After all, who would identify an opcode //lda// that is puzzled together by a macro, like:
:div code
fillregister___macro reg, val~~
____________ld\\1___#val~~
______endm~~

 ___fillregister a, 1 ; set a to 1~~
___fillregister b, 2 ; set b to 2~~
:/div

:image syntax.png|syntax example window

:h2 Other features
:h3 Bookmarks
Using SHIFT and CTRL (windows/linux) or CMD (apple) "1"-"0" you can define bookmarks.
Using CTRL (windows/linux) or CMD (apple) "1"-"0" you can jump to defined bookmarks.

Bookmarks can be used "accross" files.
:h3 Jump
CTRL (windows/linux) or CMD (apple) "J" jumps to a line number.

:h3 Recolor
CTRL (windows/linux) or CMD (apple) "R" reapplies syntax highlighting. 

:h3 Run/Debug
F5 runs the current project/file, F6 debugs the current project/file (same as the buttons).
