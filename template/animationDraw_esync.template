

;***************************************************************************
; DEFINE SECTION
;***************************************************************************
; load vectrex bios routine definitions
Vec_Pattern         EQU      $C829                        ;Dot pattern (bits) 
music1              EQU      $FD0D 
VIA_port_b          EQU      $D000                        ;VIA port B data I/O register 
VIA_port_a          EQU      $D001                        ;VIA port A data I/O register (handshaking) 
VIA_t1_cnt_lo       EQU      $D004                        ;VIA timer 1 count register lo (scale factor) 
VIA_t1_cnt_hi       EQU      $D005                        ;VIA timer 1 count register hi 
VIA_shift_reg       EQU      $D00A                        ;VIA shift register 
VIA_cntl        EQU     $D00C   ;VIA control register
VIA_int_flags       EQU      $D00D                        ;VIA interrupt flags register 
Intensity_5F        EQU      $F2A5                        ; 
Intensity_a         EQU      $F2AB   ;
Wait_Recal          EQU      $F192                        ; 
Draw_VLp            EQU      $F410                        ;pattern y x pattern y x ... $01 
Moveto_d            EQU      $F312                        ; 
Check0Ref           EQU      $F34F                        ; 

;***************************************************************************
; Variable / RAM SECTION
;***************************************************************************
; insert your variables (RAM usage) in the BSS section
; user RAM starts at $c880 
                    BSS      
                    ORG      $c880                ; start of our ram space 

delayReset          EQU      5
delayCounter        EQU      $c880
animationCounter    EQU      $c881

;***************************************************************************
; HEADER SECTION
;***************************************************************************
; The cartridge ROM starts at address 0
                    CODE     
                    ORG      0 
; the first few bytes are mandatory, otherwise the BIOS will not load
; the ROM file, and will start MineStorm instead
                    DB       "g GCE 1998", $80    ; 'g' is copyright sign
                    DW       music1               ; music from the rom 
                    DB       $F8, $50, $20, -$80  ; hight, width, rel y, rel x (from 0,0) 
                    DB       "ANIM DRAW ESYNC", $80  ; some game information, ending with $80
                    DB       0                    ; end of game header 

;***************************************************************************
; CODE SECTION
;***************************************************************************
; here the cartridge program starts off
                    LDA      #delayReset
                    STA      delayCounter
                    CLR      animationCounter
main: 
                    JSR      Wait_Recal           ; Vectrex BIOS recalibration 
                    JSR      Intensity_5F         ; Sets the intensity of the 
                                                  ; vector beam to $5f 
               
 CLRA
                    LDB      animationCounter     ; current animation frame
                    ASLB                          ; times two since it is a word pointer
 ROLA
                    LDU      #vData               ; address of data 
                    LDU      d,U

 LDA      #$0                          ; Text position relative Y 
                    LDB      #-$0                        ; Text position relative X 
                    tfr      d,x                          ; in x position of list 
                    lda      #$80                         ; scale positioning 
                    ldb      #$80                         ; scale move in list 

                    JSR      draw_esynced_list      ; Vectrex BIOS print routine 


                    DEC      delayCounter
                    BNE      main
                    LDA      #delayReset
                    STA      delayCounter
                    INC      animationCounter
                    LDA      animationCounter
                    CMPA     #vDataLength
                    BNE      main
                    CLR      animationCounter

                    BRA      main                 ; and repeat forever 


_INTENSITY_A        macro    
                    STA      <VIA_port_a                  ;Store intensity in D/A 
                    LDD      #$0504                       ;mux disabled channel 2 
                    STA      <VIA_port_b                  ; 
                    STB      <VIA_port_b                  ;mux enabled channel 2 
                    STA      <VIA_port_b                  ;turn off mux 
                    endm     

MY_MOVE_TO_D_START_NT  macro  
                    STA      <VIA_port_a 
                    LDA      #$CE                         ;Blank low, zero high? 
                    STA      <VIA_cntl                    ; 
                    CLRA     
                    STA      <VIA_port_b                  ;Enable mux 
                    STA      <VIA_shift_reg               ;Clear shift regigster 
                    INC      <VIA_port_b                  ;Disable mux 
                    STB      <VIA_port_a                  ;Store X in D/A register 
                    STA      <VIA_t1_cnt_hi               ;enable timer 
                    endm     
MY_MOVE_TO_D_START  macro    
                    STA      <VIA_port_a                  ;Store Y in D/A register 
                    LDA      #$CE                         ;Blank low, zero high? 
                    STA      <VIA_cntl                    ; 
                    CLRA     
                    STA      <VIA_port_b                  ;Enable mux ; hey dis si "break integratorzero 440" 
                    STA      <VIA_shift_reg               ;Clear shift regigster 
                    INC      <VIA_port_b                  ;Disable mux 
                    STB      <VIA_port_a                  ;Store X in D/A register 
                    STA      <VIA_t1_cnt_hi               ;enable timer 
                    endm     
MY_MOVE_TO_A_END    macro    
                    local    LF33D 
                    LDA      #$40                         ; 
LF33D:              BITA     <VIA_int_flags               ; 
                    BEQ      LF33D                        ; 
                    endm     
MY_MOVE_TO_B_END    macro    
                    local    LF33D 
                    LDB      #$40                         ; 
LF33D:              BITB     <VIA_int_flags               ; 
                    BEQ      LF33D                        ; 
                    endm     
MY_MOVE_TO_D        macro    
; optimzed, tweaked not perfect... 'MOVE TO D' makro
                    MY_MOVE_TO_D_START  
                    MY_MOVE_TO_B_END  
                    endm     

;SUB_START

;***************************************************************************
; SUBROUTINE SECTION
;***************************************************************************
;ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
;If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
;- scale $ff -> zero 110 cycles
;- scale $7f -> zero 75 cycles
;- scale $40 -> zero 57 cycles
;- scale $20 -> zero 53 cycles
ZERO_DELAY_ES          EQU      3                            ; delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;U = address of vectorlist
;X = (y,x) position of vectorlist (this will be point 0,0), positioning on screen
;A = scalefactor "Move" (after sync)
;B = scalefactor "Vector" (vectors in vectorlist)
;
;     mode, rel y, rel x, || mode =0x03, intensity                                             
;     mode, rel y, rel x,                                             
;     mode, rel y, rel x,                                             
;     .      .      .                                                
;     .      .      .                                                
;     mode, rel y, rel x,                                             
;     0x02
; where mode has the following meaning:         
; negative draw line                    
; 0 move to specified endpoint                              
; 1 sync (and move to list start and than to place in vectorlist)      
; 2 end
; 3 new intensity, only one data item follows (intensity)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
draw_esynced_list: 
                    pshs     a                            ; remember out different scale factors 
                    pshs     b 
                                                          ; first list entry (first will be a sync + moveto_d, so we just stay here!) 
                    lda      ,u+                          ; this will be a "3" 
doIntChange_es
                    lda      ,u+                          ; intensity
                    _INTENSITY_A
                    bra      nextListEntry_es
sync_es: 
                    cmpa #3
                    beq      doIntChange_es
                    deca                                  ; test if real sync - or end of list (2) 
                    bne      drawdone_es                     ; if end of list -> jump 
; zero integrators
                    ldb      #$CC                         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                    ldb      #ZERO_DELAY_ES                  ; and wait for zeroing to be actually done 
; reset integrators
                    clr      <VIA_port_a                  ; reset integrator offset 
                    lda      #%10000010 
; wait that zeroing surely has the desired effect!
zeroLoop_es: 
                    sta      <VIA_port_b                  ; while waiting, zero offsets 
                    decb     
                    bne      zeroLoop_es 
                    inc      <VIA_port_b 
; unzero is done by moveto_d
                    lda      1,s                          ; scalefactor move 
                    sta      <VIA_t1_cnt_lo               ; to timer t1 (lo= 
                    tfr      x,d                          ; load our coordinates of "entry" of vectorlist 
                    MY_MOVE_TO_D; jsr      Moveto_d                     ; move there 
                    lda      ,s                           ; scale factor vector 
                    sta      <VIA_t1_cnt_lo               ; to timer T1 (lo) 
moveTo_es: 
                    ldd      ,u++                         ; do our "internal" moveto d 
                    beq      nextListEntry_es                ; there was a move 0,0, if so 
                    MY_MOVE_TO_D; jsr      Moveto_d 
nextListEntry_es: 
                    lda      ,u+                          ; load next "mode" byte 
                    beq      moveTo_es                       ; if 0, than we should move somewhere 
                    bpl      sync_es                         ; if still positive it is a 1 pr 2 _> goto sync 
; now we should draw a vector 
                    ldd      ,u++                         ;Get next coordinate pair 
                    STA      <VIA_port_a                  ;Send Y to A/D 
                    CLR      <VIA_port_b                  ;Enable mux 
                    LDA      #$ff                         ;Get pattern byte 
                    INC      <VIA_port_b                  ;Disable mux 
                    STB      <VIA_port_a                  ;Send X to A/D 
                    LDB      #$40                         ;B-reg = T1 interrupt bit 
                    CLR      <VIA_t1_cnt_hi               ;Clear T1H 
                    STA      <VIA_shift_reg               ;Store pattern in shift register 
setPatternLoop_es: 
                    BITB     <VIA_int_flags               ;Wait for T1 to time out 
                    beq      setPatternLoop_es               ; wait till line is finished 
                    CLR      <VIA_shift_reg               ; switch the light off (for sure) 
                    bra      nextListEntry_es 

drawdone_es: 
                    puls     d                            ; correct stack and go back 
                    rts      

;***************************************************************************
;SUB_END

; DATA SECTION
;******************

